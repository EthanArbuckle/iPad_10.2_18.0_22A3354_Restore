void re::AudioSharedSceneManager::unloadAudio(re::AudioSharedSceneManager *this, unint64_t a2)
{
  id v4;
  re *v5;
  NSObject *v6;
  NSObject *v7;
  unint64_t v8;
  __int128 buf;
  uint64_t (*v10)(uint64_t);
  void *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v4 = **((id **)this + 41);
  v5 = (re *)objc_msgSend(v4, "isCancelled");
  if ((v5 & 1) != 0)
  {
    v6 = *re::audioLogObjects(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = a2;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "[RE] [AudioSharedSceneManager] REEngine was deallocated. Cannot unload audio asset: %llu", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    v7 = *((_QWORD *)this + 69);
    *(_QWORD *)&buf = MEMORY[0x24BDAC760];
    *((_QWORD *)&buf + 1) = 3221225472;
    v10 = ___ZN2re18AudioManager_PHASE11unloadAssetEy_block_invoke;
    v11 = &__block_descriptor_48_e5_v8__0l;
    v12 = (char *)this + 16;
    v13 = a2;
    dispatch_async(v7, &buf);
    os_unfair_lock_lock((os_unfair_lock_t)this + 228);
    std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::audio::REPHASEEntity>>>>::__erase_unique<unsigned long long>((_QWORD *)this + 115, &v8);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 228);
  }

}

BOOL re::AudioSharedSceneManager::assetIsLoaded(os_unfair_lock_s *this, unint64_t a2)
{
  os_unfair_lock_s *v3;
  _BOOL8 v4;
  unint64_t v6;

  v6 = a2;
  v3 = this + 228;
  os_unfair_lock_lock(this + 228);
  v4 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>(&this[230]._os_unfair_lock_opaque, &v6) != 0;
  os_unfair_lock_unlock(v3);
  return v4;
}

void re::internal::Callable<re::AudioSharedSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::AudioSharedSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::operator()(uint64_t a1)
{
  uint64_t v3[2];

  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v3);
  re::AudioManager_PHASE::beforeFrameUpdate(*(re::AudioManager_PHASE **)(a1 + 8));
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)22>::end((uint64_t)v3);
}

_QWORD *re::internal::Callable<re::AudioSharedSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED69C00;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::AudioSharedSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED69C00;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::AudioSharedSceneManager::configureEnterFramePhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::AudioSharedSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::AudioSharedSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::operator()(uint64_t a1)
{
  uint64_t v3[2];

  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v3);
  re::AudioManager_PHASE::afterFrameUpdate(*(re::AudioManager_PHASE **)(a1 + 8));
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)22>::end((uint64_t)v3);
}

_QWORD *re::internal::Callable<re::AudioSharedSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED69C58;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::AudioSharedSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED69C58;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::AudioSharedSceneManager::configureCommitPhase(unsigned long const&,std::function<void ()(re::Scheduler::TaskDescriptor)>)::$_0,void ()(float)>::size()
{
  return 16;
}

void std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED69CB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED69CB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  os_unfair_lock_s *v3;

  v3 = *(os_unfair_lock_s **)(a1 + 8);
  os_unfair_lock_lock(v3 + 228);
  std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>>::unordered_map(a2, (uint64_t)&v3[230]);
  os_unfair_lock_unlock(v3 + 228);
}

uint64_t std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0,std::allocator<re::AudioSharedSceneManager::triggerNotification(REAudioNotificationType)::$_0>,std::unordered_map<unsigned long long,std::shared_ptr<re::PersistedAssetData>> ()(void)>::target_type()
{
}

void std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED69D30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED69D30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::operator()(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  id v3;
  re *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  _QWORD *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  uint8_t buf[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v15 = *a2;
  v16 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = **(id **)(v2 + 328);
  v4 = (re *)objc_msgSend(v3, "isCancelled");
  if ((_DWORD)v4)
  {
    v5 = *re::audioLogObjects(v4);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    *(_WORD *)buf = 0;
    v6 = "[RE] [AudioSharedSceneManager] REEngine was deallocated. Cannot assign audio asset to assetGenerators";
    v7 = v5;
    v8 = 2;
    goto LABEL_15;
  }
  if ((_QWORD)v15 && *(_QWORD *)v15)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 912));
    v17 = *(_QWORD *)(v15 + 104);
    *(_QWORD *)buf = &v17;
    v9 = std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v2 + 920, &v17, (uint64_t)&std::piecewise_construct, (_QWORD **)buf);
    std::shared_ptr<std::atomic<re::VideoReturn>>::operator=[abi:nn180100](v9 + 3, (uint64_t *)&v16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 912));
    goto LABEL_8;
  }
  v10 = *re::audioLogObjects(v4);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v14 = *(_QWORD *)(v15 + 104);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v14;
    v6 = "[RE] [AudioSharedSceneManager] Cannot add asset: %llu to assetGenerators with a null generator block.";
    v7 = v10;
    v8 = 12;
LABEL_15:
    _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, v6, buf, v8);
  }
LABEL_8:

  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

uint64_t std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0,std::allocator<re::AudioSharedSceneManager::loadAudio(re::audio::AudioAssetPayloadWrapper &)::$_0>,void ()(std::shared_ptr<re::PersistedAssetData>)>::target_type()
{
}

BOOL re::ecs2::ConstraintComponentStateImpl<re::ecs2::BallSocketJointComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  char *WeakRetained;
  re::PhysicsSimulation *v18;
  const re::ecs2::Entity *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id *v23;
  uint64_t v24;
  re::ecs2::PhysicsSimulationData *v25;
  re::PhysicsSimulation *v26;
  uint64_t v27;
  const __int16 *v28;
  int16x8_t v29;
  int16x8_t *v30;
  int v31;
  int16x8_t *v32;
  uint64_t v33;
  uint16x8_t v34;
  const __int16 *v35;
  int16x8_t v36;
  int v37;
  uint16x8_t v38;
  unint64_t v40;
  unint64_t v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46[2];
  _BYTE v47[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v47, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (v10 = v9,
        v11 = *(_QWORD *)(a3 + 8),
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9),
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11),
        v46[0] = v12,
        (v46[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v43, a5, 0);
    v15 = v43;
    v14 = v44;
    v43 = a4;
    v44 = v15;
    v45 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v22 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v44);
        v23 = *(id **)v22;
        v24 = *(_QWORD *)(*(_QWORD *)v22 + 16);
        v25 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v46, v24);
        if (v25)
          v26 = (re::PhysicsSimulation *)re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v25);
        else
          v26 = 0;
        if ((*(_BYTE *)(v24 + 288) & 1) == 0)
          goto LABEL_34;
        v27 = *(unsigned __int16 *)(v24 + 82);
        if (!*(_WORD *)(v24 + 82))
          goto LABEL_34;
        v28 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        v29 = vld1q_dup_s16(v28);
        v30 = *(int16x8_t **)(v24 + 88);
        v31 = 1;
        v32 = v30;
        v33 = *(unsigned __int16 *)(v24 + 82);
        while (1)
        {
          v34 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v29, *v32), (int8x16_t)xmmword_2260F1E80);
          v34.i16[0] = vmaxvq_u16(v34);
          if (v34.i32[0])
            break;
          v31 -= 8;
          ++v32;
          if (!--v33)
            goto LABEL_25;
        }
        if (v34.u16[0] - v31 < *(unsigned __int16 *)(v24 + 80))
          goto LABEL_34;
LABEL_25:
        v35 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        v36 = vld1q_dup_s16(v35);
        v37 = 1;
        while (1)
        {
          v38 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v36, *v30), (int8x16_t)xmmword_2260F1E80);
          v38.i16[0] = vmaxvq_u16(v38);
          if (v38.i32[0])
            break;
          v37 -= 8;
          ++v30;
          if (!--v27)
            goto LABEL_34;
        }
        if (v38.u16[0] - v37 < *(unsigned __int16 *)(v24 + 80) && v26 != 0)
        {
          WeakRetained = (char *)objc_loadWeakRetained(v23 + 20);
          if (WeakRetained)
          {
            v18 = (re::PhysicsSimulation *)(WeakRetained - 8);

          }
          else
          {
            v18 = 0;
          }
          if (v26 != v18 || re::ecs2::BallSocketJointComponent::needsUpdate((re::ecs2::BallSocketJointComponent *)v23))
          {
            re::ecs2::BallSocketJointComponent::removeFromSimulation(v23);
            re::ecs2::BallSocketJointComponent::addToSimulation((re::ecs2::BallSocketJointComponent *)v23, v26, v19);
          }
          v20 = v43;
          v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v44);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(_QWORD *)(a3 + 32));
        }
        else
        {
LABEL_34:
          v40 = v43;
          v41 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v44);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v40, v41, *(_QWORD *)(a3 + 32));
          re::ecs2::BallSocketJointComponent::removeFromSimulation(v23);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v44);
      }
      while (v44 != a5 || (unsigned __int16)v45 != 0xFFFF || WORD1(v45) != 0xFFFF);
    }
    v16 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v16 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v47);
  return v16;
}

BOOL re::ecs2::ConstraintComponentStateImpl<re::ecs2::HingeJointComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  char *WeakRetained;
  re::PhysicsSimulation *v18;
  const re::ecs2::Entity *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id *v23;
  uint64_t v24;
  re::ecs2::PhysicsSimulationData *v25;
  re::PhysicsSimulation *v26;
  uint64_t v27;
  const __int16 *v28;
  int16x8_t v29;
  int16x8_t *v30;
  int v31;
  int16x8_t *v32;
  uint64_t v33;
  uint16x8_t v34;
  const __int16 *v35;
  int16x8_t v36;
  int v37;
  uint16x8_t v38;
  unint64_t v40;
  unint64_t v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46[2];
  _BYTE v47[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v47, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (v10 = v9,
        v11 = *(_QWORD *)(a3 + 8),
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9),
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11),
        v46[0] = v12,
        (v46[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v43, a5, 0);
    v15 = v43;
    v14 = v44;
    v43 = a4;
    v44 = v15;
    v45 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v22 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v44);
        v23 = *(id **)v22;
        v24 = *(_QWORD *)(*(_QWORD *)v22 + 16);
        v25 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v46, v24);
        if (v25)
          v26 = (re::PhysicsSimulation *)re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v25);
        else
          v26 = 0;
        if ((*(_BYTE *)(v24 + 288) & 1) == 0)
          goto LABEL_34;
        v27 = *(unsigned __int16 *)(v24 + 82);
        if (!*(_WORD *)(v24 + 82))
          goto LABEL_34;
        v28 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        v29 = vld1q_dup_s16(v28);
        v30 = *(int16x8_t **)(v24 + 88);
        v31 = 1;
        v32 = v30;
        v33 = *(unsigned __int16 *)(v24 + 82);
        while (1)
        {
          v34 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v29, *v32), (int8x16_t)xmmword_2260F1E80);
          v34.i16[0] = vmaxvq_u16(v34);
          if (v34.i32[0])
            break;
          v31 -= 8;
          ++v32;
          if (!--v33)
            goto LABEL_25;
        }
        if (v34.u16[0] - v31 < *(unsigned __int16 *)(v24 + 80))
          goto LABEL_34;
LABEL_25:
        v35 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        v36 = vld1q_dup_s16(v35);
        v37 = 1;
        while (1)
        {
          v38 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v36, *v30), (int8x16_t)xmmword_2260F1E80);
          v38.i16[0] = vmaxvq_u16(v38);
          if (v38.i32[0])
            break;
          v37 -= 8;
          ++v30;
          if (!--v27)
            goto LABEL_34;
        }
        if (v38.u16[0] - v37 < *(unsigned __int16 *)(v24 + 80) && v26 != 0)
        {
          WeakRetained = (char *)objc_loadWeakRetained(v23 + 20);
          if (WeakRetained)
          {
            v18 = (re::PhysicsSimulation *)(WeakRetained - 8);

          }
          else
          {
            v18 = 0;
          }
          if (v26 != v18 || re::ecs2::BallSocketJointComponent::needsUpdate((re::ecs2::BallSocketJointComponent *)v23))
          {
            re::ecs2::HingeJointComponent::removeFromSimulation(v23);
            re::ecs2::HingeJointComponent::addToSimulation((re::ecs2::HingeJointComponent *)v23, v26, v19);
          }
          v20 = v43;
          v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v44);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(_QWORD *)(a3 + 32));
        }
        else
        {
LABEL_34:
          v40 = v43;
          v41 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v44);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v40, v41, *(_QWORD *)(a3 + 32));
          re::ecs2::HingeJointComponent::removeFromSimulation(v23);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v44);
      }
      while (v44 != a5 || (unsigned __int16)v45 != 0xFFFF || WORD1(v45) != 0xFFFF);
    }
    v16 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v16 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v47);
  return v16;
}

BOOL re::ecs2::ConstraintComponentStateImpl<re::ecs2::PhysicsConstraintsComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL8 v16;
  char *WeakRetained;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::PhysicsSimulationData *v24;
  uint64_t v25;
  uint64_t v26;
  const __int16 *v27;
  int16x8_t v28;
  int16x8_t *v29;
  int v30;
  int16x8_t *v31;
  uint64_t v32;
  uint16x8_t v33;
  const __int16 *v34;
  int16x8_t v35;
  int v36;
  uint16x8_t v37;
  unint64_t v39;
  unint64_t v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45[2];
  _BYTE v46[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v46, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (v10 = v9,
        v11 = *(_QWORD *)(a3 + 8),
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9),
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11),
        v45[0] = v12,
        (v45[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v42, a5, 0);
    v15 = v42;
    v14 = v43;
    v42 = a4;
    v43 = v15;
    v44 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v21 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v43);
        v22 = *(_QWORD *)v21;
        v23 = *(_QWORD *)(*(_QWORD *)v21 + 16);
        v24 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v45, v23);
        if (v24)
          v25 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v24);
        else
          v25 = 0;
        if ((*(_BYTE *)(v23 + 288) & 1) == 0)
          goto LABEL_34;
        v26 = *(unsigned __int16 *)(v23 + 82);
        if (!*(_WORD *)(v23 + 82))
          goto LABEL_34;
        v27 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        v28 = vld1q_dup_s16(v27);
        v29 = *(int16x8_t **)(v23 + 88);
        v30 = 1;
        v31 = v29;
        v32 = *(unsigned __int16 *)(v23 + 82);
        while (1)
        {
          v33 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v28, *v31), (int8x16_t)xmmword_2260F1E80);
          v33.i16[0] = vmaxvq_u16(v33);
          if (v33.i32[0])
            break;
          v30 -= 8;
          ++v31;
          if (!--v32)
            goto LABEL_25;
        }
        if (v33.u16[0] - v30 < *(unsigned __int16 *)(v23 + 80))
          goto LABEL_34;
LABEL_25:
        v34 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                              + 16);
        v35 = vld1q_dup_s16(v34);
        v36 = 1;
        while (1)
        {
          v37 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v35, *v29), (int8x16_t)xmmword_2260F1E80);
          v37.i16[0] = vmaxvq_u16(v37);
          if (v37.i32[0])
            break;
          v36 -= 8;
          ++v29;
          if (!--v26)
            goto LABEL_34;
        }
        if (v37.u16[0] - v36 < *(unsigned __int16 *)(v23 + 80) && v25 != 0)
        {
          WeakRetained = (char *)objc_loadWeakRetained((id *)(v22 + 128));
          if (WeakRetained)
          {
            v18 = WeakRetained - 8;

          }
          else
          {
            v18 = 0;
          }
          if ((char *)v25 != v18 || *(_BYTE *)(v22 + 25))
            re::ecs2::PhysicsConstraintsComponent::syncConstraintArrays((re::ecs2::PhysicsConstraintsComponent *)v22, 0);
          v19 = v42;
          v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v43);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(_QWORD *)(a3 + 32));
        }
        else
        {
LABEL_34:
          v39 = v42;
          v40 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v43);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v39, v40, *(_QWORD *)(a3 + 32));
          re::ecs2::PhysicsConstraintsComponent::syncConstraintArrays((re::ecs2::PhysicsConstraintsComponent *)v22, 1);
        }
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v43);
      }
      while (v43 != a5 || (unsigned __int16)v44 != 0xFFFF || WORD1(v44) != 0xFFFF);
    }
    v16 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v16 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v46);
  return v16;
}

uint64_t re::ecs2::ECSForceEffectEventDelegate::computeForces(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v15;
  re::EventBus *v16;
  re::EventBus::EventInfo *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t Type;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const char *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 8))
  {
    v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
    v4 = *(unsigned int *)(*(_QWORD *)(result + 16) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(result + 32)));
    if ((_DWORD)v4 != 0x7FFFFFFF)
    {
      v6 = *(_QWORD *)(result + 24);
      if (*(_QWORD *)(v6 + 48 * v4 + 16) == a3)
      {
LABEL_6:
        v8 = v6 + 48 * v4;
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v8 + 24);
          do
          {
            v11 = v10;
            v10 = *(_QWORD *)(v10 + 24);
          }
          while (v10);
          v12 = *(_QWORD *)(v11 + 16);
          v13 = *(const void **)(v6 + 48 * v4 + 32);
          if (v12 && v13 != 0)
          {
            v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 56) + 32))(*(_QWORD *)(v12 + 56));
            result = re::ServiceLocator::serviceOrNull<re::Engine>(v15);
            if (result)
            {
              v16 = *(re::EventBus **)(result + 1376);
              if (v16)
              {
                v17 = re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityForceEffectComputeForcesEvent>(*(_QWORD *)(result + 1376), v9, (unint64_t)v13);
                v18 = (char *)v17
                    + (_QWORD)re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityForceEffectComputeForcesEvent>((uint64_t)v16, v9, 0);
                v19 = (char *)re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityForceEffectComputeForcesEvent>((uint64_t)v16, 0, (unint64_t)v13)+ (_QWORD)v18;
                result = (uint64_t)re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityForceEffectComputeForcesEvent>((uint64_t)v16, 0, 0);
                if (&v19[result])
                {
                  v32 = 0u;
                  v33 = 0u;
                  v34 = 0u;
                  v35 = 0u;
                  v40 = 0;
                  v38 = 0u;
                  v39 = 0u;
                  v36 = 0u;
                  v37 = 0u;
                  v31 = v9;
                  LODWORD(v32) = *(_DWORD *)(a2 + 8);
                  *((_QWORD *)&v32 + 1) = *(_QWORD *)(a2 + 16);
                  v20 = *(_QWORD *)(a2 + 32);
                  *(_QWORD *)&v33 = *(_QWORD *)(a2 + 24);
                  *((_QWORD *)&v33 + 1) = v20;
                  v21 = *(_QWORD *)(a2 + 64);
                  *(_QWORD *)&v34 = *(_QWORD *)(a2 + 48);
                  *((_QWORD *)&v34 + 1) = v21;
                  v22 = *(_QWORD *)(a2 + 96);
                  *(_QWORD *)&v35 = *(_QWORD *)(a2 + 80);
                  *((_QWORD *)&v35 + 1) = v22;
                  v23 = *(_QWORD *)(a2 + 128);
                  *(_QWORD *)&v36 = *(_QWORD *)(a2 + 112);
                  *((_QWORD *)&v36 + 1) = v23;
                  v24 = *(_QWORD *)(a2 + 160);
                  *(_QWORD *)&v37 = *(_QWORD *)(a2 + 144);
                  *((_QWORD *)&v37 + 1) = v24;
                  v25 = *(_QWORD *)(a2 + 192);
                  *(_QWORD *)&v38 = *(_QWORD *)(a2 + 176);
                  *((_QWORD *)&v38 + 1) = v25;
                  v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ForceEffectComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                  if (v26)
                  {
                    v27 = *(_QWORD *)(v6 + 48 * v4 + 40);
                    v28 = *(_QWORD *)(v26 + 48);
                    if (v28 <= v27)
                    {
                      v41 = 0;
                      v53 = 0u;
                      v54 = 0u;
                      v51 = 0u;
                      v52 = 0u;
                      v50 = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      v42 = 136315906;
                      v43 = "operator[]";
                      v44 = 1024;
                      v45 = 797;
                      v46 = 2048;
                      v47 = v27;
                      v48 = 2048;
                      v49 = v28;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                    }
                    v29 = (_QWORD *)(*(_QWORD *)(v26 + 64) + 272 * v27);
                    *(_QWORD *)&v39 = v29[29];
                    *((_QWORD *)&v39 + 1) = v29[27];
                    v40 = v29[32];
                  }
                  Type = re::EventBus::getTypeId<REEntityForceEffectComputeForcesEvent>();
                  return re::EventBus::publish(v16, v9, Type, (uint64_t)&v31, 0x90uLL, v13);
                }
              }
            }
          }
        }
      }
      else
      {
        while (1)
        {
          v7 = *(_DWORD *)(v6 + 48 * v4 + 8);
          v4 = v7 & 0x7FFFFFFF;
          if ((v7 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v6 + 48 * v4 + 16) == a3)
            goto LABEL_6;
        }
      }
    }
  }
  return result;
}

uint64_t re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 4 * v4);
  if ((_DWORD)v6 == 0x7FFFFFFF)
    return 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v8 + 48 * v6 + 16) != v2)
  {
    while (1)
    {
      v9 = v6;
      LODWORD(v6) = *(_DWORD *)(v8 + 48 * v6 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v6 == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v8 + 48 * v6 + 16) == v2)
      {
        *(_DWORD *)(v8 + 48 * v9 + 8) = *(_DWORD *)(v8 + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 48 * v6 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v8 + 48 * v6 + 8) & 0x7FFFFFFF;
LABEL_9:
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v10 + 48 * v6;
  v14 = *(_DWORD *)(v11 + 8);
  v13 = (int *)(v11 + 8);
  v12 = v14;
  if (v14 < 0)
  {
    *v13 = v12 & 0x7FFFFFFF;
    v10 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v10 + 48 * v6 + 8);
  }
  v15 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v10 + 48 * v6 + 8) = *(_DWORD *)(a1 + 36) | v12 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v15 + 1;
  return 1;
}

uint64_t re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::addNew(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 48 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 48 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 48 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 48 * v10;
  return v12 + 24;
}

void re::ecs2::ECSForceEffectEventDelegate::~ECSForceEffectEventDelegate(re::ecs2::ECSForceEffectEventDelegate *this)
{
  *(_QWORD *)this = &off_24ED69DB0;
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_24ED69DB0;
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ECSForceEffectEventDelegate::transformFromPhysics(re::ecs2::ECSForceEffectEventDelegate *this)
{
  return (uint64_t)this + 64;
}

uint64_t re::ecs2::ECSForceEffectEventDelegate::transformToPhysics(re::ecs2::ECSForceEffectEventDelegate *this)
{
  return (uint64_t)this + 128;
}

re::EventBus::EventInfo *re::EventBus::subscriptionCountInternal<re::ecs2::Entity,REEntityForceEffectComputeForcesEvent>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  re::EventBus::EventInfo *result;
  uint64_t Type;

  Type = re::EventBus::getTypeId<REEntityForceEffectComputeForcesEvent>();
  v6 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), &Type);
  if (v6 == -1)
    return 0;
  result = *(re::EventBus::EventInfo **)(*(_QWORD *)(a1 + 32) + 48 * v6 + 8);
  if (result)
  {
    result = (re::EventBus::EventInfo *)re::EventBus::EventInfo::getSubscriptions(result, a2, a3);
    if (result)
      return (re::EventBus::EventInfo *)*((_QWORD *)result + 15);
  }
  return result;
}

uint64_t re::EventBus::getTypeId<REEntityForceEffectComputeForcesEvent>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)qword_254112660);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(qword_254112660))
  {
    _MergedGlobals_297 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"37REEntityForceEffectComputeForcesEvent" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(qword_254112660);
  }
  return _MergedGlobals_297;
}

uint64_t re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __int128 *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 48 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 16) + 48 * v9;
  v14 = *a5;
  *(_QWORD *)(v13 + 40) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(v13 + 24) = v14;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 16);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<void *,re::ecs2::CustomForceEffectIdentifier,re::Hash<void *>,re::EqualTo<void *>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 48 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 48 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 48 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v17 + 16) = *(_QWORD *)v13;
            v21 = *(_QWORD *)(a1 + 16) + 48 * v17;
            v22 = *(_OWORD *)(v13 + 8);
            *(_QWORD *)(v21 + 40) = *(_QWORD *)(v13 + 24);
            *(_OWORD *)(v21 + 24) = v22;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 48;
          --v10;
        }
        while (v10);
      }
      _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

re::ecs2::OpacityManagerStateTracking *re::ecs2::OpacityManagerStateTracking::OpacityManagerStateTracking(re::ecs2::OpacityManagerStateTracking *this)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[5];

  v5[4] = *MEMORY[0x24BDAC8D0];
  v2 = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::HierarchyStateTracking((uint64_t)this);
  *(_QWORD *)v2 = &off_24ED69E10;
  *(_QWORD *)(v2 + 296) = 0;
  *(_OWORD *)(v2 + 248) = 0u;
  v2 += 248;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[2] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[3] = re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v4[0] = v5;
  v4[1] = 4;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)v2, (uint64_t)v4);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::HierarchyStateTracking(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;

  *(_QWORD *)a1 = off_24ED69EF0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v2 = a1 + 56;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v3 = a1 + 104;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  v4 = a1 + 152;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  v5 = a1 + 200;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

void re::ecs2::OpacityManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  __int128 *v31;
  __int128 v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  _OWORD v63[2];
  int v64;
  uint64_t v65;
  _BYTE v66[120];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;

  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v66);
  v64 = 0;
  memset(v63, 0, sizeof(v63));
  v65 = 0x7FFFFFFFLL;
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v63, (uint64_t)v66, 3);
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 6;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 16);
    v60 = (_QWORD *)(a1 + 56);
    __asm { FMOV            V8.2S, #1.0 }
    v58 = *(_DWORD *)(a2 + 32);
    while (1)
    {
      v62 = 0;
      v62 = *(_QWORD *)(v9 + 24 * v8 + 16);
      if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)v63, (uint64_t *)&v62))
      {
        v14 = v62;
        v15 = *(_QWORD *)(v62 + 24);
        if (v15 && (*(_BYTE *)(v15 + 288) & 0x80) == 0)
        {
          while (1)
          {
            v61 = v15;
            if (re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)v63, &v61)|| re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a2, &v61))
            {
              break;
            }
            v15 = *(_QWORD *)(v61 + 24);
            if (!v15 || (*(_BYTE *)(v15 + 288) & 0x80) != 0)
            {
              v14 = v62;
              goto LABEL_17;
            }
          }
          v26 = v62;
          while (1)
          {
            v80 = v26;
            if (v61 == v26)
              break;
            re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)v63, &v80);
            v26 = *(_QWORD *)(v80 + 24);
            if (v26 && (*(_BYTE *)(v26 + 288) & 0x80) != 0)
              v26 = 0;
          }
          goto LABEL_97;
        }
LABEL_17:
        v61 = 0;
        if ((*(_BYTE *)(v14 + 288) & 1) != 0)
          break;
      }
LABEL_97:
      v9 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v5 + 1))
        v56 = v5 + 1;
      else
        v56 = *(_DWORD *)(a2 + 32);
      while (1)
      {
        v8 = (v5 + 1);
        if (v56 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v57 = v8;
        if ((*(_DWORD *)(v9 + 24 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_104;
      }
      v57 = v56;
LABEL_104:
      LODWORD(v5) = v57;
      if ((_DWORD)v4 == v57)
        goto LABEL_105;
    }
    v16 = *(_QWORD **)(a1 + 296);
    if (*v60)
    {
      v17 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27));
      v18 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v17 ^ (v17 >> 31)) % *(unsigned int *)(a1 + 80)));
      if ((_DWORD)v18 != 0x7FFFFFFF)
      {
        v19 = *(_QWORD *)(a1 + 72);
        while (*(_QWORD *)(v19 + 48 * v18 + 16) != v14)
        {
          LODWORD(v18) = *(_DWORD *)(v19 + 48 * v18 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v18 == 0x7FFFFFFF)
            goto LABEL_23;
        }
        goto LABEL_97;
      }
    }
LABEL_23:
    (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v16 + 8))(&v80, *v16, v14);
    if ((_BYTE)v80)
      v20 = v81;
    else
      v20 = 0;
    v59 = v20;
    v21 = *(_QWORD *)(v14 + 24);
    if (v21)
    {
      while (1)
      {
        if ((*(_BYTE *)(v21 + 288) & 0x80) != 0
          || (((*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v16 + 8))(&v80, *v16, v21), (_BYTE)v80)? (v22 = v81): (v22 = 0), v59 != v22))
        {
          v21 = 0;
          goto LABEL_46;
        }
        if (*v60)
        {
          v23 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v21 ^ (v21 >> 30))) >> 27));
          v24 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v23 ^ (v23 >> 31)) % *(unsigned int *)(a1 + 80)));
          if ((_DWORD)v24 != 0x7FFFFFFF)
            break;
        }
LABEL_37:
        v21 = *(_QWORD *)(v21 + 24);
        if (!v21)
          goto LABEL_46;
      }
      v25 = *(_QWORD *)(a1 + 72);
      while (*(_QWORD *)(v25 + 48 * v24 + 16) != v21)
      {
        LODWORD(v24) = *(_DWORD *)(v25 + 48 * v24 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v24 == 0x7FFFFFFF)
          goto LABEL_37;
      }
      v28 = v25 + 48 * v24;
      v27 = *(_QWORD *)(v28 + 32);
      v21 = *(_QWORD *)(v28 + 24);
    }
    else
    {
LABEL_46:
      v27 = _D8;
    }
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v80);
    v73 = 0;
    v74 = 0;
    v75 = 1;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    v79 = 0;
    re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::init((uint64_t)&v73, (uint64_t)&v80, 1uLL);
    *(_QWORD *)&v71 = v14;
    *((_QWORD *)&v71 + 1) = v21;
    *(_QWORD *)&v72 = v27;
    *((_QWORD *)&v72 + 1) = v59;
    v29 = re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::add((uint64_t)&v73, (uint64_t)&v71);
    v30 = v78;
    if (v78)
    {
      while (1)
      {
        v31 = (__int128 *)re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[]((uint64_t)&v73, --v30);
        v32 = v31[1];
        v71 = *v31;
        v72 = v32;
        re::BucketArray<re::ecs2::RenderPassGroupManagerStateTracking::buildRenderPassGroupsForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityRenderPassGroup,32ul>::operator[]((uint64_t)&v73, v30);
        v78 = v30;
        ++v79;
        v33 = v71;
        if ((*(_BYTE *)(v71 + 288) & 1) != 0)
          break;
LABEL_84:
        if (!v30)
          goto LABEL_85;
      }
      v34 = *(float **)(v71 + 152);
      if (v34)
      {
        v35 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v71 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v36 = v34[7];
        if (v35)
          *((float *)&v72 + 1) = v36 * *((float *)&v72 + 1);
        else
          *(float *)&v72 = v36 * *(float *)&v72;
        re::ecs2::HierarchicalFadeComponent::getFadeGroupID((re::ecs2::HierarchicalFadeComponent *)v34, (uint64_t)&v67);
        if ((_BYTE)v67)
          v38 = &v68;
        else
          v38 = (uint64_t *)&v71 + 1;
        v37 = *v38;
        *((_QWORD *)&v71 + 1) = *v38;
        v33 = v71;
      }
      else
      {
        v37 = *((_QWORD *)&v71 + 1);
      }
      v29.n128_u32[0] = v72;
      if (*(float *)&v72 != 1.0 || v37 != 0 || *((float *)&v72 + 1) != 1.0)
      {
        v67 = v37;
        v68 = v72;
        LOBYTE(v69) = 0;
        v41 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) >> 27));
        v42 = v41 ^ (v41 >> 31);
        if (*v60)
        {
          v43 = v42 % *(unsigned int *)(a1 + 80);
          v44 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v43);
          if ((_DWORD)v44 != 0x7FFFFFFF)
          {
            v45 = *(_QWORD *)(a1 + 72);
            while (*(_QWORD *)(v45 + 48 * v44 + 16) != v33)
            {
              LODWORD(v44) = *(_DWORD *)(v45 + 48 * v44 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v44 == 0x7FFFFFFF)
                goto LABEL_73;
            }
            goto LABEL_74;
          }
        }
        else
        {
          LODWORD(v43) = 0;
        }
LABEL_73:
        re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove((uint64_t)v60, v43, v42, &v71, (uint64_t)&v67);
        ++*(_DWORD *)(a1 + 96);
        v33 = v71;
      }
LABEL_74:
      v46 = *(_QWORD *)(v33 + 328);
      if (v46)
      {
        v47 = *(_QWORD **)(v33 + 344);
        v48 = 8 * v46;
        do
        {
          v49 = *v47;
          (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*v16 + 8))(&v67, *v16, *v47);
          if ((_BYTE)v67)
            v50 = v68;
          else
            v50 = 0;
          if (*((_QWORD *)&v72 + 1) == v50)
          {
            v67 = v49;
            v68 = *((_QWORD *)&v71 + 1);
            v69 = v72;
          }
          else
          {
            v67 = v49;
            v68 = 0;
            v69 = _D8;
          }
          v70 = v50;
          v29 = re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::add((uint64_t)&v73, (uint64_t)&v67);
          ++v47;
          v48 -= 8;
        }
        while (v48);
        v30 = v78;
      }
      goto LABEL_84;
    }
LABEL_85:
    v51 = v73;
    if (v74)
    {
      v52 = v77;
      v53 = v75;
      v54 = v74 - 1;
      do
      {
        if ((v53 & 1) != 0)
          v55 = &v76;
        else
          v55 = v52;
        (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v51 + 40))(v51, v55[v54], v29);
        v53 += 2;
        v75 = v53;
        --v54;
      }
      while (v54 != -1);
    }
    else
    {
      if (!v73)
      {
LABEL_96:
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v80);
        LODWORD(v4) = v58;
        goto LABEL_97;
      }
      LOBYTE(v53) = v75;
    }
    if ((v53 & 1) == 0)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v51 + 40))(v51, v77);
    goto LABEL_96;
  }
LABEL_105:
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v63);
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v66);
}

__n128 re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::setBucketsCapacity((_QWORD *)a1, (v4 + 32) >> 5);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v4 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v8 = (_OWORD *)(v7 + 32 * (v4 & 0x1F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  return result;
}

void re::ecs2::OpacityManager::updateOpacityData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 304) = a2;
  v4 = a1 + 112;
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(a1 + 8, a1 + 112);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v4);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v3 + 200);
  *(_QWORD *)(v3 + 296) = 0;
}

uint64_t re::ecs2::OpacityManager::getResolvedFadeOpacity(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v2 = re::HashTable<unsigned long long,re::ecs2::TransientExternalStreamControllerState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 64, &v5);
  if (!v2)
    return 1065353216;
  v3 = 20;
  if (!*(_BYTE *)(v2 + 16))
    v3 = 12;
  return COERCE_UNSIGNED_INT(*(float *)(v2 + 8) * *(float *)(v2 + v3));
}

float re::ecs2::OpacityManager::computeAndGetResolvedFadeOpacity(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  float result;
  uint64_t v6;

  v3 = a1[39];
  if (!v3)
    return -1.0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  a1[38] = &v6;
  (*(void (**)(_QWORD *, _QWORD *))(a1[1] + 32))(a1 + 1, a1 + 14);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)(a1 + 14));
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)(a1 + 26));
  a1[38] = 0;
  LODWORD(result) = re::ecs2::OpacityManager::getResolvedFadeOpacity((uint64_t)a1, a2);
  return result;
}

void re::ecs2::OpacityManagerStateTracking::~OpacityManagerStateTracking(re::ecs2::OpacityManagerStateTracking *this)
{
  re::ecs2::OpacityManagerStateTracking::~OpacityManagerStateTracking(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 34);
  if (v2)
  {
    if (*((_QWORD *)this + 35))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 36));
      *((_QWORD *)this + 35) = 0;
      *((_QWORD *)this + 36) = 0;
    }
    *((_QWORD *)this + 34) = 0;
  }
  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    if (*((_QWORD *)this + 32))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 33));
      *((_QWORD *)this + 32) = 0;
      *((_QWORD *)this + 33) = 0;
    }
    *((_QWORD *)this + 31) = 0;
  }
  *(_QWORD *)this = off_24ED69EF0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 13);
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1);
}

uint64_t re::ecs2::OpacityManagerStateTracking::trackedComponents(re::ecs2::OpacityManagerStateTracking *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t re::ecs2::OpacityManagerStateTracking::trackedActivationComponents(re::ecs2::OpacityManagerStateTracking *this)
{
  return *((_QWORD *)this + 36);
}

void re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE v28[120];

  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
    v22[0] = 0;
    v22[1] = 0;
    v23 = 1;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    v27 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
    v4 = v26;
    while (v4)
    {
      v5 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, v4 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, v26 - 1);
      v4 = --v26;
      ++v27;
      if (*(_QWORD *)(a1 + 56))
      {
        v6 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
        v7 = (v6 ^ (v6 >> 31)) % *(unsigned int *)(a1 + 80);
        v8 = *(_QWORD *)(a1 + 64);
        v9 = *(unsigned int *)(v8 + 4 * v7);
        if ((_DWORD)v9 != 0x7FFFFFFF)
        {
          v10 = *(_QWORD *)(a1 + 72);
          if (*(_QWORD *)(v10 + 48 * v9 + 16) == v5)
          {
            *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v10 + 48 * v9 + 8) & 0x7FFFFFFF;
LABEL_10:
            v12 = *(_QWORD *)(a1 + 72);
            v13 = v12 + 48 * v9;
            v16 = *(_DWORD *)(v13 + 8);
            v15 = (int *)(v13 + 8);
            v14 = v16;
            if (v16 < 0)
            {
              *v15 = v14 & 0x7FFFFFFF;
              v12 = *(_QWORD *)(a1 + 72);
              v14 = *(_DWORD *)(v12 + 48 * v9 + 8);
            }
            *(_DWORD *)(v12 + 48 * v9 + 8) = *(_DWORD *)(a1 + 92) | v14 & 0x80000000;
            --*(_DWORD *)(a1 + 84);
            v17 = *(_DWORD *)(a1 + 96) + 1;
            *(_DWORD *)(a1 + 92) = v9;
            *(_DWORD *)(a1 + 96) = v17;
          }
          else
          {
            while (1)
            {
              v11 = v9;
              v9 = *(_DWORD *)(v10 + 48 * v9 + 8) & 0x7FFFFFFF;
              if (v9 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v10 + 48 * v9 + 16) == v5)
              {
                *(_DWORD *)(v10 + 48 * v11 + 8) = *(_DWORD *)(v10 + 48 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 48 * v9 + 8) & 0x7FFFFFFF;
                goto LABEL_10;
              }
            }
          }
        }
      }
      v18 = *(_QWORD *)(v5 + 328);
      if (v18)
      {
        v19 = *(uint64_t **)(v5 + 344);
        v20 = 8 * v18;
        do
        {
          v21 = *v19++;
          *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
          v20 -= 8;
        }
        while (v20);
        v4 = v26;
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
    if (v22[0])
    {
      if ((v23 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
  }
}

void re::ecs2::OpacityManager::~OpacityManager(re::ecs2::OpacityManager *this)
{
  re::ecs2::OpacityManagerStateTracking::~OpacityManagerStateTracking((re::ecs2::OpacityManager *)((char *)this + 8));
}

{
  re::ecs2::OpacityManagerStateTracking::~OpacityManagerStateTracking((re::ecs2::OpacityManager *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::OpacityManager::fadeOpacityPerEntity(re::ecs2::OpacityManager *this)
{
  return (uint64_t)this + 64;
}

uint64_t re::ecs2::OpacityManager::registerScene(re::ecs2::OpacityManager *this, re::EventBus **a2)
{
  re::EventBus *v2;
  re *v3;
  re *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  re *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  re *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  re *v24;
  re *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  re *v30;
  re *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t result;
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  re::ecs2::Scene *v44;
  _BYTE v45[24];
  uint64_t v46;
  re *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v44 = (re::ecs2::Scene *)a2;
  v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    _os_crash();
    __break(1u);
  }
  v38[0] = 0;
  v3 = (re::ecs2::OpacityManager *)((char *)this + 8);
  v38[1] = 0;
  v39 = 1;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v43 = 0;
  v4 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v3 + 16))(v3);
  if (v5)
  {
    v6 = (uint64_t *)v4;
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      v46 = re::globalAllocators(v4)[2];
      v9 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
      *(_QWORD *)v9 = &off_24ED69F30;
      *((_QWORD *)v9 + 1) = v3;
      *((_QWORD *)v9 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      *((_QWORD *)v9 + 3) = 0;
      v47 = v9;
      v10 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v45, v8, 0);
      v12 = v11;
      v13 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
      *v13 = v10;
      v13[1] = v12;
      if (v47)
      {
        (**(void (***)(re *))v47)(v47);
        if (v47 != (re *)v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
      }
      re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v3, v2, (uint64_t)v38, v8);
      v4 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v3, v2, (uint64_t)v38, v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v14 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v3 + 24))(v3);
  if (v15)
  {
    v16 = (uint64_t *)v14;
    v17 = 8 * v15;
    do
    {
      v18 = *v16++;
      re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v3, v2, (uint64_t)v38, v18);
      v14 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v3, v2, (uint64_t)v38, v18);
      v17 -= 8;
    }
    while (v17);
  }
  v46 = re::globalAllocators(v14)[2];
  v19 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
  *(_QWORD *)v19 = &off_24ED6A038;
  *((_QWORD *)v19 + 1) = v3;
  *((_QWORD *)v19 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  *((_QWORD *)v19 + 3) = 0;
  v47 = v19;
  v20 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v45, 0, 0);
  v22 = v21;
  v23 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *v23 = v20;
  v23[1] = v22;
  v24 = v47;
  if (v47)
  {
    v24 = (re *)(**(uint64_t (***)(re *))v47)(v47);
    if (v47 != (re *)v45)
      v24 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  }
  v46 = re::globalAllocators(v24)[2];
  v25 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
  *(_QWORD *)v25 = &off_24ED6A090;
  *((_QWORD *)v25 + 1) = v3;
  *((_QWORD *)v25 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  *((_QWORD *)v25 + 3) = 0;
  v47 = v25;
  v26 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v45, 0, 0);
  v28 = v27;
  v29 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *v29 = v26;
  v29[1] = v28;
  v30 = v47;
  if (v47)
  {
    v30 = (re *)(**(uint64_t (***)(re *))v47)(v47);
    if (v47 != (re *)v45)
      v30 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  }
  v46 = re::globalAllocators(v30)[2];
  v31 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
  *(_QWORD *)v31 = &off_24ED6A0E8;
  *((_QWORD *)v31 + 1) = v3;
  *((_QWORD *)v31 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  *((_QWORD *)v31 + 3) = 0;
  v47 = v31;
  v32 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v45, 0, 0);
  v34 = v33;
  v35 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *v35 = v32;
  v35[1] = v34;
  if (v47)
  {
    (**(void (***)(re *))v47)(v47);
    if (v47 != (re *)v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  }
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 160, (uint64_t *)&v44, (uint64_t)v38);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 16, (uint64_t *)&v44);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v38);
  result = v38[0];
  if (v38[0])
  {
    if ((v39 & 1) == 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v38[0] + 40))();
  }
  return result;
}

uint64_t re::ecs2::OpacityManager::unregisterScene(re::ecs2::OpacityManager *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  re::ecs2::Scene *v14;

  v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 16, (uint64_t *)&v14);
  v3 = *((_QWORD *)v14 + 13);
  v4 = *(_QWORD *)(v3 + 328);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 344);
    v6 = 8 * v4;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)v5 + 288) & 1) != 0)
        (*(void (**)(char *))(*((_QWORD *)this + 1) + 40))((char *)this + 8);
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  v7 = (char *)this + 160;
  result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    v9 = *((_QWORD *)v14 + 36);
    if (v9)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 40);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::trackedComponents()
{
  return 0;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::trackedActivationComponents()
{
  return 0;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED69F88;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED69FE0;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69F30;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69F30;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69F88;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69F88;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69FE0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69FE0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6A038;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6A038;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if (!*(_BYTE *)(a2 + 371))
  {
    v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6A090;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6A090;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6A0E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6A0E8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::FadeOpacity>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_15, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::OpacityManagerStateTracking::buildOpacityForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityOpacity,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 1024, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 48 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = v13 + 48 * v9;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a5;
  v15 = *(unsigned __int8 *)(a5 + 16);
  *(_BYTE *)(v14 + 40) = v15;
  if (v15)
    *(_DWORD *)(v13 + 48 * v9 + 44) = *(_DWORD *)(a5 + 20);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Entity const*,re::ecs2::FadeOpacity,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

__n128 re::ecs2::ibrutils::inferContentPlaneGeometry@<Q0>(re::ecs2::ibrutils *this@<X0>, const re::ecs2::Entity *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  re::ecs2::TransformComponent *v9;
  re::ecs2::TransformComponent **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __n128 result;
  _QWORD *v17;
  __n128 v18;
  uint64_t v19;
  uint64x2_t v20;
  float32x4_t v21;
  float v22;
  uint32x4_t v23;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  double v29;
  float v30;
  double v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float32x4_t v43;
  float32x4_t v44;
  float32_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  __n128 v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  _OWORD v61[4];
  simd_float4 v62;
  simd_float4 v63;
  simd_float4 v64;
  simd_float4 v65;
  simd_float4x4 v66;

  v5 = atomic_load((unsigned __int8 *)_MergedGlobals_298);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(_MergedGlobals_298))
  {
    xmmword_254112680 = 0u;
    unk_254112690 = 0u;
    xmmword_2541126A0 = 0u;
    unk_2541126B0 = xmmword_226129CD0;
    __asm { FMOV            V0.2S, #-1.0 }
    *(_QWORD *)&xmmword_2541126C0 = _D0;
    __cxa_guard_release(_MergedGlobals_298);
  }
  v6 = *((_QWORD *)this + 22);
  if (v6 && (v7 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v6 + 32))) != 0)
  {
    v8 = (float32x4_t *)v7;
    v9 = (re::ecs2::TransformComponent *)*((_QWORD *)this + 30);
    re::ecs2::TransformComponent::worldMatrix4x4F(v9, 1, (uint64_t)&v57);
    v10 = (re::ecs2::TransformComponent **)*((_QWORD *)v9 + 2);
    if (v10)
    {
      re::ecs2::TransformComponent::worldOrientation(v10, (const re::ecs2::Entity *)1);
      v12 = v11;
      v14 = v13;
    }
    else
    {
      v17 = (_QWORD *)((char *)v9 + 48);
      v12 = *((_QWORD *)v9 + 6);
      v14 = v17[1];
    }
    v62 = (simd_float4)xmmword_2260E5F10;
    v63 = (simd_float4)xmmword_2260E5F20;
    v64 = (simd_float4)xmmword_2260E5F40;
    v65 = (simd_float4)xmmword_2260E5D70;
    re::MeshAsset::aabbFromMesh(v8, (float32x4_t *)&v62, (uint64_t)&v55);
    v19 = 0;
    v20 = (uint64x2_t)v60;
    v21 = vmulq_f32(v57, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v59, v59, 0xCuLL), v59, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v58, v58), (int8x16_t)v58, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), v59, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v58, (int8x16_t)v58, 0xCuLL), (int8x16_t)v58, 8uLL)));
    v22 = -1.0;
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0] > 0.0)v22 = 1.0;
    v23 = (uint32x4_t)vcgtq_f32(v55, v56);
    v23.i32[3] = v23.i32[2];
    _ZF = (vmaxvq_u32(v23) & 0x80000000) == 0;
    v25 = vmulq_f32(v57, v57);
    v25.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]);
    v26 = vmulq_f32((float32x4_t)v58, (float32x4_t)v58);
    v25.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
    v18.n128_u64[0] = (unint64_t)vmul_f32(vmaxnm_f32(vsub_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v55.f32), 0), vmul_n_f32(*(float32x2_t *)v25.f32, v22));
    v27 = 0.0;
    v28 = vaddq_f32(v56, v55);
    v29 = COERCE_DOUBLE(vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v28.f32), (float32x2_t)0x3F0000003F000000));
    v30 = vmuls_lane_f32(0.5, v28, 2);
    if (_ZF)
      v27 = v30;
    if (_ZF)
      v31 = v29;
    else
      v31 = 0.0;
    v48 = vaddq_f32(v60, vmlaq_n_f32(vmlaq_n_f32(vmulq_lane_f32(v57, *(float32x2_t *)&v31, 1), (float32x4_t)v58, *(float *)&v31), (float32x4_t)v59, v27));
    *(float *)&v20.i32[1] = -v18.n128_f32[1];
    v32 = v12;
    v33 = *(float *)&v14;
    v34 = v33 + v33;
    v35 = (float)(*(float *)&v32 + *(float *)&v32) * *(float *)&v32;
    v36 = (float)(*((float *)&v12 + 1) + *((float *)&v12 + 1)) * *((float *)&v12 + 1);
    v37 = (float)(v33 + v33) * v33;
    v38 = (float)(*(float *)&v32 + *(float *)&v32) * *((float *)&v12 + 1);
    v39 = (float)(*(float *)&v32 + *(float *)&v32) * *(float *)&v14;
    v40 = (float)(*((float *)&v12 + 1) + *((float *)&v12 + 1)) * *(float *)&v14;
    v41 = (float)(*(float *)&v32 + *(float *)&v32) * *((float *)&v14 + 1);
    v42 = (float)(*((float *)&v12 + 1) + *((float *)&v12 + 1)) * *((float *)&v14 + 1);
    v43.i32[3] = 0;
    v43.f32[0] = 1.0 - (float)(v36 + v37);
    v43.f32[1] = v38 + (float)(v34 * *((float *)&v14 + 1));
    v44.i32[3] = 0;
    v43.f32[2] = v39 - v42;
    v45 = 1.0 - (float)(v35 + v37);
    v46.i32[3] = 0;
    v46.f32[0] = v38 - (float)(v34 * *((float *)&v14 + 1));
    v46.f32[1] = v45;
    v46.f32[2] = v40 + v41;
    v54 = v18;
    v47 = vmulq_n_f32(v43, v18.n128_f32[0]);
    v48.i32[3] = 1.0;
    v61[0] = xmmword_2260E5F10;
    v61[1] = xmmword_2260E5F20;
    v49 = vmulq_n_f32(v46, *(float *)vshrq_n_u64(v20, 0x20uLL).i32);
    v61[2] = xmmword_2260E5F40;
    v61[3] = xmmword_226129CE0;
    do
    {
      v44.f32[2] = 1.0 - (float)(v35 + v36);
      v44.f32[1] = v40 - v41;
      v44.f32[0] = v39 + v42;
      *(float32x4_t *)((char *)&v62 + v19 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(v61[v19])), v49, *(float32x2_t *)&v61[v19], 1), v44, (float32x4_t)v61[v19], 2), v48, (float32x4_t)v61[v19], 3);
      ++v19;
    }
    while (v19 != 4);
    v66.columns[2] = v64;
    v66.columns[3] = v65;
    v66.columns[0] = v62;
    v66.columns[1] = v63;
    *(simd_float4x4 *)a3 = __invert_f4(v66);
    result = v54;
    *(_QWORD *)(a3 + 64) = v54.n128_u64[0];
  }
  else
  {
    v15 = unk_2541126B0;
    *(_OWORD *)(a3 + 32) = xmmword_2541126A0;
    *(_OWORD *)(a3 + 48) = v15;
    *(_OWORD *)(a3 + 64) = xmmword_2541126C0;
    result = (__n128)unk_254112690;
    *(_OWORD *)a3 = xmmword_254112680;
    *(__n128 *)(a3 + 16) = result;
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_FrameCountComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541126D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541126D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541126F0, 0);
    *(uint64_t *)((char *)&qword_254112700 + 6) = 0;
    qword_254112700 = 0;
    qword_254112710 = 0;
    qword_254112718 = 0xFFFFFFFFLL;
    qword_2541126F0 = (uint64_t)&off_24ED7DAA8;
    qword_254112720 = (uint64_t)"FrameCountComponent";
    dword_254112728 = 0;
    unk_254112730 = 0u;
    unk_254112740 = 0u;
    unk_254112750 = 0u;
    qword_254112760 = 0;
    __cxa_guard_release(&qword_2541126D8);
  }
  return &qword_2541126F0;
}

void re::ecs2::initInfo_FrameCountComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x4A8E0D736060CEB6;
  v14[1] = "FrameCountComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_299);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_299);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541126E0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint64_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "m_frameCount";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541126E8 = v12;
      __cxa_guard_release(&_MergedGlobals_299);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541126E0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::FrameCountComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::FrameCountComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::FrameCountComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::FrameCountComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::FrameCountComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59140;
}

uint64_t re::internal::defaultDestruct<re::ecs2::FrameCountComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::FrameCountComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED59140;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::FrameCountComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_FrameCountComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrameCountComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_FrameCountComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_FrameCountComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::FrameCountComponent>, this);
}

uint64_t *re::ecs2::allocInfo_RenderOptionsService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_300);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_300))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112770, 0);
    *(uint64_t *)((char *)&qword_254112780 + 6) = 0;
    qword_254112780 = 0;
    qword_254112790 = 0;
    qword_254112798 = 0xFFFFFFFFLL;
    qword_254112770 = (uint64_t)&off_24ED7DAA8;
    qword_2541127A0 = (uint64_t)"RenderOptionsService";
    dword_2541127A8 = 0;
    unk_2541127B0 = 0u;
    unk_2541127C0 = 0u;
    unk_2541127D0 = 0u;
    qword_2541127E0 = 0;
    __cxa_guard_release(&_MergedGlobals_300);
  }
  return &qword_254112770;
}

void re::ecs2::initInfo_RenderOptionsService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x31DB530E229D1B1ALL;
  v5[1] = "RenderOptionsService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_RenderOptionsService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_RenderOptionsService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderOptionsService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderOptionsService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderOptionsService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderOptionsService>, this);
}

_QWORD *re::ecs2::RenderOptions::RenderOptions(_QWORD *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = a2;
  if (a2[33])
  {
    v3 = (uint64_t)(a2 + 26);
    v4 = (uint64_t)(a2 + 50);
    (*(void (**)(_DWORD *, _DWORD *))(*(_QWORD *)a2 + 32))(a2, a2 + 26);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v3);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v4);
  }
  return a1;
}

void *re::ecs2::RenderOptions::forEntity(re::ecs2::RenderOptions *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v8;
  uint8_t v9[16];

  if (!a2)
    return &re::ecs2::EntityRenderOptions::invisibleRenderOptions(void)::s_invisibleRenderOptions;
  if ((*(_BYTE *)(a2 + 288) & 0x41) == 0)
    return &re::ecs2::EntityRenderOptions::invisibleRenderOptions(void)::s_invisibleRenderOptions;
  v2 = *(_QWORD *)this;
  if (*(_QWORD *)(*(_QWORD *)this + 56))
  {
    v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v4 = *(unsigned int *)(*(_QWORD *)(v2 + 64) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(v2 + 80)));
    if ((_DWORD)v4 != 0x7FFFFFFF)
    {
      v8 = *(_QWORD *)(v2 + 72);
      if (*(_QWORD *)(v8 + 56 * v4 + 16) == a2)
        return (void *)(v8 + 56 * v4 + 24);
      while (1)
      {
        LODWORD(v4) = *(_DWORD *)(v8 + 56 * v4 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v4 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v8 + 56 * v4 + 16) == a2)
          return (void *)(v8 + 56 * v4 + 24);
      }
    }
  }
  do
    v5 = __ldaxr(re::ecs2::RenderOptions::forEntity(re::ecs2::Entity const*)const::errorLogged);
  while (__stlxr(1u, re::ecs2::RenderOptions::forEntity(re::ecs2::Entity const*)const::errorLogged));
  if ((v5 & 1) == 0)
  {
    v6 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v9 = 0;
    }
  }
  return &re::ecs2::EntityRenderOptions::defaultRenderOptions(void)::s_defaultRenderOptions;
}

uint64_t *re::ecs2::allocInfo_PassthroughDarkeningComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541127F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541127F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112880, 0);
    *(uint64_t *)((char *)&qword_254112890 + 6) = 0;
    qword_254112890 = 0;
    qword_2541128A0 = 0;
    qword_2541128A8 = 0xFFFFFFFFLL;
    qword_254112880 = (uint64_t)&off_24ED7DAA8;
    qword_2541128B0 = (uint64_t)"PassthroughDarkeningComponent";
    dword_2541128B8 = 0;
    xmmword_2541128C0 = 0u;
    unk_2541128D0 = 0u;
    xmmword_2541128E0 = 0u;
    qword_2541128F0 = 0;
    __cxa_guard_release(&qword_2541127F0);
  }
  return &qword_254112880;
}

void re::ecs2::initInfo_PassthroughDarkeningComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[2];
  __int128 v33;

  v32[0] = 0x3BE276F3A69CE7DCLL;
  v32[1] = "PassthroughDarkeningComponent";
  re::StringID::destroyString((re::StringID *)v32);
  *((_OWORD *)this + 2) = v33;
  v4 = atomic_load((unsigned __int8 *)&qword_2541127F8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541127F8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254112808 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "lightspillEnabled";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254112810 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<re::Optional<re::Matrix3x3<float>>>::get();
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "darkeningMatrix";
      *(_QWORD *)(v14 + 16) = &qword_254112840;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x2000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254112818 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::introspect_float((re *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "lightSpillIntensity";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x6000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254112820 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_BOOL((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "chromaticAdaptationSuspended";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x6400000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_254112828 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_float((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "glowIntensity";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x6800000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254112830 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_float((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "glowSampleSpread";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x6C00000006;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254112838 = v30;
      __cxa_guard_release(&qword_2541127F8);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254112808;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PassthroughDarkeningComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PassthroughDarkeningComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PassthroughDarkeningComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PassthroughDarkeningComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v31 = v33;
}

void re::IntrospectionInfo<re::Optional<re::Matrix3x3<float>>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_254112800);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254112800))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_254112840);
    qword_254112840 = (uint64_t)&off_24ED6A140;
    __cxa_guard_release(&qword_254112800);
  }
  if ((_MergedGlobals_301 & 1) == 0)
  {
    v1 = re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
    if ((_MergedGlobals_301 & 1) == 0)
    {
      v2 = v1;
      _MergedGlobals_301 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112840, 0);
      qword_254112850 = 0x400000000DLL;
      dword_254112858 = v3;
      word_25411285C = 0;
      *(_QWORD *)&xmmword_254112860 = 0;
      *((_QWORD *)&xmmword_254112860 + 1) = 0xFFFFFFFFLL;
      qword_254112870 = v2;
      unk_254112878 = 0;
      qword_254112840 = (uint64_t)&off_24ED6A140;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_254112840, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginOptionalType((uint64_t)&v14, v12, 0x40uLL, 0x10uLL, &v13);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v14, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::Matrix3x3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::Matrix3x3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_254112860 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::PassthroughDarkeningComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED591C0;
  *(_BYTE *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 96) = 1065353216;
  *(_BYTE *)(v3 + 100) = 0;
  result = 0.12500003;
  *(_QWORD *)(v3 + 104) = 0x3FC000003F800000;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PassthroughDarkeningComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PassthroughDarkeningComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED591C0;
  *(_BYTE *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 96) = 1065353216;
  *(_BYTE *)(v1 + 100) = 0;
  result = 0.12500003;
  *(_QWORD *)(v1 + 104) = 0x3FC000003F800000;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PassthroughDarkeningComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PassthroughDarkeningComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PassthroughDarkeningComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PassthroughDarkeningComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PassthroughDarkeningComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PassthroughDarkeningComponent>, this);
}

_QWORD *re::IntrospectionOptional<re::Matrix3x3<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::Matrix3x3<float>>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::Matrix3x3<float>>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::Matrix3x3<float>>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::Matrix3x3<float>>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::Matrix3x3<float>>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 16;
}

{
  return a2 + 16;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::Matrix3x3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 16;
  if (!v2)
    return 0;
  return result;
}

double re::TypeBuilderHelper::registerOptional<re::Matrix3x3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, __int128 *a2)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (a2)
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[2];
    v2 = (_OWORD *)(a1 + 16);
    if (*(_BYTE *)a1)
    {
      v3 = *a2;
      v4 = a2[2];
      *(_OWORD *)(a1 + 32) = a2[1];
      *(_OWORD *)(a1 + 48) = v4;
      *v2 = v3;
    }
    else
    {
      *(_BYTE *)a1 = 1;
      *v2 = v6;
      *(_OWORD *)(a1 + 32) = v7;
      *(_QWORD *)&v3 = v8;
      *(_OWORD *)(a1 + 48) = v8;
    }
  }
  else if (*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 0;
  }
  return *(double *)&v3;
}

uint64_t *re::allocInfo_VideoService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_302);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_302))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112900, 0);
    *(uint64_t *)((char *)&qword_254112910 + 6) = 0;
    qword_254112910 = 0;
    qword_254112920 = 0;
    qword_254112928 = 0xFFFFFFFFLL;
    qword_254112900 = (uint64_t)&off_24ED7DAA8;
    qword_254112930 = (uint64_t)"VideoService";
    dword_254112938 = 0;
    unk_254112940 = 0u;
    unk_254112950 = 0u;
    unk_254112960 = 0u;
    qword_254112970 = 0;
    __cxa_guard_release(&_MergedGlobals_302);
  }
  return &qword_254112900;
}

void re::initInfo_VideoService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x3F1D323CEE935BB4;
  v5[1] = "VideoService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_VideoService(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::VideoService>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::VideoService>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::VideoService>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::VideoService>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::VideoService>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED6A1C0;
}

uint64_t re::internal::defaultDestruct<re::VideoService>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

_QWORD *re::internal::defaultConstructV2<re::VideoService>(_QWORD *result)
{
  *result = &off_24ED6A1C0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::VideoService>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::introspect_VideoService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoService", (uint64_t (*)(re::internal *))re::allocInfo_VideoService, (re::IntrospectionBase *(*)(void))re::initInfo_VideoService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::VideoService>, this);
}

void re::VideoService::~VideoService(re::VideoService *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::NetworkAssetComponentSystem::willAddSystemToECSService(re::ecs2::NetworkAssetComponentSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 13) = re::ServiceLocator::serviceOrNull<re::NetworkAssetService>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AssetService>(v3);
  *((_QWORD *)this + 14) = result;
  return result;
}

uint64_t re::ecs2::NetworkAssetComponentSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)(this + 112) = 0;
  return this;
}

uint64_t re::ecs2::NetworkAssetComponentSystem::willAddSceneToECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  re::ecs2::SceneComponentTable *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = this;
    v4 = (re::ecs2::Scene *)((char *)a2 + 200);
    v5 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v8 = v3;
    v9 = re::ecs2::NetworkAssetComponentSystem::didAddComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Slice<re::ecs2::NetworkAssetComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::Subscription const&,re::Slice<re::ecs2::NetworkAssetComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 128), (uint64_t)&v8);
    v8 = v3;
    v9 = re::ecs2::NetworkAssetComponentSystem::willRemoveComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Slice<re::ecs2::NetworkAssetComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::Subscription const&,re::Slice<re::ecs2::NetworkAssetComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 392), (uint64_t)&v8);
    v6 = re::ecs2::SceneComponentTable::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AssetPreloadComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v8 = v3;
    v9 = re::ecs2::NetworkAssetComponentSystem::didAddComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    v7 = re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 128), (uint64_t)&v8);
    this = *(_QWORD *)(v3 + 104);
    if (this)
      return (*(uint64_t (**)(uint64_t, re::ecs2::Scene *, double))(*(_QWORD *)this + 184))(this, a2, v7);
  }
  return this;
}

uint64_t re::ecs2::NetworkAssetComponentSystem::didAddComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v5;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 104))
  {
    if (*(_QWORD *)(a1 + 40))
      v5 = a4 == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 104) + 136))(*(_QWORD *)(a1 + 104), *(_QWORD *)(v8 + 32), v8 + 72, *(_QWORD *)(v8 + 16));
        v7 -= 8;
      }
      while (v7);
    }
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  uint32_t v26;
  _anonymous_namespace_ *v27;
  uint64_t v28;
  _anonymous_namespace_ *v29;
  uint64_t *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33[3];
  uint8_t buf[4];
  _BYTE v35[20];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 104))
  {
    v4 = a1;
    if (*(_QWORD *)(a1 + 40) && a4 != 0)
    {
      for (i = 8 * a4; i; i -= 8)
      {
        v9 = *a3;
        v10 = *(_QWORD *)(*a3 + 16);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (!v11 || (*(_BYTE *)(v11 + 288) & 0x80) != 0)
          {
            v20 = *re::assetsLogObjects((re *)a1);
            a1 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
            if ((_DWORD)a1)
            {
              *(_WORD *)buf = 0;
              v21 = v20;
              v22 = "Could not find parent of AssetPreloadComponent Entity. Aborting asset preload.";
LABEL_28:
              v26 = 2;
              goto LABEL_29;
            }
          }
          else
          {
            v12 = *(_QWORD *)(v4 + 104);
            v13 = *(_QWORD *)(v4 + 112);
            v14 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v14)
            {
              v15 = v14;
              v16 = *(_QWORD *)(v14 + 32);
              a1 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 112))(v12, v16);
              if ((a1 & 1) == 0)
              {
                v17 = *(_QWORD *)(v15 + 48);
                v18 = v17 >> 1;
                if ((v17 & 1) == 0)
                  v18 = v17 >> 1;
                if (v18)
                {
                  if ((v17 & 1) != 0)
                    v19 = *(char **)(v15 + 56);
                  else
                    v19 = (char *)(v15 + 49);
                  v27 = (_anonymous_namespace_ *)re::internal::AssetTypeRegistry::assetTypeWithName(*(re::internal::AssetTypeRegistry **)(v13 + 1104), v19);
                  if (v27)
                  {
                    v28 = (uint64_t)v27;
                    *(_DWORD *)buf = 0;
                    *(_OWORD *)&v35[4] = 0u;
                    v36 = 0u;
                    v29 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v35[4], 0);
                    v37 = 0u;
                    v38 = 0u;
                    re::DynamicString::setCapacity(&v37, 0);
                    v39 = 0;
                    re::AssetPath::initAssetIdAssetPath((uint64_t)buf, v16, v28);
                    (**(void (***)(uint64_t *__return_ptr, uint64_t, uint8_t *))v13)(v33, v13, buf);
                    v30 = re::AssetHandle::operator=((uint64_t *)(v9 + 32), v33);
                    re::AssetHandle::loadAsync((re::AssetHandle *)v30);
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
                    if ((_QWORD)v37)
                    {
                      if ((BYTE8(v37) & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)v37 + 40))();
                      v37 = 0u;
                      v38 = 0u;
                    }
                    a1 = *(_QWORD *)&v35[4];
                    if (*(_QWORD *)&v35[4] && (v35[12] & 1) != 0)
                      a1 = (*(uint64_t (**)(void))(**(_QWORD **)&v35[4] + 40))();
                    goto LABEL_21;
                  }
                  v31 = *re::assetsLogObjects(0);
                  a1 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
                  if ((_DWORD)a1)
                  {
                    if ((*(_BYTE *)(v15 + 48) & 1) != 0)
                      v32 = *(_QWORD *)(v15 + 56);
                    else
                      v32 = v15 + 49;
                    *(_DWORD *)buf = 136315394;
                    *(_QWORD *)v35 = v32;
                    *(_WORD *)&v35[8] = 2048;
                    *(_QWORD *)&v35[10] = v16;
                    v21 = v31;
                    v22 = "Could not find asset type named '%s' in the type registry. Aborting preload for asset %llu.";
                    v26 = 22;
                    goto LABEL_29;
                  }
                }
                else
                {
                  v25 = *re::assetsLogObjects((re *)a1);
                  a1 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
                  if ((_DWORD)a1)
                  {
                    *(_DWORD *)buf = 134217984;
                    *(_QWORD *)v35 = v16;
                    v21 = v25;
                    v22 = "NetworkAssetComponent for asset %llu does not have an assetType string. Aborting asset preload.";
                    v26 = 12;
LABEL_29:
                    _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, v22, buf, v26);
                  }
                }
              }
            }
            else
            {
              v24 = *re::assetsLogObjects(0);
              a1 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
              if ((_DWORD)a1)
              {
                *(_WORD *)buf = 0;
                v21 = v24;
                v22 = "Could not find NetworkAssetComponent for asset. Aborting asset preload.";
                goto LABEL_28;
              }
            }
          }
        }
        else
        {
          v23 = *re::assetsLogObjects((re *)a1);
          a1 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
          if ((_DWORD)a1)
          {
            *(_WORD *)buf = 0;
            v21 = v23;
            v22 = "Could not find entity for AssetPreloadComponent. Aborting asset preload.";
            goto LABEL_28;
          }
        }
LABEL_21:
        ++a3;
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::NetworkAssetComponentSystem::willRemoveComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (*(_QWORD *)(a1 + 104))
  {
    if (*(_QWORD *)(a1 + 40) && a4 != 0)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 104) + 112))(*(_QWORD *)(a1 + 104), *(_QWORD *)(*a3 + 32));
        if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 104) + 144))(*(_QWORD *)(a1 + 104), *(_QWORD *)(v8 + 32), v8 + 72)&& (v9 & 1) == 0)
        {
          re::AssetManager::cancelLoadingAssetId(*(os_unfair_lock_s **)(a1 + 112), *(_QWORD *)(v8 + 32));
        }
        ++a3;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return 0;
}

uint64_t re::ecs2::NetworkAssetComponentSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  re::ecs2::SceneComponentTable *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = this;
    v4 = (re::ecs2::Scene *)((char *)a2 + 200);
    v5 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v7 = v3;
    *((_QWORD *)&v7 + 1) = re::ecs2::NetworkAssetComponentSystem::didAddComponents;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Slice<re::ecs2::NetworkAssetComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::Subscription const&,re::Slice<re::ecs2::NetworkAssetComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 128, &v7);
    *(_QWORD *)&v7 = v3;
    *((_QWORD *)&v7 + 1) = re::ecs2::NetworkAssetComponentSystem::willRemoveComponents;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Slice<re::ecs2::NetworkAssetComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::Subscription const&,re::Slice<re::ecs2::NetworkAssetComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 392, &v7);
    v6 = re::ecs2::SceneComponentTable::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AssetPreloadComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v7 = v3;
    *((_QWORD *)&v7 + 1) = re::ecs2::NetworkAssetComponentSystem::didAddComponents;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 128, &v7);
    this = *(_QWORD *)(v3 + 104);
    if (this)
      return (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)this + 192))(this, a2);
  }
  return this;
}

uint64_t *re::ecs2::allocInfo_NetworkAssetComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254112980);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254112980))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112A88, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254112A98 = 0;
    qword_254112AA8 = 0;
    qword_254112AB0 = 0xFFFFFFFFLL;
    qword_254112A88 = (uint64_t)&off_24ED7DAA8;
    qword_254112AB8 = (uint64_t)"NetworkAssetComponent";
    dword_254112AC0 = 0;
    xmmword_254112AC8 = 0u;
    unk_254112AD8 = 0u;
    xmmword_254112AE8 = 0u;
    qword_254112AF8 = 0;
    __cxa_guard_release(&qword_254112980);
  }
  return &qword_254112A88;
}

void re::ecs2::initInfo_NetworkAssetComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  __int128 v32;

  v31[0] = 0x93E695FE988D5B36;
  v31[1] = "NetworkAssetComponent";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  v4 = atomic_load((unsigned __int8 *)&qword_254112988);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254112988);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541129C0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint64_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "assetId";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541129C8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::DynamicString>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "assetType";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541129D0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::DynamicArray<re::AssetLoadDescriptor>>::get();
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "loadDescriptors";
      *(_QWORD *)(v18 + 16) = &qword_2541129F8;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4800000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_2541129D8 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "dependencies";
      *(_QWORD *)(v21 + 16) = qword_254112A38;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x7000000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2541129E0 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_BOOL((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "isMutable";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0xA000000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2541129E8 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::IntrospectionInfo<re::HashTable<re::StringID,re::DynamicString,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "metadata";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0xA800000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_2541129F0 = v29;
      __cxa_guard_release(&qword_254112988);
    }
  }
  *((_QWORD *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_2541129C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkAssetComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkAssetComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkAssetComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkAssetComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v30 = v32;
}

void re::IntrospectionInfo<re::DynamicArray<re::AssetLoadDescriptor>>::get()
{
  unsigned __int8 v0;
  uint64_t Descriptor;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2541129B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541129B0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541129F8);
    qword_2541129F8 = (uint64_t)&off_24ED6A278;
    __cxa_guard_release(&qword_2541129B0);
  }
  if ((_MergedGlobals_303 & 1) == 0)
  {
    Descriptor = re::introspect_AssetLoadDescriptor((re::IntrospectionBase **)1);
    if ((_MergedGlobals_303 & 1) == 0)
    {
      v2 = Descriptor;
      _MergedGlobals_303 = 1;
      v3 = *(_DWORD *)(Descriptor + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541129F8, 0);
      qword_254112A08 = 0x2800000003;
      dword_254112A10 = v3;
      word_254112A14 = 0;
      *(_QWORD *)&xmmword_254112A18 = 0;
      *((_QWORD *)&xmmword_254112A18 + 1) = 0xFFFFFFFFLL;
      qword_254112A28 = v2;
      unk_254112A30 = 0;
      qword_2541129F8 = (uint64_t)&off_24ED6A278;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_2541129F8, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_254112A18 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  const re::IntrospectionBase *v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_2541129B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541129B8))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)qword_254112A38);
    qword_254112A38[0] = (uint64_t)&off_24ED6A310;
    __cxa_guard_release(&qword_2541129B8);
  }
  if ((byte_254112979 & 1) == 0)
  {
    v3 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v5 = re::introspect_uint64_t((re *)1, v4);
    if ((byte_254112979 & 1) == 0)
    {
      v6 = v5;
      byte_254112979 = 1;
      v7 = v5[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_254112A38, 0);
      unk_254112A48 = 0x3000000007;
      unk_254112A50 = v7;
      unk_254112A54 = 0;
      *(_QWORD *)&xmmword_254112A58 = 0;
      *((_QWORD *)&xmmword_254112A58 + 1) = 0xFFFFFFFFLL;
      *(_QWORD *)algn_254112A68 = v3;
      *(_QWORD *)&algn_254112A68[8] = 0;
      *(_QWORD *)&algn_254112A68[16] = v6;
      qword_254112A80 = 0;
      qword_254112A38[0] = (uint64_t)&off_24ED6A310;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)qword_254112A38, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = v3[2];
      v21 = *((_OWORD *)v6 + 2);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_254112A58 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

uint64_t re::internal::defaultConstruct<re::ecs2::NetworkAssetComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::NetworkAssetComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::NetworkAssetComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::NetworkAssetComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_NetworkAssetComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkAssetComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkAssetComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkAssetComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkAssetComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AssetPreloadComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254112990);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254112990))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112B00, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254112B10 = 0;
    qword_254112B20 = 0;
    qword_254112B28 = 0xFFFFFFFFLL;
    qword_254112B00 = (uint64_t)&off_24ED7DAA8;
    qword_254112B30 = (uint64_t)"AssetPreloadComponent";
    dword_254112B38 = 0;
    xmmword_254112B40 = 0u;
    unk_254112B50 = 0u;
    xmmword_254112B60 = 0u;
    qword_254112B70 = 0;
    __cxa_guard_release(&qword_254112990);
  }
  return &qword_254112B00;
}

void re::ecs2::initInfo_AssetPreloadComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xBC3854CE9A184FC8;
  v10[1] = "AssetPreloadComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_2541129A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541129A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254112998 = v8;
      __cxa_guard_release(&qword_2541129A0);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254112998;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AssetPreloadComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AssetPreloadComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AssetPreloadComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AssetPreloadComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::AssetPreloadComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED2BC30;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AssetPreloadComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::AssetPreloadComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED2BC30;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AssetPreloadComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AssetPreloadComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AssetPreloadComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AssetPreloadComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AssetPreloadComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AssetPreloadComponent>, this);
}

uint64_t *re::ecs2::allocInfo_NetworkAssetComponentSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541129A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541129A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112B78, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254112B88 = 0;
    qword_254112B98 = 0;
    qword_254112BA0 = 0xFFFFFFFFLL;
    qword_254112B78 = (uint64_t)&off_24ED7DAA8;
    qword_254112BA8 = (uint64_t)"NetworkAssetComponentSystem";
    dword_254112BB0 = 0;
    xmmword_254112BB8 = 0u;
    unk_254112BC8 = 0u;
    xmmword_254112BD8 = 0u;
    qword_254112BE8 = 0;
    __cxa_guard_release(&qword_2541129A8);
  }
  return &qword_254112B78;
}

void re::ecs2::initInfo_NetworkAssetComponentSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x2BD7885563705754;
  v5[1] = "NetworkAssetComponentSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_NetworkAssetComponentSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkAssetComponentSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkAssetComponentSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::NetworkAssetComponentSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::NetworkAssetComponentSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkAssetComponentSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkAssetComponentSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::NetworkAssetComponentSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *(_QWORD *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  re::ecs2::System::System(a3, 1);
  *v3 = &off_24ED6A1F0;
}

void *re::internal::defaultDestruct<re::ecs2::NetworkAssetComponentSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::NetworkAssetComponentSystem>(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  re::ecs2::System::System(a1, 1);
  *v1 = &off_24ED6A1F0;
}

void *re::internal::defaultDestructV2<re::ecs2::NetworkAssetComponentSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_NetworkAssetComponentSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkAssetComponentSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkAssetComponentSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkAssetComponentSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkAssetComponentSystem>, this);
}

void re::ecs2::NetworkAssetComponentSystem::~NetworkAssetComponentSystem(re::ecs2::NetworkAssetComponentSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::NetworkAssetComponentSystem::typeInfo(re::ecs2::NetworkAssetComponentSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkAssetComponentSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkAssetComponentSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkAssetComponentSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkAssetComponentSystem>, 0);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Slice<re::ecs2::NetworkAssetComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::NetworkAssetComponent>,re::Slice<re::ecs2::NetworkAssetComponent*>>::Subscription const&,re::Slice<re::ecs2::NetworkAssetComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::createSubscription<re::ecs2::NetworkAssetComponentSystem>(re::ecs2::NetworkAssetComponentSystem *,REEventHandlerResult (re::ecs2::NetworkAssetComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Slice<re::ecs2::AssetPreloadComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AssetPreloadComponent>,re::Slice<re::ecs2::AssetPreloadComponent*>>::Subscription const&,re::Slice<re::ecs2::AssetPreloadComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::AssetLoadDescriptor>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::AssetLoadDescriptor>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::AssetLoadDescriptor>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::AssetLoadDescriptor>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::AssetLoadDescriptor>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::AssetLoadDescriptor>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  _anonymous_namespace_ *v8;
  __n128 v9;
  re::IntrospectionBase *v10;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[3];
  _BYTE v17[40];

  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v12, 0);
  *((_QWORD *)&v14 + 1) = 0;
  v15 = 0uLL;
  LODWORD(v16[0]) = 0;
  memset((char *)v16 + 8, 0, 36);
  memset(v17, 0, sizeof(v17));
  re::DynamicString::setCapacity(&v17[8], 0);
  v9.n128_f64[0] = re::DynamicArray<re::AssetLoadDescriptor>::add(a4, (uint64_t)&v12);
  if (*(_QWORD *)&v17[8])
  {
    if ((v17[16] & 1) != 0)
      (*(void (**)(double))(**(_QWORD **)&v17[8] + 40))(v9.n128_f64[0]);
    v9 = 0uLL;
    memset(&v17[8], 0, 32);
  }
  if (*(_QWORD *)&v16[1])
  {
    if (*(_QWORD *)v17)
      (*(void (**)(__n128))(**(_QWORD **)&v16[1] + 40))(v9);
    *(_QWORD *)v17 = 0;
    memset(&v16[1], 0, 24);
    ++DWORD2(v16[2]);
  }
  if (*((_QWORD *)&v14 + 1))
  {
    if (*((_QWORD *)&v16[0] + 1))
      (*(void (**)(__n128))(**((_QWORD **)&v14 + 1) + 40))(v9);
    *((_QWORD *)&v16[0] + 1) = 0;
    v15 = 0uLL;
    *((_QWORD *)&v14 + 1) = 0;
    ++LODWORD(v16[0]);
  }
  if (v12 && (v13 & 1) != 0)
    (*(void (**)(__n128))(*v12 + 40))(v9);
  v10 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + 144 * *((_QWORD *)a4 + 2) - 144);
  re::introspectionInitElement(a2, a3, a1[6], v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::AssetLoadDescriptor>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 144 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 144 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::AssetLoadDescriptor>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::AssetLoadDescriptor>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::AssetLoadDescriptor>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::AssetLoadDescriptor>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = re::DynamicArray<re::AssetLoadDescriptor>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 144 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 144;
        v11 -= 144;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 144 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 144 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::AssetLoadDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(double a1, uint64_t a2, uint64_t *a3)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  signed int v8;

  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
  if (a5 <= 3)
    v8 = 3;
  else
    v8 = a5;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a3, a4, v8);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 14;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 56 * v10 + 16, *(_QWORD *)(a2 + 16) + 56 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 56 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v10 + 56 * v9 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1, double a2)
{
  double v3;

  v3 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, v3);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, double a2, uint64_t a3, uint64_t a4)
{
  if (*a1 == a4)
  {
    re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a1, a4, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 56 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 14;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,unsigned long long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::NetworkAssetComponent>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = off_24ED2BBB0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  v3 = (_QWORD *)(v2 + 40);
  re::DynamicString::setCapacity(v3, 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_QWORD *)(a1 + 148) = 0x7FFFFFFFLL;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 204) = 0x7FFFFFFFLL;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::NetworkAssetComponentSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::NetworkAssetComponentSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

double re::ShaderGraphMaterial::ShaderGraphMaterial(re::ShaderGraphMaterial *this, re::RenderManager *a2)
{
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED6A3B0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = a2;
  *((_QWORD *)this + 31) = 0xFFFFFFFFFFFFFFFLL;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0xFFFFFFFFFFFFFFFLL;
  return result;
}

_QWORD *re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;

  result[5] = 0;
  result[6] = 0;
  v1 = result[2];
  result[3] = 0;
  result[4] = v1;
  if (v1 >= 0x10)
  {
    v2 = 0;
    *(_QWORD *)&v3 = -1;
    *((_QWORD *)&v3 + 1) = -1;
    do
    {
      *(_OWORD *)(*result + 16 * v2++) = v3;
      v1 = result[2];
    }
    while (v2 < v1 >> 4);
  }
  if (v1)
  {
    v4 = (_QWORD *)result[1];
    v5 = 16 * v1;
    do
    {
      *v4 = 0;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return result;
}

uint64_t re::ShaderGraphMaterial::handle@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  char v12;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 13, a2);
  if (result == -1)
  {
    result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 21, a2);
    if (result == -1)
    {
      LOWORD(v8) = 0;
      v9 = 0;
      v12 = 0;
      v10 = 0;
      v11 = 0;
    }
    else
    {
      v11 = 0;
      v8 = *(_DWORD *)(a1[22] + 16 * result + 8);
      v10 = (a1[26] + (a1[18] << 6) + (a1[18] >> 2) - 0x61C8864680B583E9) ^ a1[18];
      v12 = 10;
      v9 = 1;
    }
  }
  else
  {
    v7 = a1[14] + 16 * result;
    LOWORD(v8) = *(_WORD *)(v7 + 8);
    v9 = *(unsigned __int8 *)(v7 + 10);
    v10 = (a1[26] + (a1[18] << 6) + (a1[18] >> 2) - 0x61C8864680B583E9) ^ a1[18];
    v11 = *(_BYTE *)(v7 + 11);
    v12 = 9;
  }
  *(_QWORD *)a3 = *a2;
  *(_WORD *)(a3 + 8) = v8;
  *(_WORD *)(a3 + 10) = v9;
  *(_BYTE *)(a3 + 12) = v12;
  *(_QWORD *)(a3 + 16) = v10;
  *(_BYTE *)(a3 + 24) = v11;
  return result;
}

uint64_t re::ShaderGraphMaterial::handle@<X0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  const char *v5;
  int v6;
  uint64_t v8;

  if (a2)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = a2 + 2;
        do
        {
          v3 = 31 * v3 + v4;
          v6 = *(unsigned __int8 *)v5++;
          v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v8 = v3;
  return re::ShaderGraphMaterial::handle(this, &v8, a3);
}

unint64_t re::ShaderGraphMaterial::getConstant(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if (*(_QWORD *)(a1 + 40) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + v2;
}

uint64_t re::ShaderGraphMaterial::colorGamut3FValue(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)re::ShaderGraphMaterial::getConstant(a1, a2);
}

_QWORD *re::ShaderGraphMaterial::colorGamut4FValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  result = (_QWORD *)re::ShaderGraphMaterial::getConstant(a1, a2);
  v6 = result[1];
  v7 = *(_QWORD *)(a1 + 232);
  if (v7)
  {
    v7 = *(_QWORD *)(v7 + 152);
    if (v7)
      LOBYTE(v7) = *(_BYTE *)v7;
  }
  *(_QWORD *)a3 = *result;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = v7;
  return result;
}

re::AssetHandle *re::ShaderGraphMaterial::assetHandleValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, re::AssetHandle *a3@<X8>)
{
  if (*(_QWORD *)(a1 + 80) <= (unint64_t)*(unsigned __int16 *)(a2 + 8))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::AssetHandle::AssetHandle(a3, (const re::AssetHandle *)(*(_QWORD *)(a1 + 96) + 24 * *(unsigned __int16 *)(a2 + 8)));
}

BOOL re::ShaderGraphMaterial::hasParameter(re::ShaderGraphMaterial *this, const char *a2)
{
  uint64_t v2;
  char v3;
  const char *v4;
  int v5;
  _BYTE v7[32];
  uint64_t v8;

  if (a2)
  {
    v2 = *a2;
    if (*a2)
    {
      v3 = a2[1];
      if (v3)
      {
        v4 = a2 + 2;
        do
        {
          v2 = 31 * v2 + v3;
          v5 = *(unsigned __int8 *)v4++;
          v3 = v5;
        }
        while (v5);
      }
      v2 &= ~0x8000000000000000;
    }
  }
  else
  {
    v2 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v8 = v2;
  re::ShaderGraphMaterial::handle(this, &v8, (uint64_t)v7);
  return (v7[12] & 7) != 0;
}

uint64_t re::ShaderGraphMaterial::removeParameter(re::ShaderGraphMaterial *this, const char *a2)
{
  uint64_t v3;
  char v4;
  const char *v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int16 v11;
  char v12;
  uint64_t v13;

  if (a2)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = a2 + 2;
        do
        {
          v3 = 31 * v3 + v4;
          v6 = *(unsigned __int8 *)v5++;
          v4 = v6;
        }
        while (v6);
      }
      v3 &= ~0x8000000000000000;
    }
  }
  else
  {
    v3 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v13 = v3;
  result = re::ShaderGraphMaterial::handle(this, &v13, (uint64_t)&v10);
  v9 = v12 & 7;
  if ((v12 & 7) != 0)
  {
    if (v9 == 2)
    {
      v13 = v10;
      return re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(&v13, (uint64_t *)this + 21, (uint64_t)this + 64);
    }
    else if (v9 == 1)
    {
      v13 = v10;
      return re::removeNameMappedConstant(&v13, (uint64_t *)this + 13, (_QWORD *)this + 3, v11);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Trying to remove a paramter which exists but has an invalid type.", "!\"Unreachable code\"", "removeParameter", 237);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t *re::ShaderGraphMaterial::addTexture(uint64_t a1, uint64_t *a2, re::AssetHandle *a3)
{
  _anonymous_namespace_ *v6;
  uint64_t v7;
  unsigned int *v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  unint64_t v13;
  uint8_t buf[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v6 = (_anonymous_namespace_ *)(a1 + 168);
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 168), a2);
  if (v7 == -1)
  {
    *(_DWORD *)buf = *(unsigned __int8 *)(a1 + 80);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(v6, a2, (int *)buf);
    return (uint64_t *)re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(a1 + 64), a3);
  }
  else
  {
    v8 = (unsigned int *)(*(_QWORD *)(a1 + 176) + 16 * v7 + 8);
    v9 = *re::graphicsLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *a2;
      if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v11 = 0;
      }
      else if (v10)
      {
        v11 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v10);
      }
      else
      {
        v11 = (char *)&str_110;
      }
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable texture (%s) that already exists. Overwiting with new value.", buf, 0xCu);
    }
    v13 = *v8;
    if (*(_QWORD *)(a1 + 80) <= v13)
    {
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return re::AssetHandle::operator=((uint64_t *)(*(_QWORD *)(a1 + 96) + 24 * v13), (uint64_t *)a3);
  }
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 16 * v6 + 8;
}

uint64_t re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a2, a1);
  if (result != -1)
  {
    v7 = a2[1] + 16 * result;
    re::DynamicArray<re::AssetHandle>::removeStableAt(a3, *(unsigned int *)(v7 + 8));
    v8 = *(_DWORD *)(v7 + 8);
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::mapValues<void re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(re::WeakStringID,re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &,re::DynamicArray<re::AssetHandle> &)::{lambda(re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &)#1}>(a2, &v8);
    return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove(a2, a1);
  }
  return result;
}

double re::ShaderGraphMaterial::setConstant@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, size_t a3@<X2>, void *a4@<X3>, uint8_t a5@<W4>, uint64_t a6@<X8>)
{
  double result;
  uint64_t v13[4];
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *a2;
  re::ShaderGraphMaterial::handle(a1, &v19, a6);
  v19 = 0;
  if ((*(_BYTE *)(a6 + 12) & 7) != 0)
  {
    re::ShaderGraphMaterial::setConstant(v13, (int)a1, a6, a3, a4);
  }
  else
  {
    v18 = *a2;
    re::ShaderGraphMaterial::addConstant(a1, &v18, a3, a4, a5);
    v18 = 0;
    v14 = *a2;
    re::ShaderGraphMaterial::handle(a1, &v14, (uint64_t)&v15);
    *(_QWORD *)a6 = v15;
    result = *(double *)&v16;
    *(_OWORD *)(a6 + 8) = v16;
    *(_BYTE *)(a6 + 24) = v17;
  }
  return result;
}

void *re::ShaderGraphMaterial::addConstant(_QWORD *a1, uint64_t *a2, size_t a3, const void *a4, uint8_t a5)
{
  _anonymous_namespace_ *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint8_t buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = (_anonymous_namespace_ *)(a1 + 13);
  v11 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1 + 13, a2);
  if (v11 == -1)
  {
    v15 = a1[5] + 3;
    *(_WORD *)buf = v15 & 0xFFFC;
    buf[2] = a3;
    buf[3] = a5;
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew(v10, a2, (int *)buf);
    v12 = (unsigned __int16)v15 & 0xFFFC;
    re::DynamicArray<BOOL>::resize((uint64_t)(a1 + 3), v12 + a3);
    if (a1[5] > v12)
      return memcpy((void *)(a1[7] + v12), a4, a3);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    a3 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  else
  {
    v10 = (_anonymous_namespace_ *)(a1[14] + 16 * v11 + 8);
    v12 = *re::graphicsLogObjects((re *)v11);
    if (!os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_DEFAULT))
      goto LABEL_11;
    v13 = *a2;
    if (*a2 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v13)
      {
        v14 = re::WeakStringID::debugStr(void)const::msg;
        snprintf(re::WeakStringID::debugStr(void)const::msg, 0x50uLL, "%llu", v13);
      }
      else
      {
        v14 = (char *)&str_110;
      }
      goto LABEL_10;
    }
  }
  v14 = 0;
LABEL_10:
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v14;
  _os_log_impl(&dword_224FE9000, (os_log_t)v12, OS_LOG_TYPE_DEFAULT, "Warning - trying to create a mutable constant (%s) that already exists. Overwiting with new values.", buf, 0xCu);
LABEL_11:
  v12 = *(unsigned __int16 *)v10;
  if (a1[5] <= v12)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return memcpy((void *)(a1[7] + v12), a4, a3);
}

__n128 re::ShaderGraphMaterial::setConstant@<Q0>(uint64_t *__return_ptr a1@<X8>, size_t __n@<X2>, void *__s2@<X3>, _QWORD *a4@<X0>, uint64_t a5@<X1>, uint8_t a6@<W4>)
{
  __n128 result;
  unint64_t v11;
  __n128 *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15[2];
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a5 + 12) & 8) != 0)
  {
    v12 = (__n128 *)(a5 + 8);
    v11 = *(unsigned __int16 *)(a5 + 8);
    v13 = a4[5];
    if (v13 <= v11)
    {
      v15[1] = 0;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v16 = 136315906;
      v17 = "operator[]";
      v18 = 1024;
      v19 = 789;
      v20 = 2048;
      v21 = v11;
      v22 = 2048;
      v23 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v14 = (void *)(a4[7] + v11);
    if (memcmp(v14, __s2, __n))
      memcpy(v14, __s2, __n);
    *a1 = *(_QWORD *)a5;
    result = *v12;
    *(__n128 *)(a1 + 1) = *v12;
    *((_BYTE *)a1 + 24) = *(_BYTE *)(a5 + 24);
  }
  else
  {
    v15[0] = *(_QWORD *)a5;
    result.n128_f64[0] = re::ShaderGraphMaterial::setConstant(a4, v15, __n, __s2, a6, (uint64_t)a1);
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 16 * v6 + 8;
}

uint64_t re::DrawingManager::addRenderFrameDeltaForNextFrame<re::MaterialParameterTableDelta,re::MaterialParameterTable>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;

  v4 = re::globalAllocators((re *)a1);
  v5 = re::PerFrameAllocatorManager::perFrameAllocator(v4[6], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 48) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 256) + 136) + 40) << 60));
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, 568, 8);
  bzero((void *)(v6 + 8), 0x230uLL);
  *(_QWORD *)v6 = &unk_24ED466E8;
  objc_initWeak((id *)(v6 + 8), 0);
  *(_QWORD *)v6 = &off_24ED72F50;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 528) = 0;
  *(_BYTE *)(v6 + 536) = 0;
  *(_BYTE *)(v6 + 548) = 0;
  *(_BYTE *)(v6 + 564) = 0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_DWORD *)(v6 + 80) = 0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_DWORD *)(v6 + 120) = 0;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_DWORD *)(v6 + 160) = 0;
  *(_DWORD *)(v6 + 200) = 0;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_DWORD *)(v6 + 240) = 0;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_DWORD *)(v6 + 280) = 0;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_DWORD *)(v6 + 320) = 0;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_DWORD *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 368) = 0u;
  *(_OWORD *)(v6 + 384) = 0u;
  *(_DWORD *)(v6 + 400) = 0;
  *(_DWORD *)(v6 + 440) = 0;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_DWORD *)(v6 + 480) = 0;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_DWORD *)(v6 + 520) = 0;
  v7 = *a2;
  re::MaterialParameterTableDelta::init(v6, v5);
  if (v7)
    v8 = (void *)(v7 + 8);
  else
    v8 = 0;
  objc_storeWeak((id *)(v6 + 8), v8);
  if (!*(_QWORD *)(a1 + 624))
  {
    *(_QWORD *)(a1 + 624) = v5;
    re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity((_QWORD *)(a1 + 624), 0);
    *(_DWORD *)(a1 + 640) += 2;
  }
  v10 = v6;
  re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::add(a1 + 624, &v10);
  return v6;
}

double re::ShaderGraphMaterial::setBool@<D0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  char v9;
  uint64_t v10;

  v9 = a3;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = a2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(this, &v10, 1uLL, &v9, 2u, a4);
}

double re::ShaderGraphMaterial::setFloat@<D0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, float a3@<S0>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  float v9;
  uint64_t v10;

  v9 = a3;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = a2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(this, &v10, 4uLL, &v9, 1u, a4);
}

double re::ShaderGraphMaterial::setInt@<D0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  int v9;
  uint64_t v10;

  v9 = a3;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = a2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(this, &v10, 4uLL, &v9, 3u, a4);
}

double re::ShaderGraphMaterial::setUint@<D0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  int v9;
  uint64_t v10;

  v9 = a3;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = a2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(this, &v10, 4uLL, &v9, 7u, a4);
}

double re::ShaderGraphMaterial::setVector2F@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v9;
  uint64_t v10;

  v9 = a3;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 8uLL, &v9, 0x20u, a4);
}

double re::ShaderGraphMaterial::setInt2@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  double v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 8uLL, &v9, 4u, a3);
}

double re::ShaderGraphMaterial::setUint2@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  double v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 8uLL, &v9, 8u, a3);
}

double re::ShaderGraphMaterial::setVector3F@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD v10[3];
  uint64_t v11;

  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v11 = v5;
  return re::ShaderGraphMaterial::setConstant(a1, &v11, 0x10uLL, v10, 0x21u, a5);
}

double re::ShaderGraphMaterial::setColorGamut3F@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  __int128 v18;
  uint64_t v19[2];
  uint64_t v20;

  v19[0] = a3;
  v19[1] = a4;
  v8 = a1[29];
  if (v8 && (v9 = *(unsigned __int8 **)(v8 + 152)) != 0)
    v10 = *v9;
  else
    v10 = 0;
  *(_QWORD *)&v11 = re::ColorGamut3F::as(v19, v10, 1);
  DWORD2(v11) = v12;
  v18 = v11;
  if (a2)
  {
    v13 = *a2;
    if (*a2)
    {
      v14 = a2[1];
      if (v14)
      {
        v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v13 = 31 * v13 + v14;
          v16 = *v15++;
          v14 = v16;
        }
        while (v16);
      }
      v13 &= ~0x8000000000000000;
    }
  }
  else
  {
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v20 = v13;
  return re::ShaderGraphMaterial::setConstant(a1, &v20, 0x10uLL, &v18, 0x14u, a5);
}

double re::ShaderGraphMaterial::setColorGamut3F@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  __int128 v11;
  int v12;
  uint64_t v14;
  __int128 v15;
  uint64_t v16[2];

  v16[0] = a3;
  v16[1] = a4;
  v8 = a1[29];
  if (v8 && (v9 = *(unsigned __int8 **)(v8 + 152)) != 0)
    v10 = *v9;
  else
    v10 = 0;
  *(_QWORD *)&v11 = re::ColorGamut3F::as(v16, v10, 1);
  DWORD2(v11) = v12;
  v15 = v11;
  v14 = *a2;
  return re::ShaderGraphMaterial::setConstant(a1, &v14, 0x10uLL, &v15, 0x14u, a5);
}

double re::ShaderGraphMaterial::setInt3@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  __n128 v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 0x10uLL, &v9, 5u, a3);
}

double re::ShaderGraphMaterial::setUint3@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  __n128 v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 0x10uLL, &v9, 9u, a3);
}

double re::ShaderGraphMaterial::setVector4F@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD v10[3];
  uint64_t v11;

  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v11 = v5;
  return re::ShaderGraphMaterial::setConstant(a1, &v11, 0x10uLL, v10, 0x22u, a5);
}

double re::ShaderGraphMaterial::setColorGamut4F@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v15[4];
  __int128 v16;

  v7 = a1[29];
  if (v7 && (v8 = *(unsigned __int8 **)(v7 + 152)) != 0)
    v9 = *v8;
  else
    v9 = 0;
  re::ColorGamut4F::as(a3, v9, 1, (uint64_t)v15);
  v16 = *(_OWORD *)v15;
  if (a2)
  {
    v10 = *a2;
    if (*a2)
    {
      v11 = a2[1];
      if (v11)
      {
        v12 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v10 = 31 * v10 + v11;
          v13 = *v12++;
          v11 = v13;
        }
        while (v13);
      }
      v10 &= ~0x8000000000000000;
    }
  }
  else
  {
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v15[0] = v10;
  return re::ShaderGraphMaterial::setConstant(a1, v15, 0x10uLL, &v16, 0x15u, a4);
}

double re::ShaderGraphMaterial::setColorGamut4F@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v7 = a1[29];
  if (v7 && (v8 = *(unsigned __int8 **)(v7 + 152)) != 0)
    v9 = *v8;
  else
    v9 = 0;
  re::ColorGamut4F::as(a3, v9, 1, (uint64_t)&v12);
  v13 = v12;
  v11 = *a2;
  return re::ShaderGraphMaterial::setConstant(a1, &v11, 0x10uLL, &v13, 0x15u, a4);
}

double re::ShaderGraphMaterial::setInt4@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  __n128 v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 0x10uLL, &v9, 6u, a3);
}

double re::ShaderGraphMaterial::setUint4@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  __n128 v9;
  uint64_t v10;

  v9 = a4;
  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v10 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v10, 0x10uLL, &v9, 0xAu, a3);
}

double re::ShaderGraphMaterial::setMatrix2x2F@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD v10[2];
  uint64_t v11;

  v10[0] = a3;
  v10[1] = a4;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *v7++;
          v6 = v8;
        }
        while (v8);
      }
      v5 &= ~0x8000000000000000;
    }
  }
  else
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v11 = v5;
  return re::ShaderGraphMaterial::setConstant(a1, &v11, 0x10uLL, v10, 0x30u, a5);
}

double re::ShaderGraphMaterial::setMatrix3x3F@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v9;

  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v9 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v9, 0x30uLL, a3, 0x31u, a4);
}

double re::ShaderGraphMaterial::setMatrix4x4F@<D0>(_QWORD *a1@<X0>, char *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v9;

  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v9 = v4;
  return re::ShaderGraphMaterial::setConstant(a1, &v9, 0x40uLL, a3, 0x32u, a4);
}

double re::ShaderGraphMaterial::setAssetHandle@<D0>(re::ShaderGraphMaterial *this@<X0>, const char *a2@<X1>, const re::AssetHandle *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  const char *v6;
  int v7;
  uint64_t v9;

  if (a2)
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = a2 + 2;
        do
        {
          v4 = 31 * v4 + v5;
          v7 = *(unsigned __int8 *)v6++;
          v5 = v7;
        }
        while (v7);
      }
      v4 &= ~0x8000000000000000;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v9 = v4;
  return re::ShaderGraphMaterial::setAssetHandle(this, &v9, (uint64_t *)a3, a4);
}

double re::ShaderGraphMaterial::setAssetHandle@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  _BYTE v9[32];
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *a2;
  re::ShaderGraphMaterial::handle(a1, &v15, a4);
  v15 = 0;
  if ((*(_BYTE *)(a4 + 12) & 7) != 0)
  {
    *(_QWORD *)&result = re::ShaderGraphMaterial::setAssetHandle((uint64_t)a1, a4, a3, (uint64_t)v9).n128_u64[0];
  }
  else
  {
    v14 = *a2;
    re::ShaderGraphMaterial::addTexture((uint64_t)a1, &v14, (re::AssetHandle *)a3);
    v14 = 0;
    v10 = *a2;
    re::ShaderGraphMaterial::handle(a1, &v10, (uint64_t)&v11);
    *(_QWORD *)a4 = v11;
    result = *(double *)&v12;
    *(_OWORD *)(a4 + 8) = v12;
    *(_BYTE *)(a4 + 24) = v13;
  }
  return result;
}

__n128 re::ShaderGraphMaterial::setAssetHandle@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 12) & 8) != 0)
  {
    v8 = (__n128 *)(a2 + 8);
    v7 = *(unsigned __int16 *)(a2 + 8);
    v9 = *(_QWORD *)(a1 + 80);
    if (v9 <= v7)
    {
      v11[1] = 0;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v12 = 136315906;
      v13 = "operator[]";
      v14 = 1024;
      v15 = 789;
      v16 = 2048;
      v17 = v7;
      v18 = 2048;
      v19 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v10 = *(_QWORD *)(a1 + 96);
    if (*(_QWORD *)(v10 + 24 * *(unsigned __int16 *)(a2 + 8) + 8) != a3[1])
      re::AssetHandle::operator=((uint64_t *)(v10 + 24 * *(unsigned __int16 *)(a2 + 8)), a3);
    *(_QWORD *)a4 = *(_QWORD *)a2;
    result = *v8;
    *(__n128 *)(a4 + 8) = *v8;
    *(_BYTE *)(a4 + 24) = *(_BYTE *)(a2 + 24);
  }
  else
  {
    v11[0] = *(_QWORD *)a2;
    re::ShaderGraphMaterial::setAssetHandle(a1, v11);
  }
  return result;
}

void re::ShaderGraphMaterial::~ShaderGraphMaterial(re::ShaderGraphMaterial *this)
{
  re::ShaderGraphMaterial::~ShaderGraphMaterial(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED6A3B0;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 64);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 104);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 168);
  v4 = *((_QWORD *)this + 32);
  if (v4)
  {

    *((_QWORD *)this + 32) = 0;
  }
  *((_QWORD *)this + 33) = 0xFFFFFFFFFFFFFFFLL;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 168);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 64);
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a3;
  v18 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v18 = *a2;
  *(_DWORD *)(v18 + 8) = v17;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateHashes((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v16);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

double re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateHashes(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = v3 ^ *(_QWORD *)(result + 40);
  v5 = 0xBF58476D1CE4E5B9
     * ((*(unsigned __int16 *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 11) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 10) << 16)) ^ ((unint64_t)*(unsigned __int8 *)(a2 + 11) >> 6));
  v6 = *(_QWORD *)(result + 48) ^ v3 ^ ((v3 << 6)
                                      + (v3 >> 2)
                                      - 0x61C8864680B583E9
                                      + ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                      * (v5 ^ (v5 >> 27))) >> 31)));
  *(_QWORD *)(result + 40) = v4;
  *(_QWORD *)(result + 48) = v6;
  return result;
}

_QWORD *re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    v9 = v3[2];
    if (v9)
    {
      v10 = 0;
      for (i = 0; i < v9; ++i)
      {
        v12 = v3[1] + v10;
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    v9 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

double re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::init(v22, v4, a2);
  v20[0] = a1;
  v6 = a1[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a1;
    v9 = v6 >> 4;
    v10 = (__n128)xmmword_2260EE390;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        goto LABEL_9;
    }
    v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    v21 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(v22, *(_QWORD *)(v20[0] + 8) + 16 * v12, *(_QWORD *)(v20[0] + 8) + 16 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v12 = v21;
      }
      while (v21 != -1);
      v6 = a1[2];
    }
  }
LABEL_9:
  v13 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  v14 = v22[0];
  v15 = v22[1];
  v22[0] = *(_OWORD *)a1;
  *(_QWORD *)&v22[1] = v6;
  v16 = v22[2];
  v17 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v13;
  *(_OWORD *)((char *)&v22[2] + 8) = v17;
  v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v14;
  *((_OWORD *)a1 + 1) = v15;
  *((_OWORD *)a1 + 2) = v16;
  *(_OWORD *)((char *)&v22[1] + 8) = v18;
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v22);
}

uint64_t re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = *(_QWORD *)a1;
  v12 = v9 % v10;
  while (1)
  {
    v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40)
      break;
    if (v12 + 1 == v10)
      v12 = 0;
    else
      ++v12;
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v14 = v11 + 16 * v12;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v12;
  LODWORD(v14) = *a3;
  v17 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v17 = *a2;
  *(_DWORD *)(v17 + 8) = v14;
  v18 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::updateHashes((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v16);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

_QWORD *re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[2];
  uint64_t i;

  result = re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(a1);
  v14[0] = a2;
  v5 = a2[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a2;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        return result;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    for (i = v10; i != -1; v10 = i)
    {
      v11 = *(_QWORD *)(v14[0] + 8) + 16 * v10;
      v12 = *(_QWORD *)v11;
      v13 = *(_DWORD *)(v11 + 8);
      re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::internalAdd(a1, &v12, &v13);
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

_QWORD *re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD v14[2];
  uint64_t i;

  result = re::HashBrown<re::WeakStringID,re::ConstantLocation,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::ConstantLocation>,false>::clear(a1);
  v14[0] = a2;
  v5 = a2[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a2;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        return result;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    for (i = v10; i != -1; v10 = i)
    {
      v11 = *(_QWORD *)(v14[0] + 8) + 16 * v10;
      v12 = *(_QWORD *)v11;
      v13 = *(_DWORD *)(v11 + 8);
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(a1, &v12, &v13);
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v14);
    }
  }
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = *(_QWORD *)a1;
  v12 = v9 % v10;
  while (1)
  {
    v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v13 < 0x40)
      break;
    if (v12 + 1 == v10)
      v12 = 0;
    else
      ++v12;
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v14 = v11 + 16 * v12;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v12;
  LODWORD(v14) = *a3;
  v17 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v17 = *a2;
  *(_DWORD *)(v17 + 8) = v14;
  v18 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes((uint64_t)a1, v17);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

double re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::doResize(a1, v3);
}

double re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  v6 = a1[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a1;
    v9 = v6 >> 4;
    v10 = (__n128)xmmword_2260EE390;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        goto LABEL_9;
    }
    v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    v21 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(v22, *(_QWORD *)(v20[0] + 8) + 16 * v12, *(_QWORD *)(v20[0] + 8) + 16 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v12 = v21;
      }
      while (v21 != -1);
      v6 = a1[2];
    }
  }
LABEL_9:
  v13 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  v14 = v22[0];
  v15 = v22[1];
  v22[0] = *(_OWORD *)a1;
  *(_QWORD *)&v22[1] = v6;
  v16 = v22[2];
  v17 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v13;
  *(_OWORD *)((char *)&v22[2] + 8) = v17;
  v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v14;
  *((_OWORD *)a1 + 1) = v15;
  *((_OWORD *)a1 + 2) = v16;
  *(_OWORD *)((char *)&v22[1] + 8) = v18;
  return re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)v22);
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a3;
  v18 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v18 = *a2;
  *(_DWORD *)(v18 + 8) = v17;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes((uint64_t)a1, v18);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

uint64_t *re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::mapValues<void re::removeNameMappedParameter<re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>,re::DynamicArray<re::AssetHandle>>(re::WeakStringID,re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &,re::DynamicArray<re::AssetHandle> &)::{lambda(re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false> &)#1}>(uint64_t *result, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD v12[2];
  uint64_t i;

  v12[0] = result;
  v2 = result[2];
  if (v2 >= 0x10)
  {
    v4 = (uint64_t)result;
    v5 = 0;
    v6 = *result;
    v7 = v2 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v12[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        return result;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; v9 = i)
    {
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash(v4, *(_QWORD *)(v4 + 8) + 16 * v9);
      v10 = *(_QWORD *)(v4 + 8) + 16 * i;
      v11 = *(_DWORD *)(v10 + 8);
      if (v11 >= *a2)
        *(_DWORD *)(v10 + 8) = v11 - 1;
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash(v4, v10);
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v12);
    }
  }
  return result;
}

BOOL re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::updateHashes((uint64_t)a1, a1[1] + 16 * v3);
    v9 = a1[2];
    *(_QWORD *)(a1[1] + 16 * v4) = 0;
    v10 = a1[4];
    if (v7)
      ++v10;
    v11 = a1[3] - 1;
    a1[3] = v11;
    a1[4] = v10;
    if (v9 >= 0x11 && v11 < v9 >> 2)
      re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::resize(a1, 0);
  }
  return v4 != -1;
}

uint64_t re::HashBrown<re::WeakStringID,unsigned int,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned int>,false>::updateKvpsHash(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)(a2 + 8) ^ ((unint64_t)*(unsigned int *)(a2 + 8) >> 30));
  *(_QWORD *)(result + 48) ^= v3 ^ ((v3 << 6)
                                  + (v3 >> 2)
                                  + ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                  * (v4 ^ (v4 >> 27))) >> 31))
                                  - 0x61C8864680B583E9);
  return result;
}

double re::MaterialParameterTable::MaterialParameterTable(re::MaterialParameterTable *this)
{
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)this = &off_24ED6A3F8;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = &off_24ED36808;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_DWORD *)this + 98) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_DWORD *)this + 88) = 0;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_DWORD *)this + 106) = 1;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 60) = 0;
  *((_DWORD *)this + 122) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_DWORD *)this + 136) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_DWORD *)this + 132) = 0;
  *((_QWORD *)this + 98) = 0;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((_QWORD *)this + 85) = off_24ED3A908;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 868) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_DWORD *)this + 266) = 0;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_QWORD *)((char *)this + 1068) = 0x7FFFFFFFLL;
  *((_BYTE *)this + 1080) = 0;
  *((_BYTE *)this + 1092) = 0;
  *((_WORD *)this + 560) = 0;
  *((_BYTE *)this + 1122) = 0;
  return result;
}

void re::MaterialParameterTable::~MaterialParameterTable(re::MaterialParameterTable *this)
{
  re::MaterialParameterTable::~MaterialParameterTable(this);
  JUMPOUT(0x2276933B8);
}

{
  re::ShaderParameterTable *v2;

  *(_QWORD *)this = &off_24ED6A3F8;
  v2 = (re::MaterialParameterTable *)((char *)this + 24);
  re::ShaderParameterTable::deinit((re::MaterialParameterTable *)((char *)this + 24));
  re::TextureParameterTable::deinit((re::MaterialParameterTable *)((char *)this + 552));
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 129);
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 129);
  re::TextureParameterTable::~TextureParameterTable((re::MaterialParameterTable *)((char *)this + 552));
  re::ShaderParameterTable::~ShaderParameterTable(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

void re::make::shared::object<re::MaterialParameterTable>(re *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  void *v4;

  v3 = re::globalAllocators(a1);
  v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 1128, 8);
  bzero(v4, 0x468uLL);
  re::MaterialParameterTable::MaterialParameterTable((re::MaterialParameterTable *)v4);
  *a2 = v4;
}

uint64_t *re::allocInfo_AudioSceneService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_304);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_304))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112BF8, 0);
    *(uint64_t *)((char *)&qword_254112C08 + 6) = 0;
    qword_254112C08 = 0;
    qword_254112C18 = 0;
    qword_254112C20 = 0xFFFFFFFFLL;
    qword_254112BF8 = (uint64_t)&off_24ED7DAA8;
    qword_254112C28 = (uint64_t)"AudioSceneService";
    dword_254112C30 = 0;
    unk_254112C38 = 0u;
    unk_254112C48 = 0u;
    unk_254112C58 = 0u;
    qword_254112C68 = 0;
    __cxa_guard_release(&_MergedGlobals_304);
  }
  return &qword_254112BF8;
}

void re::initInfo_AudioSceneService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x75B63B8F740DDEBELL;
  v5[1] = "AudioSceneService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_AudioSceneService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_AudioSceneService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioSceneService", (uint64_t (*)(re::internal *))re::allocInfo_AudioSceneService, (re::IntrospectionBase *(*)(void))re::initInfo_AudioSceneService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AudioSceneService>, this);
}

uint64_t *re::ecs2::allocInfo_AudioGeneratorComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_305);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_305))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112C98, 0);
    *(uint64_t *)((char *)&qword_254112CA8 + 6) = 0;
    qword_254112CA8 = 0;
    qword_254112CB8 = 0;
    qword_254112CC0 = 0xFFFFFFFFLL;
    qword_254112C98 = (uint64_t)&off_24ED7DAA8;
    qword_254112CC8 = (uint64_t)"AudioGeneratorComponent";
    dword_254112CD0 = 0;
    unk_254112CD8 = 0u;
    unk_254112CE8 = 0u;
    unk_254112CF8 = 0u;
    qword_254112D08 = 0;
    __cxa_guard_release(&_MergedGlobals_305);
  }
  return &qword_254112C98;
}

void re::ecs2::initInfo_AudioGeneratorComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0x9619D97E206E8B80;
  v13[1] = "AudioGeneratorComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_254112C78);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254112C78);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254112C88 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_AudioSourceSyncState((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "syncState";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2800000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254112C90 = v11;
      __cxa_guard_release(&qword_254112C78);
    }
  }
  *((_QWORD *)this + 2) = 0x48000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254112C88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioGeneratorComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioGeneratorComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioGeneratorComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioGeneratorComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

re::ecs2::AudioGeneratorComponent *re::internal::defaultConstruct<re::ecs2::AudioGeneratorComponent>(int a1, int a2, re::ecs2::AudioGeneratorComponent *this)
{
  return re::ecs2::AudioGeneratorComponent::AudioGeneratorComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioGeneratorComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioGeneratorComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioGeneratorComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioGeneratorComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioGeneratorComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioGeneratorComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AudioGeneratorSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254112C80);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254112C80))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112D10, 0);
    *(uint64_t *)((char *)&qword_254112D20 + 6) = 0;
    qword_254112D20 = 0;
    qword_254112D30 = 0;
    qword_254112D38 = 0xFFFFFFFFLL;
    qword_254112D10 = (uint64_t)&off_24ED7DAA8;
    qword_254112D40 = (uint64_t)"AudioGeneratorSystem";
    dword_254112D48 = 0;
    xmmword_254112D50 = 0u;
    unk_254112D60 = 0u;
    xmmword_254112D70 = 0u;
    qword_254112D80 = 0;
    __cxa_guard_release(&qword_254112C80);
  }
  return &qword_254112D10;
}

void re::ecs2::initInfo_AudioGeneratorSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x7ACD467487E77098;
  v5[1] = "AudioGeneratorSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AudioGeneratorSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioGeneratorSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioGeneratorSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioGeneratorSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioGeneratorSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioGeneratorSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioGeneratorSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::AudioGeneratorSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  re::ecs2::System::System(a3, 1);
  *v3 = &off_24ED6A490;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::AudioGeneratorSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AudioGeneratorSystem>(uint64_t a1)
{
  _QWORD *v1;

  re::ecs2::System::System(a1, 1);
  *v1 = &off_24ED6A490;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::AudioGeneratorSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AudioGeneratorSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioGeneratorSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioGeneratorSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioGeneratorSystem>, this);
}

re::ecs2::AudioGeneratorComponent *re::ecs2::AudioGeneratorComponent::AudioGeneratorComponent(re::ecs2::AudioGeneratorComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v9;
  _anonymous_namespace_ *v10;
  re *v11;
  uint64_t *v12;
  _QWORD *v13;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED6A440;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  v3 = v2 + 40;
  *(_QWORD *)(v2 + 72) = 9;
  *(_DWORD *)(v2 + 80) = 1065353216;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 108) = 1065353216;
  *(_BYTE *)(v2 + 116) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v2 + 120) = _D0;
  *(_DWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 144) = 1065353216;
  *(_BYTE *)(v2 + 152) = 0;
  *(_BYTE *)(v2 + 192) = 0;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  v9 = (_QWORD *)(v2 + 200);
  v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v9, 0);
  *((_DWORD *)this + 58) = 1;
  *(_QWORD *)((char *)this + 236) = 0x3E051EB800000000;
  *((_DWORD *)this + 61) = 1106247680;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  v3 += 224;
  re::DynamicString::setCapacity((_QWORD *)v3, 0);
  *((_WORD *)this + 148) = 0;
  v11 = re::AudioSourceState::AudioSourceState((re::ecs2::AudioGeneratorComponent *)((char *)this + 304));
  *((_OWORD *)this + 70) = xmmword_226129E80;
  *((_DWORD *)this + 284) = 0;
  v12 = re::globalAllocators(v11);
  v13 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 8, 4);
  *v13 = 0;
  *((_QWORD *)this + 4) = v13;
  return this;
}

void re::ecs2::AudioGeneratorComponent::~AudioGeneratorComponent(re::ecs2::AudioGeneratorComponent *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24ED6A440;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3[2] + 40))(v3[2], v2);
  }
  re::AudioSourceState::~AudioSourceState((re::ecs2::AudioGeneratorComponent *)((char *)this + 304));
  v4 = *((_QWORD *)this + 33);
  if (v4)
  {
    if ((*((_BYTE *)this + 272) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 35));
    *(_OWORD *)((char *)this + 264) = 0u;
    *(_OWORD *)((char *)this + 280) = 0u;
  }
  v5 = *((_QWORD *)this + 25);
  if (v5)
  {
    if ((*((_BYTE *)this + 208) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 27));
    *(_OWORD *)((char *)this + 200) = 0u;
    *(_OWORD *)((char *)this + 216) = 0u;
  }
  if (*((_BYTE *)this + 152))
  {
    v6 = *((_QWORD *)this + 20);
    if (v6)
    {
      if ((*((_BYTE *)this + 168) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 22));
      *((_OWORD *)this + 10) = 0u;
      *((_OWORD *)this + 11) = 0u;
    }
  }
  re::AssetHandle::~AssetHandle((re::ecs2::AudioGeneratorComponent *)((char *)this + 48));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::AudioGeneratorComponent::~AudioGeneratorComponent(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AudioGeneratorSystem::willAddSystemToECSService(re::ecs2::AudioGeneratorSystem *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  *((_QWORD *)this + 13) = result;
  return result;
}

uint64_t re::ecs2::AudioGeneratorSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  return this;
}

_QWORD *re::ecs2::AudioGeneratorSystem::update(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t *v5;
  re *isStatisticCollectionEnabled;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64x2_t *v10;
  unint64_t v11;
  unint64_t v12;
  int64x2_t v13;
  re::ecs2::SceneComponentTable *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[4];
  _BYTE v26[16];
  uint64_t v27[2];

  if (a2)
  {
    v2 = (uint64_t)result;
    result = (_QWORD *)result[13];
    if (result)
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      if (result)
      {
        v4 = result;
        v5 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v27);
        isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v5);
        if ((_DWORD)isStatisticCollectionEnabled)
        {
          v7 = re::profilerThreadContext(isStatisticCollectionEnabled);
          v8 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v9 = v8 ? *(_QWORD *)(v8 + 24) : 0;
          v10 = *(int64x2_t **)(v7 + 152);
          if (v10)
          {
            v11 = v10[568].u64[0];
            if (v11 >= v9)
              v11 = v9;
            v10[568].i64[0] = v11;
            v12 = v10[568].u64[1];
            if (v12 <= v9)
              v12 = v9;
            v10[568].i64[1] = v12;
            v13 = vdupq_n_s64(1uLL);
            v13.i64[0] = v9;
            v10[569] = vaddq_s64(v10[569], v13);
            *(_BYTE *)(v7 + 184) = 0;
          }
        }
        v14 = (re::ecs2::SceneComponentTable *)(a2 + 200);
        re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26, 3061, v2);
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 272);
        v16 = re::ecs2::SceneComponentTable::get(v14, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v17 = *(_QWORD *)(v16 + 24);
        if (v17)
        {
          v18 = v15 >> 1;
          v19 = *(uint64_t **)(v16 + 40);
          v20 = 8 * v17;
          do
          {
            v21 = *v19++;
            re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v21 + 16), (const re::ecs2::Entity *)1, v25);
            v22 = v25[1];
            v23 = v25[2];
            v24 = v25[3];
            *(_OWORD *)(v21 + 624) = v25[0];
            *(_OWORD *)(v21 + 640) = v22;
            *(_OWORD *)(v21 + 656) = v23;
            *(_OWORD *)(v21 + 672) = v24;
            *(_QWORD *)(v21 + 752) = v18;
            (*(void (**)(_QWORD *, uint64_t))(*v4 + 280))(v4, v21 + 304);
            v20 -= 8;
          }
          while (v20);
        }
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26);
        return (_QWORD *)re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v27);
      }
    }
  }
  return result;
}

void re::ecs2::AudioGeneratorSystem::~AudioGeneratorSystem(re::ecs2::AudioGeneratorSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AudioGeneratorSystem::typeInfo(re::ecs2::AudioGeneratorSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioGeneratorSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioGeneratorSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioGeneratorSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioGeneratorSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

id re::internal::defaultRetain<re::ecs2::AudioGeneratorSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioGeneratorSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::ecs2::PinComponent::pinByName@<X0>(re::ecs2::PinComponent *this@<X0>, const re::StringID *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  _BYTE v15[8];
  unint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  result = re::ecs2::PinComponent::indexOfPin((_BOOL8)v15, this, a2);
  if (v15[0])
  {
    v6 = v16;
    v7 = *((_QWORD *)this + 6);
    if (v7 <= v16)
    {
      v17 = 0;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v18 = 136315906;
      v19 = "operator[]";
      v20 = 1024;
      v21 = 797;
      v22 = 2048;
      v23 = v6;
      v24 = 2048;
      v25 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v8 = *((_QWORD *)this + 8);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 16) = &off_24ED68168;
    v9 = v8 + 208 * v6;
    re::StringID::StringID((re::StringID *)(a3 + 24), (const StringID *)(v9 + 8));
    v10 = *(_OWORD *)(v9 + 32);
    v11 = *(_OWORD *)(v9 + 48);
    v12 = *(_OWORD *)(v9 + 80);
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(a3 + 96) = v12;
    *(_OWORD *)(a3 + 48) = v10;
    *(_OWORD *)(a3 + 64) = v11;
    result = re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(a3 + 112, (uint64_t *)(v9 + 96));
    v13 = *(_OWORD *)(v9 + 160);
    *(_OWORD *)(a3 + 160) = *(_OWORD *)(v9 + 144);
    *(_OWORD *)(a3 + 176) = v13;
    v14 = *(unsigned __int8 *)(v9 + 176);
    *(_BYTE *)(a3 + 192) = v14;
    if (v14)
      return (uint64_t)re::StringID::StringID((re::StringID *)(a3 + 200), (const StringID *)(v8 + 208 * v6 + 184));
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

BOOL re::ecs2::PinComponent::indexOfPin(_BOOL8 this, const re::StringID *a2, _QWORD *a3)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = this;
  if ((*a3 > 1uLL || (v5 = (_BYTE *)a3[1]) == 0 || *v5) && (v6 = *((_QWORD *)a2 + 6)) != 0)
  {
    v7 = 0;
    v8 = (_QWORD *)(*((_QWORD *)a2 + 8) + 8);
    while (1)
    {
      this = re::StringID::operator==(v8, a3);
      if (this)
        break;
      ++v7;
      v8 += 26;
      if (v6 == v7)
        goto LABEL_8;
    }
    *(_BYTE *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v7;
  }
  else
  {
LABEL_8:
    *(_BYTE *)v4 = 0;
  }
  return this;
}

_BYTE *re::ecs2::PinComponent::addPin(re::ecs2::PinComponent *this, const re::ecs2::Pin *a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE *result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  _BYTE v21[8];
  unint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)((char *)a2 + 8);
  re::ecs2::PinComponent::indexOfPin((_BOOL8)v21, this, (_QWORD *)a2 + 1);
  if (v21[0])
  {
    v5 = v22;
    v6 = *((_QWORD *)this + 6);
    if (v6 <= v22)
    {
      v23 = 0;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v24 = 136315906;
      v25 = "operator[]";
      v26 = 1024;
      v27 = 789;
      v28 = 2048;
      v29 = v5;
      v30 = 2048;
      v31 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v7 = *((_QWORD *)this + 8) + 208 * v22;
    re::StringID::operator=((unint64_t *)(v7 + 8), v4);
    v8 = *((_OWORD *)a2 + 2);
    v9 = *((_OWORD *)a2 + 3);
    v10 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v7 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v7 + 80) = v10;
    *(_OWORD *)(v7 + 32) = v8;
    *(_OWORD *)(v7 + 48) = v9;
    re::DynamicArray<re::ecs2::PinAlignment>::operator=(v7 + 96, (uint64_t *)a2 + 12);
    v11 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(v7 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v7 + 160) = v11;
    return re::Optional<re::StringID>::operator=((_BYTE *)(v7 + 176), (uint64_t *)a2 + 22);
  }
  else
  {
    v13 = *((_QWORD *)this + 6);
    if (v13 >= *((_QWORD *)this + 5))
    {
      re::DynamicArray<re::ecs2::Pin>::growCapacity((_QWORD *)this + 4, v13 + 1);
      v13 = *((_QWORD *)this + 6);
    }
    v14 = *((_QWORD *)this + 8);
    v15 = v14 + 208 * v13;
    *(_QWORD *)v15 = &off_24ED68168;
    re::StringID::StringID((re::StringID *)(v15 + 8), (const StringID *)v4);
    v16 = *((_OWORD *)a2 + 2);
    v17 = *((_OWORD *)a2 + 3);
    v18 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(v15 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v15 + 80) = v18;
    *(_OWORD *)(v15 + 32) = v16;
    *(_OWORD *)(v15 + 48) = v17;
    result = (_BYTE *)re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(v15 + 96, (uint64_t *)a2 + 12);
    v19 = *((_OWORD *)a2 + 10);
    *(_OWORD *)(v15 + 144) = *((_OWORD *)a2 + 9);
    *(_OWORD *)(v15 + 160) = v19;
    v20 = *((unsigned __int8 *)a2 + 176);
    *(_BYTE *)(v15 + 176) = v20;
    if (v20)
      result = re::StringID::StringID((re::StringID *)(v14 + 208 * v13 + 184), (const StringID *)((char *)a2 + 184));
    ++*((_QWORD *)this + 6);
    ++*((_DWORD *)this + 14);
  }
  return result;
}

uint64_t re::ecs2::PinComponent::removePin(uint64_t this, const re::StringID *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void (***v17)(void);
  void (**v18)(void);
  const re::ecs2::Entity *v19;
  const re::ecs2::Entity *v20;
  const re::ecs2::Entity *v21;
  uint64_t v22;
  uint64_t v23;

  v2 = this;
  v3 = *(_QWORD *)(this + 48);
  if (v3)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(v2 + 64);
      v8 = (uint64_t *)(v7 + 208 * v6 + 8);
      this = re::StringID::operator==(v8, a2);
      if ((_DWORD)this)
        break;
LABEL_8:
      if (v6 != v5)
      {
        v10 = v7 + 208 * v5;
        re::StringID::operator=((unint64_t *)(v10 + 8), v8);
        v11 = v7 + 208 * v6;
        v12 = *(_OWORD *)(v11 + 32);
        v13 = *(_OWORD *)(v11 + 48);
        v14 = *(_OWORD *)(v11 + 80);
        *(_OWORD *)(v10 + 64) = *(_OWORD *)(v11 + 64);
        *(_OWORD *)(v10 + 80) = v14;
        *(_OWORD *)(v10 + 32) = v12;
        *(_OWORD *)(v10 + 48) = v13;
        re::DynamicArray<re::ecs2::PinAlignment>::operator=(v10 + 96, (uint64_t *)(v11 + 96));
        v15 = *(_OWORD *)(v11 + 160);
        *(_OWORD *)(v10 + 144) = *(_OWORD *)(v11 + 144);
        *(_OWORD *)(v10 + 160) = v15;
        this = (uint64_t)re::Optional<re::StringID>::operator=((_BYTE *)(v10 + 176), (uint64_t *)(v11 + 176));
        v3 = *(_QWORD *)(v2 + 48);
      }
      ++v6;
      ++v5;
      if (v6 >= v3)
        goto LABEL_11;
    }
    v9 = (_QWORD *)(v7 + 208 * v6 + 216);
    while (++v6 < v3)
    {
      this = re::StringID::operator==(v9, a2);
      v9 += 26;
      if (!(_DWORD)this)
      {
        v8 = v9 - 26;
        goto LABEL_8;
      }
    }
LABEL_11:
    if (v5 != v3)
    {
      v16 = -208 * v5 + 208 * v3;
      v17 = (void (***)(void))(*(_QWORD *)(v2 + 64) + 208 * v5);
      do
      {
        v18 = *v17;
        v17 += 26;
        (*v18)();
        this = (uint64_t)v17;
        v16 -= 208;
      }
      while (v16);
      *(_QWORD *)(v2 + 48) = v5;
      ++*(_DWORD *)(v2 + 56);
    }
  }
  v19 = *(const re::ecs2::Entity **)(v2 + 16);
  if (v19)
  {
    v20 = v19;
    do
    {
      v21 = v20;
      v20 = (const re::ecs2::Entity *)*((_QWORD *)v20 + 3);
    }
    while (v20);
    v22 = *((_QWORD *)v21 + 2);
    if (v22)
    {
      this = *(_QWORD *)(v22 + 56);
      if (this)
      {
        v23 = (*(uint64_t (**)(uint64_t, const re::StringID *))(*(_QWORD *)this + 32))(this, a2);
        this = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v23);
        if (this)
        {
          this = (uint64_t)re::ecs2::PhysicsSimulationService::physicsSimulationForEntity((re::ecs2::PhysicsSimulationService *)this, v19);
          if (this)
            *(_BYTE *)(this + 240) = 1;
        }
      }
    }
  }
  return this;
}

uint64_t *re::ecs2::allocInfo_PinComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254112D98);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254112D98))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112DF8, 0);
    *(uint64_t *)((char *)&qword_254112E08 + 6) = 0;
    qword_254112E08 = 0;
    qword_254112E18 = 0;
    qword_254112E20 = 0xFFFFFFFFLL;
    qword_254112DF8 = (uint64_t)&off_24ED7DAA8;
    qword_254112E28 = (uint64_t)"PinComponent";
    dword_254112E30 = 0;
    xmmword_254112E38 = 0u;
    unk_254112E48 = 0u;
    xmmword_254112E58 = 0u;
    qword_254112E68 = 0;
    __cxa_guard_release(&qword_254112D98);
  }
  return &qword_254112DF8;
}

void re::ecs2::initInfo_PinComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  re::IntrospectionRegistry *v14;
  const re::IntrospectionBase *v15;
  const char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25[2];
  __int128 v26;
  uint64_t v27;
  _QWORD v28[60];

  v27 = 0x3AE3A3F729C1AE10;
  v28[0] = "PinComponent";
  re::StringID::destroyString((re::StringID *)&v27);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254112D90);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254112D90);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254112DA8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = atomic_load((unsigned __int8 *)&qword_254112DA0);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254112DA0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112DB8, 0);
        *(uint64_t *)((char *)&qword_254112DC8 + 6) = 0;
        qword_254112DC8 = 0;
        *(_QWORD *)&xmmword_254112DD8 = 0;
        *((_QWORD *)&xmmword_254112DD8 + 1) = 0xFFFFFFFFLL;
        qword_254112DB8 = (uint64_t)&off_24ED1FA08;
        qword_254112DF0 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254112DE8);
        qword_254112DB8 = (uint64_t)&off_24ED6A5C8;
        __cxa_guard_release(&qword_254112DA0);
      }
      if ((_MergedGlobals_306 & 1) == 0)
      {
        v11 = re::ecs2::introspect_Pin((re::IntrospectionBase **)1);
        if ((_MergedGlobals_306 & 1) == 0)
        {
          v12 = v11;
          _MergedGlobals_306 = 1;
          v13 = *(_DWORD *)(v11 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112DB8, 0);
          qword_254112DC8 = 0x2800000003;
          dword_254112DD0 = v13;
          word_254112DD4 = 0;
          *(_QWORD *)&xmmword_254112DD8 = 0;
          *((_QWORD *)&xmmword_254112DD8 + 1) = 0xFFFFFFFFLL;
          qword_254112DE8 = v12;
          qword_254112DF0 = 0;
          qword_254112DB8 = (uint64_t)&off_24ED6A5C8;
          re::IntrospectionRegistry::add(v14, v15);
          re::getPrettyTypeName((re *)&qword_254112DB8, (const re::IntrospectionBase *)&v27);
          if ((v28[0] & 1) != 0)
            v16 = (const char *)v28[1];
          else
            v16 = (char *)v28 + 1;
          if (v27 && (v28[0] & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v27 + 40))();
          v24 = *(_OWORD *)(v12 + 32);
          v17 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v25);
          if (v17)
          {
            v18 = *v17;
            *((_QWORD *)&v23 + 1) = v18;
          }
          else
          {
            v26 = v24;
            re::TypeBuilder::beginListType((uint64_t)&v27, v25, 1, 0x28uLL, 8uLL, &v26);
            re::TypeBuilder::setConstructor((uint64_t)&v27, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v27, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v27, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v27, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v27, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v27, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v27, v19);
          }
          xmmword_254112DD8 = v23;
          re::StringID::destroyString((re::StringID *)v25);
        }
      }
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "m_pins";
      *(_QWORD *)(v20 + 16) = &qword_254112DB8;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2000000001;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254112DB0 = v20;
      __cxa_guard_release(&qword_254112D90);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254112DA8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PinComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PinComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PinComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PinComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v21 = v22;
}

void re::internal::defaultConstruct<re::ecs2::PinComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED6A548;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::PinComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)(a3 + 4));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::PinComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED6A548;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::PinComponent>(_QWORD *a1)
{
  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)(a1 + 4));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PinComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PinComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PinComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PinComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PinComponent>, this);
}

void re::ecs2::PinComponent::~PinComponent(re::ecs2::PinComponent *this)
{
  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::DynamicArray<re::ecs2::Pin>::deinit((uint64_t)this + 32);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::DynamicArray<re::ecs2::PinAlignment>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::ecs2::PinAlignment>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::ecs2::PinAlignment>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::ecs2::PinAlignment>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

_BYTE *re::Optional<re::StringID>::operator=(_BYTE *a1, uint64_t *a2)
{
  int v3;
  int v4;
  BOOL v5;
  re::StringID *v6;
  BOOL v7;
  BOOL v8;

  v3 = *a1;
  v4 = *(unsigned __int8 *)a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (re::StringID *)(a1 + 8);
    if (v3)
      v7 = v4 == 0;
    else
      v7 = 0;
    if (v7)
    {
      re::StringID::destroyString(v6);
      *a1 = 0;
    }
    else
    {
      if (v3)
        v8 = 1;
      else
        v8 = v4 == 0;
      if (v8)
      {
        re::StringID::operator=((unint64_t *)v6, a2 + 1);
      }
      else
      {
        *a1 = 1;
        re::StringID::StringID(v6, (const StringID *)(a2 + 1));
      }
    }
  }
  return a1;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::Pin>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::Pin>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::Pin>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::Pin>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::Pin>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::Pin>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::Pin>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::Pin>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::Pin>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::ecs2::Pin>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::Pin>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::ecs2::Pin>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::Pin>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  __int128 v8;
  re::IntrospectionBase *v9;
  _QWORD v11[4];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v11[0] = &off_24ED68168;
  v11[1] = 0;
  v11[2] = &str_110;
  v12 = 0u;
  v13 = 0;
  v14 = 0x3F80000000000000;
  *(_QWORD *)&v8 = 0x7F0000007FLL;
  *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
  v15 = vdupq_n_s32(0x7F800000u);
  v16 = v8;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  v20 = 0;
  v22 = 0u;
  v23 = 0;
  v24 = 0x3F80000000000000;
  v25 = 0;
  re::DynamicArray<re::ecs2::Pin>::add(this, (uint64_t)v11);
  re::ecs2::Pin::~Pin((re::ecs2::Pin *)v11);
  v9 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 208 * *((_QWORD *)this + 2) - 208);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v9);
  return v9;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::Pin>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::Pin>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 208 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 208 * a3;
}

uint64_t re::DynamicArray<re::ecs2::Pin>::deinit(uint64_t a1)
{
  uint64_t result;
  void (***v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  void (**v7)(_QWORD);

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(void (****)(_QWORD))(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 208 * v4;
        v6 = *(void (****)(_QWORD))(a1 + 32);
        do
        {
          v7 = *v6;
          v6 += 26;
          (*v7)(v3);
          v3 = v6;
          v5 -= 208;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(void (****)(_QWORD))(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::Pin>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v10 = 208 * a2;
    v11 = a2;
    do
    {
      result = (_QWORD *)(**(uint64_t (***)(uint64_t))(v3[4] + v10))(v3[4] + v10);
      ++v11;
      v10 += 208;
    }
    while (v11 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::ecs2::Pin>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 208 * v4 + 96;
      v7 = vdupq_n_s32(0x7F800000u);
      *(_QWORD *)&v8 = 0x7F0000007FLL;
      *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
      do
      {
        v9 = v3[4] + v6;
        *(_QWORD *)(v9 - 96) = &off_24ED68168;
        *(_QWORD *)(v9 - 88) = 0;
        *(_QWORD *)(v9 - 80) = &str_110;
        *(_OWORD *)(v9 - 64) = 0uLL;
        *(_QWORD *)(v9 - 48) = 0;
        *(_QWORD *)(v9 - 40) = 0x3F80000000000000;
        *(int32x4_t *)(v9 - 32) = v7;
        *(_OWORD *)(v9 - 16) = v8;
        *(_QWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 24) = 0;
        *(_OWORD *)(v9 + 48) = 0uLL;
        *(_QWORD *)(v9 + 64) = 0;
        *(_QWORD *)(v9 + 72) = 0x3F80000000000000;
        v6 += 208;
        *(_BYTE *)(v9 + 80) = 0;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::Pin>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void (***v10)(void);
  void (**v11)(void);
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 208 * v8;
      v10 = *(void (****)(void))(a1 + 32);
      do
      {
        v11 = *v10;
        v10 += 26;
        (*v11)();
        v9 -= 208;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::Pin>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::Pin>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::Pin>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 208 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 208;
        v15 -= 208;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 208 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 208 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::Pin>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::ecs2::MeshDeformationComponent::areRequiredAssetsLoaded(re::ecs2::MeshDeformationComponent *this, const re::ecs2::MeshComponent *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;

  if (a2 && (v3 = *((_QWORD *)a2 + 5)) != 0 && (v4 = atomic_load((unsigned int *)(v3 + 704)), v4 != 2))
  {
    re::AssetHandle::loadAsync((const re::ecs2::MeshComponent *)((char *)a2 + 32));
    result = 0;
  }
  else
  {
    result = 1;
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = atomic_load((unsigned int *)(v6 + 704));
    if (v7 != 2)
    {
      re::AssetHandle::loadAsync((re::ecs2::MeshDeformationComponent *)((char *)this + 32));
      return 0;
    }
  }
  return result;
}

_QWORD *re::ecs2::MeshDeformationComponent::clearRuntimeMeshDeformationData(re::ecs2::MeshDeformationComponent *this)
{
  id *v2;
  re *inited;
  _QWORD *result;
  id location;
  _QWORD v6[3];
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (id *)((char *)this + 384);
  inited = (re *)objc_initWeak(&location, 0);
  memset(v6, 0, sizeof(v6));
  v7 = re::globalAllocators(inited)[2];
  v8 = 0;
  re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset(v2, &location, 0, (uint64_t)v6);
  if (v8)
  {
    (*(void (**)(_QWORD *))*v8)(v8);
    if (v8 != v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  }
  objc_destroyWeak(&location);
  location = 0;
  result = re::MeshDeformationRuntimeData::clear((re::ecs2::MeshDeformationComponent *)((char *)this + 232));
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  return result;
}

BOOL re::ecs2::MeshDeformationComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  re::ecs2::MeshDeformationComponent *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v22, a5, 0);
  v8 = v22;
  v9 = v23;
  v22 = a4;
  v23 = v8;
  v24 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      v15 = *(re::ecs2::MeshDeformationComponent **)v14;
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 16) + 176);
      if (v16 && *(_QWORD *)(v16 + 40))
      {
        v17 = v22;
        v18 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v17, v18, *(_QWORD *)(a3 + 40));
      }
      else
      {
        v19 = v22;
        v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v23);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(_QWORD *)(a3 + 32));
        re::ecs2::MeshDeformationComponent::clearRuntimeMeshDeformationData(v15);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
    }
    while (v23 != a5 || (unsigned __int16)v24 != 0xFFFF || WORD1(v24) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::MeshDeformationComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  re::ecs2::EntityComponentCollection *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  re::MeshNameMap *v27;
  unint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  re::MeshDeformationRuntimeData *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  re *inited;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _anonymous_namespace_ *v58;
  uint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  _anonymous_namespace_ *v64;
  _anonymous_namespace_ *v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  _OWORD *v69;
  unsigned int v70;
  re *v71;
  int v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  re::DeformationBufferAllocator *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  char v94;
  _QWORD *v95;
  unint64_t v96;
  id location;
  char v98[8];
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  char v102[12];
  int v103;
  __int16 v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  __int16 v108;
  _QWORD v109[2];
  uint64_t v110;
  int v111;
  const char *v112;
  __int16 v113;
  int v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v8 = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 104)
                                                                              + 648));
  if (v8)
    v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  else
    v93 = 0;
  v91 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 120);
  v95 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 112);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v119, a5, 0);
  v100 = a4;
  v101 = v119;
  if ((_QWORD)v119 != a5
    || (WORD4(v119) == 0xFFFFLL ? (v9 = (DWORD2(v119) & 0xFFFF0000) == 4294901760) : (v9 = 0), !v9))
  {
    v10 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v93) ^ ((0xBF58476D1CE4E5B9 * v93) >> 27));
    v88 = a5;
    v89 = (v10 ^ (v10 >> 31)) - 0x61C8864680B583E9;
    while (1)
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v101);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v98, (const re::AssetHandle *)(*(_QWORD *)(v13 + 176) + 32));
      v14 = v99;
      if (v99)
        v15 = *(_QWORD *)(v99 + 664);
      else
        v15 = 0;
      v16 = *(unsigned int *)(v99 + 260);
      v17 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)v98);
      if (!v17)
      {
        if (v99 && (v29 = atomic_load((unsigned int *)(v99 + 704)), v29 == 3))
        {
          v30 = v100;
          v31 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v101);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v30, v31, *(_QWORD *)(a3 + 32));
          re::ecs2::MeshDeformationComponent::clearRuntimeMeshDeformationData((re::ecs2::MeshDeformationComponent *)v12);
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)v98);
        }
        goto LABEL_92;
      }
      v18 = v17;
      v19 = (0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27);
      v20 = v15 ^ ((0x94D049BB133111EBLL * v19) >> 31) ^ (0x94D049BB133111EBLL * v19);
      v21 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
      v22 = ((v20 << 6) - 0x61C8864680B583E9 + (v20 >> 2) + (v21 ^ (v21 >> 31))) ^ v20;
      v23 = (re::ecs2::EntityComponentCollection *)(v13 + 32);
      v24 = *(_QWORD *)(v18 + 392);
      v25 = *(_QWORD *)(v18 + 376);
      v26 = re::ecs2::EntityComponentCollection::get(v23, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v26)
      {
        v27 = (re::MeshNameMap *)(v26 + 216);
        v24 = *(_QWORD *)(v26 + 208);
        v96 = *(_QWORD *)(v26 + 192);
        v28 = 0xBF58476D1CE4E5B9
            * (*(unsigned int *)(v26 + 700) ^ ((unint64_t)*(unsigned int *)(v26 + 700) >> 30));
        v22 ^= (v22 << 6)
             - 0x61C8864680B583E9
             + (v22 >> 2)
             + ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) >> 31));
      }
      else
      {
        v96 = v25;
        v27 = (re::MeshNameMap *)(v18 + 448);
      }
      if (!*(_QWORD *)(v12 + 40))
        goto LABEL_27;
      v32 = re::MeshDeformationAsset::assetType((re::MeshDeformationAsset *)v26);
      v33 = re::AssetHandle::assetWithType((re::AssetHandle *)(v12 + 32), (const re::AssetType *)v32, 1);
      v34 = *(_QWORD *)(v12 + 40);
      if (!v33)
        break;
      v35 = v33;
      if (v34)
        v36 = *(_QWORD *)(v34 + 664);
      else
        v36 = 0;
      v38 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) >> 27));
      v22 ^= (v22 << 6) - 0x61C8864680B583E9 + (v22 >> 2) + (v36 ^ (v38 >> 31) ^ v38);
      if (*(_QWORD *)(v12 + 56))
      {
        *(_QWORD *)(v12 + 56) = 0;
        re::DynamicArray<re::DeformationStackDefinition>::deinit(v12 + 152);
        re::DynamicArray<re::MeshDeformationIndex>::deinit(v12 + 192);
        re::ecs2::Component::markDirty((_QWORD *)v12);
      }
      v94 = 0;
LABEL_35:
      if (v93)
      {
        v22 ^= v89 + (v22 << 6) + (v22 >> 2);
        if (*(_QWORD *)(v12 + 64) != v22)
        {
          v39 = (_QWORD *)(v12 + 72);
          if (v12 + 72 != v35)
          {
            v40 = *(uint64_t **)v35;
            if (*v39)
            {
              v41 = (_QWORD *)(v12 + 72);
              if (v40)
              {
                re::DynamicArray<re::DeformationStackDefinition>::copy(v41, v35);
                ++*(_DWORD *)(v12 + 96);
              }
              else
              {
                re::DynamicArray<re::DeformationStackDefinition>::clear((uint64_t)v41);
              }
            }
            else if (v40)
            {
              v42 = *(_QWORD *)(v35 + 16);
              *(_QWORD *)(v12 + 72) = v40;
              re::DynamicArray<re::DeformationStackDefinition>::setCapacity((_QWORD *)(v12 + 72), v42);
              ++*(_DWORD *)(v12 + 96);
              re::DynamicArray<re::DeformationStackDefinition>::copy((_QWORD *)(v12 + 72), v35);
            }
          }
          if (v39 != (_QWORD *)v35)
          {
            v43 = *(_QWORD *)(v35 + 40);
            if (*(_QWORD *)(v12 + 112))
            {
              v44 = (_QWORD *)(v12 + 112);
              if (v43)
              {
                re::DynamicArray<re::MeshDeformationIndex>::copy(v44, v35 + 40);
                ++*(_DWORD *)(v12 + 136);
              }
              else
              {
                re::DynamicArray<re::MeshDeformationIndex>::clear((uint64_t)v44);
              }
            }
            else if (v43)
            {
              v45 = *(_QWORD *)(v35 + 56);
              *(_QWORD *)(v12 + 112) = v43;
              re::DynamicArray<re::MeshDeformationIndex>::setCapacity((_QWORD *)(v12 + 112), v45);
              ++*(_DWORD *)(v12 + 136);
              re::DynamicArray<re::MeshDeformationIndex>::copy((_QWORD *)(v12 + 112), v35 + 40);
            }
          }
          re::MeshDeformationAsset::forceVertexFrameSkinning((re::MeshDeformationAsset *)(v12 + 72));
          *(_QWORD *)(v12 + 64) = v22;
        }
        v35 = v12 + 72;
      }
      else if (*(_QWORD *)(v12 + 64))
      {
        *(_QWORD *)(v12 + 64) = 0;
        re::DynamicArray<re::DeformationStackDefinition>::deinit(v12 + 72);
        re::DynamicArray<re::MeshDeformationIndex>::deinit(v12 + 112);
      }
      v46 = (re::MeshDeformationRuntimeData *)(v12 + 232);
      re::MeshDeformationRuntimeData::update<re::MeshAsset>((re::MeshDeformationRuntimeData *)(v12 + 232), v95[5], v91, (uint64_t **)v35, v18, v27, v22);
      v47 = *(_QWORD **)(v12 + 392);
      if (!v47 || *v47 != *(_QWORD *)(v12 + 248))
      {
        v48 = v95[17];
        if (v48)
          v49 = (void *)(v48 + 8);
        else
          v49 = 0;
        inited = (re *)objc_initWeak(&location, v49);
        v51 = re::globalAllocators(inited);
        v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v51[2] + 32))(v51[2], 128, 8);
        *(_OWORD *)(v52 + 32) = 0u;
        *(_OWORD *)(v52 + 48) = 0u;
        *(_OWORD *)(v52 + 64) = 0u;
        *(_OWORD *)(v52 + 80) = 0u;
        *(_OWORD *)(v52 + 96) = 0u;
        *(_OWORD *)(v52 + 112) = 0u;
        *(_OWORD *)v52 = 0u;
        *(_OWORD *)(v52 + 16) = 0u;
        v54 = v95[4];
        v53 = v95[5];
        v55 = *(_QWORD *)(v12 + 256);
        *(_QWORD *)v52 = *(_QWORD *)(v12 + 248);
        *(_QWORD *)(v52 + 16) = v55;
        v92 = v53;
        if (v55)
        {
          if (v55 >> 61)
            goto LABEL_101;
          v57 = 8 * v55;
                                                              + 32))();
          *(_QWORD *)(v52 + 24) = v58;
          if (!v58)
          {
LABEL_102:
            re::internal::assertLog((re::internal *)4, v59, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
LABEL_103:
            re::internal::assertLog((re::internal *)6, v66, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v55);
            _os_crash();
            __break(1u);
LABEL_104:
            re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
LABEL_105:
            re::internal::assertLog((re::internal *)4, v68, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
          }
          v60 = v55 - 1;
          if (v55 != 1)
          {
            do
            {
              *(_DWORD *)v58 = -1;
              *((_WORD *)v58 + 2) = -1;
              v58 = (_anonymous_namespace_ *)((char *)v58 + 8);
              --v60;
            }
            while (v60);
          }
          *(_DWORD *)v58 = -1;
          *((_WORD *)v58 + 2) = -1;
          *(_QWORD *)(v52 + 64) = v55;
          *(_QWORD *)(v52 + 72) = v61;
          if (!v61)
            goto LABEL_104;
          v63 = v61;
          if (v55 != 1)
          {
            bzero(v61, v57 - 8);
            v63 = (_QWORD *)((char *)v63 + v57 - 8);
          }
          *v63 = 0;
        }
        else
        {
          *(_QWORD *)(v52 + 64) = 0;
        }
        *(_QWORD *)(v52 + 112) = v55;
        if (v55)
        {
          if (v55 >= 0x555555555555556)
            goto LABEL_103;
          *(_QWORD *)(v52 + 120) = v67;
          if (!v67)
            goto LABEL_105;
          v69 = v67;
          if (v55 != 1)
          {
            bzero(v67, 48 * v55 - 48);
            v69 += 3 * v55 - 3;
          }
          v69[1] = 0u;
          v69[2] = 0u;
          *v69 = 0u;
        }
        v70 = *(_QWORD *)(v12 + 368) - 1;
        v109[0] = v12 + 232;
        v109[1] = v70;
        v105 = v12 + 232;
        v106 = v70;
        v107 = 0;
        v108 = 0;
        v71 = (re *)re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v109, (uint64_t)v102);
        v72 = 0;
        v73 = 0;
        while (v72 != v103 || v108 != v104)
        {
          v74 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v105);
          v75 = re::MeshDeformationRuntimeData::meshDeformationHandle(v46, v74, WORD2(v74));
          v76 = re::MeshDeformationRuntimeData::deformationStackHandle(v46, v75);
          v55 = v73;
          v77 = *(_QWORD *)(v52 + 16);
          if (v77 <= v73)
          {
            v110 = 0;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            v119 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v111 = 136315906;
            v112 = "operator[]";
            v113 = 1024;
            v114 = 468;
            v115 = 2048;
            v116 = v73;
            v117 = 2048;
            v118 = v77;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_97:
            v110 = 0;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            v119 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v111 = 136315906;
            v112 = "operator[]";
            v113 = 1024;
            v114 = 468;
            v115 = 2048;
            v116 = v73;
            v117 = 2048;
            v118 = v77;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_98:
            v110 = 0;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            v119 = 0u;
            v74 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v111 = 136315906;
            v112 = "operator[]";
            v113 = 1024;
            v114 = 468;
            v115 = 2048;
            v116 = v73;
            v117 = 2048;
            v118 = v77;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_99:
            re::internal::assertLog((re::internal *)6, v81, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v82, v96);
            _os_crash();
            __break(1u);
LABEL_100:
            v110 = 0;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            v119 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v111 = 136315906;
            v112 = "operator[]";
            v113 = 1024;
            v114 = 468;
            v115 = 2048;
            v116 = v73;
            v117 = 2048;
            v118 = v74;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_101:
            re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v55);
            _os_crash();
            __break(1u);
            goto LABEL_102;
          }
          v78 = *(_QWORD *)(v52 + 24) + 8 * v73;
          *(_DWORD *)v78 = v74;
          *(_WORD *)(v78 + 4) = WORD2(v74);
          v77 = *(_QWORD *)(v52 + 40);
          if (v77 <= v73)
            goto LABEL_97;
          *(_QWORD *)(*(_QWORD *)(v52 + 48) + 8 * v73) = v76;
          v77 = *(_QWORD *)(v52 + 112);
          if (v77 <= v73)
            goto LABEL_98;
          v79 = (re::DeformationBufferAllocator *)(*(_QWORD *)(v52 + 120) + 48 * v73);
          v80 = (unsigned __int8 *)re::DataArray<re::DeformationStack>::get(v92 + 1416, v76);
          re::DeformationBufferAllocator::init(v79, *v80);
          v82 = v74;
          if (v96 <= v74)
            goto LABEL_99;
          v83 = re::DataArray<re::MeshInstance>::get(v54 + 72, *(_QWORD *)(v24 + 8 * v74));
          v84 = re::DataArray<re::MeshModel>::get(v54 + 8, *(_QWORD *)(v83 + 16));
          v74 = *(_QWORD *)(v52 + 64);
          if (v74 <= v73)
            goto LABEL_100;
          *(_QWORD *)(*(_QWORD *)(v52 + 72) + 8 * v73++) = v84 + 96;
          v71 = (re *)re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v105);
          v72 = v107;
        }
        *(_QWORD *)&v121 = 0;
        v119 = 0u;
        v120 = 0u;
        *((_QWORD *)&v120 + 1) = re::globalAllocators(v71)[2];
        *(_QWORD *)&v121 = 0;
        re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset((id *)(v12 + 384), &location, (void *)v52, (uint64_t)&v119);
        if ((_QWORD)v121)
        {
          (**(void (***)(_QWORD))v121)(v121);
          if ((__int128 *)v121 != &v119)
            (*(void (**)(_QWORD))(**((_QWORD **)&v120 + 1) + 40))(*((_QWORD *)&v120 + 1));
        }
        objc_destroyWeak(&location);
        location = 0;
        a5 = v88;
      }
      if ((v94 & 1) == 0)
      {
        v85 = v100;
        v86 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v101);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v85, v86, *(_QWORD *)(a3 + 48));
      }
LABEL_92:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v98);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v101);
      if ((_QWORD)v101 == a5 && WORD4(v101) == 0xFFFF && WORD5(v101) == 0xFFFF)
        return *(_DWORD *)(a5 + 40) != 0;
    }
    if (v34 && (v37 = atomic_load((unsigned int *)(v34 + 704)), v37 != 3))
    {
      re::AssetHandle::loadAsync((re::AssetHandle *)(v12 + 32));
      v94 = 1;
    }
    else
    {
LABEL_27:
      v94 = 0;
    }
    if (v22 != *(_QWORD *)(v12 + 56))
    {
      *(_QWORD *)(v12 + 56) = v22;
      re::DynamicArray<re::DeformationStackDefinition>::deinit(v12 + 152);
      re::DynamicArray<re::MeshDeformationIndex>::deinit(v12 + 192);
      re::MeshDeformationAsset::init(v12 + 152, v18, 0, 0);
      v22 = *(_QWORD *)(v12 + 56);
    }
    v35 = v12 + 152;
    goto LABEL_35;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::MeshDeformationSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18[2];
  _QWORD v19[2];

  v19[0] = a3;
  v19[1] = a4;
  v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v18);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v10 = v9 ? *(_QWORD *)(v9 + 24) : 0;
    v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      v12 = v11[444].u64[0];
      if (v12 >= v10)
        v12 = v10;
      v11[444].i64[0] = v12;
      v13 = v11[444].u64[1];
      if (v13 <= v10)
        v13 = v10;
      v11[444].i64[1] = v13;
      v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[445] = vaddq_s64(v11[445], v14);
      *(_BYTE *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17, 3039, a1);
  v15 = *(_QWORD *)(a1 + 104);
  if (!v15 || (*(_BYTE *)(v15 + 424) & 0x10) != 0)
    re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 168, a2, (uint64_t)v19, 0);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v17);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v18);
}

uint64_t re::ecs2::MeshDeformationSystem::willAddSystemToECSService(re::ecs2::MeshDeformationSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 13) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v5 = (uint64_t *)re::ServiceLocator::service<re::AssetService>(v4);
  v6 = re::MeshDeformationAsset::assetType((re::MeshDeformationAsset *)v5);
  result = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(v5[138], (unint64_t)v6);
  *((_QWORD *)this + 15) = result;
  return result;
}

_QWORD *re::ecs2::MeshDeformationSystem::willRemoveSystemFromECSService(_QWORD *this)
{
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  return this;
}

void re::ecs2::MeshDeformationSystem::willAddSceneToECSService(re::ecs2::MeshDeformationSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::addScene((uint64_t)this + 168, (uint64_t)a2);
}

uint64_t re::ecs2::MeshDeformationSystem::willRemoveSceneFromECSService(re::ecs2::MeshDeformationSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 168, (uint64_t)a2);
}

uint64_t *re::ecs2::allocInfo_MeshDeformationComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_307);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_307))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112E98, 0);
    *(uint64_t *)((char *)&qword_254112EA8 + 6) = 0;
    qword_254112EA8 = 0;
    qword_254112EB8 = 0;
    qword_254112EC0 = 0xFFFFFFFFLL;
    qword_254112E98 = (uint64_t)&off_24ED7DAA8;
    qword_254112EC8 = (uint64_t)"MeshDeformationComponent";
    dword_254112ED0 = 0;
    unk_254112ED8 = 0u;
    unk_254112EE8 = 0u;
    unk_254112EF8 = 0u;
    qword_254112F08 = 0;
    __cxa_guard_release(&_MergedGlobals_307);
  }
  return &qword_254112E98;
}

void re::ecs2::initInfo_MeshDeformationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x590DB2F18B38DE74;
  v14[1] = "MeshDeformationComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254112E78);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254112E78);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254112E88 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "meshDeformationAssetHandle";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254112E90 = v12;
      __cxa_guard_release(&qword_254112E78);
    }
  }
  *((_QWORD *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254112E88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshDeformationComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshDeformationComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshDeformationComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshDeformationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

uint64_t re::internal::defaultConstruct<re::ecs2::MeshDeformationComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::MeshDeformationComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshDeformationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshDeformationComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshDeformationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshDeformationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshDeformationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshDeformationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshDeformationComponent>, this);
}

uint64_t *re::ecs2::allocInfo_MeshDeformationSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254112E80);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254112E80))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112F10, 0);
    *(uint64_t *)((char *)&qword_254112F20 + 6) = 0;
    qword_254112F20 = 0;
    qword_254112F30 = 0;
    qword_254112F38 = 0xFFFFFFFFLL;
    qword_254112F10 = (uint64_t)&off_24ED7DAA8;
    qword_254112F40 = (uint64_t)"MeshDeformationSystem";
    dword_254112F48 = 0;
    xmmword_254112F50 = 0u;
    unk_254112F60 = 0u;
    xmmword_254112F70 = 0u;
    qword_254112F80 = 0;
    __cxa_guard_release(&qword_254112E80);
  }
  return &qword_254112F10;
}

void re::ecs2::initInfo_MeshDeformationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xA362AF4CADF32224;
  v5[1] = "MeshDeformationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x19800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MeshDeformationSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshDeformationSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshDeformationSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshDeformationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshDeformationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshDeformationSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshDeformationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::MeshDeformationSystem *re::internal::defaultConstruct<re::ecs2::MeshDeformationSystem>(int a1, int a2, re::ecs2::MeshDeformationSystem *this)
{
  return re::ecs2::MeshDeformationSystem::MeshDeformationSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::MeshDeformationSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 21);
  a3[16] = &off_24ED6A660;
  v4 = a3[18];
  if (v4)
  {
    if (a3[19])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[20]);
      a3[19] = 0;
      a3[20] = 0;
    }
    a3[18] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MeshDeformationSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 21);
  a1[16] = &off_24ED6A660;
  v2 = a1[18];
  if (v2)
  {
    if (a1[19])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[20]);
      a1[19] = 0;
      a1[20] = 0;
    }
    a1[18] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshDeformationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshDeformationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshDeformationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshDeformationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshDeformationSystem>, this);
}

uint64_t re::ecs2::MeshDeformationComponentStateImpl::dependsOnComponents(re::ecs2::MeshDeformationComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshDeformationComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::MeshDeformationSystem::~MeshDeformationSystem(re::ecs2::MeshDeformationSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 21);
  *((_QWORD *)this + 16) = &off_24ED6A660;
  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 20));
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 21);
  *((_QWORD *)this + 16) = &off_24ED6A660;
  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 20));
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::MeshDeformationSystem::typeInfo(re::ecs2::MeshDeformationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshDeformationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshDeformationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshDeformationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshDeformationSystem>, 0);
}

uint64_t re::DynamicArray<re::DeformationStackDefinition>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::DeformationStackDefinition>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = (uint64_t)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition *,re::DeformationStackDefinition *,re::DeformationStackDefinition *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * a1[2]), a1[4]);
    v9 = a1[2];
    if (v9 != v4)
    {
      v10 = 5 * v9;
      v11 = (uint64_t *)(*(_QWORD *)(a2 + 32) + 8 * v10);
      result = a1[4] + 8 * v10;
      v12 = 40 * v4 - 8 * v10;
      do
      {
        v13 = re::DynamicArray<re::DeformationDefinition>::DynamicArray(result, v11);
        v11 += 5;
        result = v13 + 40;
        v12 -= 40;
      }
      while (v12);
    }
  }
  else
  {
    result = (uint64_t)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition *,re::DeformationStackDefinition *,re::DeformationStackDefinition *,0>(*(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 40 * v4), a1[4]);
    v6 = a1[2];
    if (v4 != v6)
    {
      v7 = a1[4] + 40 * v4;
      v8 = 40 * v6 - 40 * v4;
      do
      {
        result = re::DynamicArray<re::DeformationDefinition>::deinit(v7);
        v7 += 40;
        v8 -= 40;
      }
      while (v8);
    }
  }
  a1[2] = v4;
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::DeformationStackDefinition *,re::DeformationStackDefinition *,re::DeformationStackDefinition *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      re::DynamicArray<re::DeformationDefinition>::operator=(a3, v4);
      v4 += 5;
      a3 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t re::DynamicArray<re::DeformationDefinition>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::DeformationDefinition>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::DeformationDefinition>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::DeformationDefinition>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::DeformationDefinition>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::DeformationDefinition>::clear(uint64_t a1)
{
  uint64_t v2;
  re::StringID *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(re::StringID **)(a1 + 32);
    v4 = 40 * v2;
    do
    {
      v5 = *((_QWORD *)v3 + 2);
      if (v5)
      {
        if (*((_QWORD *)v3 + 3))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)v3 + 4));
          *((_QWORD *)v3 + 3) = 0;
          *((_QWORD *)v3 + 4) = 0;
        }
        *((_QWORD *)v3 + 2) = 0;
      }
      re::StringID::destroyString(v3);
      v3 = (re::StringID *)((char *)v3 + 40);
      v4 -= 40;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::DynamicArray<re::MeshDeformationIndex>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::StringID *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::MeshDeformationIndex>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex *,re::MeshDeformationIndex *,re::MeshDeformationIndex *>((uint64_t)&v15, *(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 48 * a1[2]), a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = v9 + 48 * v4;
      v11 = a1[4];
      v12 = 48 * v8;
      do
      {
        v13 = v9 + v12;
        *(_BYTE *)(v11 + v12) = *(_BYTE *)(v9 + v12);
        re::StringID::StringID((re::StringID *)(v11 + v12 + 8), (const StringID *)(v9 + v12 + 8));
        re::StringID::StringID((re::StringID *)(v11 + v12 + 24), (const StringID *)(v9 + v12 + 24));
        *(_QWORD *)(v11 + v12 + 40) = *(_QWORD *)(v9 + v12 + 40);
        v9 += 48;
        v11 += 48;
      }
      while (v13 + 48 != v10);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex *,re::MeshDeformationIndex *,re::MeshDeformationIndex *>((uint64_t)&v14, *(uint64_t **)(a2 + 32), (uint64_t *)(*(_QWORD *)(a2 + 32) + 48 * v4), a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = 48 * v5 - 48 * v4;
      v7 = (re::StringID *)(a1[4] + 48 * v4 + 24);
      do
      {
        re::StringID::destroyString(v7);
        re::StringID::destroyString((re::StringID *)((char *)v7 - 16));
        v7 = (re::StringID *)((char *)v7 + 48);
        v6 -= 48;
      }
      while (v6);
    }
  }
  a1[2] = v4;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshDeformationIndex *,re::MeshDeformationIndex *,re::MeshDeformationIndex *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 3;
  do
  {
    *(_BYTE *)a4 = *((_BYTE *)v6 - 24);
    re::StringID::operator=((unint64_t *)(a4 + 8), v6 - 2);
    re::StringID::operator=((unint64_t *)(a4 + 24), v6);
    *(_QWORD *)(a4 + 40) = v6[2];
    a4 += 48;
    v7 = v6 + 3;
    v6 += 6;
  }
  while (v7 != v5);
  return v5;
}

_anonymous_namespace_ *re::FixedArray<re::ecs2::ComponentTypeBase const*>::FixedArray(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v3;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    re::FixedArray<re::ecs2::ComponentTypeBase const*>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::MeshDeformationComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  re *inited;

  *(_QWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v2 = (id *)(a1 + 384);
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED43808;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_DWORD *)(v3 + 216) = 0;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_DWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = -1;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  inited = (re *)objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 424) = re::globalAllocators(inited)[2];
  *(_QWORD *)(a1 + 432) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::MeshDeformationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshDeformationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

double re::ecs2::RigidBodyComponent::updateRigidBody(re::ecs2::RigidBodyComponent *this, re::ecs2::ColliderComponent *a2)
{
  _BYTE *WeakRetained;
  _BYTE *v5;
  _DWORD *v6;
  float32x4_t *v7;
  float32x4_t v8;
  uint32x4_t v9;
  float32x4_t v10;
  uint32x4_t v11;
  float32x4_t v12;
  uint32x4_t v13;
  float32x4_t v14;
  uint32x4_t v15;

  if (*((_DWORD *)this + 30) != *(_DWORD *)(*((_QWORD *)this + 42) + 208))
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 35);
    if (WeakRetained)
    {
      WeakRetained[232] = 1;

    }
  }
  re::RigidBody::setMotionType(*((_QWORD *)this + 42), *((_DWORD *)this + 30));
  v5 = (_BYTE *)*((_QWORD *)this + 42);
  v5[304] = *((_BYTE *)this + 132);
  (*(void (**)(_BYTE *))(*(_QWORD *)v5 + 432))(v5);
  v6 = (_DWORD *)*((_QWORD *)this + 42);
  v6[55] = *((_DWORD *)this + 34);
  (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 432))(v6);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 184))(*((_QWORD *)this + 42), *((unsigned __int8 *)this + 140));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 192))(*((_QWORD *)this + 42), *((unsigned __int8 *)this + 141));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 200))(*((_QWORD *)this + 42), *((unsigned __int8 *)this + 142));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 136))(*((_QWORD *)this + 42), *((unsigned __int8 *)this + 143));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 144))(*((_QWORD *)this + 42), *((unsigned __int8 *)this + 144));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 152))(*((_QWORD *)this + 42), *((unsigned __int8 *)this + 145));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 288))(*((_QWORD *)this + 42), *((unsigned __int8 *)this + 146));
  (*(void (**)(_QWORD, float, float))(**((_QWORD **)this + 42) + 336))(*((_QWORD *)this + 42), *((float *)this + 37), *((float *)this + 38));
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 344))(*((_QWORD *)this + 42), *((unsigned __int8 *)this + 156));
  v7 = (float32x4_t *)*((_QWORD *)this + 42);
  *(_DWORD *)(v7[4].i64[1] + 88) = *(_DWORD *)(v7[4].i64[1] + 88) & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 15) >> 2) & 1));
  v8 = *((float32x4_t *)this + 10);
  v9 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v8));
  v9.i32[3] = v9.i32[2];
  if ((vmaxvq_u32(v9) & 0x80000000) != 0)
  {
    v7[15] = vaddq_f32(v8, v7[15]);
    *((_OWORD *)this + 10) = 0u;
  }
  v10 = *((float32x4_t *)this + 11);
  v11 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v10));
  v11.i32[3] = v11.i32[2];
  if ((vmaxvq_u32(v11) & 0x80000000) != 0)
  {
    *(float32x4_t *)(*((_QWORD *)this + 42) + 256) = vaddq_f32(v10, *(float32x4_t *)(*((_QWORD *)this + 42) + 256));
    *((_OWORD *)this + 11) = 0u;
  }
  v12 = *((float32x4_t *)this + 12);
  v13 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v12));
  v13.i32[3] = v13.i32[2];
  if ((vmaxvq_u32(v13) & 0x80000000) != 0)
  {
    *(float32x4_t *)(*((_QWORD *)this + 42) + 272) = vaddq_f32(v12, *(float32x4_t *)(*((_QWORD *)this + 42) + 272));
    *((_OWORD *)this + 12) = 0u;
  }
  v14 = *((float32x4_t *)this + 13);
  v15 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v14));
  v15.i32[3] = v15.i32[2];
  if ((vmaxvq_u32(v15) & 0x80000000) != 0)
  {
    *(float32x4_t *)(*((_QWORD *)this + 42) + 288) = vaddq_f32(v14, *(float32x4_t *)(*((_QWORD *)this + 42) + 288));
    v14.i64[0] = 0;
    *((_OWORD *)this + 13) = 0u;
  }
  return *(double *)v14.i64;
}

void re::ecs2::RigidBodyComponent::removeFromSimulation(re::ecs2::RigidBodyComponent *this)
{
  id *v2;
  char *WeakRetained;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::ColliderComponent *v7;
  uint64_t v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 42))
  {
    v2 = (id *)((char *)this + 280);
    WeakRetained = (char *)objc_loadWeakRetained((id *)this + 35);
    if (WeakRetained)
    {
      v4 = WeakRetained;
      re::PhysicsJointCollection::deleteJointsReferencingRigidBody((const re::RigidBody *)(WeakRetained + 128), *((const re::RigidBody **)this + 42));
      re::RigidBodyCollection::remove((re::RigidBodyCollection *)(v4 + 72), *((re::RigidBody **)this + 42));
      objc_destroyWeak(v2);
      *((_QWORD *)this + 35) = 0;

    }
    v5 = *((_QWORD *)this + 42);
    v9[3] = v9;
    v9[0] = &off_24ED6A7A8;
    v8 = 0;
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)this + 44, v5);
    std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)this + 45, (uint64_t)v9);
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v8);
    *((_QWORD *)this + 42) = 0;
    re::AssetHandle::operator=((uint64_t *)this + 31, (uint64_t *)this + 12);
    v6 = *((_QWORD *)this + 2);
    if (v6)
    {
      v7 = (re::ecs2::ColliderComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v7)
        re::ecs2::ColliderComponent::removeFromSimulation(v7);
    }
  }
}

void re::ecs2::RigidBodyComponent::teleport(re::ecs2::RigidBodyComponent *this)
{
  uint64_t v2;
  re::ecs2::NetworkComponent *v3;
  uint64_t v4;
  const re::ecs2::Component *v5;

  v2 = *((_QWORD *)this + 2);
  v3 = *(re::ecs2::NetworkComponent **)(v2 + 200);
  if (v3 && *((_QWORD *)v3 + 4))
  {
    if (!RESyncableIsAuthoritative())
      return;
    v2 = *((_QWORD *)this + 2);
  }
  ++*((_DWORD *)this + 31);
  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4)
  {
    v5 = (const re::ecs2::Component *)v4;
    *(_BYTE *)(v4 + 80) = *((_DWORD *)this + 31);
    re::ecs2::Component::markDirty((_QWORD *)v4);
    if (v3)
      re::ecs2::NetworkComponent::markDirty(v3, v5);
  }
}

BOOL re::ecs2::RigidBodyComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  char *WeakRetained;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  re *v25;
  re *v26;
  uint64_t v27;
  const __int16 *v28;
  int16x8_t *v29;
  int16x8_t v30;
  int v31;
  uint16x8_t v32;
  NSObject *v33;
  re::ecs2::PhysicsSimulationData *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BOOL8 v38;
  __int16 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44[2];
  _BYTE v45[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v45, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (v10 = v9,
        v11 = *(_QWORD *)(a3 + 8),
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9),
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11),
        v44[0] = v12,
        (v44[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v41, a5, 0);
    v15 = v41;
    v14 = v42;
    v41 = a4;
    v42 = v15;
    v43 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      do
      {
        v22 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v42);
        v23 = *(_QWORD *)v22;
        v24 = *(_QWORD *)(*(_QWORD *)v22 + 16);
        v25 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v24 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v25)
        {
          v26 = v25;
          v27 = *(unsigned __int16 *)(v24 + 82);
          if (!*(_WORD *)(v24 + 82))
            goto LABEL_28;
          v28 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                + 16);
          v29 = *(int16x8_t **)(v24 + 88);
          v30 = vld1q_dup_s16(v28);
          v31 = 1;
          while (1)
          {
            v32 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v30, *v29), (int8x16_t)xmmword_2260F1E80);
            v32.i16[0] = vmaxvq_u16(v32);
            if (v32.i32[0])
              break;
            v31 -= 8;
            ++v29;
            if (!--v27)
              goto LABEL_28;
          }
          if (v32.u16[0] - v31 < *(unsigned __int16 *)(v24 + 80))
          {
            v33 = *re::ecsComponentsLogObjects(v25);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            {
              v40 = 0;
              _os_log_error_impl(&dword_224FE9000, v33, OS_LOG_TYPE_ERROR, "Rigid Body component cannot exist on the same entity that contains a character controller component. Deactivating component.", (uint8_t *)&v40, 2u);
            }
          }
          else
          {
LABEL_28:
            v34 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v44, v24);
            if (v34)
              v35 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v34);
            else
              v35 = 0;
            if ((*(_BYTE *)(v24 + 288) & 1) != 0)
            {
              v16 = *((_QWORD *)v26 + 5);
              if (v16)
              {
                if (v35)
                {
                  v17 = *(float32x4_t **)(v23 + 336);
                  if (!v17
                    || *(_QWORD *)(v23 + 104) != *(_QWORD *)(v23 + 256)
                    || !re::MassFrame::operator==((float32x4_t *)(v23 + 32), v17 + 5)
                    || *((_QWORD *)v26 + 10) != v16)
                  {
                    goto LABEL_17;
                  }
                  WeakRetained = (char *)objc_loadWeakRetained((id *)(v23 + 280));
                  if (WeakRetained)
                  {
                    v19 = WeakRetained - 8;

                  }
                  else
                  {
                    v19 = 0;
                  }
                  if (v19 != (char *)v35)
LABEL_17:
                    re::ecs2::RigidBodyComponent::removeFromSimulation((re::ecs2::RigidBodyComponent *)v23);
                  v20 = v41;
                  v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v42);
                  re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(_QWORD *)(a3 + 40));
                  goto LABEL_33;
                }
              }
            }
          }
        }
        v36 = v41;
        v37 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v42);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v36, v37, *(_QWORD *)(a3 + 32));
        re::ecs2::RigidBodyComponent::removeFromSimulation((re::ecs2::RigidBodyComponent *)v23);
LABEL_33:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v42);
      }
      while (v42 != a5 || (unsigned __int16)v43 != 0xFFFF || WORD1(v43) != 0xFFFF);
    }
    v38 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v38 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v45);
  return v38;
}

BOOL re::ecs2::RigidBodyComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  re::ecs2::ColliderComponent *v20;
  re::CollisionShapeAsset *v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  re::ecs2::ComponentBucketsBase *v31;
  unint64_t v32;
  float32x4_t *v33;
  re *v34;
  float32x4_t v35;
  int8x16_t v36;
  float v37;
  NSObject *v38;
  uint64_t v39;
  unsigned int v40;
  float v41;
  int v42;
  unint64_t v43;
  float32x4_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  float32x4_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _OWORD v59[4];
  float32x4_t v60;
  float32x4_t v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[2];
  _BYTE v67[16];
  __int128 v68;
  float32x4_t v69;
  uint8_t buf[16];
  float32x4_t v71;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v67, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3[1] + 56) + 32))(*(_QWORD *)(a3[1] + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (!v9)
    goto LABEL_7;
  v58 = a3;
  v10 = a3[1];
  v11 = v9;
  v12 = (*(uint64_t (**)(void))(*(_QWORD *)v9 + 24))();
  v57 = v11;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, v10);
  v66[0] = v12;
  v66[1] = v13;
  if (!v13)
  {
LABEL_7:
    v14 = 0;
    goto LABEL_8;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  v63 = a4;
  v64 = *(_QWORD *)buf;
  v65 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 0xFFFF0000)
  {
    do
    {
      v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v64);
      v17 = *(_QWORD *)v16;
      v18 = *(_QWORD *)(*(_QWORD *)v16 + 16);
      v19 = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v18 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v20 = (re::ecs2::ColliderComponent *)v19;
      v21 = (re::CollisionShapeAsset *)(v19 + 4);
      v22 = v19[5];
      if (v22 && (v23 = atomic_load((unsigned int *)(v22 + 704)), v23 == 2))
      {
        v24 = 1;
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v19 + 4));
        v24 = 0;
      }
      if (*(_QWORD *)(v17 + 104))
      {
        v25 = re::PhysicsMaterialAsset::assetType((re::PhysicsMaterialAsset *)v19);
        v26 = re::AssetHandle::assetWithType((re::AssetHandle *)(v17 + 96), (const re::AssetType *)v25, 1);
        if (!v26)
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)(v17 + 96));
LABEL_24:
          re::ecs2::RigidBodyComponent::removeFromSimulation((re::ecs2::RigidBodyComponent *)v17);
          goto LABEL_32;
        }
        v27 = *(_QWORD *)(v26 + 8);
      }
      else
      {
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory + 24))(re::PhysicsFactory::m_defaultFactory);
      }
      if (v27)
        v28 = v24;
      else
        v28 = 0;
      if ((v28 & 1) == 0)
        goto LABEL_24;
      if (!*(_QWORD *)(v17 + 336))
      {
        v33 = (float32x4_t *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v66, v18);
        re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v18, (const re::ecs2::Entity *)1, buf);
        re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace(v33, (uint64_t)buf, v59);
        v69 = (float32x4_t)xmmword_2260E5D70;
        *(_OWORD *)buf = 0u;
        v68 = 0u;
        v34 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)v59, (int32x4_t *)buf, &v69, &v68);
        v60 = *(float32x4_t *)buf;
        v61 = v69;
        v62 = v68;
        v35.i64[0] = __PAIR64__(v68, DWORD1(v68));
        v35.i64[1] = __PAIR64__(*(unsigned int *)buf, DWORD2(v68));
        if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_22611E0A0, vorrq_s8((int8x16_t)vcltzq_f32(v35), (int8x16_t)vcgezq_f32(v35)))) & 0xF) != 0|| (v36 = (int8x16_t)vmulq_f32(v69, v69), v37 = vaddv_f32(vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL))), v37 != 1.0)&& fabsf(v37 + -1.0) > 0.00001)
        {
          v38 = *re::ecsComponentsLogObjects(v34);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_224FE9000, v38, OS_LOG_TYPE_ERROR, "NaN or non-unit rotation detected in transform (RigidBody). Skipping.", buf, 2u);
          }
          re::ecs2::RigidBodyComponent::removeFromSimulation((re::ecs2::RigidBodyComponent *)v17);
          v29 = v63;
          v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v64);
          v31 = (re::ecs2::ComponentBucketsBase *)v58[2];
          v32 = v58[4];
          goto LABEL_31;
        }
        v39 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v18 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::internal::RigidBodyUpdateStagingData::RigidBodyUpdateStagingData((uint64_t)v59, v17, v39, *(_QWORD *)(v18 + 200));
        v56 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation((re::ecs2::PhysicsSimulationData *)v33);
        v40 = DWORD1(v59[0]);
        v41 = (*(float (**)(uint64_t))(*(_QWORD *)v57 + 120))(v57);
        (*(void (**)(uint64_t))(*(_QWORD *)v57 + 136))(v57);
        if (*(float *)(v17 + 148) < 0.0)
          *(float *)(v17 + 148) = v41;
        v55 = v40;
        if (*(float *)(v17 + 152) < 0.0)
          *(_DWORD *)(v17 + 152) = v42;
        v43 = *(_QWORD *)(re::AssetHandle::asset<re::CollisionShapeAsset>(v21) + 8);
        v44 = *(float32x4_t **)(v17 + 352);
        v45 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27));
        v46 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27));
        v47 = (((v45 ^ (v45 >> 31)) << 6) + ((v45 ^ (v45 >> 31)) >> 2) + (v46 ^ (v46 >> 31)) - 0x61C8864680B583E9) ^ v45 ^ (v45 >> 31);
        if (v44 && v47 == *(_QWORD *)(v17 + 344) && re::MassFrame::operator==((float32x4_t *)(v17 + 32), v44 + 5))
        {
          *(_QWORD *)(v17 + 352) = 0;
        }
        else
        {
          std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(v17 + 352), 0);
          *(_QWORD *)buf = v27;
          v44 = (float32x4_t *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint8_t *, uint64_t))(*(_QWORD *)re::PhysicsFactory::m_defaultFactory + 40))(re::PhysicsFactory::m_defaultFactory, re::PhysicsFactory::m_defaultAllocator, v43, v17 + 32, buf, 1);
        }
        *(_QWORD *)(v17 + 336) = v44;
        *(_QWORD *)(v17 + 344) = v47;
        re::RigidBodyCollection::add((re::RigidBodyCollection *)(v56 + 80), (re::RigidBody *)v44);
        objc_storeWeak((id *)(v17 + 280), (id)(v56 + 8));
        *(_OWORD *)buf = v62;
        v71 = v61;
        v48 = *(_OWORD **)(v17 + 336);
        v49 = v61;
        v48[1] = v62;
        v48[2] = v49;
        (*(void (**)(_OWORD *, uint8_t *))(*(_QWORD *)v48 + 64))(v48, buf);
        re::ecs2::RigidBodyComponent::updateRigidBody((re::ecs2::RigidBodyComponent *)v17, v20);
        re::AssetHandle::operator=((uint64_t *)(v17 + 248), (uint64_t *)(v17 + 96));
        v50 = *(_DWORD *)(v17 + 120);
        *(_DWORD *)(v17 + 272) = *(_DWORD *)(v17 + 124);
        *(_DWORD *)(v17 + 288) = v50;
        re::ecs2::ColliderComponent::setUnmanagedCollisionObject((re::CollisionObject **)v20, *(re::CollisionObject **)(*(_QWORD *)(v17 + 336) + 72));
        v51 = *((_QWORD *)v20 + 8);
        v52 = *(_QWORD **)(*(_QWORD *)(v17 + 336) + 72);
        if (v52[4] != v51)
        {
          v52[4] = v51;
          (*(void (**)(_QWORD *))(*v52 + 80))(v52);
          v52 = *(_QWORD **)(*(_QWORD *)(v17 + 336) + 72);
        }
        re::CollisionObject::setScale((uint64_t)v52, &v60);
        v53 = *(_QWORD **)(v17 + 336);
        *(_QWORD *)(v53[9] + 40) = *(_QWORD *)(v17 + 16);
        v54 = 304;
        if (!*(_BYTE *)(v17 + 25))
          v54 = 312;
        (*(void (**)(void))(*v53 + v54))();
        re::RigidBody::setMotionType(*(_QWORD *)(v17 + 336), v55);
      }
      re::ecs2::RigidBodyComponent::updateRigidBody((re::ecs2::RigidBodyComponent *)v17, v20);
      v29 = v63;
      v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v64);
      v31 = (re::ecs2::ComponentBucketsBase *)v58[2];
      v32 = v58[6];
LABEL_31:
      re::ecs2::ComponentBucketsBase::moveComponent(v31, v29, v30, v32);
LABEL_32:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v64);
    }
    while (v64 != a5 || (unsigned __int16)v65 != 0xFFFF || WORD1(v65) != 0xFFFF);
  }
  v14 = *(_DWORD *)(a5 + 40) != 0;
LABEL_8:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v67);
  return v14;
}

BOOL re::ecs2::RigidBodyComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  re::ecs2::PhysicsSimulationData *v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  _OWORD *v31;
  int32x4_t v32;
  int32x4_t v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float32x4_t v49;
  float v50;
  float32_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  re::ecs2::TransformComponent **v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float32x4_t v71;
  float v72;
  float32_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  _OWORD *v79;
  int32x4_t v80;
  void (*v81)(void);
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  uint64_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  __int128 v107;
  _OWORD *v108;
  __int128 v109;
  int v110;
  float32x4_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  float32x4_t *v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  float32x4_t v123;
  __int128 v124;
  __int128 v125;
  float32x4_t v126[3];
  float32x4_t v127;
  float v128;
  float v129;
  float v130;
  float v131;
  char v132;
  char v133;
  char v134;
  int v135;
  float32x4_t v136;
  __int128 v137;
  int32x4_t v138;
  _OWORD v139[4];
  uint64_t v140;
  float32x4_t v141;
  uint64_t v142[2];
  _BYTE v143[16];
  int32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  __int128 v147;
  float32x4_t v148;
  __int128 v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  _BYTE v154[32];
  float32x4_t v155;
  __int128 v156;
  uint64_t v157;

  v157 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v143, 3047, a1);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v11 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v10);
  if (!v11
    || (v12 = v11,
        v13 = *(_QWORD *)(a3 + 8),
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11),
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v13),
        v142[0] = v14,
        (v142[1] = v15) == 0))
  {
    v16 = 0;
    goto LABEL_8;
  }
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v150, a5, 0);
  v140 = a4;
  v141 = v150;
  if (v150.i64[0] != a5 || v150.u16[4] != 0xFFFFLL || (v150.i32[2] & 0xFFFF0000) != 0xFFFF0000)
  {
    v122 = a5;
    while (1)
    {
      v18 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v141);
      v19 = *(_QWORD *)v18;
      v20 = *(_QWORD *)(*(_QWORD *)v18 + 16);
      v21 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v142, v20);
      v22 = (uint64_t)v21;
      if (!a6 || re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v21) == a6)
        break;
LABEL_100:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v141);
      if (v141.i64[0] == a5 && v141.u16[4] == 0xFFFF && v141.u16[5] == 0xFFFF)
        goto LABEL_6;
    }
    re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v20, (const re::ecs2::Entity *)1, &v150);
    re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace((float32x4_t *)v22, (uint64_t)&v150, v139);
    v150 = 0u;
    v144 = (int32x4_t)xmmword_2260E5D70;
    *(_OWORD *)v154 = 0u;
    re::decomposeScaleRotationTranslation<float>((uint64_t)v139, (int32x4_t *)&v150, &v144, v154);
    v137 = *(_OWORD *)v154;
    v138 = v144;
    v136 = v150;
    v23 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v20 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    re::internal::RigidBodyUpdateStagingData::RigidBodyUpdateStagingData((uint64_t)&v132, v19, v23, *(_QWORD *)(v20 + 200));
    if (v133)
    {
      v24 = (float *)(v19 + 304);
      v25 = *(float *)(v19 + 320);
      if (v25 != *(float *)v138.i32 && vabds_f32(v25, *(float *)v138.i32) > 0.001
        || (v26 = *(float *)(v19 + 324), v26 != *(float *)&v138.i32[1])
        && vabds_f32(v26, *(float *)&v138.i32[1]) > 0.001
        || (v27 = *(float *)(v19 + 328), v27 != *(float *)&v138.i32[2])
        && vabds_f32(v27, *(float *)&v138.i32[2]) > 0.001
        || (v28 = *(float *)(v19 + 332), v28 != *(float *)&v138.i32[3])
        && vabds_f32(v28, *(float *)&v138.i32[3]) > 0.001
        || *v24 != *(float *)&v137 && vabds_f32(*v24, *(float *)&v137) > 0.001
        || (v29 = *(float *)(v19 + 308), v29 != *((float *)&v137 + 1)) && vabds_f32(v29, *((float *)&v137 + 1)) > 0.001
        || (v30 = *(float *)(v19 + 312), v30 != *((float *)&v137 + 2)) && vabds_f32(v30, *((float *)&v137 + 2)) > 0.001)
      {
        v31 = *(_OWORD **)(v19 + 336);
        v32 = v138;
        v31[1] = v137;
        v31[2] = v32;
        (*(void (**)(_OWORD *, __int128 *))(*(_QWORD *)v31 + 64))(v31, &v137);
        v33 = v138;
        *(_OWORD *)v24 = v137;
        *(int32x4_t *)(v19 + 320) = v33;
      }
LABEL_48:
      if (!v23)
      {
LABEL_97:
        re::CollisionObject::setScale(*(_QWORD *)(*(_QWORD *)(v19 + 336) + 72), &v136);
        *(_DWORD *)(v19 + 272) = *(_DWORD *)(v19 + 124);
        v120 = *(_QWORD *)(re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v20 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 64);
        v121 = *(_QWORD **)(*(_QWORD *)(v19 + 336) + 72);
        if (v121[4] != v120)
        {
          v121[4] = v120;
          (*(void (**)(_QWORD *))(*v121 + 80))(v121);
        }
        *(_DWORD *)(v19 + 288) = v135;
        a5 = v122;
        goto LABEL_100;
      }
      v150.i8[0] = 0;
      v144.i8[0] = 0;
      v110 = *(_DWORD *)(v19 + 288);
      if (v110 != 2 || v135 == 2)
      {
        if (!v135)
        {
          v150.i8[0] = 1;
          v151 = 0uLL;
          v144.i8[0] = 1;
          v145 = 0uLL;
          goto LABEL_61;
        }
        if (v135 != 1)
        {
          v112 = *(_DWORD *)(v23 + 144);
          if (v112 == *(_DWORD *)(v23 + 148))
          {
            v113 = *(_DWORD *)(v23 + 176);
            if (v113 == *(_DWORD *)(v23 + 180))
            {
              if (v110 != 2 || v133 || v135 != 2)
              {
                *(_DWORD *)(v23 + 148) = v112;
                *(_DWORD *)(v23 + 180) = v113;
LABEL_91:
                if (!v133)
                {
                  v118 = *(unsigned __int8 *)(v23 + 25);
                  if (v118 != (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v19 + 336) + 296))(*(_QWORD *)(v19 + 336)))
                  {
                    v119 = 304;
                    if (!*(_BYTE *)(v23 + 25))
                      v119 = 312;
                    (*(void (**)(void))(**(_QWORD **)(v19 + 336) + v119))();
                  }
                }
                *(_BYTE *)(v23 + 26) = 0;
                goto LABEL_97;
              }
              v114 = 0;
LABEL_83:
              v150.i8[0] = 1;
              goto LABEL_84;
            }
            v117 = 0;
            v116 = (float32x4_t *)(v23 + 160);
            goto LABEL_78;
          }
          v114 = 0;
          v115 = 1;
          v150.i8[0] = 1;
LABEL_69:
          v151 = *(float32x4_t *)(v23 + 128);
          v113 = *(_DWORD *)(v23 + 176);
          if (v113 == *(_DWORD *)(v23 + 180))
          {
            if (v110 != 2 || v133 || v135 != 2)
              goto LABEL_61;
LABEL_84:
            v151 = *(float32x4_t *)(v23 + 96);
            if (!v114)
              v144.i8[0] = 1;
            v145 = *(float32x4_t *)(v23 + 112);
            *(_DWORD *)(v23 + 148) = v112;
            goto LABEL_87;
          }
          *(_OWORD *)&v154[15] = *(_OWORD *)(v23 + 160);
          if (!v115)
            goto LABEL_76;
          v116 = (float32x4_t *)(v23 + 160);
          v117 = 1;
LABEL_78:
          v114 = 1;
          v144.i8[0] = 1;
          v145 = *v116;
          goto LABEL_79;
        }
        v150.i8[0] = 1;
        v111 = *(float32x4_t *)(v23 + 112);
        v151 = *(float32x4_t *)(v23 + 96);
        v144.i8[0] = 1;
        v145 = v111;
      }
      else
      {
        v150.i8[0] = 1;
        v151 = 0uLL;
        v144.i8[0] = 1;
        v145 = 0uLL;
        if (!v135)
          goto LABEL_61;
      }
      v112 = *(_DWORD *)(v23 + 144);
      if (v112 == *(_DWORD *)(v23 + 148))
      {
        v113 = *(_DWORD *)(v23 + 176);
        if (v113 != *(_DWORD *)(v23 + 180))
        {
          *(_OWORD *)&v154[15] = *(_OWORD *)(v23 + 160);
          v114 = 1;
LABEL_76:
          v145 = *(float32x4_t *)&v154[15];
          v117 = 1;
LABEL_79:
          if (v110 != 2 || v133 || v135 != 2)
          {
            *(_DWORD *)(v23 + 148) = v112;
            *(_DWORD *)(v23 + 180) = v113;
            if (!v117)
            {
LABEL_89:
              if (v114)
                (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(v19 + 336) + 240))(*(_QWORD *)(v19 + 336), &v145);
              goto LABEL_91;
            }
LABEL_88:
            (*(void (**)(_QWORD, float32x4_t *))(**(_QWORD **)(v19 + 336) + 224))(*(_QWORD *)(v19 + 336), &v151);
            v114 = v144.u8[0];
            goto LABEL_89;
          }
          if (v117)
            goto LABEL_84;
          goto LABEL_83;
        }
LABEL_61:
        *(_DWORD *)(v23 + 148) = *(_DWORD *)(v23 + 144);
        v113 = *(_DWORD *)(v23 + 176);
LABEL_87:
        *(_DWORD *)(v23 + 180) = v113;
        goto LABEL_88;
      }
      v115 = 0;
      v114 = 1;
      goto LABEL_69;
    }
    v34 = *(_QWORD *)(v20 + 240);
    if (v34)
    {
      if (!v23)
        goto LABEL_37;
    }
    else
    {
      v34 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v20 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!v23)
        goto LABEL_37;
    }
    if (v134)
    {
      (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)(v19 + 336) + 40))(&v127);
      v35 = v128;
      v36 = v129;
      v37 = v35 + v35;
      v38 = v36 + v36;
      v39 = v130;
      v40 = v39 + v39;
      v41 = v35 * (float)(v35 + v35);
      v42 = v36 * (float)(v36 + v36);
      v43 = v39 * (float)(v39 + v39);
      v44 = v37 * v129;
      v45 = v37 * v130;
      v46 = v38 * v130;
      v47 = v38 * v131;
      v48 = v40 * v131;
      v49.i32[3] = 0;
      v49.f32[0] = 1.0 - (float)(v42 + v43);
      v49.f32[1] = (float)(v37 * v129) + v48;
      v49.f32[2] = (float)(v37 * v130) - v47;
      v50 = v37 * v131;
      v51 = 1.0 - (float)(v41 + v43);
      v52.i32[3] = 0;
      v52.f32[0] = v44 - v48;
      v52.f32[1] = v51;
      v52.f32[2] = v46 + v50;
      v53.i32[3] = 0;
      v53.f32[0] = v45 + v47;
      v53.f32[1] = v46 - v50;
      v53.f32[2] = 1.0 - (float)(v41 + v42);
      v150 = vmulq_n_f32(v49, v136.f32[0]);
      v151 = vmulq_n_f32(v52, *(float *)vshrq_n_u64((uint64x2_t)v136, 0x20uLL).i32);
      v54 = v127;
      v54.i32[3] = 1.0;
      v152 = vmulq_laneq_f32(v53, v136, 2);
      v153 = v54;
      re::ecs2::PhysicsSimulationData::localTransformFromPhysicsSimulationSpace(v22, (uint64_t)&v150, v20, (uint64_t)v126);
      re::lerp<float>(v126, (float32x4_t *)(v23 + 32), &v123, 0.1);
      v56 = v124;
      v55 = v125;
      *(float32x4_t *)(v34 + 32) = v123;
      *(_OWORD *)(v34 + 48) = v56;
      *(_OWORD *)(v34 + 64) = v55;
      re::ecs2::Component::markDirty((_QWORD *)v34);
      v57 = *(_QWORD *)(v20 + 24);
      if (v57)
      {
        if ((*(_BYTE *)(v57 + 288) & 0x80) != 0)
          v58 = 0;
        else
          v58 = *(re::ecs2::TransformComponent ***)(v20 + 24);
      }
      else
      {
        v58 = 0;
      }
      re::ecs2::TransformComponent::worldMatrix4x4F(v58, (const re::ecs2::Entity *)1, v154);
      v82 = 0;
      v83 = *(float32x4_t *)(v22 + 176);
      v84 = *(float32x4_t *)(v22 + 192);
      v85 = *(float32x4_t *)(v22 + 208);
      v86 = *(float32x4_t *)(v22 + 224);
      v144 = *(int32x4_t *)v154;
      v145 = *(float32x4_t *)&v154[16];
      v146 = v155;
      v147 = v156;
      do
      {
        *(float32x4_t *)((char *)&v150 + v82) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v83, COERCE_FLOAT(*(_OWORD *)((char *)&v144 + v82))), v84, *(float32x2_t *)&v144.i8[v82], 1), v85, *(float32x4_t *)((char *)&v144 + v82), 2), v86, *(float32x4_t *)((char *)&v144 + v82), 3);
        v82 += 16;
      }
      while (v82 != 64);
      v87 = 0;
      v88 = v150;
      v89 = v151;
      v90 = *(float *)&v124;
      v91 = v90 + v90;
      v92 = *((float *)&v124 + 2);
      v93 = v92 + v92;
      v94 = v90 * (float)(v90 + v90);
      v95 = *((float *)&v124 + 1) * (float)(*((float *)&v124 + 1) + *((float *)&v124 + 1));
      v96 = v92 * (float)(v92 + v92);
      v97 = v91 * *((float *)&v124 + 1);
      v98 = v91 * *((float *)&v124 + 2);
      v99 = (float)(*((float *)&v124 + 1) + *((float *)&v124 + 1)) * *((float *)&v124 + 2);
      v100 = v91 * *((float *)&v124 + 3);
      v101 = (float)(*((float *)&v124 + 1) + *((float *)&v124 + 1)) * *((float *)&v124 + 3);
      v102.i32[3] = 0;
      v102.f32[0] = 1.0 - (float)(v95 + v96);
      v102.f32[1] = v97 + (float)(v93 * *((float *)&v124 + 3));
      v102.f32[2] = v98 - v101;
      v103.i32[3] = 0;
      v103.f32[0] = v97 - (float)(v93 * *((float *)&v124 + 3));
      v103.f32[1] = 1.0 - (float)(v94 + v96);
      v103.f32[2] = v99 + v100;
      v104 = v152;
      v105 = v153;
      v106.i32[3] = 0;
      v106.f32[0] = v98 + v101;
      v106.f32[1] = v99 - v100;
      v106.f32[2] = 1.0 - (float)(v94 + v95);
      v107 = v125;
      HIDWORD(v107) = 1.0;
      v144 = (int32x4_t)vmulq_n_f32(v102, v123.f32[0]);
      v145 = vmulq_n_f32(v103, *(float *)vshrq_n_u64((uint64x2_t)v123, 0x20uLL).i32);
      v146 = vmulq_laneq_f32(v106, v123, 2);
      v147 = v107;
      do
      {
        *(float32x4_t *)((char *)&v150 + v87) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, COERCE_FLOAT(*(_OWORD *)((char *)&v144 + v87))), v89, *(float32x2_t *)&v144.i8[v87], 1), v104, *(float32x4_t *)((char *)&v144 + v87), 2), v105, *(float32x4_t *)((char *)&v144 + v87), 3);
        v87 += 16;
      }
      while (v87 != 64);
      v144 = 0u;
      v149 = xmmword_2260E5D70;
      v148 = 0u;
      re::decomposeScaleRotationTranslation<float>((uint64_t)&v150, &v144, &v149, &v148);
      v150 = v148;
      v151 = (float32x4_t)v149;
      v108 = *(_OWORD **)(v19 + 336);
      v109 = v149;
      v108[1] = v148;
      v108[2] = v109;
      v81 = *(void (**)(void))(*(_QWORD *)v108 + 64);
LABEL_47:
      v81();
      goto LABEL_48;
    }
LABEL_37:
    if (v135 == 2 && *(_DWORD *)(v19 + 124) == *(_DWORD *)(v19 + 272))
    {
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v19 + 336) + 40))(v154);
      v59 = *(float *)&v154[16];
      v60 = v59 + v59;
      v61 = *(float *)&v154[24];
      v62 = v61 + v61;
      v63 = v59 * (float)(v59 + v59);
      v64 = *(float *)&v154[20] * (float)(*(float *)&v154[20] + *(float *)&v154[20]);
      v65 = v61 * (float)(v61 + v61);
      v66 = v60 * *(float *)&v154[20];
      v67 = v60 * *(float *)&v154[24];
      v68 = (float)(*(float *)&v154[20] + *(float *)&v154[20]) * *(float *)&v154[24];
      v69 = (float)(*(float *)&v154[20] + *(float *)&v154[20]) * *(float *)&v154[28];
      v70 = v62 * *(float *)&v154[28];
      v71.i32[3] = 0;
      v71.f32[0] = 1.0 - (float)(v64 + v65);
      v71.f32[1] = (float)(v60 * *(float *)&v154[20]) + v70;
      v71.f32[2] = (float)(v60 * *(float *)&v154[24]) - v69;
      v72 = v60 * *(float *)&v154[28];
      v73 = 1.0 - (float)(v63 + v65);
      v74.i32[3] = 0;
      v74.f32[0] = v66 - v70;
      v74.f32[1] = v73;
      v74.f32[2] = v68 + v72;
      v75.i32[3] = 0;
      v75.f32[0] = v67 + v69;
      v75.f32[1] = v68 - v72;
      v75.f32[2] = 1.0 - (float)(v63 + v64);
      v150 = vmulq_n_f32(v71, v136.f32[0]);
      v151 = vmulq_n_f32(v74, *(float *)vshrq_n_u64((uint64x2_t)v136, 0x20uLL).i32);
      v76 = *(float32x4_t *)v154;
      v76.i32[3] = 1.0;
      v152 = vmulq_laneq_f32(v75, v136, 2);
      v153 = v76;
      re::ecs2::PhysicsSimulationData::localTransformFromPhysicsSimulationSpace(v22, (uint64_t)&v150, v20, (uint64_t)&v144);
      v78 = v145;
      v77 = v146;
      *(int32x4_t *)(v34 + 32) = v144;
      *(float32x4_t *)(v34 + 48) = v78;
      *(float32x4_t *)(v34 + 64) = v77;
      re::ecs2::Component::markDirty((_QWORD *)v34);
      goto LABEL_48;
    }
    v79 = *(_OWORD **)(v19 + 336);
    v80 = v138;
    v79[1] = v137;
    v79[2] = v80;
    v81 = *(void (**)(void))(*(_QWORD *)v79 + 64);
    goto LABEL_47;
  }
LABEL_6:
  v16 = *(_DWORD *)(a5 + 40) != 0;
LABEL_8:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v143);
  return v16;
}

void re::ecs2::RigidBodyComponentStateImpl::simToECS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  BOOL v17;
  float v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  __int128 v38;
  __int128 v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  re::ecs2::NetworkComponent *v55;
  float32x4_t *v56;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float v62;
  float32x4_t v63;
  _OWORD v64[3];
  float v65[8];
  float32x4_t v66;
  int32x4_t v67;
  float32x4_t v68;
  _BYTE v69[8];
  uint64_t v70;
  float32x4_t v71;
  uint64_t v72[2];
  _BYTE v73[16];
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v73, 3047, a1);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a4 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 56));
  v11 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v10);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)(a4 + 8);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v13);
    v72[0] = v14;
    v72[1] = v15;
    if (v15)
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v74, a6, 0);
      v70 = a5;
      v71 = v74;
      if (v74.i64[0] != a6 || v74.u16[4] != 0xFFFFLL || (v74.i32[2] & 0xFFFF0000) != 0xFFFF0000)
      {
        do
        {
          v51 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v71);
          v52 = *(_QWORD *)v51;
          v53 = *(_QWORD *)(*(_QWORD *)v51 + 16);
          v54 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v53 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v55 = *(re::ecs2::NetworkComponent **)(v53 + 200);
          re::internal::RigidBodyUpdateStagingData::RigidBodyUpdateStagingData((uint64_t)v69, v52, v54, (uint64_t)v55);
          if (v69[1])
          {
            v56 = (float32x4_t *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v72, v53);
            if (re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation((re::ecs2::PhysicsSimulationData *)v56) == a2)
            {
              re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v53, (const re::ecs2::Entity *)1, &v74);
              re::ecs2::PhysicsSimulationData::transformInPhysicsSimulationSpace(v56, (uint64_t)&v74, &v66);
              v60 = (float32x4_t)v67;
              v61 = v68;
              v59 = v66;
              v16 = vmulq_f32(v66, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v68, (int8x16_t)v68, 0xCuLL), (int8x16_t)v68, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v67, v67), (int8x16_t)v67, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v67, (int8x16_t)v67, 0xCuLL), (int8x16_t)v67, 8uLL)));
              v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0] <= 0.0;
              v18 = -1.0;
              if (!v17)
                v18 = 1.0;
              v62 = v18;
              (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)(v52 + 336) + 40))(&v74);
              v19 = v75;
              v63 = v74;
              (*(void (**)(float *__return_ptr))(**(_QWORD **)(v52 + 336) + 40))(v65);
              v20 = *(_QWORD *)(v53 + 240);
              if (!v20)
                v20 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v53 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (!re::areAlmostEqual<float>(v65, (float *)(v52 + 304)))
              {
                v21 = vmulq_f32(v59, v59);
                v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)));
                v23 = vmulq_f32(v60, v60);
                v22.f32[0] = sqrtf(v22.f32[0]);
                v24 = vmulq_f32(v61, v61);
                v22.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
                v22.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
                v25 = v19.f32[0] * (float)(v19.f32[0] + v19.f32[0]);
                v26 = v19.f32[1] * (float)(v19.f32[1] + v19.f32[1]);
                v27 = v19.f32[2] * (float)(v19.f32[2] + v19.f32[2]);
                v28 = (float)(v19.f32[0] + v19.f32[0]) * v19.f32[1];
                v29 = (float)(v19.f32[0] + v19.f32[0]) * v19.f32[2];
                v30 = (float)(v19.f32[1] + v19.f32[1]) * v19.f32[2];
                v23.f32[0] = (float)(v19.f32[0] + v19.f32[0]) * v19.f32[3];
                v24.f32[0] = (float)(v19.f32[1] + v19.f32[1]) * v19.f32[3];
                v31 = (float)(v19.f32[2] + v19.f32[2]) * v19.f32[3];
                v32.i32[3] = 0;
                v32.f32[0] = 1.0 - (float)(v26 + v27);
                v33.i32[3] = 0;
                v32.f32[1] = v28 + v31;
                v32.f32[2] = v29 - v24.f32[0];
                v33.f32[0] = v29 + v24.f32[0];
                v33.f32[1] = v30 - v23.f32[0];
                v33.f32[2] = 1.0 - (float)(v25 + v26);
                v34 = vmulq_n_f32(v22, v62);
                v35 = vmulq_laneq_f32(v33, v34, 2);
                v36.i32[3] = 0;
                v36.i64[0] = __PAIR64__(1.0 - (float)(v25 + v27), v28 - v31);
                v36.f32[2] = v30 + v23.f32[0];
                v74 = vmulq_n_f32(v32, v34.f32[0]);
                v75 = vmulq_n_f32(v36, v34.f32[1]);
                v37 = v63;
                v37.i32[3] = 1.0;
                v76 = v35;
                v77 = v37;
                re::ecs2::PhysicsSimulationData::localTransformFromPhysicsSimulationSpace((uint64_t)v56, (uint64_t)&v74, v53, (uint64_t)v64);
                v39 = v64[1];
                v38 = v64[2];
                *(_OWORD *)(v20 + 32) = v64[0];
                *(_OWORD *)(v20 + 48) = v39;
                *(_OWORD *)(v20 + 64) = v38;
                re::ecs2::Component::markDirty((_QWORD *)v20);
                if (v69[0])
                {
                  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v52 + 336) + 296))(*(_QWORD *)(v52 + 336)) & 1) == 0)
                    re::ecs2::NetworkComponent::markDirty(v55, (const re::ecs2::Component *)v20);
                }
              }
              (*(void (**)(float32x4_t *__return_ptr))(**(_QWORD **)(v52 + 336) + 40))(&v74);
              v40 = v75;
              *(float32x4_t *)(v52 + 304) = v74;
              *(float32x4_t *)(v52 + 320) = v40;
              if (v54)
              {
                if (v69[2])
                {
                  v41 = 0;
                  v42 = 0;
                  *(_QWORD *)(v54 + 96) = 0;
                  *(_QWORD *)(v54 + 104) = 0;
                  *(_DWORD *)(v54 + 152) = *(_DWORD *)(v54 + 148);
                }
                else
                {
                  *(_QWORD *)(v54 + 96) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v52 + 336) + 216))(*(_QWORD *)(v52 + 336));
                  *(_QWORD *)(v54 + 104) = v43;
                  *(_DWORD *)(v54 + 152) = *(_DWORD *)(v54 + 148);
                  v41 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v52 + 336) + 232))(*(_QWORD *)(v52 + 336));
                }
                v44 = *(_DWORD *)(v54 + 180);
                *(_QWORD *)(v54 + 112) = v41;
                *(_QWORD *)(v54 + 120) = v42;
                *(_DWORD *)(v54 + 184) = v44;
                v45 = *(unsigned __int8 *)(v54 + 25);
                v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v52 + 336) + 296))(*(_QWORD *)(v52 + 336));
                *(_BYTE *)(v54 + 25) = v46;
                if (v45)
                  v47 = v46;
                else
                  v47 = 0;
                if ((v47 & 1) == 0 && v69[0])
                {
                  re::ecs2::Component::markDirty((_QWORD *)v54);
                  re::ecs2::NetworkComponent::markDirty(v55, (const re::ecs2::Component *)v54);
                  v46 = *(unsigned __int8 *)(v54 + 25);
                }
                if (v45 != v46)
                {
                  v48 = v56[1].i64[1];
                  if (v48)
                  {
                    v49 = *(_QWORD *)(v52 + 336);
                    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 296))(v49);
                    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 16))(v48, v49, v50);
                  }
                }
              }
            }
          }
          re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v71);
        }
        while (v71.i64[0] != a6 || v71.u16[4] != 0xFFFF || v71.u16[5] != 0xFFFF);
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v73);
}

uint64_t *re::ecs2::allocInfo_RigidBodyComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_308);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_308))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112F98, 0);
    *(uint64_t *)((char *)&qword_254112FA8 + 6) = 0;
    qword_254112FA8 = 0;
    qword_254112FB8 = 0;
    qword_254112FC0 = 0xFFFFFFFFLL;
    qword_254112F98 = (uint64_t)&off_24ED7DAA8;
    qword_254112FC8 = (uint64_t)"RigidBodyComponent";
    dword_254112FD0 = 0;
    xmmword_254112FD8 = 0u;
    unk_254112FE8 = 0u;
    xmmword_254112FF8 = 0u;
    qword_254113008 = 0;
    __cxa_guard_release(&_MergedGlobals_308);
  }
  return &qword_254112F98;
}

void re::ecs2::initInfo_RigidBodyComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  re *v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  void *v52;
  uint64_t v53;
  uint64_t *v54;
  const re::IntrospectionBase *v55;
  void *v56;
  uint64_t v57;
  uint64_t *v58;
  const re::IntrospectionBase *v59;
  void *v60;
  uint64_t v61;
  uint64_t *v62;
  const re::IntrospectionBase *v63;
  void *v64;
  uint64_t v65;
  uint64_t *v66;
  const re::IntrospectionBase *v67;
  void *v68;
  uint64_t v69;
  uint64_t *v70;
  const re::IntrospectionBase *v71;
  void *v72;
  uint64_t v73;
  uint64_t *v74;
  const re::IntrospectionBase *v75;
  void *v76;
  uint64_t v77;
  uint64_t *v78;
  const re::IntrospectionBase *v79;
  void *v80;
  uint64_t v81;
  __int128 v82;
  _QWORD v83[2];
  __int128 v84;

  v83[0] = 0x1479C03CF7280260;
  v83[1] = "RigidBodyComponent";
  re::StringID::destroyString((re::StringID *)v83);
  *((_OWORD *)this + 2) = v84;
  v4 = atomic_load((unsigned __int8 *)&qword_254112F90);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254112F90);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254113010 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "setSleepOnCreation";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254113018 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_MassFrame((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "massFrame";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254113020 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_AssetHandle((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "material";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x6000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254113028 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_MotionType((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "motionType";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x7800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254113030 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_uint32_t((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "version_deprecated";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x8000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254113038 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v29 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 24, 8);
      *(_DWORD *)v29 = 5;
      *((_QWORD *)v29 + 1) = "version";
      *((_QWORD *)v29 + 2) = "version_deprecated";
      qword_254113040 = (uint64_t)v29;
      v30 = re::introspectionAllocator(v29);
      v32 = re::introspect_BOOL((re *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "isCCDEnabled";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x8400000006;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_254113048 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = re::introspect_float((re *)1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "ccdVelocityThreshold";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x8800000007;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_254113050 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v40 = re::introspect_BOOL((re *)1, v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "lockRotationX";
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x8C00000008;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_254113058 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      v44 = re::introspect_BOOL((re *)1, v43);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = "lockRotationY";
      *(_QWORD *)(v45 + 16) = v44;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 32) = 0x8D00000009;
      *(_DWORD *)(v45 + 40) = 0;
      *(_QWORD *)(v45 + 48) = 0;
      *(_QWORD *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_254113060 = v45;
      v46 = re::introspectionAllocator((re *)v45);
      v48 = re::introspect_BOOL((re *)1, v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = "lockRotationZ";
      *(_QWORD *)(v49 + 16) = v48;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0x8E0000000ALL;
      *(_DWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_254113068 = v49;
      v50 = re::introspectionAllocator((re *)v49);
      v52 = re::introspect_BOOL((re *)1, v51);
      v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
      *(_DWORD *)v53 = 1;
      *(_QWORD *)(v53 + 8) = "lockTranslationX";
      *(_QWORD *)(v53 + 16) = v52;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 32) = 0x8F0000000BLL;
      *(_DWORD *)(v53 + 40) = 0;
      *(_QWORD *)(v53 + 48) = 0;
      *(_QWORD *)(v53 + 56) = 0;
      *(_DWORD *)(v53 + 64) = 0;
      qword_254113070 = v53;
      v54 = re::introspectionAllocator((re *)v53);
      v56 = re::introspect_BOOL((re *)1, v55);
      v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 72, 8);
      *(_DWORD *)v57 = 1;
      *(_QWORD *)(v57 + 8) = "lockTranslationY";
      *(_QWORD *)(v57 + 16) = v56;
      *(_QWORD *)(v57 + 24) = 0;
      *(_QWORD *)(v57 + 32) = 0x900000000CLL;
      *(_DWORD *)(v57 + 40) = 0;
      *(_QWORD *)(v57 + 48) = 0;
      *(_QWORD *)(v57 + 56) = 0;
      *(_DWORD *)(v57 + 64) = 0;
      qword_254113078 = v57;
      v58 = re::introspectionAllocator((re *)v57);
      v60 = re::introspect_BOOL((re *)1, v59);
      v61 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 72, 8);
      *(_DWORD *)v61 = 1;
      *(_QWORD *)(v61 + 8) = "lockTranslationZ";
      *(_QWORD *)(v61 + 16) = v60;
      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = 0x910000000DLL;
      *(_DWORD *)(v61 + 40) = 0;
      *(_QWORD *)(v61 + 48) = 0;
      *(_QWORD *)(v61 + 56) = 0;
      *(_DWORD *)(v61 + 64) = 0;
      qword_254113080 = v61;
      v62 = re::introspectionAllocator((re *)v61);
      v64 = re::introspect_BOOL((re *)1, v63);
      v65 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 72, 8);
      *(_DWORD *)v65 = 1;
      *(_QWORD *)(v65 + 8) = "canSleep";
      *(_QWORD *)(v65 + 16) = v64;
      *(_QWORD *)(v65 + 24) = 0;
      *(_QWORD *)(v65 + 32) = 0x920000000ELL;
      *(_DWORD *)(v65 + 40) = 0;
      *(_QWORD *)(v65 + 48) = 0;
      *(_QWORD *)(v65 + 56) = 0;
      *(_DWORD *)(v65 + 64) = 0;
      qword_254113088 = v65;
      v66 = re::introspectionAllocator((re *)v65);
      v68 = re::introspect_BOOL((re *)1, v67);
      v69 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v66 + 32))(v66, 72, 8);
      *(_DWORD *)v69 = 1;
      *(_QWORD *)(v69 + 8) = "remoteAuthorityAllowed";
      *(_QWORD *)(v69 + 16) = v68;
      *(_QWORD *)(v69 + 24) = 0;
      *(_QWORD *)(v69 + 32) = 0x930000000FLL;
      *(_DWORD *)(v69 + 40) = 0;
      *(_QWORD *)(v69 + 48) = 0;
      *(_QWORD *)(v69 + 56) = 0;
      *(_DWORD *)(v69 + 64) = 0;
      qword_254113090 = v69;
      v70 = re::introspectionAllocator((re *)v69);
      v72 = re::introspect_float((re *)1, v71);
      v73 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v70 + 32))(v70, 72, 8);
      *(_DWORD *)v73 = 1;
      *(_QWORD *)(v73 + 8) = "linearDamping";
      *(_QWORD *)(v73 + 16) = v72;
      *(_QWORD *)(v73 + 24) = 0;
      *(_QWORD *)(v73 + 32) = 0x9400000010;
      *(_DWORD *)(v73 + 40) = 0;
      *(_QWORD *)(v73 + 48) = 0;
      *(_QWORD *)(v73 + 56) = 0;
      *(_DWORD *)(v73 + 64) = 0;
      qword_254113098 = v73;
      v74 = re::introspectionAllocator((re *)v73);
      v76 = re::introspect_float((re *)1, v75);
      v77 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v74 + 32))(v74, 72, 8);
      *(_DWORD *)v77 = 1;
      *(_QWORD *)(v77 + 8) = "angularDamping";
      *(_QWORD *)(v77 + 16) = v76;
      *(_QWORD *)(v77 + 24) = 0;
      *(_QWORD *)(v77 + 32) = 0x9800000011;
      *(_DWORD *)(v77 + 40) = 0;
      *(_QWORD *)(v77 + 48) = 0;
      *(_QWORD *)(v77 + 56) = 0;
      *(_DWORD *)(v77 + 64) = 0;
      qword_2541130A0 = v77;
      v78 = re::introspectionAllocator((re *)v77);
      v80 = re::introspect_BOOL((re *)1, v79);
      v81 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v78 + 32))(v78, 72, 8);
      *(_DWORD *)v81 = 1;
      *(_QWORD *)(v81 + 8) = "gravityEnabled";
      *(_QWORD *)(v81 + 16) = v80;
      *(_QWORD *)(v81 + 24) = 0;
      *(_QWORD *)(v81 + 32) = 0x9C00000012;
      *(_DWORD *)(v81 + 40) = 0;
      *(_QWORD *)(v81 + 48) = 0;
      *(_QWORD *)(v81 + 56) = 0;
      *(_DWORD *)(v81 + 64) = 0;
      qword_2541130A8 = v81;
      __cxa_guard_release(&qword_254112F90);
    }
  }
  *((_QWORD *)this + 2) = 0x19000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 20;
  *((_QWORD *)this + 8) = &qword_254113010;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RigidBodyComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RigidBodyComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RigidBodyComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RigidBodyComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v82 = v84;
}

uint64_t re::internal::defaultConstruct<re::ecs2::RigidBodyComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::RigidBodyComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::RigidBodyComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RigidBodyComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RigidBodyComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RigidBodyComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RigidBodyComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RigidBodyComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RigidBodyComponent>, this);
}

uint64_t re::ecs2::RigidBodyComponentStateImpl::dependsOnComponents(re::ecs2::RigidBodyComponentStateImpl *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::RigidBodyComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::internal::RigidBodyUpdateStagingData::RigidBodyUpdateStagingData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int IsAuthoritative;
  int v9;
  int v10;
  BOOL v12;
  int v13;
  int v14;
  BOOL v15;

  *(_BYTE *)a1 = a4 != 0;
  if (!a4)
    goto LABEL_11;
  if (*(_QWORD *)(a4 + 32))
  {
    IsAuthoritative = RESyncableIsAuthoritative();
    if (*(_BYTE *)a1)
      v9 = IsAuthoritative;
    else
      v9 = 0;
  }
  else
  {
    v9 = 1;
    IsAuthoritative = 1;
  }
  *(_BYTE *)(a1 + 1) = IsAuthoritative;
  if (v9 && !*(_BYTE *)(a2 + 147))
  {
    if (*(_QWORD *)(a4 + 32))
    {
      IsAuthoritative = RESyncableGetOwnerPeerID() == 0;
LABEL_12:
      *(_BYTE *)(a1 + 1) = IsAuthoritative;
      goto LABEL_13;
    }
LABEL_11:
    IsAuthoritative = 1;
    goto LABEL_12;
  }
LABEL_13:
  v10 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 4) = v10;
  v12 = v10 == 2 && a3 != 0 && IsAuthoritative == 0;
  if (v12 && *(_BYTE *)(a3 + 25))
    *(_DWORD *)(a1 + 4) = 1;
  v13 = *(_DWORD *)(a2 + 124);
  v14 = *(_DWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 2) = v13 != v14;
  v15 = v13 == v14 && a3 != 0;
  *(_BYTE *)(a1 + 3) = v15;
  return a1;
}

void std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED6A7A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED6A7A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::operator()(uint64_t result, _QWORD *a2)
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = (void (***)(_QWORD))*a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    (**v2)(*a2);
    return (*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1},std::allocator<std::unique_ptr<re::RigidBody,std::function<void ()(re::RigidBody*)>> re::toUniquePtr<re::RigidBody>(re::RigidBody*,re::Allocator *)::{lambda(re::RigidBody*)#1}>,void ()(re::RigidBody*)>::target_type()
{
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::RigidBodyComponent>(uint64_t a1)
{
  uint64_t v2;

  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_WORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED43F98;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0x3F80000000000000;
  *(int32x4_t *)(v2 + 64) = vdupq_n_s32(0x3DCCCCCDu);
  *(_DWORD *)(v2 + 80) = 1065353216;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_DWORD *)(v2 + 120) = 2;
  *(_QWORD *)(v2 + 124) = 0;
  *(_BYTE *)(v2 + 132) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_DWORD *)(v2 + 144) = 16842752;
  *(_QWORD *)(v2 + 148) = 0xBD4CCCCDBCA3D70ALL;
  *(_BYTE *)(v2 + 156) = 1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 0;
  objc_initWeak((id *)(v2 + 280), 0);
  *(_DWORD *)(a1 + 288) = 2;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  return a1;
}

uint64_t re::ecs2::UpdateRenderServicesDataSystem::willAddSystemToECSService(re::ecs2::UpdateRenderServicesDataSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 20) = re::ServiceLocator::serviceOrNull<re::ecs2::ClippingService>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 21) = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v3);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 22) = re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(v4);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 23) = re::ServiceLocator::serviceOrNull<re::ecs2::TintService>(v5);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 24) = re::ServiceLocator::serviceOrNull<re::ecs2::VisualProxyScopeService>(v6);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 25) = re::ServiceLocator::serviceOrNull<re::ecs2::EnvironmentLightingService>(v7);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 26) = re::ServiceLocator::serviceOrNull<re::ecs2::LightService>(v8);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(v9);
  *((_QWORD *)this + 27) = result;
  return result;
}

double re::ecs2::UpdateRenderServicesDataSystem::willRemoveSystemFromECSService(re::ecs2::UpdateRenderServicesDataSystem *this)
{
  double result;

  *((_QWORD *)this + 27) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

_QWORD *re::ecs2::UpdateRenderServicesDataSystem::updateScenes(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result[13];
  if (v1 && (*(_BYTE *)(v1 + 424) & 0x10) != 0)
  {
    v2 = result;
    v3 = result[27];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2[17] + 24))(v2[17]);
    v4 = v2[21];
    if (v4)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 40))(v4, &v11);
    v5 = v2[22];
    if (v5)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 24))(v5, &v11);
    v6 = v2[23];
    if (v6)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 24))(v6, &v11);
    v7 = v2[25];
    if (v7)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 24))(v7, &v11);
    if (v2[20])
    {
      v8 = v2[18];
      if (v8)
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
        (*(void (**)(_QWORD, _QWORD, uint64_t *, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v2[20] + 40))(v2[20], v2[14], &v11, &v10, v2[5], v2[27]);
      }
    }
    v9 = v2[24];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
    result = (_QWORD *)v2[26];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *))(*result + 48))(result, &v11);
  }
  return result;
}

uint64_t re::ecs2::UpdateRenderServicesDataSystem::willAddSceneToECSService(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = a1[21];
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
  v5 = a1[22];
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, a2);
  v6 = a1[23];
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2);
  v7 = a1[20];
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a2);
  v8 = a1[24];
  if (v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
  v9 = a1[18];
  if (v9)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2);
  v10 = a1[25];
  if (v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a2);
  result = a1[27];
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  return result;
}

uint64_t re::ecs2::UpdateRenderServicesDataSystem::willRemoveSceneFromECSService(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = a1[21];
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 56))(v4, a2);
  v5 = a1[22];
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2);
  v6 = a1[23];
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a2);
  v7 = a1[20];
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, a2);
  v8 = a1[24];
  if (v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a2);
  v9 = a1[18];
  if (v9)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a2);
  v10 = a1[25];
  if (v10)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, a2);
  result = a1[27];
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

uint64_t *re::ecs2::allocInfo_UpdateRenderServicesDataSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_309);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_309))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541130B8, 0);
    *(uint64_t *)((char *)&qword_2541130C8 + 6) = 0;
    qword_2541130C8 = 0;
    qword_2541130D8 = 0;
    qword_2541130E0 = 0xFFFFFFFFLL;
    qword_2541130B8 = (uint64_t)&off_24ED7DAA8;
    qword_2541130E8 = (uint64_t)"UpdateRenderServicesDataSystem";
    dword_2541130F0 = 0;
    unk_2541130F8 = 0u;
    unk_254113108 = 0u;
    unk_254113118 = 0u;
    qword_254113128 = 0;
    __cxa_guard_release(&_MergedGlobals_309);
  }
  return &qword_2541130B8;
}

void re::ecs2::initInfo_UpdateRenderServicesDataSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xF8A39FED7E88AF6CLL;
  v5[1] = "UpdateRenderServicesDataSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xE000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_UpdateRenderServicesDataSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::UpdateRenderServicesDataSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::UpdateRenderServicesDataSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::UpdateRenderServicesDataSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::UpdateRenderServicesDataSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::UpdateRenderServicesDataSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::UpdateRenderServicesDataSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::UpdateRenderServicesDataSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED6A838;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::UpdateRenderServicesDataSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::UpdateRenderServicesDataSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED6A838;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::UpdateRenderServicesDataSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_UpdateRenderServicesDataSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"UpdateRenderServicesDataSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_UpdateRenderServicesDataSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_UpdateRenderServicesDataSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::UpdateRenderServicesDataSystem>, this);
}

void re::ecs2::UpdateRenderServicesDataSystem::~UpdateRenderServicesDataSystem(re::ecs2::UpdateRenderServicesDataSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::UpdateRenderServicesDataSystem::typeInfo(re::ecs2::UpdateRenderServicesDataSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"UpdateRenderServicesDataSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_UpdateRenderServicesDataSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_UpdateRenderServicesDataSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::UpdateRenderServicesDataSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::UpdateRenderServicesDataSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::UpdateRenderServicesDataSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

re::ecs2::LightGroupStateTracking *re::ecs2::LightGroupStateTracking::LightGroupStateTracking(re::ecs2::LightGroupStateTracking *this)
{
  _OWORD *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v5[1] = *MEMORY[0x24BDAC8D0];
  v2 = (_OWORD *)re::ecs2::HierarchyStateTracking<unsigned long long>::HierarchyStateTracking((uint64_t)this);
  *(_QWORD *)v2 = &off_24ED6A8C8;
  *(_OWORD *)((char *)v2 + 248) = 0u;
  v2 = (_OWORD *)((char *)v2 + 248);
  v2[1] = 0u;
  v4[0] = v5;
  v4[1] = 1;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)v2, (uint64_t)v4);
  return this;
}

void re::ecs2::LightGroupStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD v45[2];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51[15];
  uint64_t v52;
  uint64_t v53;

  v2 = a2;
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 6;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = (_QWORD *)(a1 + 56);
    v10 = *(_QWORD *)(a2 + 16);
    v34 = *(_DWORD *)(a2 + 32);
    while (1)
    {
      v53 = *(_QWORD *)(v10 + 24 * v8 + 16);
      if (!re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(a1 + 56, &v53))break;
LABEL_48:
      v10 = *(_QWORD *)(v2 + 16);
      if (*(_DWORD *)(v2 + 32) <= (v5 + 1))
        v32 = v5 + 1;
      else
        v32 = *(_DWORD *)(v2 + 32);
      while (1)
      {
        v8 = (v5 + 1);
        if (v32 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v33 = v8;
        if ((*(_DWORD *)(v10 + 24 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_55;
      }
      v33 = v32;
LABEL_55:
      LODWORD(v5) = v33;
      if ((_DWORD)v4 == v33)
        return;
    }
    v52 = 0;
    v11 = v53;
    v12 = *(_QWORD *)(v53 + 24);
    if (!v12 || (*(_BYTE *)(v12 + 288) & 0x80) != 0)
    {
LABEL_17:
      v13 = &v52;
    }
    else
    {
      v51[0] = *(_QWORD *)(v53 + 24);
      v13 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 56, v51);
      if (!v13)
      {
        do
        {
          v11 = v51[0];
          v14 = *(_QWORD *)(v51[0] + 24);
          if (!v14 || (*(_BYTE *)(v14 + 288) & 0x80) != 0)
            goto LABEL_17;
          v51[0] = *(_QWORD *)(v51[0] + 24);
          v15 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 56, v51);
        }
        while (!v15);
        v13 = (uint64_t *)v15;
      }
    }
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v51);
    v45[0] = 0;
    v45[1] = 0;
    v46 = 1;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    v50 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v45, (uint64_t)v51, 1uLL);
    v38 = 0;
    v39 = 0;
    v40 = 1;
    v42 = 0;
    v43 = 0;
    v41 = 0;
    v44 = 0;
    re::BucketArray<unsigned long long,32ul>::init((uint64_t)&v38, (uint64_t)v51, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v45) = v11;
    *(_QWORD *)re::BucketArray<unsigned long long,32ul>::addUninitialized((uint64_t)&v38) = *v13;
    while (1)
    {
      if (!v49)
      {
        v30 = v43;
        if (v43)
        {
          v31 = 0;
          do
            re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v38, v31++);
          while (v30 != v31);
        }
        for (; v39; --v39)
        {
          (*(void (**)(void))(*(_QWORD *)v38 + 40))();
          v40 += 2;
        }
        LODWORD(v4) = v34;
        v2 = a2;
        if (v38 && (v40 & 1) == 0)
          (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v45);
        if (v45[0] && (v46 & 1) == 0)
          (*(void (**)(void))(*(_QWORD *)v45[0] + 40))();
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v51);
        goto LABEL_48;
      }
      v37 = 0;
      v17 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v45, v49 - 1);
      v36 = 0;
      v37 = v17;
      if (!v43)
      {
        re::internal::assertLog((re::internal *)4, v16, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
        _os_crash();
        __break(1u);
        return;
      }
      v36 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v38, v43 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v45, --v49);
      ++v50;
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v38, --v43);
      ++v44;
      v18 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v37 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v18
        || (v18 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v53 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LightGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)) != 0)
      {
        v36 = *(_QWORD *)(*(_QWORD *)(v18 + 16) + 296);
      }
      v19 = v37;
      v20 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v37 ^ (v37 >> 30))) >> 27));
      v21 = v20 ^ (v20 >> 31);
      if (!*v9)
        break;
      v22 = v21 % *(unsigned int *)(a1 + 80);
      v23 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v22);
      if ((_DWORD)v23 == 0x7FFFFFFF)
        goto LABEL_31;
      v24 = *(_QWORD *)(a1 + 72);
      while (*(_QWORD *)(v24 + 32 * v23 + 16) != v37)
      {
        v23 = *(_DWORD *)(v24 + 32 * v23 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v23 == 0x7FFFFFFF)
          goto LABEL_31;
      }
LABEL_32:
      v25 = *(_QWORD *)(v19 + 328);
      if (v25)
      {
        v26 = *(uint64_t **)(v19 + 344);
        v27 = 8 * v25;
        do
        {
          v28 = *v26++;
          *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v45) = v28;
          v29 = (_QWORD *)re::BucketArray<unsigned long long,32ul>::addUninitialized((uint64_t)&v38);
          *v29 = v36;
          v27 -= 8;
        }
        while (v27);
      }
    }
    LODWORD(v22) = 0;
LABEL_31:
    re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addEmplace<unsigned long long &>(a1 + 56, v22, v21, &v37, &v36);
    ++*(_DWORD *)(a1 + 96);
    v19 = v37;
    goto LABEL_32;
  }
}

void re::ecs2::LightManager::update(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 280) = a2;
  v4 = a1 + 112;
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(a1 + 8, a1 + 112);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v4);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v3 + 200);
  *(_QWORD *)(v3 + 272) = 0;
}

uint64_t re::ecs2::LightManager::registerScene(re::ecs2::LightManager *this, re::ecs2::Scene *a2)
{
  return re::ecs2::HierarchyStateTracking<unsigned long long>::registerScene((re::ecs2::LightManager *)((char *)this + 8), (uint64_t)a2);
}

uint64_t re::ecs2::LightManager::unregisterScene(re::ecs2::LightManager *this, re::ecs2::Scene *a2)
{
  return re::ecs2::HierarchyStateTracking<re::ecs2::RootPhysicsSimulationData>::unregisterScene((uint64_t)this + 8, (uint64_t)a2);
}

void re::ecs2::LightGroupStateTracking::~LightGroupStateTracking(re::ecs2::LightGroupStateTracking *this)
{
  re::ecs2::LightGroupStateTracking::~LightGroupStateTracking(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    if (*((_QWORD *)this + 32))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 33));
      *((_QWORD *)this + 32) = 0;
      *((_QWORD *)this + 33) = 0;
    }
    *((_QWORD *)this + 31) = 0;
  }
  re::ecs2::HierarchyStateTracking<unsigned long long>::~HierarchyStateTracking((uint64_t *)this);
}

uint64_t re::ecs2::LightGroupStateTracking::trackedComponents(re::ecs2::LightGroupStateTracking *this)
{
  return *((_QWORD *)this + 33);
}

void re::ecs2::LightManager::~LightManager(re::ecs2::LightManager *this)
{
  re::SmallHashTable<unsigned long long,unsigned short,16ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashTable((uint64_t)this + 288);
  re::ecs2::LightGroupStateTracking::~LightGroupStateTracking((re::ecs2::LightManager *)((char *)this + 8));
}

{
  re::SmallHashTable<unsigned long long,unsigned short,16ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashTable((uint64_t)this + 288);
  re::ecs2::LightGroupStateTracking::~LightGroupStateTracking((re::ecs2::LightManager *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::LightManager::lightGroupIdForEntity(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a2;
  result = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 64, &v3);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::ecs2::LightManager::lightContextIdForEntity(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a2;
  v3 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 64, &v12);
  if (v3)
    v4 = *v3;
  else
    v4 = 0;
  if (*(_DWORD *)(a1 + 604))
  {
    if (*(_QWORD *)(a1 + 576))
    {
      v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
      v6 = *(unsigned int *)(*(_QWORD *)(a1 + 584) + 4 * ((v5 ^ (v5 >> 31)) % *(unsigned int *)(a1 + 600)));
      if ((_DWORD)v6 != 0x7FFFFFFF)
      {
        v7 = *(_QWORD *)(a1 + 592);
        while (*(_QWORD *)(v7 + 24 * v6 + 8) != v4)
        {
          LODWORD(v6) = *(_DWORD *)(v7 + 24 * v6) & 0x7FFFFFFF;
          if ((_DWORD)v6 == 0x7FFFFFFF)
            return 0;
        }
        v8 = (unsigned __int16 *)(v7 + 24 * v6 + 16);
        return *v8;
      }
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 304);
    if (v10)
    {
      v8 = (unsigned __int16 *)(a1 + 328);
      v11 = 16 * v10;
      while (*((_QWORD *)v8 - 1) != v4)
      {
        v8 += 8;
        v11 -= 16;
        if (!v11)
          return 0;
      }
      return *v8;
    }
  }
  return 0;
}

uint64_t re::ecs2::LightManager::lightGroupIdPerEntity(re::ecs2::LightManager *this)
{
  return (uint64_t)this + 64;
}

uint64_t re::ecs2::LightManager::mutableLightContextIdTable(re::ecs2::LightManager *this)
{
  return (uint64_t)this + 288;
}

uint64_t re::SmallHashTable<unsigned long long,unsigned short,16ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashTable(uint64_t a1)
{
  uint64_t *v2;

  *(_QWORD *)(a1 + 16) = 0;
  ++*(_DWORD *)(a1 + 24);
  v2 = (uint64_t *)(a1 + 288);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(a1 + 288));
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(v2);
  *(_QWORD *)(a1 + 16) = 0;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t *re::BucketArray<unsigned long long,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<unsigned long long,32ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<unsigned long long,32ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 256, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<unsigned long long,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<unsigned long long,32ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 32) >> 5);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 0x1F);
}

re *re::VideoManager::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  re *result;
  re::EventBus *v6;
  uint64_t v7;
  uint64_t v8;
  re *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  re *v14;
  _QWORD v15[3];
  uint64_t v16;
  re *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)a1 + 13) = a2;
  result = (re *)re::ServiceLocator::serviceOrNull<re::EventBus>(a2);
  if (result)
  {
    v6 = result;
    v7 = re::globalAllocators(result)[2];
    v15[0] = &off_24ED6A9D8;
    v15[1] = a1;
    v16 = v7;
    v17 = (re *)v15;
    *((_QWORD *)a1 + 14) = re::EventBus::subscribe<re::ecs2::Entity,RENetworkAssetAddedEvent>(v6, 0, (uint64_t)v15, 0, 0);
    *((_QWORD *)a1 + 15) = v8;
    v9 = v17;
    if (v17)
    {
      v9 = (re *)(**(uint64_t (***)(re *))v17)(v17);
      if (v17 != (re *)v15)
        v9 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
      v17 = 0;
    }
    v10 = re::globalAllocators(v9)[2];
    v12[0] = &off_24ED6AA40;
    v12[1] = a1;
    v13 = v10;
    v14 = (re *)v12;
    *((_QWORD *)a1 + 16) = re::EventBus::subscribe<re::ecs2::Entity,RENetworkAssetRemovedEvent>(v6, 0, (uint64_t)v12, 0, 0);
    *((_QWORD *)a1 + 17) = v11;
    result = v14;
    if (v14)
    {
      result = (re *)(**(uint64_t (***)(re *))v14)(v14);
      if (v14 != (re *)v12)
        return (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    }
  }
  return result;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __guard Type;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<RENetworkAssetAddedEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, Type);
  re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __guard Type;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<RENetworkAssetRemovedEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, Type);
  re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

uint64_t re::VideoManager::deinit(re::VideoManager *this)
{
  uint64_t result;
  uint64_t v3;

  re::VideoProcessor::deinit((pthread_t **)this + 19);
  result = *((_QWORD *)this + 13);
  if (result)
  {
    result = re::ServiceLocator::serviceOrNull<re::EventBus>(result);
    if (result)
    {
      v3 = result;
      re::EventBus::unsubscribe(result, *((_QWORD *)this + 14), *((_QWORD *)this + 15));
      result = re::EventBus::unsubscribe(v3, *((_QWORD *)this + 16), *((_QWORD *)this + 17));
    }
  }
  *((_QWORD *)this + 13) = 0;
  return result;
}

void re::VideoManager::~VideoManager(re::VideoManager *this)
{
  re::VideoManager::deinit(this);
  re::VideoProcessor::deinit((pthread_t **)this + 19);
  std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100]((uint64_t)this + 160);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1);
}

{
  re::VideoManager::~VideoManager(this);
  JUMPOUT(0x2276933B8);
}

void re::VideoManager::initializeVideoProcessorIfNeeded(re::VideoManager *this, re::RenderManager *a2)
{
  re *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  id v6;
  id v7;
  uint8_t buf[16];

  v2 = (re::VideoManager *)((char *)this + 152);
  if (*((_QWORD *)this + 19))
    return;
  if (!a2)
  {
    v4 = *re::videoLogObjects(this);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v5 = "Unable to initialize RE Video Processor. The given RenderManager is not valid.";
LABEL_10:
    _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, v5, buf, 2u);
    return;
  }
  v3 = *((_QWORD *)a2 + 7);
  if (v3)
  {
    v7 = *((id *)a2 + 23);
    v6 = *(id *)(v3 + 248);
    re::VideoProcessor::init(v2, &v7, &v6);

    return;
  }
  v4 = *re::videoLogObjects(this);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    v5 = "Unable to initialize RE Video Processor. The given ShaderManager is not valid.";
    goto LABEL_10;
  }
}

void re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v11;

  v3 = a3[2];
  if (v3)
  {
    v5 = a3[1];
    v6 = *(_QWORD *)(a1 + 8) + 8;
    do
    {
      v7 = *(_QWORD *)v5;
      if ((*(_BYTE *)(*(_QWORD *)v5 + 144) & 1) != 0)
        v8 = *(const char **)(v7 + 152);
      else
        v8 = (const char *)(v7 + 145);
      v9 = re::VideoAsset::assetType((re::VideoAsset *)a1);
      a1 = strcmp(v8, (const char *)*v9);
      if (!(_DWORD)a1)
      {
        v11 = *a3;
        a1 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v6, &v11);
      }
      v5 += 8;
      --v3;
    }
    while (v3);
  }
  return 0;
}

_QWORD *re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6A9D8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6A9D8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_0,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)>::size()
{
  return 16;
}

void re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_1,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_1,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v11;

  v3 = a3[2];
  if (v3)
  {
    v5 = a3[1];
    v6 = *(_QWORD *)(a1 + 8) + 8;
    do
    {
      v7 = *(_QWORD *)v5;
      if ((*(_BYTE *)(*(_QWORD *)v5 + 144) & 1) != 0)
        v8 = *(const char **)(v7 + 152);
      else
        v8 = (const char *)(v7 + 145);
      v9 = re::VideoAsset::assetType((re::VideoAsset *)a1);
      a1 = strcmp(v8, (const char *)*v9);
      if (!(_DWORD)a1)
      {
        v11 = *a3;
        a1 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v6, &v11);
      }
      v5 += 8;
      --v3;
    }
    while (v3);
  }
  return 0;
}

_QWORD *re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_1,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6AA40;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_1,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6AA40;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::VideoManager::init(re::ServiceLocator const*)::$_1,REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)>::size()
{
  return 16;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED6AAA8;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED6AB00;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED6AAA8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED6AAA8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6AAA8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6AAA8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED6AB00;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED6AB00;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6AB00;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6AB00;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetAddedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetAddedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED6AB58;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED6ABB0;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED6AB58;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED6AB58;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6AB58;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6AB58;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED6ABB0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED6ABB0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6ABB0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6ABB0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RENetworkAssetRemovedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RENetworkAssetRemovedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter(uint64_t a1, int a2, unsigned __int8 *a3)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 104) = 10;
  *(_BYTE *)(a1 + 107) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 261) = 0;
  re::ecs2::SerializedMaterialParameter::setValue((unsigned __int8 *)a1, a2, a3);
  return a1;
}

void re::ecs2::SerializedMaterialParameter::setValue(unsigned __int8 *a1, int a2, unsigned __int8 *a3)
{
  unsigned int v5;
  NSObject *v6;
  int v7;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *a1 = a2;
  if (a2 > 47)
  {
    if (a2 > 63)
    {
      if (a2 == 64 || a2 == 128 || a2 == 192)
      {
LABEL_10:
        v6 = *re::graphicsLogObjects((re *)a1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          v7 = *a1;
          v8[0] = 67109120;
          v8[1] = v7;
          _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Cannot memcpy data in SerializedMaterialParameter for parameter type %hhu", (uint8_t *)v8, 8u);
        }
      }
    }
    else if ((a2 - 48) < 3)
    {
LABEL_3:
      memcpy(a1 + 16, a3, v5);
    }
  }
  else
  {
    switch(a2)
    {
      case 0:
        goto LABEL_10;
      case 1:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 20:
      case 21:
      case 32:
      case 33:
      case 34:
        goto LABEL_3;
      case 2:
        a1[16] = *a3;
        break;
      default:
        return;
    }
  }
}

uint64_t re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter(uint64_t a1, const re::AssetHandle *a2)
{
  uint64_t *v3;
  uint64_t v5[3];

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v3 = (uint64_t *)(a1 + 80);
  *(_WORD *)(a1 + 104) = 10;
  *(_BYTE *)(a1 + 107) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 261) = 0;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v5, a2);
  *(_BYTE *)a1 = 64;
  re::AssetHandle::operator=(v3, v5);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v5);
  return a1;
}

uint64_t re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter(uint64_t a1, char a2, uint64_t *a3)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 104) = 10;
  *(_BYTE *)(a1 + 107) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 261) = 0;
  re::ecs2::SerializedMaterialParameter::setValue((_BYTE *)a1, a2, a3);
  return a1;
}

uint64_t re::ecs2::SerializedMaterialParameter::setValue(_BYTE *a1, char a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD v5[5];

  *a1 = a2;
  v3 = (uint64_t)(a1 + 208);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v5, a3);
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v3, (uint64_t)v5);
  result = v5[0];
  if (v5[0])
  {
    if (v5[4])
      return (*(uint64_t (**)(void))(*(_QWORD *)v5[0] + 40))();
  }
  return result;
}

uint64_t `anonymous namespace'::calculateByteSize(int a1)
{
  uint64_t result;

  if (a1 > 47)
  {
    if (a1 <= 63)
    {
      switch(a1)
      {
        case '0':
          return 16;
        case '1':
          return 48;
        case '2':
          return 64;
      }
    }
    return 0;
  }
  result = 1;
  switch(a1)
  {
    case 1:
    case 3:
    case 7:
      result = 4;
      break;
    case 2:
      return result;
    case 4:
    case 8:
    case 32:
      result = 8;
      break;
    case 5:
    case 6:
    case 9:
    case 10:
    case 33:
    case 34:
      return 16;
    case 20:
    case 21:
      result = 20;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t re::OptionalMaterialSamplerData::operator=(uint64_t result, uint64_t a2)
{
  int v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  int v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;

  *(_BYTE *)result = *(_BYTE *)a2;
  v2 = *(unsigned __int8 *)(a2 + 1);
  if (*(_BYTE *)(result + 1))
    v3 = 0;
  else
    v3 = v2 == 0;
  if (!v3)
  {
    if (*(_BYTE *)(result + 1))
      v4 = v2 == 0;
    else
      v4 = 0;
    if (v4)
    {
      *(_BYTE *)(result + 1) = 0;
    }
    else
    {
      if (*(_BYTE *)(result + 1))
        v5 = 1;
      else
        v5 = v2 == 0;
      if (!v5)
        *(_BYTE *)(result + 1) = 1;
      *(_BYTE *)(result + 2) = *(_BYTE *)(a2 + 2);
    }
  }
  v6 = *(unsigned __int8 *)(a2 + 3);
  if (*(_BYTE *)(result + 3))
    v7 = 0;
  else
    v7 = v6 == 0;
  if (!v7)
  {
    if (*(_BYTE *)(result + 3))
      v8 = v6 == 0;
    else
      v8 = 0;
    if (v8)
    {
      *(_BYTE *)(result + 3) = 0;
    }
    else
    {
      if (!*(_BYTE *)(result + 3) && *(_BYTE *)(a2 + 3))
        *(_BYTE *)(result + 3) = 1;
      *(_BYTE *)(result + 4) = *(_BYTE *)(a2 + 4);
    }
  }
  if (*(_BYTE *)(result + 8))
    v9 = 0;
  else
    v9 = *(_BYTE *)(a2 + 8) == 0;
  if (!v9)
  {
    if (!*(_BYTE *)(result + 8) || *(_BYTE *)(a2 + 8))
    {
      if (!*(_BYTE *)(result + 8) && *(_BYTE *)(a2 + 8))
        *(_BYTE *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
    }
    else
    {
      *(_BYTE *)(result + 8) = 0;
    }
  }
  if (*(_BYTE *)(result + 16) || *(_BYTE *)(a2 + 16))
  {
    if (!*(_BYTE *)(result + 16) || *(_BYTE *)(a2 + 16))
    {
      if (!*(_BYTE *)(result + 16) && *(_BYTE *)(a2 + 16))
        *(_BYTE *)(result + 16) = 1;
      *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
    }
    else
    {
      *(_BYTE *)(result + 16) = 0;
    }
  }
  if (*(_BYTE *)(result + 24) || *(_BYTE *)(a2 + 24))
  {
    if (!*(_BYTE *)(result + 24) || *(_BYTE *)(a2 + 24))
    {
      if (!*(_BYTE *)(result + 24) && *(_BYTE *)(a2 + 24))
        *(_BYTE *)(result + 24) = 1;
      *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
    }
    else
    {
      *(_BYTE *)(result + 24) = 0;
    }
  }
  if (*(_BYTE *)(result + 32) || *(_BYTE *)(a2 + 32))
  {
    if (!*(_BYTE *)(result + 32) || *(_BYTE *)(a2 + 32))
    {
      if (!*(_BYTE *)(result + 32) && *(_BYTE *)(a2 + 32))
        *(_BYTE *)(result + 32) = 1;
      *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
    }
    else
    {
      *(_BYTE *)(result + 32) = 0;
    }
  }
  if (*(_BYTE *)(result + 40) || *(_BYTE *)(a2 + 40))
  {
    if (!*(_BYTE *)(result + 40) || *(_BYTE *)(a2 + 40))
    {
      if (!*(_BYTE *)(result + 40) && *(_BYTE *)(a2 + 40))
        *(_BYTE *)(result + 40) = 1;
      *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
    }
    else
    {
      *(_BYTE *)(result + 40) = 0;
    }
  }
  if (*(_BYTE *)(result + 48) || *(_BYTE *)(a2 + 48))
  {
    if (!*(_BYTE *)(result + 48) || *(_BYTE *)(a2 + 48))
    {
      if (!*(_BYTE *)(result + 48) && *(_BYTE *)(a2 + 48))
        *(_BYTE *)(result + 48) = 1;
      *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
    }
    else
    {
      *(_BYTE *)(result + 48) = 0;
    }
  }
  if (*(_BYTE *)(result + 56) || *(_BYTE *)(a2 + 56))
  {
    if (!*(_BYTE *)(result + 56) || *(_BYTE *)(a2 + 56))
    {
      if (!*(_BYTE *)(result + 56) && *(_BYTE *)(a2 + 56))
        *(_BYTE *)(result + 56) = 1;
      *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
    }
    else
    {
      *(_BYTE *)(result + 56) = 0;
    }
  }
  if (*(_BYTE *)(result + 64) || *(_BYTE *)(a2 + 64))
  {
    if (!*(_BYTE *)(result + 64) || *(_BYTE *)(a2 + 64))
    {
      if (!*(_BYTE *)(result + 64) && *(_BYTE *)(a2 + 64))
        *(_BYTE *)(result + 64) = 1;
      *(_DWORD *)(result + 68) = *(_DWORD *)(a2 + 68);
    }
    else
    {
      *(_BYTE *)(result + 64) = 0;
    }
  }
  if (*(_BYTE *)(result + 72) || *(_BYTE *)(a2 + 72))
  {
    if (!*(_BYTE *)(result + 72) || *(_BYTE *)(a2 + 72))
    {
      if (!*(_BYTE *)(result + 72) && *(_BYTE *)(a2 + 72))
        *(_BYTE *)(result + 72) = 1;
      *(_DWORD *)(result + 76) = *(_DWORD *)(a2 + 76);
    }
    else
    {
      *(_BYTE *)(result + 72) = 0;
    }
  }
  if (*(_BYTE *)(result + 80) || *(_BYTE *)(a2 + 80))
  {
    if (!*(_BYTE *)(result + 80) || *(_BYTE *)(a2 + 80))
    {
      if (!*(_BYTE *)(result + 80) && *(_BYTE *)(a2 + 80))
        *(_BYTE *)(result + 80) = 1;
      *(_DWORD *)(result + 84) = *(_DWORD *)(a2 + 84);
    }
    else
    {
      *(_BYTE *)(result + 80) = 0;
    }
  }
  if (*(_BYTE *)(result + 88) || *(_BYTE *)(a2 + 88))
  {
    if (!*(_BYTE *)(result + 88) || *(_BYTE *)(a2 + 88))
    {
      if (!*(_BYTE *)(result + 88))
      {
        if (*(_BYTE *)(a2 + 88))
          *(_BYTE *)(result + 88) = 1;
      }
      *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
    }
    else
    {
      *(_BYTE *)(result + 88) = 0;
    }
  }
  return result;
}

uint64_t re::ecs2::SerializedMaterialParameter::toString(uint64_t this, unsigned __int8 *a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  NSObject *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint8_t buf[16];
  unsigned __int8 v41[96];

  v2 = a2;
  v3 = this;
  v4 = 0;
  v5 = *a2;
  v6 = 0;
  switch(*a2)
  {
    case 0u:
      *(_OWORD *)this = 0u;
      *(_OWORD *)(this + 16) = 0u;
      return (uint64_t)re::DynamicString::setCapacity((_QWORD *)v3, 0);
    case 1u:
    case 0x14u:
    case 0x15u:
    case 0x20u:
    case 0x21u:
    case 0x22u:
      goto LABEL_5;
    case 2u:
      if (a2[16])
        v30 = "true";
      else
        v30 = "false";
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      goto LABEL_3;
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
      v4 = 1;
LABEL_3:
      v6 = 1;
      goto LABEL_5;
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
      __break(1u);
      return this;
    default:
      v6 = 0;
      if (*a2 <= 0x3Fu)
      {
LABEL_5:
        v7 = 2;
        v8 = 1;
        if (*a2 <= 0x1Fu)
        {
          v9 = 3;
          v10 = 4;
          switch(*a2)
          {
            case 4u:
            case 8u:
              goto LABEL_29;
            case 5u:
            case 9u:
              goto LABEL_7;
            case 6u:
            case 0xAu:
              goto LABEL_17;
            case 0x14u:
              goto LABEL_60;
            case 0x15u:
              v7 = 5;
              goto LABEL_29;
            default:
              goto LABEL_25;
          }
        }
        if (*a2 > 0x2Fu)
        {
          if ((_DWORD)v5 == 48)
          {
LABEL_17:
            v7 = 4;
            goto LABEL_29;
          }
          if ((_DWORD)v5 == 49)
          {
LABEL_24:
            v8 = 3;
            goto LABEL_25;
          }
          if ((_DWORD)v5 != 50)
            goto LABEL_25;
          v7 = 16;
        }
        else if ((_DWORD)v5 != 32)
        {
          if ((_DWORD)v5 != 33)
          {
            if ((_DWORD)v5 != 34)
            {
LABEL_25:
              if (v5 <= 0x32)
              {
                if (((1 << v5) & 0x50005002005DELL) != 0)
                {
                  v7 = v8;
                  goto LABEL_29;
                }
                if (v5 == 20)
                {
                  v10 = v8;
LABEL_60:
                  v7 = 5;
                  v11 = 1;
                  v8 = v10;
                  goto LABEL_30;
                }
                if (v5 == 49)
                {
                  v7 = 4;
                  v11 = 3;
                  goto LABEL_30;
                }
              }
              v9 = v8;
LABEL_7:
              v7 = 4;
              v11 = 1;
              v8 = v9;
              goto LABEL_30;
            }
            goto LABEL_17;
          }
          goto LABEL_24;
        }
LABEL_29:
        v11 = 1;
        v8 = v7;
LABEL_30:
        v14 = v11 * v8;
        *(_OWORD *)this = 0u;
        *(_OWORD *)(this + 16) = 0u;
        re::DynamicString::setCapacity((_QWORD *)v3, 0);
        if (v11 * v8 != 1)
          re::DynamicString::append((re::DynamicString *)v3, "[", 1uLL);
        v15 = 0;
        v16 = v5 & 0xFE;
        v33 = v8 - 1;
        v31 = 4 * v7;
        v32 = v8;
        v17 = 1;
        v18 = 16;
        v34 = v11;
        v35 = v8;
        v39 = v11 * v8;
        do
        {
          v37 = v17;
          v38 = v15;
          v19 = v17;
          v36 = v18;
          v21 = v32;
          v20 = v33;
          do
          {
            if ((_DWORD)v6)
            {
              if ((_DWORD)v4)
                this = re::DynamicString::appendf((re::DynamicString *)v3, "%uu");
              else
                this = re::DynamicString::appendf((re::DynamicString *)v3, "%di");
            }
            else if ((_DWORD)v16 != 20 || v20)
            {
              this = re::DynamicString::appendf((re::DynamicString *)v3, "%ff");
            }
            else
            {
              v22 = v2[32];
              v23 = v16;
              v24 = v6;
              v25 = v2;
              v26 = v4;
              v27 = re::ColorHelpers::getColorGamutSerializationLiteral(re::ColorGamut const&)::kGamutToLiterals[v22];
              v28 = strlen(v27);
              v29 = v27;
              v4 = v26;
              v2 = v25;
              v6 = v24;
              v16 = v23;
              v14 = v39;
              this = (uint64_t)re::DynamicString::append((re::DynamicString *)v3, v29, v28);
            }
            if (v19 < v14)
              this = re::DynamicString::appendf((re::DynamicString *)v3, ", ");
            --v20;
            v18 += 4;
            ++v19;
            --v21;
          }
          while (v21);
          v15 = v38 + 1;
          v18 = v36 + v31;
          v17 = v37 + v35;
        }
        while (v38 + 1 != v34);
        if (*v2 == 48)
          this = (uint64_t)re::DynamicString::append((re::DynamicString *)v3, ", matrix", 8uLL);
        if (v14 != 1)
          return (uint64_t)re::DynamicString::append((re::DynamicString *)v3, "]", 1uLL);
        return this;
      }
      if ((_DWORD)v5 == 64)
      {
        *(_OWORD *)this = 0u;
        *(_OWORD *)(this + 16) = 0u;
        re::DynamicString::setCapacity((_QWORD *)v3, 0);
        v41[0] = 0;
        re::AssetSerializationScheme::commonCodingKey((re::AssetSerializationScheme *)v3, (re::DynamicString *)(v2 + 80), (const re::AssetHandle *)0xC, v41);
        return re::Optional<re::AssetPath>::~Optional((uint64_t)v41);
      }
      else
      {
        do
          v12 = __ldaxr(re::ecs2::SerializedMaterialParameter::toString(void)const::__FILE____LINE___logged);
        while (__stlxr(1u, re::ecs2::SerializedMaterialParameter::toString(void)const::__FILE____LINE___logged));
        if ((v12 & 1) == 0)
        {
          v13 = *re::graphicsLogObjects((re *)this);
          this = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)this)
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Buffer and sampler types cannot be converted to string\n", buf, 2u);
          }
        }
        *(_OWORD *)v3 = 0u;
        *(_OWORD *)(v3 + 16) = 0u;
        return (uint64_t)re::DynamicString::setCapacity((_QWORD *)v3, 0);
      }
  }
}

void *re::IntrospectionInfo<float [16]>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  const re::IntrospectionBase *v8;
  re::IntrospectionRegistry *v9;
  const re::IntrospectionBase *v10;
  const char *v11;
  std::__shared_mutex_base *v12;
  __int128 v14;
  __int128 v15;
  const char *v16;
  uint64_t v17[2];

  {
    re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<float [16]>::get(BOOL)::info);
  }
  if (a1)
  {
    if (re::IntrospectionInfo<float [16]>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<float [16]>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    v4 = re::IntrospectionInfo<float [16]>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v15);
    if (v4)
      return &re::IntrospectionInfo<float [16]>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
    if (re::IntrospectionInfo<float [16]>::get(BOOL)::isInitialized)
    {
LABEL_14:
      v12 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v12);
      return &re::IntrospectionInfo<float [16]>::get(BOOL)::info;
    }
  }
  re::IntrospectionInfo<float [16]>::get(BOOL)::isInitialized = 1;
  v8 = (const re::IntrospectionBase *)re::introspect_float((re *)1, a2);
  re::IntrospectionCStyleArray::IntrospectionCStyleArray((re::IntrospectionCStyleArray *)&re::IntrospectionInfo<float [16]>::get(BOOL)::info, v8, 16);
  re::IntrospectionRegistry::add(v9, v10);
  re::getPrettyTypeName((re *)&re::IntrospectionInfo<float [16]>::get(BOOL)::info, (const re::IntrospectionBase *)&v15);
  if ((BYTE8(v15) & 1) != 0)
    v11 = v16;
  else
    v11 = (char *)&v15 + 9;
  if ((_QWORD)v15 && (BYTE8(v15) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  v15 = *((_OWORD *)v8 + 2);
  xmmword_255802C58 = v14;
  re::StringID::destroyString((re::StringID *)v17);
  if ((a1 & 1) == 0)
    goto LABEL_14;
  return &re::IntrospectionInfo<float [16]>::get(BOOL)::info;
}

uint64_t re::internal::defaultConstruct<re::ecs2::SerializedMaterialParameter>(int a1, int a2, re::ecs2::SerializedMaterialParameter *this)
{
  return re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)this);
}

void re::internal::defaultDestruct<re::ecs2::SerializedMaterialParameter>(int a1, int a2, re::ecs2::SerializedMaterialParameter *this)
{
  re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter(this);
}

re::ecs2::SerializableMaterialParameterBlock *re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock(re::ecs2::SerializableMaterialParameterBlock *this, const re::ecs2::SerializableMaterialParameterBlock *a2)
{
  uint64_t v4;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)v4 = &off_24ED6AC08;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_DWORD *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)((char *)this + 52) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *((_OWORD *)this + 4) = 0u;
  *(_QWORD *)((char *)this + 100) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *((_OWORD *)this + 7) = 0u;
  *(_QWORD *)((char *)this + 148) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *((_OWORD *)this + 10) = 0u;
  *(_QWORD *)((char *)this + 196) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + 13) = 0u;
  *(_QWORD *)((char *)this + 244) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_DWORD *)this + 72) = 0;
  *(_QWORD *)((char *)this + 292) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_DWORD *)this + 84) = 0;
  *(_QWORD *)((char *)this + 340) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_DWORD *)this + 96) = 0;
  *(_QWORD *)((char *)this + 388) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 100) = 0;
  *((_BYTE *)this + 404) = 0;
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v4 + 16, (uint64_t)a2 + 16);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 64, (uint64_t)a2 + 64);
  re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 112, (uint64_t)a2 + 112);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 160, (uint64_t)a2 + 160);
  re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::operator=((uint64_t)this + 208, (uint64_t)a2 + 208);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 256, (uint64_t)a2 + 256);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 304, (uint64_t)a2 + 304);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=((uint64_t)this + 352, (uint64_t)a2 + 352);
  *((_BYTE *)this + 404) = *((_BYTE *)a2 + 404);
  *((_DWORD *)this + 100) = 0;
  return this;
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init(a1, v4, v5);
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t *re::ecs2::SerializableMaterialParameterBlock::allocator(re::ecs2::SerializableMaterialParameterBlock *this)
{
}

unsigned __int8 *re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(uint64_t a1, char *a2, int a3, unsigned __int8 *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  _anonymous_namespace_ *v13;
  StringID v15;
  _QWORD v16[38];

  v16[37] = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 304;
  if (a2)
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2[1];
      if (v9)
      {
        v10 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v8 = 31 * v8 + v9;
          v11 = *v10++;
          v9 = v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v16[0] = 2 * v8;
  v16[1] = a2;
  v12 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, v16);
  re::StringID::destroyString((re::StringID *)v16);
  if (v12 && *v12 == a3)
  {
    re::ecs2::SerializedMaterialParameter::setValue(v12, a3, a4);
  }
  else
  {
    *(_QWORD *)&v15.var0 = 0;
    v15.var1 = (char *)&str_110;
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v16, a3, a4);
    v12 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, &v15, (uint64_t)v16, 2);
    re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v16);
    re::StringID::destroyString((re::StringID *)&v15);
  }
  return v12;
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(uint64_t a1, StringID *a2, int a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  const char *var1;
  uint64_t v11;
  const char *v12;
  StringID v14;
  _BYTE v15[296];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 304;
  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, a2);
  if (!v8)
  {
    if ((*(_BYTE *)&a2->var0 & 1) != 0)
    {
      re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v15, a3, a4);
      v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, a2, (uint64_t)v15);
      re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v15);
      return v9;
    }
    var1 = a2->var1;
    *(_QWORD *)&v14.var0 = 0;
    v14.var1 = (char *)&str_110;
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v15, a3, a4);
    v11 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, &v14, (uint64_t)v15);
    goto LABEL_7;
  }
  v9 = (uint64_t)v8;
  if (*(unsigned __int8 *)v8 != a3)
  {
    v12 = a2->var1;
    *(_QWORD *)&v14.var0 = 0;
    v14.var1 = (char *)&str_110;
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v15, a3, a4);
    v11 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, &v14, (uint64_t)v15, 2);
LABEL_7:
    v9 = v11;
    re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v15);
    re::StringID::destroyString((re::StringID *)&v14);
    return v9;
  }
  re::ecs2::SerializedMaterialParameter::setValue((unsigned __int8 *)v8, a3, a4);
  return v9;
}

void re::ecs2::SerializableMaterialParameterBlock::BOOLValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, _BYTE *a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  _BYTE *v9;
  BOOL v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = (_BYTE *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *v9 == 2)
  {
    v10 = v9[16] != 0;
    *a3 = 1;
    a3[1] = v10;
  }
  else
  {
    *a3 = 0;
  }
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 320 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 320 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 320 * v4 + 32;
}

void re::ecs2::SerializableMaterialParameterBlock::floatValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 1)
  {
    v10 = *(_DWORD *)(v9 + 16);
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::intValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 3)
  {
    v10 = *(_DWORD *)(v9 + 16);
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::uintValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 7)
  {
    v10 = *(_DWORD *)(v9 + 16);
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 4) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::vector2FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 32)
  {
    v10 = *(_QWORD *)(v9 + 16);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::vector3FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 33)
  {
    *(_QWORD *)&v10 = *(_QWORD *)(v9 + 16);
    DWORD2(v10) = *(_DWORD *)(v9 + 24);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::vector4FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 34)
  {
    v10 = *(_OWORD *)(v9 + 16);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::setColorGamut3F(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;
  unsigned __int8 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned __int8 v10;
  _OWORD v11[5];
  _BYTE v12[25];
  unsigned __int8 v14;
  unsigned __int8 v16;
  int v18;
  int v20;
  int v22;
  int v24;
  int v26;
  int v28;
  int v30;
  int v32;
  int v34;
  int v36;
  uint64_t v38;
  _BYTE v39[48];
  uint64_t v40;
  __int128 v41;
  unsigned __int8 v42;
  __int128 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v5 = a3;
  *((_QWORD *)&v5 + 1) = a4;
  v43 = v5;
  v44 = BYTE4(a4);
  v6 = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1, a2, 20, (unsigned __int8 *)&v43);
  v11[0] = *(_OWORD *)v6;
  v7 = *((_OWORD *)v6 + 4);
  v9 = *((_OWORD *)v6 + 1);
  v8 = *((_OWORD *)v6 + 2);
  v11[3] = *((_OWORD *)v6 + 3);
  v11[4] = v7;
  v11[1] = v9;
  v11[2] = v8;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v12, (const re::AssetHandle *)(v6 + 80));
  v12[24] = v6[104];
  if (v6[105])
    v14 = v6[106];
  if (v6[107])
    v16 = v6[108];
  if (v6[112])
    v18 = *((_DWORD *)v6 + 29);
  if (v6[120])
    v20 = *((_DWORD *)v6 + 31);
  if (v6[128])
    v22 = *((_DWORD *)v6 + 33);
  if (v6[136])
    v24 = *((_DWORD *)v6 + 35);
  if (v6[144])
    v26 = *((_DWORD *)v6 + 37);
  if (v6[152])
    v28 = *((_DWORD *)v6 + 39);
  if (v6[160])
    v30 = *((_DWORD *)v6 + 41);
  if (v6[168])
    v32 = *((_DWORD *)v6 + 43);
  if (v6[176])
    v34 = *((_DWORD *)v6 + 45);
  if (v6[184])
    v36 = *((_DWORD *)v6 + 47);
  if (v6[192])
    v38 = *((_QWORD *)v6 + 25);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v39, (uint64_t *)v6 + 26);
  v40 = *((_QWORD *)v6 + 32);
  v10 = v6[280];
  v41 = *(_OWORD *)(v6 + 264);
  v42 = v10;
  v39[40] = 1;
  ++*(_DWORD *)(a1 + 400);
  re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v11);
}

void re::ecs2::SerializableMaterialParameterBlock::setColorGamut3F(uint64_t a1, StringID *a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  _OWORD v11[5];
  _BYTE v12[25];
  char v14;
  char v16;
  int v18;
  int v20;
  int v22;
  int v24;
  int v26;
  int v28;
  int v30;
  int v32;
  int v34;
  int v36;
  uint64_t v38;
  _BYTE v39[48];
  uint64_t v40;
  __int128 v41;
  char v42;
  __int128 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v5 = a3;
  *((_QWORD *)&v5 + 1) = a4;
  v43 = v5;
  v44 = BYTE4(a4);
  v6 = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1, a2, 20, (unsigned __int8 *)&v43);
  v11[0] = *(_OWORD *)v6;
  v7 = *(_OWORD *)(v6 + 64);
  v9 = *(_OWORD *)(v6 + 16);
  v8 = *(_OWORD *)(v6 + 32);
  v11[3] = *(_OWORD *)(v6 + 48);
  v11[4] = v7;
  v11[1] = v9;
  v11[2] = v8;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v12, (const re::AssetHandle *)(v6 + 80));
  v12[24] = *(_BYTE *)(v6 + 104);
  if (*(_BYTE *)(v6 + 105))
    v14 = *(_BYTE *)(v6 + 106);
  if (*(_BYTE *)(v6 + 107))
    v16 = *(_BYTE *)(v6 + 108);
  if (*(_BYTE *)(v6 + 112))
    v18 = *(_DWORD *)(v6 + 116);
  if (*(_BYTE *)(v6 + 120))
    v20 = *(_DWORD *)(v6 + 124);
  if (*(_BYTE *)(v6 + 128))
    v22 = *(_DWORD *)(v6 + 132);
  if (*(_BYTE *)(v6 + 136))
    v24 = *(_DWORD *)(v6 + 140);
  if (*(_BYTE *)(v6 + 144))
    v26 = *(_DWORD *)(v6 + 148);
  if (*(_BYTE *)(v6 + 152))
    v28 = *(_DWORD *)(v6 + 156);
  if (*(_BYTE *)(v6 + 160))
    v30 = *(_DWORD *)(v6 + 164);
  if (*(_BYTE *)(v6 + 168))
    v32 = *(_DWORD *)(v6 + 172);
  if (*(_BYTE *)(v6 + 176))
    v34 = *(_DWORD *)(v6 + 180);
  if (*(_BYTE *)(v6 + 184))
    v36 = *(_DWORD *)(v6 + 188);
  if (*(_BYTE *)(v6 + 192))
    v38 = *(_QWORD *)(v6 + 200);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v39, (uint64_t *)(v6 + 208));
  v40 = *(_QWORD *)(v6 + 256);
  v10 = *(_BYTE *)(v6 + 280);
  v41 = *(_OWORD *)(v6 + 264);
  v42 = v10;
  v39[40] = 1;
  ++*(_DWORD *)(a1 + 400);
  re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v11);
}

void re::ecs2::SerializableMaterialParameterBlock::colorGamut3FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v12[0] = 2 * v5;
  v12[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v12);
  re::StringID::destroyString((re::StringID *)v12);
  if (v9 && *(_BYTE *)v9 == 20)
  {
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(unsigned int *)(v9 + 24) | ((unint64_t)*(unsigned __int8 *)(v9 + 32) << 32);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 4) = v10;
    *(_QWORD *)(a3 + 12) = v11;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(uint64_t a1, char *a2, __int128 *a3)
{
  unsigned __int8 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned __int8 v8;
  _OWORD v9[5];
  _BYTE v10[25];
  unsigned __int8 v12;
  unsigned __int8 v14;
  int v16;
  int v18;
  int v20;
  int v22;
  int v24;
  int v26;
  int v28;
  int v30;
  int v32;
  int v34;
  uint64_t v36;
  _BYTE v37[48];
  uint64_t v38;
  __int128 v39;
  unsigned __int8 v40;
  __int128 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v41 = *a3;
  v42 = *((unsigned __int8 *)a3 + 16);
  v4 = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1, a2, 21, (unsigned __int8 *)&v41);
  v9[0] = *(_OWORD *)v4;
  v5 = *((_OWORD *)v4 + 4);
  v7 = *((_OWORD *)v4 + 1);
  v6 = *((_OWORD *)v4 + 2);
  v9[3] = *((_OWORD *)v4 + 3);
  v9[4] = v5;
  v9[1] = v7;
  v9[2] = v6;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)(v4 + 80));
  v10[24] = v4[104];
  if (v4[105])
    v12 = v4[106];
  if (v4[107])
    v14 = v4[108];
  if (v4[112])
    v16 = *((_DWORD *)v4 + 29);
  if (v4[120])
    v18 = *((_DWORD *)v4 + 31);
  if (v4[128])
    v20 = *((_DWORD *)v4 + 33);
  if (v4[136])
    v22 = *((_DWORD *)v4 + 35);
  if (v4[144])
    v24 = *((_DWORD *)v4 + 37);
  if (v4[152])
    v26 = *((_DWORD *)v4 + 39);
  if (v4[160])
    v28 = *((_DWORD *)v4 + 41);
  if (v4[168])
    v30 = *((_DWORD *)v4 + 43);
  if (v4[176])
    v32 = *((_DWORD *)v4 + 45);
  if (v4[184])
    v34 = *((_DWORD *)v4 + 47);
  if (v4[192])
    v36 = *((_QWORD *)v4 + 25);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v37, (uint64_t *)v4 + 26);
  v38 = *((_QWORD *)v4 + 32);
  v8 = v4[280];
  v39 = *(_OWORD *)(v4 + 264);
  v40 = v8;
  v37[40] = 1;
  ++*(_DWORD *)(a1 + 400);
  re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v9);
}

void re::ecs2::SerializableMaterialParameterBlock::setColorGamut4F(uint64_t a1, StringID *a2, __int128 *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _OWORD v9[5];
  _BYTE v10[25];
  char v12;
  char v14;
  int v16;
  int v18;
  int v20;
  int v22;
  int v24;
  int v26;
  int v28;
  int v30;
  int v32;
  int v34;
  uint64_t v36;
  _BYTE v37[48];
  uint64_t v38;
  __int128 v39;
  char v40;
  __int128 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v41 = *a3;
  v42 = *((unsigned __int8 *)a3 + 16);
  v4 = re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(a1, a2, 21, (unsigned __int8 *)&v41);
  v9[0] = *(_OWORD *)v4;
  v5 = *(_OWORD *)(v4 + 64);
  v7 = *(_OWORD *)(v4 + 16);
  v6 = *(_OWORD *)(v4 + 32);
  v9[3] = *(_OWORD *)(v4 + 48);
  v9[4] = v5;
  v9[1] = v7;
  v9[2] = v6;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v10, (const re::AssetHandle *)(v4 + 80));
  v10[24] = *(_BYTE *)(v4 + 104);
  if (*(_BYTE *)(v4 + 105))
    v12 = *(_BYTE *)(v4 + 106);
  if (*(_BYTE *)(v4 + 107))
    v14 = *(_BYTE *)(v4 + 108);
  if (*(_BYTE *)(v4 + 112))
    v16 = *(_DWORD *)(v4 + 116);
  if (*(_BYTE *)(v4 + 120))
    v18 = *(_DWORD *)(v4 + 124);
  if (*(_BYTE *)(v4 + 128))
    v20 = *(_DWORD *)(v4 + 132);
  if (*(_BYTE *)(v4 + 136))
    v22 = *(_DWORD *)(v4 + 140);
  if (*(_BYTE *)(v4 + 144))
    v24 = *(_DWORD *)(v4 + 148);
  if (*(_BYTE *)(v4 + 152))
    v26 = *(_DWORD *)(v4 + 156);
  if (*(_BYTE *)(v4 + 160))
    v28 = *(_DWORD *)(v4 + 164);
  if (*(_BYTE *)(v4 + 168))
    v30 = *(_DWORD *)(v4 + 172);
  if (*(_BYTE *)(v4 + 176))
    v32 = *(_DWORD *)(v4 + 180);
  if (*(_BYTE *)(v4 + 184))
    v34 = *(_DWORD *)(v4 + 188);
  if (*(_BYTE *)(v4 + 192))
    v36 = *(_QWORD *)(v4 + 200);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)v37, (uint64_t *)(v4 + 208));
  v38 = *(_QWORD *)(v4 + 256);
  v8 = *(_BYTE *)(v4 + 280);
  v39 = *(_OWORD *)(v4 + 264);
  v40 = v8;
  v37[40] = 1;
  ++*(_DWORD *)(a1 + 400);
  re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v9);
}

void re::ecs2::SerializableMaterialParameterBlock::colorGamut4FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  _QWORD v12[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v12[0] = 2 * v5;
  v12[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v12);
  re::StringID::destroyString((re::StringID *)v12);
  if (v9 && *(_BYTE *)v9 == 21)
  {
    v10 = *(_OWORD *)(v9 + 16);
    v11 = *(_DWORD *)(v9 + 32);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 4) = v10;
    *(_BYTE *)(a3 + 20) = v11;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::int2Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 4)
  {
    v10 = *(_QWORD *)(v9 + 16);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::int3Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 5)
  {
    *(_QWORD *)&v10 = *(_QWORD *)(v9 + 16);
    DWORD2(v10) = *(_DWORD *)(v9 + 24);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::int4Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 6)
  {
    v10 = *(_OWORD *)(v9 + 16);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::uint2Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 8)
  {
    v10 = *(_QWORD *)(v9 + 16);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::uint3Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 9)
  {
    *(_QWORD *)&v10 = *(_QWORD *)(v9 + 16);
    DWORD2(v10) = *(_DWORD *)(v9 + 24);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::uint4Value(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  _QWORD v11[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v11[0] = 2 * v5;
  v11[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (v9 && *(_BYTE *)v9 == 10)
  {
    v10 = *(_OWORD *)(v9 + 16);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::matrix2x2FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v12[0] = 2 * v5;
  v12[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v12);
  re::StringID::destroyString((re::StringID *)v12);
  if (v9 && *(_BYTE *)v9 == 48)
  {
    v10 = *(_QWORD *)(v9 + 16);
    v11 = *(_QWORD *)(v9 + 24);
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v11;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::matrix3x3FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v13[0] = 2 * v5;
  v13[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v13);
  re::StringID::destroyString((re::StringID *)v13);
  if (v9 && *(_BYTE *)v9 == 49)
  {
    *(_QWORD *)&v10 = *(_QWORD *)(v9 + 16);
    *(_QWORD *)&v11 = *(_QWORD *)(v9 + 32);
    *(_QWORD *)&v12 = *(_QWORD *)(v9 + 48);
    DWORD2(v10) = *(_DWORD *)(v9 + 24);
    DWORD2(v11) = *(_DWORD *)(v9 + 40);
    DWORD2(v12) = *(_DWORD *)(v9 + 56);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)(a3 + 48) = v12;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::matrix4x4FValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v14[2];

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v14[0] = 2 * v5;
  v14[1] = a2;
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, v14);
  re::StringID::destroyString((re::StringID *)v14);
  if (v9 && *(_BYTE *)v9 == 50)
  {
    v10 = *(_OWORD *)(v9 + 16);
    v11 = *(_OWORD *)(v9 + 32);
    v12 = *(_OWORD *)(v9 + 48);
    v13 = *(_OWORD *)(v9 + 64);
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 16) = v10;
    *(_OWORD *)(a3 + 32) = v11;
    *(_OWORD *)(a3 + 48) = v12;
    *(_OWORD *)(a3 + 64) = v13;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::setTexture(uint64_t a1, char *a2, const re::AssetHandle *a3)
{
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE v18[24];
  StringID v19;
  _OWORD v20[5];
  _BYTE v21[25];
  char v23;
  char v25;
  int v27;
  int v29;
  int v31;
  int v33;
  int v35;
  int v37;
  int v39;
  int v41;
  int v43;
  int v45;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  re::AssetHandle::AssetHandle((re::AssetHandle *)v17, a3);
  if (a2)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)&v20[0] = 2 * v6;
  *((_QWORD *)&v20[0] + 1) = a2;
  v10 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, v20);
  re::StringID::destroyString((re::StringID *)v20);
  if (v10 && *(_BYTE *)v10 == 64)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v20, (const re::AssetHandle *)v17);
    *(_BYTE *)v10 = 64;
    re::AssetHandle::operator=((uint64_t *)(v10 + 80), (uint64_t *)v20);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v20);
  }
  else
  {
    *(_QWORD *)&v19.var0 = 0;
    v19.var1 = (char *)&str_110;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v18, (const re::AssetHandle *)v17);
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v20, (const re::AssetHandle *)v18);
    v10 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1 + 304, &v19, (uint64_t)v20, 2);
    re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v20);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::StringID::destroyString((re::StringID *)&v19);
  }
  v20[0] = *(_OWORD *)v10;
  v12 = *(_OWORD *)(v10 + 16);
  v13 = *(_OWORD *)(v10 + 32);
  v14 = *(_OWORD *)(v10 + 64);
  v20[3] = *(_OWORD *)(v10 + 48);
  v20[4] = v14;
  v20[1] = v12;
  v20[2] = v13;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v21, (const re::AssetHandle *)(v10 + 80));
  v21[24] = *(_BYTE *)(v10 + 104);
  if (*(_BYTE *)(v10 + 105))
    v23 = *(_BYTE *)(v10 + 106);
  if (*(_BYTE *)(v10 + 107))
    v25 = *(_BYTE *)(v10 + 108);
  if (*(_BYTE *)(v10 + 112))
    v27 = *(_DWORD *)(v10 + 116);
  if (*(_BYTE *)(v10 + 120))
    v29 = *(_DWORD *)(v10 + 124);
  if (*(_BYTE *)(v10 + 128))
    v31 = *(_DWORD *)(v10 + 132);
  if (*(_BYTE *)(v10 + 136))
    v33 = *(_DWORD *)(v10 + 140);
  if (*(_BYTE *)(v10 + 144))
    v35 = *(_DWORD *)(v10 + 148);
  if (*(_BYTE *)(v10 + 152))
    v37 = *(_DWORD *)(v10 + 156);
  if (*(_BYTE *)(v10 + 160))
    v39 = *(_DWORD *)(v10 + 164);
  if (*(_BYTE *)(v10 + 168))
    v41 = *(_DWORD *)(v10 + 172);
  if (*(_BYTE *)(v10 + 176))
    v43 = *(_DWORD *)(v10 + 180);
  if (*(_BYTE *)(v10 + 184))
    v45 = *(_DWORD *)(v10 + 188);
  if (*(_BYTE *)(v10 + 192))
    v47 = *(_QWORD *)(v10 + 200);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v48, (uint64_t *)(v10 + 208));
  v49 = *(_BYTE *)(v10 + 248);
  v50 = *(_QWORD *)(v10 + 256);
  v15 = *(_BYTE *)(v10 + 280);
  v51 = *(_OWORD *)(v10 + 264);
  v52 = v15;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  v16 = re::AssetHandle::loadedAsset<re::TextureAsset>(a3);
  if (v16)
    v49 = (*(_DWORD *)(v16 + 388) - 3) < 2;
  ++*(_DWORD *)(a1 + 400);
  re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v20);
}

void re::ecs2::SerializableMaterialParameterBlock::setTexture(uint64_t a1, StringID *a2, const re::AssetHandle *a3)
{
  _anonymous_namespace_ *v6;
  uint64_t v7;
  re::AssetHandle *v8;
  const char *var1;
  uint64_t v10;
  const char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE v18[24];
  StringID v19;
  _OWORD v20[5];
  _BYTE v21[25];
  char v23;
  char v25;
  int v27;
  int v29;
  int v31;
  int v33;
  int v35;
  int v37;
  int v39;
  int v41;
  int v43;
  int v45;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  __int128 v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  re::AssetHandle::AssetHandle((re::AssetHandle *)v17, a3);
  v6 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, a2);
  if (!v6)
  {
    if ((*(_BYTE *)&a2->var0 & 1) != 0)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v18, (const re::AssetHandle *)v17);
      re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v20, (const re::AssetHandle *)v18);
      v7 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1 + 304, a2, (uint64_t)v20);
      re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v20);
      v8 = (re::AssetHandle *)v18;
      goto LABEL_9;
    }
    var1 = a2->var1;
    *(_QWORD *)&v19.var0 = 0;
    v19.var1 = (char *)&str_110;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v18, (const re::AssetHandle *)v17);
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v20, (const re::AssetHandle *)v18);
    v10 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1 + 304, &v19, (uint64_t)v20);
LABEL_7:
    v7 = v10;
    re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v20);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v18);
    re::StringID::destroyString((re::StringID *)&v19);
    goto LABEL_10;
  }
  v7 = (uint64_t)v6;
  if (*(_BYTE *)v6 != 64)
  {
    v11 = a2->var1;
    *(_QWORD *)&v19.var0 = 0;
    v19.var1 = (char *)&str_110;
    re::AssetHandle::AssetHandle((re::AssetHandle *)v18, (const re::AssetHandle *)v17);
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v20, (const re::AssetHandle *)v18);
    v10 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1 + 304, &v19, (uint64_t)v20, 2);
    goto LABEL_7;
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)v20, (const re::AssetHandle *)v17);
  *(_BYTE *)v7 = 64;
  re::AssetHandle::operator=((uint64_t *)(v7 + 80), (uint64_t *)v20);
  v8 = (re::AssetHandle *)v20;
LABEL_9:
  re::AssetHandle::~AssetHandle(v8);
LABEL_10:
  v20[0] = *(_OWORD *)v7;
  v12 = *(_OWORD *)(v7 + 16);
  v13 = *(_OWORD *)(v7 + 32);
  v14 = *(_OWORD *)(v7 + 64);
  v20[3] = *(_OWORD *)(v7 + 48);
  v20[4] = v14;
  v20[1] = v12;
  v20[2] = v13;
  re::AssetHandle::AssetHandle((re::AssetHandle *)v21, (const re::AssetHandle *)(v7 + 80));
  v21[24] = *(_BYTE *)(v7 + 104);
  if (*(_BYTE *)(v7 + 105))
    v23 = *(_BYTE *)(v7 + 106);
  if (*(_BYTE *)(v7 + 107))
    v25 = *(_BYTE *)(v7 + 108);
  if (*(_BYTE *)(v7 + 112))
    v27 = *(_DWORD *)(v7 + 116);
  if (*(_BYTE *)(v7 + 120))
    v29 = *(_DWORD *)(v7 + 124);
  if (*(_BYTE *)(v7 + 128))
    v31 = *(_DWORD *)(v7 + 132);
  if (*(_BYTE *)(v7 + 136))
    v33 = *(_DWORD *)(v7 + 140);
  if (*(_BYTE *)(v7 + 144))
    v35 = *(_DWORD *)(v7 + 148);
  if (*(_BYTE *)(v7 + 152))
    v37 = *(_DWORD *)(v7 + 156);
  if (*(_BYTE *)(v7 + 160))
    v39 = *(_DWORD *)(v7 + 164);
  if (*(_BYTE *)(v7 + 168))
    v41 = *(_DWORD *)(v7 + 172);
  if (*(_BYTE *)(v7 + 176))
    v43 = *(_DWORD *)(v7 + 180);
  if (*(_BYTE *)(v7 + 184))
    v45 = *(_DWORD *)(v7 + 188);
  if (*(_BYTE *)(v7 + 192))
    v47 = *(_QWORD *)(v7 + 200);
  re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v48, (uint64_t *)(v7 + 208));
  v49 = *(_BYTE *)(v7 + 248);
  v50 = *(_QWORD *)(v7 + 256);
  v15 = *(_BYTE *)(v7 + 280);
  v51 = *(_OWORD *)(v7 + 264);
  v52 = v15;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v17);
  v16 = re::AssetHandle::loadedAsset<re::TextureAsset>(a3);
  if (v16)
    v49 = (*(_DWORD *)(v16 + 388) - 3) < 2;
  ++*(_DWORD *)(a1 + 400);
  re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v20);
}

void re::ecs2::SerializableMaterialParameterBlock::textureValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  int v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t v11;

  v4 = (char *)this + 304;
  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      v6 = a2[1];
      if (v6)
      {
        v7 = a2 + 2;
        do
        {
          v5 = 31 * v5 + v6;
          v8 = *(unsigned __int8 *)v7++;
          v6 = v8;
        }
        while (v8);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)&v10 = 2 * v5;
  *((_QWORD *)&v10 + 1) = a2;
  v9 = (_BYTE *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, &v10);
  re::StringID::destroyString((re::StringID *)&v10);
  if (v9 && *v9 == 64)
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)&v10, (const re::AssetHandle *)(v9 + 80));
    *(_BYTE *)a3 = 1;
    *(_OWORD *)(a3 + 8) = v10;
    v10 = 0uLL;
    *(_QWORD *)(a3 + 24) = v11;
    v11 = 0;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::setBufferData(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7[5];

  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    re::DynamicArray<BOOL>::DynamicArray((uint64_t)v7, a3);
    re::ecs2::SerializableMaterialParameterBlock::setValue<re::DynamicArray<unsigned char>>(a1, a2, 128, v7);
    result = v7[0];
    if (v7[0])
    {
      if (v7[4])
        result = (*(uint64_t (**)(void))(*(_QWORD *)v7[0] + 40))();
    }
    ++*(_DWORD *)(a1 + 400);
  }
  return result;
}

_BYTE *re::ecs2::SerializableMaterialParameterBlock::setValue<re::DynamicArray<unsigned char>>(uint64_t a1, char *a2, int a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  int v11;
  _BYTE *v12;
  _anonymous_namespace_ *v13;
  StringID v15;
  _QWORD v16[38];

  v16[37] = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 304;
  if (a2)
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2[1];
      if (v9)
      {
        v10 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v8 = 31 * v8 + v9;
          v11 = *v10++;
          v9 = v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v16[0] = 2 * v8;
  v16[1] = a2;
  v12 = (_BYTE *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, v16);
  re::StringID::destroyString((re::StringID *)v16);
  if (v12 && *v12 == a3)
  {
    re::ecs2::SerializedMaterialParameter::setValue(v12, a3, a4);
  }
  else
  {
    *(_QWORD *)&v15.var0 = 0;
    v15.var1 = (char *)&str_110;
    re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v16, a3, a4);
    v12 = (_BYTE *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v7, &v15, (uint64_t)v16, 2);
    re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v16);
    re::StringID::destroyString((re::StringID *)&v15);
  }
  return v12;
}

void re::ecs2::SerializableMaterialParameterBlock::setSampler(uint64_t a1, char *a2, char *a3)
{
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  int v16;
  char v17;
  _BYTE *v18;
  _anonymous_namespace_ *v19;
  char v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  StringID v39;
  _BYTE v40[12];
  int v41;
  char v42;
  int v43;
  char v44;
  int v45;
  char v46;
  int v47;
  char v48;
  int v49;
  char v50;
  int v51;
  char v52;
  int v53;
  char v54;
  int v55;
  char v56;
  int v57;
  char v58;
  int v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char v64;
  int v65;
  char v66;
  int v67;
  char v68;
  int v69;
  char v70;
  int v71;
  char v72;
  int v73;
  char v74;
  int v75;
  char v76;
  int v77;
  char v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  char v101;
  _QWORD v102[3];
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  v6 = a3[1];
  if (a3[1])
    v20 = a3[2];
  v7 = a3[3];
  if (a3[3])
    v21 = a3[4];
  v8 = a3[8];
  if (a3[8])
    v22 = *((_DWORD *)a3 + 3);
  v9 = a3[16];
  if (a3[16])
    v23 = *((_DWORD *)a3 + 5);
  v10 = a3[24];
  if (a3[24])
    v24 = *((_DWORD *)a3 + 7);
  v11 = a3[32];
  if (a3[32])
    v25 = *((_DWORD *)a3 + 9);
  v12 = a3[40];
  if (a3[40])
    v26 = *((_DWORD *)a3 + 11);
  v32 = a3[48];
  if (a3[48])
    v27 = *((_DWORD *)a3 + 13);
  v33 = a3[56];
  if (a3[56])
    v28 = *((_DWORD *)a3 + 15);
  v34 = a3[64];
  if (a3[64])
    v29 = *((_DWORD *)a3 + 17);
  v35 = a3[72];
  if (a3[72])
    v4 = *((_DWORD *)a3 + 19);
  v36 = a3[80];
  if (a3[80])
    v3 = *((_DWORD *)a3 + 21);
  v37 = a3[88];
  if (a3[88])
    v30 = *((_QWORD *)a3 + 12);
  if (a2)
  {
    v13 = *a2;
    if (*a2)
    {
      v14 = a2[1];
      if (v14)
      {
        v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v13 = 31 * v13 + v14;
          v16 = *v15++;
          v14 = v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v13 = 0;
  }
  v17 = *a3;
  v62 = 2 * v13;
  v63 = a2;
  v31 = a1 + 304;
  v18 = (_BYTE *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 304, &v62);
  re::StringID::destroyString((re::StringID *)&v62);
  if (v18 && *v18 == 192)
  {
    LOBYTE(v62) = v17;
    BYTE1(v62) = v6;
    if (v6)
      BYTE2(v62) = v20;
    BYTE3(v62) = v7;
    if (v7)
      BYTE4(v62) = v21;
    LOBYTE(v63) = v8;
    if (v8)
      HIDWORD(v63) = v22;
    v64 = v9;
    if (v9)
      v65 = v23;
    v66 = v10;
    if (v10)
      v67 = v24;
    v68 = v11;
    if (v11)
      v69 = v25;
    v70 = v12;
    if (v12)
      v71 = v26;
    v72 = v32;
    if (v32)
      v73 = v27;
    v74 = v33;
    if (v33)
      v75 = v28;
    v76 = v34;
    if (v34)
      v77 = v29;
    v78 = v35;
    if (v35)
      v79 = v4;
    LOBYTE(v80) = v36;
    if (v36)
      HIDWORD(v80) = v3;
    LOBYTE(v81) = v37;
    if (v37)
      v82 = v30;
    *v18 = -64;
    re::OptionalMaterialSamplerData::operator=((uint64_t)(v18 + 104), (uint64_t)&v62);
  }
  else
  {
    *(_QWORD *)&v39.var0 = 0;
    v39.var1 = (char *)&str_110;
    LOBYTE(v62) = 0;
    v81 = 0;
    v82 = 0;
    v80 = 0;
    v83 = 10;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v100 = 0;
    v96 = 0;
    v97 = 0;
    v99 = 0;
    v98 = 0;
    v101 = 0;
    v103 = 0;
    *(_QWORD *)((char *)v102 + 5) = 0;
    v102[2] = 0;
    v102[0] = 0;
    v40[0] = v17;
    v40[1] = v6;
    if (v6)
      v40[2] = v20;
    v40[3] = v7;
    if (v7)
      v40[4] = v21;
    v40[8] = v8;
    if (v8)
      v41 = v22;
    v42 = v9;
    if (v9)
      v43 = v23;
    v44 = v10;
    if (v10)
      v45 = v24;
    v46 = v11;
    if (v11)
      v47 = v25;
    v48 = v12;
    if (v12)
      v49 = v26;
    v50 = v32;
    if (v32)
      v51 = v27;
    v52 = v33;
    if (v33)
      v53 = v28;
    v54 = v34;
    if (v34)
      v55 = v29;
    v56 = v35;
    if (v35)
      v57 = v4;
    v58 = v36;
    if (v36)
      v59 = v3;
    v60 = v37;
    if (v37)
      v61 = v30;
    LOBYTE(v62) = -64;
    re::OptionalMaterialSamplerData::operator=((uint64_t)&v83, (uint64_t)v40);
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v31, &v39, (uint64_t)&v62, 2);
    re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)&v62);
    re::StringID::destroyString((re::StringID *)&v39);
  }
  ++*(_DWORD *)(a1 + 400);
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::valueType(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  char *v2;
  uint64_t v3;
  char v4;
  const char *v5;
  int v6;
  unsigned __int8 *v7;
  _QWORD v9[2];

  v2 = (char *)this + 304;
  if (a2)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = a2 + 2;
        do
        {
          v3 = 31 * v3 + v4;
          v6 = *(unsigned __int8 *)v5++;
          v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    v3 = 0;
  }
  v9[0] = 2 * v3;
  v9[1] = a2;
  v7 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v2, v9);
  re::StringID::destroyString((re::StringID *)v9);
  if (v7)
    return *v7;
  else
    return 0;
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::addPassTechniqueMapping(re::ecs2::SerializableMaterialParameterBlock *this, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v7 = a3;
  v8 = a2;
  v5 = (char *)this + 208;
  if (!re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 208, &v8)|| (result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v5, &v8), !*(_BYTE *)result)|| *(_QWORD *)(result + 8) != a3)
  {
    result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>((uint64_t)v5, (unint64_t *)&v8, &v7);
    ++*((_DWORD *)this + 100);
  }
  return result;
}

BOOL re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 32 * v3 + 8) == v2)
    return 1;
  do
  {
    v3 = *(_DWORD *)(v5 + 32 * v3) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 32 * v3 + 8) != v2);
  return result;
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 32 * v3 + 8) != v2)
  {
    while (1)
    {
      v3 = *(_DWORD *)(v5 + 32 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 32 * v3 + 8) == v2)
        return v5 + 32 * v3 + 16;
    }
    return 0;
  }
  return v5 + 32 * v3 + 16;
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace<unsigned long &>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<unsigned long &>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 32 * v8 + 8) != v6)
  {
    v8 = *(_DWORD *)(v9 + 32 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 32 * v8;
  v11 = *a3;
  *(_BYTE *)(v10 + 16) = 1;
  *(_QWORD *)(v10 + 24) = v11;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 32 * v8;
  return v12 + 16;
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::markPassTechniqueMappingRemoved(re::ecs2::SerializableMaterialParameterBlock *this, uint64_t a2)
{
  char *v3;
  uint64_t result;
  unsigned __int8 v5[16];
  uint64_t v6;

  v6 = a2;
  v3 = (char *)this + 208;
  result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 208, &v6);
  if ((_DWORD)result)
  {
    result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v3, &v6);
    if (*(_BYTE *)result)
    {
      v5[0] = 0;
      result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace((uint64_t)v3, (unint64_t *)&v6, v5);
      ++*((_DWORD *)this + 100);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(uint64_t a1, unint64_t *a2, unsigned __int8 *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_21;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_21:
    v18 = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 16) + 32 * v18;
    return v19 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 32 * v8 + 8) != v6)
  {
    v8 = *(_DWORD *)(v9 + 32 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_21;
  }
  v10 = v9 + 32 * v8;
  v13 = *(unsigned __int8 *)(v10 + 16);
  v11 = (_BYTE *)(v10 + 16);
  v12 = v13;
  v14 = *a3;
  if (v13)
    v15 = 0;
  else
    v15 = v14 == 0;
  if (!v15)
  {
    if (v12)
      v16 = v14 == 0;
    else
      v16 = 0;
    if (v16)
    {
      *v11 = 0;
    }
    else
    {
      if (v12)
        v17 = 1;
      else
        v17 = v14 == 0;
      if (v17)
      {
        v21 = *((_QWORD *)a3 + 1);
        v20 = v9 + 32 * v8;
      }
      else
      {
        *v11 = 1;
        v20 = v9 + 32 * v8;
        v21 = *((_QWORD *)a3 + 1);
      }
      *(_QWORD *)(v20 + 24) = v21;
    }
  }
  ++*(_DWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 16) + 32 * v8;
  return v19 + 16;
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::tryGetPassTechniqueMapping@<X0>(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t result;
  uint64_t v6;

  v6 = a2;
  v4 = (char *)this + 208;
  result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey((uint64_t)this + 208, &v6);
  if ((_DWORD)result
    && (result = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)v4, &v6)) != 0&& *(_BYTE *)result)
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
  return result;
}

void re::ecs2::SerializableMaterialParameterBlock::samplerValue(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  char *v5;
  uint64_t v6;
  char v7;
  const char *v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned __int8 v34;
  int v35;
  _QWORD v36[2];

  v5 = (char *)this + 304;
  if (a2)
  {
    v6 = *a2;
    if (*a2)
    {
      v7 = a2[1];
      if (v7)
      {
        v8 = a2 + 2;
        do
        {
          v6 = 31 * v6 + v7;
          v9 = *(unsigned __int8 *)v8++;
          v7 = v9;
        }
        while (v9);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  v36[0] = 2 * v6;
  v36[1] = a2;
  v10 = (unsigned __int8 *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v5, v36);
  re::StringID::destroyString((re::StringID *)v36);
  if (v10 && *v10 == 192)
  {
    v22 = v10[105];
    if (v10[105])
      v15 = v10[106];
    v23 = v10[107];
    if (v10[107])
      v16 = v10[108];
    v24 = v10[112];
    if (v10[112])
      v17 = *((_DWORD *)v10 + 29);
    v25 = v10[120];
    if (v10[120])
      v18 = *((_DWORD *)v10 + 31);
    v26 = v10[128];
    if (v10[128])
      v19 = *((_DWORD *)v10 + 33);
    v27 = v10[136];
    if (v10[136])
      v11 = *((_DWORD *)v10 + 35);
    v28 = v10[144];
    if (v10[144])
      v12 = *((_DWORD *)v10 + 37);
    v29 = v10[152];
    if (v10[152])
      v13 = *((_DWORD *)v10 + 39);
    v30 = v10[160];
    if (v10[160])
      v14 = *((_DWORD *)v10 + 41);
    v31 = v10[168];
    if (v10[168])
      v3 = *((_DWORD *)v10 + 43);
    v32 = v10[176];
    if (v10[176])
      v20 = *((_DWORD *)v10 + 45);
    v33 = v10[184];
    if (v10[184])
      v21 = *((_DWORD *)v10 + 47);
    v34 = v10[104];
    v35 = v10[192];
    if (v10[192])
      v10 = (unsigned __int8 *)*((_QWORD *)v10 + 25);
    *(_BYTE *)a3 = 1;
    *(_BYTE *)(a3 + 8) = v34;
    *(_BYTE *)(a3 + 9) = v22;
    if (v22)
      *(_BYTE *)(a3 + 10) = v15;
    *(_BYTE *)(a3 + 11) = v23;
    if (v23)
      *(_BYTE *)(a3 + 12) = v16;
    *(_BYTE *)(a3 + 16) = v24;
    if (v24)
      *(_DWORD *)(a3 + 20) = v17;
    *(_BYTE *)(a3 + 24) = v25;
    if (v25)
      *(_DWORD *)(a3 + 28) = v18;
    *(_BYTE *)(a3 + 32) = v26;
    if (v26)
      *(_DWORD *)(a3 + 36) = v19;
    *(_BYTE *)(a3 + 40) = v27;
    if (v27)
      *(_DWORD *)(a3 + 44) = v11;
    *(_BYTE *)(a3 + 48) = v28;
    if (v28)
      *(_DWORD *)(a3 + 52) = v12;
    *(_BYTE *)(a3 + 56) = v29;
    if (v29)
      *(_DWORD *)(a3 + 60) = v13;
    *(_BYTE *)(a3 + 64) = v30;
    if (v30)
      *(_DWORD *)(a3 + 68) = v14;
    *(_BYTE *)(a3 + 72) = v31;
    if (v31)
      *(_DWORD *)(a3 + 76) = v3;
    *(_BYTE *)(a3 + 80) = v32;
    if (v32)
      *(_DWORD *)(a3 + 84) = v20;
    *(_BYTE *)(a3 + 88) = v33;
    if (v33)
      *(_DWORD *)(a3 + 92) = v21;
    *(_BYTE *)(a3 + 96) = v35;
    if (v35)
      *(_QWORD *)(a3 + 104) = v10;
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::bindTextureToSampler(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2, const char *a3)
{
  _anonymous_namespace_ *v6;
  StringID v7;
  StringID v8;

  *(_QWORD *)&v8.var0 = 0;
  v8.var1 = (char *)&str_110;
  *(_QWORD *)&v7.var0 = 0;
  v7.var1 = (char *)&str_110;
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::StringID&>((uint64_t)this + 16, &v8, 2, &v7);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::ConstStringID const&>((uint64_t)this + 160, &v7, 2, re::kDefaultSamplerArrayNameID);
  re::StringID::destroyString((re::StringID *)&v7);
  re::StringID::destroyString((re::StringID *)&v8);
}

void re::ecs2::SerializableMaterialParameterBlock::setUVIndexForTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2, int a3)
{
  char *v5;
  StringID v6;
  int v7;

  v7 = a3;
  v5 = (char *)this + 64;
  *(_QWORD *)&v6.var0 = 0;
  v6.var1 = (char *)&str_110;
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)v5, &v6, &v7);
  re::StringID::destroyString((re::StringID *)&v6);
  ++*((_DWORD *)this + 100);
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::uvIndexForTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  char *v3;
  unsigned int *v4;
  _QWORD v6[2];

  v3 = (char *)this + 64;
  v6[0] = 0;
  v6[1] = &str_110;
  v4 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  if (v4)
    return *v4;
  else
    return 0;
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::tryUVIndexForTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  char *v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = (char *)this + 64;
  v6[0] = 0;
  v6[1] = &str_110;
  v4 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void re::ecs2::SerializableMaterialParameterBlock::clearUVIndexForTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  char *v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  void *v8;

  v4 = (char *)this + 64;
  v7 = 0;
  v8 = &str_110;
  v5 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, &v7);
  re::StringID::destroyString((re::StringID *)&v7);
  if (v5)
  {
    v7 = 0;
    v8 = &str_110;
    re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4, &v7);
    re::StringID::destroyString((re::StringID *)&v7);
    ++*((_DWORD *)this + 100);
  }
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::numberOfTexturesWithNonZeroUVIndex(re::ecs2::SerializableMaterialParameterBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v2 = *((unsigned int *)this + 24);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)*((_QWORD *)this + 10);
    while (1)
    {
      v5 = *v4;
      v4 += 8;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 24);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 == (_DWORD)v3)
    return 0;
  LODWORD(result) = 0;
  v7 = v3;
  v8 = *((_QWORD *)this + 10);
  do
  {
    if (*(_DWORD *)(v8 + 32 * v7 + 24))
      result = (result + 1);
    else
      result = result;
    if (v2 <= (int)v3 + 1)
      v9 = v3 + 1;
    else
      v9 = v2;
    v10 = v3;
    while (1)
    {
      v7 = (v10 + 1);
      if (v9 - 1 == v10)
        break;
      ++v10;
      LODWORD(v3) = v7;
      if ((*(_DWORD *)(v8 + 32 * v7) & 0x80000000) != 0)
        goto LABEL_21;
    }
    LODWORD(v3) = v9;
LABEL_21:
    ;
  }
  while ((_DWORD)v2 != (_DWORD)v3);
  return result;
}

void re::ecs2::SerializableMaterialParameterBlock::setSwizzleForTexture(_anonymous_namespace_ *a1, const char *a2, int a3)
{
  uint64_t v5;
  StringID v6;
  int v7;

  v7 = a3;
  v5 = (uint64_t)a1 + 112;
  *(_QWORD *)&v6.var0 = 0;
  v6.var1 = (char *)&str_110;
  re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace<re::mtl::TextureSwizzleChannels&>(v5, &v6, &v7);
  re::StringID::destroyString((re::StringID *)&v6);
  ++*((_DWORD *)a1 + 100);
}

uint64_t re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace<re::mtl::TextureSwizzleChannels&>(uint64_t a1, StringID *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::mtl::TextureSwizzleChannels&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 32 * v12;
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_BYTE *)(v11 + 24) = 1;
  *(_DWORD *)(v11 + 25) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + 32 * v9;
  return v13 + 24;
}

void re::ecs2::SerializableMaterialParameterBlock::swizzleForTexture(re::ecs2::SerializableMaterialParameterBlock *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  uint64_t v6;
  _QWORD v7[2];

  v5 = (char *)this + 112;
  v7[0] = 0;
  v7[1] = &str_110;
  v6 = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v5, v7);
  re::StringID::destroyString((re::StringID *)v7);
  if (v6 && *(_BYTE *)v6)
  {
    *(_BYTE *)a3 = 1;
    *(_DWORD *)(a3 + 1) = *(_DWORD *)(v6 + 1);
  }
  else
  {
    *(_BYTE *)a3 = 0;
  }
}

void re::ecs2::SerializableMaterialParameterBlock::clearSwizzleForTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  char *v4;
  _BYTE *v5;
  _anonymous_namespace_ *v6;
  unsigned __int8 v7[5];
  StringID v8;

  v4 = (char *)this + 112;
  *(_QWORD *)&v8.var0 = 0;
  v8.var1 = (char *)&str_110;
  v5 = (_BYTE *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v4, &v8);
  re::StringID::destroyString((re::StringID *)&v8);
  if (v5)
  {
    if (*v5)
    {
      *(_QWORD *)&v8.var0 = 0;
      v8.var1 = (char *)&str_110;
      v7[0] = 0;
      re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add((uint64_t)v4, &v8, v7, 2);
    }
    else
    {
      *(_QWORD *)&v8.var0 = 0;
      v8.var1 = (char *)&str_110;
      re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4, &v8);
    }
    re::StringID::destroyString((re::StringID *)&v8);
    ++*((_DWORD *)this + 100);
  }
}

void re::ecs2::SerializableMaterialParameterBlock::unbindTextureFromSamplers(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  char *v3;
  _QWORD v4[2];

  v3 = (char *)this + 16;
  v4[0] = 0;
  v4[1] = &str_110;
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v3, v4);
  re::StringID::destroyString((re::StringID *)v4);
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (!re::StringID::operator==((_QWORD *)(v9 + 40 * v7 + 8), a2))
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 40 * v7);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::StringID::operator==((_QWORD *)(v9 + 40 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 40 * v10) = *(_DWORD *)(v9 + 40 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                             + 40 * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 40 * v7) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v7));
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v7) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

uint64_t re::ecs2::SerializableMaterialParameterBlock::tryGetSamplerNameBoundToTexture(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = &str_110;
  v4 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 16, v7);
  if (v4)
    v5 = *(_QWORD *)(v4 + 8);
  else
    v5 = 0;
  re::StringID::destroyString((re::StringID *)v7);
  return v5;
}

void re::ecs2::SerializableMaterialParameterBlock::setParameterBinding(_anonymous_namespace_ *a1, const char *a2, int a3, const char *a4, const char *a5)
{
  uint64_t v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  int v12;
  _QWORD v13[2];
  _QWORD v14[2];
  StringID v15;

  v9 = (uint64_t)a1 + 256;
  *(_QWORD *)&v15.var0 = 0;
  v15.var1 = (char *)&str_110;
  v12 = a3;
  v13[0] = 0;
  v13[1] = &str_110;
  v14[0] = 0;
  v14[1] = &str_110;
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::ecs2::SerializableParameterBinding>(v9, &v15, 2, (uint64_t)&v12);
  re::StringID::destroyString((re::StringID *)v14);
  re::StringID::destroyString((re::StringID *)v13);
  re::StringID::destroyString((re::StringID *)&v15);
}

unsigned __int8 *re::ecs2::SerializableMaterialParameterBlock::parameterBinding(re::ecs2::SerializableMaterialParameterBlock *this, const char *a2)
{
  char *v2;
  uint64_t v3;
  char v4;
  const char *v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  _QWORD v11[2];

  v2 = (char *)this + 256;
  if (a2)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = a2 + 2;
        do
        {
          v3 = 31 * v3 + v4;
          v6 = *(unsigned __int8 *)v5++;
          v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    v3 = 0;
  }
  v11[0] = 2 * v3;
  v11[1] = a2;
  v7 = (unsigned __int8 *)re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v2, v11);
  re::StringID::destroyString((re::StringID *)v11);
  if (!v7)
    return 0;
  v9 = *v7;
  v8 = v7 + 8;
  if (v9)
    return v8;
  else
    return 0;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 72 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 72 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 72 * v4 + 24;
}

void re::ecs2::SerializableMaterialParameterBlock::markParameterBindingRemoved(re::ecs2::SerializableMaterialParameterBlock *this, char *a2)
{
  uint64_t v3;
  char v4;
  const char *v5;
  int v6;
  _BYTE *v7;
  unsigned __int8 v8[48];
  StringID v9;

  if (a2)
  {
    v3 = *a2;
    if (*a2)
    {
      v4 = a2[1];
      if (v4)
      {
        v5 = a2 + 2;
        do
        {
          v3 = 31 * v3 + v4;
          v6 = *(unsigned __int8 *)v5++;
          v4 = v6;
        }
        while (v6);
      }
    }
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)&v9.var0 = 2 * v3;
  v9.var1 = a2;
  v7 = (_BYTE *)re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 256, &v9);
  if (v7 && *v7)
  {
    v8[0] = 0;
    re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace((uint64_t)this + 256, &v9, v8);
    re::Optional<re::ecs2::SerializableParameterBinding>::~Optional(v8);
    ++*((_DWORD *)this + 100);
  }
  re::StringID::destroyString((re::StringID *)&v9);
}

uint64_t re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, unsigned __int8 *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 72 * v11;
    return v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 72 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 72 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::Optional<re::ecs2::SerializableParameterBinding>::operator=(v10 + 72 * v9 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 72 * v9;
  return v12 + 24;
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 320 * v11;
    return v12 + 32;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 320 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 320 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 320 * v9;
  return v12 + 32;
}

BOOL re::ecs2::SerializableMaterialParameterBlock::removeParameter(re::ecs2::SerializableMaterialParameterBlock *this, const re::StringID *a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)this + 304;
  v5 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)this + 304, a2);
  if (v5)
  {
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove((uint64_t)v4, a2);
    ++*((_DWORD *)this + 100);
  }
  return v5 != 0;
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_QWORD *)a1)
    return 0;
  v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (!re::StringID::operator==((_QWORD *)(v9 + 320 * v7 + 8), a2))
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 320 * v7);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::StringID::operator==((_QWORD *)(v9 + 320 * v7 + 8), a2))
      {
        *(_DWORD *)(v9 + 320 * v10) = *(_DWORD *)(v9 + 320 * v10) & 0x80000000 | *(_DWORD *)(v9
                                                                                               + 320
                                                                                               * v7) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 320 * v7) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + 320 * v7));
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 320 * v7) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 320 * v7) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

_anonymous_namespace_ *re::ecs2::SerializableMaterialParameterBlock::populateMaterialParameterDataInMaterialFileFromBlock(_anonymous_namespace_ *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  const char *v14;
  uint64_t (*v15)(void);
  unsigned int v16;
  unsigned int v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  uint64_t v20;
  char *v21;
  const char **v22;
  char *v23;
  uint64_t v24;
  char v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  size_t v32;
  NSObject *v33;
  _anonymous_namespace_ *v34;
  int v35;
  const char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _anonymous_namespace_ *v58;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  unsigned int v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  unsigned __int8 v70;
  int v71;
  char v72;
  __int128 buf;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int *)(a2 + 336);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *(_DWORD **)(a2 + 320);
    while ((*v5 & 0x80000000) == 0)
    {
      v5 += 80;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a2 + 336);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v6 = v4;
    v7 = (uint64_t)result + 56;
    v57 = (uint64_t)result + 248;
    v55 = a2 + 64;
    v56 = a2 + 16;
    v59 = (_QWORD *)((char *)result + 200);
    v8 = *(_QWORD *)(a2 + 320);
    v58 = result;
    while (1)
    {
      v9 = v8 + 320 * v6;
      v12 = *(unsigned __int8 *)(v9 + 32);
      v11 = (unsigned __int8 *)(v9 + 32);
      v10 = v12;
      v13 = (v12 - 1);
      if (v13 <= 0x3F)
      {
        if (((1 << v13) & 0x38003801803FFLL) != 0)
        {
          v14 = *(const char **)(v8 + 320 * v6 + 16);
          re::ecs2::SerializedMaterialParameter::toString((uint64_t)&buf, v11);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(v7, (re::DynamicString *)&v62, (re::DynamicString *)&buf);
          if ((_QWORD)buf && (BYTE8(buf) & 1) != 0)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)buf + 40))(buf, v74);
          result = (_anonymous_namespace_ *)v62;
          if ((_QWORD)v62 && (BYTE8(v62) & 1) != 0)
            goto LABEL_16;
          goto LABEL_18;
        }
        if (v13 == 63)
          break;
      }
      if (v10 == 192)
      {
        v28 = v8 + 320 * v6;
        v29 = *(const char **)(v28 + 16);
        LOWORD(v62) = *(_WORD *)(v28 + 136);
        if (BYTE1(v62))
          BYTE2(v62) = *(_BYTE *)(v8 + 320 * v6 + 138);
        BYTE3(v62) = *(_BYTE *)(v8 + 320 * v6 + 139);
        if (BYTE3(v62))
          BYTE4(v62) = *(_BYTE *)(v8 + 320 * v6 + 140);
        BYTE8(v62) = *(_BYTE *)(v8 + 320 * v6 + 144);
        if (BYTE8(v62))
          HIDWORD(v62) = *(_DWORD *)(v8 + 320 * v6 + 148);
        LOBYTE(v63) = *(_BYTE *)(v8 + 320 * v6 + 152);
        if ((_BYTE)v63)
          DWORD1(v63) = *(_DWORD *)(v8 + 320 * v6 + 156);
        BYTE8(v63) = *(_BYTE *)(v8 + 320 * v6 + 160);
        if (BYTE8(v63))
          HIDWORD(v63) = *(_DWORD *)(v8 + 320 * v6 + 164);
        LOBYTE(v64) = *(_BYTE *)(v8 + 320 * v6 + 168);
        if ((_BYTE)v64)
          v65 = *(_DWORD *)(v8 + 320 * v6 + 172);
        LOBYTE(v66) = *(_BYTE *)(v8 + 320 * v6 + 176);
        if ((_BYTE)v66)
          DWORD1(v66) = *(_DWORD *)(v8 + 320 * v6 + 180);
        BYTE8(v66) = *(_BYTE *)(v8 + 320 * v6 + 184);
        if (BYTE8(v66))
          HIDWORD(v66) = *(_DWORD *)(v8 + 320 * v6 + 188);
        LOBYTE(v67) = *(_BYTE *)(v8 + 320 * v6 + 192);
        if ((_BYTE)v67)
          DWORD1(v67) = *(_DWORD *)(v8 + 320 * v6 + 196);
        BYTE8(v67) = *(_BYTE *)(v8 + 320 * v6 + 200);
        if (BYTE8(v67))
          HIDWORD(v67) = *(_DWORD *)(v8 + 320 * v6 + 204);
        LOBYTE(v68) = *(_BYTE *)(v8 + 320 * v6 + 208);
        if ((_BYTE)v68)
          DWORD1(v68) = *(_DWORD *)(v8 + 320 * v6 + 212);
        BYTE8(v68) = *(_BYTE *)(v8 + 320 * v6 + 216);
        if (BYTE8(v68))
          HIDWORD(v68) = *(_DWORD *)(v8 + 320 * v6 + 220);
        LOBYTE(v69) = *(_BYTE *)(v8 + 320 * v6 + 224);
        if ((_BYTE)v69)
          *((_QWORD *)&v69 + 1) = *(_QWORD *)(v8 + 320 * v6 + 232);
        re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(v57, (re::DynamicString *)&buf, (uint64_t)&v62);
        result = (_anonymous_namespace_ *)buf;
        if ((_QWORD)buf)
        {
          if ((BYTE8(buf) & 1) != 0)
          {
LABEL_16:
            v15 = *(uint64_t (**)(void))(*(_QWORD *)result + 40);
LABEL_17:
            result = (_anonymous_namespace_ *)v15();
          }
        }
      }
LABEL_18:
      v16 = *(_DWORD *)(a2 + 336);
      v8 = *(_QWORD *)(a2 + 320);
      if (v16 <= (int)v4 + 1)
        v16 = v4 + 1;
      while (1)
      {
        v6 = (v4 + 1);
        if (v16 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v17 = v6;
        if ((*(_DWORD *)(v8 + 320 * v6) & 0x80000000) != 0)
          goto LABEL_24;
      }
      v17 = v16;
LABEL_24:
      LODWORD(v4) = v17;
      if ((_DWORD)v3 == v17)
        return result;
    }
    v62 = 0u;
    v63 = 0u;
    v18 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v62, 0);
    v64 = 0;
    v66 = 0u;
    v67 = 0u;
    v19 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v66, 0);
    v68 = 0u;
    v69 = 0u;
    re::DynamicString::setCapacity(&v68, 0);
    v70 = 0;
    re::ecs2::SerializedMaterialParameter::toString((uint64_t)&v60, v11);
    re::MaterialTextureParam::MaterialTextureParam((re::MaterialTextureParam *)&buf, (const re::DynamicString *)&v60);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>((uint64_t)&v62, (uint64_t)&buf);
    if (v75 != -1)
      ((void (*)(char *, __int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix
                                                + v75))(&v72, &buf);
    v75 = -1;
    if (v60 && (v61 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v60 + 40))();
    v20 = v8 + 320 * v6;
    v23 = *(char **)(v20 + 16);
    v22 = (const char **)(v20 + 16);
    v21 = v23;
    if (v23)
    {
      v24 = *v21;
      if (*v21)
      {
        v25 = v21[1];
        if (v25)
        {
          v26 = (unsigned __int8 *)(v21 + 2);
          do
          {
            v24 = 31 * v24 + v25;
            v27 = *v26++;
            v25 = v27;
          }
          while (v27);
        }
      }
    }
    else
    {
      v24 = 0;
    }
    v60 = 2 * v24;
    v61 = v21;
    v30 = re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v56, &v60);
    if (v30)
    {
      v31 = *(const char **)(v30 + 8);
      v32 = strlen(v31);
      *(_QWORD *)&buf = v31;
      *((_QWORD *)&buf + 1) = v32;
      re::DynamicString::operator=((re::DynamicString *)&v66, (uint64_t)&buf);
    }
    else
    {
      v33 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v61;
        _os_log_impl(&dword_224FE9000, v33, OS_LOG_TYPE_DEFAULT, "Texture block for texture %s is missing sampler binding information.", (uint8_t *)&buf, 0xCu);
      }
    }
    v34 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v55, &v60);
    if (v34)
    {
      v35 = *(_DWORD *)v34;
      if (!v70)
        v70 = 1;
      v71 = v35;
    }
    v36 = *v22;
    v37 = re::Hash<re::DynamicString>::operator()((uint64_t)&v72, (uint64_t)&buf);
    v38 = v37;
    if (*v59)
    {
      v39 = v37 % *((unsigned int *)v58 + 56);
      v40 = *(unsigned int *)(*((_QWORD *)v58 + 26) + 4 * v39);
      if ((_DWORD)v40 != 0x7FFFFFFF)
      {
        v41 = *((_QWORD *)v58 + 27);
        while (!re::DynamicString::operator==(v41 + 160 * v40 + 16, (uint64_t)&buf))
        {
          v40 = *(_DWORD *)(v41 + 160 * v40 + 8) & 0x7FFFFFFF;
          if (v40 == 0x7FFFFFFF)
            goto LABEL_84;
        }
        v42 = v41 + 160 * v40;
        v45 = *(_QWORD *)(v42 + 120);
        v44 = (_OWORD *)(v42 + 120);
        v43 = v45;
        if (v45)
        {
          if ((*(_BYTE *)(v41 + 160 * v40 + 128) & 1) != 0)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v43 + 40))(v43, *(_QWORD *)(v41 + 160 * v40 + 136));
          *v44 = 0u;
          v44[1] = 0u;
        }
        v46 = v41 + 160 * v40;
        v49 = *(_QWORD *)(v46 + 88);
        v48 = (_OWORD *)(v46 + 88);
        v47 = v49;
        if (v49)
        {
          if ((*(_BYTE *)(v41 + 160 * v40 + 96) & 1) != 0)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 40))(v47, *(_QWORD *)(v41 + 160 * v40 + 104));
          *v48 = 0u;
          v48[1] = 0u;
        }
        v50 = (char *)v44 - 72;
        v51 = *((unsigned int *)v50 + 8);
        if ((_DWORD)v51 != -1)
          ((void (*)(char *, char *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix
                                                + v51))(&v72, v50);
        *((_DWORD *)v50 + 8) = -1;
        v52 = *((_QWORD *)v58 + 27);
        v53 = v52 + 160 * v40;
        *(_BYTE *)(v53 + 48) = 0;
        v53 += 48;
        *(_DWORD *)(v53 + 32) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1> const&>(v53, (unsigned int *)&v62);
        re::DynamicString::DynamicString((re::DynamicString *)(v53 + 40), (const re::DynamicString *)&v66);
        re::DynamicString::DynamicString((re::DynamicString *)(v53 + 72), (const re::DynamicString *)&v68);
        v54 = v70;
        *(_BYTE *)(v53 + 104) = v70;
        if (v54)
          *(_DWORD *)(v52 + 160 * v40 + 156) = v71;
LABEL_85:
        ++*((_DWORD *)v58 + 60);
        if ((_QWORD)buf && (BYTE8(buf) & 1) != 0)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)buf + 40))(buf, v74);
        re::StringID::destroyString((re::StringID *)&v60);
        if ((_QWORD)v68)
        {
          if ((BYTE8(v68) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v68 + 40))();
          v68 = 0u;
          v69 = 0u;
        }
        result = (_anonymous_namespace_ *)v66;
        if ((_QWORD)v66)
        {
          if ((BYTE8(v66) & 1) != 0)
            result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v66 + 40))();
          v66 = 0u;
          v67 = 0u;
        }
        if (v64 != -1)
        {
          v15 = *(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix
                + v64);
          goto LABEL_17;
        }
        goto LABEL_18;
      }
    }
    else
    {
      LODWORD(v39) = 0;
    }
LABEL_84:
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy((uint64_t)v59, v39, v38, (re::DynamicString *)&buf, (uint64_t)&v62);
    goto LABEL_85;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 152 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 152 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 152 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::OptionalMaterialSamplerData::operator=(v10 + 152 * v9 + 48, a3);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 152 * v9;
  return v12 + 48;
}

_anonymous_namespace_ *re::ecs2::MaterialParameterBlockArrayComponent::createFlattenedMaterialFileFromBlock@<X0>(_anonymous_namespace_ *a1@<X0>, unint64_t a2@<X1>, re::MaterialAsset *a3@<X2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_ *result;
  _anonymous_namespace_ *v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)a4, 0);
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 76) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_QWORD *)(a4 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_DWORD *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_DWORD *)(a4 + 184) = 0;
  *(_QWORD *)(a4 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_DWORD *)(a4 + 232) = 0;
  *(_QWORD *)(a4 + 236) = 0x7FFFFFFFLL;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_DWORD *)(a4 + 280) = 0;
  *(_QWORD *)(a4 + 284) = 0x7FFFFFFFLL;
  *(_OWORD *)(a4 + 296) = 0u;
  *(_OWORD *)(a4 + 312) = 0u;
  *(_DWORD *)(a4 + 328) = 0;
  *(_QWORD *)(a4 + 332) = 0x7FFFFFFFLL;
  *(_BYTE *)(a4 + 344) = 0;
  *(_BYTE *)(a4 + 346) = 0;
  *(_BYTE *)(a4 + 348) = 0;
  *(_BYTE *)(a4 + 350) = 0;
  *(_BYTE *)(a4 + 352) = 0;
  *(_BYTE *)(a4 + 354) = 0;
  *(_BYTE *)(a4 + 356) = 0;
  *(_BYTE *)(a4 + 358) = 0;
  *(_BYTE *)(a4 + 360) = 0;
  *(_QWORD *)(a4 + 400) = 0;
  *(_QWORD *)(a4 + 376) = 0;
  *(_QWORD *)(a4 + 384) = 0;
  *(_DWORD *)(a4 + 392) = 0;
  *(_QWORD *)(a4 + 368) = 0;
  if (*((_QWORD *)a3 + 1))
  {
    result = (_anonymous_namespace_ *)re::AssetHandle::asset<re::MaterialAsset>(a3);
    if (result)
    {
      v9 = result;
      re::DynamicString::operator=((re::DynamicString *)a4, (_anonymous_namespace_ *)((char *)result + 8));
      re::AssetHandle::operator=((uint64_t *)(a4 + 32), (uint64_t *)v9 + 5);
      re::MaterialParameterData::operator=(a4 + 56, (uint64_t)v9 + 64);
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a4 + 296, (uint64_t)v9 + 304);
      re::MaterialRenderFlags::operator=((_BYTE *)(a4 + 344), (unsigned __int8 *)v9 + 352);
      result = (_anonymous_namespace_ *)re::DynamicArray<re::FunctionLink>::operator=(a4 + 368, (uint64_t *)v9 + 47, v10);
    }
  }
  if (*((_QWORD *)a1 + 6) > a2)
  {
    v11 = *((_QWORD *)a1 + 8);
    v12 = *(_QWORD *)(v11 + 24 * a2);
    if (!v12)
      v12 = *(_QWORD *)(v11 + 24 * a2 + 8);
    return re::ecs2::SerializableMaterialParameterBlock::populateMaterialParameterDataInMaterialFileFromBlock((_anonymous_namespace_ *)a4, v12);
  }
  return result;
}

re::StringID *re::internal::defaultConstruct<re::ecs2::SerializableParameterBinding>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  re::StringID *v3;

  *a3 = 0;
  v3 = (re::StringID *)(a3 + 6);
  re::StringID::invalid((re::StringID *)(a3 + 2));
  return re::StringID::invalid(v3);
}

void re::internal::defaultDestruct<re::ecs2::SerializableParameterBinding>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 24));
  re::StringID::destroyString((re::StringID *)(a3 + 8));
}

re::StringID *re::internal::defaultConstructV2<re::ecs2::SerializableParameterBinding>(_DWORD *a1)
{
  re::StringID *v1;

  *a1 = 0;
  v1 = (re::StringID *)(a1 + 6);
  re::StringID::invalid((re::StringID *)(a1 + 2));
  return re::StringID::invalid(v1);
}

void re::internal::defaultDestructV2<re::ecs2::SerializableParameterBinding>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 24));
  re::StringID::destroyString((re::StringID *)(a1 + 8));
}

void re::IntrospectionInfo<re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  const re::IntrospectionBase *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_2541131E0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541131E0))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254113580);
    qword_254113580 = (uint64_t)&off_24ED6AF30;
    __cxa_guard_release(&qword_2541131E0);
  }
  if ((byte_254113134 & 1) == 0)
  {
    v3 = re::IntrospectionInfo<re::StringID>::get(1, a2);
    v5 = re::IntrospectionInfo<re::StringID>::get(1, v4);
    if ((byte_254113134 & 1) == 0)
    {
      v6 = (uint64_t)v5;
      byte_254113134 = 1;
      v7 = v5[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113580, 0);
      qword_254113590 = 0x3000000007;
      dword_254113598 = v7;
      word_25411359C = 0;
      *(_QWORD *)&xmmword_2541135A0 = 0;
      *((_QWORD *)&xmmword_2541135A0 + 1) = 0xFFFFFFFFLL;
      qword_2541135B0 = (uint64_t)v3;
      qword_2541135B8 = 0;
      qword_2541135C0 = v6;
      qword_2541135C8 = 0;
      qword_254113580 = (uint64_t)&off_24ED6AF30;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_254113580, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = v3[2];
      v21 = *(_OWORD *)(v6 + 32);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_2541135A0 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

uint64_t *re::ecs2::allocInfo_SerializableMaterialParameterBlock(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254113188);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254113188))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113760, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254113770 = 0;
    qword_254113780 = 0;
    qword_254113788 = 0xFFFFFFFFLL;
    qword_254113760 = (uint64_t)&off_24ED7DAA8;
    qword_254113790 = (uint64_t)"SerializableMaterialParameterBlock";
    dword_254113798 = 0;
    xmmword_2541137A0 = 0u;
    xmmword_2541137B0 = 0u;
    xmmword_2541137C0 = 0u;
    qword_2541137D0 = 0;
    __cxa_guard_release(&qword_254113188);
  }
  return &qword_254113760;
}

void re::ecs2::initInfo_SerializableMaterialParameterBlock(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  const re::IntrospectionBase *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  _OWORD *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  const re::IntrospectionBase *v12;
  unsigned __int8 v13;
  int v14;
  re::IntrospectionRegistry *v15;
  const re::IntrospectionBase *v16;
  const char *v17;
  StringID v18;
  uint64_t *v19;
  uint64_t v20;
  char **v21;
  char *v22;
  void *v23;
  uint64_t v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  const re::IntrospectionBase *v32;
  uint64_t *v33;
  unsigned __int8 v34;
  const re::IntrospectionBase *v35;
  _OWORD *v36;
  unsigned __int8 v37;
  _DWORD *v38;
  uint64_t v39;
  int v40;
  re::IntrospectionRegistry *v41;
  const re::IntrospectionBase *v42;
  const char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  re::IntrospectionRegistry *v48;
  const re::IntrospectionBase *v49;
  const char *v50;
  StringID v51;
  uint64_t *v52;
  uint64_t v53;
  char **v54;
  char *v55;
  void *v56;
  uint64_t v57;
  _anonymous_namespace_ *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  const re::IntrospectionBase *v62;
  uint64_t v63;
  uint64_t *v64;
  const re::IntrospectionBase *v65;
  uint64_t v66;
  uint64_t *v67;
  const re::IntrospectionBase *v68;
  uint64_t *v69;
  uint64_t v70;
  const re::IntrospectionBase *v71;
  uint64_t *v72;
  unsigned __int8 v73;
  _OWORD *v74;
  unsigned __int8 v75;
  uint64_t *v76;
  unsigned __int8 v77;
  const re::IntrospectionBase *v78;
  unsigned __int8 v79;
  int v80;
  re::IntrospectionRegistry *v81;
  const re::IntrospectionBase *v82;
  const char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  re::IntrospectionRegistry *v88;
  const re::IntrospectionBase *v89;
  const char *v90;
  StringID v91;
  uint64_t *v92;
  uint64_t v93;
  char **v94;
  char *v95;
  void *v96;
  uint64_t v97;
  _anonymous_namespace_ *v98;
  uint64_t v99;
  uint64_t v100;
  const re::IntrospectionBase *v101;
  uint64_t *v102;
  unsigned __int8 v103;
  _OWORD *v104;
  unsigned __int8 v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  re::IntrospectionRegistry *v109;
  const re::IntrospectionBase *v110;
  const char *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  re::IntrospectionRegistry *v116;
  const re::IntrospectionBase *v117;
  const char *v118;
  StringID v119;
  uint64_t *v120;
  uint64_t v121;
  char **v122;
  char *v123;
  void *v124;
  uint64_t v125;
  _anonymous_namespace_ *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  re *v133;
  uint64_t *v134;
  const re::IntrospectionBase *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t *v138;
  const re::IntrospectionBase *v139;
  void *v140;
  uint64_t v141;
  uint64_t *v142;
  const re::IntrospectionBase *v143;
  void *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  const re::IntrospectionBase *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  re *v154;
  const re::IntrospectionBase *v155;
  unsigned __int8 v156;
  unsigned __int8 v157;
  char **v158;
  char *v159;
  unsigned int *v160;
  _anonymous_namespace_ *v161;
  unint64_t v162;
  unint64_t i;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char v167;
  unsigned __int8 *v168;
  int v169;
  uint64_t v170;
  unint64_t j;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char v175;
  unsigned __int8 *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  const re::IntrospectionBase *v182;
  void *v183;
  uint64_t v184;
  uint64_t *v185;
  const re::IntrospectionBase *v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  re *v190;
  uint64_t *v191;
  re *v192;
  uint64_t *v193;
  re *v194;
  uint64_t *v195;
  re *v196;
  uint64_t *v197;
  re *v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t *v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  StringID v206;
  uint64_t v207[2];
  __int128 v208;
  __int128 v209;
  __int128 v210;
  uint64_t *v211;
  StringID v212;
  StringID v213;
  __int128 v214;
  const char *v215;

  *(_QWORD *)&v214 = 0x7FD177336AB796D4;
  *((_QWORD *)&v214 + 1) = "SerializableMaterialParameterBlock";
  re::StringID::destroyString((re::StringID *)&v214);
  *((_OWORD *)this + 2) = v203;
  v4 = atomic_load((unsigned __int8 *)&qword_254113180);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254113180);
    if ((_DWORD)v5)
    {
      v7 = re::introspectionAllocator(v5);
      v8 = atomic_load((unsigned __int8 *)&qword_2541131C8);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2541131C8))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_2541134E0);
        qword_2541134E0 = (uint64_t)&off_24ED6AD70;
        __cxa_guard_release(&qword_2541131C8);
      }
      if ((byte_254113131 & 1) == 0)
      {
        v9 = re::IntrospectionInfo<re::StringID>::get(1, v6);
        v10 = (uint64_t *)qword_254113150;
        if (!qword_254113150)
        {
          v11 = atomic_load((unsigned __int8 *)&qword_254113148);
          if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254113148))
          {
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113670, 0);
            *(_QWORD *)(v132 + 22) = 0;
            qword_254113680 = 0;
            *(_QWORD *)&xmmword_254113690 = 0;
            *((_QWORD *)&xmmword_254113690 + 1) = 0xFFFFFFFFLL;
            qword_254113670 = (uint64_t)&off_24ED7DAA8;
            qword_2541136A0 = (uint64_t)"SerializedMaterialParameter";
            dword_2541136A8 = 0;
            xmmword_2541136B0 = 0u;
            xmmword_2541136C0 = 0u;
            xmmword_2541136D0 = 0u;
            qword_2541136E0 = 0;
            __cxa_guard_release(&qword_254113148);
          }
          qword_254113150 = (uint64_t)&qword_254113670;
          *(_QWORD *)&v210 = 0xCB7C4AF26B0E69FCLL;
          *((_QWORD *)&v210 + 1) = "SerializedMaterialParameter";
          re::StringID::destroyString((re::StringID *)&v210);
          xmmword_254113690 = v214;
          v13 = atomic_load((unsigned __int8 *)&qword_254113140);
          if ((v13 & 1) == 0)
          {
            v133 = (re *)__cxa_guard_acquire(&qword_254113140);
            if ((_DWORD)v133)
            {
              v134 = re::introspectionAllocator(v133);
              v136 = re::introspect_MaterialParameterType((re *)1, v135);
              v137 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v134 + 32))(v134, 72, 8);
              *(_DWORD *)v137 = 1;
              *(_QWORD *)(v137 + 8) = "ValueType";
              *(_QWORD *)(v137 + 16) = v136;
              *(_QWORD *)(v137 + 24) = 0;
              *(_QWORD *)(v137 + 32) = 1;
              *(_DWORD *)(v137 + 40) = 0;
              *(_QWORD *)(v137 + 48) = 0;
              *(_QWORD *)(v137 + 56) = 0;
              *(_DWORD *)(v137 + 64) = 0;
              qword_254113288 = v137;
              v138 = re::introspectionAllocator((re *)v137);
              v140 = re::IntrospectionInfo<float [16]>::get(1, v139);
              v141 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v138 + 32))(v138, 72, 8);
              *(_DWORD *)v141 = 1;
              *(_QWORD *)(v141 + 8) = "m_floatValues";
              *(_QWORD *)(v141 + 16) = v140;
              *(_QWORD *)(v141 + 24) = 0;
              *(_QWORD *)(v141 + 32) = 0x1000000002;
              *(_DWORD *)(v141 + 40) = 0;
              *(_QWORD *)(v141 + 48) = 0;
              *(_QWORD *)(v141 + 56) = 0;
              *(_DWORD *)(v141 + 64) = 0;
              qword_254113290 = v141;
              v142 = re::introspectionAllocator((re *)v141);
              v144 = re::introspect_AssetHandle((re *)1, v143);
              v145 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v142 + 32))(v142, 72, 8);
              *(_DWORD *)v145 = 1;
              *(_QWORD *)(v145 + 8) = "m_assetHandleValue";
              *(_QWORD *)(v145 + 16) = v144;
              *(_QWORD *)(v145 + 24) = 0;
              *(_QWORD *)(v145 + 32) = 0x5000000003;
              *(_DWORD *)(v145 + 40) = 0;
              *(_QWORD *)(v145 + 48) = 0;
              *(_QWORD *)(v145 + 56) = 0;
              *(_DWORD *)(v145 + 64) = 0;
              qword_254113298 = v145;
              v146 = re::introspectionAllocator((re *)v145);
              v147 = re::introspect_OptionalMaterialSamplerData((re::IntrospectionBase **)1);
              v148 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v146 + 32))(v146, 72, 8);
              *(_DWORD *)v148 = 1;
              *(_QWORD *)(v148 + 8) = "m_samplerValue";
              *(_QWORD *)(v148 + 16) = v147;
              *(_QWORD *)(v148 + 24) = 0;
              *(_QWORD *)(v148 + 32) = 0x6800000004;
              *(_DWORD *)(v148 + 40) = 0;
              *(_QWORD *)(v148 + 48) = 0;
              *(_QWORD *)(v148 + 56) = 0;
              *(_DWORD *)(v148 + 64) = 0;
              qword_2541132A0 = v148;
              v149 = re::introspectionAllocator((re *)v148);
              v151 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v150);
              v152 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v149 + 32))(v149, 72, 8);
              *(_DWORD *)v152 = 1;
              *(_QWORD *)(v152 + 8) = "m_bufferData";
              *(_QWORD *)(v152 + 16) = v151;
              *(_QWORD *)(v152 + 24) = 0;
              *(_QWORD *)(v152 + 32) = 0xD000000005;
              *(_DWORD *)(v152 + 40) = 0;
              *(_QWORD *)(v152 + 48) = 0;
              *(_QWORD *)(v152 + 56) = 0;
              *(_DWORD *)(v152 + 64) = 0;
              qword_2541132A8 = v152;
              __cxa_guard_release(&qword_254113140);
            }
          }
          qword_254113680 = 0x12000000008;
          v10 = &qword_254113670;
          dword_254113688 = 16;
          word_25411368C = 0;
          dword_2541136A8 = 5;
          *(_QWORD *)&xmmword_2541136B0 = &qword_254113288;
          *((_QWORD *)&xmmword_2541136B0 + 1) = re::internal::defaultConstruct<re::ecs2::SerializedMaterialParameter>;
          *(_QWORD *)&xmmword_2541136C0 = re::internal::defaultDestruct<re::ecs2::SerializedMaterialParameter>;
          *(_QWORD *)&xmmword_2541136D0 = 0;
          *((_QWORD *)&xmmword_2541136C0 + 1) = 0;
          *((_QWORD *)&xmmword_2541136D0 + 1) = re::internal::defaultConstructV2<re::ecs2::SerializedMaterialParameter>;
          qword_2541136E0 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::SerializedMaterialParameter>;
          re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254113670, v12);
          v210 = v214;
        }
        if ((byte_254113131 & 1) == 0)
        {
          byte_254113131 = 1;
          v14 = *((_DWORD *)v10 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541134E0, 0);
          qword_2541134F0 = 0x3000000007;
          dword_2541134F8 = v14;
          word_2541134FC = 0;
          *(_QWORD *)&xmmword_254113500 = 0;
          *((_QWORD *)&xmmword_254113500 + 1) = 0xFFFFFFFFLL;
          qword_254113510 = (uint64_t)v9;
          qword_254113518 = 0;
          qword_254113520 = (uint64_t)v10;
          qword_254113528 = 0;
          qword_2541134E0 = (uint64_t)&off_24ED6AD70;
          re::IntrospectionRegistry::add(v15, v16);
          re::getPrettyTypeName((re *)&qword_2541134E0, (const re::IntrospectionBase *)&v214);
          if ((BYTE8(v214) & 1) != 0)
            v17 = v215;
          else
            v17 = (char *)&v214 + 9;
          if ((_QWORD)v214 && (BYTE8(v214) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v214 + 40))();
          v18 = (StringID)v9[2];
          v205 = *((_OWORD *)v10 + 2);
          v206 = v18;
          v19 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v207);
          if (v19)
          {
            v20 = *v19;
            *((_QWORD *)&v204 + 1) = v20;
          }
          else
          {
            *(_QWORD *)&v214 = 0x449AD97C4B77BED4;
            *((_QWORD *)&v214 + 1) = "_CompareFunc";
            v21 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v214);
            if (v21)
            {
              v22 = *v21;
              re::StringID::destroyString((re::StringID *)&v214);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v214);
              *(_QWORD *)&v210 = 0x449AD97C4B77BED4;
              *((_QWORD *)&v210 + 1) = "_CompareFunc";
              v22 = (char *)*((_QWORD *)&v214 + 1);
              v23 = (void *)v214;
              re::StringID::destroyString((re::StringID *)&v210);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v210, (uint64_t)&v214 + 8);
            if (!v23
              || (v24 = *v211,
                  *(_QWORD *)&v214 = v22,
                  *((_QWORD *)&v214 + 1) = v24,
                  LODWORD(v215) = -1,
                  (v25 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v210 + 768, (uint64_t *)&v214)) == 0)|| !*(_QWORD *)v25)
            {
              v213 = v206;
              *(_QWORD *)&v212.var0 = v23;
              v212.var1 = v22;
            }
            v208 = v205;
            v209 = (__int128)v206;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v214, v207, 1, 0x30uLL, 8uLL, &v209, &v208);
            re::TypeBuilder::setConstructor((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v214, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v214, v26);
          }
          xmmword_254113500 = v204;
          re::StringID::destroyString((re::StringID *)v207);
        }
      }
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "parameters";
      *(_QWORD *)(v27 + 16) = &qword_2541134E0;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x13000000001;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2541132D8 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::introspect_uint32_t((re *)1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "m_networkVersion";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x19000000002;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_2541132E0 = v31;
      v33 = re::introspectionAllocator((re *)v31);
      v34 = atomic_load((unsigned __int8 *)&qword_2541131D0);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_2541131D0))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254113530);
        qword_254113530 = (uint64_t)&off_24ED6AE10;
        __cxa_guard_release(&qword_2541131D0);
      }
      if ((byte_254113132 & 1) == 0)
      {
        v36 = re::introspect_size_t((re *)1, v32);
        v37 = atomic_load((unsigned __int8 *)&qword_2541131D8);
        if ((v37 & 1) == 0 && __cxa_guard_acquire(&qword_2541131D8))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113318, 0);
          *(_QWORD *)(v129 + 22) = 0;
          qword_254113328 = 0;
          *(_QWORD *)&xmmword_254113338 = 0;
          *((_QWORD *)&xmmword_254113338 + 1) = 0xFFFFFFFFLL;
          qword_254113318 = (uint64_t)&off_24ED2DDF8;
          qword_254113350 = 0;
          re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254113348);
          qword_254113318 = (uint64_t)&off_24ED6AEB0;
          __cxa_guard_release(&qword_2541131D8);
        }
        if ((byte_254113133 & 1) == 0)
        {
          v38 = re::introspect_size_t((re *)1, v35);
          if ((byte_254113133 & 1) == 0)
          {
            v39 = (uint64_t)v38;
            byte_254113133 = 1;
            v40 = v38[6];
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113318, 0);
            qword_254113328 = 0x100000000DLL;
            dword_254113330 = v40;
            word_254113334 = 0;
            *(_QWORD *)&xmmword_254113338 = 0;
            *((_QWORD *)&xmmword_254113338 + 1) = 0xFFFFFFFFLL;
            qword_254113348 = v39;
            qword_254113350 = 0;
            qword_254113318 = (uint64_t)&off_24ED6AEB0;
            re::IntrospectionRegistry::add(v41, v42);
            re::getPrettyTypeName((re *)&qword_254113318, (const re::IntrospectionBase *)&v214);
            if ((BYTE8(v214) & 1) != 0)
              v43 = v215;
            else
              v43 = (char *)&v214 + 9;
            if ((_QWORD)v214 && (BYTE8(v214) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v214 + 40))();
            v212 = *(StringID *)(v39 + 32);
            v44 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v213);
            if (v44)
            {
              v45 = *v44;
              *((_QWORD *)&v209 + 1) = v45;
            }
            else
            {
              v210 = (__int128)v212;
              re::TypeBuilder::beginOptionalType((uint64_t)&v214, (uint64_t *)&v213, 0x10uLL, 8uLL, &v210);
              re::TypeBuilder::setOptionalAccessors((uint64_t)&v214, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
              re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v214, v46);
            }
            xmmword_254113338 = v209;
            re::StringID::destroyString((re::StringID *)&v213);
          }
        }
        if ((byte_254113132 & 1) == 0)
        {
          byte_254113132 = 1;
          v47 = dword_254113330;
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113530, 0);
          qword_254113540 = 0x3000000007;
          dword_254113548 = v47;
          word_25411354C = 0;
          *(_QWORD *)&xmmword_254113550 = 0;
          *((_QWORD *)&xmmword_254113550 + 1) = 0xFFFFFFFFLL;
          qword_254113560 = (uint64_t)v36;
          qword_254113568 = 0;
          qword_254113570 = (uint64_t)&qword_254113318;
          qword_254113578 = 0;
          qword_254113530 = (uint64_t)&off_24ED6AE10;
          re::IntrospectionRegistry::add(v48, v49);
          re::getPrettyTypeName((re *)&qword_254113530, (const re::IntrospectionBase *)&v214);
          if ((BYTE8(v214) & 1) != 0)
            v50 = v215;
          else
            v50 = (char *)&v214 + 9;
          if ((_QWORD)v214 && (BYTE8(v214) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v214 + 40))();
          v51 = (StringID)v36[2];
          v205 = xmmword_254113338;
          v206 = v51;
          v52 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v207);
          if (v52)
          {
            v53 = *v52;
            *((_QWORD *)&v204 + 1) = v53;
          }
          else
          {
            *(_QWORD *)&v214 = 0x449AD97C4B77BED4;
            *((_QWORD *)&v214 + 1) = "_CompareFunc";
            v54 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v214);
            if (v54)
            {
              v55 = *v54;
              re::StringID::destroyString((re::StringID *)&v214);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v214);
              *(_QWORD *)&v210 = 0x449AD97C4B77BED4;
              *((_QWORD *)&v210 + 1) = "_CompareFunc";
              v55 = (char *)*((_QWORD *)&v214 + 1);
              v56 = (void *)v214;
              re::StringID::destroyString((re::StringID *)&v210);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v210, (uint64_t)&v214 + 8);
            if (!v56
              || (v57 = *v211,
                  *(_QWORD *)&v214 = v55,
                  *((_QWORD *)&v214 + 1) = v57,
                  LODWORD(v215) = -1,
                  (v58 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v210 + 768, (uint64_t *)&v214)) == 0)|| !*(_QWORD *)v58)
            {
              v213 = v206;
              *(_QWORD *)&v212.var0 = v56;
              v212.var1 = v55;
            }
            v208 = v205;
            v209 = (__int128)v206;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v214, v207, 1, 0x30uLL, 8uLL, &v209, &v208);
            re::TypeBuilder::setConstructor((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v214, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v214, v59);
          }
          xmmword_254113550 = v204;
          re::StringID::destroyString((re::StringID *)v207);
        }
      }
      v60 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v60 = 1;
      *(_QWORD *)(v60 + 8) = "passTechniqueMapping";
      *(_QWORD *)(v60 + 16) = &qword_254113530;
      *(_QWORD *)(v60 + 24) = 0;
      *(_QWORD *)(v60 + 32) = 0xD000000003;
      *(_DWORD *)(v60 + 40) = 0;
      *(_QWORD *)(v60 + 48) = 0;
      *(_QWORD *)(v60 + 56) = 0;
      *(_DWORD *)(v60 + 64) = 0;
      qword_2541132E8 = v60;
      v61 = re::introspectionAllocator((re *)v60);
      re::IntrospectionInfo<re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get((uint64_t)v61, v62);
      v63 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v61 + 32))(v61, 72, 8);
      *(_DWORD *)v63 = 1;
      *(_QWORD *)(v63 + 8) = "textureToSamplerBindings";
      *(_QWORD *)(v63 + 16) = &qword_254113580;
      *(_QWORD *)(v63 + 24) = 0;
      *(_QWORD *)(v63 + 32) = 0x1000000004;
      *(_DWORD *)(v63 + 40) = 0;
      *(_QWORD *)(v63 + 48) = 0;
      *(_QWORD *)(v63 + 56) = 0;
      *(_DWORD *)(v63 + 64) = 0;
      qword_2541132F0 = v63;
      v64 = re::introspectionAllocator((re *)v63);
      re::IntrospectionInfo<re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get((uint64_t)v64, v65);
      v66 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 72, 8);
      *(_DWORD *)v66 = 1;
      *(_QWORD *)(v66 + 8) = "samplerToArrayBindings";
      *(_QWORD *)(v66 + 16) = &qword_254113580;
      *(_QWORD *)(v66 + 24) = 0;
      *(_QWORD *)(v66 + 32) = 0xA000000005;
      *(_DWORD *)(v66 + 40) = 0;
      *(_QWORD *)(v66 + 48) = 0;
      *(_QWORD *)(v66 + 56) = 0;
      *(_DWORD *)(v66 + 64) = 0;
      qword_2541132F8 = v66;
      v67 = re::introspectionAllocator((re *)v66);
      v69 = re::IntrospectionInfo<re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>>::get(1, v68);
      v70 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v67 + 32))(v67, 72, 8);
      *(_DWORD *)v70 = 1;
      *(_QWORD *)(v70 + 8) = "textureToUVIndex";
      *(_QWORD *)(v70 + 16) = v69;
      *(_QWORD *)(v70 + 24) = 0;
      *(_QWORD *)(v70 + 32) = 0x4000000006;
      *(_DWORD *)(v70 + 40) = 0;
      *(_QWORD *)(v70 + 48) = 0;
      *(_QWORD *)(v70 + 56) = 0;
      *(_DWORD *)(v70 + 64) = 0;
      qword_254113300 = v70;
      v72 = re::introspectionAllocator((re *)v70);
      v73 = atomic_load((unsigned __int8 *)&qword_2541131E8);
      if ((v73 & 1) == 0 && __cxa_guard_acquire(&qword_2541131E8))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_2541135D0);
        qword_2541135D0 = (uint64_t)&off_24ED6AFD0;
        __cxa_guard_release(&qword_2541131E8);
      }
      if ((byte_254113135 & 1) == 0)
      {
        v74 = re::IntrospectionInfo<re::StringID>::get(1, v71);
        v75 = atomic_load((unsigned __int8 *)&qword_2541131F0);
        if ((v75 & 1) == 0 && __cxa_guard_acquire(&qword_2541131F0))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113358, 0);
          *(_QWORD *)(v130 + 22) = 0;
          qword_254113368 = 0;
          *(_QWORD *)&xmmword_254113378 = 0;
          *((_QWORD *)&xmmword_254113378 + 1) = 0xFFFFFFFFLL;
          qword_254113358 = (uint64_t)&off_24ED2DDF8;
          qword_254113390 = 0;
          re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254113388);
          qword_254113358 = (uint64_t)&off_24ED6B070;
          __cxa_guard_release(&qword_2541131F0);
        }
        if ((byte_254113136 & 1) == 0)
        {
          v76 = (uint64_t *)qword_254113178;
          if (qword_254113178)
            goto LABEL_69;
          v77 = atomic_load((unsigned __int8 *)&qword_254113168);
          if ((v77 & 1) == 0 && __cxa_guard_acquire(&qword_254113168))
          {
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541136E8, 0);
            *(_QWORD *)(v153 + 22) = 0;
            qword_2541136F8 = 0;
            *(_QWORD *)&xmmword_254113708 = 0;
            *((_QWORD *)&xmmword_254113708 + 1) = 0xFFFFFFFFLL;
            qword_2541136E8 = (uint64_t)&off_24ED7DAA8;
            qword_254113718 = (uint64_t)"SerializableParameterBinding";
            dword_254113720 = 0;
            xmmword_254113728 = 0u;
            xmmword_254113738 = 0u;
            xmmword_254113748 = 0u;
            qword_254113758 = 0;
            __cxa_guard_release(&qword_254113168);
          }
          qword_254113178 = (uint64_t)&qword_2541136E8;
          *(_QWORD *)&v214 = 0xB51CBC288A0F4BB6;
          *((_QWORD *)&v214 + 1) = "SerializableParameterBinding";
          re::StringID::destroyString((re::StringID *)&v214);
          xmmword_254113708 = v209;
          v79 = atomic_load((unsigned __int8 *)&qword_254113170);
          if ((v79 & 1) == 0)
          {
            v154 = (re *)__cxa_guard_acquire(&qword_254113170);
            if ((_DWORD)v154)
            {
              v201 = re::introspectionAllocator(v154);
              v156 = atomic_load((unsigned __int8 *)&qword_254113158);
              if ((v156 & 1) == 0)
                goto LABEL_183;
              while (1)
              {
                v157 = atomic_load((unsigned __int8 *)&qword_254113160);
                if ((v157 & 1) == 0 && __cxa_guard_acquire(&qword_254113160))
                {
                  re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254113498, "SerializableParameterBindingType", 4, 4, 1, 1);
                  qword_254113498 = (uint64_t)&off_24ED7D9E8;
                  qword_2541134D8 = (uint64_t)&re::ecs2::introspect_SerializableParameterBindingType(BOOL)::enumTable;
                  dword_2541134A8 = 9;
                  __cxa_guard_release(&qword_254113160);
                }
                if ((_MergedGlobals_310 & 1) != 0)
                  break;
                _MergedGlobals_310 = 1;
                re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254113498, v155);
                *(_QWORD *)&v212.var0 = 0x229A01AB15C6876ALL;
                v212.var1 = "SerializableParameterBindingType";
                *(_QWORD *)&v214 = 208862;
                *((_QWORD *)&v214 + 1) = "int";
                v158 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v214);
                if (v158)
                {
                  v159 = *v158;
                  re::StringID::destroyString((re::StringID *)&v214);
                  v160 = (unsigned int *)qword_2541134D8;
                  *((_QWORD *)&v210 + 1) = v159;
                  re::TypeBuilder::beginEnumType((uint64_t)&v214, (uint64_t *)&v212, 1, 1, (uint64_t)&v210);
                  v162 = *v160;
                  if ((_DWORD)v162)
                  {
                    for (i = 0; i < v162; ++i)
                    {
                      v164 = *(_QWORD *)(*((_QWORD *)v160 + 1) + 8 * i);
                      if (*(_DWORD *)v164 == 1)
                      {
                        v165 = *(char **)(v164 + 16);
                        if (v165)
                        {
                          v166 = *v165;
                          if (*v165)
                          {
                            v167 = v165[1];
                            if (v167)
                            {
                              v168 = (unsigned __int8 *)(v165 + 2);
                              do
                              {
                                v166 = 31 * v166 + v167;
                                v169 = *v168++;
                                v167 = v169;
                              }
                              while (v169);
                            }
                          }
                        }
                        else
                        {
                          v166 = 0;
                        }
                        v170 = *(_QWORD *)(v164 + 8);
                        *(_QWORD *)&v213.var0 = 2 * v166;
                        v213.var1 = v165;
                        re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v214, v170, &v213);
                        re::StringID::destroyString((re::StringID *)&v213);
                        v162 = *v160;
                      }
                    }
                    if (v162)
                    {
                      for (j = 0; j < v162; ++j)
                      {
                        v172 = *(_QWORD *)(*((_QWORD *)v160 + 1) + 8 * j);
                        if (*(_DWORD *)v172 == 2)
                        {
                          v173 = *(char **)(v172 + 16);
                          if (v173)
                          {
                            v174 = *v173;
                            if (*v173)
                            {
                              v175 = v173[1];
                              if (v175)
                              {
                                v176 = (unsigned __int8 *)(v173 + 2);
                                do
                                {
                                  v174 = 31 * v174 + v175;
                                  v177 = *v176++;
                                  v175 = v177;
                                }
                                while (v177);
                              }
                            }
                          }
                          else
                          {
                            v174 = 0;
                          }
                          v178 = *(_QWORD *)(v172 + 8);
                          *(_QWORD *)&v213.var0 = 2 * v174;
                          v213.var1 = v173;
                          re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v214, v178, &v213);
                          re::StringID::destroyString((re::StringID *)&v213);
                          v162 = *v160;
                        }
                      }
                    }
                  }
                  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v214, v179);
                  xmmword_2541134B8 = (__int128)v213;
                  re::StringID::destroyString((re::StringID *)&v212);
                  break;
                }
                re::StringID::destroyString((re::StringID *)&v214);
                re::internal::assertLog((re::internal *)5, v189, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "SerializableParameterBindingType");
                _os_crash();
                __break(1u);
LABEL_183:
                v190 = (re *)__cxa_guard_acquire(&qword_254113158);
                if ((_DWORD)v190)
                {
                  v191 = re::introspectionAllocator(v190);
                  v192 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v191 + 32))(v191, 24, 8);
                  *(_DWORD *)v192 = 1;
                  *((_QWORD *)v192 + 1) = 0;
                  *((_QWORD *)v192 + 2) = "Invalid";
                  qword_2541132B0 = (uint64_t)v192;
                  v193 = re::introspectionAllocator(v192);
                  v194 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v193 + 32))(v193, 24, 8);
                  *(_DWORD *)v194 = 1;
                  *((_QWORD *)v194 + 1) = 1;
                  *((_QWORD *)v194 + 2) = "Constant";
                  qword_2541132B8 = (uint64_t)v194;
                  v195 = re::introspectionAllocator(v194);
                  v196 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v195 + 32))(v195, 24, 8);
                  *(_DWORD *)v196 = 1;
                  *((_QWORD *)v196 + 1) = 2;
                  *((_QWORD *)v196 + 2) = "Texture";
                  qword_2541132C0 = (uint64_t)v196;
                  v197 = re::introspectionAllocator(v196);
                  v198 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v197 + 32))(v197, 24, 8);
                  *(_DWORD *)v198 = 1;
                  *((_QWORD *)v198 + 1) = 3;
                  *((_QWORD *)v198 + 2) = "Buffer";
                  qword_2541132C8 = (uint64_t)v198;
                  v199 = re::introspectionAllocator(v198);
                  v200 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v199 + 32))(v199, 24, 8);
                  *(_DWORD *)v200 = 1;
                  *(_QWORD *)(v200 + 8) = 4;
                  *(_QWORD *)(v200 + 16) = "Sampler";
                  qword_2541132D0 = v200;
                  __cxa_guard_release(&qword_254113158);
                }
              }
              v180 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v201 + 32))(v201, 72, 8);
              *(_DWORD *)v180 = 1;
              *(_QWORD *)(v180 + 8) = "type";
              *(_QWORD *)(v180 + 16) = &qword_254113498;
              *(_QWORD *)(v180 + 24) = 0;
              *(_QWORD *)(v180 + 32) = 1;
              *(_DWORD *)(v180 + 40) = 0;
              *(_QWORD *)(v180 + 48) = 0;
              *(_QWORD *)(v180 + 56) = 0;
              *(_DWORD *)(v180 + 64) = 0;
              qword_254113250 = v180;
              v181 = re::introspectionAllocator((re *)v180);
              v183 = re::IntrospectionInfo<re::StringID>::get(1, v182);
              v184 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v181 + 32))(v181, 72, 8);
              *(_DWORD *)v184 = 1;
              *(_QWORD *)(v184 + 8) = "structName";
              *(_QWORD *)(v184 + 16) = v183;
              *(_QWORD *)(v184 + 24) = 0;
              *(_QWORD *)(v184 + 32) = 0x800000002;
              *(_DWORD *)(v184 + 40) = 0;
              *(_QWORD *)(v184 + 48) = 0;
              *(_QWORD *)(v184 + 56) = 0;
              *(_DWORD *)(v184 + 64) = 0;
              qword_254113258 = v184;
              v185 = re::introspectionAllocator((re *)v184);
              v187 = re::IntrospectionInfo<re::StringID>::get(1, v186);
              v188 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v185 + 32))(v185, 72, 8);
              *(_DWORD *)v188 = 1;
              *(_QWORD *)(v188 + 8) = "memberName";
              *(_QWORD *)(v188 + 16) = v187;
              *(_QWORD *)(v188 + 24) = 0;
              *(_QWORD *)(v188 + 32) = 0x1800000003;
              *(_DWORD *)(v188 + 40) = 0;
              *(_QWORD *)(v188 + 48) = 0;
              *(_QWORD *)(v188 + 56) = 0;
              *(_DWORD *)(v188 + 64) = 0;
              qword_254113260 = v188;
              __cxa_guard_release(&qword_254113170);
            }
          }
          qword_2541136F8 = 0x2800000008;
          v76 = &qword_2541136E8;
          dword_254113700 = 8;
          word_254113704 = 0;
          dword_254113720 = 3;
          *(_QWORD *)&xmmword_254113728 = &qword_254113250;
          *((_QWORD *)&xmmword_254113728 + 1) = re::internal::defaultConstruct<re::ecs2::SerializableParameterBinding>;
          *(_QWORD *)&xmmword_254113738 = re::internal::defaultDestruct<re::ecs2::SerializableParameterBinding>;
          *(_QWORD *)&xmmword_254113748 = 0;
          *((_QWORD *)&xmmword_254113738 + 1) = 0;
          *((_QWORD *)&xmmword_254113748 + 1) = re::internal::defaultConstructV2<re::ecs2::SerializableParameterBinding>;
          qword_254113758 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::SerializableParameterBinding>;
          re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541136E8, v78);
          v214 = v209;
          if ((byte_254113136 & 1) == 0)
          {
LABEL_69:
            byte_254113136 = 1;
            v80 = *((_DWORD *)v76 + 6);
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113358, 0);
            qword_254113368 = 0x300000000DLL;
            dword_254113370 = v80;
            word_254113374 = 0;
            *(_QWORD *)&xmmword_254113378 = 0;
            *((_QWORD *)&xmmword_254113378 + 1) = 0xFFFFFFFFLL;
            qword_254113388 = (uint64_t)v76;
            qword_254113390 = 0;
            qword_254113358 = (uint64_t)&off_24ED6B070;
            re::IntrospectionRegistry::add(v81, v82);
            re::getPrettyTypeName((re *)&qword_254113358, (const re::IntrospectionBase *)&v214);
            if ((BYTE8(v214) & 1) != 0)
              v83 = v215;
            else
              v83 = (char *)&v214 + 9;
            if ((_QWORD)v214 && (BYTE8(v214) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v214 + 40))();
            v212 = (StringID)*((_OWORD *)v76 + 2);
            v84 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v213);
            if (v84)
            {
              v85 = *v84;
              *((_QWORD *)&v209 + 1) = v85;
            }
            else
            {
              v210 = (__int128)v212;
              re::TypeBuilder::beginOptionalType((uint64_t)&v214, (uint64_t *)&v213, 0x30uLL, 8uLL, &v210);
              re::TypeBuilder::setOptionalAccessors((uint64_t)&v214, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::ecs2::SerializableParameterBinding>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::ecs2::SerializableParameterBinding>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
              re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v214, v86);
            }
            xmmword_254113378 = v209;
            re::StringID::destroyString((re::StringID *)&v213);
          }
        }
        if ((byte_254113135 & 1) == 0)
        {
          byte_254113135 = 1;
          v87 = dword_254113370;
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541135D0, 0);
          qword_2541135E0 = 0x3000000007;
          dword_2541135E8 = v87;
          word_2541135EC = 0;
          *(_QWORD *)&xmmword_2541135F0 = 0;
          *((_QWORD *)&xmmword_2541135F0 + 1) = 0xFFFFFFFFLL;
          qword_254113600 = (uint64_t)v74;
          qword_254113608 = 0;
          qword_254113610 = (uint64_t)&qword_254113358;
          qword_254113618 = 0;
          qword_2541135D0 = (uint64_t)&off_24ED6AFD0;
          re::IntrospectionRegistry::add(v88, v89);
          re::getPrettyTypeName((re *)&qword_2541135D0, (const re::IntrospectionBase *)&v214);
          if ((BYTE8(v214) & 1) != 0)
            v90 = v215;
          else
            v90 = (char *)&v214 + 9;
          if ((_QWORD)v214 && (BYTE8(v214) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v214 + 40))();
          v91 = (StringID)v74[2];
          v205 = xmmword_254113378;
          v206 = v91;
          v92 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v207);
          if (v92)
          {
            v93 = *v92;
            *((_QWORD *)&v204 + 1) = v93;
          }
          else
          {
            *(_QWORD *)&v214 = 0x449AD97C4B77BED4;
            *((_QWORD *)&v214 + 1) = "_CompareFunc";
            v94 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v214);
            if (v94)
            {
              v95 = *v94;
              re::StringID::destroyString((re::StringID *)&v214);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v214);
              *(_QWORD *)&v210 = 0x449AD97C4B77BED4;
              *((_QWORD *)&v210 + 1) = "_CompareFunc";
              v95 = (char *)*((_QWORD *)&v214 + 1);
              v96 = (void *)v214;
              re::StringID::destroyString((re::StringID *)&v210);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v210, (uint64_t)&v214 + 8);
            if (!v96
              || (v97 = *v211,
                  *(_QWORD *)&v214 = v95,
                  *((_QWORD *)&v214 + 1) = v97,
                  LODWORD(v215) = -1,
                  (v98 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v210 + 768, (uint64_t *)&v214)) == 0)|| !*(_QWORD *)v98)
            {
              v213 = v206;
              *(_QWORD *)&v212.var0 = v96;
              v212.var1 = v95;
            }
            v208 = v205;
            v209 = (__int128)v206;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v214, v207, 1, 0x30uLL, 8uLL, &v209, &v208);
            re::TypeBuilder::setConstructor((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v214, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v214, v99);
          }
          xmmword_2541135F0 = v204;
          re::StringID::destroyString((re::StringID *)v207);
        }
      }
      v100 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v72 + 32))(v72, 72, 8);
      *(_DWORD *)v100 = 1;
      *(_QWORD *)(v100 + 8) = "parameterBindings";
      *(_QWORD *)(v100 + 16) = &qword_2541135D0;
      *(_QWORD *)(v100 + 24) = 0;
      *(_QWORD *)(v100 + 32) = 0x10000000007;
      *(_DWORD *)(v100 + 40) = 0;
      *(_QWORD *)(v100 + 48) = 0;
      *(_QWORD *)(v100 + 56) = 0;
      *(_DWORD *)(v100 + 64) = 0;
      qword_254113308 = v100;
      v102 = re::introspectionAllocator((re *)v100);
      v103 = atomic_load((unsigned __int8 *)&qword_2541131F8);
      if ((v103 & 1) == 0 && __cxa_guard_acquire(&qword_2541131F8))
      {
        re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254113620);
        qword_254113620 = (uint64_t)&off_24ED6B0F0;
        __cxa_guard_release(&qword_2541131F8);
      }
      if ((byte_254113137 & 1) == 0)
      {
        v104 = re::IntrospectionInfo<re::StringID>::get(1, v101);
        v105 = atomic_load((unsigned __int8 *)&qword_254113200);
        if ((v105 & 1) == 0 && __cxa_guard_acquire(&qword_254113200))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113398, 0);
          *(_QWORD *)(v131 + 22) = 0;
          qword_2541133A8 = 0;
          *(_QWORD *)&xmmword_2541133B8 = 0;
          *((_QWORD *)&xmmword_2541133B8 + 1) = 0xFFFFFFFFLL;
          qword_254113398 = (uint64_t)&off_24ED2DDF8;
          qword_2541133D0 = 0;
          re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541133C8);
          qword_254113398 = (uint64_t)&off_24ED6B190;
          __cxa_guard_release(&qword_254113200);
        }
        if ((byte_254113138 & 1) == 0)
        {
          v106 = re::mtl::introspect_TextureSwizzleChannels((re::IntrospectionBase **)1);
          if ((byte_254113138 & 1) == 0)
          {
            v107 = v106;
            byte_254113138 = 1;
            v108 = *(_DWORD *)(v106 + 24);
            ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113398, 0);
            qword_2541133A8 = 0x50000000DLL;
            dword_2541133B0 = v108;
            word_2541133B4 = 0;
            *(_QWORD *)&xmmword_2541133B8 = 0;
            *((_QWORD *)&xmmword_2541133B8 + 1) = 0xFFFFFFFFLL;
            qword_2541133C8 = v107;
            qword_2541133D0 = 0;
            qword_254113398 = (uint64_t)&off_24ED6B190;
            re::IntrospectionRegistry::add(v109, v110);
            re::getPrettyTypeName((re *)&qword_254113398, (const re::IntrospectionBase *)&v214);
            if ((BYTE8(v214) & 1) != 0)
              v111 = v215;
            else
              v111 = (char *)&v214 + 9;
            if ((_QWORD)v214 && (BYTE8(v214) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v214 + 40))();
            v212 = *(StringID *)(v107 + 32);
            v112 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v213);
            if (v112)
            {
              v113 = *v112;
              *((_QWORD *)&v209 + 1) = v113;
            }
            else
            {
              v210 = (__int128)v212;
              re::TypeBuilder::beginOptionalType((uint64_t)&v214, (uint64_t *)&v213, 5uLL, 1uLL, &v210);
              re::TypeBuilder::setOptionalAccessors((uint64_t)&v214, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::TextureSwizzleChannels>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::TextureSwizzleChannels>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
              re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v214, v114);
            }
            xmmword_2541133B8 = v209;
            re::StringID::destroyString((re::StringID *)&v213);
          }
        }
        if ((byte_254113137 & 1) == 0)
        {
          byte_254113137 = 1;
          v115 = dword_2541133B0;
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113620, 0);
          qword_254113630 = 0x3000000007;
          dword_254113638 = v115;
          word_25411363C = 0;
          *(_QWORD *)&xmmword_254113640 = 0;
          *((_QWORD *)&xmmword_254113640 + 1) = 0xFFFFFFFFLL;
          qword_254113650 = (uint64_t)v104;
          qword_254113658 = 0;
          qword_254113660 = (uint64_t)&qword_254113398;
          qword_254113668 = 0;
          qword_254113620 = (uint64_t)&off_24ED6B0F0;
          re::IntrospectionRegistry::add(v116, v117);
          re::getPrettyTypeName((re *)&qword_254113620, (const re::IntrospectionBase *)&v214);
          if ((BYTE8(v214) & 1) != 0)
            v118 = v215;
          else
            v118 = (char *)&v214 + 9;
          if ((_QWORD)v214 && (BYTE8(v214) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v214 + 40))();
          v119 = (StringID)v104[2];
          v205 = xmmword_2541133B8;
          v206 = v119;
          v120 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v207);
          if (v120)
          {
            v121 = *v120;
            *((_QWORD *)&v204 + 1) = v121;
          }
          else
          {
            *(_QWORD *)&v214 = 0x449AD97C4B77BED4;
            *((_QWORD *)&v214 + 1) = "_CompareFunc";
            v122 = (char **)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v214);
            if (v122)
            {
              v123 = *v122;
              re::StringID::destroyString((re::StringID *)&v214);
            }
            else
            {
              re::StringID::destroyString((re::StringID *)&v214);
              *(_QWORD *)&v210 = 0x449AD97C4B77BED4;
              *((_QWORD *)&v210 + 1) = "_CompareFunc";
              v123 = (char *)*((_QWORD *)&v214 + 1);
              v124 = (void *)v214;
              re::StringID::destroyString((re::StringID *)&v210);
            }
            re::TypeInfo::TypeInfo((uint64_t)&v210, (uint64_t)&v214 + 8);
            if (!v124
              || (v125 = *v211,
                  *(_QWORD *)&v214 = v123,
                  *((_QWORD *)&v214 + 1) = v125,
                  LODWORD(v215) = -1,
                  (v126 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v210 + 768, (uint64_t *)&v214)) == 0)|| !*(_QWORD *)v126)
            {
              v213 = v206;
              *(_QWORD *)&v212.var0 = v124;
              v212.var1 = v123;
            }
            v208 = v205;
            v209 = (__int128)v206;
            re::TypeBuilder::beginDictionaryType((uint64_t)&v214, v207, 1, 0x30uLL, 8uLL, &v209, &v208);
            re::TypeBuilder::setConstructor((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setDictionaryAccessors((uint64_t)&v214, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::setDictionaryIterator((uint64_t)&v214, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v214, v127);
          }
          xmmword_254113640 = v204;
          re::StringID::destroyString((re::StringID *)v207);
        }
      }
      v128 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v102 + 32))(v102, 72, 8);
      *(_DWORD *)v128 = 1;
      *(_QWORD *)(v128 + 8) = "textureToSwizzle";
      *(_QWORD *)(v128 + 16) = &qword_254113620;
      *(_QWORD *)(v128 + 24) = 0;
      *(_QWORD *)(v128 + 32) = 0x7000000008;
      *(_DWORD *)(v128 + 40) = 0;
      *(_QWORD *)(v128 + 48) = 0;
      *(_QWORD *)(v128 + 56) = 0;
      *(_DWORD *)(v128 + 64) = 0;
      qword_254113310 = v128;
      __cxa_guard_release(&qword_254113180);
    }
  }
  *((_QWORD *)this + 2) = 0x19800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 8;
  *((_QWORD *)this + 8) = &qword_2541132D8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SerializableMaterialParameterBlock>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SerializableMaterialParameterBlock>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SerializableMaterialParameterBlock>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SerializableMaterialParameterBlock>;
  re::IntrospectionRegistry::add(this, v3);
  v202 = v203;
}

double re::internal::defaultConstruct<re::ecs2::SerializableMaterialParameterBlock>(int a1, int a2, re::ecs2::SerializableMaterialParameterBlock *this)
{
  *((_QWORD *)this + 50) = 0;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock(this);
}

void *re::internal::defaultDestruct<re::ecs2::SerializableMaterialParameterBlock>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 44);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 38);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 32);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a3 + 26);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 20);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 14);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 8);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a3 + 2);
  *a3 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::SerializableMaterialParameterBlock>(re::ecs2::SerializableMaterialParameterBlock *this)
{
  *((_QWORD *)this + 50) = 0;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock(this);
}

void *re::internal::defaultDestructV2<re::ecs2::SerializableMaterialParameterBlock>(uint64_t *a1)
{
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 44);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 38);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 32);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a1 + 26);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 20);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 14);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 8);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 2);
  *a1 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

double re::internal::defaultConstruct<re::ecs2::SerializableMaterialParameterBlockHandle>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;

  *a3 = 0;
  a3[1] = 0;
  *(_QWORD *)&result = 1;
  a3[2] = 1;
  return result;
}

void re::internal::defaultDestruct<re::ecs2::SerializableMaterialParameterBlockHandle>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)a3)
  {

    *(_QWORD *)a3 = 0;
  }
}

double re::internal::defaultConstructV2<re::ecs2::SerializableMaterialParameterBlockHandle>(_QWORD *a1)
{
  double result;

  *a1 = 0;
  a1[1] = 0;
  *(_QWORD *)&result = 1;
  a1[2] = 1;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::SerializableMaterialParameterBlockHandle>(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {

    *(_QWORD *)a1 = 0;
  }
}

uint64_t re::ecs2::ComponentType<re::ecs2::MaterialParameterBlockArrayComponent>::makeBindNode@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *v5 = &off_24ED6B210;
  result = re::BindPoint::BindPoint((uint64_t)(v5 + 1), a2);
  *(_QWORD *)(a3 + 16) = v5;
  return result;
}

void re::ecs2::MaterialParameterBlockArrayComponentVersionUtilities::downgradeMaterialParameterBlockArrayComponentFromFall2023(re::ecs2::MaterialParameterBlockArrayComponentVersionUtilities *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  re::ecs2::SerializableMaterialParameterBlock *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  re::ecs2::SerializableMaterialParameterBlock *v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v37;
  unint64_t *v38;
  _BYTE v39[20];
  int v40;
  __int128 v41;
  int v42;
  _BYTE v43[18];
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 6);
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::resize((uint64_t)this + 112, v5);
  if (v5)
  {
    v6 = 0;
    v37 = v5;
    do
    {
      v7 = *((_QWORD *)this + 6);
      if (v7 <= v6)
        goto LABEL_46;
      v8 = *((_QWORD *)this + 8);
      v38 = (unint64_t *)(v8 + 24 * v6);
      v9 = *v38;
      v7 = *v38;
      if (!*v38)
        v7 = *(_QWORD *)(v8 + 24 * v6 + 8);
      v10 = *(unsigned int *)(v7 + 336);
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = *(_DWORD **)(v7 + 320);
        do
        {
          if ((*v12 & 0x80000000) != 0)
            goto LABEL_12;
          v12 += 80;
          ++v11;
        }
        while (v10 != v11);
        LODWORD(v11) = *(_DWORD *)(v7 + 336);
      }
      else
      {
        LODWORD(v11) = 0;
      }
LABEL_12:
      if ((_DWORD)v10 == (_DWORD)v11)
        goto LABEL_36;
      v13 = v11;
      do
      {
        v14 = *(_QWORD *)(v7 + 320);
        v15 = *(unsigned __int8 *)(v14 + 320 * v13 + 32);
        if (v15 == 21)
        {
          v16 = *((_QWORD *)this + 6);
          if (v16 <= v6)
            goto LABEL_43;
          v28 = *((_QWORD *)this + 8);
          v29 = *(re::ecs2::SerializableMaterialParameterBlock **)(v28 + 24 * v6);
          if (!v29)
            v29 = *(re::ecs2::SerializableMaterialParameterBlock **)(v28 + 24 * v6 + 8);
          re::ecs2::SerializableMaterialParameterBlock::colorGamut4FValue(v29, *(const char **)(v14 + 320 * v13 + 16), (uint64_t)v39);
          v41 = *(_OWORD *)&v39[4];
          v42 = v40;
          v16 = *((_QWORD *)this + 6);
          if (v16 <= v6)
            goto LABEL_45;
          v30 = *((_QWORD *)this + 8) + 24 * v6;
          ++*(_DWORD *)(v30 + 16);
          v20 = *(_QWORD *)v30;
          v31 = *(char **)(*(_QWORD *)(v7 + 320) + 320 * v13 + 16);
          re::ColorGamut4F::as((uint64_t)&v41, 0, 3, (uint64_t)&v48);
          *(_OWORD *)v43 = v48;
          v24 = v43;
          v25 = v20;
          v26 = v31;
          v27 = 34;
        }
        else
        {
          if (v15 != 20)
            goto LABEL_27;
          v16 = *((_QWORD *)this + 6);
          if (v16 <= v6)
          {
            *(_QWORD *)&v41 = 0;
            v51 = 0u;
            v52 = 0u;
            v50 = 0u;
            v48 = 0u;
            v49 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v43 = 136315906;
            *(_QWORD *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            v44 = 2048;
            v45 = v6;
            v46 = 2048;
            v47 = v16;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_43:
            *(_QWORD *)&v41 = 0;
            v51 = 0u;
            v52 = 0u;
            v50 = 0u;
            v48 = 0u;
            v49 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v43 = 136315906;
            *(_QWORD *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            v44 = 2048;
            v45 = v6;
            v46 = 2048;
            v47 = v16;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_44:
            *(_QWORD *)v39 = 0;
            v51 = 0u;
            v52 = 0u;
            v50 = 0u;
            v48 = 0u;
            v49 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v43 = 136315906;
            *(_QWORD *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            v44 = 2048;
            v45 = v6;
            v46 = 2048;
            v47 = v16;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_45:
            *(_QWORD *)v39 = 0;
            v51 = 0u;
            v52 = 0u;
            v50 = 0u;
            v48 = 0u;
            v49 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v43 = 136315906;
            *(_QWORD *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            v44 = 2048;
            v45 = v6;
            v46 = 2048;
            v47 = v16;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_46:
            *(_QWORD *)v39 = 0;
            v51 = 0u;
            v52 = 0u;
            v50 = 0u;
            v48 = 0u;
            v49 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v43 = 136315906;
            *(_QWORD *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            v44 = 2048;
            v45 = v6;
            v46 = 2048;
            v47 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_47:
            *(_QWORD *)v39 = 0;
            v51 = 0u;
            v52 = 0u;
            v50 = 0u;
            v48 = 0u;
            v49 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v43 = 136315906;
            *(_QWORD *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            v44 = 2048;
            v45 = v6;
            v46 = 2048;
            v47 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_48:
            *(_QWORD *)v39 = 0;
            v51 = 0u;
            v52 = 0u;
            v50 = 0u;
            v48 = 0u;
            v49 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v43 = 136315906;
            *(_QWORD *)&v43[4] = "operator[]";
            *(_WORD *)&v43[12] = 1024;
            *(_DWORD *)&v43[14] = 789;
            v44 = 2048;
            v45 = v6;
            v46 = 2048;
            v47 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v17 = *((_QWORD *)this + 8);
          v18 = *(re::ecs2::SerializableMaterialParameterBlock **)(v17 + 24 * v6);
          if (!v18)
            v18 = *(re::ecs2::SerializableMaterialParameterBlock **)(v17 + 24 * v6 + 8);
          re::ecs2::SerializableMaterialParameterBlock::colorGamut3FValue(v18, *(const char **)(v14 + 320 * v13 + 16), (uint64_t)v39);
          v41 = *(_OWORD *)&v39[4];
          v16 = *((_QWORD *)this + 6);
          if (v16 <= v6)
            goto LABEL_44;
          v19 = *((_QWORD *)this + 8) + 24 * v6;
          ++*(_DWORD *)(v19 + 16);
          v20 = *(_QWORD *)v19;
          v21 = *(char **)(*(_QWORD *)(v7 + 320) + 320 * v13 + 16);
          *(_QWORD *)&v22 = re::ColorGamut3F::as((uint64_t *)&v41, 0, 3);
          DWORD2(v22) = v23;
          v48 = v22;
          v24 = (unsigned __int8 *)&v48;
          v25 = v20;
          v26 = v21;
          v27 = 33;
        }
        re::ecs2::SerializableMaterialParameterBlock::setValue<void const*>(v25, v26, v27, v24);
        ++*(_DWORD *)(v20 + 400);
LABEL_27:
        v32 = *(_DWORD *)(v7 + 336);
        if (v32 <= (int)v11 + 1)
          v33 = v11 + 1;
        else
          v33 = *(_DWORD *)(v7 + 336);
        while (1)
        {
          v13 = (v11 + 1);
          if (v33 - 1 == (_DWORD)v11)
            break;
          LODWORD(v11) = v11 + 1;
          v34 = v13;
          if ((*(_DWORD *)(*(_QWORD *)(v7 + 320) + 320 * v13) & 0x80000000) != 0)
            goto LABEL_34;
        }
        v34 = v33;
LABEL_34:
        LODWORD(v11) = v34;
      }
      while (v32 != v34);
      v5 = v37;
      v9 = *v38;
LABEL_36:
      if (!v9)
        v9 = *(_QWORD *)(v8 + 24 * v6 + 8);
      v7 = *((_QWORD *)this + 16);
      if (v7 <= v6)
        goto LABEL_47;
      v35 = *((_QWORD *)this + 18) + 408 * v6;
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 16, v9 + 16);
      re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 64, v9 + 64);
      re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 112, v9 + 112);
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 160, v9 + 160);
      re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::operator=(v35 + 208, v9 + 208);
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 256, v9 + 256);
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 304, v9 + 304);
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(v35 + 352, v9 + 352);
      *(_BYTE *)(v35 + 404) = *(_BYTE *)(v9 + 404);
      *(_DWORD *)(v35 + 400) = 0;
      v7 = *((_QWORD *)this + 16);
      if (v7 <= v6)
        goto LABEL_48;
      *(_DWORD *)(*((_QWORD *)this + 18) + 408 * v6 + 400) = *(_DWORD *)(v8 + 24 * v6 + 16);
      ++v6;
    }
    while (v6 != v5);
  }
  *a2 = 1;
}

uint64_t *re::ecs2::allocInfo_MaterialParameterBlockArrayComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541131B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541131B8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113850, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254113860 = 0;
    qword_254113870 = 0;
    qword_254113878 = 0xFFFFFFFFLL;
    qword_254113850 = (uint64_t)&off_24ED7DAA8;
    qword_254113880 = (uint64_t)"MaterialParameterBlockArrayComponent";
    dword_254113888 = 0;
    xmmword_254113890 = 0u;
    xmmword_2541138A0 = 0u;
    xmmword_2541138B0 = 0u;
    qword_2541138C0 = 0;
    __cxa_guard_release(&qword_2541131B8);
  }
  return &qword_254113850;
}

void re::ecs2::initInfo_MaterialParameterBlockArrayComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  uint64_t *v12;
  re::IntrospectionBase *v13;
  int v14;
  re::IntrospectionRegistry *v15;
  const re::IntrospectionBase *v16;
  const char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned __int8 v23;
  uint64_t *v24;
  unsigned __int8 v25;
  const re::IntrospectionBase *v26;
  unsigned __int8 v27;
  int v28;
  re::IntrospectionRegistry *v29;
  const re::IntrospectionBase *v30;
  const char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re *v41;
  uint64_t *v42;
  uint64_t *v43;
  unsigned __int8 v44;
  uint64_t *v45;
  re::IntrospectionBase *v46;
  re::IntrospectionRegistry *v47;
  const re::IntrospectionBase *v48;
  const char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t *v52;
  const re::IntrospectionBase *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char *__s1[2];
  __int128 v63;
  const char *v64;

  *(_QWORD *)&v63 = 0x33A7E1F6E0F9D61ELL;
  *((_QWORD *)&v63 + 1) = "MaterialParameterBlockArrayComponent";
  re::StringID::destroyString((re::StringID *)&v63);
  *((_OWORD *)this + 2) = v58;
  v4 = atomic_load((unsigned __int8 *)&qword_2541131B0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541131B0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "ecs2::Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254113268 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = v9;
      v11 = atomic_load((unsigned __int8 *)&qword_254113230);
      if ((v11 & 1) == 0)
      {
        v9 = (uint64_t *)__cxa_guard_acquire(&qword_254113230);
        if ((_DWORD)v9)
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113418, 0);
          *(_QWORD *)(v38 + 22) = 0;
          qword_254113428 = 0;
          *(_QWORD *)&xmmword_254113438 = 0;
          *((_QWORD *)&xmmword_254113438 + 1) = 0xFFFFFFFFLL;
          qword_254113418 = (uint64_t)&off_24ED1FA08;
          qword_254113450 = 0;
          re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254113448);
          qword_254113418 = (uint64_t)&off_24ED6B4E0;
          __cxa_guard_release(&qword_254113230);
        }
      }
      if ((byte_25411313A & 1) == 0)
      {
        v12 = (uint64_t *)qword_254113190;
        if (qword_254113190
          || (v12 = re::ecs2::allocInfo_SerializableMaterialParameterBlock((re::ecs2 *)v9),
              qword_254113190 = (uint64_t)v12,
              re::ecs2::initInfo_SerializableMaterialParameterBlock((re::ecs2 *)v12, v13),
              (byte_25411313A & 1) == 0))
        {
          byte_25411313A = 1;
          v14 = *((_DWORD *)v12 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113418, 0);
          qword_254113428 = 0x2800000003;
          dword_254113430 = v14;
          word_254113434 = 0;
          *(_QWORD *)&xmmword_254113438 = 0;
          *((_QWORD *)&xmmword_254113438 + 1) = 0xFFFFFFFFLL;
          qword_254113448 = (uint64_t)v12;
          qword_254113450 = 0;
          qword_254113418 = (uint64_t)&off_24ED6B4E0;
          re::IntrospectionRegistry::add(v15, v16);
          re::getPrettyTypeName((re *)&qword_254113418, (const re::IntrospectionBase *)&v63);
          if ((BYTE8(v63) & 1) != 0)
            v17 = v64;
          else
            v17 = (char *)&v63 + 9;
          if ((_QWORD)v63 && (BYTE8(v63) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v63 + 40))();
          v60 = *((_OWORD *)v12 + 2);
          v18 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v61);
          if (v18)
          {
            v19 = *v18;
            *((_QWORD *)&v59 + 1) = v19;
          }
          else
          {
            *(_OWORD *)__s1 = v60;
            re::TypeBuilder::beginListType((uint64_t)&v63, (uint64_t *)&v61, 1, 0x28uLL, 8uLL, (__int128 *)__s1);
            re::TypeBuilder::setConstructor((uint64_t)&v63, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v63, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v63, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v63, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v63, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v63, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v63, v20);
          }
          xmmword_254113438 = v59;
          re::StringID::destroyString((re::StringID *)&v61);
        }
      }
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "blocks";
      *(_QWORD *)(v21 + 16) = &qword_254113418;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x7000000001;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254113270 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v23 = atomic_load((unsigned __int8 *)&qword_254113238);
      if ((v23 & 1) == 0 && __cxa_guard_acquire(&qword_254113238))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113458, 0);
        *(_QWORD *)(v39 + 22) = 0;
        qword_254113468 = 0;
        *(_QWORD *)&xmmword_254113478 = 0;
        *((_QWORD *)&xmmword_254113478 + 1) = 0xFFFFFFFFLL;
        qword_254113458 = (uint64_t)&off_24ED1FA08;
        qword_254113490 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254113488);
        qword_254113458 = (uint64_t)&off_24ED6B578;
        __cxa_guard_release(&qword_254113238);
      }
      if ((byte_25411313B & 1) == 0)
      {
        v24 = (uint64_t *)qword_2541131A8;
        if (qword_2541131A8)
          goto LABEL_24;
        v25 = atomic_load((unsigned __int8 *)&qword_2541131A0);
        if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_2541131A0))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541137D8, 0);
          *(_QWORD *)(v40 + 22) = 0;
          qword_2541137E8 = 0;
          *(_QWORD *)&xmmword_2541137F8 = 0;
          *((_QWORD *)&xmmword_2541137F8 + 1) = 0xFFFFFFFFLL;
          qword_2541137D8 = (uint64_t)&off_24ED7DAA8;
          qword_254113808 = (uint64_t)"SerializableMaterialParameterBlockHandle";
          dword_254113810 = 0;
          *(_OWORD *)(v40 + 64) = 0u;
          *(_OWORD *)(v40 + 80) = 0u;
          *(_OWORD *)(v40 + 96) = 0u;
          qword_254113848 = 0;
          __cxa_guard_release(&qword_2541131A0);
        }
        qword_2541131A8 = (uint64_t)&qword_2541137D8;
        *(_QWORD *)&v63 = 0x4487493BFBA6DC64;
        *((_QWORD *)&v63 + 1) = "SerializableMaterialParameterBlockHandle";
        re::StringID::destroyString((re::StringID *)&v63);
        xmmword_2541137F8 = v60;
        v27 = atomic_load((unsigned __int8 *)&qword_254113198);
        if ((v27 & 1) == 0)
        {
          v41 = (re *)__cxa_guard_acquire(&qword_254113198);
          if ((_DWORD)v41)
          {
            v42 = re::introspectionAllocator(v41);
            v43 = v42;
            v44 = atomic_load((unsigned __int8 *)&qword_254113208);
            if ((v44 & 1) == 0)
            {
              v42 = (uint64_t *)__cxa_guard_acquire(&qword_254113208);
              if ((_DWORD)v42)
              {
                ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541133D8, 0);
                *(_QWORD *)(v56 + 22) = 0;
                qword_2541133E8 = 0;
                *(_QWORD *)&xmmword_2541133F8 = 0;
                *((_QWORD *)&xmmword_2541133F8 + 1) = 0xFFFFFFFFLL;
                qword_2541133D8 = (uint64_t)&off_24ED30800;
                qword_254113410 = 0;
                re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254113408);
                __cxa_guard_release(&qword_254113208);
              }
            }
            if ((byte_254113139 & 1) == 0)
            {
              byte_254113139 = 1;
              v45 = (uint64_t *)qword_254113190;
              if (!qword_254113190)
              {
                v45 = re::ecs2::allocInfo_SerializableMaterialParameterBlock((re::ecs2 *)v42);
                qword_254113190 = (uint64_t)v45;
                re::ecs2::initInfo_SerializableMaterialParameterBlock((re::ecs2 *)v45, v46);
              }
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541133D8, 0);
              qword_2541133E8 = 0x800000001;
              dword_2541133F0 = 8;
              word_2541133F4 = 0;
              *(_QWORD *)&xmmword_2541133F8 = 0;
              *((_QWORD *)&xmmword_2541133F8 + 1) = 0xFFFFFFFFLL;
              qword_2541133D8 = (uint64_t)&off_24ED30800;
              qword_254113408 = (uint64_t)v45;
              qword_254113410 = 0;
              re::IntrospectionRegistry::add(v47, v48);
              re::getPrettyTypeName((re *)&qword_2541133D8, (const re::IntrospectionBase *)&v63);
              if ((BYTE8(v63) & 1) != 0)
                v49 = v64;
              else
                v49 = (char *)&v63 + 9;
              if ((_QWORD)v63 && (BYTE8(v63) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v63 + 40))();
              if ((unint64_t)__s1[0] >> 1 == 94623636 && (__s1[1] == "char*" || !strcmp(__s1[1], "char*")))
              {
                v50 = v63;
              }
              else
              {
                v63 = *((_OWORD *)v45 + 2);
                v50 = v61;
              }
              xmmword_2541133F8 = v50;
              re::StringID::destroyString((re::StringID *)__s1);
            }
            v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 72, 8);
            *(_DWORD *)v51 = 1;
            *(_QWORD *)(v51 + 8) = "blockRawPtr";
            *(_QWORD *)(v51 + 16) = &qword_2541133D8;
            *(_QWORD *)(v51 + 24) = 0;
            *(_QWORD *)(v51 + 32) = 1;
            *(_DWORD *)(v51 + 40) = 0;
            *(_QWORD *)(v51 + 48) = 0;
            *(_QWORD *)(v51 + 56) = 0;
            *(_DWORD *)(v51 + 64) = 0;
            qword_254113240 = v51;
            v52 = re::introspectionAllocator((re *)v51);
            v54 = re::introspect_uint32_t((re *)1, v53);
            v55 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 72, 8);
            *(_DWORD *)v55 = 1;
            *(_QWORD *)(v55 + 8) = "m_networkVersion";
            *(_QWORD *)(v55 + 16) = v54;
            *(_QWORD *)(v55 + 24) = 0;
            *(_QWORD *)(v55 + 32) = 0x1000000002;
            *(_DWORD *)(v55 + 40) = 0;
            *(_QWORD *)(v55 + 48) = 0;
            *(_QWORD *)(v55 + 56) = 0;
            *(_DWORD *)(v55 + 64) = 0;
            qword_254113248 = v55;
            __cxa_guard_release(&qword_254113198);
          }
        }
        qword_2541137E8 = 0x1800000008;
        v24 = &qword_2541137D8;
        dword_2541137F0 = 8;
        word_2541137F4 = 0;
        dword_254113810 = 2;
        qword_254113818 = (uint64_t)&qword_254113240;
        qword_254113820 = (uint64_t)re::internal::defaultConstruct<re::ecs2::SerializableMaterialParameterBlockHandle>;
        qword_254113828 = (uint64_t)re::internal::defaultDestruct<re::ecs2::SerializableMaterialParameterBlockHandle>;
        qword_254113838 = 0;
        qword_254113830 = 0;
        qword_254113840 = (uint64_t)re::internal::defaultConstructV2<re::ecs2::SerializableMaterialParameterBlockHandle>;
        qword_254113848 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::SerializableMaterialParameterBlockHandle>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541137D8, v26);
        v63 = v60;
        if ((byte_25411313B & 1) == 0)
        {
LABEL_24:
          byte_25411313B = 1;
          v28 = *((_DWORD *)v24 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113458, 0);
          qword_254113468 = 0x2800000003;
          dword_254113470 = v28;
          word_254113474 = 0;
          *(_QWORD *)&xmmword_254113478 = 0;
          *((_QWORD *)&xmmword_254113478 + 1) = 0xFFFFFFFFLL;
          qword_254113488 = (uint64_t)v24;
          qword_254113490 = 0;
          qword_254113458 = (uint64_t)&off_24ED6B578;
          re::IntrospectionRegistry::add(v29, v30);
          re::getPrettyTypeName((re *)&qword_254113458, (const re::IntrospectionBase *)&v63);
          if ((BYTE8(v63) & 1) != 0)
            v31 = v64;
          else
            v31 = (char *)&v63 + 9;
          if ((_QWORD)v63 && (BYTE8(v63) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v63 + 40))();
          v60 = *((_OWORD *)v24 + 2);
          v32 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v61);
          if (v32)
          {
            v33 = *v32;
            *((_QWORD *)&v59 + 1) = v33;
          }
          else
          {
            *(_OWORD *)__s1 = v60;
            re::TypeBuilder::beginListType((uint64_t)&v63, (uint64_t *)&v61, 1, 0x28uLL, 8uLL, (__int128 *)__s1);
            re::TypeBuilder::setConstructor((uint64_t)&v63, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v63, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v63, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v63, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v63, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v63, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v63, v34);
          }
          xmmword_254113478 = v59;
          re::StringID::destroyString((re::StringID *)&v61);
        }
      }
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "blockHandles";
      *(_QWORD *)(v35 + 16) = &qword_254113458;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x2000000002;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_254113278 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 64, 8);
      *(_DWORD *)v37 = 6;
      *(_QWORD *)(v37 + 8) = 1;
      *(_QWORD *)(v37 + 16) = 0;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0;
      *(_BYTE *)(v37 + 40) = 1;
      *(_QWORD *)(v37 + 48) = re::ecs2::MaterialParameterBlockArrayComponentVersionUtilities::downgradeMaterialParameterBlockArrayComponentFromFall2023;
      *(_DWORD *)(v37 + 56) = 2;
      qword_254113280 = v37;
      __cxa_guard_release(&qword_2541131B0);
    }
  }
  *((_QWORD *)this + 2) = 0x9800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254113268;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialParameterBlockArrayComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialParameterBlockArrayComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialParameterBlockArrayComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialParameterBlockArrayComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v57 = v58;
}

double re::internal::defaultConstruct<re::ecs2::MaterialParameterBlockArrayComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 18) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59240;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MaterialParameterBlockArrayComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::MaterialParameterBlockArrayComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED59240;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_DWORD *)(v1 + 136) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MaterialParameterBlockArrayComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MaterialParameterBlockArrayComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParameterBlockArrayComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialParameterBlockArrayComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialParameterBlockArrayComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialParameterBlockArrayComponent>, this);
}

void re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(re::ecs2::MaterialParameterBlockArrayComponent *this, unint64_t a2)
{
  unint64_t v4;
  re *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = *((_QWORD *)this + 6);
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize((uint64_t)this + 32, a2);
  if (v4 < a2)
  {
    v6 = 24 * v4;
    do
    {
      if (*((_QWORD *)this + 6) <= v4)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v7 = *((_QWORD *)this + 8) + v6;
      v8 = re::globalAllocators(v5);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 408, 8);
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 80) = 0u;
      *(_OWORD *)(v9 + 96) = 0u;
      *(_OWORD *)(v9 + 112) = 0u;
      *(_OWORD *)(v9 + 128) = 0u;
      *(_OWORD *)(v9 + 144) = 0u;
      *(_OWORD *)(v9 + 160) = 0u;
      *(_OWORD *)(v9 + 176) = 0u;
      *(_OWORD *)(v9 + 192) = 0u;
      *(_OWORD *)(v9 + 208) = 0u;
      *(_OWORD *)(v9 + 224) = 0u;
      *(_OWORD *)(v9 + 240) = 0u;
      *(_OWORD *)(v9 + 256) = 0u;
      *(_OWORD *)(v9 + 272) = 0u;
      *(_OWORD *)(v9 + 288) = 0u;
      *(_OWORD *)(v9 + 304) = 0u;
      *(_OWORD *)(v9 + 320) = 0u;
      *(_OWORD *)(v9 + 336) = 0u;
      *(_OWORD *)(v9 + 352) = 0u;
      *(_OWORD *)(v9 + 368) = 0u;
      *(_OWORD *)(v9 + 384) = 0u;
      *(_QWORD *)(v9 + 400) = 0;
      re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v9);
      ++*(_DWORD *)(v7 + 16);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v7, v9);
      *(_QWORD *)(v7 + 8) = 0;

      ++v4;
      v6 += 24;
    }
    while (a2 != v4);
  }
}

void re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 24 * a2;
    v9 = a2;
    do
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(v10 + v8);
      if (v11)
      {

        *(_QWORD *)(v10 + v8) = 0;
        v4 = *(_QWORD *)(a1 + 16);
      }
      ++v9;
      v8 += 24;
    }
    while (v9 < v4);
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 24 * v4;
      do
      {
        v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + v6);
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 1;
        v6 += 24;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

void re::ecs2::MaterialParameterBlockArrayComponent::updateParameterBlockValue(re::ecs2::MaterialParameterBlockArrayComponent *this, const re::RenderManager *a2, const char **a3, re::ecs2::SerializedMaterialParameter *a4, re::MaterialParameterBlock *a5, re::ecs2::Scene *a6, BOOL *a7)
{
  re::MaterialParameterBlock *v7;
  unint64_t v8;
  char *v14;
  char v15;
  uint64_t v16;
  unint64_t isParameterType;
  int v18;
  NSObject *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint8_t *v25;
  re::MaterialParameterBlock *v26;
  uint64_t *v27;
  size_t v28;
  uint64_t v29;
  id *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char v35;
  char *v36;
  __int128 *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  id v53;
  id v54;
  id v55;
  int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59[4];
  void *v60;
  id v61;
  uint64_t v62[4];
  uint64_t v63[4];
  uint64_t v64[4];
  uint64_t v65[4];
  _OWORD v66[4];
  char v67;
  _OWORD v68[3];
  char v69;
  char v70;
  __int128 v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  __int128 v78;
  char v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  uint64_t v92;
  uint8_t buf[32];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int v98;
  uint64_t v100;
  _BYTE v101[12];
  __int16 v102;
  int v103;
  __int16 v104;
  re::MaterialParameterBlock *v105;
  __int16 v106;
  unint64_t v107;
  uint64_t v108;

  v7 = a5;
  v108 = *MEMORY[0x24BDAC8D0];
  *a7 = 0;
  v8 = *((_QWORD *)this + 11);
  if (v8 <= (unint64_t)a5)
  {
    v92 = 0;
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    memset(buf, 0, sizeof(buf));
    v14 = (char *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v101 = 136315906;
    *(_QWORD *)&v101[4] = "operator[]";
    v102 = 1024;
    v103 = 789;
    v104 = 2048;
    v105 = v7;
    v106 = 2048;
    v107 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_125;
  }
  v7 = *(re::MaterialParameterBlock **)(*((_QWORD *)this + 13) + 8 * (_QWORD)a5);
  v14 = (char *)a4 + 256;
  v15 = *((_BYTE *)a4 + 268);
  if ((v15 & 7) == 0
    || (v16 = *((_QWORD *)a4 + 34), isParameterType = re::MaterialParameterBlock::keysHash(v7), v16 != isParameterType))
  {
    isParameterType = re::MaterialParameterBlock::handle(v7, a3[1], (uint64_t)buf);
    *((_QWORD *)a4 + 32) = *(_QWORD *)buf;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)&buf[8];
    *((_BYTE *)a4 + 280) = buf[24];
    v15 = *((_BYTE *)a4 + 268);
  }
  v18 = *(unsigned __int8 *)a4;
  if ((v15 & 7) != 0)
  {
    isParameterType = re::MaterialParameterHandle::isParameterType((uint64_t)v14, *(unsigned __int8 *)a4);
    if (!(_DWORD)isParameterType)
      return;
  }
  if (v18 <= 47)
  {
    switch(v18)
    {
      case 0:
        v19 = *re::graphicsLogObjects((re *)isParameterType);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          v20 = *(unsigned __int8 *)a4;
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v20;
          _os_log_error_impl(&dword_224FE9000, v19, OS_LOG_TYPE_ERROR, "Unsupported m_material parameter type %hhu", buf, 8u);
        }
        return;
      case 1:
        *(_DWORD *)buf = *((_DWORD *)a4 + 4);
        v24 = &v90;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 4;
        v29 = 1;
        goto LABEL_93;
      case 2:
        buf[0] = *((_BYTE *)a4 + 16) != 0;
        v24 = &v91;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 1;
        v29 = 2;
        goto LABEL_93;
      case 3:
        *(_DWORD *)buf = *((_DWORD *)a4 + 4);
        v24 = &v89;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 4;
        v29 = 3;
        goto LABEL_93;
      case 4:
        *(_QWORD *)buf = *((_QWORD *)a4 + 2);
        v24 = &v86;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 8;
        v29 = 4;
        goto LABEL_93;
      case 5:
        *(_OWORD *)buf = *((_OWORD *)a4 + 1);
        v24 = &v82;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 16;
        v29 = 5;
        goto LABEL_93;
      case 6:
        *(_OWORD *)buf = *((_OWORD *)a4 + 1);
        v24 = &v76;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 16;
        v29 = 6;
        goto LABEL_93;
      case 7:
        *(_DWORD *)buf = *((_DWORD *)a4 + 4);
        v24 = &v88;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 4;
        v29 = 7;
        goto LABEL_93;
      case 8:
        *(_QWORD *)buf = *((_QWORD *)a4 + 2);
        v24 = &v85;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 8;
        v29 = 8;
        goto LABEL_93;
      case 9:
        *(_OWORD *)buf = *((_OWORD *)a4 + 1);
        v24 = &v81;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 16;
        v29 = 9;
        goto LABEL_93;
      case 10:
        *(_OWORD *)buf = *((_OWORD *)a4 + 1);
        v24 = &v75;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 16;
        v29 = 10;
        goto LABEL_93;
      case 20:
        if (!*((_BYTE *)a4 + 248))
          *((_BYTE *)a4 + 248) = 1;
        v32 = *((_QWORD *)a4 + 2);
        v33 = *((unsigned int *)a4 + 6) | ((unint64_t)*((unsigned __int8 *)a4 + 32) << 32);
        v34 = &v74;
        goto LABEL_69;
      case 21:
        if (!*((_BYTE *)a4 + 248))
          *((_BYTE *)a4 + 248) = 1;
        v35 = *((_DWORD *)a4 + 8);
        v71 = *((_OWORD *)a4 + 1);
        v72 = v35;
        v36 = &v73;
        v37 = &v71;
        goto LABEL_72;
      case 32:
        *(_QWORD *)buf = *((_QWORD *)a4 + 2);
        v24 = &v87;
        v25 = buf;
        v26 = v7;
        v27 = (uint64_t *)v14;
        v28 = 8;
        v29 = 32;
        goto LABEL_93;
      case 33:
        if (!*((_BYTE *)a4 + 248))
        {
          v47 = *((_QWORD *)a4 + 2);
          *(_QWORD *)&buf[8] = *((_QWORD *)a4 + 3);
          *(_QWORD *)buf = v47;
          v24 = &v83;
          v25 = buf;
          v26 = v7;
          v27 = (uint64_t *)v14;
          v28 = 16;
          v29 = 33;
          goto LABEL_93;
        }
        v32 = *((_QWORD *)a4 + 2);
        v33 = *((unsigned int *)a4 + 6);
        v34 = &v84;
LABEL_69:
        re::MaterialParameterBlock::setColorGamut3F(v7, (uint64_t *)v14, v32, v33, (uint64_t)v34);
        return;
      case 34:
        if (!*((_BYTE *)a4 + 248))
        {
          v48 = *((_QWORD *)a4 + 2);
          *(_QWORD *)&buf[8] = *((_QWORD *)a4 + 3);
          *(_QWORD *)buf = v48;
          v24 = &v77;
          v25 = buf;
          v26 = v7;
          v27 = (uint64_t *)v14;
          v28 = 16;
          v29 = 34;
          goto LABEL_93;
        }
        v78 = *((_OWORD *)a4 + 1);
        v79 = 0;
        v36 = &v80;
        v37 = &v78;
LABEL_72:
        re::MaterialParameterBlock::setColorGamut4F(v7, (uint64_t *)v14, (uint64_t)v37, (uint64_t)v36);
        break;
      default:
        return;
    }
    return;
  }
  if (v18 > 63)
  {
    if (v18 != 64)
    {
      if (v18 != 128)
      {
        if (v18 != 192 || !a2)
          return;
        v30 = (id *)*((_QWORD *)a2 + 6);
        buf[0] = *((_BYTE *)a4 + 104);
        buf[1] = *((_BYTE *)a4 + 105);
        if (buf[1])
          buf[2] = *((_BYTE *)a4 + 106);
        buf[3] = *((_BYTE *)a4 + 107);
        if (buf[3])
          buf[4] = *((_BYTE *)a4 + 108);
        buf[8] = *((_BYTE *)a4 + 112);
        if (buf[8])
          *(_DWORD *)&buf[12] = *((_DWORD *)a4 + 29);
        buf[16] = *((_BYTE *)a4 + 120);
        if (buf[16])
          *(_DWORD *)&buf[20] = *((_DWORD *)a4 + 31);
        buf[24] = *((_BYTE *)a4 + 128);
        if (buf[24])
          *(_DWORD *)&buf[28] = *((_DWORD *)a4 + 33);
        LOBYTE(v94) = *((_BYTE *)a4 + 136);
        if ((_BYTE)v94)
          DWORD1(v94) = *((_DWORD *)a4 + 35);
        BYTE8(v94) = *((_BYTE *)a4 + 144);
        if (BYTE8(v94))
          HIDWORD(v94) = *((_DWORD *)a4 + 37);
        LOBYTE(v95) = *((_BYTE *)a4 + 152);
        if ((_BYTE)v95)
          DWORD1(v95) = *((_DWORD *)a4 + 39);
        BYTE8(v95) = *((_BYTE *)a4 + 160);
        if (BYTE8(v95))
          HIDWORD(v95) = *((_DWORD *)a4 + 41);
        LOBYTE(v96) = *((_BYTE *)a4 + 168);
        if ((_BYTE)v96)
          DWORD1(v96) = *((_DWORD *)a4 + 43);
        BYTE8(v96) = *((_BYTE *)a4 + 176);
        if (BYTE8(v96))
          HIDWORD(v96) = *((_DWORD *)a4 + 45);
        if (*((_BYTE *)a4 + 184))
          v98 = *((_DWORD *)a4 + 47);
        if (*((_BYTE *)a4 + 192))
          v100 = *((_QWORD *)a4 + 25);
        re::OptionalMaterialSamplerData::makeSamplerData((re::OptionalMaterialSamplerData *)buf, (uint64_t)v101);
        re::MaterialSamplerData::makeDescriptor((re::MaterialSamplerData *)v101, &v60);
        v61 = objc_msgSend(*v30, sel_newSamplerStateWithDescriptor_, v60);
        re::MaterialParameterBlock::setSampler(v7, (uint64_t)v14, &v61, (uint64_t)v62);
        v62[0] = 0;
        if (v61)
        {

          v61 = 0;
        }
        v31 = v60;
        if (!v60)
          return;
        goto LABEL_123;
      }
      if (!a2 || !_os_feature_enabled_impl())
        return;
      *(_QWORD *)buf = 0;
      if ((*((_BYTE *)a4 + 268) & 7) != 0)
      {
        v43 = (void **)re::MaterialParameterBlock::bufferValue((uint64_t)v7, (uint64_t)v14);
        NS::SharedPtr<MTL::Texture>::operator=((void **)buf, v43);
        v44 = objc_msgSend(*(id *)buf, sel_length);
        v45 = *(void **)buf;
        if (v44 == *((id *)a4 + 28))
        {
          if (*(_QWORD *)buf)
            goto LABEL_120;
        }
        else
        {

          *(_QWORD *)buf = 0;
        }
      }
      v53 = *((id *)a2 + 23);
      *(_QWORD *)v101 = objc_msgSend(v53, sel_newBufferWithLength_options_, *((_QWORD *)a4 + 28), 0);
      NS::SharedPtr<MTL::Texture>::operator=((void **)buf, (void **)v101);
      if (*(_QWORD *)v101)

      v45 = *(void **)buf;
LABEL_120:
      memcpy(objc_msgSend(v45, sel_contents), *((const void **)a4 + 30), *((_QWORD *)a4 + 28));
      v58 = (unint64_t)*a3 >> 1;
      v54 = *(id *)buf;
      v55 = v54;
      v56 = 0;
      v57 = objc_msgSend(*(id *)buf, sel_length);
      re::MaterialParameterBlock::setBuffer(v7, (uint64_t *)&v58, (uint64_t)&v55, (uint64_t)v59);
      v59[0] = 0;
      if (v54)

      v31 = *(void **)buf;
      if (!*(_QWORD *)buf)
        return;
LABEL_123:

      return;
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (re::ecs2::SerializedMaterialParameter *)((char *)a4 + 80));
    v40 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)buf);
    if (!v40)
    {
      re::AssetHandle::loadAsync((re::AssetHandle *)buf);
      *a7 = 1;
LABEL_115:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
      return;
    }
    v8 = v40;
    if (a6 && (v41 = *((_QWORD *)a6 + 47)) != 0)
      v42 = *(_QWORD *)(v41 + 24);
    else
      v42 = 1;
    *(_QWORD *)(v40 + 104) = v42;
    v46 = *(_QWORD *)(v40 + 96);
    if (v46
      && (!*(_BYTE *)(v46 + 295) && *(_BYTE *)(v46 + 46) && *(_QWORD *)(v46 + 304) < 2uLL
       || !*(_BYTE *)(v46 + 294)
       || *(_QWORD *)(v46 + 304) != v42))
    {
      re::DrawableQueue::setActiveRealityRendererScene((re::DrawableQueue *)v46, v42);
    }
    if (!a2)
      goto LABEL_114;
    if (*(_DWORD *)(v8 + 240))
    {
      v49 = *re::graphicsLogObjects((re *)v46);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = re::AssetHandle::assetInfo((re::AssetHandle *)buf);
        if ((v50[17] & 1) != 0)
          v51 = (char *)v50[18];
        else
          v51 = (char *)v50 + 137;
        *(_DWORD *)v101 = 136315138;
        *(_QWORD *)&v101[4] = v51;
        _os_log_error_impl(&dword_224FE9000, v49, OS_LOG_TYPE_ERROR, "Invalid material parameter: texture not backed by Metal: %s", v101, 0xCu);
      }
      goto LABEL_115;
    }
    if (!re::MaterialAsset::isColorTextureParameter((re::MaterialAsset *)a3, (const re::StringID *)v42)
      && !*((_BYTE *)a4 + 248)
      || !re::TextureAsset::isLegacyLinearFormatWithSRGBData((re::TextureAsset *)v8))
    {
LABEL_114:
      re::MaterialParameterBlock::setTextureHandle(v7, (uint64_t)v14, (re::TextureHandle *)(v8 + 48), (uint64_t)v63);
      v63[0] = 0;
      goto LABEL_115;
    }
    v52 = (_QWORD *)(v8 + 136);
    if (*(_QWORD *)(v8 + 144) && *v52
      || (re::TextureAsset::addLegacyLinearFormatWithSRGBDataTexture((os_unfair_lock_s **)v8, (os_unfair_lock_s **)a2),
          *(_QWORD *)(v8 + 144))
      && *v52)
    {
      re::MaterialParameterBlock::setTextureHandle(v7, (uint64_t)v14, (re::TextureHandle *)(v8 + 136), (uint64_t)v65);
      v65[0] = 0;
      goto LABEL_115;
    }
LABEL_125:
    re::MaterialParameterBlock::setTextureHandle(v7, (uint64_t)v14, (re::TextureHandle *)(v8 + 48), (uint64_t)v64);
    v64[0] = 0;
    goto LABEL_115;
  }
  switch(v18)
  {
    case '0':
      *(_OWORD *)buf = *((_OWORD *)a4 + 1);
      v24 = &v70;
      v25 = buf;
      v26 = v7;
      v27 = (uint64_t *)v14;
      v28 = 16;
      v29 = 48;
      break;
    case '1':
      v38 = *((_OWORD *)a4 + 2);
      v39 = *((_OWORD *)a4 + 3);
      v68[0] = *((_OWORD *)a4 + 1);
      v68[1] = v38;
      v68[2] = v39;
      v24 = &v69;
      v25 = (uint8_t *)v68;
      v26 = v7;
      v27 = (uint64_t *)v14;
      v28 = 48;
      v29 = 49;
      break;
    case '2':
      v21 = *((_OWORD *)a4 + 2);
      v22 = *((_OWORD *)a4 + 3);
      v23 = *((_OWORD *)a4 + 4);
      v66[0] = *((_OWORD *)a4 + 1);
      v66[1] = v21;
      v66[2] = v22;
      v66[3] = v23;
      v24 = &v67;
      v25 = (uint8_t *)v66;
      v26 = v7;
      v27 = (uint64_t *)v14;
      v28 = 64;
      v29 = 50;
      break;
    default:
      return;
  }
LABEL_93:
  re::MaterialParameterBlock::setConstant(v28, v25, v26, v27, v29, (uint64_t)v24);
}

_QWORD *re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(_QWORD *this)
{
  unint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  re *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  const re::ecs2::SerializableMaterialParameterBlock *v9;
  uint64_t *v10;
  uint64_t v11;

  v1 = this[16];
  if (v1)
  {
    v2 = this;
    v3 = this + 14;
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize((uint64_t)(this + 4), v1);
    v5 = 0;
    v6 = 0;
    for (i = 0; i != v1; ++i)
    {
      if (v2[6] <= i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_11:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v2[16] <= i)
        goto LABEL_11;
      v8 = v2[8] + v6;
      v9 = (const re::ecs2::SerializableMaterialParameterBlock *)(v2[18] + v5);
      v10 = re::globalAllocators(v4);
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 408, 8);
      re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v11, v9);
      ++*(_DWORD *)(v8 + 16);
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v8, v11);
      *(_QWORD *)(v8 + 8) = 0;
      if (v11)

      v6 += 24;
      v5 += 408;
    }
    return re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::clear(v3);
  }
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 0;
    v4 = result[4];
    v5 = 408 * v2;
    do
    {
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 352));
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 304));
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 256));
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v4 + v3 + 208));
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 160));
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 112));
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 64));
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v4 + v3 + 16));
      *(_QWORD *)(v4 + v3) = &off_24ED426B8;
      result = objc_destructInstance((id)(v4 + v3 + 8));
      v3 += 408;
    }
    while (v5 != v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

BOOL re::ecs2::MaterialParameterBlockArrayComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v8;
  uint64_t v9;
  re::ecs2::MaterialParameterBlockArrayComponent *v12;
  re *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t *v19;
  re::MaterialParameterBlock *v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  re::MaterialParameterBlock *v27;
  char *v28;
  re::MaterialParameterBlock *v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  StringID *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  char **v51;
  char **v52;
  char *v53;
  uint64_t v54;
  char v55;
  unsigned __int8 *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  char v96;
  unsigned __int8 *v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  char v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  __int128 v122;
  unint64_t v125;
  unint64_t v126;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v134;
  _BOOL4 v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  int v139;
  _QWORD *v140;
  re::ecs2::MaterialParameterBlockArrayComponent *v141;
  re::MaterialParameterBlock *v142;
  re::MaterialParameterBlock *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  __int128 v154;
  BOOL v155[32];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _BYTE v159[20];
  _BYTE v160[20];
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 && *(_QWORD *)(v8 + 104))
  {
    v9 = a1;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v155, a5, 0);
    v153 = a4;
    v154 = *(_OWORD *)v155;
    v132 = a5;
    if (*(_QWORD *)v155 != a5
      || *(unsigned __int16 *)&v155[8] != 0xFFFFLL
      || (*(_DWORD *)&v155[8] & 0xFFFF0000) != 4294901760)
    {
      v134 = v9;
      do
      {
        v12 = *(re::ecs2::MaterialParameterBlockArrayComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v154);
        v13 = (re *)re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(v12);
        v14 = *((_QWORD *)v12 + 6);
        if (*((_QWORD *)v12 + 11) < v14)
        {
          re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)v12 + 72, *((_QWORD *)v12 + 6));
          v14 = *((_QWORD *)v12 + 6);
        }
        if (*(_QWORD *)(v9 + 8))
        {
          if (v14)
          {
            v15 = 0;
            v16 = *((_QWORD *)v12 + 8);
            v17 = 1;
            while (1)
            {
              if (*(_DWORD *)(v16 + 24 * v15 + 16))
              {
                v18 = *((_QWORD *)v12 + 11);
                if (v18 <= v15)
                  goto LABEL_242;
                if (!*(_QWORD *)(*((_QWORD *)v12 + 13) + 8 * v15))
                {
                  v19 = re::globalAllocators(v13);
                  v20 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2], 1008, 8);
                  v13 = re::MaterialParameterBlock::MaterialParameterBlock(v20, *(re::RenderManager **)(v9 + 8));
                  v18 = *((_QWORD *)v12 + 11);
                  if (v18 <= v15)
                    goto LABEL_244;
                  v21 = *((_QWORD *)v12 + 13);
                  v22 = *(_QWORD *)(v21 + 8 * v15);
                  *(_QWORD *)(v21 + 8 * v15) = v13;
                  if (v22)

                  v14 = *((_QWORD *)v12 + 6);
                  if (v14 <= v15)
                    goto LABEL_245;
                  v16 = *((_QWORD *)v12 + 8);
                  *(_QWORD *)(v16 + 24 * v15 + 16) = 1;
                }
              }
              v15 = v17;
              if (v14 <= v17++)
                goto LABEL_27;
            }
          }
          v116 = 0;
          goto LABEL_216;
        }
        if (!v14)
        {
          v116 = 0;
LABEL_216:
          v117 = a3;
LABEL_217:
          v118 = v153;
          v119 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v154);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v117 + 16), v118, v119, *(_QWORD *)(v117 + 32));
          if ((v116 & 1) == 0)
            goto LABEL_219;
LABEL_218:
          re::ecs2::Component::markDirty(v12);
          goto LABEL_219;
        }
LABEL_27:
        v24 = 0;
        v25 = 0;
        v139 = 1;
        v137 = v14;
        v141 = v12;
        do
        {
          v18 = *((_QWORD *)v12 + 6);
          if (v18 <= v25)
          {
            v151 = 0;
            v157 = 0u;
            v158 = 0u;
            v156 = 0u;
            memset(v155, 0, sizeof(v155));
            v129 = v25;
            v25 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v159 = 136315906;
            *(_QWORD *)&v159[4] = "operator[]";
            *(_WORD *)&v159[12] = 1024;
            *(_DWORD *)&v159[14] = 789;
            *(_WORD *)&v159[18] = 2048;
            *(_QWORD *)v160 = v129;
            *(_WORD *)&v160[8] = 2048;
            *(_QWORD *)&v160[10] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_240:
            v151 = 0;
            v157 = 0u;
            v158 = 0u;
            v156 = 0u;
            memset(v155, 0, sizeof(v155));
            v130 = v25;
            v25 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v159 = 136315906;
            *(_QWORD *)&v159[4] = "operator[]";
            *(_WORD *)&v159[12] = 1024;
            *(_DWORD *)&v159[14] = 789;
            *(_WORD *)&v159[18] = 2048;
            *(_QWORD *)v160 = v130;
            *(_WORD *)&v160[8] = 2048;
            *(_QWORD *)&v160[10] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_241:
            v151 = 0;
            v157 = 0u;
            v158 = 0u;
            v156 = 0u;
            memset(v155, 0, sizeof(v155));
            v15 = v25;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v159 = 136315906;
            *(_QWORD *)&v159[4] = "operator[]";
            *(_WORD *)&v159[12] = 1024;
            *(_DWORD *)&v159[14] = 789;
            *(_WORD *)&v159[18] = 2048;
            *(_QWORD *)v160 = v25;
            *(_WORD *)&v160[8] = 2048;
            *(_QWORD *)&v160[10] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_242:
            v151 = 0;
            v157 = 0u;
            v158 = 0u;
            v156 = 0u;
            memset(v155, 0, sizeof(v155));
            v25 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v159 = 136315906;
            *(_QWORD *)&v159[4] = "operator[]";
            *(_WORD *)&v159[12] = 1024;
            *(_DWORD *)&v159[14] = 789;
            *(_WORD *)&v159[18] = 2048;
            *(_QWORD *)v160 = v15;
            *(_WORD *)&v160[8] = 2048;
            *(_QWORD *)&v160[10] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_243:
            v151 = 0;
            v157 = 0u;
            v158 = 0u;
            v156 = 0u;
            memset(v155, 0, sizeof(v155));
            v15 = v25;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v159 = 136315906;
            *(_QWORD *)&v159[4] = "operator[]";
            *(_WORD *)&v159[12] = 1024;
            *(_DWORD *)&v159[14] = 789;
            *(_WORD *)&v159[18] = 2048;
            *(_QWORD *)v160 = v25;
            *(_WORD *)&v160[8] = 2048;
            *(_QWORD *)&v160[10] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_244:
            v151 = 0;
            v157 = 0u;
            v158 = 0u;
            v156 = 0u;
            memset(v155, 0, sizeof(v155));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v159 = 136315906;
            *(_QWORD *)&v159[4] = "operator[]";
            *(_WORD *)&v159[12] = 1024;
            *(_DWORD *)&v159[14] = 789;
            *(_WORD *)&v159[18] = 2048;
            *(_QWORD *)v160 = v15;
            *(_WORD *)&v160[8] = 2048;
            *(_QWORD *)&v160[10] = v18;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_245:
            v151 = 0;
            v157 = 0u;
            v158 = 0u;
            v156 = 0u;
            memset(v155, 0, sizeof(v155));
            v131 = v14;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v159 = 136315906;
            *(_QWORD *)&v159[4] = "operator[]";
            *(_WORD *)&v159[12] = 1024;
            *(_DWORD *)&v159[14] = 789;
            *(_WORD *)&v159[18] = 2048;
            *(_QWORD *)v160 = v15;
            *(_WORD *)&v160[8] = 2048;
            *(_QWORD *)&v160[10] = v131;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v18 = *((_QWORD *)v12 + 11);
          if (v18 <= v25)
            goto LABEL_240;
          v138 = v24;
          v26 = *(_QWORD *)(*((_QWORD *)v12 + 8) + 24 * v25);
          v27 = *(re::MaterialParameterBlock **)(*((_QWORD *)v12 + 13) + 8 * v25);
          if (v27)
          {
            v28 = (char *)v27 + 8;
            v14 = v137;
          }
          if (*(_BYTE *)(v26 + 404))
            goto LABEL_37;
          v29 = v27;
          v18 = *((_QWORD *)v12 + 6);
          if (v18 <= v25)
            goto LABEL_243;
          v27 = v29;
          if (*(_DWORD *)(*((_QWORD *)v12 + 8) + 24 * v25 + 16) != *(_DWORD *)(*((_QWORD *)v12 + 8) + 24 * v25 + 20))
          {
LABEL_37:
            if (!v27)
            {
              v24 = v138;
              goto LABEL_209;
            }
            v143 = v27;
            v30 = *(unsigned __int8 *)(v26 + 404) != 0;
            *(_BYTE *)(v26 + 404) = 0;
            v18 = *((_QWORD *)v12 + 6);
            if (v18 <= v25)
              goto LABEL_241;
            v135 = v30;
            v136 = v5;
            *(_DWORD *)(*((_QWORD *)v12 + 8) + 24 * v25 + 20) = *(_DWORD *)(*((_QWORD *)v12 + 8) + 24 * v25 + 16);
            v31 = *(unsigned int *)(v26 + 336);
            if ((_DWORD)v31)
            {
              v32 = 0;
              v33 = *(_DWORD **)(v26 + 320);
              v34 = a3;
              while ((*v33 & 0x80000000) == 0)
              {
                v33 += 80;
                if (v31 == ++v32)
                {
                  LODWORD(v32) = *(_DWORD *)(v26 + 336);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v32) = 0;
              v34 = a3;
            }
            v142 = (re::MaterialParameterBlock *)v25;
            if ((_DWORD)v31 != (_DWORD)v32)
            {
              v35 = v32;
              do
              {
                v36 = *(_QWORD *)(v26 + 320) + 320 * v35;
                v37 = (StringID *)(v36 + 8);
                v155[0] = 0;
                re::ecs2::MaterialParameterBlockArrayComponent::updateParameterBlockValue(v141, *(const re::RenderManager **)(v9 + 8), (const char **)(v36 + 8), (re::ecs2::SerializedMaterialParameter *)(v36 + 32), (re::MaterialParameterBlock *)v25, *(re::ecs2::Scene **)(v34 + 8), v155);
                if (v155[0])
                {
                  v139 = 0;
                  *(_BYTE *)(v26 + 404) = 1;
                }
                re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v26 + 352, v37);
                if (*(_DWORD *)(v26 + 336) <= (v32 + 1))
                  v38 = v32 + 1;
                else
                  v38 = *(_DWORD *)(v26 + 336);
                while (1)
                {
                  v35 = (v32 + 1);
                  if (v38 - 1 == (_DWORD)v32)
                    break;
                  LODWORD(v32) = v32 + 1;
                  v39 = v35;
                  if ((*(_DWORD *)(*(_QWORD *)(v26 + 320) + 320 * v35) & 0x80000000) != 0)
                    goto LABEL_57;
                }
                v39 = v38;
LABEL_57:
                LODWORD(v32) = v39;
              }
              while ((_DWORD)v31 != v39);
            }
            *(_QWORD *)v159 = 0;
            *(_QWORD *)&v159[8] = 0;
            *(_DWORD *)&v159[16] = 1;
            *(_QWORD *)&v160[4] = 0;
            *(_QWORD *)&v160[12] = 0;
            v40 = *(unsigned int *)(v26 + 384);
            if ((_DWORD)v40)
            {
              v41 = 0;
              v42 = *(int **)(v26 + 368);
              v43 = (_QWORD *)&unk_255828000;
              while (1)
              {
                v44 = *v42;
                v42 += 6;
                if (v44 < 0)
                  break;
                if (v40 == ++v41)
                {
                  LODWORD(v41) = *(_DWORD *)(v26 + 384);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v41) = 0;
              v43 = (_QWORD *)&unk_255828000;
            }
            if ((_DWORD)v40 != (_DWORD)v41)
            {
              v45 = v41;
              v46 = *(_DWORD *)(v26 + 384);
              do
              {
                v47 = *(_QWORD *)(v26 + 368);
                if (!re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(v26 + 304, (_QWORD *)(v47 + 24 * v45 + 8)))
                {
                  v48 = v47 + 24 * v45;
                  *(_QWORD *)v155 = *(_QWORD *)(v48 + 16);
                  re::DynamicOverflowArray<char const*,8ul>::add((int *)v159, v155);
                  re::MaterialParameterBlock::removeParameter(v143, *(const char **)(v48 + 16));
                  v46 = *(_DWORD *)(v26 + 384);
                }
                if (v46 <= (int)v41 + 1)
                  v49 = v41 + 1;
                else
                  v49 = v46;
                while (1)
                {
                  v45 = (v41 + 1);
                  if (v49 - 1 == (_DWORD)v41)
                    break;
                  LODWORD(v41) = v41 + 1;
                  v50 = v45;
                  if ((*(_DWORD *)(*(_QWORD *)(v26 + 368) + 24 * v45) & 0x80000000) != 0)
                    goto LABEL_75;
                }
                v50 = v49;
LABEL_75:
                LODWORD(v41) = v50;
              }
              while ((_DWORD)v40 != v50);
              v9 = v134;
              if ((v159[16] & 1) != 0)
                v51 = (char **)&v160[4];
              else
                v51 = *(char ***)&v160[12];
              v43 = (_QWORD *)&unk_255828000;
              if (*(_QWORD *)&v159[8])
              {
                v52 = &v51[*(_QWORD *)&v159[8]];
                do
                {
                  v53 = *v51;
                  if (*v51)
                  {
                    v54 = *v53;
                    if (*v53)
                    {
                      v55 = v53[1];
                      if (v55)
                      {
                        v56 = (unsigned __int8 *)(v53 + 2);
                        do
                        {
                          v54 = 31 * v54 + v55;
                          v57 = *v56++;
                          v55 = v57;
                        }
                        while (v57);
                      }
                    }
                  }
                  else
                  {
                    v54 = 0;
                  }
                  *(_QWORD *)v155 = 2 * v54;
                  *(_QWORD *)&v155[8] = v53;
                  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v26 + 352, v155);
                  re::StringID::destroyString((re::StringID *)v155);
                  ++v51;
                }
                while (v51 != v52);
              }
            }
            if (*(_QWORD *)(v9 + 8))
            {
              v58 = *(unsigned int *)(v26 + 48);
              if ((_DWORD)v58)
              {
                v59 = 0;
                v60 = *(int **)(v26 + 32);
                while (1)
                {
                  v61 = *v60;
                  v60 += 10;
                  if (v61 < 0)
                    break;
                  if (v58 == ++v59)
                  {
                    LODWORD(v59) = *(_DWORD *)(v26 + 48);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v59) = 0;
              }
              if ((_DWORD)v58 != (_DWORD)v59)
              {
                v62 = v59;
                do
                {
                  v63 = *(_QWORD *)(v26 + 32);
                  re::ecs2::SerializableMaterialParameterBlock::samplerValue((re::ecs2::SerializableMaterialParameterBlock *)v26, *(const char **)(v63 + 40 * v62 + 32), (uint64_t)v155);
                  if (v155[0])
                  {
                    v64 = v63 + 40 * v62;
                    re::OptionalMaterialSamplerData::makeSamplerData((re::OptionalMaterialSamplerData *)&v155[8], (uint64_t)&v151);
                    v150 = *(_QWORD *)(v64 + 8) >> 1;
                    v149 = *(_QWORD *)(v64 + 24) >> 1;
                    v65 = re::MaterialSamplerData::hash((re::MaterialSamplerData *)&v151);
                    re::MaterialParameterBlock::bindTextureToSampler(v143, &v150, &v149, v65);
                    v149 = 0;
                    v150 = 0;
                  }
                  v66 = *(_DWORD *)(v26 + 48);
                  if (v66 <= (int)v59 + 1)
                    v66 = v59 + 1;
                  while (1)
                  {
                    v62 = (v59 + 1);
                    if (v66 - 1 == (_DWORD)v59)
                      break;
                    LODWORD(v59) = v59 + 1;
                    v67 = v62;
                    if ((*(_DWORD *)(*(_QWORD *)(v26 + 32) + 40 * v62) & 0x80000000) != 0)
                      goto LABEL_106;
                  }
                  v67 = v66;
LABEL_106:
                  LODWORD(v59) = v67;
                }
                while ((_DWORD)v58 != v67);
              }
              v68 = *(unsigned int *)(v26 + 96);
              if ((_DWORD)v68)
              {
                v69 = 0;
                v70 = *(int **)(v26 + 80);
                v9 = v134;
                v43 = (_QWORD *)&unk_255828000;
                while (1)
                {
                  v71 = *v70;
                  v70 += 8;
                  if (v71 < 0)
                    break;
                  if (v68 == ++v69)
                  {
                    LODWORD(v69) = *(_DWORD *)(v26 + 96);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v69) = 0;
                v9 = v134;
                v43 = &unk_255828000;
              }
              if ((_DWORD)v68 != (_DWORD)v69)
              {
                v72 = v69;
                do
                {
                  v73 = *(_QWORD *)(v26 + 80) + 32 * v72;
                  v148 = *(_QWORD *)(v73 + 8) >> 1;
                  re::MaterialParameterBlock::setUVIndexForTexture(v143, &v148, *(_DWORD *)(v73 + 24));
                  v148 = 0;
                  if (*(_DWORD *)(v26 + 96) <= (v69 + 1))
                    v74 = v69 + 1;
                  else
                    v74 = *(_DWORD *)(v26 + 96);
                  v75 = v69;
                  while (1)
                  {
                    v72 = (v75 + 1);
                    if (v74 - 1 == v75)
                      break;
                    ++v75;
                    LODWORD(v69) = v72;
                    if ((*(_DWORD *)(*(_QWORD *)(v26 + 80) + 32 * v72) & 0x80000000) != 0)
                      goto LABEL_123;
                  }
                  LODWORD(v69) = v74;
LABEL_123:
                  ;
                }
                while ((_DWORD)v68 != (_DWORD)v69);
              }
            }
            v76 = *(unsigned int *)(v26 + 240);
            if ((_DWORD)v76)
            {
              v77 = 0;
              v78 = *(int **)(v26 + 224);
              while (1)
              {
                v79 = *v78;
                v78 += 8;
                if (v79 < 0)
                  break;
                if (v76 == ++v77)
                {
                  LODWORD(v77) = *(_DWORD *)(v26 + 240);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v77) = 0;
            }
            if ((_DWORD)v76 != (_DWORD)v77)
            {
              v84 = v77;
              do
              {
                v85 = *(_QWORD *)(v26 + 224) + 32 * v84;
                v86 = *(_QWORD *)(v85 + 8);
                if (*(_BYTE *)(v85 + 16))
                {
                  v87 = *(_QWORD *)(v85 + 24);
                  if (v43[415] != -1)
                    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                  re::MaterialParameterBlock::addPassTechniqueMapping(v143, v86, v87, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
                }
                else
                {
                  if (v43[415] != -1)
                    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                  re::MaterialParameterBlock::removePassTechniqueMapping(v143, v86, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
                }
                if (*(_DWORD *)(v26 + 240) <= (v77 + 1))
                  v88 = v77 + 1;
                else
                  v88 = *(_DWORD *)(v26 + 240);
                while (1)
                {
                  v84 = (v77 + 1);
                  if (v88 - 1 == (_DWORD)v77)
                    break;
                  LODWORD(v77) = v77 + 1;
                  v89 = v84;
                  if ((*(_DWORD *)(*(_QWORD *)(v26 + 224) + 32 * v84) & 0x80000000) != 0)
                    goto LABEL_151;
                }
                v89 = v88;
LABEL_151:
                LODWORD(v77) = v89;
              }
              while ((_DWORD)v76 != v89);
            }
            *(_QWORD *)&v156 = 0;
            memset(v155, 0, 28);
            v80 = *(unsigned int *)(v26 + 288);
            if ((_DWORD)v80)
            {
              v81 = 0;
              v82 = *(int **)(v26 + 272);
              while (1)
              {
                v83 = *v82;
                v82 += 18;
                if (v83 < 0)
                  break;
                if (v80 == ++v81)
                {
                  LODWORD(v81) = *(_DWORD *)(v26 + 288);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v81) = 0;
            }
            if ((_DWORD)v80 != (_DWORD)v81)
            {
              v90 = v81;
              do
              {
                v91 = *(_QWORD *)(v26 + 272);
                v92 = v91 + 72 * v90;
                v93 = (_QWORD *)(v92 + 8);
                if (*(_BYTE *)(v92 + 24))
                {
                  re::MaterialParameterBlock::handle(v143, *(const char **)(v91 + 72 * v90 + 16), (uint64_t)&v151);
                  if ((BYTE4(v152) & 7) == 0)
                  {
                    v147 = *v93 >> 1;
                    re::MaterialParameterBlock::addBinding(v143, &v147, *(char **)(v91 + 72 * v90 + 48), *(char **)(v91 + 72 * v90 + 64), *(unsigned int *)(v91 + 72 * v90 + 32));
                    v147 = 0;
                  }
                }
                else
                {
                  v146 = *v93 >> 1;
                  re::MaterialParameterBlock::removeBinding((uint64_t *)v143, &v146);
                  v146 = 0;
                  v94 = *(char **)(v91 + 72 * v90 + 16);
                  if (v94)
                  {
                    v95 = *v94;
                    if (*v94)
                    {
                      v96 = v94[1];
                      if (v96)
                      {
                        v97 = (unsigned __int8 *)(v94 + 2);
                        do
                        {
                          v95 = 31 * v95 + v96;
                          v98 = *v97++;
                          v96 = v98;
                        }
                        while (v98);
                      }
                    }
                  }
                  else
                  {
                    v95 = 0;
                  }
                  v151 = 2 * v95;
                  v152 = v94;
                  re::DynamicArray<re::StringID>::add(v155, &v151);
                  re::StringID::destroyString((re::StringID *)&v151);
                }
                v99 = *(_DWORD *)(v26 + 288);
                if (v99 <= (int)v81 + 1)
                  v99 = v81 + 1;
                while (1)
                {
                  v90 = (v81 + 1);
                  if (v99 - 1 == (_DWORD)v81)
                    break;
                  LODWORD(v81) = v81 + 1;
                  v100 = v90;
                  if ((*(_DWORD *)(*(_QWORD *)(v26 + 272) + 72 * v90) & 0x80000000) != 0)
                    goto LABEL_173;
                }
                v100 = v99;
LABEL_173:
                LODWORD(v81) = v100;
              }
              while ((_DWORD)v80 != v100);
              if (*(_QWORD *)&v155[16])
              {
                v101 = (_QWORD *)v156;
                v140 = (_QWORD *)(v156 + 16 * *(_QWORD *)&v155[16]);
                do
                {
                  if (*(_QWORD *)(v26 + 256))
                  {
                    v102 = 0xBF58476D1CE4E5B9 * ((*v101 >> 31) ^ (*v101 >> 1));
                    v103 = ((0x94D049BB133111EBLL * (v102 ^ (v102 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                             * (v102 ^ (v102 >> 27))) >> 31))
                         % *(unsigned int *)(v26 + 280);
                    v104 = *(_QWORD *)(v26 + 264);
                    v105 = *(unsigned int *)(v104 + 4 * v103);
                    if ((_DWORD)v105 != 0x7FFFFFFF)
                    {
                      v106 = *(_QWORD *)(v26 + 272);
                      if (re::StringID::operator==((_QWORD *)(v106 + 72 * v105 + 8), v101))
                      {
                        *(_DWORD *)(v104 + 4 * v103) = *(_DWORD *)(v106 + 72 * v105) & 0x7FFFFFFF;
LABEL_183:
                        re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(v26 + 272) + 72 * v105));
                        *(_DWORD *)(*(_QWORD *)(v26 + 272) + 72 * v105) = *(_DWORD *)(*(_QWORD *)(v26 + 272) + 72 * v105) & 0x80000000 | *(_DWORD *)(v26 + 292);
                        *(_DWORD *)(v26 + 292) = v105;
                        --*(_DWORD *)(v26 + 284);
                        ++*(_DWORD *)(v26 + 296);
                      }
                      else
                      {
                        while (1)
                        {
                          v107 = v105;
                          v105 = *(_DWORD *)(v106 + 72 * v105) & 0x7FFFFFFF;
                          if (v105 == 0x7FFFFFFF)
                            break;
                          if (re::StringID::operator==((_QWORD *)(v106 + 72 * v105 + 8), v101))
                          {
                            *(_DWORD *)(v106 + 72 * v107) = *(_DWORD *)(v106 + 72 * v107) & 0x80000000 | *(_DWORD *)(v106 + 72 * v105) & 0x7FFFFFFF;
                            goto LABEL_183;
                          }
                        }
                      }
                    }
                  }
                  v101 += 2;
                }
                while (v101 != v140);
              }
            }
            v108 = *(unsigned int *)(v26 + 144);
            if ((_DWORD)v108)
            {
              v109 = 0;
              v110 = *(int **)(v26 + 128);
              v5 = v136;
              v27 = v143;
              while (1)
              {
                v111 = *v110;
                v110 += 8;
                if (v111 < 0)
                  break;
                if (v108 == ++v109)
                {
                  LODWORD(v109) = *(_DWORD *)(v26 + 144);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v109) = 0;
              v5 = v136;
              v27 = v143;
            }
            if ((_DWORD)v108 != (_DWORD)v109)
            {
              v112 = v109;
              do
              {
                v113 = *(_QWORD *)(v26 + 128) + 32 * v112;
                if (*(_BYTE *)(v113 + 24))
                {
                  v145 = *(_QWORD *)(v113 + 8) >> 1;
                  v5 = v5 & 0xFFFFFFFF00000000 | *(unsigned int *)(v113 + 25);
                  re::MaterialParameterBlock::setSwizzleForTexture(v27, &v145, v5);
                  v145 = 0;
                }
                else
                {
                  v144 = *(_QWORD *)(v113 + 8) >> 1;
                  re::MaterialParameterBlock::resetSwizzleForTexture(v27, &v144);
                  v144 = 0;
                }
                if (*(_DWORD *)(v26 + 144) <= (v109 + 1))
                  v114 = v109 + 1;
                else
                  v114 = *(_DWORD *)(v26 + 144);
                while (1)
                {
                  v112 = (v109 + 1);
                  if (v114 - 1 == (_DWORD)v109)
                    break;
                  LODWORD(v109) = v109 + 1;
                  v115 = v112;
                  if ((*(_DWORD *)(*(_QWORD *)(v26 + 128) + 32 * v112) & 0x80000000) != 0)
                    goto LABEL_203;
                }
                v115 = v114;
LABEL_203:
                LODWORD(v109) = v115;
              }
              while ((_DWORD)v108 != v115);
            }
            re::DynamicArray<re::StringID>::deinit((uint64_t)v155);
            if (*(_QWORD *)v159 && (v159[16] & 1) == 0)
              (*(void (**)(void))(**(_QWORD **)v159 + 40))();
            v24 = v135 | v138;
            v12 = v141;
            v25 = (unint64_t)v142;
LABEL_208:

            v14 = v137;
            goto LABEL_209;
          }
          v24 = v138;
          if (v29)
            goto LABEL_208;
LABEL_209:
          ++v25;
        }
        while (v25 != v14);
        v116 = v24;
        if (v139)
        {
          v117 = a3;
          goto LABEL_217;
        }
        if ((v24 & 1) != 0)
          goto LABEL_218;
LABEL_219:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v154);
      }
      while ((_QWORD)v154 != v132 || WORD4(v154) != 0xFFFF || WORD5(v154) != 0xFFFF);
    }
    return *(_DWORD *)(v132 + 40) != 0;
  }
  else
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v155, a5, 0);
    v122 = *(_OWORD *)v155;
    *(_QWORD *)v155 = a4;
    *(_OWORD *)&v155[8] = v122;
    if ((_QWORD)v122 != a5 || WORD4(v122) != 0xFFFFLL || (DWORD2(v122) & 0xFFFF0000) != 4294901760)
    {
      do
      {
        v125 = *(_QWORD *)v155;
        v126 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v155[8]);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v125, v126, *(_QWORD *)(a3 + 40));
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v155[8]);
      }
      while (*(_QWORD *)&v155[8] != a5
           || *(unsigned __int16 *)&v155[16] != 0xFFFF
           || *(unsigned __int16 *)&v155[18] != 0xFFFF);
    }
    return 0;
  }
}

BOOL re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v4 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
    v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                         + 4
                         * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                          % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v5 != 0x7FFFFFFF)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v2 = 0x7FFFFFFFLL;
      while (!re::StringID::operator==((_QWORD *)(v6 + 320 * v5 + 8), a2))
      {
        v5 = *(_DWORD *)(v6 + 320 * v5) & 0x7FFFFFFF;
        if (v5 == 0x7FFFFFFF)
          return v2 != 0x7FFFFFFF;
      }
      v2 = v5;
    }
  }
  return v2 != 0x7FFFFFFF;
}

int *re::DynamicOverflowArray<char const*,8ul>::add(int *result, _QWORD *a2)
{
  int *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  if (!*(_QWORD *)result)
  {
    v10 = *((_QWORD *)v3 + 1) + 1;
    result = (int *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(v3, v10);
    v5 = v3[4] + 2;
    v3[4] = v5;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)result + 1);
  v5 = result[4];
  if ((v5 & 1) != 0)
  {
    if (v4 - 8 >= 0xFFFFFFFFFFFFFFF7)
      goto LABEL_15;
    v7 = v4 + 1;
    v9 = 16;
    goto LABEL_11;
  }
  v6 = *((_QWORD *)result + 3);
  v8 = v4 >= v6;
  v7 = v4 + 1;
  v8 = !v8 || v6 >= v7;
  if (!v8)
  {
    v9 = 2 * v6;
LABEL_11:
    if (v9 <= v7)
      v11 = v7;
    else
      v11 = v9;
    result = (int *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(result, v11);
    v5 = v3[4];
  }
LABEL_15:
  if ((v5 & 1) != 0)
    v12 = v3 + 6;
  else
    v12 = (_QWORD *)*((_QWORD *)v3 + 4);
  v13 = *((_QWORD *)v3 + 1);
  v12[v13] = *a2;
  *((_QWORD *)v3 + 1) = v13 + 1;
  v3[4] += 2;
  return result;
}

uint64_t re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v5 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v6 = ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31)) % v2;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(v7 + 4 * v6);
  if ((_DWORD)v8 == 0x7FFFFFFF)
    return 0;
  v10 = *(_QWORD *)(a1 + 16);
  if (!re::StringID::operator==((_QWORD *)(v10 + 24 * v8 + 8), a2))
  {
    while (1)
    {
      v11 = v8;
      v12 = *(_DWORD *)(v10 + 24 * v8);
      v8 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (re::StringID::operator==((_QWORD *)(v10 + 24 * v8 + 8), a2))
      {
        *(_DWORD *)(v10 + 24 * v11) = *(_DWORD *)(v10 + 24 * v11) & 0x80000000 | *(_DWORD *)(v10
                                                                                               + 24 * v8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v10 + 24 * v8) & 0x7FFFFFFF;
LABEL_9:
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (int *)(v13 + 24 * v8);
  v15 = *v14;
  if (*v14 < 0)
  {
    *v14 = v15 & 0x7FFFFFFF;
    re::StringID::destroyString((re::StringID *)(v13 + 24 * v8 + 8));
    v13 = *(_QWORD *)(a1 + 16);
    v15 = *(_DWORD *)(v13 + 24 * v8);
  }
  v16 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v13 + 24 * v8) = *(_DWORD *)(a1 + 36) | v15 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 40) = v16 + 1;
  return 1;
}

BOOL re::ecs2::MaterialParameterBlockArrayComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  char **v38;
  char **v39;
  char *v40;
  uint64_t v41;
  char v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v50;
  uint64_t *v51;
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  char **v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v53, a5, 0);
  v58 = a4;
  v59 = v53;
  v60 = v54;
  v50 = a5;
  if (v53 != a5 || (unsigned __int16)v54 != 0xFFFFLL || (v54 & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v9 = *(_QWORD **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v59);
      re::ecs2::MaterialParameterBlockArrayComponent::upgradeBlocksToBlockHandles(v9);
      v10 = v9[6];
      if (!v10)
        goto LABEL_75;
      v11 = (uint64_t *)v9[8];
      v51 = &v11[3 * v10];
      v12 = 1;
      do
      {
        v13 = *v11;
        v14 = *v11;
        if (!*v11)
          v14 = v11[1];
        v15 = *(unsigned __int8 *)(v14 + 404);
        v16 = *((_DWORD *)v11 + 4);
        if (v15 || v16 != *((_DWORD *)v11 + 5))
        {
          *(_BYTE *)(v13 + 404) = 0;
          *((_DWORD *)v11 + 5) = v16;
          v17 = *(unsigned int *)(v13 + 336);
          if ((_DWORD)v17)
          {
            v18 = 0;
            v19 = *(_DWORD **)(v13 + 320);
            while ((*v19 & 0x80000000) == 0)
            {
              v19 += 80;
              if (v17 == ++v18)
              {
                LODWORD(v18) = *(_DWORD *)(v13 + 336);
                break;
              }
            }
          }
          else
          {
            LODWORD(v18) = 0;
          }
          if ((_DWORD)v17 != (_DWORD)v18)
          {
            v20 = v18;
            do
            {
              v21 = *(_QWORD *)(v13 + 320);
              v22 = v21 + 320 * v20;
              re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(*v11 + 352, (StringID *)(v22 + 8));
              if (*(_BYTE *)(v22 + 32) == 64)
              {
                re::AssetHandle::AssetHandle((re::AssetHandle *)&v53, (const re::AssetHandle *)(v21 + 320 * v20 + 112));
                if (!v54
                  || (v23 = atomic_load((unsigned int *)(v54 + 704)), v23 != 2)
                  && (v24 = atomic_load((unsigned int *)(v54 + 704)), v24 != 3))
                {
                  re::AssetHandle::loadAsync((re::AssetHandle *)&v53);
                  *(_BYTE *)(*v11 + 404) = 1;
                  v12 = 2;
                }
                re::AssetHandle::~AssetHandle((re::AssetHandle *)&v53);
              }
              v25 = *(_DWORD *)(v13 + 336);
              if (v25 <= (int)v18 + 1)
                v25 = v18 + 1;
              while (1)
              {
                v20 = (v18 + 1);
                if (v25 - 1 == (_DWORD)v18)
                  break;
                LODWORD(v18) = v18 + 1;
                v26 = v20;
                if ((*(_DWORD *)(*(_QWORD *)(v13 + 320) + 320 * v20) & 0x80000000) != 0)
                  goto LABEL_34;
              }
              v26 = v25;
LABEL_34:
              LODWORD(v18) = v26;
            }
            while ((_DWORD)v17 != v26);
          }
          v53 = 0;
          v54 = 0;
          v55 = 1;
          v56 = 0;
          v57 = 0;
          v27 = *v11;
          if (!*v11)
            v27 = v11[1];
          v28 = *(unsigned int *)(v27 + 384);
          if ((_DWORD)v28)
          {
            v29 = 0;
            v30 = *(int **)(v27 + 368);
            while (1)
            {
              v31 = *v30;
              v30 += 6;
              if (v31 < 0)
                break;
              if (v28 == ++v29)
              {
                LODWORD(v29) = *(_DWORD *)(v27 + 384);
                break;
              }
            }
          }
          else
          {
            LODWORD(v29) = 0;
          }
          if ((_DWORD)v28 != (_DWORD)v29)
          {
            v32 = v29;
            v33 = *(_DWORD *)(v27 + 384);
            do
            {
              v34 = *v11;
              if (!*v11)
                v34 = v11[1];
              v35 = *(_QWORD *)(v27 + 368);
              if (!re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::containsKey(v34 + 304, (_QWORD *)(v35 + 24 * v32 + 8)))
              {
                v52[0] = *(_QWORD *)(v35 + 24 * v32 + 16);
                re::DynamicOverflowArray<char const*,8ul>::add((int *)&v53, v52);
                v33 = *(_DWORD *)(v27 + 384);
              }
              if (v33 <= (int)v29 + 1)
                v36 = v29 + 1;
              else
                v36 = v33;
              while (1)
              {
                v32 = (v29 + 1);
                if (v36 - 1 == (_DWORD)v29)
                  break;
                LODWORD(v29) = v29 + 1;
                v37 = v32;
                if ((*(_DWORD *)(*(_QWORD *)(v27 + 368) + 24 * v32) & 0x80000000) != 0)
                  goto LABEL_56;
              }
              v37 = v36;
LABEL_56:
              LODWORD(v29) = v37;
            }
            while ((_DWORD)v28 != v37);
            if ((v55 & 1) != 0)
              v38 = (char **)&v56;
            else
              v38 = v57;
            if (v54)
            {
              v39 = &v38[v54];
              do
              {
                v40 = *v38;
                if (*v38)
                {
                  v41 = *v40;
                  if (*v40)
                  {
                    v42 = v40[1];
                    if (v42)
                    {
                      v43 = (unsigned __int8 *)(v40 + 2);
                      do
                      {
                        v41 = 31 * v41 + v42;
                        v44 = *v43++;
                        v42 = v44;
                      }
                      while (v44);
                    }
                  }
                }
                else
                {
                  v41 = 0;
                }
                v45 = *v11 + 352;
                v52[0] = 2 * v41;
                v52[1] = v40;
                re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::remove(v45, v52);
                re::StringID::destroyString((re::StringID *)v52);
                ++v38;
              }
              while (v38 != v39);
            }
          }
          if (v53 && (v55 & 1) == 0)
            (*(void (**)(void))(*(_QWORD *)v53 + 40))();
        }
        v11 += 3;
      }
      while (v11 != v51);
      if (v12 != 2)
      {
LABEL_75:
        v46 = v58;
        v47 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v59);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v46, v47, *(_QWORD *)(a3 + 32));
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v59);
    }
    while (v59 != v50 || (unsigned __int16)v60 != 0xFFFF || WORD1(v60) != 0xFFFF);
  }
  return *(_DWORD *)(v50 + 40) != 0;
}

uint64_t re::ecs2::MaterialParameterBlockArrayComponentStateImpl::processUpdatingComponents()
{
  return 0;
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  char *WeakRetained;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t FirstBitSet;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  re::ecs2::System *v43;
  _BYTE v45[16];
  uint64_t v46[2];
  _QWORD v47[2];
  _QWORD v48[2];
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD v56[3];
  uint64_t v57;

  v47[0] = a2;
  v47[1] = a3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v46);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40));
  if (v5)
  {
    v6 = (id *)v4;
    v7 = 0;
    v8 = 8 * v5;
    do
    {
      WeakRetained = (char *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        v10 = WeakRetained;
        v11 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 192), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v11)
          v12 = *(_QWORD *)(v11 + 24);
        else
          v12 = 0;
        v7 += v12;

      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v45, 3111, a1);
  v13 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)&v53, (uint64_t *)(a1 + 288));
  v56[2] = *(_QWORD *)(a1 + 328);
  v49 = 1;
  v50 = 0;
  v51 = 0;
  v48[1] = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v48, 0);
  v49 += 2;
  v14 = *(_QWORD *)(a1 + 328);
  if ((v14 & 0x3F) != 0)
    v15 = (v14 >> 6) + 1;
  else
    v15 = v14 >> 6;
  v52 = *(_QWORD *)(a1 + 328);
  v57 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v48, v15, &v57);
  v16 = *(_DWORD *)(a1 + 304);
  if ((v16 & 1) != 0)
    v17 = (_QWORD *)(a1 + 312);
  else
    v17 = *(_QWORD **)(a1 + 320);
  v18 = *(_QWORD *)(a1 + 296);
  v19 = (uint64_t *)(a1 + 312);
  while (1)
  {
    v20 = a1 + 312;
    if ((v16 & 1) == 0)
      v20 = *(_QWORD *)(a1 + 320);
    if (v17 == (_QWORD *)(v20 + 8 * v18))
      break;
    *v17++ = 0;
    v16 = *(_DWORD *)(a1 + 304);
  }
  v21 = v56;
  if ((v55 & 1) == 0)
    v21 = (unint64_t *)v56[1];
  v22 = v54;
  if ((v54 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    v23 = 0;
    while (1)
    {
      v25 = *v21++;
      v24 = v25;
      if (v25)
        break;
      v23 -= 64;
      if (!--v22)
        goto LABEL_40;
    }
    v26 = __clz(__rbit64(v24));
    if (v26 + 1 != v23)
    {
      FirstBitSet = v26 - v23;
      do
      {
        v28 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 120, FirstBitSet);
        v29 = *(_QWORD *)(*v28 + 224);
        v30 = v28[3];
        v31 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v28[2] + 8, v30);
        if (*(_DWORD *)(v31 + 40))
          v32 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v29 + 24))(v29, v47, v28, v30, v31, 0);
        else
          v32 = 0;
        v33 = v28[5];
        v34 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v28[2] + 8, v33);
        if (*(_DWORD *)(v34 + 40))
          v32 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v29 + 32))(v29, v47, v28, v33, v34, 0);
        v35 = v28[6];
        v36 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v28[2] + 8, v35);
        if (*(_DWORD *)(v36 + 40))
        {
          if (((v32 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v29 + 40))(v29, v47, v28, v35, v36, 0)) & 1) == 0)goto LABEL_38;
        }
        else if (!v32)
        {
LABEL_38:
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v48, FirstBitSet);
          goto LABEL_39;
        }
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v48, FirstBitSet);
LABEL_39:
        FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v53, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_40:
  re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 288, (uint64_t)v48);
  if (*(_BYTE *)(a1 + 352))
  {
    v37 = *(_QWORD *)(a1 + 296);
    v38 = *(_DWORD *)(a1 + 304);
    if (v37 >= 0xB)
    {
      if ((v38 & 1) == 0)
        v19 = *(uint64_t **)(a1 + 320);
      v39 = 8 * v37;
      while (!*v19)
      {
        ++v19;
        v39 -= 8;
        if (!v39)
          goto LABEL_56;
      }
      goto LABEL_54;
    }
    if ((v38 & 1) == 0)
      v19 = *(uint64_t **)(a1 + 320);
    if (v37)
    {
      v40 = 0;
      v41 = 8 * v37;
      do
      {
        v42 = *v19++;
        v40 |= v42;
        v41 -= 8;
      }
      while (v41);
      if (v40)
      {
LABEL_54:
        v43 = *(re::ecs2::System **)(a1 + 336);
        if (!*((_BYTE *)v43 + 86))
          re::ecs2::System::queueToRun(v43, 0.0);
      }
    }
  }
LABEL_56:
  if (v48[0] && (v49 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v48[0] + 40))();
  if (v53 && (v55 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v53 + 40))();
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v45);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v46);
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  _BYTE v25[16];
  uint64_t v26[2];
  _QWORD v27[2];
  uint64_t v28;

  v27[0] = a3;
  v27[1] = a4;
  if (a2)
  {
    v5 = result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v26);
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25, 3111, v5);
    v28 = a2;
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 184)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v5 + 176), &v28)+ 8);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v5 + 288, v6);
    v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5 + 120, v6);
    v8 = *(_QWORD *)(*v7 + 224);
    v9 = v7[3];
    v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
    if (*(_DWORD *)(v10 + 40))
      v11 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, v27, v7, v9, v10, 0);
    else
      v11 = 0;
    v12 = v7[5];
    v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
    if (*(_DWORD *)(v13 + 40))
      v11 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, v27, v7, v12, v13, 0);
    v14 = v7[6];
    v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
    if (*(_DWORD *)(v15 + 40))
    {
      if (((v11 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, v27, v7, v14, v15, 0)) & 1) == 0)goto LABEL_10;
    }
    else if (!v11)
    {
LABEL_10:
      if (*(_BYTE *)(v5 + 352))
      {
        v16 = *(_QWORD *)(v5 + 296);
        v17 = *(_DWORD *)(v5 + 304);
        if (v16 >= 0xB)
        {
          if ((v17 & 1) != 0)
            v18 = (_QWORD *)(v5 + 312);
          else
            v18 = *(_QWORD **)(v5 + 320);
          v20 = 8 * v16;
          while (!*v18)
          {
            ++v18;
            v20 -= 8;
            if (!v20)
              goto LABEL_30;
          }
LABEL_28:
          v24 = *(re::ecs2::System **)(v5 + 336);
          if (!*((_BYTE *)v24 + 86))
            re::ecs2::System::queueToRun(v24, 0.0);
          goto LABEL_30;
        }
        if ((v17 & 1) == 0)
        {
          v19 = *(uint64_t **)(v5 + 320);
          if (!v16)
            goto LABEL_30;
LABEL_25:
          v21 = 0;
          v22 = 8 * v16;
          do
          {
            v23 = *v19++;
            v21 |= v23;
            v22 -= 8;
          }
          while (v22);
          if (!v21)
            goto LABEL_30;
          goto LABEL_28;
        }
        v19 = (uint64_t *)(v5 + 312);
        if (v16)
          goto LABEL_25;
      }
LABEL_30:
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v26);
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v5 + 288, v6);
    goto LABEL_10;
  }
  return result;
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::willAddSystemToECSService(re::ecs2::MaterialParameterBlockArraySystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *((_QWORD *)this + 5);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  *((_QWORD *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  result = re::ServiceLocator::serviceOrNull<re::AssetService>(v4);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 408))(result);
    if ((_DWORD)result)
      *((_QWORD *)this + 14) = 0;
  }
  return result;
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 112) = 0;
  return this;
}

void re::ecs2::MaterialParameterBlockArraySystem::willAddSceneToECSService(re::ecs2::MaterialParameterBlockArraySystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 120;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::MaterialParameterBlockArraySystem *)((char *)this + 240);
  v6 = *((_QWORD *)this + 31);
  v7 = *((_DWORD *)this + 64);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 264);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 34);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 264);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 34);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 240, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MaterialParameterBlockArraySystem *)((char *)this + 176), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 288;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 20);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 15, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 136) & 1) != 0)
    v19 = (char *)this + 144;
  else
    v19 = (char *)*((_QWORD *)this + 19);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 20);
  ++*((_DWORD *)this + 42);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 20);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 20) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MaterialParameterBlockArraySystem *)((char *)this + 176), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 20);
  v29 = *((_QWORD *)this + 35);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 35) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 35) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 256) & 1) != 0)
      v33 = (char *)this + 264;
    else
      v33 = (char *)*((_QWORD *)this + 34);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 31) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 20);
  v35 = *((_QWORD *)this + 41);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 41) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::MaterialParameterBlockArraySystem *)((char *)this + 288), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 41) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 304) & 1) != 0)
      v39 = (char *)this + 312;
    else
      v39 = (char *)*((_QWORD *)this + 40);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 37) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 288;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 352))
    return;
  v40 = *((_QWORD *)this + 37);
  v41 = *((_DWORD *)this + 76);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 312);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 40);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 42);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 312);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 40);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::willRemoveSceneFromECSService(re::ecs2::MaterialParameterBlockArraySystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 176);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 22, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 23) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 240, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 288, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 120, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_MaterialParameterBlockArraySystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541131C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541131C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541138C8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541138D8 = 0;
    qword_2541138E8 = 0;
    qword_2541138F0 = 0xFFFFFFFFLL;
    qword_2541138C8 = (uint64_t)&off_24ED7DAA8;
    qword_2541138F8 = (uint64_t)"MaterialParameterBlockArraySystem";
    dword_254113900 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254113938 = 0;
    __cxa_guard_release(&qword_2541131C0);
  }
  return &qword_2541138C8;
}

void re::ecs2::initInfo_MaterialParameterBlockArraySystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xE97A9D082EEB5ABALL;
  v5[1] = "MaterialParameterBlockArraySystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x16800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MaterialParameterBlockArraySystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialParameterBlockArraySystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialParameterBlockArraySystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MaterialParameterBlockArraySystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MaterialParameterBlockArraySystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialParameterBlockArraySystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialParameterBlockArraySystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::MaterialParameterBlockArraySystem *re::internal::defaultConstruct<re::ecs2::MaterialParameterBlockArraySystem>(int a1, int a2, re::ecs2::MaterialParameterBlockArraySystem *this)
{
  return re::ecs2::MaterialParameterBlockArraySystem::MaterialParameterBlockArraySystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::MaterialParameterBlockArraySystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 15);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MaterialParameterBlockArraySystem>(_QWORD *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 15);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MaterialParameterBlockArraySystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParameterBlockArraySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialParameterBlockArraySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialParameterBlockArraySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialParameterBlockArraySystem>, this);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MaterialParameterBlockArrayComponent>::dependsOnComponents()
{
  return 0;
}

void re::ecs2::BasicComponentStateImpl<re::ecs2::MaterialParameterBlockArrayComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::Component *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v3 = *(re::ecs2::Component **)(a3 + 192);
  if (v3)
  {
    v5 = 24;
    v6 = 0xFFFFFFFFLL;
    do
    {
      v7 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v5), v3);
      if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
      {
        v10 = v7;
        v6 = v8;
        goto LABEL_11;
      }
      v5 += 8;
    }
    while (v5 != 56);
    v10 = -1;
LABEL_11:
    re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v10, v6);
  }
}

void re::ecs2::MaterialParameterBlockArraySystem::~MaterialParameterBlockArraySystem(re::ecs2::MaterialParameterBlockArraySystem *this)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 15);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 15);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::MaterialParameterBlockArraySystem::typeInfo(re::ecs2::MaterialParameterBlockArraySystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialParameterBlockArraySystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialParameterBlockArraySystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialParameterBlockArraySystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialParameterBlockArraySystem>, 0);
}

void re::ecs2::SerializableMaterialParameterBlock::~SerializableMaterialParameterBlock(re::ecs2::SerializableMaterialParameterBlock *this)
{
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 38);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 26);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 20);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 44);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 38);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 32);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 26);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 20);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 14);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 8);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)this + 2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v8 + v6 + 8) >> 31) ^ (*(_QWORD *)(v8 + v6 + 8) >> 1));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, v8 + v6 + 8, (StringID *)(v8 + v6 + 8));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 32);
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix
                                                                + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 32) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24ED6AD50[v4])(&v5, result, a2);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t *a1, re::DynamicString *a2, re::DynamicString *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<0ul,re::DynamicString,re::DynamicString>(*a1, a2, a3);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSH_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSP_EEEDcSH_DpT0_(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<1ul,re::AssetHandle,re::AssetHandle>(*a1, a2, a3);
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<0ul,re::DynamicString,re::DynamicString>(uint64_t a1, re::DynamicString *this, re::DynamicString *a3)
{
  if (*(_DWORD *)(a1 + 32))
    return (re::DynamicString *)std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,re::DynamicString>(a1, a3);
  else
    return re::DynamicString::operator=(this, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,re::DynamicString>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix
                                           + v4))(&v10, a1);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 24) = a2[3];
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *a2 = 0;
  v6 = a2[2];
  a2[3] = 0;
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  a2[1] = v8;
  a2[2] = v7;
  *(_DWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<1ul,re::AssetHandle,re::AssetHandle>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_DWORD *)result + 8) != 1)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<1ul,re::AssetHandle>(result, a3);
  v3 = a2[1];
  a2[1] = a3[1];
  a3[1] = v3;
  v4 = *a2;
  *a2 = 0;
  *a2 = *a3;
  *a3 = v4;
  v5 = a2[2];
  a2[2] = a3[2];
  a3[2] = v5;
  return result;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<1ul,re::AssetHandle>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = *((unsigned int *)a1 + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix
                                             + v4))(&v8, a1);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[1] = a2[1];
  a2[1] = 0;
  v5 = *a1;
  *a1 = 0;
  *a1 = *a2;
  *a2 = v5;
  v6 = a1[2];
  a1[2] = a2[2];
  a2[2] = v6;
  *((_DWORD *)a1 + 8) = 1;
  return a1;
}

void re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v8 = 408 * a2 + 208;
    v9 = a2;
    do
    {
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 32) + v8);
      re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 + 18);
      re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 + 12);
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 + 6);
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v10);
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 - 6);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 - 12);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 - 18);
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v10 - 24);
      *(v10 - 26) = (uint64_t)&off_24ED426B8;
      objc_destructInstance(v10 - 25);
      ++v9;
      v8 += 408;
    }
    while (v9 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 408 * v4;
      do
      {
        v7 = *(_QWORD *)(a1 + 32) + v6;
        *(_QWORD *)(v7 + 400) = 0;
        *(_OWORD *)(v7 + 368) = 0u;
        *(_OWORD *)(v7 + 384) = 0u;
        *(_OWORD *)(v7 + 336) = 0u;
        *(_OWORD *)(v7 + 352) = 0u;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 272) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_OWORD *)(v7 + 256) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
        re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)v7);
        v6 += 408;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x198uLL))
        {
          v2 = 408 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 408 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 408, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 408 * v9;
        do
        {
          re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)&v7[v10 / 8], (const re::ecs2::SerializableMaterialParameterBlock *)(v8 + v10));
          re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 352));
          re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 304));
          re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 256));
          re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)(v8 + v10 + 208));
          re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 160));
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 112));
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 64));
          re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v8 + v10 + 16));
          *(_QWORD *)(v8 + v10) = &off_24ED426B8;
          objc_destructInstance((id)(v8 + v10 + 8));
          v10 += 408;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock(re::ecs2::SerializableMaterialParameterBlock *this)
{
  uint64_t v1;
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)v1 = &off_24ED6AC08;
  result = 0.0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_DWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 52) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 100) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 148) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 196) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_DWORD *)(v1 + 240) = 0;
  *(_QWORD *)(v1 + 244) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_DWORD *)(v1 + 288) = 0;
  *(_QWORD *)(v1 + 292) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_DWORD *)(v1 + 336) = 0;
  *(_QWORD *)(v1 + 340) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_DWORD *)(v1 + 384) = 0;
  *(_QWORD *)(v1 + 388) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 400) = 0;
  *(_BYTE *)(v1 + 404) = 0;
  return result;
}

uint64_t re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter(uint64_t this)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_WORD *)(this + 104) = 10;
  *(_BYTE *)(this + 107) = 0;
  *(_BYTE *)(this + 112) = 0;
  *(_BYTE *)(this + 120) = 0;
  *(_BYTE *)(this + 128) = 0;
  *(_BYTE *)(this + 136) = 0;
  *(_BYTE *)(this + 144) = 0;
  *(_BYTE *)(this + 152) = 0;
  *(_BYTE *)(this + 160) = 0;
  *(_BYTE *)(this + 168) = 0;
  *(_BYTE *)(this + 176) = 0;
  *(_BYTE *)(this + 184) = 0;
  *(_BYTE *)(this + 192) = 0;
  *(_QWORD *)(this + 240) = 0;
  *(_QWORD *)(this + 208) = 0;
  *(_QWORD *)(this + 216) = 0;
  *(_DWORD *)(this + 232) = 0;
  *(_QWORD *)(this + 224) = 0;
  *(_BYTE *)(this + 248) = 0;
  *(_QWORD *)(this + 272) = 0;
  *(_BYTE *)(this + 280) = 0;
  *(_QWORD *)(this + 256) = 0;
  *(_QWORD *)(this + 261) = 0;
  return this;
}

void re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v8 + v6 + 8) >> 31) ^ (*(_QWORD *)(v8 + v6 + 8) >> 1));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (StringID *)(v8 + v6 + 8), (const StringID *)(v8 + v6 + 24));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 40;
    }
  }
}

void re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, const StringID *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 40 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 40 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 40 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8), a4);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 24), a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 40 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 40 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 40 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 16) + 40 * v9;
  v16 = *a5;
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFFFFFELL | *a5 & 1;
  *(_QWORD *)(v15 + 24) = *a5 & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
  *(_QWORD *)(v15 + 32) = a5[1];
  *a5 = 0;
  a5[1] = (uint64_t)&str_110;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v8 + v6 + 8) >> 31) ^ (*(_QWORD *)(v8 + v6 + 8) >> 1));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        v11 = *(unsigned int *)(a1 + 24);
        v12 = v10 % v11;
        v13 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v13 == 0x7FFFFFFF)
        {
          v13 = *(unsigned int *)(a1 + 32);
          v14 = v13;
          if ((_DWORD)v13 == (_DWORD)v11)
          {
            re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v12 = v10 % *(unsigned int *)(a1 + 24);
            v14 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v14 + 1;
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(v15 + 32 * v13);
        }
        else
        {
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(v15 + 32 * v13);
          *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
        }
        v17 = 32 * v13;
        *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + v17) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v13) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12);
        re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v13 + 8), (const StringID *)(v8 + v6 + 8));
        v18 = *(_QWORD *)(a1 + 16) + 32 * v13;
        v19 = *(unsigned __int8 *)(v8 + v6 + 24);
        *(_BYTE *)(v18 + 24) = v19;
        if (v19)
          *(_DWORD *)(v18 + 25) = *(_DWORD *)(v8 + v6 + 25);
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12) = v13;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  signed int v15;
  _BYTE v16[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(_QWORD *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v16, v4, a2);
      v5 = *(_OWORD *)v16;
      *(_OWORD *)v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v16[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v16[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7 + 24;
        do
        {
          if ((*(_DWORD *)(v12 - 24) & 0x80000000) != 0)
          {
            v13 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v12 - 16) >> 31) ^ (*(_QWORD *)(v12 - 16) >> 1));
            v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v14 % *(unsigned int *)(a1 + 24), v14, (StringID *)(v12 - 16));
          }
          ++v11;
          v12 += 32;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2)
      v15 = a2;
    else
      v15 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 32 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  v14 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v8 + 8), a4);
  v15 = *(_QWORD *)(a1 + 16) + 32 * v8;
  v16 = *a5;
  *(_BYTE *)(v15 + 24) = v16;
  if (v16)
    *(_DWORD *)(v15 + 25) = *(_DWORD *)(a5 + 1);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = v8 + v6;
        v10 = *(_QWORD *)(v8 + v6 + 8);
        v11 = *(unsigned int *)(a1 + 24);
        v12 = v10 % v11;
        v13 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v13 == 0x7FFFFFFF)
        {
          v13 = *(unsigned int *)(a1 + 32);
          v14 = v13;
          if ((_DWORD)v13 == (_DWORD)v11)
          {
            re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v12 = v10 % *(unsigned int *)(a1 + 24);
            v14 = *(_DWORD *)(a1 + 32);
            v10 = *(_QWORD *)(v9 + 8);
          }
          *(_DWORD *)(a1 + 32) = v14 + 1;
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(v15 + 32 * v13);
        }
        else
        {
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(v15 + 32 * v13);
          *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
        }
        v17 = 32 * v13;
        *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
        v18 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + v17) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v13) & 0x80000000 | *(_DWORD *)(v18 + 4 * v12);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v13 + 8) = v10;
        v19 = *(_QWORD *)(a1 + 16) + 32 * v13;
        LODWORD(v17) = *(unsigned __int8 *)(v9 + 16);
        *(_BYTE *)(v19 + 16) = v17;
        if ((_DWORD)v17)
          *(_QWORD *)(v19 + 24) = *(_QWORD *)(v8 + v6 + 24);
        *(_DWORD *)(v18 + 4 * v12) = v13;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 32;
    }
  }
}

void re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 32 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 32;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  signed int v13;
  _BYTE v14[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(_QWORD *)&v14[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v14, v4, a2);
      v5 = *(_OWORD *)v14;
      *(_OWORD *)v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v14[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v14[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&v14[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = (_QWORD *)(v7 + 8);
        do
        {
          if ((*(_DWORD *)(v12 - 1) & 0x80000000) != 0)
            re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *v12 % (unint64_t)*(unsigned int *)(a1 + 24), *v12, v12, v12 + 1);
          ++v11;
          v12 += 4;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2)
      v13 = a2;
    else
      v13 = 3;
  }
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 32 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  v14 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v8 + 8) = *a4;
  v15 = *(_QWORD *)(a1 + 16) + 32 * v8;
  v16 = *a5;
  *(_BYTE *)(v15 + 16) = v16;
  if (v16)
    *(_QWORD *)(v15 + 24) = *((_QWORD *)a5 + 1);
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;

  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v8 + v6 + 8) >> 31) ^ (*(_QWORD *)(v8 + v6 + 8) >> 1));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        v11 = *(unsigned int *)(a1 + 24);
        v12 = v10 % v11;
        v13 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v13 == 0x7FFFFFFF)
        {
          v13 = *(unsigned int *)(a1 + 32);
          v14 = v13;
          if ((_DWORD)v13 == (_DWORD)v11)
          {
            re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v12 = v10 % *(unsigned int *)(a1 + 24);
            v14 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v14 + 1;
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(v15 + 72 * v13);
        }
        else
        {
          v15 = *(_QWORD *)(a1 + 16);
          v16 = *(_DWORD *)(v15 + 72 * v13);
          *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
        }
        v17 = 72 * v13;
        *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + v17) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v13) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12);
        re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 72 * v13 + 8), (const StringID *)(v8 + v6 + 8));
        v18 = *(_QWORD *)(a1 + 16);
        v19 = *(unsigned __int8 *)(v8 + v6 + 24);
        *(_BYTE *)(v18 + 72 * v13 + 24) = v19;
        if (v19)
        {
          v20 = (_DWORD *)(v18 + 72 * v13);
          v20[8] = *(_DWORD *)(v8 + v6 + 32);
          re::StringID::StringID((re::StringID *)(v20 + 10), (const StringID *)(v8 + v6 + 40));
          re::StringID::StringID((re::StringID *)(v20 + 14), (const StringID *)(v8 + v6 + 56));
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v12) = v13;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 72;
    }
  }
}

void re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + v3));
        ++v4;
        v3 += 72;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  signed int v15;
  _BYTE v16[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v16, 0, 36);
      *(_QWORD *)&v16[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v16, v4, a2);
      v5 = *(_OWORD *)v16;
      *(_OWORD *)v16 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v16[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v16[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v16[24];
      *(_OWORD *)&v16[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v16[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7 + 24;
        do
        {
          if ((*(_DWORD *)(v12 - 24) & 0x80000000) != 0)
          {
            v13 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v12 - 16) >> 31) ^ (*(_QWORD *)(v12 - 16) >> 1));
            v14 = (0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31);
            re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v14 % *(unsigned int *)(a1 + 24), v14, (StringID *)(v12 - 16));
          }
          ++v11;
          v12 += 72;
        }
        while (v11 < v10);
      }
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v16);
    }
  }
  else
  {
    if (a2)
      v15 = a2;
    else
      v15 = 3;
  }
}

uint64_t re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, unsigned __int8 *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 72 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 72 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 72 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  v14 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 72 * v8 + 8), a4);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *a5;
  *(_BYTE *)(v15 + 72 * v8 + 24) = v16;
  if (v16)
  {
    v17 = v15 + 72 * v8;
    *(_DWORD *)(v17 + 32) = *((_DWORD *)a5 + 2);
    v18 = *((_QWORD *)a5 + 2);
    *(_QWORD *)(v17 + 40) = *(_QWORD *)(v17 + 40) & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
    *(_QWORD *)(v17 + 40) = *((_QWORD *)a5 + 2) & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
    *(_QWORD *)(v17 + 48) = *((_QWORD *)a5 + 3);
    *((_QWORD *)a5 + 2) = 0;
    *((_QWORD *)a5 + 3) = &str_110;
    v19 = *((_QWORD *)a5 + 4);
    *(_QWORD *)(v17 + 56) = *(_QWORD *)(v17 + 56) & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    *(_QWORD *)(v17 + 56) = *((_QWORD *)a5 + 4) & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    *(_QWORD *)(v17 + 64) = *((_QWORD *)a5 + 5);
    *((_QWORD *)a5 + 4) = 0;
    *((_QWORD *)a5 + 5) = &str_110;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v14) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addEmplace<unsigned long &>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 32 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v8 + 8) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 32 * v8;
  v15 = *a5;
  *(_BYTE *)(v14 + 16) = 1;
  *(_QWORD *)(v14 + 24) = v15;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::StringID&>(uint64_t a1, StringID *a2, int a3, const StringID *a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v7 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v13 == 0x7FFFFFFF)
    {
      v13 = *(unsigned int *)(a1 + 32);
      v14 = v13;
      if ((_DWORD)v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
        v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v14 + 1;
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD *)(v15 + 40 * v13);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD *)(v15 + 40 * v13);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    v17 = 40 * v13;
    *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + v17) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v13) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 40 * v13 + 8), a2);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 40 * v13 + 24), a4);
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    v18 = *(_QWORD *)(a1 + 16) + 40 * v13;
    return v18 + 24;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v12 + 40 * v10 + 8), a2))
  {
    v10 = *(_DWORD *)(v12 + 40 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v18 = v12 + 40 * v10;
      break;
    case 2:
    case 3:
      re::StringID::destroyString((re::StringID *)(v12 + 40 * v10 + 24));
      re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 40 * v10 + 24), a4);
      ++*(_DWORD *)(a1 + 40);
      v18 = *(_QWORD *)(a1 + 16) + 40 * v10;
      break;
    default:
      goto LABEL_8;
  }
  return v18 + 24;
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::ConstStringID const&>(uint64_t a1, StringID *a2, int a3, _QWORD *a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v7 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v13 == 0x7FFFFFFF)
    {
      v13 = *(unsigned int *)(a1 + 32);
      v14 = v13;
      if ((_DWORD)v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
        v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v14 + 1;
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD *)(v15 + 40 * v13);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD *)(v15 + 40 * v13);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    v17 = 40 * v13;
    *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + v17) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v13) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 40 * v13 + 8), a2);
    v18 = *(_QWORD *)(a1 + 16) + 40 * v13;
    *(_QWORD *)(v18 + 24) &= ~1uLL;
    *(_QWORD *)(v18 + 24) = 2 * *a4;
    *(_QWORD *)(v18 + 32) = a4[1];
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 16) + 40 * v13;
    return v19 + 24;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v12 + 40 * v10 + 8), a2))
  {
    v10 = *(_DWORD *)(v12 + 40 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v19 = v12 + 40 * v10;
      break;
    case 2:
    case 3:
      re::StringID::destroyString((re::StringID *)(v12 + 40 * v10 + 24));
      v21 = *(_QWORD *)(a1 + 16) + 40 * v10;
      *(_QWORD *)(v21 + 24) &= ~1uLL;
      *(_QWORD *)(v21 + 24) = 2 * *a4;
      *(_QWORD *)(v21 + 32) = a4[1];
      ++*(_DWORD *)(a1 + 40);
      v19 = *(_QWORD *)(a1 + 16) + 40 * v10;
      break;
    default:
      goto LABEL_8;
  }
  return v19 + 24;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addEmplace<re::mtl::TextureSwizzleChannels&>(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 16) + 32 * v9;
  *(_BYTE *)(v15 + 24) = 1;
  *(_DWORD *)(v15 + 25) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, unsigned __int8 *a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  BOOL v22;

  v7 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v14 + 24;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v12 + 32 * v10 + 8), a2))
  {
    v10 = *(_DWORD *)(v12 + 32 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a4)
  {
    case 0:
    case 1:
      v14 = v12 + 32 * v10;
      break;
    case 2:
    case 3:
      v16 = v12 + 32 * v10;
      v19 = *(unsigned __int8 *)(v16 + 24);
      v17 = (_BYTE *)(v16 + 24);
      v18 = v19;
      v20 = *a3;
      if (v19)
        v21 = 0;
      else
        v21 = v20 == 0;
      if (!v21)
      {
        if (v18)
          v22 = v20 == 0;
        else
          v22 = 0;
        if (v22)
        {
          *v17 = 0;
        }
        else
        {
          if (!v18 && *a3)
            *v17 = 1;
          *(_DWORD *)(v12 + 32 * v10 + 25) = *(_DWORD *)(a3 + 1);
        }
      }
      ++*(_DWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 16) + 32 * v10;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 24;
}

uint64_t re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addInternal<re::ecs2::SerializableParameterBinding>(uint64_t a1, StringID *a2, int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v13 == 0x7FFFFFFF)
    {
      v13 = *(unsigned int *)(a1 + 32);
      v14 = v13;
      if ((_DWORD)v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
        v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v14 + 1;
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD *)(v15 + 72 * v13);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD *)(v15 + 72 * v13);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    v17 = 72 * v13;
    *(_DWORD *)(v15 + v17) = v16 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + v17) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v13) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 72 * v13 + 8), a2);
    v18 = *(_QWORD *)(a1 + 16) + 72 * v13;
    *(_BYTE *)(v18 + 24) = 1;
    *(_DWORD *)(v18 + 32) = *(_DWORD *)a4;
    v19 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(v18 + 40) = *(_QWORD *)(v18 + 40) & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    *(_QWORD *)(v18 + 40) = *(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    *(_QWORD *)(v18 + 48) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = &str_110;
    v20 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(v18 + 56) = *(_QWORD *)(v18 + 56) & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
    *(_QWORD *)(v18 + 56) = *(_QWORD *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
    *(_QWORD *)(v18 + 64) = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = &str_110;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    v21 = *(_QWORD *)(a1 + 16) + 72 * v13;
    return v21 + 24;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v12 + 72 * v10 + 8), a2))
  {
    v10 = *(_DWORD *)(v12 + 72 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v21 = v12 + 72 * v10;
      break;
    case 2:
    case 3:
      re::Optional<re::ecs2::SerializableParameterBinding>::~Optional((_BYTE *)(v12 + 72 * v10 + 24));
      v23 = *(_QWORD *)(a1 + 16) + 72 * v10;
      *(_BYTE *)(v23 + 24) = 1;
      *(_DWORD *)(v23 + 32) = *(_DWORD *)a4;
      v24 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v23 + 40) = *(_QWORD *)(v23 + 40) & 0xFFFFFFFFFFFFFFFELL | v24 & 1;
      *(_QWORD *)(v23 + 40) = *(_QWORD *)(a4 + 8) & 0xFFFFFFFFFFFFFFFELL | v24 & 1;
      *(_QWORD *)(v23 + 48) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = &str_110;
      v25 = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(v23 + 56) = *(_QWORD *)(v23 + 56) & 0xFFFFFFFFFFFFFFFELL | v25 & 1;
      *(_QWORD *)(v23 + 56) = *(_QWORD *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL | v25 & 1;
      *(_QWORD *)(v23 + 64) = *(_QWORD *)(a4 + 32);
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = &str_110;
      ++*(_DWORD *)(a1 + 40);
      v21 = *(_QWORD *)(a1 + 16) + 72 * v10;
      break;
    default:
      goto LABEL_8;
  }
  return v21 + 24;
}

uint64_t re::Optional<re::ecs2::SerializableParameterBinding>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      re::StringID::destroyString((re::StringID *)(a1 + 32));
      re::StringID::destroyString((re::StringID *)(a1 + 16));
      *(_BYTE *)a1 = 0;
    }
    else
    {
      if (*(_BYTE *)a1)
        v7 = 1;
      else
        v7 = v3 == 0;
      if (v7)
      {
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        v8 = *((_QWORD *)a2 + 2);
        v9 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a2 + 2) = 0;
        *((_QWORD *)a2 + 3) = &str_110;
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = v8;
        *(_QWORD *)(a1 + 24) = v9;
        v19 = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
        v20 = v11;
        re::StringID::destroyString((re::StringID *)&v19);
        v12 = *((_QWORD *)a2 + 4);
        v13 = *((_QWORD *)a2 + 5);
        *((_QWORD *)a2 + 4) = 0;
        *((_QWORD *)a2 + 5) = &str_110;
        v14 = *(_QWORD *)(a1 + 32);
        v15 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 32) = v12;
        *(_QWORD *)(a1 + 40) = v13;
        v19 = v12 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
        v20 = v15;
        re::StringID::destroyString((re::StringID *)&v19);
      }
      else
      {
        *(_BYTE *)a1 = 1;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        v16 = *((_QWORD *)a2 + 2);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFFELL | v16 & 1;
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a2 + 2) = 0;
        *((_QWORD *)a2 + 3) = &str_110;
        v17 = *((_QWORD *)a2 + 4);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4) & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
        *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a2 + 4) = 0;
        *((_QWORD *)a2 + 5) = &str_110;
      }
    }
  }
  return a1;
}

uint64_t re::ecs2::SerializedMaterialParameter::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  re::AssetHandle::operator=((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
  re::OptionalMaterialSamplerData::operator=(a1 + 104, a2 + 104);
  re::DynamicArray<BOOL>::operator=(a1 + 208, (uint64_t *)(a2 + 208));
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  v7 = *(_BYTE *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 280) = v7;
  return a1;
}

uint64_t re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t a3, int a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v7 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 320 * v13;
    return v14 + 32;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v12 + 320 * v10 + 8), a2))
  {
    v10 = *(_DWORD *)(v12 + 320 * v10) & 0x7FFFFFFF;
    if (v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a4)
  {
    case 0:
    case 1:
      v14 = v12 + 320 * v10;
      break;
    case 2:
    case 3:
      v16 = v12 + 320 * v10;
      *(_OWORD *)(v16 + 32) = *(_OWORD *)a3;
      v17 = *(_OWORD *)(a3 + 16);
      v18 = *(_OWORD *)(a3 + 32);
      v19 = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v16 + 80) = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v16 + 96) = v19;
      *(_OWORD *)(v16 + 48) = v17;
      *(_OWORD *)(v16 + 64) = v18;
      re::AssetHandle::operator=((uint64_t *)(v16 + 112), (uint64_t *)(a3 + 80));
      re::OptionalMaterialSamplerData::operator=(v16 + 136, a3 + 104);
      re::DynamicArray<BOOL>::operator=(v16 + 240, (uint64_t *)(a3 + 208));
      *(_BYTE *)(v16 + 280) = *(_BYTE *)(a3 + 248);
      *(_QWORD *)(v16 + 288) = *(_QWORD *)(a3 + 256);
      v20 = *(_OWORD *)(a3 + 264);
      *(_BYTE *)(v16 + 312) = *(_BYTE *)(a3 + 280);
      *(_OWORD *)(v16 + 296) = v20;
      ++*(_DWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 16) + 320 * v10;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 32;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  _OWORD v10[6];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  HIDWORD(v21) = 0;
  v17 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  BYTE8(v11) = 10;
  BYTE11(v11) = 0;
  BYTE8(v12) = 0;
  BYTE8(v13) = 0;
  BYTE8(v14) = 0;
  BYTE8(v15) = 0;
  BYTE8(v16) = 0;
  v20 = 0uLL;
  v19 = 0uLL;
  v18 = 0uLL;
  *(_QWORD *)((char *)&v21 + 5) = 0;
  v22 = 0uLL;
  *(_QWORD *)&v21 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a4, a5, (uint64_t)v10, 2);
  re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(_DWORD **)(a2 + 16);
    while ((*v7 & 0x80000000) == 0)
    {
      v7 += 80;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v9 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 320 * v9 + 8, *(_QWORD *)(a2 + 16) + 320 * v9 + 32);
    if (!(_DWORD)result)
      break;
    v10 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v9 = (v6 + 1);
      if (v10 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v11 = v9;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 320 * v9) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v11 = v10;
LABEL_18:
    LODWORD(v6) = v11;
  }
  while ((_DWORD)v5 != v11);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1, a4, (uint64_t)Instance, 2);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v7 = a1[3];
        v8 = *(_DWORD *)(v7 + 32);
        v9 = v4 + 1;
        do
        {
          LODWORD(v5) = v9;
          *((_DWORD *)a1 + 8) = v9;
          if (v9 >= v8)
            break;
          v10 = *(_DWORD *)(*(_QWORD *)(v7 + 16) + 320 * v9++);
        }
        while ((v10 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(_DWORD **)(v2 + 16);
        while ((*v6 & 0x80000000) == 0)
        {
          v6 += 80;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 320 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 320 * *(unsigned int *)(a1 + 32) + 32;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, unint64_t *a5)
{
  re::IntrospectionBase *v8;
  unsigned __int8 v10[16];

  v10[0] = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(a4, a5, v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 8, *(_QWORD *)(a2 + 16) + 32 * v10 + 16);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

_QWORD *re::IntrospectionOptional<unsigned long>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<unsigned long>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<unsigned long>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<unsigned long>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<unsigned long>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<unsigned long>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

void re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a1);
  return re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, unint64_t *a4)
{
  unsigned __int8 *Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (unsigned __int8 *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];

  v10[0] = 0;
  v10[1] = (uint64_t)&str_110;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, v10);
  re::StringID::destroyString((re::StringID *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 10;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 40 * v10 + 8, *(_QWORD *)(a2 + 16) + 40 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 40 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

uint64_t re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 40 * v11;
    return v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 40 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 40 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v14 = v10 + 40 * v9;
  v15 = *a3;
  v16 = a3[1];
  *a3 = 0;
  a3[1] = (uint64_t)&str_110;
  v17 = *(_QWORD *)(v14 + 24);
  v18 = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v14 + 24) = v15;
  *(_QWORD *)(v14 + 32) = v16;
  v19[0] = v15 & 0xFFFFFFFFFFFFFFFELL | v17 & 1;
  v19[1] = v18;
  re::StringID::destroyString((re::StringID *)v19);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 40 * v9;
  return v12 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  uint64_t *Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (uint64_t *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v5 + 40 * v4 + 8), a2))
  {
    v4 = *(_DWORD *)(v5 + 40 * v4) & 0x7FFFFFFF;
    if (v4 == 0x7FFFFFFF)
      return 0;
  }
  return v5 + 40 * v4 + 24;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 40 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 10;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 40 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 40 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  unsigned __int8 v10[48];

  v10[0] = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, v10);
  re::Optional<re::ecs2::SerializableParameterBinding>::~Optional(v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 18;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 72 * v10 + 8, *(_QWORD *)(a2 + 16) + 72 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 72 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

_QWORD *re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  __int128 v5;
  void *v6;
  unsigned __int8 v7[8];
  int v8;
  uint64_t v9;
  __int128 v10;
  void *v11;

  if (a3)
  {
    re::StringID::invalid((re::StringID *)&v4);
    re::StringID::invalid((re::StringID *)((char *)&v5 + 8));
    v7[0] = 1;
    v8 = 0;
    v9 = v4;
    v10 = v5;
    v4 = 0;
    *(_QWORD *)&v5 = &str_110;
    v11 = v6;
    *((_QWORD *)&v5 + 1) = 0;
    v6 = &str_110;
    re::Optional<re::ecs2::SerializableParameterBinding>::operator=(a2, v7);
    re::Optional<re::ecs2::SerializableParameterBinding>::~Optional(v7);
    re::StringID::destroyString((re::StringID *)((char *)&v5 + 8));
    re::StringID::destroyString((re::StringID *)&v4);
  }
  else
  {
    v7[0] = 0;
    re::Optional<re::ecs2::SerializableParameterBinding>::operator=(a2, v7);
    re::Optional<re::ecs2::SerializableParameterBinding>::~Optional(v7);
  }
}

uint64_t re::IntrospectionOptional<re::ecs2::SerializableParameterBinding>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::ecs2::SerializableParameterBinding>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

_BYTE *re::TypeBuilderHelper::registerOptional<re::ecs2::SerializableParameterBinding>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, int *a2)
{
  unsigned __int8 v5[8];
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    v5[0] = 1;
    v6 = *a2;
    re::StringID::StringID((re::StringID *)&v7, (const StringID *)(a2 + 2));
    re::StringID::StringID((re::StringID *)&v8, (const StringID *)(a2 + 6));
  }
  else
  {
    v5[0] = 0;
  }
  re::Optional<re::ecs2::SerializableParameterBinding>::operator=(a1, v5);
  return re::Optional<re::ecs2::SerializableParameterBinding>::~Optional(v5);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  unsigned __int8 *Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (unsigned __int8 *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 72 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 18;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 72 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 72 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  unsigned __int8 v10[5];

  v10[0] = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a4, a5, v10, 2);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 8, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

_QWORD *re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 1) = 84148994;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::TextureSwizzleChannels>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::TextureSwizzleChannels>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 1;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::TextureSwizzleChannels>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  int v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_DWORD *)(result + 1) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  unsigned __int8 *Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (unsigned __int8 *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1, a4, Instance, 2);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Optional<re::mtl::TextureSwizzleChannels>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::internal::MaterialParameterBlockArrayComponentBindNodeImpl::~MaterialParameterBlockArrayComponentBindNodeImpl(re::internal::MaterialParameterBlockArrayComponentBindNodeImpl *this)
{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x2276933B8);
}

const char *re::internal::BindNodeImpl<re::internal::MaterialParameterBlockArrayComponentBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<re::internal::MaterialParameterBlockArrayComponentBindNodeImpl>::copyInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6B210;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<re::internal::MaterialParameterBlockArrayComponentBindNodeImpl>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6B210;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<re::internal::MaterialParameterBlockArrayComponentBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == "8"
      && re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

double re::internal::MaterialParameterBlockArrayComponentBindNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double re::internal::MaterialParameterBlockArrayComponentBindNodeImpl::relativeNodeForKey@<D0>(re *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v4;
  uint64_t v5;
  re *v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  double result;
  NSObject *v13;
  uint64_t v14;
  uint8_t buf[8];
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(const char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v14 = 0;
  if (*v4 == 45 || (v6 = a1, a1 = (re *)sscanf(v4, "%zu", &v14), (_DWORD)a1 != 1))
  {
    v13 = *re::foundationBindingLogObjects(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&buf[4] = v5;
      LOWORD(v16) = 2080;
      *(_QWORD *)((char *)&v16 + 2) = v4;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Failed to bind to material. Invalid binding key \"%.*s\". Index expected.", buf, 0x12u);
    }
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)buf = *((_QWORD *)v6 + 1);
    v7 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v16, (uint64_t *)v6 + 2);
    memset(v20, 0, sizeof(v20));
    re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)&v16, v20);
    re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v20);
    v8 = v19 + 32 * v17;
    v9 = v14;
    *(_QWORD *)(v8 - 32) = &off_24ED6B2A8;
    *(_QWORD *)(v8 - 24) = v9;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_QWORD *)v11 = &off_24ED6B378;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)buf;
    *(_DWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 16) = v16;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 24) = *((_QWORD *)&v16 + 1);
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 32) = v17;
    v16 = 0uLL;
    v17 = 0;
    *(_QWORD *)(v11 + 48) = v19;
    v19 = 0;
    ++v18;
    *(_DWORD *)(v11 + 40) = 1;
    *(_QWORD *)(a3 + 16) = v11;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v16);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v16);
  }
  return result;
}

double re::internal::MaterialParameterBlockArrayComponentBindNodeImpl::bindPointForKey@<D0>(re *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const char *v5;
  uint64_t v6;
  re *v8;
  _anonymous_namespace_ *v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t buf[40];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = *(const char **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v14 = 0;
  if (*v5 == 45 || (v8 = a1, a1 = (re *)sscanf(v5, "%zu", &v14), (_DWORD)a1 != 1))
  {
    v13 = *re::foundationBindingLogObjects(a1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v5;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Failed to bind to material. Invalid binding key \"%.*s\". Index expected.", buf, 0x12u);
    }
    *(_QWORD *)(a4 + 40) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 0;
  }
  else
  {
    *(_QWORD *)a4 = a2;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 8) = 0;
    re::BindPoint::addToBindPointStack((re::BindPoint *)a4, (re *)((char *)v8 + 8));
    memset(buf, 0, 32);
    re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a4 + 8), buf);
    result = re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)buf);
    v11 = *(_QWORD *)(a4 + 40) + 32 * *(_QWORD *)(a4 + 24);
    v12 = v14;
    *(_QWORD *)(v11 - 32) = &off_24ED6B2A8;
    *(_QWORD *)(v11 - 24) = v12;
  }
  return result;
}

void re::internal::SerializableMaterialParameterBlockBindPointImpl::~SerializableMaterialParameterBlockBindPointImpl(re::internal::SerializableMaterialParameterBlockBindPointImpl *this)
{
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::copyInto(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED6B2A8;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::moveInto(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED6B2A8;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::SerializableMaterialParameterBlockBindPointImpl>::implTypeInfo(void)const::typeInfo
      && *(_QWORD *)(a1 + 8) == a2[1];
}

uint64_t re::internal::SerializableMaterialParameterBlockBindPointImpl::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = 0x9E3779B97F4A7C17;
  v10[0] = a3;
  v10[1] = a4;
  v5 = *(_QWORD *)(a1 + 8);
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    v4 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, 0, v7, v8)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 2) + (v5 << 6) + v4) ^ v5;
}

uint64_t re::internal::SerializableMaterialParameterBlockBindPointImpl::isWeak()
{
  return 1;
}

uint64_t re::internal::SerializableMaterialParameterBlockBindPointImpl::isAlive(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  v12[0] = this;
  result = (uint64_t)re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 8);
  v12[1] = result;
  v12[2] = v8;
  if (result)
  {
    if (a4)
    {
      v9 = *a3;
      v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v9 + 64))(v9, v12, v10, v11);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void re::internal::SerializableMaterialParameterBlockBindPointImpl::makeAlive(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  unint64_t v8;
  _QWORD *Block;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  v8 = *(_QWORD *)(a1 + 8);
  if (*((_QWORD *)this + 6) <= v8)
    re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles(this, v8 + 1);
  if (a4)
  {
    v14[0] = this;
    Block = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(_QWORD *)(a1 + 8));
    v10 = *(_QWORD *)(a1 + 8);
    v14[1] = Block;
    v14[2] = v10;
    v11 = *a3;
    v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v11 + 72))(v11, v14, v12, v13);
  }
}

_QWORD *re::internal::SerializableMaterialParameterBlockBindPointImpl::baseValueUntyped(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  v12[0] = this;
  result = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 8);
  v12[1] = result;
  v12[2] = v8;
  if (result)
  {
    if (a4)
    {
      v9 = *a3;
      v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, v12, v10, v11);
    }
  }
  return result;
}

uint64_t re::internal::SerializableMaterialParameterBlockBindPointImpl::supportsOverrideValue(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  _QWORD *Block;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  if (!a4)
    return 0;
  v13[0] = this;
  Block = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 8);
  v13[1] = Block;
  v13[2] = v8;
  v9 = *a3;
  v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v9, v13, v10, v11);
}

_QWORD *re::internal::SerializableMaterialParameterBlockBindPointImpl::isOverridden(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  if (!a4)
    return 0;
  v12[0] = this;
  result = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 8);
  v12[1] = result;
  v12[2] = v8;
  if (result)
  {
    v9 = *a3;
    v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v9 + 104))(v9, v12, v10, v11);
  }
  return result;
}

_QWORD *re::internal::SerializableMaterialParameterBlockBindPointImpl::setIsOverridden(_QWORD *result, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  if (a4)
  {
    v8 = result;
    v13[0] = this;
    result = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, result[1]);
    v9 = v8[1];
    v13[1] = result;
    v13[2] = v9;
    if (result)
    {
      v10 = *a3;
      v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 112))(v10, v13, v11, v12, a5);
    }
  }
  return result;
}

_QWORD *re::internal::SerializableMaterialParameterBlockBindPointImpl::overrideValueUntyped(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  if (!a4)
    return 0;
  v12[0] = this;
  result = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(_QWORD *)(a1 + 8));
  v8 = *(_QWORD *)(a1 + 8);
  v12[1] = result;
  v12[2] = v8;
  if (result)
  {
    v9 = *a3;
    v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v9 + 120))(v9, v12, v10, v11);
  }
  return result;
}

_QWORD *re::internal::SerializableMaterialParameterBlockBindPointImpl::markAsWritten(uint64_t a1, re::internal::SerializableMaterialParameterBlockBindPointImpl *this, uint64_t *a3, unint64_t a4)
{
  _QWORD *result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  v13[0] = this;
  result = re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(this, *(_QWORD *)(a1 + 8));
  v9 = *(_QWORD *)(a1 + 8);
  v13[1] = result;
  v13[2] = v9;
  if (result)
  {
    if (v9 < *((_QWORD *)this + 6))
      ++*(_DWORD *)(*((_QWORD *)this + 8) + 24 * v9 + 16);
    result = re::ecs2::Component::markDirty(this);
    if (a4)
    {
      v10 = *a3;
      v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
      return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v10 + 128))(v10, v13, v11, v12);
    }
  }
  return result;
}

uint64_t re::internal::SerializableMaterialParameterBlockBindPointImpl::boundOwner()
{
  return 0;
}

_QWORD *re::internal::SerializableMaterialParameterBlockBindPointImpl::getOrCreateBlock(_QWORD *this, unint64_t a2)
{
  _QWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v3 = this;
    if (this[6] > a2)
    {
LABEL_3:
      v4 = (_DWORD *)(v3[8] + 24 * a2);
      ++v4[4];
      return *(_QWORD **)v4;
    }
    v5 = this[2];
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 176);
      if (v6)
      {
        if (*(_QWORD *)(v6 + 72) > a2)
        {
          re::ecs2::MaterialParameterBlockArrayComponent::resizeBlockHandles((re::ecs2::MaterialParameterBlockArrayComponent *)this, a2 + 1);
          if (v3[6] > a2)
            goto LABEL_3;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
    }
    return 0;
  }
  return this;
}

void re::internal::SerializableMaterialParameterBlockBindNodeImpl::~SerializableMaterialParameterBlockBindNodeImpl(re::internal::SerializableMaterialParameterBlockBindNodeImpl *this)
{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x2276933B8);
}

const char *re::internal::BindNodeImpl<re::internal::SerializableMaterialParameterBlockBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<re::internal::SerializableMaterialParameterBlockBindNodeImpl>::copyInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6B378;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<re::internal::SerializableMaterialParameterBlockBindNodeImpl>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6B378;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<re::internal::SerializableMaterialParameterBlockBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == "8"
      && re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

double re::internal::SerializableMaterialParameterBlockBindNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t re::internal::SerializableMaterialParameterBlockBindNodeImpl::relativeNodeForKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  size_t v4;
  const char *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  __guard v11;
  uint64_t v12;
  _BYTE v13[40];
  StringID v14;
  uint64_t v15;
  char v16;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  v5 = *(const char **)a2;
  v12 = *(_QWORD *)(result + 8);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)v13, (uint64_t *)(result + 16));
  *(_QWORD *)&v14.var0 = 0;
  v14.var1 = (char *)&str_110;
  re::BindPoint::addToBindPointStack<re::internal::SerializedMaterialParameterBindPointImpl,re::StringID>(&v12, &v14);
  re::StringID::destroyString((re::StringID *)&v14);
  if ((re::BindPoint::isAlive((re::BindPoint *)&v12) & 1) != 0)
  {
    v8 = re::BindPoint::baseValueUntyped((re::BindPoint *)&v12);
    if (v8)
    {
      v9 = v8;
      v10 = *(unsigned __int8 *)(v8 - 16);
      if (v10 <= 0x20)
      {
        switch(*(_BYTE *)(v8 - 16))
        {
          case 1:
            v11 = (__guard)re::introspect<float>();
            goto LABEL_27;
          case 2:
            v11 = re::introspect<BOOL>();
            goto LABEL_27;
          case 3:
            v11 = re::introspect<int>();
            goto LABEL_27;
          case 4:
          case 5:
          case 6:
            goto LABEL_19;
          case 7:
            v11 = re::introspect<unsigned int>();
            goto LABEL_27;
          default:
            if (v10 == 21)
            {
              v11 = re::introspect<re::ColorGamut4F>();
            }
            else
            {
              if (v10 != 32)
                goto LABEL_19;
              v11 = (__guard)re::introspect<re::Vector2<float>>();
            }
            break;
        }
        goto LABEL_27;
      }
      if (*(unsigned __int8 *)(v8 - 16) <= 0x2Fu)
      {
        if (v10 == 33)
        {
          v11 = (__guard)re::introspect<re::Vector3<float>>();
          goto LABEL_27;
        }
        if (v10 == 34)
        {
          v11 = (__guard)re::introspect<re::Vector4<float>>();
          goto LABEL_27;
        }
      }
      else
      {
        switch(v10)
        {
          case '0':
            v11 = re::introspect<re::Matrix2x2<float>>();
            goto LABEL_27;
          case '1':
            v11 = re::introspect<re::Matrix3x3<float>>();
            goto LABEL_27;
          case '2':
            v11 = (__guard)re::introspect<re::Matrix4x4<float>>();
LABEL_27:
            *(_QWORD *)&v14.var0 = v11;
            v14.var1 = 0;
            v15 = v9;
            v16 = 0;
            goto LABEL_28;
        }
      }
    }
  }
LABEL_19:
  *a3 = 0u;
  a3[1] = 0u;
LABEL_28:
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v13);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v13);
}

double re::internal::SerializableMaterialParameterBlockBindNodeImpl::bindPointForKey@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  const char *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  double result;
  StringID v10;

  v5 = *(_QWORD *)(a3 + 8);
  if (v5)
  {
    v6 = *(const char **)a3;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)a4 = a2;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 32) = 0;
    re::BindPoint::addToBindPointStack((re::BindPoint *)a4, (const re::BindPoint *)(a1 + 8));
    *(_QWORD *)&v10.var0 = 0;
    v10.var1 = (char *)&str_110;
    re::BindPoint::addToBindPointStack<re::internal::SerializedMaterialParameterBindPointImpl,re::StringID>((_QWORD *)a4, &v10);
    re::StringID::destroyString((re::StringID *)&v10);
  }
  else
  {
    *(_QWORD *)(a4 + 40) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 0;
  }
  return result;
}

re::StringID *re::BindPoint::addToBindPointStack<re::internal::SerializedMaterialParameterBindPointImpl,re::StringID>(_QWORD *a1, const StringID *a2)
{
  uint64_t v4;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, sizeof(v6));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v6);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v6);
  v4 = a1[5] + 32 * a1[3];
  *(_QWORD *)(v4 - 32) = &off_24ED6B410;
  return re::StringID::StringID((re::StringID *)(v4 - 24), a2);
}

__guard re::introspect<BOOL>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  const re::IntrospectionBase *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::introspect<BOOL>(void)::info = re::introspect_BOOL(0, v4);
    }
  }
  return v1[331];
}

__objc2_class_ro *re::introspect<float>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;
  const re::IntrospectionBase *v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<float>(void)::info = re::introspect_float(0, v4);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[7];
}

__guard re::introspect<int>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  const re::IntrospectionBase *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::introspect<int>(void)::info = re::introspect_int(0, v4);
    }
  }
  return v1[454];
}

__guard re::introspect<unsigned int>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  const re::IntrospectionBase *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::introspect<unsigned int>(void)::info = re::introspect_uint32_t(0, v4);
    }
  }
  return v1[456];
}

__objc2_class_ro *re::introspect<re::Vector2<float>>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::Vector2<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector2F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[11];
}

__objc2_class_ro *re::introspect<re::Vector3<float>>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::Vector3<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector3F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[13];
}

__objc2_class_ro *re::introspect<re::Vector4<float>>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::Vector4<float>>(void)::info = (_UNKNOWN *)re::introspect_Vector4F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[15];
}

uint64_t re::introspect<re::Matrix2x2<float>>()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254113218);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254113218))
  {
    qword_254113210 = re::introspect_Matrix2x2F(0);
    __cxa_guard_release(&qword_254113218);
  }
  return qword_254113210;
}

__guard re::introspect<re::Matrix3x3<float>>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::introspect<re::Matrix3x3<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix3x3F(0);
    }
  }
  return v1[458];
}

__objc2_class_ro *re::introspect<re::Matrix4x4<float>>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::Matrix4x4<float>>(void)::info = (_UNKNOWN *)re::introspect_Matrix4x4F(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[187];
}

uint64_t re::introspect<re::ColorGamut4F>()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254113228);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254113228))
  {
    qword_254113220 = re::introspect_ColorGamut4F(0);
    __cxa_guard_release(&qword_254113228);
  }
  return qword_254113220;
}

void re::internal::SerializedMaterialParameterBindPointImpl::~SerializedMaterialParameterBindPointImpl(re::internal::SerializedMaterialParameterBindPointImpl *this)
{
  re::StringID::destroyString((re::internal::SerializedMaterialParameterBindPointImpl *)((char *)this + 8));
}

{
  re::StringID::destroyString((re::internal::SerializedMaterialParameterBindPointImpl *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::implTypeInfo(void)const::typeInfo;
}

re::StringID *re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::copyInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6B410;
  return re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
}

uint64_t re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::moveInto(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  *a2 = &off_24ED6B410;
  v2 = *(_QWORD *)(result + 8);
  a2[1] = a2[1] & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[1] = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[2] = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::SerializedMaterialParameterBindPointImpl>::implTypeInfo(void)const::typeInfo
      && re::StringID::operator==((_QWORD *)(a1 + 8), a2 + 1);
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v4 = 0x9E3779B97F4A7C17;
  v10[0] = a3;
  v10[1] = a4;
  v5 = *(_QWORD *)(a1 + 8);
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    v4 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, 0, v7, v8)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 1 << 6) + (v5 >> 3) + v4) ^ (v5 >> 1);
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::isWeak()
{
  return 1;
}

BOOL re::internal::SerializedMaterialParameterBindPointImpl::isAlive(re::internal::SerializedMaterialParameterBindPointImpl *a1, _QWORD *a2)
{
  return re::internal::SerializedMaterialParameterBindPointImpl::getParameter(a1, a2) != 0;
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::baseValueUntyped(re::internal::SerializedMaterialParameterBindPointImpl *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t Parameter;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  Parameter = re::internal::SerializedMaterialParameterBindPointImpl::getParameter(a1, a2);
  if (Parameter && a4)
  {
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 88))(v7, Parameter, v8, v9);
  }
  return Parameter;
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::supportsOverrideValue(re::internal::SerializedMaterialParameterBindPointImpl *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t Parameter;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (!a4)
    return 0;
  Parameter = re::internal::SerializedMaterialParameterBindPointImpl::getParameter(a1, a2);
  v7 = *a3;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, Parameter, v8, v9);
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::isOverridden(re::internal::SerializedMaterialParameterBindPointImpl *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (!a4)
    return 0;
  result = re::internal::SerializedMaterialParameterBindPointImpl::getParameter(a1, a2);
  if (result)
  {
    v7 = result;
    v8 = *a3;
    v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, v7, v9, v10);
  }
  return result;
}

re::internal::SerializedMaterialParameterBindPointImpl *re::internal::SerializedMaterialParameterBindPointImpl::setIsOverridden(re::internal::SerializedMaterialParameterBindPointImpl *result, _QWORD *a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  re::internal::SerializedMaterialParameterBindPointImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    result = (re::internal::SerializedMaterialParameterBindPointImpl *)re::internal::SerializedMaterialParameterBindPointImpl::getParameter(result, a2);
    if (result)
    {
      v8 = result;
      v9 = *a3;
      v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (re::internal::SerializedMaterialParameterBindPointImpl *)(*(uint64_t (**)(uint64_t, re::internal::SerializedMaterialParameterBindPointImpl *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 112))(v9, v8, v10, v11, a5);
    }
  }
  return result;
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::overrideValueUntyped(re::internal::SerializedMaterialParameterBindPointImpl *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (!a4)
    return 0;
  result = re::internal::SerializedMaterialParameterBindPointImpl::getParameter(a1, a2);
  if (result)
  {
    v7 = result;
    v8 = *a3;
    v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 120))(v8, v7, v9, v10);
  }
  return result;
}

re::internal::SerializedMaterialParameterBindPointImpl *re::internal::SerializedMaterialParameterBindPointImpl::markAsWritten(re::internal::SerializedMaterialParameterBindPointImpl *result, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  re::internal::SerializedMaterialParameterBindPointImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    result = (re::internal::SerializedMaterialParameterBindPointImpl *)re::internal::SerializedMaterialParameterBindPointImpl::getParameter(result, a2);
    if (result)
    {
      v7 = result;
      re::ecs2::Component::markDirty((_QWORD *)*a2);
      v8 = *a3;
      v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (re::internal::SerializedMaterialParameterBindPointImpl *)(*(uint64_t (**)(uint64_t, re::internal::SerializedMaterialParameterBindPointImpl *, uint64_t, uint64_t))(*(_QWORD *)v8 + 128))(v8, v7, v9, v10);
    }
  }
  return result;
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::boundOwner()
{
  return 0;
}

uint64_t re::internal::SerializedMaterialParameterBindPointImpl::getParameter(re::internal::SerializedMaterialParameterBindPointImpl *this, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  StringID *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  _OWORD v24[6];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  unint64_t v45;
  _QWORD v46[4];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!a2 || !a2[1])
    return 0;
  v2 = (_QWORD *)*a2;
  if (*a2)
  {
    v3 = a2[2];
    if (v2[6] > v3)
    {
      v4 = (StringID *)((char *)this + 8);
      v5 = v2[8] + 24 * v3;
      ++*(_DWORD *)(v5 + 16);
      v6 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(*(_QWORD *)v5 + 304, (_QWORD *)this + 1);
      if (v6)
        goto LABEL_21;
      v7 = v2[2];
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 176);
        if (v8)
        {
          if (*(_QWORD *)(v8 + 72) > v3)
          {
            v9 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(_QWORD *)(v8 + 88) + 24 * v3));
            if (v9)
            {
              v36 = 0u;
              v37 = 0u;
              v34 = 0u;
              v35 = 0u;
              v31 = 0u;
              v29 = 0u;
              v30 = 0u;
              v27 = 0u;
              v28 = 0u;
              v25 = 0u;
              v26 = 0u;
              memset(v24, 0, sizeof(v24));
              BYTE8(v25) = 10;
              BYTE8(v26) = 0;
              BYTE8(v28) = 0;
              BYTE8(v30) = 0;
              v33 = 0;
              *(_QWORD *)&v34 = 0;
              v32 = 0;
              DWORD2(v34) = 0;
              *(_QWORD *)((char *)&v36 + 5) = 0;
              *(_QWORD *)&v36 = 0;
              v10 = *(_QWORD *)(v9 + 1664);
              v11 = v10 + 224;
              v19 = *(_QWORD *)&v4->var0 >> 1;
              re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v10 + 224), &v19, (uint64_t)&v20);
              v19 = 0;
              re::internal::SerializedMaterialParameterBindPointImpl::tryPopulateParameter((uint64_t)v24, (uint64_t)&v20, v10 + 224);
              if (LOBYTE(v24[0]))
                goto LABEL_16;
              v12 = *(_QWORD *)(v10 + 16);
              if (v12)
                v13 = (id)(v12 + 8);
              v18 = *(_QWORD *)&v4->var0 >> 1;
              re::MaterialParameterTable::handle((re::MaterialParameterTable *)(v12 + 248), &v18, (uint64_t)v46);
              v20 = v46[0];
              v21 = *(_OWORD *)&v46[1];
              v22 = v46[3];
              v18 = 0;
              re::internal::SerializedMaterialParameterBindPointImpl::tryPopulateParameter((uint64_t)v24, (uint64_t)&v20, v11);
              if (v12)

              if (LOBYTE(v24[0]))
              {
LABEL_16:
                v14 = v2[6];
                if (v14 <= v3)
                {
                  v23 = 0;
                  v48 = 0u;
                  v49 = 0u;
                  v47 = 0u;
                  memset(v46, 0, sizeof(v46));
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v38 = 136315906;
                  v39 = "operator[]";
                  v40 = 1024;
                  v41 = 789;
                  v42 = 2048;
                  v43 = v3;
                  v44 = 2048;
                  v45 = v14;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                v15 = v2[8] + 24 * v3;
                ++*(_DWORD *)(v15 + 16);
                v16 = *(_QWORD *)v15;
                ++*(_DWORD *)(v16 + 400);
                v6 = re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v16 + 304, v4, (uint64_t)v24);
              }
              else
              {
                v6 = 0;
              }
              re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v24);
              goto LABEL_21;
            }
          }
        }
      }
    }
  }
  v6 = 0;
LABEL_21:
  if (v6)
    return v6 + 16;
  else
    return 0;
}

void re::internal::SerializedMaterialParameterBindPointImpl::tryPopulateParameter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __n128 v11;
  _OWORD v12[5];
  uint64_t v13[3];
  uint64_t v14;
  uint64_t v15[5];
  char v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 12) & 7) != 0)
  {
    if (re::MaterialParameterHandle::isParameterType(a2, 1))
    {
      v11.n128_u32[0] = re::MaterialParameterTable::floatValue(a3, a2);
      v6 = 1;
LABEL_10:
      re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v12, v6, (unsigned __int8 *)&v11);
      v8 = v12[3];
      *(_OWORD *)(a1 + 32) = v12[2];
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 64) = v12[4];
      v9 = v12[1];
      *(_OWORD *)a1 = v12[0];
      *(_OWORD *)(a1 + 16) = v9;
      re::AssetHandle::operator=((uint64_t *)(a1 + 80), v13);
      re::OptionalMaterialSamplerData::operator=(a1 + 104, (uint64_t)&v14);
      re::DynamicArray<BOOL>::operator=(a1 + 208, v15);
      *(_BYTE *)(a1 + 248) = v16;
      *(_QWORD *)(a1 + 256) = v17;
      *(_OWORD *)(a1 + 264) = v18;
      *(_BYTE *)(a1 + 280) = v19;
LABEL_11:
      re::ecs2::SerializedMaterialParameter::~SerializedMaterialParameter((re::ecs2::SerializedMaterialParameter *)v12);
      return;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 32))
    {
      v11.n128_u64[0] = re::MaterialParameterTable::vector2FValue(a3, a2);
      v6 = 32;
      goto LABEL_10;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 34))
    {
      v11.n128_u64[0] = re::MaterialParameterTable::vector4FValue(a3, a2);
      v11.n128_u64[1] = v7;
      v6 = 34;
      goto LABEL_10;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 3))
    {
      v11.n128_u32[0] = re::MaterialParameterTable::intValue(a3, a2);
      v6 = 3;
      goto LABEL_10;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 7))
    {
      v11.n128_u32[0] = re::MaterialParameterTable::intValue(a3, a2);
      v10 = 7;
LABEL_23:
      re::ecs2::SerializedMaterialParameter::SerializedMaterialParameter((uint64_t)v12, v10, (unsigned __int8 *)&v11);
      re::ecs2::SerializedMaterialParameter::operator=(a1, (uint64_t)v12);
      goto LABEL_11;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 4))
    {
      v11.n128_u64[0] = re::MaterialParameterTable::int2Value(a3, a2);
      v10 = 4;
      goto LABEL_23;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 8))
    {
      v11.n128_u64[0] = re::MaterialParameterTable::int2Value(a3, a2);
      v10 = 8;
      goto LABEL_23;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 6))
    {
      v11 = re::MaterialParameterTable::int4Value(a3, a2);
      v10 = 6;
      goto LABEL_23;
    }
    if (re::MaterialParameterHandle::isParameterType(a2, 10))
    {
      v11 = re::MaterialParameterTable::int4Value(a3, a2);
      v10 = 10;
      goto LABEL_23;
    }
  }
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  re::IntrospectionBase *v16;
  __int128 v18;
  _OWORD v19[3];
  _OWORD v20[3];
  _OWORD v21[3];
  _OWORD v22[3];
  _OWORD v23[3];
  _OWORD v24[3];
  _OWORD v25[3];
  _OWORD v26[3];
  uint64_t v27;

  v27 = 0;
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  memset(v20, 0, sizeof(v20));
  memset(v19, 0, sizeof(v19));
  v18 = 0u;
  re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)&v18);
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= v9)
  {
    v11 = v10 + 1;
    if (v9 < v10 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v12 = 2 * v9;
        v13 = v9 == 0;
        v14 = 8;
        if (!v13)
          v14 = v12;
        if (v14 <= v11)
          v15 = v11;
        else
          v15 = v14;
        re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((_QWORD *)a4, v15);
      }
      else
      {
        re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((_QWORD *)a4, v11);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v10 = *(_QWORD *)(a4 + 16);
  }
  re::ecs2::SerializableMaterialParameterBlock::SerializableMaterialParameterBlock((re::ecs2::SerializableMaterialParameterBlock *)(*(_QWORD *)(a4 + 32) + 408 * v10), (const re::ecs2::SerializableMaterialParameterBlock *)&v18);
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::HashSetBase<re::StringID,re::StringID,re::internal::ValueAsKey<re::StringID>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v26);
  re::HashTable<re::StringID,re::ecs2::SerializedMaterialParameter,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v25);
  re::HashTable<re::StringID,re::Optional<re::ecs2::SerializableParameterBinding>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v24);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v23);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v22);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v21);
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v20);
  re::HashTable<re::StringID,re::StringID,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v19);
  *(_QWORD *)&v18 = &off_24ED426B8;
  objc_destructInstance((char *)&v18 + 8);
  v16 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 408 * *(_QWORD *)(a4 + 16) - 408);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v16);
  return v16;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlock>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 408 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 408 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlock>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 408 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 408;
        v11 -= 408;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 408 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 408 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlock>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  re::IntrospectionBase *v13;

  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  v13 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 24 * v8);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 1;
  *(_QWORD *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 24 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 24 * v9;
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v8;
          if (v12)
            v13 = (id)(v12 + 8);
          v11[1] = 0;
          v11[2] = 1;
          if (*v8)
          {

            *v8 = 0;
          }
          v8 += 3;
          v11 += 3;
          v10 -= 24;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::clear(a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 24 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 24;
        v11 -= 24;
      }
      while (v11);
    }
  }
}

void re::DynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 24 * v2;
    do
    {
      if (*(_QWORD *)v3)
      {

        *(_QWORD *)v3 = 0;
      }
      v3 += 24;
      v4 -= 24;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 24 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::SerializableMaterialParameterBlockHandle>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED6B610;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED6B668;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED6B6C0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED6B718;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MaterialParameterBlockArrayComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED6B610;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED6B668;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED6B6C0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED6B718;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 192);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 192);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 192);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 192);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6B610;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6B610;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6B668;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6B668;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6B6C0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6B6C0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6B718;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6B718;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MaterialParameterBlockArrayComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::MaterialParameterBlockArraySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MaterialParameterBlockArraySystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

re::ecs2::Component *re::CAREUtil::GetOrAddCAREComponent(_QWORD *a1, re::ecs2::ComponentTypeBase *a2, int a3, uint64_t a4, _BYTE *a5)
{
  _QWORD *v9;
  re::ecs2::EntityComponentCollection *v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t OwnerPeerID;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  re::ecs2::Component *v18;
  int v19;
  char *v21;
  re::ecs2::Component *v22;
  re::ecs2::Component *v23;

  v9 = a1;
  if (!a5)
  {
    v18 = (re::ecs2::Component *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 4), a2);
    if (v18)
      return v18;
  }
  v10 = (re::ecs2::EntityComponentCollection *)(v9 + 4);
  v11 = v9[25];
  v12 = a3 == 1;
  if (!v11)
    goto LABEL_16;
  if (!a4)
  {
    do
    {
      v14 = v9;
      v9 = (_QWORD *)v9[3];
    }
    while (v9);
    v15 = v14[2];
    if (!v15
      || (v16 = *(_QWORD *)(v15 + 56)) == 0
      || (v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16),
          (a4 = re::ServiceLocator::serviceOrNull<re::EntitlementService>(v17)) == 0))
    {
LABEL_16:
      if (a3)
        goto LABEL_17;
LABEL_22:
      if (a5)
        *a5 = 0;
      v18 = (re::ecs2::Component *)re::ecs2::EntityComponentCollection::get(v10, a2);
      if (!v18)
      {
        (*(void (**)(re::ecs2::Component **__return_ptr, re::ecs2::ComponentTypeBase *))(*(_QWORD *)a2 + 32))(&v23, a2);
        if (v11)
          re::ecs2::NetworkComponent::disableSyncForComponent((_anonymous_namespace_ **)v11, v23);
        v22 = v23;
        if (v23)
          v21 = (char *)v23 + 8;
        re::ecs2::EntityComponentCollection::add((uint64_t)v10, (uint64_t *)&v22, 1);
        if (v22)
        {

          v22 = 0;
        }
        v18 = v23;
        if (v23)

      }
      return v18;
    }
  }
  if (*(_QWORD *)(v11 + 32))
    OwnerPeerID = RESyncableGetOwnerPeerID();
  else
    OwnerPeerID = 0;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 80))(a4, OwnerPeerID);
  if (v19 != 1)
  {
    if (v19 == 2)
      goto LABEL_22;
    goto LABEL_16;
  }
  v12 = 0;
  if (!a3)
    goto LABEL_22;
LABEL_17:
  if (v12)
    goto LABEL_22;
  if (a5)
    *a5 = 1;
  return (re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd(v10, a2);
}

re::ecs2::EnvironmentLightingManagerStateTracking *re::ecs2::EnvironmentLightingManagerStateTracking::EnvironmentLightingManagerStateTracking(re::ecs2::EnvironmentLightingManagerStateTracking *this)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  v2 = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::HierarchyStateTracking((uint64_t)this);
  *(_QWORD *)v2 = &off_24ED6B770;
  *(_QWORD *)(v2 + 296) = 0;
  *(_OWORD *)(v2 + 248) = 0u;
  v2 += 248;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::EnvironmentLightingConfigurationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 2;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)v2, (uint64_t)v4);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::HierarchyStateTracking(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;

  *(_QWORD *)a1 = off_24ED6B840;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v2 = a1 + 56;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v3 = a1 + 104;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  v4 = a1 + 152;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  v5 = a1 + 200;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

void re::ecs2::EnvironmentLightingManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __guard *v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int32 v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t *v53;
  __n128 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 6;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    v8 = *(_QWORD *)(a2 + 16);
    v53 = (unint64_t *)(a1 + 56);
    v10 = *(_DWORD *)(a2 + 32);
    v51 = v10;
    do
    {
      v11 = *(_QWORD *)(v8 + 24 * v7 + 16);
      v12 = *(_QWORD **)(a1 + 296);
      if (*(_QWORD *)(a1 + 56))
      {
        v13 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
        v14 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v13 ^ (v13 >> 31)) % *(unsigned int *)(a1 + 80)));
        if ((_DWORD)v14 != 0x7FFFFFFF)
        {
          v15 = *(_QWORD *)(a1 + 72);
          while (*(_QWORD *)(v15 + 32 * v14 + 16) != v11)
          {
            v14 = *(_DWORD *)(v15 + 32 * v14 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v14 == 0x7FFFFFFF)
              goto LABEL_14;
          }
          goto LABEL_72;
        }
      }
LABEL_14:
      (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v12 + 8))(&v63, *v12, v11);
      if ((_BYTE)v63)
        v16 = v64;
      else
        v16 = 0;
      v17 = *(_QWORD *)(v11 + 24);
      v18 = 1.0;
      while (v17)
      {
        if ((*(_BYTE *)(v17 + 288) & 0x80) != 0)
          break;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v12 + 8))(&v63, *v12, v17);
        v19 = (_BYTE)v63 ? v64 : 0;
        if (v16 != v19)
          break;
        if (*v53)
        {
          v20 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
          v21 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v20 ^ (v20 >> 31)) % *(unsigned int *)(a1 + 80)));
          if ((_DWORD)v21 != 0x7FFFFFFF)
          {
            v22 = *(_QWORD *)(a1 + 72);
            while (*(_QWORD *)(v22 + 32 * v21 + 16) != v17)
            {
              v21 = *(_DWORD *)(v22 + 32 * v21 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v21 == 0x7FFFFFFF)
                goto LABEL_28;
            }
            v18 = *(_DWORD *)(v22 + 32 * v21 + 24);
            break;
          }
        }
LABEL_28:
        if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)v9[501]))
        {
          v11 = v17;
        }
        v17 = *(_QWORD *)(v17 + 24);
      }
      re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&v63);
      v56 = 0;
      v57 = 0;
      v58 = 1;
      v60 = 0;
      v61 = 0;
      v59 = 0;
      v62 = 0;
      re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::init((uint64_t)&v56, (uint64_t)&v63, 1uLL);
      v54.n128_u64[0] = v11;
      v54.n128_u32[2] = v18;
      v55 = v16;
      v23 = re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::add((uint64_t)&v56, &v54);
      v24 = v61;
      while (v24)
      {
        v25 = re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[]((uint64_t)&v56, --v24);
        v26 = *(_QWORD *)v25;
        v27 = *(float *)(v25 + 8);
        v28 = *(_QWORD *)(v25 + 16);
        re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[]((uint64_t)&v56, v24);
        v61 = v24;
        ++v62;
        if ((*(_BYTE *)(v26 + 288) & 1) != 0)
        {
          v29 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v26 + 32), (const re::ecs2::ComponentTypeBase *)v9[501]);
          if (v29)
            v27 = *(float *)(v29 + 28);
          if (v27 != 1.0)
          {
            v30 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) >> 27));
            v31 = v30 ^ (v30 >> 31);
            v32 = *v53;
            if (!*v53
              || (v32 = v31 % *(unsigned int *)(a1 + 80),
                  v33 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v32),
                  (_DWORD)v33 == 0x7FFFFFFF))
            {
LABEL_43:
              v35 = *(unsigned int *)(a1 + 92);
              if ((_DWORD)v35 == 0x7FFFFFFF)
              {
                v35 = *(unsigned int *)(a1 + 88);
                v36 = v35;
                if ((_DWORD)v35 == *(_DWORD *)(a1 + 80))
                {
                  re::HashTable<re::ecs2::Entity const*,re::ecs2::EnvironmentLightingWeight,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v53, 2 * *(_DWORD *)(a1 + 84));
                  v32 = v31 % *(unsigned int *)(a1 + 80);
                  v36 = *(_DWORD *)(a1 + 88);
                }
                *(_DWORD *)(a1 + 88) = v36 + 1;
                v37 = *(_QWORD *)(a1 + 72);
                v38 = *(_DWORD *)(v37 + 32 * v35 + 8);
              }
              else
              {
                v37 = *(_QWORD *)(a1 + 72);
                v38 = *(_DWORD *)(v37 + 32 * v35 + 8);
                *(_DWORD *)(a1 + 92) = v38 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v37 + 32 * v35 + 8) = v38 | 0x80000000;
              *(_DWORD *)(*(_QWORD *)(a1 + 72) + 32 * v35 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 32 * v35 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v32);
              *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32 * v35) = v31;
              *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32 * v35 + 16) = v26;
              *(float *)(*(_QWORD *)(a1 + 72) + 32 * v35 + 24) = v27;
              *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v32) = v35;
              ++*(_DWORD *)(a1 + 84);
              ++*(_DWORD *)(a1 + 96);
            }
            else
            {
              v34 = *(_QWORD *)(a1 + 72);
              while (*(_QWORD *)(v34 + 32 * v33 + 16) != v26)
              {
                v33 = *(_DWORD *)(v34 + 32 * v33 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v33 == 0x7FFFFFFF)
                  goto LABEL_43;
              }
            }
          }
          v39 = *(_QWORD *)(v26 + 328);
          if (v39)
          {
            v40 = *(unint64_t **)(v26 + 344);
            v41 = 8 * v39;
            do
            {
              v42 = *v40;
              (*(void (**)(__n128 *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*v12 + 8))(&v54, *v12, *v40);
              if (v54.n128_u8[0])
                v43 = v54.n128_u64[1];
              else
                v43 = 0;
              v54.n128_u64[0] = v42;
              if (v28 == v43)
              {
                v54.n128_f32[2] = v27;
                v55 = v28;
              }
              else
              {
                v54.n128_u32[2] = 1065353216;
                v55 = v43;
              }
              v23 = re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::add((uint64_t)&v56, &v54);
              ++v40;
              v41 -= 8;
            }
            while (v41);
            v24 = v61;
          }
        }
      }
      v44 = v56;
      if (v57)
      {
        v45 = v60;
        v46 = v58;
        v47 = v57 - 1;
        do
        {
          if ((v46 & 1) != 0)
            v48 = &v59;
          else
            v48 = v45;
          (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v44 + 40))(v44, v48[v47], v23);
          v46 += 2;
          v58 = v46;
          --v47;
        }
        while (v47 != -1);
        if ((v46 & 1) != 0)
          goto LABEL_71;
      }
      else if (!v56 || (v58 & 1) != 0)
      {
        goto LABEL_71;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v44 + 40))(v44, v60);
LABEL_71:
      re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&v63);
      LODWORD(v3) = v51;
      v10 = *(_DWORD *)(a2 + 32);
      v8 = *(_QWORD *)(a2 + 16);
LABEL_72:
      if (v10 <= (int)v4 + 1)
        v49 = v4 + 1;
      else
        v49 = v10;
      while (1)
      {
        v7 = (v4 + 1);
        if (v49 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v50 = v7;
        if ((*(_DWORD *)(v8 + 24 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_79;
      }
      v50 = v49;
LABEL_79:
      LODWORD(v4) = v50;
    }
    while ((_DWORD)v3 != v50);
  }
}

__n128 re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::setBucketsCapacity((_QWORD *)a1, (v4 + 32) >> 5);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v4 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v8 = (__n128 *)(v7 + 24 * (v4 & 0x1F));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  return result;
}

void re::ecs2::EnvironmentLightingManager::updateEnvironmentLightingData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 304) = a2;
  v4 = a1 + 112;
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(a1 + 8, a1 + 112);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v4);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v3 + 200);
  *(_QWORD *)(v3 + 296) = 0;
}

void re::ecs2::EnvironmentLightingManagerStateTracking::~EnvironmentLightingManagerStateTracking(re::ecs2::EnvironmentLightingManagerStateTracking *this)
{
  re::ecs2::EnvironmentLightingManagerStateTracking::~EnvironmentLightingManagerStateTracking(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 34);
  if (v2)
  {
    if (*((_QWORD *)this + 35))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 36));
      *((_QWORD *)this + 35) = 0;
      *((_QWORD *)this + 36) = 0;
    }
    *((_QWORD *)this + 34) = 0;
  }
  v3 = *((_QWORD *)this + 31);
  if (v3)
  {
    if (*((_QWORD *)this + 32))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 33));
      *((_QWORD *)this + 32) = 0;
      *((_QWORD *)this + 33) = 0;
    }
    *((_QWORD *)this + 31) = 0;
  }
  *(_QWORD *)this = off_24ED6B840;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 25);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 7);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 1);
}

uint64_t re::ecs2::EnvironmentLightingManagerStateTracking::trackedComponents(re::ecs2::EnvironmentLightingManagerStateTracking *this)
{
  return *((_QWORD *)this + 33);
}

uint64_t re::ecs2::EnvironmentLightingManagerStateTracking::trackedActivationComponents(re::ecs2::EnvironmentLightingManagerStateTracking *this)
{
  return *((_QWORD *)this + 36);
}

void re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::clearEntityHierarchyStateData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BYTE v30[120];

  if (*(_DWORD *)(a1 + 84))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v30);
    v24[0] = 0;
    v24[1] = 0;
    v25 = 1;
    v27 = 0;
    v28 = 0;
    v26 = 0;
    v29 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v24, (uint64_t)v30, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v24) = a2;
    v4 = v28;
    while (v4)
    {
      v5 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v24, v4 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v24, v28 - 1);
      v4 = --v28;
      ++v29;
      if (*(_QWORD *)(a1 + 56))
      {
        v6 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
        v7 = (v6 ^ (v6 >> 31)) % *(unsigned int *)(a1 + 80);
        v8 = *(_QWORD *)(a1 + 64);
        v9 = *(unsigned int *)(v8 + 4 * v7);
        if ((_DWORD)v9 != 0x7FFFFFFF)
        {
          v10 = *(_QWORD *)(a1 + 72);
          v11 = v10 + 32 * v9;
          if (*(_QWORD *)(v11 + 16) == v5)
          {
            *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
LABEL_10:
            v14 = *(_QWORD *)(a1 + 72);
            v15 = v14 + 32 * v9;
            v18 = *(_DWORD *)(v15 + 8);
            v17 = (int *)(v15 + 8);
            v16 = v18;
            if (v18 < 0)
            {
              *v17 = v16 & 0x7FFFFFFF;
              v14 = *(_QWORD *)(a1 + 72);
              v16 = *(_DWORD *)(v14 + 32 * v9 + 8);
            }
            *(_DWORD *)(v14 + 32 * v9 + 8) = *(_DWORD *)(a1 + 92) | v16 & 0x80000000;
            --*(_DWORD *)(a1 + 84);
            v19 = *(_DWORD *)(a1 + 96) + 1;
            *(_DWORD *)(a1 + 92) = v9;
            *(_DWORD *)(a1 + 96) = v19;
          }
          else
          {
            while (1)
            {
              v12 = v9;
              v9 = *(_DWORD *)(v10 + 32 * v9 + 8) & 0x7FFFFFFF;
              if (v9 == 0x7FFFFFFF)
                break;
              v13 = v10 + 32 * v9;
              if (*(_QWORD *)(v13 + 16) == v5)
              {
                *(_DWORD *)(v10 + 32 * v12 + 8) = *(_DWORD *)(v10 + 32 * v12 + 8) & 0x80000000 | *(_DWORD *)(v13 + 8) & 0x7FFFFFFF;
                goto LABEL_10;
              }
            }
          }
        }
      }
      v20 = *(_QWORD *)(v5 + 328);
      if (v20)
      {
        v21 = *(uint64_t **)(v5 + 344);
        v22 = 8 * v20;
        do
        {
          v23 = *v21++;
          *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v24) = v23;
          v22 -= 8;
        }
        while (v22);
        v4 = v28;
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v24);
    if (v24[0])
    {
      if ((v25 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v24[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v30);
  }
}

void re::ecs2::EnvironmentLightingManager::~EnvironmentLightingManager(re::ecs2::EnvironmentLightingManager *this)
{
  re::ecs2::EnvironmentLightingManagerStateTracking::~EnvironmentLightingManagerStateTracking((re::ecs2::EnvironmentLightingManager *)((char *)this + 8));
}

{
  re::ecs2::EnvironmentLightingManagerStateTracking::~EnvironmentLightingManagerStateTracking((re::ecs2::EnvironmentLightingManager *)((char *)this + 8));
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::EnvironmentLightingManager::environmentLightingWeightPerEntity(re::ecs2::EnvironmentLightingManager *this)
{
  return (uint64_t)this + 64;
}

uint64_t re::ecs2::EnvironmentLightingManager::registerScene(re::ecs2::EnvironmentLightingManager *this, re::EventBus **a2)
{
  re::EventBus *v2;
  re *v3;
  re *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  re *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  re *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  re *v24;
  re *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  re *v30;
  re *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t result;
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  re::ecs2::Scene *v44;
  _BYTE v45[24];
  uint64_t v46;
  re *v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v44 = (re::ecs2::Scene *)a2;
  v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 100);
    _os_crash();
    __break(1u);
  }
  v38[0] = 0;
  v3 = (re::ecs2::EnvironmentLightingManager *)((char *)this + 8);
  v38[1] = 0;
  v39 = 1;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  v43 = 0;
  v4 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v3 + 16))(v3);
  if (v5)
  {
    v6 = (uint64_t *)v4;
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      v46 = re::globalAllocators(v4)[2];
      v9 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
      *(_QWORD *)v9 = &off_24ED6B880;
      *((_QWORD *)v9 + 1) = v3;
      *((_QWORD *)v9 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>;
      *((_QWORD *)v9 + 3) = 0;
      v47 = v9;
      v10 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v45, v8, 0);
      v12 = v11;
      v13 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
      *v13 = v10;
      v13[1] = v12;
      if (v47)
      {
        (**(void (***)(re *))v47)(v47);
        if (v47 != (re *)v45)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
      }
      re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v3, v2, (uint64_t)v38, v8);
      v4 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v3, v2, (uint64_t)v38, v8);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v14 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v3 + 24))(v3);
  if (v15)
  {
    v16 = (uint64_t *)v14;
    v17 = 8 * v15;
    do
    {
      v18 = *v16++;
      re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(v3, v2, (uint64_t)v38, v18);
      v14 = (re *)re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(v3, v2, (uint64_t)v38, v18);
      v17 -= 8;
    }
    while (v17);
  }
  v46 = re::globalAllocators(v14)[2];
  v19 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
  *(_QWORD *)v19 = &off_24ED6B988;
  *((_QWORD *)v19 + 1) = v3;
  *((_QWORD *)v19 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>;
  *((_QWORD *)v19 + 3) = 0;
  v47 = v19;
  v20 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v45, 0, 0);
  v22 = v21;
  v23 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *v23 = v20;
  v23[1] = v22;
  v24 = v47;
  if (v47)
  {
    v24 = (re *)(**(uint64_t (***)(re *))v47)(v47);
    if (v47 != (re *)v45)
      v24 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  }
  v46 = re::globalAllocators(v24)[2];
  v25 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
  *(_QWORD *)v25 = &off_24ED6B9E0;
  *((_QWORD *)v25 + 1) = v3;
  *((_QWORD *)v25 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>;
  *((_QWORD *)v25 + 3) = 0;
  v47 = v25;
  v26 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v45, 0, 0);
  v28 = v27;
  v29 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *v29 = v26;
  v29[1] = v28;
  v30 = v47;
  if (v47)
  {
    v30 = (re *)(**(uint64_t (***)(re *))v47)(v47);
    if (v47 != (re *)v45)
      v30 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  }
  v46 = re::globalAllocators(v30)[2];
  v31 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v46 + 32))(v46, 32, 0);
  *(_QWORD *)v31 = &off_24ED6BA38;
  *((_QWORD *)v31 + 1) = v3;
  *((_QWORD *)v31 + 2) = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>;
  *((_QWORD *)v31 + 3) = 0;
  v47 = v31;
  v32 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v45, 0, 0);
  v34 = v33;
  v35 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v38);
  *v35 = v32;
  v35[1] = v34;
  if (v47)
  {
    (**(void (***)(re *))v47)(v47);
    if (v47 != (re *)v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
  }
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 160, (uint64_t *)&v44, (uint64_t)v38);
  re::HashSetBase<re::ecs2::Scene const*,re::ecs2::Scene const*,re::internal::ValueAsKey<re::ecs2::Scene const*>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 16, (uint64_t *)&v44);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v38);
  result = v38[0];
  if (v38[0])
  {
    if ((v39 & 1) == 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v38[0] + 40))();
  }
  return result;
}

uint64_t re::ecs2::EnvironmentLightingManager::unregisterScene(re::ecs2::EnvironmentLightingManager *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  re::ecs2::Scene *v14;

  v14 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 16, (uint64_t *)&v14);
  v3 = *((_QWORD *)v14 + 13);
  v4 = *(_QWORD *)(v3 + 328);
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 344);
    v6 = 8 * v4;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)v5 + 288) & 1) != 0)
        (*(void (**)(char *))(*((_QWORD *)this + 1) + 40))((char *)this + 8);
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  v7 = (char *)this + 160;
  result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    v9 = *((_QWORD *)v14 + 36);
    if (v9)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 40);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::trackedComponents()
{
  return 0;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::trackedActivationComponents()
{
  return 0;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentDidActivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED6B8D8;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::subscribeToEventToInvalidateEntityHierarchy<REComponentWillDeactivateEvent>(re *a1, re::EventBus *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v15 = re::globalAllocators(a1)[2];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 32))(v15, 32, 0);
  *v8 = &off_24ED6B930;
  v8[1] = a1;
  v8[2] = re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>;
  v8[3] = 0;
  v16 = v8;
  v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a2, (uint64_t)v14, a4, 0);
  v11 = v10;
  v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a3);
  *v12 = v9;
  v12[1] = v11;
  result = (uint64_t)v16;
  if (v16)
  {
    result = (**(uint64_t (***)(_BYTE *))v16)(v16);
    if (v16 != v14)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return result;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6B880;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6B880;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6B8D8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6B8D8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6B930;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6B930;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (!*(_BYTE *)(a2 + 371)
    && (*(_BYTE *)(a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v4))
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v4);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v4);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6B988;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6B988;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if (!*(_BYTE *)(a2 + 371))
  {
    v3 = a1 + 200;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 104, &v5);
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v3, &v5);
  }
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6B9E0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6B9E0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::invalidateEntityHierarchyEventHandler<RESceneEntityWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  v3 = a1 + 200;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 104, &v5);
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v3, &v5);
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6BA38;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6BA38;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>,REEventHandlerResult (re::ecs2::HierarchyStateTracking<re::ecs2::EnvironmentLightingWeight>::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::EnvironmentLightingWeight,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_16, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 768, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::EnvironmentLightingManagerStateTracking::buildEnvironmentLightingWeightForEntityHierarchy(re::ecs2::Entity const*,re::ecs2::WorldRootProvider const&)::EntityWeight,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 5)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 5)) + 24 * (a2 & 0x1F);
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::EnvironmentLightingWeight,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,re::ecs2::EnvironmentLightingWeight,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = 0;
        v13 = v7;
        v14 = DWORD1(v9);
        do
        {
          v15 = (uint64_t *)(*(_QWORD *)&v24[16] + v11);
          if ((*(_DWORD *)(*(_QWORD *)&v24[16] + v11 + 8) & 0x80000000) != 0)
          {
            v16 = *v15;
            v17 = *(unsigned int *)(a1 + 24);
            v18 = *v15 % v17;
            v19 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v19 == 0x7FFFFFFF)
            {
              v19 = *(unsigned int *)(a1 + 32);
              v20 = v19;
              if ((_DWORD)v19 == (_DWORD)v17)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::EnvironmentLightingWeight,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v14));
                v18 = v16 % *(unsigned int *)(a1 + 24);
                v20 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
            }
            else
            {
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 32 * v19 + 8) = v22 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19) = v16;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 16) = v15[2];
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 24) = *((_DWORD *)v15 + 6);
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v14;
            v10 = *(_DWORD *)&v24[32];
          }
          ++v12;
          v11 += 32;
        }
        while (v12 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

uint64_t *re::ecs2::allocInfo_AREnvironmentProbeComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_311);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_311))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541139A0, 0);
    *(uint64_t *)((char *)&qword_2541139B0 + 6) = 0;
    qword_2541139B0 = 0;
    qword_2541139C0 = 0;
    qword_2541139C8 = 0xFFFFFFFFLL;
    qword_2541139A0 = (uint64_t)&off_24ED7DAA8;
    qword_2541139D0 = (uint64_t)"AREnvironmentProbeComponent";
    dword_2541139D8 = 0;
    xmmword_2541139E0 = 0u;
    unk_2541139F0 = 0u;
    xmmword_254113A00 = 0u;
    qword_254113A10 = 0;
    __cxa_guard_release(&_MergedGlobals_311);
  }
  return &qword_2541139A0;
}

void re::ecs2::initInfo_AREnvironmentProbeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  __int128 v30;

  v29[0] = 0xBEA5DE57511179DELL;
  v29[1] = "AREnvironmentProbeComponent";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  v4 = atomic_load((unsigned __int8 *)&qword_254113948);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254113948);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254113970 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "extents";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x4000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254113978 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_AssetHandle((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "texture";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x2000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254113980 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_uint32_t((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "priority";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x5C00000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254113988 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_float((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "weight";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x5800000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254113990 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_BOOL((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "useAsBackground";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x5000000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254113998 = v27;
      __cxa_guard_release(&qword_254113948);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_254113970;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AREnvironmentProbeComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AREnvironmentProbeComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AREnvironmentProbeComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AREnvironmentProbeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v28 = v30;
}

double re::internal::defaultConstruct<re::ecs2::AREnvironmentProbeComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED592C0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(int32x4_t *)(v3 + 64) = vdupq_n_s32(0x7F800000u);
  *(_BYTE *)(v3 + 80) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v3 + 84) = result;
  *(_DWORD *)(v3 + 92) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::AREnvironmentProbeComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 4));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::AREnvironmentProbeComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED592C0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(int32x4_t *)(v1 + 64) = vdupq_n_s32(0x7F800000u);
  *(_BYTE *)(v1 + 80) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 84) = result;
  *(_DWORD *)(v1 + 92) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::AREnvironmentProbeComponent>(_QWORD *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AREnvironmentProbeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AREnvironmentProbeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AREnvironmentProbeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AREnvironmentProbeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AREnvironmentProbeComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ProbeClusterExclusionComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254113950);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254113950))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113A18, 0);
    *(uint64_t *)((char *)&qword_254113A28 + 6) = 0;
    qword_254113A28 = 0;
    qword_254113A38 = 0;
    qword_254113A40 = 0xFFFFFFFFLL;
    qword_254113A18 = (uint64_t)&off_24ED7DAA8;
    qword_254113A48 = (uint64_t)"ProbeClusterExclusionComponent";
    dword_254113A50 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_254113A88 = 0;
    __cxa_guard_release(&qword_254113950);
  }
  return &qword_254113A18;
}

void re::ecs2::initInfo_ProbeClusterExclusionComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xFC7C25AD817EA972;
  v10[1] = "ProbeClusterExclusionComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254113960);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254113960);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254113958 = v8;
      __cxa_guard_release(&qword_254113960);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254113958;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ProbeClusterExclusionComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ProbeClusterExclusionComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ProbeClusterExclusionComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ProbeClusterExclusionComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::ProbeClusterExclusionComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59340;
}

void *re::internal::defaultDestruct<re::ecs2::ProbeClusterExclusionComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ProbeClusterExclusionComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED59340;
}

void *re::internal::defaultDestructV2<re::ecs2::ProbeClusterExclusionComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ProbeClusterExclusionComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProbeClusterExclusionComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProbeClusterExclusionComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProbeClusterExclusionComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProbeClusterExclusionComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AREnvironmentProbeSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254113968);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254113968))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113A90, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254113AA0 = 0;
    qword_254113AB0 = 0;
    qword_254113AB8 = 0xFFFFFFFFLL;
    qword_254113A90 = (uint64_t)&off_24ED7DAA8;
    qword_254113AC0 = (uint64_t)"AREnvironmentProbeSystem";
    dword_254113AC8 = 0;
    xmmword_254113AD0 = 0u;
    unk_254113AE0 = 0u;
    xmmword_254113AF0 = 0u;
    qword_254113B00 = 0;
    __cxa_guard_release(&qword_254113968);
  }
  return &qword_254113A90;
}

void re::ecs2::initInfo_AREnvironmentProbeSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x1E17583E47DC4EFALL;
  v5[1] = "AREnvironmentProbeSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1F800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AREnvironmentProbeSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AREnvironmentProbeSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AREnvironmentProbeSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AREnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AREnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AREnvironmentProbeSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AREnvironmentProbeSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::AREnvironmentProbeSystem *re::internal::defaultConstruct<re::ecs2::AREnvironmentProbeSystem>(int a1, int a2, re::ecs2::AREnvironmentProbeSystem *this)
{
  return re::ecs2::AREnvironmentProbeSystem::AREnvironmentProbeSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AREnvironmentProbeSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a3 + 55));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &off_24ED6BA90;
  v4 = a3[22];
  if (v4)
  {
    if (a3[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[24]);
      a3[23] = 0;
      a3[24] = 0;
    }
    a3[22] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AREnvironmentProbeSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 55));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &off_24ED6BA90;
  v2 = a1[22];
  if (v2)
  {
    if (a1[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[24]);
      a1[23] = 0;
      a1[24] = 0;
    }
    a1[22] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AREnvironmentProbeSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AREnvironmentProbeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AREnvironmentProbeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AREnvironmentProbeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AREnvironmentProbeSystem>, this);
}

BOOL re::ecs2::AREnvironmentProbeComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  v8 = v21;
  v9 = v22;
  v21 = a4;
  v22 = v8;
  v23 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22)
                      + 40);
      v15 = v21;
      v16 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
      if (v14)
        v17 = 40;
      else
        v17 = 32;
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v15, v16, *(_QWORD *)(a3 + v17));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::AREnvironmentProbeComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  re::ecs2::ComponentBucketsBase *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v27, a5, 0);
  v8 = v27;
  v9 = v28;
  v27 = a4;
  v28 = v8;
  v29 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    while (1)
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(*(_QWORD *)v14 + 40);
      if (!v16)
        break;
      v17 = atomic_load((unsigned int *)(v16 + 704));
      if (v17 == 3)
      {
        v18 = v27;
        v19 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
        v20 = (re::ecs2::ComponentBucketsBase *)a3[2];
        v21 = a3[4];
      }
      else
      {
        v22 = *(_QWORD *)(v15 + 40);
        if (!v22)
          break;
        v23 = atomic_load((unsigned int *)(v22 + 704));
        if (v23 != 2)
          break;
        v18 = v27;
        v19 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
        v20 = (re::ecs2::ComponentBucketsBase *)a3[2];
        v21 = a3[6];
      }
      re::ecs2::ComponentBucketsBase::moveComponent(v20, v18, v19, v21);
LABEL_16:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
      if (v28 == a5 && (unsigned __int16)v29 == 0xFFFF && WORD1(v29) == 0xFFFF)
        return *(_DWORD *)(a5 + 40) != 0;
    }
    re::AssetHandle::loadAsync((re::AssetHandle *)(v15 + 32));
    goto LABEL_16;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AREnvironmentProbeComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id *v16;
  id v17;
  uint64_t v18;
  uint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
  if (v5 && (v6 = *(_QWORD *)(v5 + 104)) != 0 && (v7 = *(_QWORD *)(v6 + 320)) != 0)
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
    v22 = a4;
    v23 = v21;
    if (v21.i64[0] == a5 && v21.u16[4] == 0xFFFFLL && (v21.i32[2] & 0xFFFF0000) == 0xFFFF0000)
      return *(_DWORD *)(a5 + 40) != 0;
    while (1)
    {
      v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v23);
      v11 = *(float32x4_t **)v10;
      v12 = *(_QWORD *)(*(_QWORD *)v10 + 16);
      v13 = *(void **)(v12 + 296);
      v14 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(*(_QWORD *)v10 + 32));
      if (*(_DWORD *)(v14 + 240))
        break;
      v15 = v14;
      v16 = (id *)(v14 + 160);
      v17 = objc_msgSend(*(id *)(v14 + 160), sel_hash);
      v21.i64[0] = (uint64_t)v13;
      v18 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v7 + 16), &v21);
      if (v18 == -1)
      {
        re::ecs2::TransformComponent::worldSRT((re::ecs2::TransformComponent **)v12, (const re::ecs2::Entity *)1, (uint64_t)&v21);
        v21 = vmulq_f32(v21, v11[4]);
        if (*(_DWORD *)(v15 + 240))
          break;
        re::ProbeManager::addProbe(v7, v13, v16, v11[5].i8[0], (__int128 *)&v21, v11[5].f32[1]);
      }
      else if (*(id *)(*(_QWORD *)(v7 + 24) + 16 * v18 + 8) != v17)
      {
        if (*(_DWORD *)(v15 + 240))
          break;
        re::ProbeManager::updateProbe(v7, (uint64_t)v13, v16, v11[5].f32[1]);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v23);
      if (v23.i64[0] == a5 && v23.u16[4] == 0xFFFF && v23.u16[5] == 0xFFFF)
        return *(_DWORD *)(a5 + 40) != 0;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "renderManager && renderManager->probeManager()", "processUpdatingComponents", 121);
    _os_crash();
    __break(1u);
  }
  v20 = std::__throw_bad_variant_access[abi:nn180100]();
  return re::ecs2::AREnvironmentProbeSystem::updateScenes(v20);
}

uint64_t re::ecs2::AREnvironmentProbeSystem::updateScenes(uint64_t result, id **a2, uint64_t a3, uint64_t a4)
{
  float v4;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float32x4_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint32x4_t v35;
  id *v36;
  id *v37;
  re::ecs2::RenderingSubsystem *v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  re::ecs2::System *v57;
  uint64_t v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  BOOL v66;
  uint64_t v67;
  re::RenderFrame *v68;
  id v69;
  id v70;
  id v71[2];
  char v72;
  char v73;
  unint64_t v74;
  unsigned __int8 v75;
  _BYTE v76[16];
  uint64_t v77[2];
  _QWORD v78[3];

  v4 = *(float *)&a3;
  v6 = result;
  v78[0] = a3;
  v78[1] = a4;
  v7 = *(_QWORD *)(result + 104);
  if (v7 && (*(_BYTE *)(v7 + 424) & 0x10) == 0 || a4 != 1)
    return result;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v77);
  v8 = a2[1];
  if (v8)
  {
    v9 = 0;
    v10 = *a2;
    v11 = 8 * (_QWORD)v8;
    do
    {
      v12 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)((char *)*v10 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v12)
        v13 = *(_QWORD *)(v12 + 24);
      else
        v13 = 0;
      v9 += v13;
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v76, 3067, v6);
  v15 = *(_QWORD *)(v6 + 112);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 104)) == 0 || !*(_QWORD *)(v16 + 320))
  {
    re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) ", "m_renderManager && m_renderManager->probeManager()", "updateScenes", 173);
    _os_crash();
    __break(1u);
    goto LABEL_82;
  }
  if (!re::RenderFrameBox::get(v16 + 344, 0xFFFFFFFFFFFFFFFuLL))
  {
LABEL_82:
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) ", "m_renderManager->renderFrame()", "updateScenes", 174);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v18 = *(_QWORD **)(v6 + 112);
  v19 = v18[13];
  if (!v19)
  {
    v68 = 0;
    goto LABEL_18;
  }
  v68 = (re::RenderFrame *)re::RenderFrameBox::get(v19 + 344, 0xFFFFFFFFFFFFFFFuLL);
  v18 = *(_QWORD **)(v6 + 112);
  v20 = v18[13];
  if (!v20)
  {
LABEL_18:
    v21 = 0;
    goto LABEL_19;
  }
  v21 = *(_QWORD *)(v20 + 320);
LABEL_19:
  v22 = *(float *)(v21 + 820);
  v23 = (float32x4_t *)v18[36];
  v24 = v18[19];
  v25 = *(unsigned __int8 *)(v24 + 172);
  v75 = *(_BYTE *)(v24 + 172);
  v26 = v18[11];
  if (v26)
  {
    v69 = (id)0xB313D2E5205756C4;
    v70 = "colorpipe:enableISPTonemapping";
    re::DebugSettingsManager::getWithErrorCode<BOOL>(v26, &v69, &v75);
    re::StringID::destroyString((re::StringID *)&v69);
    v25 = v75;
  }
  v27 = 1.0;
  if (!v25)
    v27 = *(float *)(v24 + 12488);
  v28 = v23[76].i64[0];
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    v29.i32[3] = 0;
    v30.i32[3] = 0;
    v31.i32[3] = 0;
  }
  else
  {
    v29 = v23[77];
    v30 = v23[78];
    v31 = v23[79];
  }
  v32 = vmulq_n_f32(v29, v22 * v27);
  v33 = vmulq_n_f32(v30, v22 * v27);
  v34 = vmulq_n_f32(v31, v22 * v27);
  v32.i32[3] = 0;
  v33.i32[3] = 0;
  v34.i32[3] = 0;
  v35 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v21 + 880), v34), (int8x16_t)vceqq_f32(*(float32x4_t *)(v21 + 864), v33)), (int8x16_t)vceqq_f32(*(float32x4_t *)(v21 + 848), v32));
  v35.i32[3] = v35.i32[2];
  if ((vminvq_u32(v35) & 0x80000000) == 0)
  {
    *(float32x4_t *)(v21 + 848) = v32;
    *(float32x4_t *)(v21 + 864) = v33;
    *(float32x4_t *)(v21 + 880) = v34;
    *(_BYTE *)(v21 + 184) = 1;
  }
  if (*(unsigned __int8 *)(v21 + 896) != v75)
  {
    *(_BYTE *)(v21 + 896) = v75;
    *(_BYTE *)(v21 + 184) = 1;
  }
  v36 = a2[1];
  if (v36)
  {
    v37 = *a2;
    v67 = (uint64_t)&(*a2)[(_QWORD)v36];
    while (1)
    {
      v38 = (re::ecs2::RenderingSubsystem *)*v37;
      v69 = *v37;
      v39 = *(_QWORD *)(*(_QWORD *)(v6 + 264)
                      + 16
                      * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 256), &v69)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v6 + 368, v39);
      v40 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v6 + 200, v39);
      v41 = *(_QWORD *)(*v40 + 224);
      v42 = v40[3];
      v43 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v40[2] + 8, v42);
      if (*(_DWORD *)(v43 + 40))
        v44 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v41 + 24))(v41, v78, v40, v42, v43, 0);
      else
        v44 = 0;
      v45 = v40[5];
      v46 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v40[2] + 8, v45);
      if (*(_DWORD *)(v46 + 40))
        v44 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v41 + 32))(v41, v78, v40, v45, v46, 0);
      v47 = v40[6];
      v48 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v40[2] + 8, v47);
      if (*(_DWORD *)(v48 + 40))
        break;
      if (v44)
        goto LABEL_39;
LABEL_40:
      if (*(_BYTE *)(v6 + 432))
      {
        v49 = *(_QWORD *)(v6 + 376);
        v50 = *(_DWORD *)(v6 + 384);
        if (v49 < 0xB)
        {
          v53 = (uint64_t *)(v6 + 392);
          if ((v50 & 1) == 0)
            v53 = *(uint64_t **)(v6 + 400);
          if (!v49)
            goto LABEL_58;
          v54 = 0;
          v55 = 8 * v49;
          do
          {
            v56 = *v53++;
            v54 |= v56;
            v55 -= 8;
          }
          while (v55);
          if (!v54)
            goto LABEL_58;
        }
        else
        {
          v51 = (_QWORD *)(v6 + 392);
          if ((v50 & 1) == 0)
            v51 = *(_QWORD **)(v6 + 400);
          v52 = 8 * v49;
          while (!*v51)
          {
            ++v51;
            v52 -= 8;
            if (!v52)
              goto LABEL_58;
          }
        }
        v57 = *(re::ecs2::System **)(v6 + 416);
        if (!*((_BYTE *)v57 + 86))
          re::ecs2::System::queueToRun(v57, 0.0);
      }
LABEL_58:
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v38, 0, (re::DynamicString **)v68, &v69);
      v74 = (unint64_t)v69 >> 1;
      v58 = re::RenderFrameData::stream((re::RenderFrame *)((char *)v68 + 264), (const re::WeakStringID *)&v74);
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(v58 + 48) + 880))(*(_QWORD *)(v58 + 48), &v73);
      re::StringID::destroyString((re::StringID *)&v69);
      if (++v37 == (id *)v67)
      {
        v59 = *(float *)v78;
        goto LABEL_61;
      }
    }
    if (((v44 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v41 + 40))(v41, v78, v40, v47, v48, 0)) & 1) == 0)goto LABEL_40;
LABEL_39:
    re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 368, v39);
    goto LABEL_40;
  }
  v59 = v4;
LABEL_61:
  re::ProbeManager::update((re::ProbeManager *)v21, v59);
  v60 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 32))(*(_QWORD *)(v6 + 40));
  v61 = re::ServiceLocator::serviceOrNull<re::FrameAnalysisService>(v60);
  if (v61)
  {
    if (*(_BYTE *)(v21 + 232))
      v62 = 1;
    else
      v62 = *(_QWORD *)(v21 + 208) != 0;
    *(_BYTE *)(v61 + 133) = v62;
  }
  v63 = *(_QWORD *)(v21 + 152);
  if (v63)
  {
    v64 = 0;
    v65 = (_BYTE *)(*(_QWORD *)(v21 + 168) + 16);
    v66 = 1;
    do
    {
      if (*(v65 - 16) && *v65)
        break;
      ++v64;
      v65 += 160;
      v66 = v63 > v64;
    }
    while (v63 != v64);
    if (v66 && *(_BYTE *)v21)
    {
      v69 = 0;
      v70 = 0;
      v71[0] = 0;
      NS::SharedPtr<MTL::Texture>::operator=(&v69, (void **)(v21 + 80));
      NS::SharedPtr<MTL::Texture>::operator=(&v70, (void **)(v21 + 88));
      NS::SharedPtr<MTL::Texture>::operator=(v71, (void **)(v21 + 128));
      v71[1] = *(id *)(v21 + 96);
      v72 = *(_BYTE *)(v21 + 824);
      (*(void (**)(_QWORD, id *))(**((_QWORD **)v68 + 40) + 144))(*((_QWORD *)v68 + 40), &v69);
      if (v71[0])
      {

        v71[0] = 0;
      }
      if (v70)
      {

        v70 = 0;
      }
      if (v69)

    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v76);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v77);
}

void re::ecs2::AREnvironmentProbeSystem::willAddSceneToECSService(re::ecs2::AREnvironmentProbeSystem *this, re::EventBus **a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  re::ecs2::System *v40;
  unint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  re::EventBus *v49;
  _QWORD *v50;
  uint64_t v51;
  re::ecs2::Scene *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61[2];
  _BYTE v62[24];
  uint64_t v63;
  _BYTE *v64;
  int v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  uint64_t v73[12];

  v73[11] = *MEMORY[0x24BDAC8D0];
  v52 = (re::ecs2::Scene *)a2;
  v4 = (char *)this + 200;
  v61[0] = (uint64_t)a2;
  v5 = (re::ecs2::AREnvironmentProbeSystem *)((char *)this + 320);
  v6 = *((_QWORD *)this + 41);
  v7 = *((_DWORD *)this + 84);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 344);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 44);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 344);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 44);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v53 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 320, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v53);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::AREnvironmentProbeSystem *)((char *)this + 256), v61, (uint64_t *)&v53);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v53);
    v15 = (char *)this + 368;
    v16 = v53;
    goto LABEL_49;
  }
LABEL_17:
  v60 = 0u;
  v53 = 0u;
  *(_QWORD *)&v54 = 0;
  *((_QWORD *)&v54 + 1) = -1;
  v55 = 0u;
  v56 = 0u;
  v57 = 0;
  v58 = 1;
  v59 = 0uLL;
  v17 = *((_QWORD *)this + 30);
  *(_QWORD *)&v60 = 0;
  v18 = *((_QWORD *)this + 26);
  DWORD2(v60) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 25, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 26);
  }
  if (v18 <= v17 >> 2)
  {
    v61[1] = 0;
    memset(v73, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v65 = 136315906;
    v66 = "operator[]";
    v67 = 1024;
    v68 = 858;
    v69 = 2048;
    v70 = v17 >> 2;
    v71 = 2048;
    v72 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  if ((*((_BYTE *)this + 216) & 1) != 0)
    v19 = (char *)this + 224;
  else
    v19 = (char *)*((_QWORD *)this + 29);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 30);
  ++*((_DWORD *)this + 62);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v53;
  v23 = v54;
  v24 = v55;
  *(_QWORD *)(v21 + 48) = v56;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v56 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v53);
  v26 = *((_QWORD *)this + 30);
  if (!v26)
  {
LABEL_73:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::init(v27, (uint64_t)v4, v61[0]);
  v73[0] = *((_QWORD *)this + 30) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::AREnvironmentProbeSystem *)((char *)this + 256), v61, v73);
  v28 = *((_QWORD *)this + 30);
  v29 = *((_QWORD *)this + 45);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 45) = v28;
  *(_QWORD *)&v53 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v53);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 45) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 336) & 1) != 0)
      v33 = (char *)this + 344;
    else
      v33 = (char *)*((_QWORD *)this + 44);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 41) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 30);
  v35 = *((_QWORD *)this + 51);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 51) = v34;
  *(_QWORD *)&v53 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::AREnvironmentProbeSystem *)((char *)this + 368), v36, &v53);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 51) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 384) & 1) != 0)
      v39 = (char *)this + 392;
    else
      v39 = (char *)*((_QWORD *)this + 50);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 47) - 8] &= v37;
  }
  v16 = v73[0];
  v15 = (char *)this + 368;
LABEL_49:
  v40 = (re::ecs2::System *)re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 432))
    goto LABEL_67;
  v41 = *((_QWORD *)this + 47);
  v42 = *((_DWORD *)this + 96);
  if (v41 >= 0xB)
  {
    if ((v42 & 1) != 0)
      v43 = (_QWORD *)((char *)this + 392);
    else
      v43 = (_QWORD *)*((_QWORD *)this + 50);
    v45 = 8 * v41;
    while (!*v43)
    {
      ++v43;
      v45 -= 8;
      if (!v45)
        goto LABEL_67;
    }
LABEL_65:
    v40 = (re::ecs2::System *)*((_QWORD *)this + 52);
    if (!*((_BYTE *)v40 + 86))
      re::ecs2::System::queueToRun(v40, 0.0);
    goto LABEL_67;
  }
  if ((v42 & 1) != 0)
  {
    v44 = (uint64_t *)((char *)this + 392);
    if (!v41)
      goto LABEL_67;
  }
  else
  {
    v44 = (uint64_t *)*((_QWORD *)this + 50);
    if (!v41)
      goto LABEL_67;
  }
  v46 = 0;
  v47 = 8 * v41;
  do
  {
    v48 = *v44++;
    v46 |= v48;
    v47 -= 8;
  }
  while (v47);
  if (v46)
    goto LABEL_65;
LABEL_67:
  v49 = a2[36];
  if (v49)
  {
    v63 = re::globalAllocators(v40)[2];
    v50 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v63 + 32))(v63, 32, 0);
    *v50 = &off_24ED6BB88;
    v50[1] = this;
    v50[2] = re::ecs2::AREnvironmentProbeSystem::componentWillDeactivateHandler;
    v50[3] = 0;
    v64 = v50;
    *(_QWORD *)&v53 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v62, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    *((_QWORD *)&v53 + 1) = v51;
    re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::addNew((re::ecs2::AREnvironmentProbeSystem *)((char *)this + 440), (uint64_t *)&v52, &v53);
    if (v64)
    {
      (**(void (***)(_BYTE *))v64)(v64);
      if (v64 != v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
    }
  }
}

uint64_t re::ecs2::AREnvironmentProbeSystem::componentWillDeactivateHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  re::ProbeManager *v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 168) + 112);
  if (v2 && (v3 = *(_QWORD *)(v2 + 104)) != 0 && (v4 = *(re::ProbeManager **)(v3 + 320)) != 0)
  {
    v5 = *(_QWORD *)(a2 + 296);
    v7 = v5;
    if (re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 2, &v7) != -1)re::ProbeManager::removeProbe(v4, v5);
    return 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "renderManager && renderManager->probeManager()", "willDeactivateComponent", 62);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::ecs2::AREnvironmentProbeSystem::willRemoveSceneFromECSService(re::ecs2::AREnvironmentProbeSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t result;
  re::ecs2::Scene *v17;
  re::ecs2::Scene *v18;

  v17 = a2;
  v18 = a2;
  v3 = (uint64_t *)((char *)this + 256);
  v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 32, &v18);
  if (v4 != -1)
  {
    v5 = *((_QWORD *)this + 33) + 16 * v4;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 320, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 368, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 200, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v18);
  }
  result = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)this + 55, (uint64_t *)&v17);
  if (result != -1)
  {
    if (*((_QWORD *)v17 + 36))
      re::EventBus::unsubscribe(*((_QWORD *)v17 + 36), *(_QWORD *)(*((_QWORD *)this + 56) + 24 * result + 8), *(_QWORD *)(*((_QWORD *)this + 56) + 24 * result + 16));
    return re::HashBrown<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,void,false>::remove((uint64_t *)this + 55, (uint64_t *)&v17);
  }
  return result;
}

uint64_t re::ecs2::AREnvironmentProbeComponentStateImpl::dependsOnComponents(re::ecs2::AREnvironmentProbeComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AREnvironmentProbeComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

void re::ecs2::AREnvironmentProbeSystem::~AREnvironmentProbeSystem(re::ecs2::AREnvironmentProbeSystem *this)
{
  uint64_t v2;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 440);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED6BA90;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 440);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED6BA90;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AREnvironmentProbeSystem::typeInfo(re::ecs2::AREnvironmentProbeSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AREnvironmentProbeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AREnvironmentProbeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AREnvironmentProbeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AREnvironmentProbeSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::AREnvironmentProbeSystem,REEventHandlerResult (re::ecs2::AREnvironmentProbeSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AREnvironmentProbeSystem,REEventHandlerResult (re::ecs2::AREnvironmentProbeSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AREnvironmentProbeSystem,REEventHandlerResult (re::ecs2::AREnvironmentProbeSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6BB88;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AREnvironmentProbeSystem,REEventHandlerResult (re::ecs2::AREnvironmentProbeSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6BB88;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AREnvironmentProbeSystem,REEventHandlerResult (re::ecs2::AREnvironmentProbeSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::AREnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AREnvironmentProbeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED6BBE0;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED6BC38;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED6BC90;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED6BCE8;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED6BBE0;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED6BC38;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED6BC90;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED6BCE8;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AREnvironmentProbeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6BBE0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6BBE0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6BC38;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6BC38;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6BC90;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6BC90;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6BCE8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6BCE8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AREnvironmentProbeComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::allocInfo_Static3DTextComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254113B10);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254113B10))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113B98, 0);
    *(uint64_t *)((char *)&qword_254113BA8 + 6) = 0;
    qword_254113BA8 = 0;
    qword_254113BB8 = 0;
    qword_254113BC0 = 0xFFFFFFFFLL;
    qword_254113B98 = (uint64_t)&off_24ED7DAA8;
    qword_254113BC8 = (uint64_t)"Static3DTextComponent";
    dword_254113BD0 = 0;
    unk_254113BD8 = 0u;
    unk_254113BE8 = 0u;
    unk_254113BF8 = 0u;
    qword_254113C08 = 0;
    __cxa_guard_release(&qword_254113B10);
  }
  return &qword_254113B98;
}

void re::ecs2::initInfo_Static3DTextComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  const re::IntrospectionBase *v49;
  void *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  const re::IntrospectionBase *v56;
  void *v57;
  uint64_t v58;
  uint64_t *v59;
  const re::IntrospectionBase *v60;
  void *v61;
  uint64_t v62;
  __int128 v63;
  _QWORD v64[2];
  __int128 v65;

  v64[0] = 0x685065A25BB6F622;
  v64[1] = "Static3DTextComponent";
  re::StringID::destroyString((re::StringID *)v64);
  *((_OWORD *)this + 2) = v65;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_312);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_312);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254113B20 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "mExtrusionDepth";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254113B28 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_float((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "mFontSize";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254113B30 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_uint8_t((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "mSegmentDensity";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2400000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254113B38 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_uint8_t((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "mGenerateMetaDataForRayTracing";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x2800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254113B40 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_uint8_t((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "mInstanceGlyphs";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x2900000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254113B48 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_uint8_t((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "mAlignment";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x2500000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254113B50 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_uint8_t((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "mLineBreakMode";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x2600000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254113B58 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_uint8_t((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "mVerticalAlignment";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x2700000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_254113B60 = v40;
      v41 = re::introspectionAllocator((re *)v40);
      v42 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "mTextFrameSize";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0x5800000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_254113B68 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::IntrospectionInfo<re::DynamicString>::get(1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "mFontName";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0x600000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_254113B70 = v47;
      v48 = re::introspectionAllocator((re *)v47);
      v50 = re::IntrospectionInfo<re::DynamicString>::get(1, v49);
      v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 72, 8);
      *(_DWORD *)v51 = 1;
      *(_QWORD *)(v51 + 8) = "mTextString";
      *(_QWORD *)(v51 + 16) = v50;
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v51 + 32) = 0x800000000BLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(_QWORD *)(v51 + 48) = 0;
      *(_QWORD *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_254113B78 = v51;
      v52 = re::introspectionAllocator((re *)v51);
      v53 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v54 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 72, 8);
      *(_DWORD *)v54 = 1;
      *(_QWORD *)(v54 + 8) = "mTextFrameOrigin";
      *(_QWORD *)(v54 + 16) = v53;
      *(_QWORD *)(v54 + 24) = 0;
      *(_QWORD *)(v54 + 32) = 0x500000000CLL;
      *(_DWORD *)(v54 + 40) = 0;
      *(_QWORD *)(v54 + 48) = 0;
      *(_QWORD *)(v54 + 56) = 0;
      *(_DWORD *)(v54 + 64) = 0;
      qword_254113B80 = v54;
      v55 = re::introspectionAllocator((re *)v54);
      v57 = re::introspect_uint8_t((re *)1, v56);
      v58 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v55 + 32))(v55, 72, 8);
      *(_DWORD *)v58 = 1;
      *(_QWORD *)(v58 + 8) = "mGenerateSides";
      *(_QWORD *)(v58 + 16) = v57;
      *(_QWORD *)(v58 + 24) = 0;
      *(_QWORD *)(v58 + 32) = 0x2A0000000DLL;
      *(_DWORD *)(v58 + 40) = 0;
      *(_QWORD *)(v58 + 48) = 0;
      *(_QWORD *)(v58 + 56) = 0;
      *(_DWORD *)(v58 + 64) = 0;
      qword_254113B88 = v58;
      v59 = re::introspectionAllocator((re *)v58);
      v61 = re::introspect_uint8_t((re *)1, v60);
      v62 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v59 + 32))(v59, 72, 8);
      *(_DWORD *)v62 = 1;
      *(_QWORD *)(v62 + 8) = "mGenerateBack";
      *(_QWORD *)(v62 + 16) = v61;
      *(_QWORD *)(v62 + 24) = 0;
      *(_QWORD *)(v62 + 32) = 0x2B0000000ELL;
      *(_DWORD *)(v62 + 40) = 0;
      *(_QWORD *)(v62 + 48) = 0;
      *(_QWORD *)(v62 + 56) = 0;
      *(_DWORD *)(v62 + 64) = 0;
      qword_254113B90 = v62;
      __cxa_guard_release(&_MergedGlobals_312);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 15;
  *((_QWORD *)this + 8) = &qword_254113B20;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::Static3DTextComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::Static3DTextComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::Static3DTextComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::Static3DTextComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v63 = v65;
}

uint64_t re::internal::defaultConstruct<re::ecs2::Static3DTextComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::Static3DTextComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::Static3DTextComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = (_OWORD *)(a3 + 248);
  v4 = *(_QWORD *)(a3 + 248);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 256) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 264));
    *v5 = 0u;
    v5[1] = 0u;
  }
  v6 = *(_QWORD *)(a3 + 216);
  if (v6)
  {
    if ((*(_BYTE *)(a3 + 224) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a3 + 232));
    *(_OWORD *)(a3 + 216) = 0u;
    *(_OWORD *)(a3 + 232) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 160));
  v7 = *(_QWORD *)(a3 + 128);
  if (v7)
  {
    if ((*(_BYTE *)(a3 + 136) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(a3 + 144));
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
  }
  v8 = *(_QWORD *)(a3 + 96);
  if (v8)
  {
    if ((*(_BYTE *)(a3 + 104) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a3 + 112));
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
  }
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::Static3DTextComponent>(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_OWORD *)(a1 + 248);
  v2 = *(_QWORD *)(a1 + 248);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 256) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 264));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 224) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 232));
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 128);
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a1 + 144));
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
  }
  v6 = *(_QWORD *)(a1 + 96);
  if (v6)
  {
    if ((*(_BYTE *)(a1 + 104) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a1 + 112));
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
  }
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_Static3DTextComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Static3DTextComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Static3DTextComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Static3DTextComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Static3DTextComponent>, this);
}

uint64_t *re::ecs2::allocInfo_Static3DTextSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254113B18);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254113B18))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113C10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254113C20 = 0;
    qword_254113C30 = 0;
    qword_254113C38 = 0xFFFFFFFFLL;
    qword_254113C10 = (uint64_t)&off_24ED7DAA8;
    qword_254113C40 = (uint64_t)"Static3DTextSystem";
    dword_254113C48 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254113C80 = 0;
    __cxa_guard_release(&qword_254113B18);
  }
  return &qword_254113C10;
}

void re::ecs2::initInfo_Static3DTextSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xB93D0EB0A66DD936;
  v5[1] = "Static3DTextSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_Static3DTextSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::Static3DTextSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::Static3DTextSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::Static3DTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::Static3DTextSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::Static3DTextSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::Static3DTextSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::Static3DTextSystem *re::internal::defaultConstruct<re::ecs2::Static3DTextSystem>(int a1, int a2, re::ecs2::Static3DTextSystem *this)
{
  return re::ecs2::Static3DTextSystem::Static3DTextSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::Static3DTextSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = a3[45];
  if (v4)
  {
    if (a3[46])
    {
      v5 = a3 + 46;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[47]);
      *v5 = 0;
      a3[47] = 0;
    }
    a3[45] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 13);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::Static3DTextSystem>(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[45];
  if (v2)
  {
    if (a1[46])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[47]);
      a1[46] = 0;
      a1[47] = 0;
    }
    a1[45] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 13);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_Static3DTextSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Static3DTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Static3DTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Static3DTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Static3DTextSystem>, this);
}

BOOL re::ecs2::Static3DTextComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v13;
  uint64_t v14;
  uint32x2_t v15;
  uint32x2_t v16;
  unint64_t v17;
  unint64_t v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  float32x4_t *v27;
  __int128 v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v36;
  uint64_t v37;
  float32x4_t v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int32x2_t v53;
  char v54;
  __int128 v55;
  char v56;
  __int16 v57;
  int v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  _OWORD v64[2];

  if (!*(_QWORD *)(a1 + 8))
    return 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v38, a5, 0);
  v63 = a4;
  v64[0] = v38[0];
  if (v38[0].i64[0] != a5 || v38[0].u16[4] != 0xFFFFLL || (v38[0].i32[2] & 0xFFFF0000) != 4294901760)
  {
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      v13 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)v64);
      v14 = *(_QWORD *)v13;
      if (!*(_QWORD *)(*(_QWORD *)v13 + 168)
        || *(_BYTE *)(v14 + 44)
        || *(float *)(v14 + 28) != *(float *)(v14 + 184)
        || *(float *)(v14 + 32) != *(float *)(v14 + 188)
        || *(unsigned __int8 *)(v14 + 36) != *(unsigned __int8 *)(v14 + 192)
        || *(unsigned __int8 *)(v14 + 37) != *(unsigned __int8 *)(v14 + 193)
        || *(unsigned __int8 *)(v14 + 38) != *(unsigned __int8 *)(v14 + 194)
        || *(unsigned __int8 *)(v14 + 39) != *(unsigned __int8 *)(v14 + 195)
        || *(unsigned __int8 *)(v14 + 40) != *(unsigned __int8 *)(v14 + 196)
        || *(unsigned __int8 *)(v14 + 41) != *(unsigned __int8 *)(v14 + 197)
        || *(unsigned __int8 *)(v14 + 42) != *(unsigned __int8 *)(v14 + 198)
        || *(unsigned __int8 *)(v14 + 43) != *(unsigned __int8 *)(v14 + 199)
        || (v15 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)(v14 + 80), *(float32x2_t *)(v14 + 200))),
            (vpmax_u32(v15, v15).u32[0] & 0x80000000) != 0)
        || (v16 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)(v14 + 88), *(float32x2_t *)(v14 + 208))),
            (vpmax_u32(v16, v16).u32[0] & 0x80000000) != 0)
        || re::DynamicString::operator!=(v14 + 96, v14 + 216)
        || re::DynamicString::operator!=(v14 + 128, v14 + 248))
      {
        v17 = re::Hash<re::DynamicString>::operator()((uint64_t)v38, v14 + 128);
        v18 = re::Hash<re::DynamicString>::operator()((uint64_t)v38, v14 + 96);
        v19 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"Static3DTextComponent/%f/%f/%f/%f/%f/%f/%i/%i/%i/%i/%i/%i/%i/%i/%lu/%lu.compiledmesh", (re::DynamicString *)&v60, *(float *)(v14 + 28), *(float *)(v14 + 32), *(float *)(v14 + 80), *(float *)(v14 + 84), *(float *)(v14 + 88), *(float *)(v14 + 92), *(unsigned __int8 *)(v14 + 36), *(unsigned __int8 *)(v14 + 37), *(unsigned __int8 *)(v14 + 38), *(unsigned __int8 *)(v14 + 39), *(unsigned __int8 *)(v14 + 42), *(unsigned __int8 *)(v14 + 43), *(unsigned __int8 *)(v14 + 40), *(unsigned __int8 *)(v14 + 41), v17, v18);
        *((_QWORD *)&v49 + 1) = 0;
        v50 = 0uLL;
        v20 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v49, 0);
        *((_QWORD *)&v51 + 1) = 0;
        v52 = 0uLL;
        re::DynamicString::setCapacity(&v51, 0);
        v53 = _D8;
        v54 = 5;
        v55 = 0uLL;
        v56 = 0;
        v57 = 4;
        v58 = 16843009;
        v59 = 0;
        re::DynamicString::operator=((re::DynamicString *)&v51, (re::DynamicString *)(v14 + 96));
        re::DynamicString::operator=((re::DynamicString *)&v49, (re::DynamicString *)(v14 + 128));
        v53 = vrev64_s32(*(int32x2_t *)(v14 + 28));
        v54 = *(_BYTE *)(v14 + 36);
        v55 = *(_OWORD *)(v14 + 80);
        v56 = *(_BYTE *)(v14 + 38);
        LOBYTE(v57) = *(_BYTE *)(v14 + 37);
        HIBYTE(v57) = *(_BYTE *)(v14 + 39);
        LOBYTE(v58) = *(_BYTE *)(v14 + 42) != 0;
        BYTE1(v58) = *(_BYTE *)(v14 + 43) != 0;
        v59 = *(_BYTE *)(v14 + 41) != 0;
        re::MeshPrimitiveProvider::makeDescriptor((re::MeshPrimitiveProvider *)&v49, 0, *(_BYTE *)(v14 + 40) != 0, (uint64_t)v38);
        (*(void (**)(__int128 *__return_ptr, _QWORD, float32x4_t *))(**(_QWORD **)(a1 + 8) + 40))(&v36, *(_QWORD *)(a1 + 8), v38);
        v21 = *(_OWORD *)(v14 + 160);
        *(_OWORD *)(v14 + 160) = v36;
        v36 = v21;
        v22 = *(_QWORD *)(v14 + 176);
        *(_QWORD *)(v14 + 176) = v37;
        v37 = v22;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v36);
        *(_QWORD *)(v14 + 184) = *(_QWORD *)(v14 + 28);
        v23 = *(_DWORD *)(v14 + 40);
        *(_DWORD *)(v14 + 192) = *(_DWORD *)(v14 + 36);
        *(_DWORD *)(v14 + 196) = v23;
        *(_OWORD *)(v14 + 200) = *(_OWORD *)(v14 + 80);
        re::DynamicString::operator=((re::DynamicString *)(v14 + 216), (re::DynamicString *)(v14 + 96));
        re::DynamicString::operator=((re::DynamicString *)(v14 + 248), (re::DynamicString *)(v14 + 128));
        *(_BYTE *)(v14 + 197) = *(_BYTE *)(v14 + 41);
        *(_BYTE *)(v14 + 44) = 0;
        if ((_QWORD)v47)
        {
          if ((BYTE8(v47) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v47 + 40))();
          v47 = 0u;
          v48 = 0u;
        }
        if (v42)
        {
          if (v46)
            (*(void (**)(void))(*(_QWORD *)v42 + 40))();
          v46 = 0;
          v43 = 0;
          v44 = 0;
          v42 = 0;
          ++v45;
        }
        if ((_QWORD)v39)
        {
          if (v41)
            (*(void (**)(void))(*(_QWORD *)v39 + 40))();
          v41 = 0;
          *(_QWORD *)&v40 = 0;
          v39 = 0uLL;
          ++DWORD2(v40);
        }
        if (v38[0].i64[0] && (v38[0].i8[8] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v38[0].i64[0] + 40))();
        if ((_QWORD)v51)
        {
          if ((BYTE8(v51) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v51 + 40))();
          v51 = 0u;
          v52 = 0u;
        }
        if ((_QWORD)v49 && (BYTE8(v49) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        if (v60 && (v61 & 1) != 0)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 40))(v60, v62);
      }
      v24 = *(_QWORD *)(v14 + 16);
      v25 = *(_QWORD **)(v24 + 176);
      if (!v25)
        v25 = (_QWORD *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v24 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v26 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v14 + 160));
      if (v26)
      {
        if (v25[5] != *(_QWORD *)(v14 + 168))
        {
          v27 = (float32x4_t *)v26;
          re::AssetHandle::operator=(v25 + 4, (uint64_t *)(v14 + 160));
          re::ecs2::Component::markDirty(v25);
          v38[0] = (float32x4_t)xmmword_2260E5F10;
          v38[1] = (float32x4_t)xmmword_2260E5F20;
          v39 = xmmword_2260E5F40;
          v40 = xmmword_2260E5D70;
          re::MeshAsset::aabbFromMesh(v27, v38, (uint64_t)&v49);
          v28 = v50;
          *(_OWORD *)(v14 + 48) = v49;
          *(_OWORD *)(v14 + 64) = v28;
        }
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v14 + 160));
        v29 = *(_QWORD *)(v14 + 168);
        if (!v29)
          goto LABEL_59;
        v30 = atomic_load((unsigned int *)(v29 + 704));
        if (v30 != 3)
          goto LABEL_59;
      }
      v31 = v63;
      v32 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v64);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v31, v32, *(_QWORD *)(a3 + 32));
LABEL_59:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v64);
    }
    while (*(_QWORD *)&v64[0] != a5 || WORD4(v64[0]) != 0xFFFF || WORD5(v64[0]) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::Static3DTextSystem::deactivateComponent(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  int32x4_t v11;
  __int128 v12;
  uint64_t v13;

  if (a4)
  {
    v5 = 8 * a4;
    v11 = vdupq_n_s32(0x7F800000u);
    do
    {
      v6 = *a3++;
      v7 = *(_OWORD *)(v6 + 160);
      v8 = *(_QWORD *)(v6 + 176);
      *(_QWORD *)(v6 + 168) = 0;
      *(_QWORD *)(v6 + 176) = 0;
      *(_QWORD *)(v6 + 160) = 0;
      v12 = v7;
      v13 = v8;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v12);
      *(_QWORD *)&v9 = 0x7F0000007FLL;
      *((_QWORD *)&v9 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)(v6 + 48) = v11;
      *(_OWORD *)(v6 + 64) = v9;
      *(_BYTE *)(v6 + 44) = 0;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::Static3DTextSystem::willAddSystemToECSService(re::ecs2::Static3DTextSystem *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AssetService>(v2);
  *((_QWORD *)this + 44) = result;
  return result;
}

uint64_t re::ecs2::Static3DTextSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 352) = 0;
  return this;
}

void re::ecs2::Static3DTextSystem::willAddSceneToECSService(re::ecs2::Static3DTextSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  re::ecs2::System *v47;
  re::ecs2::Scene *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_QWORD *)&v50 = this;
  *((_QWORD *)&v50 + 1) = re::ecs2::Static3DTextSystem::deactivateComponent;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::createSubscription<re::ecs2::Static3DTextSystem>(re::ecs2::Static3DTextSystem *,REEventHandlerResult (re::ecs2::Static3DTextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Slice<re::ecs2::Static3DTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::Subscription const&,re::Slice<re::ecs2::Static3DTextComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 304), (uint64_t)&v50);
  v48 = a2;
  v5 = *((_QWORD *)this + 29);
  v6 = *((_DWORD *)this + 60);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)((char *)this + 248);
    else
      v7 = (_QWORD *)*((_QWORD *)this + 32);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)((char *)this + 248);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = (uint64_t *)*((_QWORD *)this + 32);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v50 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 224, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, v50);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::init(v13, (uint64_t)this + 104, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::Static3DTextSystem *)((char *)this + 160), &v48, (uint64_t *)&v50);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 224, v50);
    v14 = (char *)this + 272;
    v15 = v50;
    goto LABEL_49;
  }
LABEL_17:
  v57 = 0u;
  v50 = 0u;
  *(_QWORD *)&v51 = 0;
  *((_QWORD *)&v51 + 1) = -1;
  v52 = 0u;
  v53 = 0u;
  v54 = 0;
  v55 = 1;
  v56 = 0uLL;
  v16 = *((_QWORD *)this + 18);
  *(_QWORD *)&v57 = 0;
  v17 = *((_QWORD *)this + 14);
  DWORD2(v57) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 13, (v16 + 4) >> 2);
    v17 = *((_QWORD *)this + 14);
  }
  if (v17 <= v16 >> 2)
  {
    v49 = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v16 >> 2;
    v64 = 2048;
    v65 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 120) & 1) != 0)
    v18 = (char *)this + 128;
  else
    v18 = (char *)*((_QWORD *)this + 17);
  v19 = *(_QWORD *)&v18[8 * (v16 >> 2)];
  ++*((_QWORD *)this + 18);
  ++*((_DWORD *)this + 38);
  v20 = v19 + 112 * (v16 & 3);
  v21 = v50;
  v22 = v51;
  v23 = v52;
  *(_QWORD *)(v20 + 48) = v53;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v53 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v50);
  v25 = *((_QWORD *)this + 18);
  if (!v25)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768, v48, v49);
    _os_crash();
    __break(1u);
  }
  v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::init(v26, (uint64_t)this + 104, (uint64_t)v48);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 18) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::Static3DTextSystem *)((char *)this + 160), &v48, (uint64_t *)v66);
  v27 = *((_QWORD *)this + 18);
  v28 = *((_QWORD *)this + 33);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *((_QWORD *)this + 33) = v27;
  *(_QWORD *)&v50 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::Static3DTextSystem *)((char *)this + 224), v29, &v50);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *((_QWORD *)this + 33) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*((_BYTE *)this + 240) & 1) != 0)
      v32 = (char *)this + 248;
    else
      v32 = (char *)*((_QWORD *)this + 32);
    *(_QWORD *)&v32[8 * *((_QWORD *)this + 29) - 8] &= v30;
  }
  v33 = *((_QWORD *)this + 18);
  v34 = *((_QWORD *)this + 39);
  if ((v33 & 0x3F) != 0)
    v35 = (v33 >> 6) + 1;
  else
    v35 = v33 >> 6;
  *((_QWORD *)this + 39) = v33;
  *(_QWORD *)&v50 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::Static3DTextSystem *)((char *)this + 272), v35, &v50);
  if (v33 && v34 > v33)
  {
    v36 = 63;
    v37 = *((_QWORD *)this + 39) & 0x3FLL;
    if (v37 && v37 != 63)
      v36 = ~(-1 << v37);
    if ((*((_BYTE *)this + 288) & 1) != 0)
      v38 = (char *)this + 296;
    else
      v38 = (char *)*((_QWORD *)this + 38);
    *(_QWORD *)&v38[8 * *((_QWORD *)this + 35) - 8] &= v36;
  }
  v15 = *(_QWORD *)&v66[0];
  v14 = (char *)this + 272;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v14, v15);
  if (!*((_BYTE *)this + 336))
    return;
  v39 = *((_QWORD *)this + 35);
  v40 = *((_DWORD *)this + 72);
  if (v39 >= 0xB)
  {
    if ((v40 & 1) != 0)
      v41 = (_QWORD *)((char *)this + 296);
    else
      v41 = (_QWORD *)*((_QWORD *)this + 38);
    v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43)
        return;
    }
LABEL_65:
    v47 = (re::ecs2::System *)*((_QWORD *)this + 40);
    if (!*((_BYTE *)v47 + 86))
      re::ecs2::System::queueToRun(v47, 0.0);
    return;
  }
  if ((v40 & 1) != 0)
  {
    v42 = (uint64_t *)((char *)this + 296);
    if (!v39)
      return;
  }
  else
  {
    v42 = (uint64_t *)*((_QWORD *)this + 38);
    if (!v39)
      return;
  }
  v44 = 0;
  v45 = 8 * v39;
  do
  {
    v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44)
    goto LABEL_65;
}

uint64_t re::ecs2::Static3DTextSystem::willRemoveSceneFromECSService(re::ecs2::Static3DTextSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  re::ecs2::ComponentBucketsBase *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_QWORD *)&v18 = this;
  *((_QWORD *)&v18 + 1) = re::ecs2::Static3DTextSystem::deactivateComponent;
  v19 = 0;
  v20 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::createSubscription<re::ecs2::Static3DTextSystem>(re::ecs2::Static3DTextSystem *,REEventHandlerResult (re::ecs2::Static3DTextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Slice<re::ecs2::Static3DTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::Subscription const&,re::Slice<re::ecs2::Static3DTextComponent*>&&)#1}::__invoke;
  re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 304, &v18);
  *(_QWORD *)&v18 = a2;
  v5 = (uint64_t *)((char *)this + 160);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 20, &v18);
  if (result != -1)
  {
    v7 = *((_QWORD *)this + 21) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 224, *(_QWORD *)(v7 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 272, *(_QWORD *)(v7 + 8));
    v8 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, *(_QWORD *)(v7 + 8));
    if (*v8)
    {
      v9 = v8;
      *v8 = 0;
      v10 = v8 + 1;
      v11 = *(_QWORD *)(v8[1] + 288);
      if (v11)
      {
        v12 = v8[12];
        if (v12)
        {
          for (i = 0; i != v12; ++i)
          {
            v14 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v9 + 7), i);
            re::EventBus::unsubscribe(v11, *(_QWORD *)v14, *(_QWORD *)(v14 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v9 + 7));
      v15 = 0;
      v16 = v9 + 3;
      do
      {
        v17 = (re::ecs2::ComponentBucketsBase *)v9[2];
        if (*(_QWORD *)v17)
          re::ecs2::ComponentBucketsBase::removeBucket(v17, v16[v15]);
        v16[v15++] = -1;
      }
      while (v15 != 4);
      *v10 = 0;
      v10[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v5, &v18);
  }
  return result;
}

uint64_t re::ecs2::Static3DTextSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re::ecs2::System *v24;
  _BYTE v25[16];
  uint64_t v26[2];
  _QWORD v27[2];
  uint64_t v28;

  v27[0] = a3;
  v27[1] = a4;
  if (a2)
  {
    v5 = result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v26);
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25, 3023, v5);
    v28 = a2;
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 168)
                   + 16
                   * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v5 + 160), &v28)+ 8);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v5 + 272, v6);
    v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5 + 104, v6);
    v8 = *(_QWORD *)(*v7 + 224);
    v9 = v7[3];
    v10 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v9);
    if (*(_DWORD *)(v10 + 40))
      v11 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 24))(v8, v27, v7, v9, v10, 0);
    else
      v11 = 0;
    v12 = v7[5];
    v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v12);
    if (*(_DWORD *)(v13 + 40))
      v11 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, v27, v7, v12, v13, 0);
    v14 = v7[6];
    v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v7[2] + 8, v14);
    if (*(_DWORD *)(v15 + 40))
    {
      if (((v11 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, v27, v7, v14, v15, 0)) & 1) == 0)goto LABEL_10;
    }
    else if (!v11)
    {
LABEL_10:
      if (*(_BYTE *)(v5 + 336))
      {
        v16 = *(_QWORD *)(v5 + 280);
        v17 = *(_DWORD *)(v5 + 288);
        if (v16 >= 0xB)
        {
          if ((v17 & 1) != 0)
            v18 = (_QWORD *)(v5 + 296);
          else
            v18 = *(_QWORD **)(v5 + 304);
          v20 = 8 * v16;
          while (!*v18)
          {
            ++v18;
            v20 -= 8;
            if (!v20)
              goto LABEL_30;
          }
LABEL_28:
          v24 = *(re::ecs2::System **)(v5 + 320);
          if (!*((_BYTE *)v24 + 86))
            re::ecs2::System::queueToRun(v24, 0.0);
          goto LABEL_30;
        }
        if ((v17 & 1) == 0)
        {
          v19 = *(uint64_t **)(v5 + 304);
          if (!v16)
            goto LABEL_30;
LABEL_25:
          v21 = 0;
          v22 = 8 * v16;
          do
          {
            v23 = *v19++;
            v21 |= v23;
            v22 -= 8;
          }
          while (v22);
          if (!v21)
            goto LABEL_30;
          goto LABEL_28;
        }
        v19 = (uint64_t *)(v5 + 296);
        if (v16)
          goto LABEL_25;
      }
LABEL_30:
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v25);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v26);
    }
    re::DynamicBitset<unsigned long long,256ul>::setBit(v5 + 272, v6);
    goto LABEL_10;
  }
  return result;
}

BOOL re::internal::FontNameAndGlyphIndexCacheKey::operator==(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  const __CFString *v3;
  _BOOL8 result;

  result = 0;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16))
  {
    v2 = *(const __CFString **)a1;
    v3 = *(const __CFString **)a2;
    if (v2 == v3 || v2 && v3 && CFStringCompare(v2, v3, 0) == kCFCompareEqualTo)
      return 1;
  }
  return result;
}

uint64_t re::ecs2::Static3DTextComponentStateImpl::dependsOnComponents(re::ecs2::Static3DTextComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::Static3DTextComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::Static3DTextComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::Static3DTextComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::Static3DTextSystem::~Static3DTextSystem(re::ecs2::Static3DTextSystem *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    if (*((_QWORD *)this + 46))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 47));
      *((_QWORD *)this + 46) = 0;
      *((_QWORD *)this + 47) = 0;
    }
    *((_QWORD *)this + 45) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    if (*((_QWORD *)this + 46))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 47));
      *((_QWORD *)this + 46) = 0;
      *((_QWORD *)this + 47) = 0;
    }
    *((_QWORD *)this + 45) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::Static3DTextSystem::typeInfo(re::ecs2::Static3DTextSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Static3DTextSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Static3DTextSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Static3DTextSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Static3DTextSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::Static3DTextComponent>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;

  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v2 = (_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 96) = 0u;
  v3 = (_QWORD *)(a1 + 96);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_24ED44118;
  *(_QWORD *)(v4 + 28) = 0x3F8000003E800000;
  *(_DWORD *)(v4 + 36) = 1029;
  *(_BYTE *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 41) = 16843009;
  *(_QWORD *)&v5 = 0x7F0000007FLL;
  *((_QWORD *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v4 + 48) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)v2 = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0x3F8000003E800000;
  *(_QWORD *)(a1 + 192) = 0x101010000000405;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(a1 + 216), 0);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(a1 + 248), 0);
  return a1;
}

id re::internal::defaultRetain<re::ecs2::Static3DTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::Static3DTextSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::createSubscription<re::ecs2::Static3DTextSystem>(re::ecs2::Static3DTextSystem *,REEventHandlerResult (re::ecs2::Static3DTextSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Slice<re::ecs2::Static3DTextComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::Static3DTextComponent>,re::Slice<re::ecs2::Static3DTextComponent*>>::Subscription const&,re::Slice<re::ecs2::Static3DTextComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED6BE30;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED6BE88;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED6BEE0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED6BF38;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED6BE30;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED6BE88;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED6BEE0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED6BF38;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6BE30;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6BE30;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6BE88;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6BE88;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6BEE0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6BEE0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6BF38;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6BF38;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::Static3DTextComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::allocInfo_AudioSessionComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_313);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_313))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113CB8, 0);
    *(uint64_t *)((char *)&qword_254113CC8 + 6) = 0;
    qword_254113CC8 = 0;
    qword_254113CD8 = 0;
    qword_254113CE0 = 0xFFFFFFFFLL;
    qword_254113CB8 = (uint64_t)&off_24ED7DAA8;
    qword_254113CE8 = (uint64_t)"AudioSessionComponent";
    dword_254113CF0 = 0;
    xmmword_254113CF8 = 0u;
    unk_254113D08 = 0u;
    xmmword_254113D18 = 0u;
    qword_254113D28 = 0;
    __cxa_guard_release(&_MergedGlobals_313);
  }
  return &qword_254113CB8;
}

void re::ecs2::initInfo_AudioSessionComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x95BFFC8E07900DBALL;
  v18[1] = "AudioSessionComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_254113C90);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254113C90);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254113CA0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "audioSessionUUIDToControl";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254113CA8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_uint32_t((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "audioSessionIDToJoin";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x4000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254113CB0 = v16;
      __cxa_guard_release(&qword_254113C90);
    }
  }
  *((_QWORD *)this + 2) = 0x10000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254113CA0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioSessionComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioSessionComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioSessionComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioSessionComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

re::ecs2::AudioSessionComponent *re::internal::defaultConstruct<re::ecs2::AudioSessionComponent>(int a1, int a2, re::ecs2::AudioSessionComponent *this)
{
  return re::ecs2::AudioSessionComponent::AudioSessionComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioSessionComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioSessionComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioSessionComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioSessionComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioSessionComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioSessionComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioSessionComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AudioSessionSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254113C98);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254113C98))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113D30, 0);
    *(uint64_t *)((char *)&qword_254113D40 + 6) = 0;
    qword_254113D40 = 0;
    qword_254113D50 = 0;
    qword_254113D58 = 0xFFFFFFFFLL;
    qword_254113D30 = (uint64_t)&off_24ED7DAA8;
    qword_254113D60 = (uint64_t)"AudioSessionSystem";
    dword_254113D68 = 0;
    unk_254113D70 = 0u;
    unk_254113D80 = 0u;
    unk_254113D90 = 0u;
    qword_254113DA0 = 0;
    __cxa_guard_release(&qword_254113C98);
  }
  return &qword_254113D30;
}

void re::ecs2::initInfo_AudioSessionSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x42CCCA7DAA7DA89ELL;
  v5[1] = "AudioSessionSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1A800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AudioSessionSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioSessionSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioSessionSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioSessionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioSessionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioSessionSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioSessionSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::AudioSessionSystem *re::internal::defaultConstruct<re::ecs2::AudioSessionSystem>(int a1, int a2, re::ecs2::AudioSessionSystem *this)
{
  return re::ecs2::AudioSessionSystem::AudioSessionSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AudioSessionSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)(a3 + 184));
  v4 = *(_QWORD *)(a3 + 120);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 152) = 0;
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 120) = 0;
    ++*(_DWORD *)(a3 + 144);
  }

  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::AudioSessionSystem>(uint64_t a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 152))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    ++*(_DWORD *)(a1 + 144);
  }

  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_AudioSessionSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioSessionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioSessionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioSessionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioSessionSystem>, this);
}

re::ecs2::AudioSessionComponent *re::ecs2::AudioSessionComponent::AudioSessionComponent(re::ecs2::AudioSessionComponent *this)
{
  uint64_t v2;
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  REAudioSessionComponentWrapper *v5;
  void *v6;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED6BF90;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  v3 = (_QWORD *)(v2 + 32);
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 5) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 10, 0);
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  v5 = -[REAudioSessionComponentWrapper initWithComponent:]([REAudioSessionComponentWrapper alloc], "initWithComponent:", this);
  v6 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v5;

  return this;
}

void re::ecs2::AudioSessionComponent::~AudioSessionComponent(id *this)
{
  id v2;
  id v3;

  *this = &off_24ED6BF90;
  objc_msgSend(this[17], "setComponent:", 0);
  re::ecs2::AudioSessionComponent::clearControllerObjects((re::ecs2::AudioSessionComponent *)this);

  v2 = this[10];
  if (v2)
  {
    if (((_BYTE)this[11] & 1) != 0)
      (*(void (**)(id, id))(*(_QWORD *)v2 + 40))(v2, this[12]);
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
  }
  objc_destroyWeak(this + 9);
  v3 = this[4];
  if (v3)
  {
    if (((_BYTE)this[5] & 1) != 0)
      (*(void (**)(id, id))(*(_QWORD *)v3 + 40))(v3, this[6]);
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  re::ecs2::AudioSessionComponent::~AudioSessionComponent(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::AudioSessionComponent::clearControllerObjects(re::ecs2::AudioSessionComponent *this)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  re::ecs2::AudioPlayerComponent **v5;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v3 = re::ecs2::AudioSessionComponent::audioService(*((re::ecs2::AudioSessionComponent **)this + 2));
    if (*((_QWORD *)this + 16))
      v4 = v3 == 0;
    else
      v4 = 1;
    if (!v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 368))(v3);
      *((_QWORD *)this + 16) = 0;
    }
    v5 = (re::ecs2::AudioPlayerComponent **)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v5)
      re::ecs2::AudioSessionComponent::clearControllerObjectsOnPlayerComponent(this, v5);
  }
}

uint64_t re::ecs2::AudioSessionComponent::currentlyAppliedInputModeOverride(re::ecs2::AudioSessionComponent *this)
{
  uint64_t v2;
  re::ecs2::AudioPlayerComponent *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return *((unsigned __int8 *)this + 68);
  v3 = (re::ecs2::AudioPlayerComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  result = *((unsigned __int8 *)this + 68);
  if (v3)
  {
    v5 = *((_QWORD *)this + 15);
    if (v5)
      return re::ecs2::AudioPlayerComponent::getInputModeOverride(v3, v5);
  }
  return result;
}

uint64_t re::ecs2::AudioSessionComponent::audioService(re::ecs2::AudioSessionComponent *this)
{
  re::ecs2::AudioSessionComponent *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!this)
    return 0;
  do
  {
    v1 = this;
    this = (re::ecs2::AudioSessionComponent *)*((_QWORD *)this + 3);
  }
  while (this);
  v2 = *((_QWORD *)v1 + 2);
  if (v2
    && (v3 = *(_QWORD *)(v2 + 56)) != 0
    && (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3),
        (v5 = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v4)) != 0))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v2);
  }
  else
  {
    return 0;
  }
}

void re::ecs2::AudioSessionComponent::clearControllerObjectsOnPlayerComponent(re::ecs2::AudioSessionComponent *this, re::ecs2::AudioPlayerComponent **a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *((_QWORD *)this + 14);
  if (v4)
  {
    re::ecs2::AudioPlayerComponent::destroy(a2, v4);
    *((_QWORD *)this + 14) = 0;
  }
  v5 = *((_QWORD *)this + 15);
  if (v5)
  {
    re::ecs2::AudioPlayerComponent::destroy(a2, v5);
    *((_QWORD *)this + 15) = 0;
  }
}

unint64_t re::ecs2::AudioSessionComponent::prepareExternalStreamControllerUsingCurrentState(re::ecs2::AudioSessionComponent *this, re::ecs2::AudioPlayerComponent *a2, NSUUID *a3)
{
  NSUUID *v5;
  char *v6;
  void *v7;
  re *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  char v14;
  double v15;
  NSObject *v17;
  char *v18;
  int v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  if (v5
    || ((*((_BYTE *)this + 40) & 1) != 0 ? (v6 = (char *)*((_QWORD *)this + 6)) : (v6 = (char *)this + 41),
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v6),
        v7 = (void *)objc_claimAutoreleasedReturnValue(),
        v5 = (NSUUID *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v7),
        v7,
        v5))
  {
    v9 = -24.0;
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(MEMORY[0x24BDE3260], "recommendedTargetLKFSForVoiceStreams");
      v9 = v10;
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(MEMORY[0x24BDE3260], "recommendedAbsoluteCalibrationLevelForVoiceStreamsAtRecommendedTargetLKFS");
      v12 = v11;
    }
    else
    {
      v12 = 68.0;
    }
    v13 = re::ecs2::AudioPlayerComponent::prepare((uint64_t)a2, v5, 1, 2, v9, v12);
    v14 = objc_opt_respondsToSelector();
    LODWORD(v15) = 0.75;
    if ((v14 & 1) != 0)
    {
      objc_msgSend(MEMORY[0x24BDE3260], "recommendedRolloffFactorForVoiceStreams", v15);
      *(float *)&v15 = v15;
    }
    *((_DWORD *)a2 + 71) = LODWORD(v15);
    re::ecs2::AudioPlayerComponent::overrideInputMode(a2, v13, *((_BYTE *)this + 68));

  }
  else
  {
    v17 = *re::audioLogObjects(v8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if ((*((_BYTE *)this + 40) & 1) != 0)
        v18 = (char *)*((_QWORD *)this + 6);
      else
        v18 = (char *)this + 41;
      v19 = 136315138;
      v20 = v18;
      _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "cannot prepare external stream controller for audio session with invalid uuid string %s", (uint8_t *)&v19, 0xCu);
    }
    return 0;
  }
  return v13;
}

void re::ecs2::AudioSessionComponent::updateControllerObjectsIfSomethingChanged(re::ecs2::AudioSessionComponent *this, uint64_t a2, re::AudioService *a3)
{
  uint64_t v3;
  re::ecs2::NetworkComponent *v7;
  re::ecs2::AudioPlayerComponent **v8;
  re::ecs2::AudioPlayerComponent **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  NSObject *v13;
  __CFString *v14;
  NSUUID *v15;
  uint64_t v16;
  NSObject *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint8_t buf[4];
  __CFString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 2);
  if (!v3 || *((_QWORD *)this + 18) == a2 && re::DynamicString::operator==((uint64_t)this + 80, (uint64_t)this + 32))
    return;
  v7 = *(re::ecs2::NetworkComponent **)(v3 + 200);
  if (v7 && re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v3 + 200))
    || !re::DynamicString::operator!=((uint64_t)this + 80, (uint64_t)this + 32))
  {
    goto LABEL_23;
  }
  v8 = (re::ecs2::AudioPlayerComponent **)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v8)
  {
    v9 = v8;
    re::ecs2::AudioSessionComponent::clearControllerObjectsOnPlayerComponent(this, v8);
    v10 = *((_QWORD *)this + 5);
    v11 = v10 >> 1;
    if ((v10 & 1) == 0)
      v11 = v10 >> 1;
    if (v11)
    {
      if ((v10 & 1) != 0)
        v12 = (char *)*((_QWORD *)this + 6);
      else
        v12 = (char *)this + 41;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v12);
      v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v15 = (NSUUID *)objc_msgSend(objc_alloc(MEMORY[0x24BDD1880]), "initWithUUIDString:", v14);
      if (v15)
      {
        v16 = re::ecs2::AudioPlayerComponent::prepare(v9, v14);
        *((_QWORD *)this + 14) = v16;
        re::ecs2::AudioPlayerComponent::setDeferToSystemAcousticTuning(v9, v16, 1);
        *((_QWORD *)this + 15) = re::ecs2::AudioSessionComponent::prepareExternalStreamControllerUsingCurrentState(this, (re::ecs2::AudioPlayerComponent *)v9, v15);
      }
      else
      {
        v17 = *re::audioLogObjects(0);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          v23 = v14;
          _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, "failed to create NSUUID with AVAudioSession uuid string %@", buf, 0xCu);
        }
      }

    }
    if (v7)
      re::ecs2::NetworkComponent::markDirty(v7, (const re::ecs2::Component *)v9);
LABEL_23:
    if (a3 && (*(unsigned int (**)(re::AudioService *))(*(_QWORD *)a3 + 496))(a3))
    {
      if (*((_QWORD *)this + 16))
      {
        (*(void (**)(re::AudioService *))(*(_QWORD *)a3 + 368))(a3);
        *((_QWORD *)this + 16) = 0;
      }
      v18 = *((_QWORD *)this + 5);
      if ((v18 & 1) != 0)
        v19 = v18 >> 1;
      else
        v19 = v18 >> 1;
      if (a2 != -1)
      {
        if (v19)
        {
          re::DynamicString::DynamicString((re::DynamicString *)&v20, (re::ecs2::AudioSessionComponent *)((char *)this + 32));
          *((_QWORD *)this + 16) = (*(uint64_t (**)(re::AudioService *, uint64_t, uint64_t *))(*(_QWORD *)a3 + 360))(a3, a2, &v20);
          if (v20)
          {
            if ((v21 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v20 + 40))();
          }
        }
      }
    }
    return;
  }
  v13 = *re::audioLogObjects(0);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "failed to create AudioPlayerComponent", buf, 2u);
  }
}

void re::ecs2::AudioSessionComponent::updateInputModeOverrideOnControllerObjectsIfSomethingChanged(re::ecs2::AudioSessionComponent *this)
{
  uint64_t v2;
  re *InputModeOverride;
  re::ecs2::AudioPlayerComponent *v4;
  re::ecs2::NetworkComponent *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  char *v9;
  _DWORD v10[2];
  __int16 v11;
  char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*((unsigned __int8 *)this + 68) != *((unsigned __int8 *)this + 160)
    || *((_QWORD *)this + 14) != *((_QWORD *)this + 21)
    || *((_QWORD *)this + 15) != *((_QWORD *)this + 22))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
    {
      InputModeOverride = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (InputModeOverride)
      {
        v4 = InputModeOverride;
        v5 = *(re::ecs2::NetworkComponent **)(v2 + 200);
        if (!v5
          || (InputModeOverride = (re *)re::ecs2::NetworkComponent::owningProcessType(v5), !(_DWORD)InputModeOverride))
        {
          v6 = *((_QWORD *)this + 15);
          if (v6)
          {
            InputModeOverride = (re *)re::ecs2::AudioPlayerComponent::getInputModeOverride(v4, v6);
            if ((_DWORD)InputModeOverride != *((unsigned __int8 *)this + 68))
            {
              re::ecs2::AudioPlayerComponent::destroy((re::ecs2::AudioPlayerComponent **)v4, *((_QWORD *)this + 15));
              InputModeOverride = (re *)re::ecs2::AudioSessionComponent::prepareExternalStreamControllerUsingCurrentState(this, v4, 0);
              *((_QWORD *)this + 15) = InputModeOverride;
            }
          }
          v7 = *re::audioLogObjects(InputModeOverride);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            v8 = *((unsigned __int8 *)this + 68);
            if ((*((_BYTE *)this + 40) & 1) != 0)
              v9 = (char *)*((_QWORD *)this + 6);
            else
              v9 = (char *)this + 41;
            v10[0] = 67109378;
            v10[1] = v8;
            v11 = 2080;
            v12 = v9;
            _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "overriding input mode to %u for session %s (NOTE: skipping AUSM override since that is managed elsewhere)", (uint8_t *)v10, 0x12u);
          }
          if (v5)
            re::ecs2::NetworkComponent::markDirty(v5, v4);
        }
      }
    }
  }
}

void re::ecs2::AudioSessionComponent::joinSession(re::ecs2::AudioSessionComponent *this, AVAudioSession *a2)
{
  AVAudioSession *v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  int v7;
  re::ecs2::AudioSessionComponent *v8;
  __int16 v9;
  AVAudioSession *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  objc_storeWeak((id *)this + 9, v3);
  v4 = re::ecs2::AudioSessionComponent::audioService(*((re::ecs2::AudioSessionComponent **)this + 2));
  if (v4)
  {
    v5 = (*(uint64_t (**)(uint64_t, AVAudioSession *))(*(_QWORD *)v4 + 760))(v4, v3);
  }
  else
  {
    v6 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 134218242;
      v8 = this;
      v9 = 2112;
      v10 = v3;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "AudioSessionComponent@%p does not have audio service, storing opaque identifer for %@ instead", (uint8_t *)&v7, 0x16u);
    }
    v5 = -[AVAudioSession opaqueSessionID](v3, "opaqueSessionID");
  }
  *((_DWORD *)this + 16) = v5;
  re::ecs2::Component::markDirty(this);

}

re::ecs2::AudioSessionComponent *re::ecs2::AudioSessionComponent::NearestAudioSessionUpEntityHierarchy(re::ecs2::AudioSessionComponent *this, re::ecs2::Entity *a2)
{
  re::ecs2::AudioSessionComponent *v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  id WeakRetained;

  if (!this)
    return this;
  v2 = this;
  while (1)
  {
    v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::AudioSessionComponent *)((char *)v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v3)
      break;
LABEL_6:
    v2 = (re::ecs2::AudioSessionComponent *)*((_QWORD *)v2 + 3);
    if (!v2)
      return (re::ecs2::AudioSessionComponent *)0;
  }
  v4 = v3;
  v5 = (id *)(v3 + 72);
  WeakRetained = objc_loadWeakRetained((id *)(v3 + 72));

  if (!WeakRetained)
  {
    if (*(_DWORD *)(v4 + 64))
      return (re::ecs2::AudioSessionComponent *)0;
    goto LABEL_6;
  }
  this = (re::ecs2::AudioSessionComponent *)objc_loadWeakRetained(v5);
  return this;
}

_QWORD *re::ecs2::AudioSessionComponent::clearStateFollowingMediaServicesCrash(re::ecs2::AudioSessionComponent *this)
{
  re::ecs2::AudioSessionComponent *v2;
  _QWORD *result;
  BOOL v4;
  uint64_t v5;
  re::ecs2::NetworkComponent *v6;
  char v7;

  v2 = (re::ecs2::AudioSessionComponent *)*((_QWORD *)this + 2);
  result = (_QWORD *)re::ecs2::AudioSessionComponent::audioService(v2);
  if (v2)
    v4 = result == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = (uint64_t)result;
    v6 = (re::ecs2::NetworkComponent *)*((_QWORD *)v2 + 25);
    if (v6 && re::ecs2::NetworkComponent::owningProcessType(v6))
    {
      *((_DWORD *)this + 16) = 0;
      return objc_storeWeak((id *)this + 9, 0);
    }
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 544))(v5);
    *((_DWORD *)this + 16) = 0;
    if ((v7 & 1) != 0)
      return objc_storeWeak((id *)this + 9, 0);
    return re::ecs2::Component::markDirty(this);
  }
  return result;
}

BOOL re::ecs2::AudioSessionComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v10;
  uint64_t v11;
  re::AudioService *v12;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  re *v24;
  NSObject *v25;
  re::ecs2::Entity *v26;
  NSObject *v27;
  char *v28;
  NSObject *v29;
  const char *v30;
  unint64_t v31;
  unint64_t v32;
  re *v33;
  NSObject *v34;
  re::ecs2::Entity *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40[8];
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 8);
  if (!v5)
    return 0;
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 104) + 272);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
    v12 = (re::AudioService *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  else
    v12 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  v42 = a4;
  v43 = v37;
  v44 = v38;
  if (v37 != a5 || (unsigned __int16)v38 != 0xFFFFLL || (v38 & 0xFFFF0000) != 4294901760)
  {
    v16 = v10 >> 1;
    do
    {
      v17 = *(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v43);
      re::ecs2::AudioSessionComponentStateImpl::retrieveAVAudioSessionForIPhoneTarget((uint64_t)v40, a1, v17);
      if (v41 != -1)
        ((void (*)(uint64_t *, char *))off_24ED6C0F0[v41])(&v37, v40);
      v41 = -1;
      if (*(_DWORD *)(v17 + 64))
        v18 = v12 == 0;
      else
        v18 = 1;
      if (!v18)
        (*(void (**)(re::AudioService *))(*(_QWORD *)v12 + 768))(v12);
      v19 = *(_QWORD *)(v17 + 16);
      if (v19)
      {
        v20 = *(_DWORD *)(v19 + 288);
        if ((v20 & 1) != 0)
          v21 = v16;
        else
          v21 = -1;
        re::ecs2::AudioSessionComponent::updateControllerObjectsIfSomethingChanged((re::ecs2::AudioSessionComponent *)v17, v21, v12);
        re::ecs2::AudioSessionComponent::updateInputModeOverrideOnControllerObjectsIfSomethingChanged((re::ecs2::AudioSessionComponent *)v17);
        *(_QWORD *)(v17 + 144) = v21;
        re::DynamicString::operator=((re::DynamicString *)(v17 + 80), (re::DynamicString *)(v17 + 32));
        *(_BYTE *)(v17 + 160) = *(_BYTE *)(v17 + 68);
        *(_OWORD *)(v17 + 168) = *(_OWORD *)(v17 + 112);
        if ((v20 & 1) != 0)
        {
          v22 = v42;
          v23 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v43);
          v24 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v22, v23, *(_QWORD *)(a3 + 40));
          v25 = *re::audioLogObjects(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            v26 = *(re::ecs2::Entity **)(v17 + 16);
            v27 = v25;
            re::ecs2::Entity::debugDescription(v26, (re::DynamicString *)&v37);
            v28 = (char *)&v38 + 1;
            if ((v38 & 1) != 0)
              v28 = v39;
            *(_DWORD *)buf = 134218242;
            v46 = v17;
            v47 = 2080;
            v48 = v28;
            v29 = v27;
            v30 = "AudioSessionComponentStateImpl::processDirtyComponents: setting state to 'prepare' for AudioSessionCom"
                  "ponent %p on entity %s";
LABEL_39:
            _os_log_debug_impl(&dword_224FE9000, v29, OS_LOG_TYPE_DEBUG, v30, buf, 0x16u);

            if (v37 && (v38 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v37 + 40))();
            goto LABEL_32;
          }
          goto LABEL_32;
        }
      }
      else
      {
        re::ecs2::AudioSessionComponent::updateControllerObjectsIfSomethingChanged((re::ecs2::AudioSessionComponent *)v17, -1, v12);
        re::ecs2::AudioSessionComponent::updateInputModeOverrideOnControllerObjectsIfSomethingChanged((re::ecs2::AudioSessionComponent *)v17);
        *(_QWORD *)(v17 + 144) = -1;
        re::DynamicString::operator=((re::DynamicString *)(v17 + 80), (re::DynamicString *)(v17 + 32));
        *(_BYTE *)(v17 + 160) = *(_BYTE *)(v17 + 68);
        *(_OWORD *)(v17 + 168) = *(_OWORD *)(v17 + 112);
      }
      v31 = v42;
      v32 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v43);
      v33 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v31, v32, *(_QWORD *)(a3 + 32));
      v34 = *re::audioLogObjects(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        v35 = *(re::ecs2::Entity **)(v17 + 16);
        v27 = v34;
        re::ecs2::Entity::debugDescription(v35, (re::DynamicString *)&v37);
        v36 = (char *)&v38 + 1;
        if ((v38 & 1) != 0)
          v36 = v39;
        *(_DWORD *)buf = 134218242;
        v46 = v17;
        v47 = 2080;
        v48 = v36;
        v29 = v27;
        v30 = "AudioSessionComponentStateImpl::processDirtyComponents: setting state to 'inactive' for AudioSessionCompon"
              "ent %p on entity %s";
        goto LABEL_39;
      }
LABEL_32:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v43);
    }
    while (v43 != a5 || (unsigned __int16)v44 != 0xFFFF || WORD1(v44) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

void re::ecs2::AudioSessionComponentStateImpl::retrieveAVAudioSessionForIPhoneTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id WeakRetained;
  void *v10;
  int v11;
  re *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE buf[12];
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 8) = 2;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5 && (v6 = *(_QWORD *)(a2 + 16)) != 0)
  {
    do
    {
      v7 = v5;
      v5 = *(_QWORD *)(v5 + 24);
    }
    while (v5);
    v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, *(_QWORD *)(v7 + 16));
  }
  else
  {
    v8 = 0;
  }
  WeakRetained = objc_loadWeakRetained((id *)(a3 + 72));
  v10 = WeakRetained;
  v11 = *(_DWORD *)(a3 + 64);
  if (!v11)
  {
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_29;
  }
  if (!WeakRetained)
  {
    *(_DWORD *)(a1 + 8) = 1;
    if (!v8)
      goto LABEL_29;
LABEL_20:
    (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v8 + 752))(buf, v8, *(unsigned int *)(a3 + 64));
    v17 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v17 == -1)
    {
      if (*(_DWORD *)&buf[8] == -1)
      {
LABEL_27:
        if (*(_DWORD *)(a1 + 8) == 3)
          objc_storeWeak((id *)(a3 + 72), *(id *)a1);
        goto LABEL_29;
      }
    }
    else if (*(_DWORD *)&buf[8] == -1)
    {
      ((void (*)(uint64_t *, uint64_t))off_24ED6C0F0[v17])(&v22, a1);
      *(_DWORD *)(a1 + 8) = -1;
      goto LABEL_25;
    }
    v22 = a1;
    ((void (*)(uint64_t *, uint64_t, _BYTE *))off_24ED6C130[*(unsigned int *)&buf[8]])(&v22, a1, buf);
LABEL_25:
    if (*(_DWORD *)&buf[8] != -1)
      ((void (*)(uint64_t *, _BYTE *))off_24ED6C0F0[*(unsigned int *)&buf[8]])(&v22, buf);
    goto LABEL_27;
  }
  v12 = (re *)objc_msgSend(WeakRetained, "opaqueSessionID");
  if (v11 == (_DWORD)v12)
  {
    *(_QWORD *)buf = v10;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:nn180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(a1, (void **)a1, (void **)buf);

    goto LABEL_29;
  }
  v13 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v13 != -1)
  {
    if ((_DWORD)v13 == 1)
      goto LABEL_17;
    v12 = (re *)((uint64_t (*)(_BYTE *, uint64_t))off_24ED6C0F0[v13])(buf, a1);
  }
  *(_DWORD *)(a1 + 8) = 1;
LABEL_17:
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 + 296);
  v16 = *re::audioLogObjects(v12);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v18 = v16;
    v19 = *(_QWORD *)(v14 + 280);
    v20 = *(_DWORD *)(a3 + 64);
    v21 = objc_msgSend(v10, "opaqueSessionID");
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v19;
    v24 = 2048;
    v25 = v15;
    v26 = 1024;
    v27 = v20;
    v28 = 1024;
    v29 = v21;
    _os_log_debug_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEBUG, "Need to update AVAudioSession for entity(%s, %llu). new audioSessionID(%u) old audioSessionID(%u)", buf, 0x22u);

  }
  objc_storeWeak((id *)(a3 + 72), 0);
  if (v8)
    goto LABEL_20;
LABEL_29:

}

double re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::AudioSessionComponentStateImpl *a1, double result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  re::ecs2::AudioSessionComponent *v15;
  BOOL v16;
  double v17;
  re::ecs2::AudioSessionComponentStateImpl *v18;
  float32x4_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  re::ecs2::AudioSessionComponent *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  re::ecs2::AudioSessionComponent **v30;
  re::ecs2::AudioSessionComponent **v31;
  uint64_t *v32;
  uint64_t *v33;
  re::ecs2::AudioSessionComponent **v34;
  uint64_t *v35;
  uint64_t *v36;
  re::ecs2::AudioSessionComponent **v37;
  uint64_t **v38;

  v27 = a4;
  v6 = *(_QWORD *)(a4 + 8);
  if (v6)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 104) + 272);
    v11 = *((_QWORD *)a1 + 2);
    v12 = v11 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) : 0;
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v28, a6, 0);
    v24 = a5;
    v25 = v28;
    v26 = v29;
    v13 = v28 == (uint64_t *)a6 && (unsigned __int16)v29 == 0xFFFFLL;
    if (!v13 || (v29 & 0xFFFF0000) != 4294901760)
    {
      while (1)
      {
        v23 = 0;
        v15 = *(re::ecs2::AudioSessionComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v25);
        v23 = v15;
        if (*((_DWORD *)v15 + 16))
          v16 = v12 == 0;
        else
          v16 = 1;
        if (!v16)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 768))(v12);
          v15 = v23;
        }
        re::ecs2::AudioSessionComponentStateImpl::retrieveAVAudioSessionForIPhoneTarget((uint64_t)&v21, (uint64_t)a1, (uint64_t)v15);
        v17 = re::ecs2::AudioSessionComponentStateImpl::processUpdatingRootTransform(a1, (float32x4_t *)v23, v10 >> 1);
        v28 = &v27;
        v29 = &v24;
        v30 = &v23;
        v31 = &v23;
        v32 = &v27;
        v33 = &v24;
        v34 = &v23;
        v35 = &v27;
        v36 = &v24;
        v37 = &v23;
        if (v22 == -1)
          break;
        v38 = &v28;
        ((void (*)(uint64_t ***, uint64_t *, double))off_24ED6C110[v22])(&v38, &v21, v17);
        if (v22 != -1)
          ((void (*)(uint64_t **, uint64_t *))off_24ED6C0F0[v22])(&v28, &v21);
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v25);
        if (v25 == (uint64_t *)a6 && (unsigned __int16)v26 == 0xFFFF && WORD1(v26) == 0xFFFF)
          return result;
      }
      v18 = (re::ecs2::AudioSessionComponentStateImpl *)std::__throw_bad_variant_access[abi:nn180100]();
      return re::ecs2::AudioSessionComponentStateImpl::processUpdatingRootTransform(v18, v19, v20);
    }
  }
  return result;
}

double re::ecs2::AudioSessionComponentStateImpl::processUpdatingRootTransform(re::ecs2::AudioSessionComponentStateImpl *this, float32x4_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  double *v14;
  double *v15;
  double *v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  double result;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t v24[4];
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = a2[1].i64[0];
  if (!v5)
  {
LABEL_5:
    a3 = -1;
LABEL_14:
    v11 = a2[13];
    v29 = a2[12];
    v30 = v11;
    v12 = a2[14];
    v13 = a2[15];
    goto LABEL_19;
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    do
    {
      v8 = v5;
      v5 = *(_QWORD *)(v5 + 24);
    }
    while (v5);
    v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, *(_QWORD *)(v8 + 16));
    v5 = a2[1].i64[0];
    if (!v5)
      goto LABEL_5;
  }
  else
  {
    v9 = 0;
  }
  if ((*(_DWORD *)(v5 + 288) & 1) == 0)
    a3 = -1;
  if (v9)
    v10 = a2[8].i64[0] == 0;
  else
    v10 = 1;
  if (v10)
    goto LABEL_14;
  re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v5, (const re::ecs2::Entity *)1, v24);
  re::audio::cleanUpTransformForPHASE(v24, v14, v15, v16, (uint64_t)&v25);
  v17 = a2 + 12;
  v18 = a2[8].i64[0];
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v26, a2[13]), (int8x16_t)vceqq_f32(v25, a2[12])), vandq_s8((int8x16_t)vceqq_f32(v27, a2[14]), (int8x16_t)vceqq_f32(v28, a2[15])))) & 0x80000000) == 0|| v18 != a2[9].i64[1])
  {
    v24[0] = v25;
    v24[1] = v26;
    v24[2] = v27;
    v24[3] = v28;
    (*(void (**)(uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v9 + 376))(v9, v18, v24);
    v17 = &v25;
  }
  v19 = v17[1];
  v29 = *v17;
  v30 = v19;
  v12 = v17[2];
  v13 = v17[3];
LABEL_19:
  v31 = v12;
  v32 = v13;
  v20 = v30;
  a2[12] = v29;
  a2[13] = v20;
  result = *(double *)v31.i64;
  v22 = v32;
  a2[14] = v31;
  a2[15] = v22;
  v23 = a2[8].i64[0];
  a2[9].i64[0] = a3;
  a2[9].i64[1] = v23;
  return result;
}

BOOL re::ecs2::AudioSessionComponentStateImpl::processUpdatingComponents(re::ecs2::AudioSessionComponentStateImpl *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  float32x4_t *v20;
  BOOL v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(a3 + 8);
  if (!v5)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)(v5 + 104) + 272);
  v10 = *((_QWORD *)a1 + 2);
  if (v10)
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  else
    v11 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v24, a5, 0);
  v13 = v24;
  v14 = v25;
  v24 = a4;
  v25 = v13;
  v26 = v14;
  v15 = (unsigned __int16)v14;
  v16 = v14 & 0xFFFF0000;
  if (v13 != a5 || v15 != 0xFFFF || v16 != 4294901760)
  {
    do
    {
      v19 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v25);
      v20 = *(float32x4_t **)v19;
      if (*(_DWORD *)(*(_QWORD *)v19 + 64))
        v21 = v11 == 0;
      else
        v21 = 1;
      if (!v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 768))(v11);
      re::ecs2::AudioSessionComponentStateImpl::processUpdatingRootTransform(a1, v20, v9 >> 1);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v25);
    }
    while (v25 != a5 || (unsigned __int16)v26 != 0xFFFF || WORD1(v26) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::AudioSessionSystem::willAddSystemToECSService(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(this + 40);
  if (v1)
  {
    v2 = this;
    v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 32))(*(_QWORD *)(this + 40));
    v4 = re::ServiceLocator::serviceOrNull<re::Engine>(v3);
    if (v4)
      re::ObjCObject::operator=((id *)(v2 + 104), (id *)(v4 + 432));
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
    this = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v5);
    *(_QWORD *)(v2 + 112) = this;
    *(_QWORD *)(v2 + 176) = this;
  }
  return this;
}

uint64_t re::ecs2::AudioSessionSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 112) = 0;
  *(_QWORD *)(this + 176) = 0;
  return this;
}

uint64_t re::ecs2::AudioSessionSystem::willAddSceneToECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  re::ecs2::System *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD v52[6];
  _QWORD v53[6];
  re::ecs2::Scene *v54;
  uint64_t v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  int v64;
  const char *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  unint64_t v69;
  __int16 v70;
  unint64_t v71;
  uint64_t v72[12];

  v72[11] = *MEMORY[0x24BDAC8D0];
  v54 = a2;
  if (!a2)
    return this;
  v2 = this;
  v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_QWORD *)&v56 = v2;
  *((_QWORD *)&v56 + 1) = re::ecs2::AudioSessionSystem::willRemoveComponents;
  *(_QWORD *)&v57 = 0;
  *((_QWORD *)&v57 + 1) = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::createSubscription<re::ecs2::AudioSessionSystem>(re::ecs2::AudioSessionSystem *,REEventHandlerResult (re::ecs2::AudioSessionSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Slice<re::ecs2::AudioSessionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioSessionComponent*>&&)#1}::__invoke;
  re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 392), (uint64_t)&v56);
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)(v2 + 120), &v54);
  v4 = (uint64_t)v54;
  v55[0] = (uint64_t)v54;
  v5 = *(_QWORD *)(v2 + 312);
  v6 = *(_DWORD *)(v2 + 320);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(v2 + 328);
    else
      v7 = *(_QWORD **)(v2 + 336);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_18;
    }
    goto LABEL_17;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(v2 + 328);
    if (!v5)
      goto LABEL_18;
  }
  else
  {
    v8 = *(uint64_t **)(v2 + 336);
    if (!v5)
      goto LABEL_18;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_17:
    *(_QWORD *)&v56 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v2 + 304, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v2 + 184, v56);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::init(v13, v2 + 184, v4);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v2 + 240), v55, (uint64_t *)&v56);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v2 + 304, v56);
    v14 = v2 + 352;
    v15 = v56;
    goto LABEL_50;
  }
LABEL_18:
  v63 = 0u;
  v59 = 0u;
  v60 = 0u;
  v56 = 0u;
  *(_QWORD *)&v57 = 0;
  v58 = 0u;
  *((_QWORD *)&v57 + 1) = -1;
  *(_QWORD *)&v60 = 0;
  DWORD2(v60) = 1;
  v61 = 0;
  v62 = 0;
  v16 = *(_QWORD *)(v2 + 224);
  *(_QWORD *)&v63 = 0;
  v17 = *(_QWORD *)(v2 + 192);
  DWORD2(v63) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,4ul>::setBucketsCapacity((uint64_t *)(v2 + 184), (v16 + 4) >> 2);
    v17 = *(_QWORD *)(v2 + 192);
  }
  if (v17 <= v16 >> 2)
  {
    v55[1] = 0;
    memset(v72, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v64 = 136315906;
    v65 = "operator[]";
    v66 = 1024;
    v67 = 858;
    v68 = 2048;
    v69 = v16 >> 2;
    v70 = 2048;
    v71 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  if ((*(_BYTE *)(v2 + 200) & 1) != 0)
    v18 = v2 + 208;
  else
    v18 = *(_QWORD *)(v2 + 216);
  v19 = *(_QWORD *)(v18 + 8 * (v16 >> 2));
  ++*(_QWORD *)(v2 + 224);
  ++*(_DWORD *)(v2 + 232);
  v20 = v19 + 112 * (v16 & 3);
  v21 = v56;
  v22 = v57;
  v23 = v58;
  *(_QWORD *)(v20 + 48) = v59;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v59 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v56);
  v25 = *(_QWORD *)(v2 + 224);
  if (!v25)
  {
LABEL_73:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v2 + 184, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::init(v26, v2 + 184, v55[0]);
  v72[0] = *(_QWORD *)(v2 + 224) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v2 + 240), v55, v72);
  v27 = *(_QWORD *)(v2 + 224);
  v28 = *(_QWORD *)(v2 + 344);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(v2 + 344) = v27;
  *(_QWORD *)&v56 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v2 + 304), v29, &v56);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(v2 + 344) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(v2 + 320) & 1) != 0)
      v32 = v2 + 328;
    else
      v32 = *(_QWORD *)(v2 + 336);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(v2 + 312) - 8) &= v30;
  }
  v33 = *(_QWORD *)(v2 + 224);
  v34 = *(_QWORD *)(v2 + 392);
  if ((v33 & 0x3F) != 0)
    v35 = (v33 >> 6) + 1;
  else
    v35 = v33 >> 6;
  *(_QWORD *)(v2 + 392) = v33;
  *(_QWORD *)&v56 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v2 + 352), v35, &v56);
  if (v33 && v34 > v33)
  {
    v36 = 63;
    v37 = *(_QWORD *)(v2 + 392) & 0x3FLL;
    if (v37 && v37 != 63)
      v36 = ~(-1 << v37);
    if ((*(_BYTE *)(v2 + 368) & 1) != 0)
      v38 = v2 + 376;
    else
      v38 = *(_QWORD *)(v2 + 384);
    *(_QWORD *)(v38 + 8 * *(_QWORD *)(v2 + 360) - 8) &= v36;
  }
  v15 = v72[0];
  v14 = v2 + 352;
LABEL_50:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(v2 + 416))
    goto LABEL_68;
  v39 = *(_QWORD *)(v2 + 360);
  v40 = *(_DWORD *)(v2 + 368);
  if (v39 >= 0xB)
  {
    if ((v40 & 1) != 0)
      v41 = (_QWORD *)(v2 + 376);
    else
      v41 = *(_QWORD **)(v2 + 384);
    v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43)
        goto LABEL_68;
    }
    goto LABEL_66;
  }
  if ((v40 & 1) != 0)
  {
    v42 = (uint64_t *)(v2 + 376);
    if (!v39)
      goto LABEL_68;
  }
  else
  {
    v42 = *(uint64_t **)(v2 + 384);
    if (!v39)
      goto LABEL_68;
  }
  v44 = 0;
  v45 = 8 * v39;
  do
  {
    v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44)
  {
LABEL_66:
    v47 = *(re::ecs2::System **)(v2 + 400);
    if (!*((_BYTE *)v47 + 86))
      re::ecs2::System::queueToRun(v47, 0.0);
  }
LABEL_68:
  this = *(_QWORD *)(v2 + 112);
  if (this)
  {
    v48 = *(_QWORD *)(*((_QWORD *)v54 + 13) + 272);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    if (this)
    {
      v49 = this;
      v50 = v48 >> 1;
      v51 = MEMORY[0x24BDAC760];
      v53[0] = MEMORY[0x24BDAC760];
      v53[1] = 3221225472;
      v53[2] = ___ZN2re4ecs218AudioSessionSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke;
      v53[3] = &__block_descriptor_48_e5_v8__0l;
      v53[4] = v2;
      v53[5] = v54;
      (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD *))(*(_QWORD *)this + 32))(this, 773, v50, v53);
      v52[0] = v51;
      v52[1] = 3221225472;
      v52[2] = ___ZN2re4ecs218AudioSessionSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke_2;
      v52[3] = &__block_descriptor_48_e5_v8__0l;
      v52[4] = v2;
      v52[5] = v54;
      return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, _QWORD *))(*(_QWORD *)v49 + 32))(v49, 517, v50, v52);
    }
  }
  return this;
}

_QWORD *re::ecs2::AudioSessionSystem::willRemoveSceneFromECSService(_QWORD *this, re::ecs2::Scene *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t v16;
  uint64_t v17;
  re::ecs2::Scene *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  if (a2)
  {
    v2 = this;
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v19 = v2;
    *((_QWORD *)&v19 + 1) = re::ecs2::AudioSessionSystem::willRemoveComponents;
    v20 = 0;
    v21 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::createSubscription<re::ecs2::AudioSessionSystem>(re::ecs2::AudioSessionSystem *,REEventHandlerResult (re::ecs2::AudioSessionSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Slice<re::ecs2::AudioSessionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioSessionComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 392, &v19);
    re::DynamicArray<unsigned long long>::remove((uint64_t)(v2 + 15), &v18);
    *(_QWORD *)&v19 = v18;
    v4 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v2 + 30, &v19);
    if (v4 != -1)
    {
      v5 = v2[31] + 16 * v4;
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)(v2 + 38), *(_QWORD *)(v5 + 8));
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)(v2 + 44), *(_QWORD *)(v5 + 8));
      v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)(v2 + 23), *(_QWORD *)(v5 + 8));
      if (*v6)
      {
        v7 = v6;
        *v6 = 0;
        v8 = v6 + 1;
        v9 = *(_QWORD *)(v6[1] + 288);
        if (v9)
        {
          v10 = v6[12];
          if (v10)
          {
            for (i = 0; i != v10; ++i)
            {
              v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
              re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
            }
          }
        }
        re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
        v13 = 0;
        v14 = v7 + 3;
        do
        {
          v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
          if (*(_QWORD *)v15)
            re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
          v14[v13++] = -1;
        }
        while (v13 != 4);
        *v8 = 0;
        v8[1] = 0;
      }
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v2 + 30, &v19);
    }
    this = (_QWORD *)v2[14];
    if (this)
    {
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *, re::ecs2::Scene *))(*this + 16))(this, v18);
      if (this)
      {
        v16 = (uint64_t)this;
        v17 = *(_QWORD *)(*((_QWORD *)v18 + 13) + 272) >> 1;
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*this + 40))(this, 773, v17);
        return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, 773, v17);
      }
    }
  }
  return this;
}

uint64_t re::ecs2::AudioSessionSystem::willRemoveComponents(uint64_t a1, uint64_t a2, re::ecs2::AudioSessionComponent **a3, uint64_t a4)
{
  uint64_t v5;
  re::ecs2::AudioSessionComponent *v6;

  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3++;
      re::ecs2::AudioSessionComponent::clearControllerObjects(v6);
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::AudioSessionSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  re::ecs2::System *v33;
  _BYTE v34[16];
  uint64_t v35[2];
  _QWORD v36[2];
  uint64_t v37;

  v36[0] = a3;
  v36[1] = a4;
  if (a2)
  {
    v4 = result;
    if (*(_QWORD *)(result + 40))
    {
      v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v35);
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
        v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v10 = v9 ? *(_QWORD *)(v9 + 24) : 0;
        v11 = *(int64x2_t **)(v8 + 152);
        if (v11)
        {
          v12 = v11[576].u64[0];
          if (v12 >= v10)
            v12 = v10;
          v11[576].i64[0] = v12;
          v13 = v11[576].u64[1];
          if (v13 <= v10)
            v13 = v10;
          v11[576].i64[1] = v13;
          v14 = vdupq_n_s64(1uLL);
          v14.i64[0] = v10;
          v11[577] = vaddq_s64(v11[577], v14);
          *(_BYTE *)(v8 + 184) = 0;
        }
      }
      re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34, 3115, v4);
      v37 = a2;
      v15 = *(_QWORD *)(*(_QWORD *)(v4 + 248)
                      + 16
                      * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 240), &v37)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v4 + 352, v15);
      v16 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4 + 184, v15);
      v17 = *(_QWORD *)(*v16 + 224);
      v18 = v16[3];
      v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v18);
      if (*(_DWORD *)(v19 + 40))
        v20 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, v36, v16, v18, v19, 0);
      else
        v20 = 0;
      v21 = v16[5];
      v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v21);
      if (*(_DWORD *)(v22 + 40))
        v20 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, v36, v16, v21, v22, 0);
      v23 = v16[6];
      v24 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v23);
      if (*(_DWORD *)(v24 + 40))
      {
        if (((v20 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, v36, v16, v23, v24, 0)) & 1) == 0)goto LABEL_21;
      }
      else if (!v20)
      {
LABEL_21:
        if (*(_BYTE *)(v4 + 416))
        {
          v25 = *(_QWORD *)(v4 + 360);
          v26 = *(_DWORD *)(v4 + 368);
          if (v25 >= 0xB)
          {
            if ((v26 & 1) != 0)
              v27 = (_QWORD *)(v4 + 376);
            else
              v27 = *(_QWORD **)(v4 + 384);
            v29 = 8 * v25;
            while (!*v27)
            {
              ++v27;
              v29 -= 8;
              if (!v29)
                goto LABEL_41;
            }
LABEL_39:
            v33 = *(re::ecs2::System **)(v4 + 400);
            if (!*((_BYTE *)v33 + 86))
              re::ecs2::System::queueToRun(v33, 0.0);
            goto LABEL_41;
          }
          if ((v26 & 1) == 0)
          {
            v28 = *(uint64_t **)(v4 + 384);
            if (!v25)
              goto LABEL_41;
LABEL_36:
            v30 = 0;
            v31 = 8 * v25;
            do
            {
              v32 = *v28++;
              v30 |= v32;
              v31 -= 8;
            }
            while (v31);
            if (!v30)
              goto LABEL_41;
            goto LABEL_39;
          }
          v28 = (uint64_t *)(v4 + 376);
          if (v25)
            goto LABEL_36;
        }
LABEL_41:
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v34);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v35);
      }
      re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 352, v15);
      goto LABEL_21;
    }
  }
  return result;
}

void re::ecs2::AudioSessionSystem::~AudioSessionSystem(re::ecs2::AudioSessionSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 23);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 15) = 0;
    ++*((_DWORD *)this + 36);
  }

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 23);
  v2 = *((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_QWORD *)this + 19))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 15) = 0;
    ++*((_DWORD *)this + 36);
  }

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AudioSessionSystem::typeInfo(re::ecs2::AudioSessionSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioSessionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioSessionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioSessionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioSessionSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AudioSessionComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::AudioSessionComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8nn180100IOZNS0_6__dtorINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SB_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, id *a2)
{

}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_0,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_1,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_2,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audiosession_state::InvalidSessionID,std::__variant_detail::_Trait::RetrievingSession,std::__variant_detail::_Trait::SessionUnavailable,std::__variant_detail::_Trait::SessionAvailable> &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re *v7;
  NSObject *v8;
  uint64_t result;
  uint64_t v10;
  re::ecs2::Entity *v11;
  NSObject *v12;
  _BYTE *v13;
  uint64_t v14;
  char v15;
  _BYTE v16[23];
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v3 = *(uint64_t **)(*a1 + 56);
  v2 = *(_QWORD *)(*a1 + 64);
  v4 = *v3;
  v5 = *(_QWORD *)v2;
  v6 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)(v2 + 8));
  v7 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v4 + 16), v5, v6, *(_QWORD *)(v4 + 32));
  v8 = *re::audioLogObjects(v7);
  result = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v10 = **(_QWORD **)(v1 + 72);
    v11 = *(re::ecs2::Entity **)(v10 + 16);
    v12 = v8;
    re::ecs2::Entity::debugDescription(v11, (re::DynamicString *)&v14);
    if ((v15 & 1) != 0)
      v13 = *(_BYTE **)&v16[7];
    else
      v13 = v16;
    *(_DWORD *)buf = 134349314;
    v18 = v10;
    v19 = 2082;
    v20 = v13;
    _os_log_debug_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEBUG, "[RE/ECS] [processPreparingComponents] invalid session ID. Setting state to 'inactive' for AudioSessionComponent %{public}p on entity %{public}s", buf, 0x16u);

    result = v14;
    if (v14)
    {
      if ((v15 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_0,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_1,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_2,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audiosession_state::InvalidSessionID,std::__variant_detail::_Trait::RetrievingSession,std::__variant_detail::_Trait::SessionUnavailable,std::__variant_detail::_Trait::SessionAvailable> &>(re *a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  re::ecs2::Entity *v6;
  NSObject *v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  _BYTE v11[23];
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)a1;
  v2 = *re::audioLogObjects(a1);
  result = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v4 = **(_QWORD **)(v1 + 24);
    v5 = *(_DWORD *)(v4 + 64);
    v6 = *(re::ecs2::Entity **)(v4 + 16);
    v7 = v2;
    re::ecs2::Entity::debugDescription(v6, (re::DynamicString *)&v9);
    if ((v10 & 1) != 0)
      v8 = *(_BYTE **)&v11[7];
    else
      v8 = v11;
    *(_DWORD *)buf = 134349826;
    v13 = v4;
    v14 = 1026;
    v15 = v5;
    v16 = 1026;
    v17 = v5;
    v18 = 2080;
    v19 = v8;
    _os_log_debug_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEBUG, "[RE/ECS] [processPreparingComponents] keeping state 'prepare' for AudioSessionComponent %{public}p audioSessionID(%{public}u, 0x%{public}x) on entity {public}%s", buf, 0x22u);

    result = v9;
    if (v9)
    {
      if ((v10 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_0,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_1,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_2,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audiosession_state::InvalidSessionID,std::__variant_detail::_Trait::RetrievingSession,std::__variant_detail::_Trait::SessionUnavailable,std::__variant_detail::_Trait::SessionAvailable> &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re *v7;
  NSObject *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  re::ecs2::Entity *v12;
  NSObject *v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  _BYTE v17[23];
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v3 = *(uint64_t **)(*a1 + 32);
  v2 = *(_QWORD *)(*a1 + 40);
  v4 = *v3;
  v5 = *(_QWORD *)v2;
  v6 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)(v2 + 8));
  v7 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v4 + 16), v5, v6, *(_QWORD *)(v4 + 32));
  v8 = *re::audioLogObjects(v7);
  result = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v10 = **(_QWORD **)(v1 + 48);
    v11 = *(_DWORD *)(v10 + 64);
    v12 = *(re::ecs2::Entity **)(v10 + 16);
    v13 = v8;
    re::ecs2::Entity::debugDescription(v12, (re::DynamicString *)&v15);
    if ((v16 & 1) != 0)
      v14 = *(_BYTE **)&v17[7];
    else
      v14 = v17;
    *(_DWORD *)buf = 134349826;
    v19 = v10;
    v20 = 1026;
    v21 = v11;
    v22 = 1026;
    v23 = v11;
    v24 = 2082;
    v25 = v14;
    _os_log_debug_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEBUG, "[RE/ECS] [processPreparingComponents] session not available. Setting state to 'inactive' for AudioSessionComponent %{public}p audioSessionID(%{public}u, 0x%{public}x) on entity %{public}s", buf, 0x22u);

    result = v15;
    if (v15)
    {
      if ((v16 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:nn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<re::internal::overloaded<re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_0,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_1,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_2,re::ecs2::AudioSessionComponentStateImpl::processPreparingComponents(re::ecs2::System::UpdateContext const&,re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent> *,re::ecs2::ComponentBuckets<re::ecs2::AudioSessionComponent>::BucketIteration,void *)::$_3>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,re::audiosession_state::InvalidSessionID,std::__variant_detail::_Trait::RetrievingSession,std::__variant_detail::_Trait::SessionUnavailable,std::__variant_detail::_Trait::SessionAvailable> &>(uint64_t ***a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re *v7;
  NSObject *v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  re::ecs2::Entity *v12;
  NSObject *v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  _BYTE v17[23];
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v3 = **a1;
  v2 = (*a1)[1];
  v4 = *v3;
  v5 = *v2;
  v6 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v2 + 4);
  v7 = (re *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v4 + 16), v5, v6, *(_QWORD *)(v4 + 48));
  v8 = *re::audioLogObjects(v7);
  result = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    v10 = *v1[2];
    v11 = *(_DWORD *)(v10 + 64);
    v12 = *(re::ecs2::Entity **)(v10 + 16);
    v13 = v8;
    re::ecs2::Entity::debugDescription(v12, (re::DynamicString *)&v15);
    if ((v16 & 1) != 0)
      v14 = *(_BYTE **)&v17[7];
    else
      v14 = v17;
    *(_DWORD *)buf = 134349826;
    v19 = v10;
    v20 = 1026;
    v21 = v11;
    v22 = 1026;
    v23 = v11;
    v24 = 2082;
    v25 = v14;
    _os_log_debug_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEBUG, "[RE/ECS] [processPreparingComponents] setting state to 'updating' for AudioSessionComponent %{public}p audioSessionID(%{public}u, 0x%{public}x) on entity %{public}s", buf, 0x22u);

    result = v15;
    if (v15)
    {
      if ((v16 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_24ED6C0F0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 1)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_24ED6C0F0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_24ED6C0F0[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 8) = 2;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re18audiosession_state16InvalidSessionIDENS9_17RetrievingSessionENS9_18SessionUnavailableENS9_16SessionAvailableEEEEE16__generic_assignB8nn180100INS0_17__move_assignmentISE_LNS0_6_TraitE1EEEEEvOT_EUlRSK_OT0_E_JRNS0_6__baseILSI_1EJSA_SB_SC_SD_EEEOSS_EEEDcSK_DpT0_(uint64_t *a1, void **a2, void **a3)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:nn180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(*a1, a2, a3);
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<re::audiosession_state::InvalidSessionID,re::audiosession_state::RetrievingSession,re::audiosession_state::SessionUnavailable,re::audiosession_state::SessionAvailable>>::__assign_alt[abi:nn180100]<3ul,re::audiosession_state::SessionAvailable,re::audiosession_state::SessionAvailable>(uint64_t a1, void **a2, void **a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;

  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      v6 = *a3;
      *a3 = 0;
      v7 = *a2;
      *a2 = v6;

      return;
    }
    ((void (*)(char *, uint64_t))off_24ED6C0F0[v5])(&v9, a1);
  }
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)(a1 + 8) = 3;
}

id re::internal::defaultRetain<re::ecs2::AudioSessionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioSessionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::createSubscription<re::ecs2::AudioSessionSystem>(re::ecs2::AudioSessionSystem *,REEventHandlerResult (re::ecs2::AudioSessionSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Slice<re::ecs2::AudioSessionComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioSessionComponent>,re::Slice<re::ecs2::AudioSessionComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioSessionComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED6C160;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED6C1B8;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED6C210;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED6C268;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED6C160;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED6C1B8;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED6C210;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED6C268;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6C160;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6C160;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6C1B8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6C1B8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6C210;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6C210;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6C268;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6C268;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::AudioSessionComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::ecs2::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderRaw>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  re::snapshot::Reader<re::snapshot::DecoderRaw>::field<0,re::ecs2::Component>(a1, (_BYTE *)a2);
  re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderRaw>,re::SkeletalPose>((const char **)a1, (_QWORD *)(a2 + 56));
  *(_DWORD *)(a1 + 32) = 0;
  v8 = 0;
  if (!re::snapshot::DecoderRaw::beginArray((re::snapshot::DecoderRaw *)a1, &v8))
    goto LABEL_16;
  v4 = v8;
  if (v8 != -1 && *(_QWORD *)(a2 + 104) < v8)
  {
    re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)(a2 + 96), v8);
    goto LABEL_9;
  }
  if (v8)
  {
LABEL_9:
    v6 = v4 + 1;
    v7 = 1;
    do
    {
      if (v4 != -1 && v6 > v7)
      {
        re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((_QWORD *)(a2 + 96), v7);
        re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderRaw>,re::Matrix4x4<float>>((re::snapshot::Decoder *)a1, *(_QWORD *)(a2 + 128) + 40 * *(_QWORD *)(a2 + 112) - 40);
      }
      ++v7;
    }
    while (v7 - v4 != 1);
    goto LABEL_14;
  }
  v6 = 1;
  LODWORD(v7) = 1;
LABEL_14:
  if (v6 != v7)
    re::snapshot::Decoder::error((const char **)a1, "count mismatch: expected %zu, got %d", v4, v7 - 1);
LABEL_16:
  *(_DWORD *)(a1 + 32) = 0;
  re::snapshot::Reader<re::snapshot::DecoderRaw>::field<3,re::AssetHandle>(a1, (const re::IntrospectionBase *)(a2 + 32));
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::field<3,re::AssetHandle>(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  _UNKNOWN **v4;
  int v5;
  const re::IntrospectionBase *v6;

  v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v3 & 1) == 0)
  {
    v6 = a2;
    v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    a2 = v6;
    if (v5)
    {
      re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v6);
      v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      a2 = v6;
    }
  }
  re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t *)a1, a2, (uint64_t)v4[412]);
  *(_DWORD *)(a1 + 32) = 0;
}

uint64_t re::ecs2::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderOPACK>>(uint64_t a1, uint64_t a2)
{
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<0,re::ecs2::Component>(a1, (float *)a2);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,re::DynamicArray<re::SkeletalPose>>(a1, (_QWORD *)(a2 + 56));
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(a1, (_QWORD *)(a2 + 96));
  return re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,re::AssetHandle>(a1, (float *)(a2 + 32));
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,re::DynamicArray<re::SkeletalPose>>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  result = re::snapshot::DecoderOPACK::advanceTo<1>(a1);
  if ((_DWORD)result)
  {
    re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderOPACK>,re::SkeletalPose>((re::snapshot::DecoderOPACK *)a1, a2);
    v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24) || (v6 = *v5, v6 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v5 + 1;
      result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  result = re::snapshot::DecoderOPACK::advanceTo<2>(a1);
  if ((_DWORD)result)
  {
    re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderOPACK>,re::DynamicArray<re::Matrix4x4<float>>>((re::snapshot::DecoderOPACK *)a1, a2);
    v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24) || (v6 = *v5, v6 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v5 + 1;
      result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<3,re::AssetHandle>(uint64_t a1, float *a2)
{
  uint64_t result;
  unsigned __int8 v5;
  _UNKNOWN **v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  const re::IntrospectionBase *v10;

  result = re::snapshot::DecoderOPACK::advanceTo<3>(a1);
  if ((_DWORD)result)
  {
    v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if ((v5 & 1) == 0)
    {
      v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      if (v9)
      {
        re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v10);
        v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      }
    }
    re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t *)a1, a2, (uint64_t)v6[412]);
    v7 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v7 >= *(_QWORD *)(a1 + 24) || (v8 = *v7, v8 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v8 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v7 + 1;
      result = (v8 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

void re::ecs2::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderRaw>>(unsigned int *a1, uint64_t a2)
{
  re::snapshot::Writer<re::snapshot::EncoderRaw>::field<0,re::ecs2::Component>(a1, a2);
  re::snapshot::Writer<re::snapshot::EncoderRaw>::field<1,re::DynamicArray<re::SkeletalPose>>(a1, a2 + 56);
  re::snapshot::Writer<re::snapshot::EncoderRaw>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(a1, a2 + 96);
  re::snapshot::Writer<re::snapshot::EncoderRaw>::field<3,re::AssetHandle>(a1, a2 + 32);
}

void re::snapshot::Writer<re::snapshot::EncoderRaw>::field<1,re::DynamicArray<re::SkeletalPose>>(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t __src;

  __src = *(_QWORD *)(a2 + 16);
  re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 32);
    v6 = 88 * v4;
    do
    {
      if ((v7 & 1) == 0)
      {
        {
          re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
        }
      }
      re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, v5, re::introspect<re::SkeletalPose>(void)::info);
      v5 += 88;
      v6 -= 88;
    }
    while (v6);
  }
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderRaw>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(unsigned int *a1, uint64_t a2)
{
  unsigned int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t __src;

  __src = *(_QWORD *)(a2 + 16);
  result = re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v7 = 40 * v5;
    v8 = (uint64_t *)(v6 + 16);
    do
    {
      __src = *v8 << 6;
      re::snapshot::Encoder::writeRaw<true>(a1, &__src, 8uLL);
      v9 = (void *)v8[2];
      v10 = *v8;
      v8 += 5;
      result = re::snapshot::Encoder::writeRaw<true>(a1, v9, v10 << 6);
      v7 -= 40;
    }
    while (v7);
  }
  return result;
}

void re::snapshot::Writer<re::snapshot::EncoderRaw>::field<3,re::AssetHandle>(unsigned int *a1, uint64_t a2)
{
  unsigned __int8 v2;
  _UNKNOWN **v3;
  int v4;
  int v5;
  const re::IntrospectionBase *v6;
  unsigned int *v7;

  v3 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v2 & 1) == 0)
  {
    v6 = (const re::IntrospectionBase *)a2;
    v7 = a1;
    v3 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    v5 = v4;
    a2 = (uint64_t)v6;
    a1 = v7;
    if (v5)
    {
      re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v6);
      v3 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      a2 = (uint64_t)v6;
      a1 = v7;
    }
  }
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (uint64_t)v3[412]);
}

unsigned int *re::ecs2::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>(re::snapshot::EncoderOPACK *a1, uint64_t a2)
{
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<0,re::ecs2::Component>(a1, a2);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,re::DynamicArray<re::SkeletalPose>>(a1, a2 + 56);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(a1, a2 + 96);
  return re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,re::AssetHandle>(a1, a2 + 32);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,re::DynamicArray<re::SkeletalPose>>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 1);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 9;
  }
  v6 = *(_QWORD *)(a2 + 16);
  re::snapshot::EncoderOPACK::beginArray((unsigned int *)this, v6);
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 32);
    v9 = 88 * v7;
    do
    {
      if ((v10 & 1) == 0
      {
        re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
      }
      re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((unsigned int *)this, v8, re::introspect<re::SkeletalPose>(void)::info);
      v8 += 88;
      v9 -= 88;
    }
    while (v9);
  }
  return re::snapshot::EncoderOPACK::endArray((unsigned int *)this, v6);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<2,re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 2);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 10;
  }
  return re::snapshot::operator<<<re::snapshot::Writer<re::snapshot::EncoderOPACK>,re::DynamicArray<re::Matrix4x4<float>>>((uint64_t)this, a2);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<3,re::AssetHandle>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _UNKNOWN **v7;
  int v9;
  const re::IntrospectionBase *v10;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 3);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 11;
  }
  v7 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v6 & 1) == 0)
  {
    v7 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v9)
    {
      re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v10);
      v7 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((unsigned int *)this, a2, (uint64_t)v7[412]);
}

unint64_t re::ecs2::SkeletalPoseComponent::calculateRigMappingDataDepHash(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[24];
  if (v2 != a2[7])
  {
    v3 = a2[5];
    if (v3)
      v4 = *(_QWORD *)(v3 + 664);
    else
      v4 = 0;
    v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v3 ^ (v3 >> 30))) >> 27));
    v2 = v4 ^ (v5 >> 31) ^ v5;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 168))
    v6 = 0xBF58476D1CE4E5B9;
  else
    v6 = 0;
  v7 = ((v2 << 6)
      + (v2 >> 2)
      - 0x61C8864680B583E9
      + ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31))) ^ v2;
  v8 = *(unsigned int *)(a1 + 120) ^ ((unint64_t)*(unsigned int *)(a1 + 120) >> 30);
  return (((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27))) >> 31))
        + (v7 << 6)
        + (v7 >> 2)
        - 0x61C8864680B583E9) ^ v7;
}

_QWORD *re::ecs2::SkeletalPoseComponent::ensureSkeletalPoseRigMappingDataUpToDate(_QWORD *this, const re::SkeletalPoseDefinitionAsset *a2, const re::MeshAsset *a3, const re::MeshNameMap *a4, const re::RigRuntimeData *a5, uint64_t a6)
{
  _QWORD *v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  re *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (this[60] != a6)
  {
    v11 = this;
    v12 = (_anonymous_namespace_ *)(this + 59);
    if (re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled((re::DeformerFeatureFlags *)this))
    {
      v13 = v11[2];
      if (v13)
      {
        v14 = v11[2];
        do
        {
          v15 = v14;
          v14 = *(_QWORD *)(v14 + 24);
        }
        while (v14);
        v16 = *(_QWORD *)(v15 + 16);
        if (v16)
        {
          v17 = *(_QWORD *)(v16 + 56);
          if (v17)
          {
            v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
            v19 = (re *)re::ServiceLocator::serviceOrNull<re::FrameManager>(v18);
            if (v19)
            {
              v20 = v19;
              v21 = *re::ecsComponentsLogObjects(v19);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
              {
                v22 = *((_QWORD *)v20 + 3) & 0xFFFFFFFFFFFFFFFLL;
                v23 = *(_QWORD *)(v13 + 280);
                v24 = 134218242;
                v25 = v22;
                v26 = 2080;
                v27 = v23;
                _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_INFO, "[DeformerLogging] Frame[%llu]: Updating Skeletal Pose Mesh Mapping for Entity - %s", (uint8_t *)&v24, 0x16u);
              }
            }
          }
        }
      }
    }
    return (_QWORD *)re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>(v12, (unint64_t)a2, (uint64_t)a5, a3, (uint64_t)a4, a6);
  }
  return this;
}

unint64_t re::ecs2::SkeletalPoseComponent::skeletalPose(re::ecs2::SkeletalPoseComponent *this, unint64_t a2, int a3)
{
  re::BindPoint *v3;

  if (*((_QWORD *)this + 475) <= a2)
  {
    if (*((_QWORD *)this + 9) <= a2)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    return *((_QWORD *)this + 11) + 88 * a2;
  }
  else
  {
    v3 = (re::BindPoint *)(*((_QWORD *)this + 476) + 48 * a2);
    if (a3)
      return re::BindPoint::valueUntyped(v3);
    else
      return re::BindPoint::baseValueUntyped(v3);
  }
}

double re::ecs2::SkeletalPoseComponent::constructPosesAndBindPoints(re::ecs2::SkeletalPoseComponent *this)
{
  unint64_t v2;
  char *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  unint64_t i;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  double result;
  uint64_t v13[2];
  uint64_t v14;
  _BYTE v15[40];
  uint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  re::BindNode *v21[4];
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 2))
  {
    v2 = *((_QWORD *)this + 9);
    v3 = (char *)this + 3792;
    v4 = (_anonymous_namespace_ *)re::FixedArray<re::BindPoint>::deinit((_QWORD *)this + 474);
    re::makeEntityBindNodeForComponent(this, (uint64_t)v21);
    v17 = 0;
    v18 = 0;
    v19 = 0;
    re::DynamicString::setCapacity(&v16, 0);
    if (v2)
    {
      v6 = 0;
      for (i = 0; i != v2; ++i)
      {
        re::DynamicString::assignf((re::DynamicString *)&v16, "SkeletalPose.skeletalPoses[%zu]", i);
        v8 = v18;
        if ((v17 & 1) == 0)
          v8 = (char *)&v17 + 1;
        v9 = v17 >> 1;
        if ((v17 & 1) != 0)
          v9 = v17 >> 1;
        v13[0] = (uint64_t)v8;
        v13[1] = v9;
        re::BindNode::bindPointWithOverride<re::SkeletalPose>(v21, v13, (uint64_t)&v14);
        v10 = *((_QWORD *)this + 475);
        if (v10 <= i)
        {
          v20 = 0;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v30 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v22 = 136315906;
          v23 = "operator[]";
          v24 = 1024;
          v25 = 468;
          v26 = 2048;
          v27 = i;
          v28 = 2048;
          v29 = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v11 = (_QWORD *)(*((_QWORD *)this + 476) + v6);
        *v11 = v14;
        re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v11 + 1), (uint64_t)v15);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v15);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v15);
        v6 += 48;
      }
    }
    if (v16)
    {
      if ((v17 & 1) != 0)
        (*(void (**)(void))(*v16 + 40))();
    }
    return re::BindNode::deinit((re::BindNode *)v21);
  }
  return result;
}

uint64_t re::ecs2::SkeletalPoseComponent::ensurePostUpdatePoses(re::ecs2::SkeletalPoseComponent *this, uint64_t a2)
{
  int v2;
  uint64_t result;
  re::ecs2::SkeletalPoseComponent *v4;
  uint64_t v5;
  re::ecs2::EntityComponentCollection *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t i;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  _OWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  _anonymous_namespace_ *v79;
  re::ecs2::SkeletalPoseComponent *v80;
  _anonymous_namespace_ *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  re::MeshAsset *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  StringID v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  uint64_t v107;
  _QWORD v108[2];
  int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD v113[15];
  __int128 v114;
  __int128 v115;
  int32x4_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _BYTE v121[48];
  __int128 v122;
  uint64_t v123;
  simd_float4x4 v124;

  v123 = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)this + 3816);
  if (!*((_BYTE *)this + 3816))
    return 0;
  if (v2 == 1)
  {
    v4 = this;
    v5 = *((_QWORD *)this + 2);
    if (v5)
    {
      v6 = (re::ecs2::EntityComponentCollection *)(v5 + 32);
      v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v5 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      v8 = *(_QWORD *)(v5 + 176);
      v9 = !v7 || v8 == 0;
      if (!v9)
      {
        v10 = (_QWORD *)v7;
        result = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v8 + 32));
        if (!result)
          return result;
        v11 = *(_QWORD *)(result + 392);
        v85 = (re::MeshAsset *)result;
        v12 = *(_QWORD *)(result + 376);
        v13 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v13)
        {
          v84 = *((_QWORD *)v13 + 26);
          v86 = *((_QWORD *)v13 + 24);
        }
        else
        {
          v86 = v12;
          v84 = v11;
        }
        v14 = v10[21];
        v15 = v10[19];
        v16 = v10[14];
        v103 = v10[16];
        v104 = v16;
        re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)v4 + 478, 0);
        *((_DWORD *)v4 + 960) += 2;
        if ((v15 & 0x3F) != 0)
          v17 = (v15 >> 6) + 1;
        else
          v17 = v15 >> 6;
        *((_QWORD *)v4 + 483) = v15;
        v113[0] = 0;
        re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::SkeletalPoseComponent *)((char *)v4 + 3824), v17, v113);
        *((_QWORD *)v4 + 486) = 0;
        ++*((_DWORD *)v4 + 974);
        v79 = (re::ecs2::SkeletalPoseComponent *)((char *)v4 + 3872);
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)v4 + 484, v15);
        re::DynamicArray<re::SkeletalPose>::clear((re::ecs2::SkeletalPoseComponent *)((char *)v4 + 3912));
        v81 = (re::ecs2::SkeletalPoseComponent *)((char *)v4 + 3912);
        v18 = (_anonymous_namespace_ *)re::DynamicArray<re::SkeletalPose>::setCapacity((_QWORD *)v4 + 489, v15);
        v101 = 0;
        v99 = 0u;
        v100 = 0u;
        v102 = 0x7FFFFFFFLL;
        v89 = v15;
        if (!v15)
        {
LABEL_88:
          *((_BYTE *)v4 + 3816) = 2;
          re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)&v99);
          return 1;
        }
        v19 = v14;
        v20 = 0;
        v21 = *((_QWORD *)v85 + 55);
        v82 = v21 + 8;
        v83 = v21 + 72;
        v80 = v4;
        while (1)
        {
          v22 = v19 + 56 * v20;
          v25 = *(_DWORD *)(v22 + 4);
          v24 = (int *)(v22 + 4);
          v23 = v25;
          v26 = 0xBF58476D1CE4E5B9 * (v25 ^ ((unint64_t)v25 >> 30));
          v27 = (0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31);
          if (!DWORD2(v100))
            break;
          v28 = v27 % DWORD2(v100);
          v29 = *(unsigned int *)(*((_QWORD *)&v99 + 1) + 4 * v28);
          if ((_DWORD)v29 != 0x7FFFFFFF)
          {
            while (*(_DWORD *)(v100 + 16 * v29 + 12) != v23)
            {
              v29 = *(_DWORD *)(v100 + 16 * v29 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v29 == 0x7FFFFFFF)
                goto LABEL_26;
            }
            goto LABEL_87;
          }
LABEL_26:
          v30 = (unsigned int *)(v19 + 56 * v20);
          v31 = *(unsigned int *)(*((_QWORD *)&v99 + 1) + 4 * v28);
          if ((_DWORD)v31 == 0x7FFFFFFF)
            goto LABEL_32;
          v32 = v86;
          while (*(_DWORD *)(v100 + 16 * v31 + 12) != v23)
          {
            v31 = *(_DWORD *)(v100 + 16 * v31 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v31 == 0x7FFFFFFF)
              goto LABEL_33;
          }
LABEL_34:
          v33 = *v30;
          if (v32 > v33)
          {
            v34 = v19 + 56 * v20;
            v36 = *(_DWORD *)(v34 + 8);
            v35 = (_DWORD *)(v34 + 8);
            v37 = v36 + v23;
            if (*(_QWORD *)(v19 + 56 * v20 + 32) && v104 >= v37)
            {
              v39 = re::DataArray<re::MeshInstance>::get(v83, *(_QWORD *)(v84 + 8 * v33));
              v40 = *(_QWORD *)(re::DataArray<re::MeshModel>::get(v82, *(_QWORD *)(v39 + 16)) + 176);
              if (v40)
              {
                v19 = v14;
                v41 = *(_QWORD *)(v40 + 8) <= (unint64_t)**(unsigned __int16 **)(v14 + 56 * v20 + 48)
                    ? 0xFFFFFFFFLL
                    : *(unsigned int *)(*(_QWORD *)(v40 + 16) + 72 * **(unsigned __int16 **)(v14 + 56 * v20 + 48) + 4);
              }
              else
              {
                v41 = 0xFFFFFFFFLL;
                v19 = v14;
              }
              if (*((_QWORD *)v85 + 117) > v41)
              {
                v42 = (uint64_t *)re::MeshAsset::skeletonAtIndex(v85, v41);
                v19 = v14;
                v43 = v42[3];
                if (v43 == *v35)
                {
                  v44 = v42;
                  *(_QWORD *)&v92.var0 = 0;
                  v92.var1 = (char *)&str_110;
                  v93 = 0u;
                  v94 = 0u;
                  v95 = 0u;
                  v96 = 0;
                  v97 = 0;
                  v98 = 0;
                  v113[0] = v42[4];
                  v113[1] = v43;
                  v45 = re::globalAllocators((re *)v42);
                  v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45[2] + 32))(v45[2], 256, 8);
                  v116.i64[0] = v46;
                  re::SkeletalPose::init((uint64_t *)&v92, v116.i64);
                  if (v46)

                  v90 = re::MutableSlice<re::Matrix4x4<float>>::range(&v103, *v24, v37);
                  v91 = v47;
                  v48 = v44[6];
                  v49 = v94;
                  v87 = *((_QWORD *)&v93 + 1);
                  v88 = v44[7];
                  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v113);
                  v109 = 1;
                  v110 = 0;
                  v111 = 0;
                  v108[0] = v113;
                  v108[1] = 0;
                  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v108, 0);
                  v109 += 2;
                  if ((v48 & 0x3F) != 0)
                    v50 = (v48 >> 6) + 1;
                  else
                    v50 = v48 >> 6;
                  v112 = v48;
                  v116.i64[0] = 0;
                  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v108, v50, &v116);
                  v105 = 0;
                  v106 = 0;
                  v107 = 0;
                  re::FixedArray<re::Matrix4x4<float>>::init<>(&v105, (uint64_t)v113, v48);
                  if (v48)
                  {
                    for (i = 0; i != v48; ++i)
                    {
                      v53 = *(unsigned int *)(v88 + 4 * i);
                      if (v48 <= v53)
                      {
                        if (v91 <= i)
                        {
                          re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v91);
                          _os_crash();
                          __break(1u);
LABEL_90:
                          *(_QWORD *)&v115 = 0;
                          v119 = 0u;
                          v120 = 0u;
                          v117 = 0u;
                          v118 = 0u;
                          v116 = 0u;
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v121 = 136315906;
                          *(_QWORD *)&v121[4] = "operator[]";
                          *(_WORD *)&v121[12] = 1024;
                          *(_DWORD *)&v121[14] = 468;
                          *(_WORD *)&v121[18] = 2048;
                          *(_QWORD *)&v121[20] = v53;
                          *(_WORD *)&v121[28] = 2048;
                          *(_QWORD *)&v121[30] = v35;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_91:
                          re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, i, v87);
                          _os_crash();
                          __break(1u);
LABEL_92:
                          re::internal::assertLog((re::internal *)6, v54, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v91);
                          _os_crash();
                          __break(1u);
LABEL_93:
                          re::internal::assertLog((re::internal *)6, v51, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, i, v87);
                          _os_crash();
                          __break(1u);
LABEL_94:
                          re::internal::assertLog((re::internal *)6, v54, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v53, v91);
                          _os_crash();
                          __break(1u);
LABEL_95:
                          *(_QWORD *)&v115 = 0;
                          v119 = 0u;
                          v120 = 0u;
                          v117 = 0u;
                          v118 = 0u;
                          v116 = 0u;
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)v121 = 136315906;
                          *(_QWORD *)&v121[4] = "operator[]";
                          *(_WORD *)&v121[12] = 1024;
                          *(_DWORD *)&v121[14] = 468;
                          *(_WORD *)&v121[18] = 2048;
                          *(_QWORD *)&v121[20] = v53;
                          *(_WORD *)&v121[28] = 2048;
                          *(_QWORD *)&v121[30] = v35;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
                        }
                        *(_OWORD *)v121 = xmmword_2260E5D70;
                        v115 = 0u;
                        v116 = 0u;
                        re::decomposeScaleRotationTranslation<float>(v90 + (i << 6), &v116, v121, &v115);
                        if (v87 <= i)
                          goto LABEL_91;
                        v65 = v116.i64[1];
                        v66 = v116.i64[0];
                        v68 = *(_QWORD *)v121;
                        v67 = *(_QWORD *)&v121[8];
                        v69 = *((_QWORD *)&v115 + 1);
                        v70 = v115;
                      }
                      else
                      {
                        if ((re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)v108, *(unsigned int *)(v88 + 4 * i)) & 1) == 0)
                        {
                          if (v91 <= v53)
                            goto LABEL_94;
                          v124 = __invert_f4(*(simd_float4x4 *)(v90 + (v53 << 6)));
                          v35 = v106;
                          if ((unint64_t)v106 <= v53)
                            goto LABEL_95;
                          *(simd_float4x4 *)(v107 + (v53 << 6)) = v124;
                          re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v108, v53);
                        }
                        v35 = v106;
                        if ((unint64_t)v106 <= v53)
                          goto LABEL_90;
                        if (v91 <= i)
                          goto LABEL_92;
                        v55 = 0;
                        v56 = (float32x4_t *)(v107 + (v53 << 6));
                        v57 = *v56;
                        v58 = v56[1];
                        v59 = v56[2];
                        v60 = v56[3];
                        v61 = (_OWORD *)(v90 + (i << 6));
                        v62 = v61[1];
                        v63 = v61[2];
                        v64 = v61[3];
                        *(_OWORD *)v121 = *v61;
                        *(_OWORD *)&v121[16] = v62;
                        *(_OWORD *)&v121[32] = v63;
                        v122 = v64;
                        do
                        {
                          *(float32x4_t *)((char *)&v116 + v55) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, COERCE_FLOAT(*(_OWORD *)&v121[v55])), v58, *(float32x2_t *)&v121[v55], 1), v59, *(float32x4_t *)&v121[v55], 2), v60, *(float32x4_t *)&v121[v55], 3);
                          v55 += 16;
                        }
                        while (v55 != 64);
                        *(_OWORD *)v121 = 0u;
                        v114 = 0u;
                        v115 = xmmword_2260E5D70;
                        re::decomposeScaleRotationTranslation<float>((uint64_t)&v116, (int32x4_t *)v121, &v115, &v114);
                        if (v87 <= i)
                          goto LABEL_93;
                        v66 = *(_QWORD *)v121;
                        v65 = *(_QWORD *)&v121[8];
                        v67 = *((_QWORD *)&v115 + 1);
                        v68 = v115;
                        v69 = *((_QWORD *)&v114 + 1);
                        v70 = v114;
                      }
                      v71 = (uint64_t *)(v49 + 48 * i);
                      *v71 = v66;
                      v71[1] = v65;
                      v71[2] = v68;
                      v71[3] = v67;
                      v71[4] = v70;
                      v71[5] = v69;
                    }
                  }
                  if (v105 && v106)
                    (*(void (**)(void))(*(_QWORD *)v105 + 40))();
                  v4 = v80;
                  if (v108[0] && (v109 & 1) == 0)
                    (*(void (**)(void))(*(_QWORD *)v108[0] + 40))();
                  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v113);
                  v72 = *((_QWORD *)v80 + 486);
                  v73 = *((_QWORD *)v80 + 485);
                  if (v72 >= v73)
                  {
                    v74 = v72 + 1;
                    if (v73 < v72 + 1)
                    {
                      if (*(_QWORD *)v79)
                      {
                        v75 = 2 * v73;
                        v9 = v73 == 0;
                        v76 = 8;
                        if (!v9)
                          v76 = v75;
                        if (v76 <= v74)
                          v77 = v74;
                        else
                          v77 = v76;
                        re::DynamicArray<re::RigNodeConstraint>::setCapacity(v79, v77);
                      }
                      else
                      {
                        re::DynamicArray<re::RigNodeConstraint>::setCapacity(v79, v74);
                        ++*((_DWORD *)v80 + 974);
                      }
                    }
                    v72 = *((_QWORD *)v80 + 486);
                  }
                  v78 = (uint64_t *)(*((_QWORD *)v80 + 488) + 16 * v72);
                  *v78 = v90;
                  v78[1] = v91;
                  ++*((_QWORD *)v80 + 486);
                  ++*((_DWORD *)v80 + 974);
                  re::DynamicArray<re::SkeletalPose>::add(v81, &v92);
                  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)&v92);
                  v19 = v14;
                }
              }
            }
          }
LABEL_87:
          if (++v20 == v89)
            goto LABEL_88;
        }
        LODWORD(v28) = 0;
        v30 = (unsigned int *)(v19 + 56 * v20);
LABEL_32:
        v32 = v86;
LABEL_33:
        re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsCopy((uint64_t)&v99, v28, v27, (uint64_t)v24, v24);
        ++HIDWORD(v102);
        v23 = *v24;
        v19 = v14;
        goto LABEL_34;
      }
    }
    return 0;
  }
  if (v2 == 2)
    return 1;
  re::internal::assertLog((re::internal *)5, a2, "assertion failure: '%s' (%s:line %i) Unexpected post update pose state: %u", "!\"Unreachable code\"", "ensurePostUpdatePoses", 132, *((unsigned __int8 *)this + 3816));
  result = _os_crash();
  __break(1u);
  return result;
}

re::SkeletalPose *re::DynamicArray<re::SkeletalPose>::clear(re::SkeletalPose *result)
{
  re::SkeletalPose *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
  {
    result = (re::SkeletalPose *)*((_QWORD *)result + 4);
    v3 = 88 * v2;
    do
    {
      re::SkeletalPose::~SkeletalPose(result);
      result = (re::SkeletalPose *)(v4 + 88);
      v3 -= 88;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

void re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 16 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::ecs2::SkeletalPoseComponent::calculateSkeletalPoseBufferWithRig(re::ecs2::SkeletalPoseComponent *this, re::ecs2::MeshComponent *a2, re::ecs2::RigComponent *a3, re::ecs2::SkeletalPoseBufferComponent *a4)
{
  const re::MeshAsset *v8;
  uint64_t v9;
  const re::MeshNameMap *v10;
  const re::SkeletalPoseDefinitionAsset *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const re::RigRuntimeData *v16;
  _anonymous_namespace_ *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  unint64_t v23;
  re::BindNode *v24[5];

  v24[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  v23 = re::ecs2::SkeletalPoseComponent::calculateRigMappingDataDepHash((uint64_t)this, a3);
  v8 = (const re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>((re::ecs2::MeshComponent *)((char *)a2 + 32));
  v9 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((_QWORD *)this + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v9)
    v10 = (const re::MeshNameMap *)(v9 + 216);
  else
    v10 = (const re::MeshAsset *)((char *)v8 + 448);
  v11 = (const re::SkeletalPoseDefinitionAsset *)re::ecs2::SkeletalPoseComponent::skeletalPoseDefinitionAsset(this, a2, &v23);
  v12 = (*((_QWORD *)v10 + 1) + (v23 << 6) + (v23 >> 2) - 0x61C8864680B583E9) ^ v23;
  v13 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)a4 + 16) ^ (*((_QWORD *)a4 + 16) >> 30));
  v14 = (v12 << 6) + (v12 >> 2) - 0x61C8864680B583E9;
  v15 = (((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) ^ ((0x94D049BB133111EBLL * (v13 ^ (v13 >> 27))) >> 31)) + v14) ^ v12;
  v16 = (re::ecs2::RigComponent *)((char *)a3 + 184);
  v17 = (_anonymous_namespace_ *)re::ecs2::SkeletalPoseComponent::ensureSkeletalPoseRigMappingDataUpToDate(this, v11, v8, v10, v16, v12);
  if (*((_QWORD *)this + 94) != v15)
  {
    re::ecs2::SkeletalPoseComponent::constructPosesAndBindPoints(this);
  }
  if (*((_QWORD *)this + 60) != v12)
    re::SkeletalPoseRigMappingData::rebuildMappingData<re::MeshAsset>((re::ecs2::SkeletalPoseComponent *)((char *)this + 472), (unint64_t)v11, (uint64_t)v16, v8, (uint64_t)v10, v12);
  re::ecs2::SkeletalPoseBufferComponent::initializeBufferRanges(a4, v8, v10, (re::ecs2::SkeletalPoseComponent *)((char *)this + 472));
  v18 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)a4 + 16) ^ (*((_QWORD *)a4 + 16) >> 30));
  v19 = (((0x94D049BB133111EBLL * (v18 ^ (v18 >> 27))) ^ ((0x94D049BB133111EBLL * (v18 ^ (v18 >> 27))) >> 31)) + v14) ^ v12;
  if (*((_QWORD *)this + 94) == v19)
  {
    re::SkeletalPoseRuntimeData::executeEvaluationTree((uint64_t)this + 736);
  }
  else
  {
    re::makeBindNode(*((re **)this + 2), (uint64_t)v24);
    v20 = *((_QWORD *)this + 475);
    v22[0] = *((_QWORD *)this + 476);
    v22[1] = v20;
    re::SkeletalPoseRuntimeData::update<re::MeshAsset>((re::ecs2::SkeletalPoseComponent *)((char *)this + 736), v11, (uint64_t)v16, v8, (uint64_t)v10, (re::ecs2::SkeletalPoseComponent *)((char *)this + 472), v19, v22, *((_QWORD *)a4 + 16), *((_QWORD *)a4 + 14), (uint64_t)this + 96, v24);
    re::BindNode::deinit((re::BindNode *)v24);
  }
  return re::ecs2::Component::markDirty(a4);
}

uint64_t re::ecs2::SkeletalPoseComponent::skeletalPoseDefinitionAsset(re::ecs2::SkeletalPoseComponent *this, const re::ecs2::MeshComponent *a2, unint64_t *a3)
{
  re::AssetHandle *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const re::MeshAsset *v20;

  v6 = (re::ecs2::SkeletalPoseComponent *)((char *)this + 32);
  v7 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::ecs2::SkeletalPoseComponent *)((char *)this + 32));
  if (v7)
  {
    v8 = v7;
    v9 = *((_QWORD *)a2 + 5);
    if (v9)
      v10 = *(_QWORD *)(v9 + 664);
    else
      v10 = 0;
    v13 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
    v14 = v10 ^ (v13 >> 31) ^ v13;
    v15 = *((_QWORD *)this + 5);
    if (v15)
      v16 = *(_QWORD *)(v15 + 664);
    else
      v16 = 0;
    v17 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
    *a3 ^= (*a3 << 6)
         + (*a3 >> 2)
         - 0x61C8864680B583E9
         + (((v14 << 6) + (v14 >> 2) + (v16 ^ (v17 >> 31) ^ v17) - 0x61C8864680B583E9) ^ v14);
    if (*((_QWORD *)this + 17))
    {
      *((_QWORD *)this + 17) = 0;
      re::SkeletalPoseDefinitionAsset::deinit((re::ecs2::SkeletalPoseComponent *)((char *)this + 152));
    }
  }
  else
  {
    if (*((_QWORD *)this + 5))
      re::AssetHandle::loadAsync(v6);
    v11 = *((_QWORD *)a2 + 5);
    if (v11)
      v12 = *(_QWORD *)(v11 + 664);
    else
      v12 = 0;
    v18 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
    v19 = v12 ^ (v18 >> 31) ^ v18;
    if (v19 != *((_QWORD *)this + 17))
    {
      *((_QWORD *)this + 17) = v19;
      re::SkeletalPoseDefinitionAsset::deinit((re::ecs2::SkeletalPoseComponent *)((char *)this + 152));
      v20 = (const re::MeshAsset *)re::AssetHandle::asset<re::MeshAsset>((const re::ecs2::MeshComponent *)((char *)a2 + 32));
      re::SkeletalPoseDefinitionAsset::init((re::ecs2::SkeletalPoseComponent *)((char *)this + 152), v20, 0);
      v19 = *((_QWORD *)this + 17);
    }
    *a3 ^= v19 + (*a3 << 6) + (*a3 >> 2) - 0x61C8864680B583E9;
    return (uint64_t)this + 152;
  }
  return v8;
}

void re::ecs2::SkeletalPoseSystem::willAddSceneToECSService(re::ecs2::SkeletalPoseSystem *this, re::EventBus **a2)
{
  re::EventBus *v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  re::ecs2::Scene *v17;
  _BYTE v18[24];
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v17 = (re::ecs2::Scene *)a2;
  re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::addScene((uint64_t)this + 152, (uint64_t)a2);
  v4 = a2[36];
  if (v4)
  {
    v16 = 0;
    v13 = 0u;
    v14 = 1uLL;
    v15 = 0uLL;
    v5 = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 104, (uint64_t *)&v17, (uint64_t)&v13);
    re::BucketArray<RESubscriptionHandle,4ul>::deinit((uint64_t)&v13);
    v6 = (_anonymous_namespace_ *)v13;
    if ((_QWORD)v13 && (v14 & 1) == 0)
      v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
    v19 = re::globalAllocators((re *)v7)[2];
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, 32, 0);
    *v8 = &off_24ED6C490;
    v8[1] = this;
    v8[2] = re::ecs2::SkeletalPoseSystem::removedSkeletalPoseBufferHandler;
    v8[3] = 0;
    v20 = v8;
    v9 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v4, (uint64_t)v18, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v11 = v10;
    v12 = (_QWORD *)re::BucketArray<RESubscriptionHandle,4ul>::addUninitialized(v5);
    *v12 = v9;
    v12[1] = v11;
    if (v20)
    {
      (**(void (***)(_BYTE *))v20)(v20);
      if (v20 != v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    }
  }
}

void re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::addScene(uint64_t a1, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  re::ecs2::System *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56[2];
  int v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  unint64_t v64;
  _OWORD v65[5];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v56[0] = a2;
  v4 = (_anonymous_namespace_ *)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 136);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(a1 + 144);
    else
      v7 = *(_QWORD **)(a1 + 152);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(a1 + 144);
    if (!v5)
      goto LABEL_17;
  }
  else
  {
    v8 = *(uint64_t **)(a1 + 152);
    if (!v5)
      goto LABEL_17;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_16:
    *(_QWORD *)&v48 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 120, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v48);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::init(v13, a1, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)&v48);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v4, v48);
    v14 = a1 + 168;
    v15 = v48;
    goto LABEL_49;
  }
LABEL_17:
  v55 = 0u;
  v48 = 0u;
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = -1;
  v50 = 0u;
  v51 = 0u;
  v52 = 0;
  v53 = 1;
  v54 = 0uLL;
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v55 = 0;
  v17 = *(_QWORD *)(a1 + 8);
  DWORD2(v55) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,4ul>::setBucketsCapacity((uint64_t *)a1, (v16 + 4) >> 2);
    v17 = *(_QWORD *)(a1 + 8);
  }
  if (v17 <= v16 >> 2)
  {
    v56[1] = 0;
    memset(v65, 0, sizeof(v65));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v57 = 136315906;
    v58 = "operator[]";
    v59 = 1024;
    v60 = 858;
    v61 = 2048;
    v62 = v16 >> 2;
    v63 = 2048;
    v64 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(v18 + 8 * (v16 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v20 = v19 + 112 * (v16 & 3);
  v21 = v48;
  v22 = v49;
  v23 = v50;
  *(_QWORD *)(v20 + 48) = v51;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v51 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v48);
  v25 = *(_QWORD *)(a1 + 40);
  if (!v25)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::init(v26, a1, v56[0]);
  *(_QWORD *)&v65[0] = *(_QWORD *)(a1 + 40) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 56), v56, (uint64_t *)v65);
  v27 = *(_QWORD *)(a1 + 40);
  v28 = *(_QWORD *)(a1 + 160);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(a1 + 160) = v27;
  *(_QWORD *)&v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v4, v29, &v48);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(a1 + 160) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(a1 + 136) & 1) != 0)
      v32 = a1 + 144;
    else
      v32 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(a1 + 128) - 8) &= v30;
  }
  v33 = *(_QWORD *)(a1 + 40);
  v34 = *(_QWORD *)(a1 + 208);
  if ((v33 & 0x3F) != 0)
    v35 = (v33 >> 6) + 1;
  else
    v35 = v33 >> 6;
  *(_QWORD *)(a1 + 208) = v33;
  *(_QWORD *)&v48 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 168), v35, &v48);
  if (v33 && v34 > v33)
  {
    v36 = 63;
    v37 = *(_QWORD *)(a1 + 208) & 0x3FLL;
    if (v37 && v37 != 63)
      v36 = ~(-1 << v37);
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
      v38 = a1 + 192;
    else
      v38 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(v38 + 8 * *(_QWORD *)(a1 + 176) - 8) &= v36;
  }
  v15 = *(_QWORD *)&v65[0];
  v14 = a1 + 168;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (!*(_BYTE *)(a1 + 232))
    return;
  v39 = *(_QWORD *)(a1 + 176);
  v40 = *(_DWORD *)(a1 + 184);
  if (v39 >= 0xB)
  {
    if ((v40 & 1) != 0)
      v41 = (_QWORD *)(a1 + 192);
    else
      v41 = *(_QWORD **)(a1 + 200);
    v43 = 8 * v39;
    while (!*v41)
    {
      ++v41;
      v43 -= 8;
      if (!v43)
        return;
    }
LABEL_65:
    v47 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v47 + 86))
      re::ecs2::System::queueToRun(v47, 0.0);
    return;
  }
  if ((v40 & 1) != 0)
  {
    v42 = (uint64_t *)(a1 + 192);
    if (!v39)
      return;
  }
  else
  {
    v42 = *(uint64_t **)(a1 + 200);
    if (!v39)
      return;
  }
  v44 = 0;
  v45 = 8 * v39;
  do
  {
    v46 = *v42++;
    v44 |= v46;
    v45 -= 8;
  }
  while (v45);
  if (v44)
    goto LABEL_65;
}

uint64_t re::ecs2::SkeletalPoseSystem::removedSkeletalPoseBufferHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  re::ecs2::Component *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v17;

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v17 = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 208), &v17);
  if (v6 != -1)
  {
    v7 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 152, *(_QWORD *)(*(_QWORD *)(a1 + 216) + 16 * v6 + 8));
    v8 = *(re::ecs2::Component **)(a2 + 232);
    if (v8)
    {
      v9 = v7;
      v10 = 24;
      v11 = 0xFFFFFFFFLL;
      do
      {
        v12 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v9 + 16), *(_QWORD *)(v9 + v10), v8);
        if (v12 != -1 && (v13 & 0xFFFFFF00000000) != 0)
        {
          v15 = v12;
          v11 = v13;
          goto LABEL_13;
        }
        v10 += 8;
      }
      while (v10 != 56);
      v15 = -1;
LABEL_13:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(v9, v15, v11);
    }
  }
  return 0;
}

uint64_t re::ecs2::SkeletalPoseSystem::willRemoveSceneFromECSService(re::ecs2::SkeletalPoseSystem *this, re::ecs2::Scene *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  re::ecs2::Scene *v11;

  v11 = a2;
  v3 = (char *)this + 104;
  v4 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v11);
  if (v4)
  {
    v5 = *((_QWORD *)v11 + 36);
    if (v5)
    {
      v6 = v4;
      v7 = *(_QWORD *)(v4 + 40);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
        {
          v9 = re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v6, i);
          re::EventBus::unsubscribe(v5, *(_QWORD *)v9, *(_QWORD *)(v9 + 8));
        }
      }
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v11);
  }
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 152, (uint64_t)v11);
}

BOOL re::ecs2::SkeletalPosePreparationStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _anonymous_namespace_ *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  const re::MeshAsset *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v37, a5, 0);
  v8 = v37;
  v9 = v38;
  v37 = a4;
  v38 = v8;
  v39 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v38);
      v15 = *(uint64_t **)v14;
      v16 = *(_QWORD *)(*(_QWORD *)v14 + 16);
      if (v16)
      {
        v17 = re::AssetHandle::loadedAsset<re::SkeletalPoseDefinitionAsset>((re::SkeletalPoseDefinitionAsset *)(v15 + 4));
        if (v17)
        {
          v18 = (_QWORD *)v17;
          if (v15[17])
          {
            v15[17] = 0;
            re::SkeletalPoseDefinitionAsset::deinit((re::SkeletalPoseDefinitionAsset *)(v15 + 19));
          }
          v19 = v37;
          v20 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v38);
          v21 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v19, v20, *(_QWORD *)(a3 + 32));
          goto LABEL_29;
        }
        re::AssetHandle::loadAsync((re::AssetHandle *)(v15 + 4));
        v24 = *(_QWORD *)(v16 + 176);
        if (!v24)
          goto LABEL_23;
        v21 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v24 + 32));
        if (v21)
        {
          v25 = v21;
          v26 = *(_QWORD *)(v24 + 40);
          if (v26)
            v27 = *(_QWORD *)(v26 + 664);
          else
            v27 = 0;
          v30 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) >> 27));
          v31 = v27 ^ (v30 >> 31) ^ v30;
          if (v31 == v15[17])
          {
LABEL_23:
            v18 = 0;
          }
          else
          {
            v15[17] = v31;
            v18 = v15 + 19;
            re::SkeletalPoseDefinitionAsset::deinit((re::SkeletalPoseDefinitionAsset *)(v15 + 19));
            re::SkeletalPoseDefinitionAsset::init((re::SkeletalPoseDefinitionAsset *)(v15 + 19), v25, 0);
          }
          v32 = v15[5];
          if (!v32 || (v33 = atomic_load((unsigned int *)(v32 + 704)), v33 != 1))
          {
            v34 = v37;
            v35 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v38);
            v21 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v34, v35, *(_QWORD *)(a3 + 32));
          }
          if (!v18)
            goto LABEL_31;
LABEL_29:
          if ((_QWORD *)v15[18] != v18)
          {
            v15[18] = (uint64_t)v18;
          }
          goto LABEL_31;
        }
        re::AssetHandle::loadAsync((re::AssetHandle *)(v24 + 32));
        v28 = *(_QWORD *)(v24 + 40);
        if (!v28)
          goto LABEL_23;
        v29 = atomic_load((unsigned int *)(v28 + 704));
        if (v29 != 1)
          goto LABEL_23;
      }
      else
      {
        v22 = v37;
        v23 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v38);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v22, v23, *(_QWORD *)(a3 + 32));
      }
LABEL_31:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v38);
    }
    while (v38 != a5 || (unsigned __int16)v39 != 0xFFFF || WORD1(v39) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::SkeletalPosePreparationSystem::update(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6[2];
  _QWORD v7[2];

  v7[0] = a3;
  v7[1] = a4;
  if (a2)
  {
    v5 = result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v6);
    re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::updateForScene(v5 + 104, a2, (uint64_t)v7);
    return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v6);
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  re::ecs2::System *v23;
  uint64_t v24;

  v24 = a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 56), &v24)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v5);
  v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v5);
  v7 = *(_QWORD *)(*v6 + 224);
  v8 = v6[3];
  v9 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v6[2] + 8, v8);
  if (*(_DWORD *)(v9 + 40))
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v7 + 24))(v7, a3, v6, v8, v9, 0);
  else
    v10 = 0;
  v11 = v6[5];
  v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v6[2] + 8, v11);
  if (*(_DWORD *)(v12 + 40))
    v10 |= (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v7 + 32))(v7, a3, v6, v11, v12, 0);
  v13 = v6[6];
  v14 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v6[2] + 8, v13);
  if (*(_DWORD *)(v14 + 40))
  {
    if (((v10 | (*(unsigned int (**)(uint64_t, uint64_t, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, a3, v6, v13, v14, 0)) & 1) == 0)goto LABEL_9;
    goto LABEL_8;
  }
  if (v10)
LABEL_8:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v5);
LABEL_9:
  if (!*(_BYTE *)(a1 + 232))
    return;
  v15 = *(_QWORD *)(a1 + 176);
  v16 = *(_DWORD *)(a1 + 184);
  if (v15 >= 0xB)
  {
    if ((v16 & 1) != 0)
      v17 = (_QWORD *)(a1 + 192);
    else
      v17 = *(_QWORD **)(a1 + 200);
    v19 = 8 * v15;
    while (!*v17)
    {
      ++v17;
      v19 -= 8;
      if (!v19)
        return;
    }
LABEL_27:
    v23 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v23 + 86))
      re::ecs2::System::queueToRun(v23, 0.0);
    return;
  }
  if ((v16 & 1) != 0)
  {
    v18 = (uint64_t *)(a1 + 192);
    if (!v15)
      return;
  }
  else
  {
    v18 = *(uint64_t **)(a1 + 200);
    if (!v15)
      return;
  }
  v20 = 0;
  v21 = 8 * v15;
  do
  {
    v22 = *v18++;
    v20 |= v22;
    v21 -= 8;
  }
  while (v21);
  if (v20)
    goto LABEL_27;
}

void re::ecs2::SkeletalPosePreparationSystem::willAddSceneToECSService(re::ecs2::SkeletalPosePreparationSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::addScene((uint64_t)this + 104, (uint64_t)a2);
}

uint64_t re::ecs2::SkeletalPosePreparationSystem::willRemoveSceneFromECSService(re::ecs2::SkeletalPosePreparationSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 104, (uint64_t)a2);
}

_QWORD *re::ecs2::SkeletalPoseComponentStateImpl::SkeletalPoseComponentStateImpl(_QWORD *a1, uint64_t a2)
{
  _QWORD v4[2];
  _QWORD v5[5];

  v5[4] = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24ED6C300;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[2] = re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[3] = re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 4;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(a1 + 2), (uint64_t)v4);
  return a1;
}

BOOL re::ecs2::SkeletalPoseComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::ecs2::SkeletalPoseComponent *v14;
  uint64_t v15;
  unint64_t *v16;
  re::ecs2::EntityComponentCollection *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v26, a5, 0);
  v8 = v26;
  v9 = v27;
  v26 = a4;
  v27 = v8;
  v28 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = *(re::ecs2::SkeletalPoseComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v27);
      v15 = *((_QWORD *)v14 + 2);
      v16 = (unint64_t *)(a3 + 32);
      if (v15)
      {
        v16 = (unint64_t *)(a3 + 32);
        if ((*(_BYTE *)(v15 + 288) & 1) != 0)
        {
          if (*((_QWORD *)v14 + 475) != *((_QWORD *)v14 + 9))
            re::ecs2::SkeletalPoseComponent::constructPosesAndBindPoints(v14);
          v17 = (re::ecs2::EntityComponentCollection *)(v15 + 32);
          v18 = *(_QWORD *)(v15 + 176);
          v19 = re::ecs2::EntityComponentCollection::get(v17, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v16 = (unint64_t *)(a3 + 32);
          if (v18)
          {
            if (v19)
              v20 = *(_QWORD *)(v18 + 40) == 0;
            else
              v20 = 1;
            if (v20)
              v16 = (unint64_t *)(a3 + 32);
            else
              v16 = (unint64_t *)(a3 + 40);
          }
        }
      }
      v21 = v26;
      v22 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v27);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v21, v22, *v16);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v27);
    }
    while (v27 != a5 || (unsigned __int16)v28 != 0xFFFF || WORD1(v28) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::SkeletalPoseComponentStateImpl::processPreparingComponents(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  re::ProfilerConfig *v9;
  __int128 v10;
  BOOL v12;
  uint64_t v13;
  re::ecs2::SkeletalPoseComponent *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  re::ecs2::RigComponent *v19;
  re::ecs2::SkeletalPoseBufferComponent *v20;
  re::ecs2::NetworkComponent *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v28;
  re::EventBus *v29;
  uint64_t updated;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t Type;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t FirstBitSet;
  uint64_t v43;
  unint64_t i;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  float32x4_t *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float32x4_t v80;
  float32x4_t v81;
  float32_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t *v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float32x4_t v105;
  float v106;
  float v107;
  float v108;
  unsigned int v109;
  float32x4_t v110;
  float32_t v111;
  float32x4_t v112;
  float32x4_t *v113;
  re *isStatisticCollectionEnabled;
  uint64_t v115;
  int64x2_t *v116;
  unint64_t v117;
  unint64_t v118;
  int64x2_t v119;
  _DWORD *v121;
  uint64_t *v122;
  unint64_t v123;
  _OWORD v124[2];
  float32x4_t v125;
  float32x4_t v126;
  __int128 v127;
  _BYTE v128[48];
  float32x4_t v129;
  uint64_t v130;

  v130 = *MEMORY[0x24BDAC8D0];
  v9 = (re::ProfilerConfig *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v124, a5, 0);
  v10 = v124[0];
  *(_QWORD *)&v124[0] = a4;
  *(_OWORD *)((char *)v124 + 8) = v10;
  v12 = (_QWORD)v10 == a5 && WORD4(v10) == 0xFFFFLL && (DWORD2(v10) & 0xFFFF0000) == 4294901760;
  v121 = a2;
  if (v12)
  {
    v123 = 0;
  }
  else
  {
    v123 = 0;
    do
    {
      v13 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)v124 + 4);
      v14 = *(re::ecs2::SkeletalPoseComponent **)v13;
      v15 = *(_QWORD **)(*(_QWORD *)v13 + 16);
      v16 = (_QWORD *)v15[22];
      v17 = v16[5];
      if (v17 && (v18 = atomic_load((unsigned int *)(v17 + 704)), v18 == 2))
      {
        v19 = (re::ecs2::RigComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v20 = (re::ecs2::SkeletalPoseBufferComponent *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v15 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        re::ecs2::SkeletalPoseComponent::calculateSkeletalPoseBufferWithRig(v14, (re::ecs2::MeshComponent *)v16, v19, v20);
        v21 = (re::ecs2::NetworkComponent *)v15[25];
        if (v21)
          re::ecs2::NetworkComponent::markDirty(v21, v20);
        v123 += *((_QWORD *)v14 + 91);
        v22 = *((_QWORD *)v14 + 5);
        if (!v22 || (v23 = atomic_load((unsigned int *)(v22 + 704)), v23 != 1))
        {
          v24 = *(_QWORD *)&v124[0];
          v25 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v124 + 4);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v24, v25, *(_QWORD *)(a3 + 48));
        }
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v16 + 4));
      }
      v9 = (re::ProfilerConfig *)re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment((_WORD *)v124 + 4);
    }
    while (*((_QWORD *)&v124[0] + 1) != a5 || LOWORD(v124[1]) != 0xFFFF || WORD1(v124[1]) != 0xFFFF);
  }
  v28 = *(_QWORD *)(a3 + 8);
  v29 = *(re::EventBus **)(v28 + 288);
  if (v29)
  {
    updated = re::EventBus::subscriptionCountInternal<re::ecs2::Scene,REAnimationSkeletalPoseUpdateCompleteEvent>(*(_QWORD *)(v28 + 288), v28);
    v9 = (re::ProfilerConfig *)re::EventBus::subscriptionCountInternal<re::ecs2::Scene,REAnimationSkeletalPoseUpdateCompleteEvent>((uint64_t)v29, 0);
    if ((re::ProfilerConfig *)((char *)v9 + updated))
    {
      v31 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v28 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 24);
        if (v32)
        {
          v33 = *(uint64_t **)(v31 + 40);
          v34 = 8 * v32;
          do
          {
            v35 = *v33++;
            *(_BYTE *)(v35 + 3816) = 1;
            v34 -= 8;
          }
          while (v34);
        }
      }
      LODWORD(v124[0]) = *v121;
      Type = re::EventBus::getTypeId<REAnimationSkeletalPoseUpdateCompleteEvent>();
      re::EventBus::publish(v29, v28, Type, (uint64_t)v124, 4uLL, 0);
      v9 = (re::ProfilerConfig *)re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v28 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v9)
      {
        v37 = *((_QWORD *)v9 + 3);
        if (v37)
        {
          v38 = (uint64_t *)*((_QWORD *)v9 + 5);
          v122 = &v38[v37];
          do
          {
            v39 = *v38;
            if (*(_BYTE *)(*v38 + 3816) == 2)
            {
              v40 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v39 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v40)
              {
                v41 = v40;
                FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v39 + 3824, 0);
                if (FirstBitSet != -1)
                {
                  for (i = FirstBitSet;
                        i != -1;
                        i = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v39 + 3824, i + 1))
                  {
                    v45 = *(_QWORD *)(v39 + 3888);
                    if (v45 <= i)
                      goto LABEL_71;
                    v46 = (unint64_t *)(*(_QWORD *)(v39 + 3904) + 16 * i);
                    v48 = *v46;
                    v47 = v46[1];
                    v49 = *(_QWORD *)(v41 + 128);
                    if (v48 >= v49 && v48 + (v47 << 6) <= v49 + (*(_QWORD *)(v41 + 112) << 6))
                    {
                      v45 = *(_QWORD *)(v39 + 3928);
                      if (v45 <= i)
                        goto LABEL_72;
                      v51 = *(_QWORD *)(v39 + 3944);
                      if (v47 == *(_QWORD *)(v51 + 88 * i + 24))
                      {
                        v52 = v51 + 88 * i;
                        v53 = *(_QWORD *)(v52 + 80);
                        v54 = *(_QWORD *)(v53 + 72);
                        if (v54)
                        {
                          v55 = 0;
                          v56 = *(_QWORD *)(v53 + 80);
                          v57 = *(_QWORD *)(v52 + 32);
                          do
                          {
                            v58 = *(unsigned int *)(v56 + 4 * v55);
                            if (v54 <= v58)
                            {
                              if (v47 <= v55)
                                goto LABEL_69;
                              v93 = (float32x4_t *)(v57 + 48 * v55);
                              v91 = v93[2];
                              v91.i32[3] = 1.0;
                              v94 = v93[1].f32[0];
                              v95 = v93[1].f32[1];
                              v96 = v94 + v94;
                              v97 = v93[1].f32[2];
                              v98 = v93[1].f32[3];
                              v99 = (float)(v94 + v94) * v97;
                              v100 = (float)(v95 + v95) * v98;
                              v101 = v97 * (float)(v95 + v95);
                              v102 = (float)(v94 + v94) * v98;
                              v103 = v94 * (float)(v94 + v94);
                              v104 = v95 * (float)(v95 + v95);
                              v105.i32[3] = 0;
                              v105.f32[0] = v99 + v100;
                              v105.f32[1] = v101 - v102;
                              v105.f32[2] = 1.0 - (float)(v103 + v104);
                              v92 = vmulq_laneq_f32(v105, *v93, 2);
                              v106 = v96 * v95;
                              v107 = (float)(v97 + v97) * v98;
                              v108 = v97 * (float)(v97 + v97);
                              *(float *)&v109 = v101 + v102;
                              v110.f32[0] = v106 - v107;
                              v110.f32[1] = 1.0 - (float)(v103 + v108);
                              v110.i64[1] = v109;
                              v89 = vmulq_n_f32(v110, *(float *)vshrq_n_u64(*(uint64x2_t *)v93, 0x20uLL).i32);
                              v111 = v106 + v107;
                              v112.i32[3] = 0;
                              v112.f32[0] = 1.0 - (float)(v108 + v104);
                              v112.f32[1] = v111;
                              v112.f32[2] = v99 - v100;
                              v90 = vmulq_n_f32(v112, COERCE_FLOAT(*v93));
                            }
                            else
                            {
                              if (v47 <= v58)
                              {
                                re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *(unsigned int *)(v56 + 4 * v55), v47);
                                _os_crash();
                                __break(1u);
LABEL_69:
                                re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v55, v47);
                                _os_crash();
                                __break(1u);
LABEL_70:
                                re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v55, v47);
                                _os_crash();
                                __break(1u);
LABEL_71:
                                v126 = 0u;
                                v127 = 0u;
                                v125 = 0u;
                                memset(v124, 0, sizeof(v124));
                                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                *(_DWORD *)v128 = 136315906;
                                *(_QWORD *)&v128[4] = "operator[]";
                                *(_WORD *)&v128[12] = 1024;
                                *(_DWORD *)&v128[14] = 789;
                                *(_WORD *)&v128[18] = 2048;
                                *(_QWORD *)&v128[20] = i;
                                *(_WORD *)&v128[28] = 2048;
                                *(_QWORD *)&v128[30] = v45;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
LABEL_72:
                                v126 = 0u;
                                v127 = 0u;
                                v125 = 0u;
                                memset(v124, 0, sizeof(v124));
                                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                                *(_DWORD *)v128 = 136315906;
                                *(_QWORD *)&v128[4] = "operator[]";
                                *(_WORD *)&v128[12] = 1024;
                                *(_DWORD *)&v128[14] = 789;
                                *(_WORD *)&v128[18] = 2048;
                                *(_QWORD *)&v128[20] = i;
                                *(_WORD *)&v128[28] = 2048;
                                *(_QWORD *)&v128[30] = v45;
                                _os_log_send_and_compose_impl();
                                _os_crash_msg();
                                __break(1u);
                              }
                              if (v47 <= v55)
                                goto LABEL_70;
                              v59 = 0;
                              v60 = (float32x4_t *)(v57 + 48 * v55);
                              v61 = v60[1].f32[0];
                              v62 = v60[1].f32[1];
                              v63 = v60[1].f32[2];
                              v64 = v60[1].f32[3];
                              v65 = *v60;
                              v66 = v60[2];
                              v67 = (float32x4_t *)(v48 + (v58 << 6));
                              v68 = v61 + v61;
                              v69 = v62 + v62;
                              v70 = v63 + v63;
                              v71 = v61 * (float)(v61 + v61);
                              v72 = v62 * (float)(v62 + v62);
                              v73 = v63 * (float)(v63 + v63);
                              v74 = v68 * v62;
                              v75 = v68 * v63;
                              v76 = v69 * v63;
                              v77 = v68 * v64;
                              v78 = v69 * v64;
                              v79 = v70 * v64;
                              v80.i32[3] = 0;
                              v80.f32[0] = 1.0 - (float)(v72 + v73);
                              v80.f32[1] = v74 + v79;
                              v80.f32[2] = v75 - v78;
                              v81.i32[3] = 0;
                              v81.f32[0] = v74 - v79;
                              v81.f32[1] = 1.0 - (float)(v71 + v73);
                              v81.f32[2] = v76 + v77;
                              v82 = v76 - v77;
                              v83.i32[3] = 0;
                              v83.f32[0] = v75 + v78;
                              v83.f32[1] = v82;
                              v83.f32[2] = 1.0 - (float)(v71 + v72);
                              v66.i32[3] = 1.0;
                              v84 = vmulq_n_f32(v81, *(float *)vshrq_n_u64(*(uint64x2_t *)v60, 0x20uLL).i32);
                              v85 = *v67;
                              v86 = v67[1];
                              v87 = v67[2];
                              v88 = v67[3];
                              *(float32x4_t *)v128 = vmulq_n_f32(v80, COERCE_FLOAT(*v60));
                              *(float32x4_t *)&v128[16] = v84;
                              *(float32x4_t *)&v128[32] = vmulq_laneq_f32(v83, v65, 2);
                              v129 = v66;
                              do
                              {
                                v124[v59 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v85, COERCE_FLOAT(*(_OWORD *)&v128[v59])), v86, *(float32x2_t *)&v128[v59], 1), v87, *(float32x4_t *)&v128[v59], 2), v88, *(float32x4_t *)&v128[v59], 3);
                                v59 += 16;
                              }
                              while (v59 != 64);
                              v90 = (float32x4_t)v124[0];
                              v89 = (float32x4_t)v124[1];
                              v92 = v125;
                              v91 = v126;
                            }
                            v113 = (float32x4_t *)(v48 + (v55 << 6));
                            *v113 = v90;
                            v113[1] = v89;
                            v113[2] = v92;
                            v113[3] = v91;
                            ++v55;
                          }
                          while (v55 != v54);
                        }
                      }
                    }
                  }
                }
              }
            }
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v39 + 3824);
            *(_QWORD *)(v39 + 3864) = 0;
            *(_QWORD *)(v39 + 3888) = 0;
            ++*(_DWORD *)(v39 + 3896);
            v9 = re::DynamicArray<re::SkeletalPose>::clear((re::SkeletalPose *)(v39 + 3912));
            *(_BYTE *)(v39 + 3816) = 0;
            ++v38;
          }
          while (v38 != v122);
        }
      }
    }
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v9);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v115 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v116 = *(int64x2_t **)(v115 + 152);
    if (v116)
    {
      v117 = v116[472].u64[0];
      if (v117 >= v123)
        v117 = v123;
      v116[472].i64[0] = v117;
      v118 = v116[472].u64[1];
      if (v118 <= v123)
        v118 = v123;
      v116[472].i64[1] = v118;
      v119 = vdupq_n_s64(1uLL);
      v119.i64[0] = v123;
      v116[473] = vaddq_s64(v116[473], v119);
      *(_BYTE *)(v115 + 184) = 0;
    }
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::SkeletalPoseSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *WeakRetained;
  uint64_t v5;
  id *v6;
  unint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  re *isStatisticCollectionEnabled;
  uint64_t v13;
  int64x2_t *v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  _anonymous_namespace_ *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t FirstBitSet;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  uint64_t v50[2];
  _QWORD v51[2];
  _QWORD v52[2];
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD v60[3];
  uint64_t v61;

  v51[0] = a2;
  v51[1] = a3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v50);
  WeakRetained = (id *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40));
  if (v5)
  {
    v6 = WeakRetained;
    v7 = 0;
    v8 = 8 * v5;
    do
    {
      WeakRetained = (id *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        v9 = WeakRetained;
        v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v10)
          v11 = *(_QWORD *)(v10 + 24);
        else
          v11 = 0;
        v7 += v11;

      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    v7 = 0;
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)WeakRetained);
  if ((isStatisticCollectionEnabled & 1) != 0)
  {
    v13 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v14 = *(int64x2_t **)(v13 + 152);
    if (v14)
    {
      v15 = v14[436].u64[0];
      if (v15 >= v7)
        v15 = v7;
      v14[436].i64[0] = v15;
      v16 = v14[436].u64[1];
      if (v16 <= v7)
        v16 = v7;
      v14[436].i64[1] = v16;
      v17 = vdupq_n_s64(1uLL);
      v17.i64[0] = v7;
      v14[437] = vaddq_s64(v14[437], v17);
      *(_BYTE *)(v13 + 184) = 0;
    }
  }
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v18 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)&v57, (uint64_t *)(a1 + 320));
  v60[2] = *(_QWORD *)(a1 + 360);
  v53 = 1;
  v54 = 0;
  v55 = 0;
  v52[1] = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v52, 0);
  v53 += 2;
  v19 = *(_QWORD *)(a1 + 360);
  if ((v19 & 0x3F) != 0)
    v20 = (v19 >> 6) + 1;
  else
    v20 = v19 >> 6;
  v56 = *(_QWORD *)(a1 + 360);
  v61 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v52, v20, &v61);
  v21 = *(_DWORD *)(a1 + 336);
  if ((v21 & 1) != 0)
    v22 = (_QWORD *)(a1 + 344);
  else
    v22 = *(_QWORD **)(a1 + 352);
  v23 = *(_QWORD *)(a1 + 328);
  v24 = (uint64_t *)(a1 + 344);
  while (1)
  {
    v25 = a1 + 344;
    if ((v21 & 1) == 0)
      v25 = *(_QWORD *)(a1 + 352);
    if (v22 == (_QWORD *)(v25 + 8 * v23))
      break;
    *v22++ = 0;
    v21 = *(_DWORD *)(a1 + 336);
  }
  v26 = v60;
  if ((v59 & 1) == 0)
    v26 = (unint64_t *)v60[1];
  v27 = v58;
  if ((v58 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    v28 = 0;
    while (1)
    {
      v30 = *v26++;
      v29 = v30;
      if (v30)
        break;
      v28 -= 64;
      if (!--v27)
        goto LABEL_51;
    }
    v31 = __clz(__rbit64(v29));
    if (v31 + 1 != v28)
    {
      FirstBitSet = v31 - v28;
      do
      {
        v33 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 152, FirstBitSet);
        v34 = *(_QWORD *)(*v33 + 224);
        v35 = v33[3];
        v36 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v35);
        if (*(_DWORD *)(v36 + 40))
          v37 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 24))(v34, v51, v33, v35, v36, 0);
        else
          v37 = 0;
        v38 = v33[5];
        v39 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v38);
        if (*(_DWORD *)(v39 + 40))
          v37 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, v51, v33, v38, v39, 0);
        v40 = v33[6];
        v41 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v40);
        if (*(_DWORD *)(v41 + 40))
        {
          if (((v37 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, v51, v33, v40, v41, 0)) & 1) == 0)goto LABEL_49;
        }
        else if (!v37)
        {
LABEL_49:
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v52, FirstBitSet);
          goto LABEL_50;
        }
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v52, FirstBitSet);
LABEL_50:
        FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v57, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_51:
  re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 320, (uint64_t)v52);
  if (*(_BYTE *)(a1 + 384))
  {
    v42 = *(_QWORD *)(a1 + 328);
    v43 = *(_DWORD *)(a1 + 336);
    if (v42 >= 0xB)
    {
      if ((v43 & 1) == 0)
        v24 = *(uint64_t **)(a1 + 352);
      v44 = 8 * v42;
      while (!*v24)
      {
        ++v24;
        v44 -= 8;
        if (!v44)
          goto LABEL_67;
      }
      goto LABEL_65;
    }
    if ((v43 & 1) == 0)
      v24 = *(uint64_t **)(a1 + 352);
    if (v42)
    {
      v45 = 0;
      v46 = 8 * v42;
      do
      {
        v47 = *v24++;
        v45 |= v47;
        v46 -= 8;
      }
      while (v46);
      if (v45)
      {
LABEL_65:
        v48 = *(re::ecs2::System **)(a1 + 368);
        if (!*((_BYTE *)v48 + 86))
          re::ecs2::System::queueToRun(v48, 0.0);
      }
    }
  }
LABEL_67:
  if (v52[0] && (v53 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v52[0] + 40))();
  if (v57 && (v59 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v57 + 40))();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v50);
}

uint64_t re::ecs2::SkeletalPoseSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  uint64_t v16[2];
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v16);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v10 = v9 ? *(_QWORD *)(v9 + 24) : 0;
    v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      v12 = v11[436].u64[0];
      if (v12 >= v10)
        v12 = v10;
      v11[436].i64[0] = v12;
      v13 = v11[436].u64[1];
      if (v13 <= v10)
        v13 = v10;
      v11[436].i64[1] = v13;
      v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[437] = vaddq_s64(v11[437], v14);
      *(_BYTE *)(v8 + 184) = 0;
    }
  }
  if (re::internal::enableSignposts(0, 0))
  {
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    kdebug_trace();
  }
  re::ecs2::BasicComponentStates<re::ecs2::SkeletalPoseComponent>::updateForScene(a1 + 152, a2, (uint64_t)v17);
  if (re::internal::enableSignposts(0, 0))
  {
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    kdebug_trace();
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v16);
}

uint64_t *re::ecs2::allocInfo_SkeletalPoseComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254113DB0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254113DB0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113E90, 0);
    *(uint64_t *)((char *)&qword_254113EA0 + 6) = 0;
    qword_254113EA0 = 0;
    qword_254113EB0 = 0;
    qword_254113EB8 = 0xFFFFFFFFLL;
    qword_254113E90 = (uint64_t)&off_24ED7DAA8;
    qword_254113EC0 = (uint64_t)"SkeletalPoseComponent";
    dword_254113EC8 = 0;
    xmmword_254113ED0 = 0u;
    unk_254113EE0 = 0u;
    xmmword_254113EF0 = 0u;
    qword_254113F00 = 0;
    __cxa_guard_release(&qword_254113DB0);
  }
  return &qword_254113E90;
}

void re::ecs2::initInfo_SkeletalPoseComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x1C1B51CD3B030266;
  v18[1] = "SkeletalPoseComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_254113DB8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254113DB8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254113DF0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::SkeletalPose>>::get();
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "skeletalPoses";
      *(_QWORD *)(v10 + 16) = &qword_254113E10;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0x3800000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_254113DF8 = v10;
      v11 = re::introspectionAllocator((re *)v10);
      re::IntrospectionInfo<re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>::get();
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v11 + 32))(v11, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "modelSpaceTransforms";
      *(_QWORD *)(v12 + 16) = qword_254113E50;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x6000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254113E00 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "skeletalPoseDefinition";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254113E08 = v16;
      __cxa_guard_release(&qword_254113DB8);
    }
  }
  *((_QWORD *)this + 2) = 0xF7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254113DF0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalPoseComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalPoseComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalPoseComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalPoseComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

void re::IntrospectionInfo<re::DynamicArray<re::SkeletalPose>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_254113DE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254113DE0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254113E10);
    qword_254113E10 = (uint64_t)&off_24ED6C648;
    __cxa_guard_release(&qword_254113DE0);
  }
  if ((_MergedGlobals_314 & 1) == 0)
  {
    v1 = re::introspect_SkeletalPose((re::IntrospectionBase **)1);
    if ((_MergedGlobals_314 & 1) == 0)
    {
      v2 = v1;
      _MergedGlobals_314 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113E10, 0);
      qword_254113E20 = 0x2800000003;
      dword_254113E28 = v3;
      word_254113E2C = 0;
      *(_QWORD *)&xmmword_254113E30 = 0;
      *((_QWORD *)&xmmword_254113E30 + 1) = 0xFFFFFFFFLL;
      qword_254113E40 = v2;
      unk_254113E48 = 0;
      qword_254113E10 = (uint64_t)&off_24ED6C648;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_254113E10, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_254113E30 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  uint64_t *v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_254113DE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254113DE8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_254113E50);
    qword_254113E50[0] = (uint64_t)&off_24ED6C6E0;
    __cxa_guard_release(&qword_254113DE8);
  }
  if ((byte_254113DA9 & 1) == 0)
  {
    v1 = re::IntrospectionInfo<re::DynamicArray<re::Matrix4x4<float>>>::get(1);
    if ((byte_254113DA9 & 1) == 0)
    {
      v2 = v1;
      byte_254113DA9 = 1;
      v3 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_254113E50, 0);
      unk_254113E60 = 0x2800000003;
      unk_254113E68 = v3;
      unk_254113E6C = 0;
      *(_QWORD *)&xmmword_254113E70 = 0;
      *((_QWORD *)&xmmword_254113E70 + 1) = 0xFFFFFFFFLL;
      unk_254113E80 = v2;
      unk_254113E88 = 0;
      qword_254113E50[0] = (uint64_t)&off_24ED6C6E0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)qword_254113E50, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *((_OWORD *)v2 + 2);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_254113E70 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

_QWORD *re::internal::defaultConstruct<re::ecs2::SkeletalPoseComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::SkeletalPoseComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::SkeletalPoseComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SkeletalPoseComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SkeletalPoseComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseComponent>, this);
}

uint64_t *re::ecs2::allocInfo_SkeletalPosePreparationSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254113DC0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254113DC0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113F08, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254113F18 = 0;
    qword_254113F28 = 0;
    qword_254113F30 = 0xFFFFFFFFLL;
    qword_254113F08 = (uint64_t)&off_24ED7DAA8;
    qword_254113F38 = (uint64_t)"SkeletalPosePreparationSystem";
    dword_254113F40 = 0;
    xmmword_254113F48 = 0u;
    unk_254113F58 = 0u;
    xmmword_254113F68 = 0u;
    qword_254113F78 = 0;
    __cxa_guard_release(&qword_254113DC0);
  }
  return &qword_254113F08;
}

void re::ecs2::initInfo_SkeletalPosePreparationSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x6B6CEF3DEADF8BB8;
  v5[1] = "SkeletalPosePreparationSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x17800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_SkeletalPosePreparationSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalPosePreparationSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalPosePreparationSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::SkeletalPosePreparationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::SkeletalPosePreparationSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalPosePreparationSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalPosePreparationSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::SkeletalPosePreparationSystem *re::internal::defaultConstruct<re::ecs2::SkeletalPosePreparationSystem>(int a1, int a2, re::ecs2::SkeletalPosePreparationSystem *this)
{
  return re::ecs2::SkeletalPosePreparationSystem::SkeletalPosePreparationSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::SkeletalPosePreparationSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;

  a3[43] = &off_24ED6C2C0;
  v4 = a3[44];
  if (v4)
  {
    if (a3[45])
    {
      v5 = a3 + 45;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[46]);
      *v5 = 0;
      a3[46] = 0;
    }
    a3[44] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 13);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SkeletalPosePreparationSystem>(_QWORD *a1)
{
  uint64_t v2;

  a1[43] = &off_24ED6C2C0;
  v2 = a1[44];
  if (v2)
  {
    if (a1[45])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[46]);
      a1[45] = 0;
      a1[46] = 0;
    }
    a1[44] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 13);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkeletalPosePreparationSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPosePreparationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPosePreparationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPosePreparationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPosePreparationSystem>, this);
}

uint64_t *re::ecs2::allocInfo_SkeletalPoseSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254113DC8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254113DC8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254113F80, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254113F90 = 0;
    qword_254113FA0 = 0;
    qword_254113FA8 = 0xFFFFFFFFLL;
    qword_254113F80 = (uint64_t)&off_24ED7DAA8;
    qword_254113FB0 = (uint64_t)"SkeletalPoseSystem";
    dword_254113FB8 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254113FF0 = 0;
    __cxa_guard_release(&qword_254113DC8);
  }
  return &qword_254113F80;
}

void re::ecs2::initInfo_SkeletalPoseSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x404DC95C0462D372;
  v5[1] = "SkeletalPoseSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1B000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_SkeletalPoseSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SkeletalPoseSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SkeletalPoseSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::SkeletalPoseSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::SkeletalPoseSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SkeletalPoseSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SkeletalPoseSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::SkeletalPoseSystem *re::internal::defaultConstruct<re::ecs2::SkeletalPoseSystem>(int a1, int a2, re::ecs2::SkeletalPoseSystem *this)
{
  return re::ecs2::SkeletalPoseSystem::SkeletalPoseSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::SkeletalPoseSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD *v5;

  a3[49] = (uint64_t)&off_24ED6C300;
  v4 = a3[51];
  if (v4)
  {
    if (a3[52])
    {
      v5 = a3 + 52;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3[53]);
      *v5 = 0;
      a3[53] = 0;
    }
    a3[51] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 19);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a3 + 13);
  *a3 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::SkeletalPoseSystem>(_QWORD *a1)
{
  uint64_t v2;

  a1[49] = &off_24ED6C300;
  v2 = a1[51];
  if (v2)
  {
    if (a1[52])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[53]);
      a1[52] = 0;
      a1[53] = 0;
    }
    a1[51] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 19);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 13);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SkeletalPoseSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseSystem>, this);
}

uint64_t re::ecs2::SkeletalPosePreparationStateImpl::dependsOnComponents(re::ecs2::SkeletalPosePreparationStateImpl *this)
{
  return *((_QWORD *)this + 3);
}

void re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalPoseComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::Component *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v3 = *(re::ecs2::Component **)(a3 + 232);
  if (v3)
  {
    v5 = 24;
    v6 = 0xFFFFFFFFLL;
    do
    {
      v7 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v5), v3);
      if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
      {
        v10 = v7;
        v6 = v8;
        goto LABEL_11;
      }
      v5 += 8;
    }
    while (v5 != 56);
    v10 = -1;
LABEL_11:
    re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v10, v6);
  }
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalPoseComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::SkeletalPoseComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::SkeletalPosePreparationSystem::~SkeletalPosePreparationSystem(re::ecs2::SkeletalPosePreparationSystem *this)
{
  uint64_t v2;

  *((_QWORD *)this + 43) = &off_24ED6C2C0;
  v2 = *((_QWORD *)this + 44);
  if (v2)
  {
    if (*((_QWORD *)this + 45))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 46));
      *((_QWORD *)this + 45) = 0;
      *((_QWORD *)this + 46) = 0;
    }
    *((_QWORD *)this + 44) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *((_QWORD *)this + 43) = &off_24ED6C2C0;
  v2 = *((_QWORD *)this + 44);
  if (v2)
  {
    if (*((_QWORD *)this + 45))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 46));
      *((_QWORD *)this + 45) = 0;
      *((_QWORD *)this + 46) = 0;
    }
    *((_QWORD *)this + 44) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::SkeletalPosePreparationSystem::typeInfo(re::ecs2::SkeletalPosePreparationSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPosePreparationSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPosePreparationSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPosePreparationSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPosePreparationSystem>, 0);
}

uint64_t re::ecs2::SkeletalPoseComponentStateImpl::dependsOnComponents(re::ecs2::SkeletalPoseComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

void re::ecs2::SkeletalPoseSystem::~SkeletalPoseSystem(re::ecs2::SkeletalPoseSystem *this)
{
  uint64_t v2;

  *((_QWORD *)this + 49) = &off_24ED6C300;
  v2 = *((_QWORD *)this + 51);
  if (v2)
  {
    if (*((_QWORD *)this + 52))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 53));
      *((_QWORD *)this + 52) = 0;
      *((_QWORD *)this + 53) = 0;
    }
    *((_QWORD *)this + 51) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 19);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *((_QWORD *)this + 49) = &off_24ED6C300;
  v2 = *((_QWORD *)this + 51);
  if (v2)
  {
    if (*((_QWORD *)this + 52))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 53));
      *((_QWORD *)this + 52) = 0;
      *((_QWORD *)this + 53) = 0;
    }
    *((_QWORD *)this + 51) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 19);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::SkeletalPoseSystem::typeInfo(re::ecs2::SkeletalPoseSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SkeletalPoseSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SkeletalPoseSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SkeletalPoseSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SkeletalPoseSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::SkeletalPoseSystem,REEventHandlerResult (re::ecs2::SkeletalPoseSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::SkeletalPoseSystem,REEventHandlerResult (re::ecs2::SkeletalPoseSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::SkeletalPoseSystem,REEventHandlerResult (re::ecs2::SkeletalPoseSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6C490;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::SkeletalPoseSystem,REEventHandlerResult (re::ecs2::SkeletalPoseSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6C490;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::SkeletalPoseSystem,REEventHandlerResult (re::ecs2::SkeletalPoseSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 16 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 16 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 16 * v8 + 8) = v11 | 0x80000000;
  v12 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * v8 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v8) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * v8 + 12) = *a5;
  *(_DWORD *)(v12 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<unsigned int,unsigned int,re::internal::ValueAsKey<unsigned int>,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 12, *(_QWORD *)&v13[16] + v10 + 12);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 16;
        }
        while (v11 < v9);
      }
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED6C4E8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED6C540;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED6C598;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED6C5F0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED6C4E8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED6C540;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED6C598;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED6C5F0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 232);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 232);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 232);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 232);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6C4E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6C4E8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6C540;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6C540;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6C598;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6C598;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6C5F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6C5F0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::SkeletalPoseComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::EventBus::subscriptionCountInternal<re::ecs2::Scene,REAnimationSkeletalPoseUpdateCompleteEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];

  v9[0] = re::EventBus::getTypeId<REAnimationSkeletalPoseUpdateCompleteEvent>();
  v4 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(a1 + 24), v9);
  if (v4 == -1)
    return 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48 * v4 + 8);
  if (!v5)
    return 0;
  if (!a2)
  {
    v7 = v5 + 88;
    return *(_QWORD *)(v7 + 120);
  }
  v9[0] = a2;
  v9[1] = 0;
  v6 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(v5 + 216), v9);
  if (v6 == -1)
    return 0;
  v7 = *(_QWORD *)(v5 + 224) + 144 * v6 + 16;
  return *(_QWORD *)(v7 + 120);
}

uint64_t re::EventBus::getTypeId<REAnimationSkeletalPoseUpdateCompleteEvent>()
{
  unsigned __int8 v0;
  const char *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254113DD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254113DD8))
  {
    qword_254113DD0 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"42REAnimationSkeletalPoseUpdateCompleteEvent" & 0x7FFFFFFFFFFFFFFFLL), v2);
    __cxa_guard_release(&qword_254113DD8);
  }
  return qword_254113DD0;
}

_QWORD *re::IntrospectionDynamicArray<re::SkeletalPose>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::SkeletalPose>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::SkeletalPose>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPose>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::SkeletalPose>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::SkeletalPose>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::SkeletalPose>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::SkeletalPose>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::SkeletalPose>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::SkeletalPose>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::SkeletalPose>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::SkeletalPose>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::SkeletalPose>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  StringID v10[4];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  *(_QWORD *)&v10[0].var0 = 0;
  memset(&v10[1], 0, 48);
  v10[0].var1 = (char *)&str_110;
  v13 = 0;
  re::DynamicArray<re::SkeletalPose>::add(this, v10);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 88 * *((_QWORD *)this + 2) - 88);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPose>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::SkeletalPose>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 88 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 88 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::SkeletalPose>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::SkeletalPose>::clear((re::SkeletalPose *)a1);
  }
  else
  {
    re::DynamicArray<re::SkeletalPose>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::SkeletalPose>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::SkeletalPose>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 88 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 88;
        v11 -= 88;
      }
      while (v11);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 88 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 88 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::SkeletalPose>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  re::IntrospectionBase *v17;

  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 >= v8)
  {
    v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v8;
        v12 = v8 == 0;
        v13 = 8;
        if (!v12)
          v13 = v11;
        if (v13 <= v10)
          v14 = v10;
        else
          v14 = v13;
        re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v9 = *(_QWORD *)(a4 + 16);
  }
  v15 = *(_QWORD *)(a4 + 32) + 40 * v9;
  *(_QWORD *)(v15 + 32) = 0;
  *(_DWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)v15 = 0;
  *(_DWORD *)(v15 + 24) = 1;
  v16 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  v17 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 40 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 40 * v8;
      v10 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      do
      {
        v11 = *(v10 - 4);
        if (v11)
        {
          if (*v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
          *v10 = 0;
          *(v10 - 3) = 0;
          *(v10 - 2) = 0;
          *(v10 - 4) = 0;
          ++*((_DWORD *)v10 - 2);
        }
        v10 += 5;
        v9 -= 40;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 40 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 40;
        v15 -= 40;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 40 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<re::Matrix4x4<float>>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::make::shared::unsafelyInplace<re::ecs2::SkeletalPoseComponent>(_QWORD *a1)
{
  bzero(a1, 0xF70uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = &off_24ED44098;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *((_DWORD *)a1 + 54) = 0;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_DWORD *)a1 + 64) = 0;
  *(_OWORD *)(a1 + 33) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  *((_DWORD *)a1 + 74) = 0;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_DWORD *)a1 + 84) = 0;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *((_DWORD *)a1 + 94) = 0;
  *((_DWORD *)a1 + 104) = 0;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_DWORD *)a1 + 114) = 0;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 55) = 0u;
  *((_DWORD *)a1 + 30) = 0;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *((_DWORD *)a1 + 44) = 0;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_DWORD *)a1 + 20) = 0;
  a1[60] = -1;
  *((_DWORD *)a1 + 186) = 0;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 91) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *(_OWORD *)(a1 + 87) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 69) = 0u;
  *(_OWORD *)(a1 + 71) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  *(_OWORD *)(a1 + 61) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  a1[94] = -1;
  a1[102] = 0;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(a1 + 103));
  *((_OWORD *)a1 + 239) = 0u;
  a1[474] = 0;
  *(_OWORD *)(a1 + 475) = 0u;
  *((_BYTE *)a1 + 3816) = 0;
  *((_DWORD *)a1 + 960) = 1;
  a1[493] = 0;
  *(_OWORD *)(a1 + 481) = 0u;
  *(_OWORD *)(a1 + 483) = 0u;
  *(_OWORD *)(a1 + 485) = 0u;
  *((_DWORD *)a1 + 974) = 0;
  *((_OWORD *)a1 + 244) = 0u;
  *((_OWORD *)a1 + 245) = 0u;
  *((_DWORD *)a1 + 984) = 0;
  return a1;
}

void re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderRaw>,re::SkeletalPose>(const char **a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v16 = 0;
  if (re::snapshot::DecoderRaw::beginArray((re::snapshot::DecoderRaw *)a1, &v16))
  {
    v4 = v16;
    if (v16 == -1 || a2[1] >= v16)
    {
      v8 = --v16;
      if (!v4)
      {
        v6 = 1;
        LODWORD(v7) = 1;
LABEL_9:
        if (v6 != v7)
          re::snapshot::Decoder::error(a1, "count mismatch: expected %zu, got %d", v4, v7 - 1);
        return;
      }
    }
    else
    {
      re::DynamicArray<re::SkeletalPose>::setCapacity(a2, v16);
      v8 = v4 - 1;
      v16 = v4 - 1;
    }
    v6 = v4 + 1;
    v7 = 1;
    do
    {
      if (v4 != -1 && v6 > v7)
      {
        re::DynamicArray<re::SkeletalPose>::resize((uint64_t)a2, v7);
        v9 = a2[4];
        v10 = a2[2];
        if ((v11 & 1) == 0)
        {
          v14 = a2[2];
          v15 = a2[4];
          v10 = v14;
          v9 = v15;
          if (v13)
          {
            re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
            v10 = v14;
            v9 = v15;
          }
        }
        re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t *)a1, (_BYTE *)(v9 + 88 * v10 - 88), re::introspect<re::SkeletalPose>(void)::info);
        v8 = v16;
      }
      v12 = v8;
      ++v7;
      v16 = --v8;
    }
    while (v12);
    goto LABEL_9;
  }
}

uint64_t *re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderRaw>,re::Matrix4x4<float>>(re::snapshot::Decoder *this, uint64_t a2)
{
  size_t *v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  size_t v8;
  uint64_t *result;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v14 = 0;
  v4 = (size_t *)*((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3) - (_QWORD)v4;
  if (v5 >= 8)
  {
    v8 = *v4;
    v6 = v4 + 1;
    v7 = v8;
    *((_QWORD *)this + 2) = v6;
    if ((v8 & 0x3F) != 0)
    {
      *((_QWORD *)this + 2) = (char *)v6 + v7;
      return re::snapshot::Decoder::error((const char **)this, "Bad data: %zu bytes, expected multiple of %zu");
    }
    else
    {
      re::DynamicArray<re::Matrix4x4<float>>::resize(a2, v7 >> 6);
      return (uint64_t *)re::snapshot::Decoder::readRaw(this, *(void **)(a2 + 32), v7);
    }
  }
  re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v5);
  result = (uint64_t *)re::snapshot::DecoderRaw::beginArray(this, &v14);
  if (!(_DWORD)result)
    return result;
  v10 = v14;
  if (v14 != -1 && *(_QWORD *)(a2 + 8) < v14)
  {
    result = re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)a2, v14);
    goto LABEL_13;
  }
  if (v14)
  {
LABEL_13:
    v12 = v10 + 1;
    v13 = 1;
    do
    {
      if (v10 != -1 && v12 > v13)
      {
        re::DynamicArray<re::Matrix4x4<float>>::resize(a2, v13);
        result = re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderRaw>,re::Vector4<float>,4ul>((uint64_t *)this, (_OWORD *)(*(_QWORD *)(a2 + 32) + (*(_QWORD *)(a2 + 16) << 6) - 64));
        *((_DWORD *)this + 8) = 0;
      }
      ++v13;
    }
    while (v13 - v10 != 1);
    goto LABEL_18;
  }
  v12 = 1;
  LODWORD(v13) = 1;
LABEL_18:
  if (v12 != v13)
    return re::snapshot::Decoder::error((const char **)this, "count mismatch: expected %zu, got %d");
  return result;
}

BOOL re::snapshot::Decoder::readRaw(re::snapshot::Decoder *this, void *__dst, size_t __len)
{
  char *v6;
  size_t v7;

  v6 = (char *)*((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3) - (_QWORD)v6;
  if (v7 < __len)
  {
    re::snapshot::Decoder::error((const char **)this, "overrun: attempted to read %zu bytes, only %zu remaining", __len, v7);
  }
  else
  {
    if (__len)
    {
      memmove(__dst, v6, __len);
      v6 = (char *)*((_QWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = &v6[__len];
  }
  return v7 >= __len;
}

uint64_t *re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderOPACK>,re::SkeletalPose>(re::snapshot::DecoderOPACK *a1, _QWORD *a2)
{
  uint64_t *result;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v17 = 0;
  result = (uint64_t *)re::snapshot::DecoderOPACK::beginArray(a1, &v17);
  if ((_DWORD)result)
  {
    v5 = v17;
    if (v17 != -1 && a2[1] < v17)
      re::DynamicArray<re::SkeletalPose>::setCapacity(a2, v17);
    v7 = v5 + 1;
    result = (uint64_t *)re::snapshot::DecoderOPACK::endArray(a1, &v17);
    v8 = 1;
    if ((result & 1) == 0)
    {
      do
      {
        if (v5 == -1 || v7 <= v8)
        {
          v12 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
          if ((unint64_t)v12 >= *((_QWORD *)a1 + 3))
          {
            v13 = 0;
          }
          else
          {
            *((_QWORD *)a1 + 2) = v12 + 1;
            v13 = *v12;
          }
          re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v13);
        }
        else
        {
          re::DynamicArray<re::SkeletalPose>::resize((uint64_t)a2, v8);
          v9 = a2[4];
          v10 = a2[2];
          if ((v11 & 1) == 0)
          {
            v15 = a2[2];
            v16 = a2[4];
            v10 = v15;
            v9 = v16;
            if (v14)
            {
              re::introspect<re::SkeletalPose>(void)::info = re::introspect_SkeletalPose(0);
              v10 = v15;
              v9 = v16;
            }
          }
          re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t *)a1, (float *)(v9 + 88 * v10 - 88), re::introspect<re::SkeletalPose>(void)::info);
        }
        ++v8;
        result = (uint64_t *)re::snapshot::DecoderOPACK::endArray(a1, &v17);
      }
      while (!(_DWORD)result);
    }
    if (v7 != v8)
      return re::snapshot::Decoder::error((const char **)a1, "count mismatch: expected %zu, got %d", v5, (int)v8 - 1);
  }
  return result;
}

uint64_t *re::snapshot::operator>><re::snapshot::Reader<re::snapshot::DecoderOPACK>,re::DynamicArray<re::Matrix4x4<float>>>(re::snapshot::DecoderOPACK *a1, _QWORD *a2)
{
  uint64_t *result;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unsigned __int8 *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;

  v31 = 0;
  result = (uint64_t *)re::snapshot::DecoderOPACK::beginArray(a1, &v31);
  if ((_DWORD)result)
  {
    v5 = a2;
    v6 = v31;
    v30 = v5;
    v7 = v5[1];
    if (v31 != -1 && v7 < v31)
      re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity(v30, v31);
    v9 = v6 + 1;
    result = (uint64_t *)re::snapshot::DecoderOPACK::endArray(a1, &v31);
    v29 = v6;
    v10 = 1;
    if ((result & 1) == 0)
    {
      v11 = v30;
      do
      {
        if (v9 && v9 > v10)
        {
          re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize(v11, v10);
          v12 = v11[4];
          v13 = v11[2] - 1;
          v14 = v12 + 40 * v13;
          v32 = 0;
          if (re::snapshot::DecoderOPACK::beginData(a1, &v32, 1))
          {
            v15 = v32;
            if ((v32 & 0x3F) != 0)
            {
              *((_QWORD *)a1 + 2) += v32;
              re::snapshot::Decoder::error((const char **)a1, "Bad data: %zu bytes, expected multiple of %zu");
            }
            else
            {
              re::DynamicArray<re::Matrix4x4<float>>::resize(v12 + 40 * v13, v32 >> 6);
              re::snapshot::Decoder::readRaw(a1, *(void **)(v12 + 40 * v13 + 32), v15);
            }
          }
          else if (re::snapshot::DecoderOPACK::beginArray(a1, &v32))
          {
            v18 = v32;
            if (v32 != -1 && *(_QWORD *)(v12 + 40 * v13 + 8) < v32)
              re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)(v12 + 40 * v13), v32);
            v19 = v18 + 1;
            if (re::snapshot::DecoderOPACK::endArray(a1, &v32))
            {
              LODWORD(v20) = 1;
            }
            else
            {
              v22 = v12 + 40 * v13;
              v23 = (uint64_t *)(v22 + 32);
              v24 = (uint64_t *)(v22 + 16);
              v20 = 1;
              do
              {
                if (v19 && v19 > v20)
                {
                  re::DynamicArray<re::Matrix4x4<float>>::resize(v14, v20);
                  v25 = *v23;
                  v26 = *v24;
                  if (re::snapshot::DecoderOPACK::beginObject(a1, 0))
                  {
                    re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,re::Vector4<float> [4]>((uint64_t)a1, (_OWORD *)(v25 + (v26 << 6) - 64));
                    re::snapshot::DecoderOPACK::endObject((uint64_t *)a1, 0);
                  }
                }
                else
                {
                  v27 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
                  if ((unint64_t)v27 >= *((_QWORD *)a1 + 3))
                  {
                    v28 = 0;
                  }
                  else
                  {
                    *((_QWORD *)a1 + 2) = v27 + 1;
                    v28 = *v27;
                  }
                  re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v28);
                }
                ++v20;
              }
              while (!re::snapshot::DecoderOPACK::endArray(a1, &v32));
            }
            v21 = v19 == v20;
            v11 = v30;
            if (!v21)
              re::snapshot::Decoder::error((const char **)a1, "count mismatch: expected %zu, got %d");
          }
        }
        else
        {
          v16 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
          if ((unint64_t)v16 >= *((_QWORD *)a1 + 3))
          {
            v17 = 0;
          }
          else
          {
            *((_QWORD *)a1 + 2) = v16 + 1;
            v17 = *v16;
          }
          re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v17);
        }
        ++v10;
        result = (uint64_t *)re::snapshot::DecoderOPACK::endArray(a1, &v31);
      }
      while (!(_DWORD)result);
    }
    if (v9 != v10)
      return re::snapshot::Decoder::error((const char **)a1, "count mismatch: expected %zu, got %d", v29, (int)v10 - 1);
  }
  return result;
}

unsigned int *re::snapshot::operator<<<re::snapshot::Writer<re::snapshot::EncoderOPACK>,re::DynamicArray<re::Matrix4x4<float>>>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 16);
  re::snapshot::EncoderOPACK::beginArray((unsigned int *)a1, v4);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 32);
    v7 = v6 + 40 * v5;
    do
    {
      v8 = *(_QWORD *)(v6 + 16);
      if ((*(_BYTE *)(a1 + 64) & 4) != 0)
      {
        re::snapshot::EncoderOPACK::beginData((unsigned int *)a1, v8 << 6, v8 << 6);
        re::snapshot::Encoder::writeRaw<true>((unsigned int *)a1, *(void **)(v6 + 32), *(_QWORD *)(v6 + 16) << 6);
      }
      else
      {
        re::snapshot::EncoderOPACK::beginArray((unsigned int *)a1, *(_QWORD *)(v6 + 16));
        v9 = *(_QWORD *)(v6 + 16);
        if (v9)
        {
          v10 = *(_QWORD *)(v6 + 32);
          v11 = v9 << 6;
          do
          {
            re::snapshot::EncoderOPACK::beginObject((unsigned int *)a1);
            re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,re::Vector4<float> [4]>((re::snapshot::EncoderOPACK *)a1, v10);
            re::snapshot::EncoderOPACK::endObject((unsigned int *)a1);
            v10 += 64;
            v11 -= 64;
          }
          while (v11);
        }
        re::snapshot::EncoderOPACK::endArray((unsigned int *)a1, v8);
      }
      v6 += 40;
    }
    while (v6 != v7);
  }
  return re::snapshot::EncoderOPACK::endArray((unsigned int *)a1, v4);
}

id re::internal::defaultRetain<re::ecs2::SkeletalPosePreparationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SkeletalPosePreparationSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::SkeletalPoseSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SkeletalPoseSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_RemoteEffectsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_315);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_315))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114010, 0);
    *(uint64_t *)((char *)&qword_254114020 + 6) = 0;
    qword_254114020 = 0;
    qword_254114030 = 0;
    qword_254114038 = 0xFFFFFFFFLL;
    qword_254114010 = (uint64_t)&off_24ED7DAA8;
    qword_254114040 = (uint64_t)"RemoteEffectsComponent";
    dword_254114048 = 0;
    *(_OWORD *)&algn_25411404C[4] = 0u;
    *(_OWORD *)&algn_25411404C[20] = 0u;
    *(_OWORD *)&algn_25411404C[36] = 0u;
    qword_254114080 = 0;
    __cxa_guard_release(&_MergedGlobals_315);
  }
  return &qword_254114010;
}

void re::ecs2::initInfo_RemoteEffectsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x8681CCD58A6CC542;
  v10[1] = "RemoteEffectsComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254114008);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254114008);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254114000 = v8;
      __cxa_guard_release(&qword_254114008);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254114000;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RemoteEffectsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RemoteEffectsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RemoteEffectsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RemoteEffectsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

double re::internal::defaultConstruct<re::ecs2::RemoteEffectsComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::RemoteEffectsComponent>(a3);
}

void re::internal::defaultDestruct<re::ecs2::RemoteEffectsComponent>(int a1, int a2, re::ecs2::RemoteEffectsComponent *this)
{
  re::ecs2::RemoteEffectsComponent::~RemoteEffectsComponent(this);
}

void re::ecs2::RemoteEffectsComponent::~RemoteEffectsComponent(re::ecs2::RemoteEffectsComponent *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::RemoteEffectsComponent::~RemoteEffectsComponent(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::WriteOptional<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v4 = a3;
  result = RESyncBitWriterWriteBool();
  if (v4)
    return MEMORY[0x227691F24](a1, v6, 8);
  return result;
}

uint64_t re::ecs2::ReadOptional<double>()
{
  RESyncBitReaderReadBool();
  return 0;
}

uint64_t re::ecs2::readFromReaderAndWriteToWriter(uint64_t a1, uint64_t a2)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  char v17;
  char v18;

  v18 = 1;
  RESyncBitReaderReadBool();
  RESyncBitWriterWriteBool();
  v17 = 1;
  RESyncBitReaderReadBool();
  RESyncBitWriterWriteBool();
  v16 = 0;
  RESyncBitReaderReadUInt32();
  RESyncBitWriterWriteUInt32();
  __asm { FMOV            V0.2S, #1.0 }
  v13 = _D0;
  v14 = 1065353216;
  v15 = 0;
  RESyncBitReaderReadData();
  MEMORY[0x227691F24](a2, &v13, 16);
  RESyncBitReaderReadFloat();
  RESyncBitWriterWriteFloat();
  v8 = re::ecs2::ReadOptional<double>();
  re::ecs2::WriteOptional<double>(a2, v8, v9);
  v10 = re::ecs2::ReadOptional<double>();
  re::ecs2::WriteOptional<double>(a2, v10, v11);
  RESyncBitReaderReadBool();
  RESyncBitWriterWriteBool();
  RESyncBitReaderReadUInt8();
  RESyncBitWriterWriteUInt8();
  RESyncBitReaderReadUInt32();
  return RESyncBitWriterWriteUInt32();
}

uint64_t re::ecs2::RemoteEffectsComponent::makeSyncInfo(re::ecs2::RemoteEffectsComponent *this)
{
  uint64_t v1;

  v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetDebugName();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  return v1;
}

uint64_t ___ZN2re4ecs222RemoteEffectsComponent12makeSyncInfoEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  RESyncBitWriterWriteBool();
  RESyncBitWriterWriteBool();
  RESyncBitWriterWriteUInt32();
  MEMORY[0x227691F24](a2, a3 + 6, 16);
  RESyncBitWriterWriteFloat();
  re::ecs2::WriteOptional<double>(a2, a3[9], a3[10]);
  re::ecs2::WriteOptional<double>(a2, a3[11], a3[12]);
  RESyncBitWriterWriteBool();
  RESyncBitWriterWriteUInt8();
  RESyncBitWriterWriteUInt32();
  return 1;
}

uint64_t ___ZN2re4ecs222RemoteEffectsComponent12makeSyncInfoEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v9;
  char v10;
  uint64_t v12;

  RESyncBitReaderReadBool();
  *(_BYTE *)(a3 + 45) = 1;
  RESyncBitReaderReadBool();
  *(_BYTE *)(a3 + 46) = 0;
  RESyncBitReaderReadUInt32();
  *(_DWORD *)(a3 + 40) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v12 = _D0;
  RESyncBitReaderReadData();
  *(_QWORD *)(a3 + 48) = v12;
  *(_DWORD *)(a3 + 56) = 1065353216;
  *(_BYTE *)(a3 + 60) = 0;
  RESyncBitReaderReadFloat();
  *(_DWORD *)(a3 + 64) = 1065353216;
  *(_QWORD *)(a3 + 72) = re::ecs2::ReadOptional<double>();
  *(_BYTE *)(a3 + 80) = v9;
  *(_QWORD *)(a3 + 88) = re::ecs2::ReadOptional<double>();
  *(_BYTE *)(a3 + 96) = v10;
  RESyncBitReaderReadBool();
  *(_BYTE *)(a3 + 47) = 0;
  RESyncBitReaderReadUInt8();
  *(_BYTE *)(a3 + 44) = 0;
  RESyncBitReaderReadUInt32();
  *(_DWORD *)(a3 + 104) = 0;
  return 1;
}

uint64_t ___ZN2re4ecs222RemoteEffectsComponent12makeSyncInfoEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::ecs2::readFromReaderAndWriteToWriter(a2, a3);
}

uint64_t ___ZN2re4ecs222RemoteEffectsComponent12makeSyncInfoEv_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::ecs2::readFromReaderAndWriteToWriter(a2, a3);
  return RESyncBitReaderIsOverflow() ^ 1;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::initComponentType(uint64_t a1)
{
  unsigned __int8 v2;
  re *v3;
  uint64_t v4;
  uint64_t *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  const char *v8;
  re::ecs2::ComponentTypeRegistry *v9;
  char *v10;
  uint64_t result;
  StringID v12;
  _BYTE v13[8];
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::RemoteEffectsComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsComponent>, 0);
  }
  re::getPrettyTypeName((re *)re::introspect<re::ecs2::RemoteEffectsComponent>(void)::info, (const re::IntrospectionBase *)&v15);
  v3 = (re *)re::DynamicString::rfind((uint64_t)&v15, "Component", v13);
  if (v13[0])
  {
    v4 = (v16[0] & 1) != 0 ? v16[0] >> 1 : LOBYTE(v16[0]) >> 1;
    if (v14 == v4 - 9)
    {
      re::DynamicString::substr((re::DynamicString *)&v15, 0, v14, (re::DynamicString *)&v12);
      re::DynamicString::operator=((re::DynamicString *)&v15, (re::DynamicString *)&v12);
      v3 = *(re **)&v12.var0;
      if (*(_QWORD *)&v12.var0)
      {
        if (((uint64_t)v12.var1 & 1) != 0)
          v3 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v12.var0 + 40))();
      }
    }
  }
  v5 = re::globalAllocators(v3);
  v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 80, 8);
  v7 = v6;
  if ((v16[0] & 1) != 0)
    v8 = (const char *)v16[1];
  else
    v8 = (char *)v16 + 1;
  *(_QWORD *)&v12.var0 = 0;
  v12.var1 = (char *)&str_110;
  re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::ComponentType((uint64_t)v7, &v12, a1, 2);
  re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType = v7;
  re::StringID::destroyString((re::StringID *)&v12);
  v10 = re::ecs2::ComponentTypeRegistry::instance(v9);
  re::ecs2::ComponentTypeRegistry::add((os_unfair_lock_s *)v10, (re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  result = v15;
  if (v15)
  {
    if ((v16[0] & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
  }
  return result;
}

uint64_t re::ecs2::RemoteEffectsComponent::clone(re::ecs2::RemoteEffectsComponent *this, const Component *a2)
{
  uint64_t v3;
  const __CFArray *v4;
  const __CFArray *v5;
  const __CFAllocator *Default;
  CFArrayRef Copy;
  uint64_t v9;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                + 32))(&v9);
  v3 = v9;
  v4 = (const __CFArray *)*((_QWORD *)this + 4);
  v5 = *(const __CFArray **)(v9 + 32);
  if (v5 != v4)
  {
    if (v5)
      CFRelease(v5);
    if (v4)
    {
      Default = CFAllocatorGetDefault();
      Copy = CFArrayCreateCopy(Default, v4);
    }
    else
    {
      Copy = 0;
    }
    *(_QWORD *)(v3 + 32) = Copy;
  }
  return v3;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double re::make::shared::unsafelyInplace<re::ecs2::RemoteEffectsComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED6C878;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 44) = 256;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 48) = result;
  *(_DWORD *)(v1 + 56) = 1065353216;
  *(_BYTE *)(v1 + 60) = 0;
  *(_DWORD *)(v1 + 64) = 1065353216;
  *(_BYTE *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 0;
  *(_BYTE *)(v1 + 96) = 0;
  *(_DWORD *)(v1 + 104) = 0;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::ComponentType(uint64_t a1, const StringID *a2, uint64_t a3, int a4)
{
  unsigned __int8 v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;

  *(_QWORD *)a1 = &unk_24ED45840;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a4;
  *(_QWORD *)a1 = off_24ED6C8F8;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 72) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 56) = re::ecs2::ComponentTypeBase::makeAllocator(*(re::ecs2::ComponentTypeBase **)(a1 + 32), (const char *)0x70);
  if ((v7 & 1) == 0
  {
    re::introspect<re::ecs2::RemoteEffectsComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsComponent>, 0);
  }
  v8 = re::introspect<re::ecs2::RemoteEffectsComponent>(void)::info;
  re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  v9 = (char *)v8[6];
  if (v9)
  {
    v10 = *v9;
    if (*v9)
    {
      v11 = v9[1];
      if (v11)
      {
        v12 = (unsigned __int8 *)(v9 + 2);
        do
        {
          v10 = 31 * v10 + v11;
          v13 = *v12++;
          v11 = v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v18[0] = 2 * v10;
  v18[1] = v9;
  v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v18);
  if (v14)
  {
    v15 = *v14;
  }
  else
  {
    v16 = 0;
    v15 = 0xFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v15;
  re::StringID::destroyString((re::StringID *)v18);
  re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v19);
  return a1;
}

double re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;

  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  return re::makeRelativeBindNode(v5, a2, a3);
}

uint64_t re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::isCustomComponent()
{
  return 0;
}

void re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::~ComponentType(_QWORD *a1)
{
  re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::~ComponentType(a1);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::doMakeComponent@<D0>(_QWORD *a1@<X8>)
{
  ArcSharedObject *v2;
  uint64_t v3;
  double result;

  v2 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 112, 0);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  ArcSharedObject::ArcSharedObject(v2, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED6C878;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 44) = 256;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v3 + 48) = result;
  *(_DWORD *)(v3 + 56) = 1065353216;
  *(_BYTE *)(v3 + 60) = 0;
  *(_DWORD *)(v3 + 64) = 1065353216;
  *(_BYTE *)(v3 + 72) = 0;
  *(_BYTE *)(v3 + 80) = 0;
  *(_BYTE *)(v3 + 88) = 0;
  *(_BYTE *)(v3 + 96) = 0;
  *(_DWORD *)(v3 + 104) = 0;
  *a1 = v3;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::doMakeSceneComponentCollection(re *a1)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = a1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED6C968;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  return v3;
}

void *re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::doGetComponentIntrospectionInfo()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::introspect<re::ecs2::RemoteEffectsComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsComponent>, 0);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[415];
}

__n128 re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::doGetComponentTypeID@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::doGetNetworkSyncInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ComponentType<re::ecs2::RemoteEffectsComponent>::~ComponentType(_QWORD *a1)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;

  *a1 = off_24ED6C8F8;
  v2 = (re *)a1[6];
  if (v2)
    v2 = (re *)RESyncRelease();
  v3 = (void (***)(_QWORD))a1[7];
  if (v3)
  {
    v4 = re::globalAllocators(v2)[2];
    (**v3)(v3);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
  }
  *a1 = &unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  return a1;
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

double re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RemoteEffectsComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RemoteEffectsComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RemoteEffectsComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RemoteEffectsComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RemoteEffectsComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RemoteEffectsComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RemoteEffectsComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RemoteEffectsComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED6C968;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::RemoteEffectsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::RemoteEffectsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::RemoteEffectsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::RemoteEffectsComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Slice<re::ecs2::RemoteEffectsComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::RemoteEffectsComponent>,re::Slice<re::ecs2::RemoteEffectsComponent*>>::Subscription const&,re::Slice<re::ecs2::RemoteEffectsComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

BOOL re::ecs2::WrapSystemComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  re::ecs2::EntityComponentCollection *v17;
  uint64_t v18;
  re *v19;
  re::MeshNameMap *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t started;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int *v39;
  int v40;
  _DWORD *v41;
  id *v42;
  uint64_t v43;
  void *v44;
  re *inited;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  re::ecs2::EntityComponentCollection *v56;
  unint64_t v57;
  re::MeshDeformationRuntimeData *v58;
  unint64_t v59;
  _QWORD *v60;
  re::MeshNameMap *v61;
  id location;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  const char *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v5 = a5;
  v79 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v74, a5, 0);
  v63 = a4;
  v64 = v74;
  if ((_QWORD)v74 != v5 || WORD4(v74) != 0xFFFFLL || (DWORD2(v74) & 0xFFFF0000) != 4294901760)
  {
    v53 = a3;
    v54 = v5;
    while (1)
    {
      v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v64);
      v11 = *(_QWORD **)v10;
      if (!*(_QWORD *)(*(_QWORD *)v10 + 240))
        break;
      v12 = v11[2];
      v13 = (_QWORD *)v11[49];
      v14 = *(_QWORD *)(v12 + 176);
      *(_QWORD *)&v74 = v11 + 29;
      *((_QWORD *)&v74 + 1) = 13;
      if (re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)&v74))
        break;
      v15 = !v13 || v14 == 0;
      if (v15 || !*(_QWORD *)(v14 + 40))
        break;
      v58 = (re::MeshDeformationRuntimeData *)(v11 + 29);
      v16 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v14 + 32));
      if (v16)
      {
        v17 = (re::ecs2::EntityComponentCollection *)(v12 + 32);
        v18 = v16 + 448;
        v56 = v17;
        v19 = (re *)re::ecs2::EntityComponentCollection::get(v17, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v20 = (re *)((char *)v19 + 216);
        if (!v19)
          v20 = (re::MeshNameMap *)v18;
        v61 = v20;
        v22 = v13[2];
        v21 = v13[3];
        v25 = v13 + 8;
        v23 = v13[8];
        v24 = v25[1];
        v26 = *(_QWORD *)(v11[49] + 96);
        v57 = *(_QWORD *)(v11[49] + 88);
        v27 = re::globalAllocators(v19);
        v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[2] + 32))(v27[2], 24, 8);
        *(_QWORD *)(v28 + 8) = 0;
        *(_QWORD *)(v28 + 16) = 0;
        *(_QWORD *)v28 = 0;
        *(_QWORD *)(v28 + 8) = v22;
        v60 = (_QWORD *)v28;
        if (v22)
        {
          if (v22 >> 62)
            goto LABEL_57;
          started = 4 * v22;
          *(_QWORD *)(v28 + 16) = v31;
          if (v31)
          {
            v33 = v31;
            if (v22 != 1)
            {
              v28 = started - 4;
              memset(v31, 255, started - 4);
              v33 = (_DWORD *)((char *)v33 + started - 4);
            }
            v34 = 0;
            v35 = 0;
            *v33 = -1;
            v36 = (_QWORD *)(v26 + 128);
            v37 = v21 + 4;
            v59 = v22;
            while (v23 != v35)
            {
              v38 = *(_QWORD **)(*(_QWORD *)(v24 + 8 * v35) + 520);
              if (v38)
              {
                v28 = *(unsigned __int16 *)(v37 + 2 * v34);
                started = v38[4];
                if (started <= v28)
                  goto LABEL_53;
                v28 = *(unsigned __int16 *)(v38[5] + 2 * v28);
                started = v38[1];
                if (started <= v28)
                  goto LABEL_54;
                v39 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v61 + 16, (_QWORD *)(v38[2] + 40 * v28));
                if (v39)
                {
                  v28 = *v39;
                  if ((_DWORD)v28 != 0xFFFF)
                  {
                    started = re::MeshNameMap::meshPartStartIndexForInstance(v61, v28);
                    v22 = v59;
                    if (re::MeshNameMap::meshPartStartIndexForInstance(v61, v28) - (_DWORD)started == 1)
                    {
                      v40 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex(v58, started);
                      v28 = v60[1];
                      if (v28 <= v35)
                        goto LABEL_55;
                      v41 = (_DWORD *)(v60[2] + v34);
                      *v41 = v40;
                      if (v57 <= v35)
                        goto LABEL_56;
                      ++*((_BYTE *)v36 - 115);
                      *v36 = v41;
                    }
                  }
                }
              }
              ++v35;
              v36 += 21;
              v34 += 4;
              if (v22 == v35)
                goto LABEL_36;
            }
            re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v23, v23);
            _os_crash();
            __break(1u);
LABEL_53:
            v65 = 0;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v74 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v66 = 136315906;
            v67 = "operator[]";
            v68 = 1024;
            v69 = 476;
            v70 = 2048;
            v71 = v28;
            v72 = 2048;
            v73 = started;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_54:
            v65 = 0;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v74 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v66 = 136315906;
            v67 = "operator[]";
            v68 = 1024;
            v69 = 476;
            v70 = 2048;
            v71 = v28;
            v72 = 2048;
            v73 = started;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_55:
            v65 = 0;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v74 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v66 = 136315906;
            v67 = "operator[]";
            v68 = 1024;
            v69 = 468;
            v70 = 2048;
            v71 = v35;
            v72 = 2048;
            v73 = v28;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_56:
            re::internal::assertLog((re::internal *)6, v32, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v35, v57);
            _os_crash();
            __break(1u);
LABEL_57:
            re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, v22);
            _os_crash();
            __break(1u);
          }
          re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
LABEL_36:
        v42 = (id *)(re::ecs2::EntityComponentCollection::getOrAdd(v56, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WrapComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 32);
        v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 136);
        if (v43)
          v44 = (void *)(v43 + 8);
        else
          v44 = 0;
        inited = (re *)objc_initWeak(&location, v44);
        *(_QWORD *)&v76 = 0;
        v74 = 0u;
        v75 = 0u;
        *((_QWORD *)&v75 + 1) = re::globalAllocators(inited)[2];
        *(_QWORD *)&v76 = 0;
        re::FramePersistentPtr<re::ecs2::WrapComponent::WrapDeformerInputs,re::FrameManager>::reset(v42, &location, v60, (uint64_t)&v74);
        if ((_QWORD)v76)
        {
          (**(void (***)(_QWORD))v76)(v76);
          if ((__int128 *)v76 != &v74)
            (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 40))(*((_QWORD *)&v75 + 1));
        }
        objc_destroyWeak(&location);
        location = 0;
        v46 = v63;
        v47 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v64);
        a3 = v53;
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v53 + 16), v46, v47, *(_QWORD *)(v53 + 32));
        v5 = v54;
      }
      else
      {
        v48 = *(_QWORD *)(v14 + 40);
        if (v48)
        {
          v49 = atomic_load((unsigned int *)(v48 + 704));
          if (v49 == 3)
            break;
        }
        re::AssetHandle::loadAsync((re::AssetHandle *)(v14 + 32));
      }
LABEL_46:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v64);
      if ((_QWORD)v64 == v5 && WORD4(v64) == 0xFFFF && WORD5(v64) == 0xFFFF)
        return *(_DWORD *)(v5 + 40) != 0;
    }
    v50 = v63;
    v51 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v64);
    re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v50, v51, *(_QWORD *)(a3 + 32));
    goto LABEL_46;
  }
  return *(_DWORD *)(v5 + 40) != 0;
}

uint64_t re::ecs2::WrapSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v12);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = *(uint64_t **)a2;
    v8 = a1 + 200;
    v9 = 8 * v6;
    do
    {
      v10 = *v7++;
      re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(v8, v10, (uint64_t)v13, 0);
      v9 -= 8;
    }
    while (v9);
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v12);
}

void re::ecs2::WrapSystem::willAddSceneToECSService(re::ecs2::WrapSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::addScene((uint64_t)this + 200, (uint64_t)a2);
}

uint64_t re::ecs2::WrapSystem::willRemoveSceneFromECSService(re::ecs2::WrapSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 200, (uint64_t)a2);
}

uint64_t *re::ecs2::allocInfo_WrapComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_316);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_316))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541140A8, 0);
    *(uint64_t *)((char *)&qword_2541140B8 + 6) = 0;
    qword_2541140B8 = 0;
    qword_2541140C8 = 0;
    qword_2541140D0 = 0xFFFFFFFFLL;
    qword_2541140A8 = (uint64_t)&off_24ED7DAA8;
    qword_2541140D8 = (uint64_t)"WrapComponent";
    dword_2541140E0 = 0;
    xmmword_2541140E8 = 0u;
    unk_2541140F8 = 0u;
    xmmword_254114108 = 0u;
    qword_254114118 = 0;
    __cxa_guard_release(&_MergedGlobals_316);
  }
  return &qword_2541140A8;
}

void re::ecs2::initInfo_WrapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xC0AEF0E1D4DA9F66;
  v10[1] = "WrapComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254114098);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254114098);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254114090 = v8;
      __cxa_guard_release(&qword_254114098);
    }
  }
  *((_QWORD *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254114090;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::WrapComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::WrapComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::WrapComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::WrapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

uint64_t re::internal::defaultConstruct<re::ecs2::WrapComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::WrapComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::WrapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::WrapComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_WrapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WrapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WrapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WrapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WrapComponent>, this);
}

uint64_t *re::ecs2::allocInfo_WrapSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541140A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541140A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114120, 0);
    *(uint64_t *)((char *)&qword_254114130 + 6) = 0;
    qword_254114130 = 0;
    qword_254114140 = 0;
    qword_254114148 = 0xFFFFFFFFLL;
    qword_254114120 = (uint64_t)&off_24ED7DAA8;
    qword_254114150 = (uint64_t)"WrapSystem";
    dword_254114158 = 0;
    xmmword_254114160 = 0u;
    unk_254114170 = 0u;
    xmmword_254114180 = 0u;
    qword_254114190 = 0;
    __cxa_guard_release(&qword_2541140A0);
  }
  return &qword_254114120;
}

void re::ecs2::initInfo_WrapSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x110E0641F85672;
  v5[1] = "WrapSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1B800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_WrapSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::WrapSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::WrapSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::WrapSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::WrapSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::WrapSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::WrapSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::WrapSystem *re::internal::defaultConstruct<re::ecs2::WrapSystem>(int a1, int a2, re::ecs2::WrapSystem *this)
{
  return re::ecs2::WrapSystem::WrapSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::WrapSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &off_24ED6CA10;
  v4 = a3[22];
  if (v4)
  {
    if (a3[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[24]);
      a3[23] = 0;
      a3[24] = 0;
    }
    a3[22] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::WrapSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &off_24ED6CA10;
  v2 = a1[22];
  if (v2)
  {
    if (a1[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[24]);
      a1[23] = 0;
      a1[24] = 0;
    }
    a1[22] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_WrapSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WrapSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WrapSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WrapSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WrapSystem>, this);
}

uint64_t re::ecs2::WrapSystemComponentStateImpl::dependsOnComponents(re::ecs2::WrapSystemComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

void re::ecs2::WrapSystem::~WrapSystem(re::ecs2::WrapSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED6CA10;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED6CA10;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::WrapSystem::typeInfo(re::ecs2::WrapSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"WrapSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_WrapSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_WrapSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::WrapSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::WrapComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  re *inited;

  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59418;
  inited = (re *)objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = re::globalAllocators(inited)[2];
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::WrapSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::WrapSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void ___ZN2re4ecs216BillboardService18isBillboardEnabledEv_block_invoke(uint64_t a1, const char *a2)
{
  char *v2;
  char v3;
  char v4;

  re::Defaults::BOOLValue((re::Defaults *)"enableBillboard", a2, &v3);
  if (v3)
    v2 = &v4;
  else
    v2 = &re::ecs2::gIsBillboardEnabled;
  re::ecs2::gIsBillboardEnabled = *v2;
}

void re::ecs2::BillboardService::setEnableBillboard(re::ecs2::BillboardService *this)
{
  int v1;
  NSObject *v2;
  const char *v3;
  int v4;
  const char *v5;
  uint64_t v6;

  v1 = (int)this;
  v6 = *MEMORY[0x24BDAC8D0];
  if (re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken != -1)
    dispatch_once(&re::ecs2::BillboardService::isBillboardEnabled(void)::onceToken, &__block_literal_global_25);
  if ((re::ecs2::gIsBillboardEnabled != 0) != v1)
  {
    re::ecs2::gIsBillboardEnabled = v1;
    v2 = *re::ecsComponentsLogObjects(this);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (re::ecs2::gIsBillboardEnabled)
        v3 = "enabled";
      else
        v3 = "disabled";
      v4 = 136315138;
      v5 = v3;
      _os_log_impl(&dword_224FE9000, v2, OS_LOG_TYPE_DEFAULT, "re.enableBillboard is now %s.", (uint8_t *)&v4, 0xCu);
    }
  }
}

float ___ZN2re4ecs216BillboardService36getBillboardTransformChangeThresholdEv_block_invoke(uint64_t a1, const char *a2)
{
  float *v2;
  float result;
  _BYTE v4[4];
  int v5;

  re::Defaults::floatValue((re::Defaults *)"billboardTransformChangeThreshold", a2, (uint64_t)v4);
  if (v4[0])
    v2 = (float *)&v5;
  else
    v2 = (float *)&re::ecs2::gBillboardTransformChangeThreshold;
  result = *v2;
  re::ecs2::gBillboardTransformChangeThreshold = *(_DWORD *)v2;
  return result;
}

uint64_t *re::ecs2::allocInfo_BillboardService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_317);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_317))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541141A0, 0);
    *(uint64_t *)((char *)&qword_2541141B0 + 6) = 0;
    qword_2541141B0 = 0;
    qword_2541141C0 = 0;
    qword_2541141C8 = 0xFFFFFFFFLL;
    qword_2541141A0 = (uint64_t)&off_24ED7DAA8;
    qword_2541141D0 = (uint64_t)"BillboardService";
    dword_2541141D8 = 0;
    unk_2541141E0 = 0u;
    unk_2541141F0 = 0u;
    unk_254114200 = 0u;
    qword_254114210 = 0;
    __cxa_guard_release(&_MergedGlobals_317);
  }
  return &qword_2541141A0;
}

void re::ecs2::initInfo_BillboardService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xBDC586F2E0B72D2CLL;
  v5[1] = "BillboardService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_BillboardService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_BillboardService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BillboardService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BillboardService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BillboardService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BillboardService>, this);
}

uint64_t *re::ecs2::allocInfo_EnvironmentLightingService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_318);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_318))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114220, 0);
    *(uint64_t *)((char *)&qword_254114230 + 6) = 0;
    qword_254114230 = 0;
    qword_254114240 = 0;
    qword_254114248 = 0xFFFFFFFFLL;
    qword_254114220 = (uint64_t)&off_24ED7DAA8;
    qword_254114250 = (uint64_t)"EnvironmentLightingService";
    dword_254114258 = 0;
    unk_254114260 = 0u;
    unk_254114270 = 0u;
    unk_254114280 = 0u;
    qword_254114290 = 0;
    __cxa_guard_release(&_MergedGlobals_318);
  }
  return &qword_254114220;
}

void re::ecs2::initInfo_EnvironmentLightingService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xA9E53BDC66725F2CLL;
  v5[1] = "EnvironmentLightingService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_EnvironmentLightingService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_EnvironmentLightingService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EnvironmentLightingService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_EnvironmentLightingService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_EnvironmentLightingService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::EnvironmentLightingService>, this);
}

re::ecs2::RenderOptionsManagerStateTracking *re::ecs2::RenderOptionsManagerStateTracking::RenderOptionsManagerStateTracking(re::ecs2::RenderOptionsManagerStateTracking *this)
{
  _QWORD *v2;
  _QWORD v4[2];
  _QWORD v5[4];

  v5[3] = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)re::ecs2::HierarchyStateTracking<re::ecs2::EntityRenderOptions>::HierarchyStateTracking((uint64_t)this);
  *v2 = &off_24ED6CB78;
  v2[32] = 0;
  v2[33] = 0;
  v2[31] = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::PortalCrossingFlagsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[2] = re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(v2 + 31), (uint64_t)v4);
  return this;
}

uint64_t re::ecs2::HierarchyStateTracking<re::ecs2::EntityRenderOptions>::HierarchyStateTracking(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;

  *(_QWORD *)a1 = off_24ED2AFE8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  v2 = a1 + 56;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v3 = a1 + 104;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  v4 = a1 + 152;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  v5 = a1 + 200;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  return a1;
}

void re::ecs2::RenderOptionsManagerStateTracking::buildPerEntityStateForDirtyEntityHierarchies(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  __int16 v29;
  int v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  re::HierarchicalMeshOverrideFlags *v35;
  BOOL *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t *v75;
  _BYTE v76[7];
  __int16 v77;
  char v78;
  unsigned __int8 v79;
  char v80;
  unsigned __int8 v81;
  char v82;
  unsigned __int8 v83;
  char v84;
  unsigned __int8 v85;
  char v86;
  unsigned __int8 v87;
  __int16 v88;
  int v89;
  char v90;
  BOOL v91[2];
  unsigned __int8 v92[7];
  __int16 v93;
  char v94;
  unsigned __int8 v95;
  char v96;
  unsigned __int8 v97;
  char v98;
  unsigned __int8 v99;
  char v100;
  unsigned __int8 v101;
  char v102;
  unsigned __int8 v103;
  __int16 v104;
  int v105;
  char v106;
  unsigned __int8 v107;
  unsigned __int8 v108;
  unsigned __int8 v109;
  unsigned __int8 v110;
  unsigned __int8 v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  __int16 v115;
  char v116;
  unsigned __int8 v117;
  char v118;
  unsigned __int8 v119;
  char v120;
  unsigned __int8 v121;
  char v122;
  unsigned __int8 v123;
  char v124;
  unsigned __int8 v125;
  __int16 v126;
  int v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  int v135;
  _QWORD v136[2];
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  _BYTE v142[128];

  v3 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 6;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 == (_DWORD)v4)
    return;
  v7 = v4;
  v8 = *(_QWORD *)(a2 + 16);
  v75 = (unint64_t *)(a1 + 56);
  v9 = *(_DWORD *)(a2 + 32);
  v73 = v9;
  while (1)
  {
    v10 = *(_QWORD *)(v8 + 24 * v7 + 16);
    if ((*(_BYTE *)(v10 + 288) & 0x41) == 0)
      goto LABEL_128;
    if (*v75)
    {
      v11 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
      v12 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v11 ^ (v11 >> 31)) % *(unsigned int *)(a1 + 80)));
      if ((_DWORD)v12 != 0x7FFFFFFF)
      {
        v13 = *(_QWORD *)(a1 + 72);
        while (*(_QWORD *)(v13 + 56 * v12 + 16) != v10)
        {
          LODWORD(v12) = *(_DWORD *)(v13 + 56 * v12 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v12 == 0x7FFFFFFF)
            goto LABEL_15;
        }
        goto LABEL_128;
      }
    }
LABEL_15:
    v14 = *(_QWORD *)(v10 + 24);
    if (!v14 || (*(_BYTE *)(v14 + 288) & 0x80) != 0)
    {
LABEL_25:
      v19 = &re::ecs2::EntityRenderOptions::defaultRenderOptions(void)::s_defaultRenderOptions;
    }
    else
    {
      while (1)
      {
        v15 = v14;
        if (*v75)
        {
          v16 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27));
          v17 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v16 ^ (v16 >> 31)) % *(unsigned int *)(a1 + 80)));
          if ((_DWORD)v17 != 0x7FFFFFFF)
            break;
        }
LABEL_22:
        v14 = *(_QWORD *)(v15 + 24);
        if (v14)
        {
          v10 = v15;
          if ((*(_BYTE *)(v14 + 288) & 0x80) == 0)
            continue;
        }
        v10 = v15;
        goto LABEL_25;
      }
      v18 = *(_QWORD *)(a1 + 72);
      while (*(_QWORD *)(v18 + 56 * v17 + 16) != v15)
      {
        LODWORD(v17) = *(_DWORD *)(v18 + 56 * v17 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v17 == 0x7FFFFFFF)
          goto LABEL_22;
      }
      v19 = (void *)(v18 + 56 * v17 + 24);
    }
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v142);
    v136[0] = 0;
    v136[1] = 0;
    v137 = 1;
    v139 = 0;
    v140 = 0;
    v138 = 0;
    v141 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v136, (uint64_t)v142, 1uLL);
    v129 = 0;
    v130 = 0;
    v131 = 1;
    v133 = 0;
    v134 = 0;
    v132 = 0;
    v135 = 0;
    re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::init((uint64_t)&v129, (uint64_t)v142, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v136) = v10;
    re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::add(&v129, (uint64_t)v19);
    v20 = v140;
    v21 = a2;
    if (v140)
      break;
LABEL_110:
    v64 = v134;
    if (v134)
    {
      v65 = 0;
      do
        re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::operator[]((uint64_t)&v129, v65++);
      while (v64 != v65);
    }
    v66 = v129;
    if (v130)
    {
      v67 = v133;
      v68 = v131;
      v69 = v130 - 1;
      do
      {
        if ((v68 & 1) != 0)
          v70 = &v132;
        else
          v70 = v67;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v66 + 40))(v66, v70[v69]);
        v68 += 2;
        v131 = v68;
        --v69;
      }
      while (v69 != -1);
LABEL_122:
      v21 = a2;
      if ((v68 & 1) == 0)
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v66 + 40))(v66, v133);
      goto LABEL_124;
    }
    if (v129)
    {
      LOBYTE(v68) = v131;
      goto LABEL_122;
    }
LABEL_124:
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v136);
    if (v136[0] && (v137 & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)v136[0] + 40))();
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v142);
    v9 = *(_DWORD *)(v21 + 32);
    v8 = *(_QWORD *)(v21 + 16);
    LODWORD(v3) = v73;
LABEL_128:
    if (v9 <= (int)v4 + 1)
      v71 = v4 + 1;
    else
      v71 = v9;
    while (1)
    {
      v7 = (v4 + 1);
      if (v71 - 1 == (_DWORD)v4)
        break;
      LODWORD(v4) = v4 + 1;
      v72 = v7;
      if ((*(_DWORD *)(v8 + 24 * v7 + 8) & 0x80000000) != 0)
        goto LABEL_135;
    }
    v72 = v71;
LABEL_135:
    LODWORD(v4) = v72;
    if ((_DWORD)v3 == v72)
      return;
  }
  while (1)
  {
    v22 = (unint64_t *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v136, v20 - 1);
    if (!v134)
      break;
    v24 = *v22;
    v25 = v134 - 1;
    v26 = re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::operator[]((uint64_t)&v129, v134 - 1);
    v27 = *(_BYTE *)v26;
    v107 = *(_BYTE *)v26;
    v108 = *(_BYTE *)(v26 + 2);
    if (v108)
      v109 = *(_BYTE *)(v26 + 3);
    v110 = *(_BYTE *)(v26 + 4);
    if (v110)
      v111 = *(_BYTE *)(v26 + 5);
    v112 = *(_BYTE *)(v26 + 6);
    if (v112)
      v113 = *(_BYTE *)(v26 + 7);
    v28 = *(_BYTE *)(v26 + 8);
    v114 = v28;
    v29 = *(_WORD *)(v26 + 9);
    v116 = *(_BYTE *)(v26 + 11);
    v115 = v29;
    v117 = *(_BYTE *)(v26 + 12);
    if (v117)
      v118 = *(_BYTE *)(v26 + 13);
    v119 = *(_BYTE *)(v26 + 14);
    if (v119)
      v120 = *(_BYTE *)(v26 + 15);
    v121 = *(_BYTE *)(v26 + 16);
    if (v121)
      v122 = *(_BYTE *)(v26 + 17);
    v123 = *(_BYTE *)(v26 + 18);
    if (v123)
      v124 = *(_BYTE *)(v26 + 19);
    v125 = *(_BYTE *)(v26 + 20);
    if (v125)
      v126 = *(_WORD *)(v26 + 22);
    v30 = *(_DWORD *)(v26 + 24);
    v128 = *(_BYTE *)(v26 + 28);
    v127 = v30;
    v91[0] = v27;
    v92[0] = v108;
    if (v108)
      v92[1] = v109;
    v92[2] = v110;
    if (v110)
      v92[3] = v111;
    v92[4] = v112;
    if (v112)
      v92[5] = v113;
    v92[6] = v28;
    v93 = v115;
    v94 = v116;
    v95 = v117;
    if (v117)
      v96 = v118;
    v97 = v119;
    if (v119)
      v98 = v120;
    v99 = v121;
    if (v121)
      v100 = v122;
    v101 = v123;
    if (v123)
      v102 = v124;
    v103 = v125;
    if (v125)
      v104 = v126;
    v105 = v127;
    v106 = v128;
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v136, --v140);
    ++v141;
    re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::operator[]((uint64_t)&v129, v25);
    v134 = v25;
    ++v135;
    v76[0] = v108;
    if (v108)
      v76[1] = v109;
    v76[2] = v110;
    if (v110)
      v76[3] = v111;
    v76[4] = v112;
    if (v112)
      v76[5] = v113;
    v76[6] = v114;
    v77 = v115;
    v78 = v116;
    v79 = v117;
    if (v117)
      v80 = v118;
    v81 = v119;
    if (v119)
      v82 = v120;
    v83 = v121;
    if (v121)
      v84 = v122;
    v85 = v123;
    if (v123)
      v86 = v124;
    v87 = v125;
    if (v125)
      v88 = v126;
    v89 = v127;
    v90 = v128;
    re::ecs2::RenderOptionsComponent::mixMeshFlags(v24, (uint64_t)v76, &v108, v92, v31, v32, v33, v34);
    re::ecs2::PortalCrossingFlagsComponent::overridePortalCrossingFlags((re::ecs2::PortalCrossingFlagsComponent *)v24, (const re::ecs2::Entity *)&v108, (re::HierarchicalMeshOverrideFlags *)v92, v35);
    re::ecs2::RenderOptionsComponent::mixVisibility((re::ecs2::RenderOptionsComponent *)v24, (const re::ecs2::Entity *)v107, &v107, v91, v36);
    v37 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v24 ^ (v24 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v24 ^ (v24 >> 30))) >> 27));
    v38 = v37 ^ (v37 >> 31);
    v39 = *v75;
    if (!*v75
      || (v39 = v38 % *(unsigned int *)(a1 + 80),
          v40 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v39),
          (_DWORD)v40 == 0x7FFFFFFF))
    {
LABEL_82:
      v42 = *(unsigned int *)(a1 + 92);
      if ((_DWORD)v42 == 0x7FFFFFFF)
      {
        v42 = *(unsigned int *)(a1 + 88);
        v43 = v42;
        if ((_DWORD)v42 == *(_DWORD *)(a1 + 80))
        {
          re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityRenderOptions,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v75, 2 * *(_DWORD *)(a1 + 84));
          v39 = v38 % *(unsigned int *)(a1 + 80);
          v43 = *(_DWORD *)(a1 + 88);
        }
        *(_DWORD *)(a1 + 88) = v43 + 1;
        v44 = *(_QWORD *)(a1 + 72);
        v45 = *(_DWORD *)(v44 + 56 * v42 + 8);
      }
      else
      {
        v44 = *(_QWORD *)(a1 + 72);
        v45 = *(_DWORD *)(v44 + 56 * v42 + 8);
        *(_DWORD *)(a1 + 92) = v45 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v44 + 56 * v42 + 8) = v45 | 0x80000000;
      *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56 * v42 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 56 * v42 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v39);
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 56 * v42) = v38;
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 56 * v42 + 16) = v24;
      v46 = *(_QWORD *)(a1 + 72);
      v47 = v46 + 56 * v42;
      *(_BYTE *)(v47 + 24) = v107;
      v48 = v108;
      *(_BYTE *)(v47 + 26) = v108;
      if (v48)
        *(_BYTE *)(v46 + 56 * v42 + 27) = v109;
      v49 = v110;
      *(_BYTE *)(v46 + 56 * v42 + 28) = v110;
      if (v49)
        *(_BYTE *)(v46 + 56 * v42 + 29) = v111;
      v50 = v112;
      *(_BYTE *)(v46 + 56 * v42 + 30) = v112;
      if (v50)
        *(_BYTE *)(v46 + 56 * v42 + 31) = v113;
      v51 = v46 + 56 * v42;
      *(_BYTE *)(v51 + 32) = v114;
      v52 = v115;
      *(_BYTE *)(v51 + 35) = v116;
      *(_WORD *)(v51 + 33) = v52;
      v53 = v117;
      *(_BYTE *)(v51 + 36) = v117;
      if (v53)
        *(_BYTE *)(v46 + 56 * v42 + 37) = v118;
      v54 = v119;
      *(_BYTE *)(v46 + 56 * v42 + 38) = v119;
      if (v54)
        *(_BYTE *)(v46 + 56 * v42 + 39) = v120;
      v55 = v121;
      *(_BYTE *)(v46 + 56 * v42 + 40) = v121;
      if (v55)
        *(_BYTE *)(v46 + 56 * v42 + 41) = v122;
      v56 = v123;
      *(_BYTE *)(v46 + 56 * v42 + 42) = v123;
      if (v56)
        *(_BYTE *)(v46 + 56 * v42 + 43) = v124;
      v57 = v125;
      *(_BYTE *)(v46 + 56 * v42 + 44) = v125;
      if (v57)
        *(_WORD *)(v46 + 56 * v42 + 46) = v126;
      v58 = v46 + 56 * v42;
      v59 = v127;
      *(_BYTE *)(v58 + 52) = v128;
      *(_DWORD *)(v58 + 48) = v59;
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * v39) = v42;
      ++*(_DWORD *)(a1 + 84);
      ++*(_DWORD *)(a1 + 96);
    }
    else
    {
      v41 = *(_QWORD *)(a1 + 72);
      while (*(_QWORD *)(v41 + 56 * v40 + 16) != v24)
      {
        LODWORD(v40) = *(_DWORD *)(v41 + 56 * v40 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v40 == 0x7FFFFFFF)
          goto LABEL_82;
      }
    }
    v60 = *(_QWORD *)(v24 + 328);
    if (v60)
    {
      v61 = *(uint64_t **)(v24 + 344);
      v62 = 8 * v60;
      do
      {
        if ((*(_BYTE *)(*v61 + 288) & 0x41) != 0)
        {
          v63 = *v61;
          *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v136) = v63;
          re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::add(&v129, (uint64_t)v91);
        }
        ++v61;
        v62 -= 8;
      }
      while (v62);
    }
    v20 = v140;
    if (!v140)
      goto LABEL_110;
  }
  re::internal::assertLog((re::internal *)4, v23, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
  _os_crash();
  __break(1u);
}

_QWORD *re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::add(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;

  v3 = result;
  v4 = result[5];
  v5 = result[1];
  if (v4 + 1 > 32 * v5)
  {
    result = re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::setBucketsCapacity(result, (v4 + 32) >> 5);
    v5 = v3[1];
  }
  if (v5 <= v4 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((v3[2] & 1) != 0)
    v6 = v3 + 3;
  else
    v6 = (_QWORD *)v3[4];
  v7 = v6[v4 >> 5];
  ++v3[5];
  ++*((_DWORD *)v3 + 12);
  v8 = (_BYTE *)(v7 + 30 * (v4 & 0x1F));
  *v8 = *(_BYTE *)a2;
  v9 = *(unsigned __int8 *)(a2 + 2);
  v8[2] = v9;
  if (v9)
    *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 3) = *(_BYTE *)(a2 + 3);
  v10 = *(unsigned __int8 *)(a2 + 4);
  *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 4) = v10;
  if (v10)
    *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 5) = *(_BYTE *)(a2 + 5);
  v11 = *(unsigned __int8 *)(a2 + 6);
  *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 6) = v11;
  if (v11)
    *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 7) = *(_BYTE *)(a2 + 7);
  v12 = v7 + 30 * (v4 & 0x1F);
  *(_BYTE *)(v12 + 8) = *(_BYTE *)(a2 + 8);
  v13 = *(_WORD *)(a2 + 9);
  *(_BYTE *)(v12 + 11) = *(_BYTE *)(a2 + 11);
  *(_WORD *)(v12 + 9) = v13;
  v14 = *(unsigned __int8 *)(a2 + 12);
  *(_BYTE *)(v12 + 12) = v14;
  if (v14)
    *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 13) = *(_BYTE *)(a2 + 13);
  v15 = *(unsigned __int8 *)(a2 + 14);
  *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 14) = v15;
  if (v15)
    *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 15) = *(_BYTE *)(a2 + 15);
  v16 = *(unsigned __int8 *)(a2 + 16);
  *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 16) = v16;
  if (v16)
    *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 17) = *(_BYTE *)(a2 + 17);
  v17 = *(unsigned __int8 *)(a2 + 18);
  *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 18) = v17;
  if (v17)
    *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 19) = *(_BYTE *)(a2 + 19);
  v18 = *(unsigned __int8 *)(a2 + 20);
  *(_BYTE *)(v7 + 30 * (v4 & 0x1F) + 20) = v18;
  if (v18)
    *(_WORD *)(v7 + 30 * (v4 & 0x1F) + 22) = *(_WORD *)(a2 + 22);
  v19 = v7 + 30 * (v4 & 0x1F);
  v20 = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(v19 + 28) = *(_BYTE *)(a2 + 28);
  *(_DWORD *)(v19 + 24) = v20;
  return result;
}

uint64_t re::ecs2::RenderOptionsManagerStateTracking::trackedComponents(re::ecs2::RenderOptionsManagerStateTracking *this)
{
  return *((_QWORD *)this + 33);
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityRenderOptions,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 56 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_17, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 960, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::EntityRenderOptions,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 5)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 5)) + 30 * (a2 & 0x1F);
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityRenderOptions,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  signed int v42;
  _BYTE v43[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v43, 0, 36);
      *(_QWORD *)&v43[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityRenderOptions,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)v43, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v43;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v43[8];
      *(_OWORD *)v43 = v5;
      *(_QWORD *)&v43[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v43[24];
      *(_OWORD *)&v43[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v43[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7;
        v13 = DWORD1(v9);
        v14 = 48;
        do
        {
          v15 = *(_QWORD *)&v43[16];
          v16 = *(_QWORD *)&v43[16] + v14;
          if ((*(_DWORD *)(*(_QWORD *)&v43[16] + v14 - 40) & 0x80000000) != 0)
          {
            v17 = *(_QWORD *)(v16 - 48);
            v18 = *(unsigned int *)(a1 + 24);
            v19 = v17 % v18;
            v20 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v20 == 0x7FFFFFFF)
            {
              v20 = *(unsigned int *)(a1 + 32);
              v21 = v20;
              if ((_DWORD)v20 == (_DWORD)v18)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityRenderOptions,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v13));
                v19 = v17 % *(unsigned int *)(a1 + 24);
                v21 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v21 + 1;
              v22 = *(_QWORD *)(a1 + 16);
              v23 = *(_DWORD *)(v22 + 56 * v20 + 8);
            }
            else
            {
              v22 = *(_QWORD *)(a1 + 16);
              v23 = *(_DWORD *)(v22 + 56 * v20 + 8);
              *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v22 + 56 * v20 + 8) = v23 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v20 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v20 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v19);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v20) = v17;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v20 + 16) = *(_QWORD *)(v16 - 32);
            v24 = *(_QWORD *)(a1 + 16);
            v25 = v24 + 56 * v20;
            *(_BYTE *)(v25 + 24) = *(_BYTE *)(v16 - 24);
            v26 = v15 + v14;
            v27 = *(unsigned __int8 *)(v15 + v14 - 22);
            *(_BYTE *)(v25 + 26) = v27;
            if (v27)
              *(_BYTE *)(v24 + 56 * v20 + 27) = *(_BYTE *)(v26 - 21);
            v28 = *(unsigned __int8 *)(v26 - 20);
            *(_BYTE *)(v24 + 56 * v20 + 28) = v28;
            if (v28)
              *(_BYTE *)(v24 + 56 * v20 + 29) = *(_BYTE *)(v15 + v14 - 19);
            v29 = v15 + v14;
            v30 = *(unsigned __int8 *)(v15 + v14 - 18);
            *(_BYTE *)(v24 + 56 * v20 + 30) = v30;
            if (v30)
              *(_BYTE *)(v24 + 56 * v20 + 31) = *(_BYTE *)(v29 - 17);
            v31 = v24 + 56 * v20;
            *(_BYTE *)(v31 + 32) = *(_BYTE *)(v29 - 16);
            v32 = *(_WORD *)(v29 - 15);
            *(_BYTE *)(v31 + 35) = *(_BYTE *)(v29 - 13);
            *(_WORD *)(v31 + 33) = v32;
            v33 = *(unsigned __int8 *)(v29 - 12);
            *(_BYTE *)(v31 + 36) = v33;
            if (v33)
              *(_BYTE *)(v24 + 56 * v20 + 37) = *(_BYTE *)(v15 + v14 - 11);
            v34 = v15 + v14;
            v35 = *(unsigned __int8 *)(v15 + v14 - 10);
            *(_BYTE *)(v24 + 56 * v20 + 38) = v35;
            if (v35)
              *(_BYTE *)(v24 + 56 * v20 + 39) = *(_BYTE *)(v34 - 9);
            v36 = *(unsigned __int8 *)(v34 - 8);
            *(_BYTE *)(v24 + 56 * v20 + 40) = v36;
            if (v36)
              *(_BYTE *)(v24 + 56 * v20 + 41) = *(_BYTE *)(v15 + v14 - 7);
            v37 = v15 + v14;
            v38 = *(unsigned __int8 *)(v15 + v14 - 6);
            *(_BYTE *)(v24 + 56 * v20 + 42) = v38;
            if (v38)
              *(_BYTE *)(v24 + 56 * v20 + 43) = *(_BYTE *)(v37 - 5);
            v39 = *(unsigned __int8 *)(v37 - 4);
            *(_BYTE *)(v24 + 56 * v20 + 44) = v39;
            if (v39)
              *(_WORD *)(v24 + 56 * v20 + 46) = *(_WORD *)(v15 + v14 - 2);
            v40 = v24 + 56 * v20;
            v41 = *(_DWORD *)(v15 + v14);
            *(_BYTE *)(v40 + 52) = *(_BYTE *)(v15 + v14 + 4);
            *(_DWORD *)(v40 + 48) = v41;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v19) = v20;
            v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            v10 = *(_DWORD *)&v43[32];
          }
          ++v11;
          v14 += 56;
        }
        while (v11 < v10);
      }
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::deinit((uint64_t *)v43);
    }
  }
  else
  {
    if (a2)
      v42 = a2;
    else
      v42 = 3;
  }
}

uint64_t `anonymous namespace'::createStateCommandsFromAssetData(uint64_t a1, re::StateGraph *this)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t StateCommand;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  result = re::StateGraph::findStateByName(this, (const re::StringID *)(a1 + 80), &v20);
  if (result)
  {
    v4 = result;
    re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)v17, (uint64_t *)(a1 + 40));
    if (v18)
    {
      v5 = v19;
      v6 = v19 + 424 * v18;
      v7 = (_QWORD *)(v4 + 48);
      do
      {
        StateCommand = re::ecs2::StateCommandFactoryECS::createStateCommand((re *)*(unsigned __int8 *)(v5 + 400), (const StringID *)(v5 + 408));
        if (StateCommand)
        {
          v9 = StateCommand;
          if (*(_QWORD *)(v5 + 16))
          {
            v10 = 0;
            v11 = 0;
            while (1)
            {
              v12 = *(_QWORD *)(v5 + 56);
              if (v12 <= v11)
                break;
              (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 56))(v9, *(_QWORD *)(v5 + 32) + v10, *(_QWORD *)(*(_QWORD *)(v5 + 72) + 8 * v11++));
              v10 += 16;
              if (v11 >= *(_QWORD *)(v5 + 16))
                goto LABEL_9;
            }
            v21 = 0;
            v33 = 0u;
            v34 = 0u;
            v32 = 0u;
            v30 = 0u;
            v31 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v22 = 136315906;
            v23 = "operator[]";
            v24 = 1024;
            v25 = 797;
            v26 = 2048;
            v27 = v11;
            v28 = 2048;
            v29 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_30;
          }
LABEL_9:
          if (*(_QWORD *)(v5 + 96))
          {
            v13 = 0;
            v11 = 0;
            while (1)
            {
              v12 = *(_QWORD *)(v5 + 136);
              if (v12 <= v11)
                break;
              (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v9 + 64))(v9, *(_QWORD *)(v5 + 112) + v13, *(float *)(*(_QWORD *)(v5 + 152) + 4 * v11++));
              v13 += 16;
              if (v11 >= *(_QWORD *)(v5 + 96))
                goto LABEL_13;
            }
LABEL_30:
            v21 = 0;
            v33 = 0u;
            v34 = 0u;
            v32 = 0u;
            v30 = 0u;
            v31 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v22 = 136315906;
            v23 = "operator[]";
            v24 = 1024;
            v25 = 797;
            v26 = 2048;
            v27 = v11;
            v28 = 2048;
            v29 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_31:
            v21 = 0;
            v33 = 0u;
            v34 = 0u;
            v32 = 0u;
            v30 = 0u;
            v31 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v22 = 136315906;
            v23 = "operator[]";
            v24 = 1024;
            v25 = 797;
            v26 = 2048;
            v27 = v11;
            v28 = 2048;
            v29 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_32:
            v21 = 0;
            v33 = 0u;
            v34 = 0u;
            v32 = 0u;
            v30 = 0u;
            v31 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v22 = 136315906;
            v23 = "operator[]";
            v24 = 1024;
            v25 = 797;
            v26 = 2048;
            v27 = v11;
            v28 = 2048;
            v29 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_33;
          }
LABEL_13:
          if (*(_QWORD *)(v5 + 176))
          {
            v14 = 0;
            v11 = 0;
            do
            {
              v12 = *(_QWORD *)(v5 + 216);
              if (v12 <= v11)
                goto LABEL_31;
              (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v9 + 72))(v9, *(_QWORD *)(v5 + 192) + v14, *(double *)(*(_QWORD *)(v5 + 232) + 8 * v11++));
              v14 += 16;
            }
            while (v11 < *(_QWORD *)(v5 + 176));
          }
          if (*(_QWORD *)(v5 + 256))
          {
            v15 = 0;
            v11 = 0;
            do
            {
              v12 = *(_QWORD *)(v5 + 296);
              if (v12 <= v11)
                goto LABEL_32;
              (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 80))(v9, *(_QWORD *)(v5 + 272) + v15, *(unsigned __int8 *)(*(_QWORD *)(v5 + 312) + v11++));
              v15 += 16;
            }
            while (v11 < *(_QWORD *)(v5 + 256));
          }
          if (*(_QWORD *)(v5 + 336))
          {
            v16 = 0;
            v11 = 0;
            while (1)
            {
              v12 = *(_QWORD *)(v5 + 376);
              if (v12 <= v11)
                break;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, *(_QWORD *)(v5 + 352) + v16, *(_QWORD *)(v5 + 392) + v16);
              ++v11;
              v16 += 16;
              if (v11 >= *(_QWORD *)(v5 + 336))
                goto LABEL_25;
            }
LABEL_33:
            v21 = 0;
            v33 = 0u;
            v34 = 0u;
            v32 = 0u;
            v30 = 0u;
            v31 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v22 = 136315906;
            v23 = "operator[]";
            v24 = 1024;
            v25 = 797;
            v26 = 2048;
            v27 = v11;
            v28 = 2048;
            v29 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_25:
          *(_QWORD *)&v30 = v9;
          re::DynamicArray<re::TransitionCondition *>::add(v7, &v30);
        }
        v5 += 424;
      }
      while (v5 != v6);
    }
    return re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)v17);
  }
  return result;
}

void re::ecs2::LayeredStateMachine::deinit(uint64_t **this)
{
  re::ecs2::LayeredStateMachine *v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v1 = (re::ecs2::LayeredStateMachine *)this;
  v3 = this + 2;
  v2 = this[2];
  if (v2)
  {
    v4 = this[3];
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4;
      if (*v4)
      {
        v7 = re::globalAllocators((re *)this);
        this = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7[2] + 40))(v7[2], v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v8 = *((_QWORD *)v1 + 1);
  if (v8)
  {
    if (*v3)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)v1 + 3));
      *v3 = 0;
      v3[1] = 0;
    }
    *((_QWORD *)v1 + 1) = 0;
  }
  re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)v1 + 32);
  *((_BYTE *)v1 + 88) = 0;
  *((_QWORD *)v1 + 10) = 0;
}

uint64_t re::ecs2::LayeredStateMachine::currentState(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t *v5;
  unint64_t v6;

  v5 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 32, a3);
  if (!v5)
    return 0;
  v6 = *v5;
  if (*v5 >= *(_QWORD *)(a1 + 16) || v6 >= *(_QWORD *)(a2 + 8))
    return 0;
  else
    return re::StateMachine::currentState(*(unint64_t **)(*(_QWORD *)(a1 + 24) + 8 * v6), *(_QWORD *)(a2 + 16) + 40 * v6);
}

uint64_t re::ecs2::LayeredStateMachine::previousState(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;

  v5 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 32, a3);
  if (v5
    && ((v6 = *v5, *v5 < *(_QWORD *)(a1 + 16)) ? (v7 = v6 >= *(_QWORD *)(a2 + 8)) : (v7 = 1),
        !v7 && (v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6)) != 0))
  {
    return re::StateMachine::previousState(v8, *(_QWORD *)(a2 + 16) + 40 * v6);
  }
  else
  {
    return 0;
  }
}

unint64_t *re::ecs2::LayeredStateMachine::currentTransition(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t *result;
  unint64_t v6;

  result = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a1 + 32, a3);
  if (result)
  {
    v6 = *result;
    if (*result >= *(_QWORD *)(a1 + 16) || v6 >= *(_QWORD *)(a2 + 8))
      return 0;
    else
      return *(unint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v6) + 32);
  }
  return result;
}

uint64_t re::ecs2::StateMachineComponent::currentState(re::ecs2::StateMachineComponent *this, const re::StringID *a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *((_QWORD *)this + 2);
  if (v2
    && (~*(_DWORD *)(v2 + 288) & 0x2008) == 0
    && (v5 = re::AssetHandle::loadedAsset<re::StateMachineAsset>((re::ecs2::StateMachineComponent *)((char *)this + 32))) != 0)
  {
    return re::ecs2::LayeredStateMachine::currentState((uint64_t)this + 80, v5 + 80, a2);
  }
  else
  {
    return 0;
  }
}

uint64_t re::AssetHandle::loadedAsset<re::StateMachineAsset>(re::StateMachineAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::StateMachineAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::ecs2::StateMachineComponent::previousState(re::ecs2::StateMachineComponent *this, const re::StringID *a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *((_QWORD *)this + 2);
  if (v2
    && (~*(_DWORD *)(v2 + 288) & 0x2008) == 0
    && (v5 = re::AssetHandle::loadedAsset<re::StateMachineAsset>((re::ecs2::StateMachineComponent *)((char *)this + 32))) != 0)
  {
    return re::ecs2::LayeredStateMachine::previousState((uint64_t)this + 80, v5 + 80, a2);
  }
  else
  {
    return 0;
  }
}

unint64_t *re::ecs2::StateMachineComponent::currentTransition(re::ecs2::StateMachineComponent *this, const re::StringID *a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *((_QWORD *)this + 2);
  if (v2
    && (~*(_DWORD *)(v2 + 288) & 0x2008) == 0
    && (v5 = re::AssetHandle::loadedAsset<re::StateMachineAsset>((re::ecs2::StateMachineComponent *)((char *)this + 32))) != 0)
  {
    return re::ecs2::LayeredStateMachine::currentTransition((uint64_t)this + 80, v5 + 80, a2);
  }
  else
  {
    return 0;
  }
}

void re::ecs2::StateMachineSystem::update(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t var1;
  uint64_t v12;
  unsigned int v13;
  re::StateParameterBlackboardAsset *v14;
  re::StateParameterBlackboardAsset *v15;
  unsigned __int8 v16;
  uint64_t *v17;
  NSObject *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  re::StateParameterBlackboard *v23;
  uint64_t v24;
  StringID *v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  StringID *v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  StringID *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  StringID *v37;
  uint64_t v38;
  size_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _anonymous_namespace_ *StateCommandsFromAssetData;
  unint64_t v47;
  unint64_t i;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  re::StateGraph *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  re::StateParameterBlackboard *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  int v80;
  int v81;
  _QWORD *v82;
  char *v83;
  unint64_t v84;
  uint64_t **v85;
  _QWORD *v86;
  _QWORD *v87;
  re::StateParameterBlackboard *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  re::StateMachineBlackboardBinding *v92;
  re::StateMachineBlackboardBinding *v93;
  unint64_t v94;
  size_t v95;
  unint64_t v96;
  uint8_t buf[16];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _DWORD v102[8];
  int v103;
  const char *v104;
  __int16 v105;
  int v106;
  __int16 v107;
  _QWORD *v108;
  __int16 v109;
  unint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::StateMachineComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(float *)&a3;
        v7 = *(_QWORD **)(v4 + 40);
        v8 = &v7[v5];
        v87 = v8;
        while (1)
        {
          v9 = *v7;
          v10 = *(_QWORD *)(*v7 + 16);
          if (!v10 || (~*(_DWORD *)(v10 + 288) & 0x2008) != 0)
            goto LABEL_106;
          var1 = v9 + 56;
          v12 = *(_QWORD *)(v9 + 64);
          if (v12)
          {
            v13 = atomic_load((unsigned int *)(v12 + 704));
            if (v13 != 2)
              goto LABEL_19;
          }
          v14 = (re::StateParameterBlackboardAsset *)re::AssetHandle::loadedAsset<re::StateMachineAsset>((re::StateMachineAsset *)(v9 + 32));
          if (!v14)
          {
            var1 = v9 + 32;
            v8 = v87;
LABEL_19:
            re::AssetHandle::loadAsync((re::AssetHandle *)var1);
            goto LABEL_106;
          }
          v15 = v14;
          v88 = (re::StateParameterBlackboard *)(v9 + 32);
          if (!*(_QWORD *)(v9 + 456))
          {
            if ((v16 & 1) == 0
            {
              re::introspect<re::ecs2::Entity>(void)::info = re::ecs2::introspect_Entity(0);
            }
            re::makeBindPoint((re *)re::introspect<re::ecs2::Entity>(void)::info, *(const re::IntrospectionBase **)(v9 + 16), (uint64_t)buf);
            *(_QWORD *)(v9 + 432) = *(_QWORD *)buf;
            re::DynamicArray<re::RigDataValue>::operator=(v9 + 440, (uint64_t)&buf[8]);
            re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
            v14 = (re::StateParameterBlackboardAsset *)re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
          }
          v89 = v9;
          if (*(_QWORD *)(v9 + 64))
          {
            v17 = re::StateParameterBlackboardAsset::assetType(v14);
            v92 = (re::StateMachineBlackboardBinding *)re::AssetHandle::assetWithType((re::AssetHandle *)(v9 + 56), (const re::AssetType *)v17, 0);
            if (!v92)
            {
              v18 = *re::assetsLogObjects(0);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
              {
                v82 = re::AssetHandle::assetInfo((re::AssetHandle *)(v9 + 56));
                if ((v82[17] & 1) != 0)
                  v83 = (char *)v82[18];
                else
                  v83 = (char *)v82 + 137;
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = v83;
                _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", buf, 0xCu);
              }
            }
            v19 = *(_QWORD *)(v9 + 64);
            v20 = v19 ? *(_QWORD *)(v19 + 664) : 0;
            v21 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v19 ^ (v19 >> 30))) >> 27));
            v22 = v20 ^ (v21 >> 31) ^ v21;
            if (*(_QWORD *)(v9 + 424) != v22)
              break;
          }
LABEL_41:
          v41 = *(_QWORD *)(v9 + 40);
          if (v41)
            v42 = *(_QWORD *)(v41 + 664);
          else
            v42 = 0;
          v43 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v41 ^ (v41 >> 30))) >> 27));
          v44 = v42 ^ (v43 >> 31) ^ v43;
          v91 = v9 + 432;
          v93 = (re::StateMachineBlackboardBinding *)(v9 + 176);
          if (*(_QWORD *)(v9 + 160) == v44)
          {
            v45 = 0;
            goto LABEL_78;
          }
          v86 = v7;
          v84 = v44;
          v85 = (uint64_t **)(v9 + 80);
          re::ecs2::LayeredStateMachine::deinit((uint64_t **)(v9 + 80));
          v47 = *((_QWORD *)v15 + 7);
          if (!v47)
            goto LABEL_60;
          for (i = 0; i < v47; ++i)
          {
            v7 = (_QWORD *)(*((_QWORD *)v15 + 9) + 40 * i);
            if (!v7[2])
              continue;
            v49 = 0;
            do
            {
              v50 = *((_QWORD *)v15 + 11);
              if (v50 <= i)
              {
                v94 = 0;
                v100 = 0u;
                v101 = 0u;
                v98 = 0u;
                v99 = 0u;
                *(_OWORD *)buf = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v103 = 136315906;
                v104 = "operator[]";
                v105 = 1024;
                v106 = 476;
                v107 = 2048;
                v108 = (_QWORD *)i;
                v109 = 2048;
                v110 = v50;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_117:
                v94 = 0;
                v100 = 0u;
                v101 = 0u;
                v98 = 0u;
                v99 = 0u;
                *(_OWORD *)buf = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v103 = 136315906;
                v104 = "operator[]";
                v105 = 1024;
                v106 = 797;
                v107 = 2048;
                v108 = (_QWORD *)v49;
                v109 = 2048;
                v110 = v50;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_118;
              }
              v51 = *((_QWORD *)v15 + 12);
              v50 = *(_QWORD *)(v51 + 40 * i + 16);
              if (v50 <= v49)
                goto LABEL_117;
              v52 = v7[4];
              v53 = *(re::StateGraph **)(*(_QWORD *)(v51 + 40 * i + 32) + 8 * v49);
              if (*(_BYTE *)(v52 + 168 * v49 + 56))
              v54 = v52 + 168 * v49;
              v55 = *(_QWORD *)(v54 + 16);
              if (v55)
              {
                var1 = *(_QWORD *)(v54 + 32);
                v56 = var1 + 104 * v55;
                do
                {
                  re::DynamicArray<re::SMAssetStateTransition>::DynamicArray((uint64_t)buf, (uint64_t *)var1);
                  re::DynamicArray<re::SMAssetStateCommand>::DynamicArray((uint64_t)&v99 + 8, (uint64_t *)(var1 + 40));
                  re::StringID::StringID((re::StringID *)v102, (const StringID *)(var1 + 80));
                  v102[4] = *(_DWORD *)(var1 + 96);
                  re::StringID::destroyString((re::StringID *)v102);
                  re::DynamicArray<re::SMAssetStateCommand>::deinit((uint64_t)&v99 + 8);
                  StateCommandsFromAssetData = (_anonymous_namespace_ *)re::DynamicArray<re::SMAssetStateTransition>::deinit((uint64_t)buf);
                  var1 += 104;
                }
                while (var1 != v56);
              }
              ++v49;
            }
            while (v49 < v7[2]);
            v47 = *((_QWORD *)v15 + 7);
            v9 = v89;
          }
LABEL_60:
          v57 = *((_QWORD *)v15 + 2);
          if (!v57)
          {
            v45 = 0;
            goto LABEL_77;
          }
          if (*(_BYTE *)(v9 + 168))
          {
            re::ecs2::LayeredStateMachine::deinit(v85);
            v57 = *((_QWORD *)v15 + 2);
          }
          *(_QWORD *)(v9 + 96) = v57;
          if (v57)
          {
            if (!(v57 >> 61))
            {
                                                   + 32))();
              *(_QWORD *)(v9 + 104) = v58;
              if (v58)
              {
                v61 = v58;
                if (v57 != 1)
                {
                  bzero(v58, 8 * v57 - 8);
                  v61 += v57 - 1;
                }
                *v61 = 0;
                goto LABEL_69;
              }
LABEL_122:
              re::internal::assertLog((re::internal *)4, v60, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
              _os_crash();
              __break(1u);
            }
LABEL_121:
            re::internal::assertLog((re::internal *)6, v59, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v57);
            _os_crash();
            __break(1u);
            goto LABEL_122;
          }
LABEL_69:
          v96 = 0;
          if (!*((_QWORD *)v15 + 2))
          {
LABEL_75:
            v45 = 1;
            v9 = v89;
            *(_BYTE *)(v89 + 168) = 1;
            *(_QWORD *)(v89 + 160) = v84;
LABEL_77:
            v7 = v86;
            goto LABEL_78;
          }
          v62 = 0;
          while (1)
          {
            v63 = *((_QWORD *)v15 + 4);
            v64 = re::globalAllocators((re *)v58);
            v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64[2] + 32))(v64[2], 48, 8);
            *(_QWORD *)&v66 = -1;
            *((_QWORD *)&v66 + 1) = -1;
            *(_OWORD *)v65 = v66;
            *(_OWORD *)(v65 + 16) = v66;
            *(_QWORD *)(v65 + 32) = 0;
            *(_QWORD *)(v65 + 40) = 0;
            v7 = (_QWORD *)v96;
            v57 = *(_QWORD *)(v89 + 96);
            if (v57 <= v96)
              goto LABEL_119;
            v67 = v65;
            *(_QWORD *)(*(_QWORD *)(v89 + 104) + 8 * v96) = v65;
            re::HashTable<re::StringID,unsigned long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(v89 + 112, (StringID *)(v63 + 48 * v62), &v96);
            v7 = (_QWORD *)v96;
            v57 = *((_QWORD *)v15 + 11);
            if (v57 <= v96)
              goto LABEL_120;
            v58 = (_QWORD *)re::StateMachine::init(v67, *((_QWORD *)v15 + 12) + 40 * v96, (uint64_t)v93, (_QWORD *)(v63 + 48 * v62 + 16), (const re::StringID *)(v63 + 48 * v62 + 32), v91);
            if (!(_DWORD)v58)
              break;
            v62 = v96 + 1;
            v96 = v62;
            if (v62 >= *((_QWORD *)v15 + 2))
              goto LABEL_75;
          }
          re::ecs2::LayeredStateMachine::deinit(v85);
          v45 = 0;
          v7 = v86;
          v9 = v89;
LABEL_78:
          v68 = v88;
          if (!*(_QWORD *)(v9 + 64))
          {
            v74 = *(_QWORD *)(v9 + 16);
            if (v74)
            {
              if ((~*(_DWORD *)(v74 + 288) & 0x2008) == 0)
              {
                v75 = *(_QWORD *)(v9 + 40);
                if (v75)
                {
                  v76 = atomic_load((unsigned int *)(v75 + 704));
                  if (v76 == 2)
                    re::StateMachineBlackboardBinding::updateFromGraphsAndParameterBinding(v93, v88, (const re::AssetHandle *)(v9 + 376), *(re::StateMachineParameterBinding **)(v9 + 16), (re::ecs2::Entity *)v45);
                }
              }
            }
          }
          if (*(_QWORD *)(v9 + 96))
          {
            v69 = 0;
            v50 = 0;
            while (1)
            {
              var1 = *((_QWORD *)v15 + 11);
              if (var1 <= v50)
                break;
              re::StateMachine::update(*(unint64_t **)(*(_QWORD *)(v9 + 104) + 8 * v50++), *((_QWORD *)v15 + 12) + v69, (uint64_t)v93, v91, v6);
              v69 += 40;
              if (v50 >= *(_QWORD *)(v9 + 96))
                goto LABEL_83;
            }
LABEL_118:
            v94 = 0;
            v100 = 0u;
            v101 = 0u;
            v98 = 0u;
            v99 = 0u;
            *(_OWORD *)buf = 0u;
            v57 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v103 = 136315906;
            v104 = "operator[]";
            v105 = 1024;
            v106 = 476;
            v107 = 2048;
            v108 = (_QWORD *)v50;
            v109 = 2048;
            v110 = var1;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_119:
            v94 = 0;
            v100 = 0u;
            v101 = 0u;
            v98 = 0u;
            v99 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v103 = 136315906;
            v104 = "operator[]";
            v105 = 1024;
            v106 = 468;
            v107 = 2048;
            v108 = v7;
            v109 = 2048;
            v110 = v57;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_120:
            v94 = 0;
            v100 = 0u;
            v101 = 0u;
            v98 = 0u;
            v99 = 0u;
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v103 = 136315906;
            v104 = "operator[]";
            v105 = 1024;
            v106 = 476;
            v107 = 2048;
            v108 = v7;
            v109 = 2048;
            v110 = v57;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_121;
          }
LABEL_83:
          v70 = *(unsigned int *)(v9 + 360);
          if ((_DWORD)v70)
          {
            v71 = 0;
            v72 = *(int **)(v9 + 344);
            v8 = v87;
            while (1)
            {
              v73 = *v72;
              v72 += 8;
              if (v73 < 0)
                break;
              if (v70 == ++v71)
              {
                LODWORD(v71) = *(_DWORD *)(v9 + 360);
                break;
              }
            }
          }
          else
          {
            LODWORD(v71) = 0;
            v8 = v87;
          }
          if ((_DWORD)v70 != (_DWORD)v71)
          {
            v77 = v71;
            v78 = *(_QWORD *)(v9 + 344);
            do
            {
              v79 = *(_BYTE **)(v78 + 32 * v77 + 24);
              if (v79[56])
              {
                (*(void (**)(_BYTE *, re::StateParameterBlackboard *))(*(_QWORD *)v79 + 8))(v79, v68);
                v79[56] = 0;
                LODWORD(v70) = *(_DWORD *)(v9 + 360);
                v78 = *(_QWORD *)(v9 + 344);
              }
              if (v70 <= (int)v71 + 1)
                v80 = v71 + 1;
              else
                v80 = v70;
              while (1)
              {
                v77 = (v71 + 1);
                if (v80 - 1 == (_DWORD)v71)
                  break;
                LODWORD(v71) = v71 + 1;
                v81 = v77;
                if ((*(_DWORD *)(v78 + 32 * v77) & 0x80000000) != 0)
                  goto LABEL_105;
              }
              v81 = v80;
LABEL_105:
              LODWORD(v71) = v81;
            }
            while ((_DWORD)v70 != v81);
          }
LABEL_106:
          if (++v7 == v8)
            return;
        }
        v90 = v22;
        v23 = (re::StateParameterBlackboard *)(v9 + 176);
        re::StateParameterBlackboard::deinit((re::StateParameterBlackboard *)(v9 + 176));
        v24 = *((_QWORD *)v92 + 2);
        if (v24)
        {
          v25 = (StringID *)*((_QWORD *)v92 + 3);
          v26 = 32 * v24;
          while (1)
          {
            re::makeBindNode(*(re **)(v89 + 16), (uint64_t)&v103);
            var1 = (unint64_t)v25[1].var1;
            v27 = strlen((const char *)var1);
            v94 = var1;
            v95 = v27;
            re::BindNode::bindPoint<long long>((re::BindNode **)&v103, (uint64_t *)&v94, (uint64_t)buf);
            if (!*((_QWORD *)&v98 + 1))
              break;
            re::StateParameterBlackboard::addStateParameterInt(v23, v25, (const re::BindPoint *)buf);
            re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
            re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
            re::BindNode::deinit((re::BindNode *)&v103);
            v25 += 2;
            v26 -= 32;
            if (!v26)
              goto LABEL_26;
          }
        }
        else
        {
LABEL_26:
          v28 = *((_QWORD *)v92 + 5);
          if (v28)
          {
            v29 = (StringID *)*((_QWORD *)v92 + 6);
            v30 = 32 * v28;
            while (1)
            {
              re::makeBindNode(*(re **)(v89 + 16), (uint64_t)&v103);
              var1 = (unint64_t)v29[1].var1;
              v31 = strlen((const char *)var1);
              v94 = var1;
              v95 = v31;
              re::BindNode::bindPoint<float>((re::BindNode **)&v103, (uint64_t *)&v94, (uint64_t)buf);
              if (!*((_QWORD *)&v98 + 1))
                break;
              re::StateParameterBlackboard::addStateParameterFloat(v23, v29, (const re::BindPoint *)buf);
              re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
              re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
              re::BindNode::deinit((re::BindNode *)&v103);
              v29 += 2;
              v30 -= 32;
              if (!v30)
                goto LABEL_30;
            }
          }
          else
          {
LABEL_30:
            v32 = *((_QWORD *)v92 + 8);
            if (v32)
            {
              v33 = (StringID *)*((_QWORD *)v92 + 9);
              v34 = 32 * v32;
              while (1)
              {
                re::makeBindNode(*(re **)(v89 + 16), (uint64_t)&v103);
                var1 = (unint64_t)v33[1].var1;
                v35 = strlen((const char *)var1);
                v94 = var1;
                v95 = v35;
                re::BindNode::bindPoint<BOOL>((re::BindNode **)&v103, (uint64_t *)&v94, (uint64_t)buf);
                if (!*((_QWORD *)&v98 + 1))
                  break;
                re::StateParameterBlackboard::addStateParameterBool(v23, v33, (const re::BindPoint *)buf);
                re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
                re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
                re::BindNode::deinit((re::BindNode *)&v103);
                v33 += 2;
                v34 -= 32;
                if (!v34)
                  goto LABEL_34;
              }
            }
            else
            {
LABEL_34:
              v36 = *((_QWORD *)v92 + 11);
              if (!v36)
              {
LABEL_38:
                v40 = v90;
LABEL_40:
                v9 = v89;
                *(_QWORD *)(v89 + 424) = v40;
                goto LABEL_41;
              }
              v37 = (StringID *)*((_QWORD *)v92 + 12);
              v38 = 32 * v36;
              while (1)
              {
                re::makeBindNode(*(re **)(v89 + 16), (uint64_t)&v103);
                var1 = (unint64_t)v37[1].var1;
                v39 = strlen((const char *)var1);
                v94 = var1;
                v95 = v39;
                re::BindNode::bindPoint<BOOL>((re::BindNode **)&v103, (uint64_t *)&v94, (uint64_t)buf);
                if (!*((_QWORD *)&v98 + 1))
                  break;
                re::StateParameterBlackboard::addStateParameterTrigger(v23, v37, (const re::BindPoint *)buf);
                re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
                re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
                re::BindNode::deinit((re::BindNode *)&v103);
                v37 += 2;
                v38 -= 32;
                if (!v38)
                  goto LABEL_38;
              }
            }
          }
        }
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&buf[8]);
        re::BindNode::deinit((re::BindNode *)&v103);
        v40 = 0;
        goto LABEL_40;
      }
    }
  }
}

uint64_t *re::ecs2::allocInfo_StateMachineComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541142A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541142A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541142D0, 0);
    *(uint64_t *)((char *)&qword_2541142E0 + 6) = 0;
    qword_2541142E0 = 0;
    qword_2541142F0 = 0;
    qword_2541142F8 = 0xFFFFFFFFLL;
    qword_2541142D0 = (uint64_t)&off_24ED7DAA8;
    qword_254114300 = (uint64_t)"StateMachineComponent";
    dword_254114308 = 0;
    xmmword_254114310 = 0u;
    unk_254114320 = 0u;
    xmmword_254114330 = 0u;
    qword_254114340 = 0;
    __cxa_guard_release(&qword_2541142A0);
  }
  return &qword_2541142D0;
}

void re::ecs2::initInfo_StateMachineComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x700177634F73DE0ELL;
  v21[1] = "StateMachineComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_319);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_319);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541142B0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "stateMachineAsset";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541142B8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "stateParameterBlackboardAsset";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x3800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541142C0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = re::introspect_StateMachineParameterBinding((re::IntrospectionBase **)1);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "m_boundParameters";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x17800000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2541142C8 = v19;
      __cxa_guard_release(&_MergedGlobals_319);
    }
  }
  *((_QWORD *)this + 2) = 0x1E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2541142B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::StateMachineComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::StateMachineComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::StateMachineComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::StateMachineComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::StateMachineComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::StateMachineComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::StateMachineComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::StateMachineComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_StateMachineComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateMachineComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StateMachineComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StateMachineComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StateMachineComponent>, this);
}

uint64_t *re::ecs2::allocInfo_StateMachineSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541142A8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541142A8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114348, 0);
    *(uint64_t *)((char *)&qword_254114358 + 6) = 0;
    qword_254114358 = 0;
    qword_254114368 = 0;
    qword_254114370 = 0xFFFFFFFFLL;
    qword_254114348 = (uint64_t)&off_24ED7DAA8;
    qword_254114378 = (uint64_t)"StateMachineSystem";
    dword_254114380 = 0;
    xmmword_254114388 = 0u;
    unk_254114398 = 0u;
    xmmword_2541143A8 = 0u;
    qword_2541143B8 = 0;
    __cxa_guard_release(&qword_2541142A8);
  }
  return &qword_254114348;
}

void re::ecs2::initInfo_StateMachineSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x628ABEEFE93FD8CALL;
  v5[1] = "StateMachineSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_StateMachineSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::StateMachineSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::StateMachineSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::StateMachineSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::StateMachineSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::StateMachineSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::StateMachineSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::StateMachineSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1);
  *v3 = &off_24ED6CBD0;
}

void *re::internal::defaultDestruct<re::ecs2::StateMachineSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::StateMachineSystem>(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  *v1 = &off_24ED6CBD0;
}

void *re::internal::defaultDestructV2<re::ecs2::StateMachineSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_StateMachineSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateMachineSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StateMachineSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StateMachineSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StateMachineSystem>, this);
}

void re::ecs2::StateMachineSystem::~StateMachineSystem(re::ecs2::StateMachineSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::StateMachineSystem::typeInfo(re::ecs2::StateMachineSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"StateMachineSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_StateMachineSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_StateMachineSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::StateMachineSystem>, 0);
}

double re::make::shared::unsafelyInplace<re::ecs2::StateMachineComponent>(ArcSharedObject *a1)
{
  _OWORD *v1;
  uint64_t v2;
  double result;

  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  v1 = (_OWORD *)((char *)a1 + 176);
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED59498;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_QWORD *)(v2 + 80) = &off_24ED59518;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 132) = 0u;
  *(_QWORD *)(v2 + 148) = 0x7FFFFFFFLL;
  *(_QWORD *)(v2 + 160) = 0;
  *(_BYTE *)(v2 + 168) = 0;
  *(_QWORD *)v1 = &off_24ED59548;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_DWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 220) = 0x7FFFFFFFLL;
  *(_DWORD *)(v2 + 264) = 0;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_QWORD *)((char *)v1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)v1 + 104) = 0u;
  *(_OWORD *)((char *)v1 + 120) = 0u;
  *(_DWORD *)(v2 + 312) = 0;
  *(_QWORD *)((char *)v1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)v1 + 152) = 0u;
  *(_OWORD *)((char *)v1 + 168) = 0u;
  result = 0.0;
  *(_DWORD *)(v2 + 360) = 0;
  *(_QWORD *)((char *)v1 + 188) = 0x7FFFFFFFLL;
  *(_QWORD *)(v2 + 408) = 0;
  *(_QWORD *)(v2 + 384) = 0;
  *(_QWORD *)(v2 + 392) = 0;
  *(_DWORD *)(v2 + 400) = 0;
  *(_QWORD *)(v2 + 376) = 0;
  *(_DWORD *)(v2 + 416) = 0;
  *(_QWORD *)(v2 + 472) = 0;
  *(_OWORD *)(v2 + 452) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  return result;
}

id re::internal::defaultRetain<re::ecs2::StateMachineSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::StateMachineSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

double re::makeBindNode@<D0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X8>)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;

  v10 = a1;
  if (a1)
  {
    v9 = 0;
    v6 = 0u;
    v7 = 0u;
    v8 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)v4 = &off_24ED6CE90;
    *(_QWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)&v6 + 1);
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 24) = v7;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 32) = *((_QWORD *)&v7 + 1);
    *((_QWORD *)&v6 + 1) = 0;
    v7 = 0uLL;
    *(_QWORD *)(v4 + 48) = v9;
    v9 = 0;
    ++v8;
    *(_DWORD *)(v4 + 40) = 1;
    *(_QWORD *)(a2 + 16) = v4;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v6 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v6 + 8);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

id re::BindPoint::addToBindPointStack<re::internal::WeakBindPointImpl<re::ecs2::ECSService>,re::ecs2::ECSService*&>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, sizeof(v9));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v9);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v9);
  v5 = a1[5] + 32 * a1[3];
  v6 = *a3;
  *(_QWORD *)(v5 - 32) = &off_24ED6D608;
  if (v6)
    v7 = (void *)(v6 + 8);
  else
    v7 = 0;
  return objc_initWeak((id *)(v5 - 24), v7);
}

double re::makeBindNode@<D0>(re *this@<X0>, uint64_t a2@<X8>)
{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  double result;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  re *v11;

  v11 = this;
  if (this)
  {
    v10 = 0;
    v7 = 0u;
    v8 = 0u;
    v9 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)v5 = &off_24ED6CC58;
    *(_QWORD *)(v5 + 8) = v7;
    *(_DWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&v7 + 1);
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 24) = v8;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 32) = *((_QWORD *)&v8 + 1);
    *((_QWORD *)&v7 + 1) = 0;
    v8 = 0uLL;
    *(_QWORD *)(v5 + 48) = v10;
    v10 = 0;
    ++v9;
    *(_DWORD *)(v5 + 40) = 1;
    *(_QWORD *)(a2 + 16) = v5;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v7 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v7 + 8);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  double result;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  re *v11;

  v11 = this;
  if (this)
  {
    v10 = 0;
    v7 = 0u;
    v8 = 0u;
    v9 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)v5 = &off_24ED6CFF8;
    *(_QWORD *)(v5 + 8) = v7;
    *(_DWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&v7 + 1);
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 24) = v8;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 32) = *((_QWORD *)&v8 + 1);
    *((_QWORD *)&v7 + 1) = 0;
    v8 = 0uLL;
    *(_QWORD *)(v5 + 48) = v10;
    v10 = 0;
    ++v9;
    *(_DWORD *)(v5 + 40) = 1;
    *(_QWORD *)(a2 + 16) = v5;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v7 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v7 + 8);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  _OWORD v8[2];
  int v9;
  uint64_t v10;
  re *v11;

  v11 = this;
  if (this)
  {
    v10 = 0;
    memset(v8, 0, sizeof(v8));
    v9 = 0;
    v5 = (*(uint64_t (**)(re *))(*(_QWORD *)v11 + 40))(v11);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v8 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v8 + 8);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

id re::BindPoint::addToBindPointStack<re::internal::WeakBindPointImpl<re::ecs2::Scene>,re::ecs2::Scene*&>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, sizeof(v9));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v9);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v9);
  v5 = a1[5] + 32 * a1[3];
  v6 = *a3;
  *(_QWORD *)(v5 - 32) = &off_24ED6D6D8;
  if (v6)
    v7 = (void *)(v6 + 8);
  else
    v7 = 0;
  return objc_initWeak((id *)(v5 - 24), v7);
}

id re::BindPoint::addToBindPointStack<re::internal::WeakBindPointImpl<re::ecs2::Entity>,re::ecs2::Entity*&>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, sizeof(v9));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v9);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v9);
  v5 = a1[5] + 32 * a1[3];
  v6 = *a3;
  *(_QWORD *)(v5 - 32) = &off_24ED6D7A8;
  if (v6)
    v7 = (void *)(v6 + 8);
  else
    v7 = 0;
  return objc_initWeak((id *)(v5 - 24), v7);
}

id re::BindPoint::addToBindPointStack<re::internal::WeakBindPointImpl<re::ecs2::Component>,re::ecs2::Component*&>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  memset(v9, 0, sizeof(v9));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v9);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v9);
  v5 = a1[5] + 32 * a1[3];
  v6 = *a3;
  *(_QWORD *)(v5 - 32) = &off_24ED6D878;
  if (v6)
    v7 = (void *)(v6 + 8);
  else
    v7 = 0;
  return objc_initWeak((id *)(v5 - 24), v7);
}

double re::makeEntityBindNodeForComponent@<D0>(re *this@<X0>, uint64_t a2@<X8>)
{
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  double result;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  re *v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v12 = this;
  if (this)
  {
    v11 = 0;
    v8 = 0u;
    v9 = 0u;
    v10 = 0;
    memset(v13, 0, sizeof(v13));
    re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)((char *)&v8 + 8), v13);
    re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v13);
    *(_QWORD *)(v11 + 32 * *((_QWORD *)&v9 + 1) - 32) = &off_24ED6D948;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)v6 = &off_24ED6CFF8;
    *(_QWORD *)(v6 + 8) = v8;
    *(_DWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)&v8 + 1);
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 24) = v9;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 32) = *((_QWORD *)&v9 + 1);
    *((_QWORD *)&v8 + 1) = 0;
    v9 = 0uLL;
    *(_QWORD *)(v6 + 48) = v11;
    v11 = 0;
    ++v10;
    *(_DWORD *)(v6 + 40) = 1;
    *(_QWORD *)(a2 + 16) = v6;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v8 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v8 + 8);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void re::BindPoint::addToBindPointStack<re::internal::WeakBindPointImpl<re::ecs2::Component>,re::ecs2::Component const*&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  void *v6;
  id *v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  memset(v8, 0, sizeof(v8));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v8);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v8);
  v5 = a1[5] + 32 * a1[3];
  if (*a3)
    v6 = (void *)(*a3 + 8);
  else
    v6 = 0;
  objc_initWeak((id *)v8, v6);
  *(_QWORD *)(v5 - 24) = 0;
  v7 = (id *)(v5 - 24);
  *(v7 - 1) = &off_24ED6D878;
  objc_moveWeak(v7, (id *)v8);
  objc_destroyWeak((id *)v8);
}

void `anonymous namespace'::SceneBindNodeImpl::~SceneBindNodeImpl(_anonymous_namespace_::SceneBindNodeImpl *this)
{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x2276933B8);
}

const char *re::internal::BindNodeImpl<`anonymous namespace'::SceneBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<`anonymous namespace'::SceneBindNodeImpl>::copyInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6CC58;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<`anonymous namespace'::SceneBindNodeImpl>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6CC58;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<`anonymous namespace'::SceneBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == "8"
      && re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

uint64_t `anonymous namespace'::SceneBindNodeImpl::nodeForURI@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  const char *v6;
  _anonymous_namespace_ *v7;
  uint64_t result;
  _QWORD *v9;
  unsigned __int8 v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = *(const char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = (_anonymous_namespace_ *)strncmp(*(const char **)a2, "scene", v5);
  if ((_DWORD)v7 || aScene_1[v5])
  {
    result = strncmp(v6, "service", v5);
    if ((_DWORD)result || aService[v5])
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
    else
    {
      if ((v10 & 1) == 0)
      {
        {
          re::introspect<re::ecs2::ECSService>(void)::info = re::ecs2::introspect_ECSService(0);
        }
      }
      v19 = 0;
      v14 = re::introspect<re::ecs2::ECSService>(void)::info;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      re::BindPoint::addToBindPointStack((re::BindPoint *)&v14, (const re::BindPoint *)(a1 + 8));
      memset(v20, 0, sizeof(v20));
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)&v15, v20);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v20);
      *(_QWORD *)(v19 + 32 * v17 - 32) = &off_24ED6CCF0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)v13 = &off_24ED6CE90;
      *(_QWORD *)(v13 + 8) = v14;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 16) = v15;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 24) = v16;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 32) = v17;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      *(_QWORD *)(v13 + 48) = v19;
      v19 = 0;
      ++v18;
      *(_DWORD *)(v13 + 40) = 1;
      *(_QWORD *)(a3 + 16) = v13;
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v15);
      return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v15);
    }
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *v9 = &off_24ED6CC58;
    v9[1] = *(_QWORD *)(a1 + 8);
    result = re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(v9 + 2), (uint64_t *)(a1 + 16));
    *(_QWORD *)(a3 + 16) = v9;
  }
  return result;
}

uint64_t `anonymous namespace'::SceneBindNodeImpl::relativeNodeForKey@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v6;
  const char *v7;
  size_t v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20[8];
  const char *v21;
  size_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  if (v20[0])
  {
    v14 = a1[1];
    v6 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v15, a1 + 2);
    v7 = v21;
    v8 = v22;
    v13[0] = 0;
    v13[1] = (uint64_t)&str_110;
    re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>,re::internal::SceneEntityRelationship>(&v14, v13);
    re::StringID::destroyString((re::StringID *)v13);
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_QWORD *)v11 = &off_24ED6CFF8;
    *(_QWORD *)(v11 + 8) = v14;
    *(_DWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 16) = v15;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 24) = v16;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 32) = v17;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    *(_QWORD *)(v11 + 48) = v19;
    v19 = 0;
    ++v18;
    *(_DWORD *)(v11 + 40) = 1;
    *(_QWORD *)(a3 + 16) = v11;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v15);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v15);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  result = (uint64_t)v23;
  if (v23)
  {
    if ((v24 & 1) != 0)
      return (*(uint64_t (**)(uint64_t *, uint64_t))(*v23 + 40))(v23, v25);
  }
  return result;
}

uint64_t `anonymous namespace'::SceneBindNodeImpl::readBindingKey(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (*(_BYTE *)(a4 + 16))
    *(_BYTE *)(a4 + 16) = 0;
  v12 = 0uLL;
  result = re::internal::parseNextBindingKey(a2, &v12, a3);
  if ((_DWORD)result)
  {
    v8 = *((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1) == 8)
    {
      v9 = v12;
      if (*(_QWORD *)v12 == 0x7365697469746E65)
      {
        v11 = 0uLL;
        result = re::internal::parseNextBindingKey(a2, &v11, a3);
        if ((_DWORD)result)
        {
          v10 = v11;
          *(_OWORD *)a4 = v12;
          if (!*(_BYTE *)(a4 + 16))
            *(_BYTE *)(a4 + 16) = 1;
          *(_OWORD *)(a4 + 24) = v10;
        }
        return result;
      }
    }
    else
    {
      v9 = v12;
    }
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v8;
    if (*(_BYTE *)(a4 + 16))
      *(_BYTE *)(a4 + 16) = 0;
    return 1;
  }
  return result;
}

uint64_t `anonymous namespace'::SceneBindNodeImpl::bindPointForKey@<X0>(uint64_t a1@<X0>, void *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned __int8 v8;
  _UNKNOWN **v9;
  _anonymous_namespace_ *v10;
  const char *v11;
  size_t v12;
  _anonymous_namespace_ *v13;
  uint64_t result;
  int v15;
  uint64_t v16[2];
  _BYTE v17[8];
  const char *v18;
  size_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  re::DynamicString::setCapacity(&v20, 0);
  v9 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v8 & 1) == 0)
  {
    v9 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v15)
    {
      re::introspect<re::ecs2::Entity>(void)::info = re::ecs2::introspect_Entity(0);
      v9 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  if (v9[23] == a2
  {
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)a4 = a2;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_DWORD *)(a4 + 32) = 0;
    re::BindPoint::addToBindPointStack((re::BindPoint *)a4, (const re::BindPoint *)(a1 + 8));
    v11 = v18;
    v12 = v19;
    v16[0] = 0;
    v16[1] = (uint64_t)&str_110;
    re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>,re::internal::SceneEntityRelationship>((_QWORD *)a4, v16);
    re::StringID::destroyString((re::StringID *)v16);
  }
  else
  {
    *(_QWORD *)(a4 + 40) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 0;
  }
  result = (uint64_t)v20;
  if (v20)
  {
    if ((v21 & 1) != 0)
      return (*(uint64_t (**)(void))(*v20 + 40))();
  }
  return result;
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::~ECSRelationshipBindPointImpl()
{
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::copyInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6CCF0;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6CCF0;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::equals(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == (_QWORD)&re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 56);
  if (!v4)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, v4, v6, v7)
       - 0x61C8864680B583E9;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 56);
  if (!v4)
    return 0;
  if (!a4)
    return 1;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 56);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, v4, v7, v8);
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 56);
  if (v4 && a4)
  {
    v5 = *a3;
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v4, v6, v7);
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 56);
  if (v4 && a4)
  {
    v5 = *a3;
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, v4, v6, v7);
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *a3;
  if (a2)
    v5 = *(_QWORD *)(a2 + 56);
  else
    v5 = 0;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, v5, v7, v8);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 56);
  if (!v4)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    v5 = *(_QWORD *)(a2 + 56);
    if (v5)
    {
      v7 = *a3;
      v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 112))(v7, v5, v8, v9, a5);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 56);
  if (!v4)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  if (a4)
  {
    v4 = *(_QWORD *)(a2 + 56);
    if (v4)
    {
      v5 = *a3;
      v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v8, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4, v6, v7);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneServiceRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 56);
  if (!v4)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v5, v4, v6, v7);
}

double `anonymous namespace'::EntityAndComponentBindingKeyHelper::entityNameFromBindingKey(uint64_t a1, __int128 *a2, re::DynamicString *a3)
{
  double result;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;

  if (*((_BYTE *)a2 + 16))
  {
    if (*((_QWORD *)a2 + 1) != 8 || **(_QWORD **)a2 != 0x7365697469746E65)
    {
      *(_BYTE *)a1 = 0;
      return result;
    }
    a2 = (__int128 *)((char *)a2 + 24);
  }
  v10 = *a2;
  if (re::internal::doesBindingKeyNeedUnescaping((uint64_t *)&v10))
  {
    re::internal::unescapeBindingKey((uint64_t *)&v10, a3);
    v6 = *((_QWORD *)a3 + 1);
    v7 = (char *)*((_QWORD *)a3 + 2);
    if ((v6 & 1) == 0)
      v7 = (char *)a3 + 9;
    v8 = v6 >> 1;
    v9 = v6 >> 1;
    if ((*((_QWORD *)a3 + 1) & 1) != 0)
      v9 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v9;
    *(_BYTE *)a1 = 1;
  }
  else
  {
    *(_BYTE *)a1 = 1;
    result = *(double *)&v10;
    *(_OWORD *)(a1 + 8) = v10;
  }
  return result;
}

void re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>,re::internal::SceneEntityRelationship>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, sizeof(v6));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v6);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v6);
  v4 = a1[5] + 32 * a1[3];
  *(_QWORD *)(v4 - 32) = &off_24ED6CDC0;
  v5 = *a2;
  *(_QWORD *)(v4 - 24) = *(_QWORD *)(v4 - 24) & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)(v4 - 24) = *a2 & 0xFFFFFFFFFFFFFFFELL | v5 & 1;
  *(_QWORD *)(v4 - 16) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::implTypeInfo(void)const::typeInfo;
}

re::StringID *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::copyInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6CDC0;
  return re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
}

uint64_t re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::moveInto(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  *a2 = &off_24ED6CDC0;
  v2 = *(_QWORD *)(result + 8);
  a2[1] = a2[1] & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[1] = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[2] = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>>::implTypeInfo(void)const::typeInfo
      && re::StringID::operator==((_QWORD *)(a1 + 8), a2 + 1);
}

unint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  re::internal::SceneEntityRelationship *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[0] = a3;
  v16[1] = a4;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = (re::internal::SceneEntityRelationship *)(a1 + 8);
  v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((v5 >> 31) ^ (v5 >> 1))) ^ ((0xBF58476D1CE4E5B9 * ((v5 >> 31) ^ (v5 >> 1))) >> 27));
  v7 = v6 ^ (v6 >> 31);
  if (a4)
  {
    v10 = re::internal::SceneEntityRelationship::resolveRelationship(v4, *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
    if (v10)
    {
      v11 = v10;
      v12 = *a3;
      v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
      v7 ^= (v7 << 6)
          + (v7 >> 2)
          + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, v11, v13, v14)
          - 0x61C8864680B583E9;
    }
  }
  return v7;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
  if (result)
  {
    if (a4)
    {
      v7 = result;
      v8 = *a3;
      v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 64))(v8, v7, v9, v10);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = a3;
  v12[1] = a4;
  result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
  if (result)
    v7 = a4 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = result;
    v9 = *a3;
    v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 72))(v9, v8, v10, v11);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v6 = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
  if (v6 && a4)
  {
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 80))(v7, v6, v8, v9);
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v6 = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
  if (v6 && a4)
  {
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 88))(v7, v6, v8, v9);
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v5 = *a3;
  if (a2)
    v6 = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
  else
    v6 = 0;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, v6, v8, v9);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (!a4)
    return 0;
  result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
  if (result)
  {
    v7 = result;
    v8 = *a3;
    v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(result + 8), *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
    if (result)
    {
      v8 = result;
      v9 = *a3;
      v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 112))(v9, v8, v10, v11, a5);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (!a4)
    return 0;
  result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
  if (result)
  {
    v7 = result;
    v8 = *a3;
    v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 120))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(result + 8), *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
    if (result)
    {
      v6 = result;
      v7 = *a3;
      v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 128))(v7, v6, v8, v9);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::SceneEntityRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (!a4)
    return 0;
  result = re::internal::SceneEntityRelationship::resolveRelationship((re::internal::SceneEntityRelationship *)(a1 + 8), *(void **)(*(_QWORD *)(a2 + 104) + 328), *(uint64_t **)(*(_QWORD *)(a2 + 104) + 344));
  if (result)
  {
    v7 = result;
    v8 = *a3;
    v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 136))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t re::internal::SceneEntityRelationship::resolveRelationship(re::internal::SceneEntityRelationship *this, void *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v3 = a3;
  v5 = 8 * (_QWORD)a2;
  v6 = 8 * (_QWORD)a2;
  v7 = a3;
  while (1)
  {
    v8 = *v7;
    if (re::StringID::operator==((_QWORD *)(*v7 + 272), this))
      break;
    ++v7;
    v6 -= 8;
    if (!v6)
      goto LABEL_7;
  }
  if (!v8)
  {
LABEL_7:
    while (1)
    {
      if ((*(_BYTE *)(*v3 + 289) & 4) != 0)
      {
        v9 = re::internal::SceneEntityRelationship::resolveRelationship_internal(this, *v3);
        if (v9)
          break;
      }
      ++v3;
      v5 -= 8;
      if (!v5)
        return 0;
    }
    return v9;
  }
  return v8;
}

uint64_t re::internal::SceneEntityRelationship::resolveRelationship_internal(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 328);
  if (!v2)
    return 0;
  v4 = *(uint64_t **)(a2 + 344);
  v5 = 8 * v2;
  while (1)
  {
    v6 = *v4;
    if ((*(_BYTE *)(*v4 + 289) & 4) != 0)
    {
      if (re::StringID::operator==((_QWORD *)(v6 + 272), a1))
        return v6;
      v7 = re::internal::SceneEntityRelationship::resolveRelationship_internal(a1, v6);
      if (v7)
        break;
    }
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return v7;
}

void `anonymous namespace'::ECSServiceBindNodeImpl::~ECSServiceBindNodeImpl(_anonymous_namespace_::ECSServiceBindNodeImpl *this)
{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x2276933B8);
}

const char *re::internal::BindNodeImpl<`anonymous namespace'::ECSServiceBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<`anonymous namespace'::ECSServiceBindNodeImpl>::copyInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6CE90;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<`anonymous namespace'::ECSServiceBindNodeImpl>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6CE90;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<`anonymous namespace'::ECSServiceBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == "8"
      && re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

uint64_t `anonymous namespace'::ECSServiceBindNodeImpl::nodeForURI@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a2 + 8);
  result = strncmp(*(const char **)a2, "service", v5);
  if ((_DWORD)result || aService[v5])
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    v8 = *(_QWORD *)(a1 + 8);
    *v7 = &off_24ED6CE90;
    v7[1] = v8;
    result = re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(v7 + 2), (uint64_t *)(a1 + 16));
    *(_QWORD *)(a3 + 16) = v7;
  }
  return result;
}

uint64_t `anonymous namespace'::ECSServiceBindNodeImpl::relativeNodeForKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v4;
  size_t v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *(const char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v16 = *(_QWORD *)(a1 + 8);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v17, (uint64_t *)(a1 + 16));
  v14 = 0;
  v15 = &str_110;
  memset(v22, 0, sizeof(v22));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)&v17, v22);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v22);
  v8 = v21 + 32 * v19;
  v9 = v14;
  v10 = v15;
  *(_QWORD *)(v8 - 32) = &off_24ED6CF28;
  *(_QWORD *)(v8 - 24) = v9;
  *(_QWORD *)(v8 - 16) = v10;
  v14 = 0;
  v15 = &str_110;
  re::StringID::destroyString((re::StringID *)&v14);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)v12 = &off_24ED6CC58;
  *(_QWORD *)(v12 + 8) = v16;
  *(_DWORD *)(v12 + 40) = 0;
  *(_QWORD *)(v12 + 16) = v17;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 24) = v18;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 32) = v19;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  *(_QWORD *)(v12 + 48) = v21;
  v21 = 0;
  ++v20;
  *(_DWORD *)(v12 + 40) = 1;
  *(_QWORD *)(a3 + 16) = v12;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v17);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v17);
}

double `anonymous namespace'::ECSServiceBindNodeImpl::bindPointForKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

double `anonymous namespace'::ECSServiceBindNodeImpl::bindPointWithOverrideForKey@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::implTypeInfo(void)const::typeInfo;
}

re::StringID *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::copyInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6CF28;
  return re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
}

uint64_t re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::moveInto(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  *a2 = &off_24ED6CF28;
  v2 = *(_QWORD *)(result + 8);
  a2[1] = a2[1] & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[1] = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[2] = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>>::implTypeInfo(void)const::typeInfo
      && re::StringID::operator==((_QWORD *)(a1 + 8), a2 + 1);
}

unint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v18[0] = a3;
  v18[1] = a4;
  v4 = (_QWORD *)(a1 + 8);
  v5 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(a1 + 8) >> 31) ^ (*(_QWORD *)(a1 + 8) >> 1));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  if (a4)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
    v10 = *(_QWORD *)(v9 + 24);
    if (v10)
    {
      v11 = *(uint64_t **)(v9 + 40);
      v12 = 8 * v10;
      while (1)
      {
        v13 = *v11;
        if (re::StringID::operator==((_QWORD *)(*v11 + 32), v4))
          break;
        ++v11;
        v12 -= 8;
        if (!v12)
          return v6;
      }
      if (v13)
      {
        v14 = *a3;
        v15 = re::Slice<re::internal::BindPointImplBase const*>::range(v18, 1uLL, a4);
        v6 ^= (v6 << 6)
            + (v6 >> 2)
            - 0x61C8864680B583E9
            + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, v13, v15, v16);
      }
    }
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    return 0;
  v9 = (_QWORD *)(a1 + 8);
  v10 = *(uint64_t **)(v7 + 40);
  v11 = 8 * v8;
  while (1)
  {
    v12 = *v10;
    if (re::StringID::operator==((_QWORD *)(*v10 + 32), v9))
      break;
    ++v10;
    v11 -= 8;
    if (!v11)
      return 0;
  }
  if (!v12)
    return 0;
  if (!a4)
    return 1;
  v13 = *a3;
  v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 64))(v13, v12, v14, v15);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  v8 = *(_QWORD *)(result + 24);
  if (v8)
  {
    v9 = (_QWORD *)(a1 + 8);
    v10 = *(uint64_t **)(result + 40);
    v11 = 8 * v8;
    while (1)
    {
      v12 = *v10;
      result = re::StringID::operator==((_QWORD *)(*v10 + 32), v9);
      if ((_DWORD)result)
        break;
      ++v10;
      v11 -= 8;
      if (!v11)
        return result;
    }
    if (v12)
      v13 = a4 == 0;
    else
      v13 = 1;
    if (!v13)
    {
      v14 = *a3;
      v15 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 72))(v14, v12, v15, v16);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    return 0;
  v9 = (_QWORD *)(a1 + 8);
  v10 = *(uint64_t **)(v7 + 40);
  v11 = 8 * v8;
  while (1)
  {
    v12 = *v10;
    if (re::StringID::operator==((_QWORD *)(*v10 + 32), v9))
      break;
    ++v10;
    v11 -= 8;
    if (!v11)
      return 0;
  }
  if (v12 && a4)
  {
    v14 = *a3;
    v15 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 80))(v14, v12, v15, v16);
  }
  return v12;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    return 0;
  v9 = (_QWORD *)(a1 + 8);
  v10 = *(uint64_t **)(v7 + 40);
  v11 = 8 * v8;
  while (1)
  {
    v12 = *v10;
    if (re::StringID::operator==((_QWORD *)(*v10 + 32), v9))
      break;
    ++v10;
    v11 -= 8;
    if (!v11)
      return 0;
  }
  if (v12 && a4)
  {
    v14 = *a3;
    v15 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 88))(v14, v12, v15, v16);
  }
  return v12;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v16[0] = a3;
  v16[1] = a4;
  if (!a4)
    return 0;
  v5 = *a3;
  if (a2 && (v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2), (v8 = *(_QWORD *)(v7 + 24)) != 0))
  {
    v9 = (_QWORD *)(a1 + 8);
    v10 = *(uint64_t **)(v7 + 40);
    v11 = 8 * v8;
    while (1)
    {
      v12 = *v10;
      if (re::StringID::operator==((_QWORD *)(*v10 + 32), v9))
        break;
      ++v10;
      v11 -= 8;
      if (!v11)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v12 = 0;
  }
  v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, v12, v13, v14);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  if (!a4)
    return 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    return 0;
  v9 = (_QWORD *)(a1 + 8);
  v10 = *(uint64_t **)(v7 + 40);
  v11 = 8 * v8;
  while (1)
  {
    v12 = *v10;
    if (re::StringID::operator==((_QWORD *)(*v10 + 32), v9))
      break;
    ++v10;
    v11 -= 8;
    if (!v11)
      return 0;
  }
  if (!v12)
    return 0;
  v13 = *a3;
  v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 104))(v13, v12, v14, v15);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  if (a4)
  {
    v8 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
    v9 = *(_QWORD *)(result + 24);
    if (v9)
    {
      v10 = (_QWORD *)(v8 + 8);
      v11 = *(uint64_t **)(result + 40);
      v12 = 8 * v9;
      while (1)
      {
        v13 = *v11;
        result = re::StringID::operator==((_QWORD *)(*v11 + 32), v10);
        if ((_DWORD)result)
          break;
        ++v11;
        v12 -= 8;
        if (!v12)
          return result;
      }
      if (v13)
      {
        v14 = *a3;
        v15 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 112))(v14, v13, v15, v16, a5);
      }
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  if (!a4)
    return 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    return 0;
  v9 = (_QWORD *)(a1 + 8);
  v10 = *(uint64_t **)(v7 + 40);
  v11 = 8 * v8;
  while (1)
  {
    v12 = *v10;
    if (re::StringID::operator==((_QWORD *)(*v10 + 32), v9))
      break;
    ++v10;
    v11 -= 8;
    if (!v11)
      return 0;
  }
  if (!v12)
    return 0;
  v13 = *a3;
  v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 120))(v13, v12, v14, v15);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  if (a4)
  {
    v6 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
    v7 = *(_QWORD *)(result + 24);
    if (v7)
    {
      v8 = (_QWORD *)(v6 + 8);
      v9 = *(uint64_t **)(result + 40);
      v10 = 8 * v7;
      while (1)
      {
        v11 = *v9;
        result = re::StringID::operator==((_QWORD *)(*v9 + 32), v8);
        if ((_DWORD)result)
          break;
        ++v9;
        v10 -= 8;
        if (!v10)
          return result;
      }
      if (v11)
      {
        v12 = *a3;
        v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 128))(v12, v11, v13, v14);
      }
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ServiceSceneRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  if (!a4)
    return 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    return 0;
  v9 = (_QWORD *)(a1 + 8);
  v10 = *(uint64_t **)(v7 + 40);
  v11 = 8 * v8;
  while (1)
  {
    v12 = *v10;
    if (re::StringID::operator==((_QWORD *)(*v10 + 32), v9))
      break;
    ++v10;
    v11 -= 8;
    if (!v11)
      return 0;
  }
  if (!v12)
    return 0;
  v13 = *a3;
  v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 136))(v13, v12, v14, v15);
}

void `anonymous namespace'::EntityBindNodeImpl::~EntityBindNodeImpl(_anonymous_namespace_::EntityBindNodeImpl *this)
{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x2276933B8);
}

const char *re::internal::BindNodeImpl<`anonymous namespace'::EntityBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<`anonymous namespace'::EntityBindNodeImpl>::copyInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6CFF8;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<`anonymous namespace'::EntityBindNodeImpl>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6CFF8;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<`anonymous namespace'::EntityBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == "8"
      && re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

uint64_t `anonymous namespace'::EntityBindNodeImpl::nodeForURI@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  const char *v6;
  _anonymous_namespace_ *v7;
  uint64_t result;
  _QWORD *v9;
  unsigned __int8 v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  void (**v14)(_anonymous_namespace_::SceneBindNodeImpl *__hidden);
  unsigned __int8 v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v6 = *(const char **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = (_anonymous_namespace_ *)strncmp(*(const char **)a2, "entity", v5);
  if ((_DWORD)v7 || aEntity[v5])
  {
    if (!strncmp(v6, "scene", v5) && !aScene_1[v5])
    {
      if ((v10 & 1) == 0
      {
        re::introspect<re::ecs2::Scene>(void)::info = re::ecs2::introspect_Scene(0);
      }
      v24 = 0;
      v19 = re::introspect<re::ecs2::Scene>(void)::info;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      re::BindPoint::addToBindPointStack((re::BindPoint *)&v19, (const re::BindPoint *)(a1 + 8));
      v25 = 0u;
      v26 = 0u;
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)&v20, &v25);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v25);
      *(_QWORD *)(v24 + 32 * v22 - 32) = &off_24ED6D090;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      v14 = &off_24ED6CC58;
    }
    else
    {
      result = strncmp(v6, "service", v5);
      if ((_DWORD)result || aService[v5])
      {
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        return result;
      }
      if ((v15 & 1) == 0)
      {
        {
          re::introspect<re::ecs2::ECSService>(void)::info = re::ecs2::introspect_ECSService(0);
        }
      }
      v24 = 0;
      v19 = re::introspect<re::ecs2::ECSService>(void)::info;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      re::BindPoint::addToBindPointStack((re::BindPoint *)&v19, (const re::BindPoint *)(a1 + 8));
      v25 = 0u;
      v26 = 0u;
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)&v20, &v25);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v25);
      *(_QWORD *)(v24 + 32 * v22 - 32) = &off_24ED6D090;
      v25 = 0u;
      v26 = 0u;
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)&v20, &v25);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v25);
      *(_QWORD *)(v24 + 32 * v22 - 32) = &off_24ED6CCF0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      v14 = &off_24ED6CE90;
    }
    *(_QWORD *)v13 = v14;
    *(_QWORD *)(v13 + 8) = v19;
    *(_DWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 16) = v20;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 24) = v21;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 32) = v22;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    *(_QWORD *)(v13 + 48) = v24;
    v24 = 0;
    ++v23;
    *(_DWORD *)(v13 + 40) = 1;
    *(_QWORD *)(a3 + 16) = v13;
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v20);
    return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v20);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *v9 = &off_24ED6CFF8;
    v9[1] = *(_QWORD *)(a1 + 8);
    result = re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(v9 + 2), (uint64_t *)(a1 + 16));
    *(_QWORD *)(a3 + 16) = v9;
  }
  return result;
}

uint64_t `anonymous namespace'::EntityBindNodeImpl::relativeNodeForKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _anonymous_namespace_ *v5;
  int *v7;
  int v8;
  int v9;
  re::ecs2::ComponentTypeRegistry *v11;
  char *v12;
  const char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  _anonymous_namespace_ *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  size_t v21;
  _anonymous_namespace_ *v22;
  _anonymous_namespace_ *v23;
  _anonymous_namespace_ *v24;
  _BYTE v26[8];
  const char *v27;
  size_t v28;
  _BYTE v29[8];
  const char *v30;
  size_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v36 = *(_QWORD *)(a1 + 8);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)&v37, (uint64_t *)(a1 + 16));
  v33 = 0;
  v34 = 0;
  v35 = 0;
  re::DynamicString::setCapacity(&v32, 0);
  if (*(_BYTE *)(a2 + 16)
    && *(_QWORD *)(a2 + 8) == 8
    && **(_QWORD **)a2 == 0x65766974616C6572
    && *(_QWORD *)(a2 + 32) == 6)
  {
    v7 = *(int **)(a2 + 24);
    v8 = *v7;
    v9 = *((unsigned __int16 *)v7 + 2);
    if (v8 == 1701994864 && v9 == 29806)
    {
      v42 = 0u;
      v43 = 0u;
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)&v37, &v42);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v42);
      *(_QWORD *)(v41 + 32 * v39 - 32) = &off_24ED6D160;
      goto LABEL_19;
    }
  }
  if (v26[0])
  {
    v12 = re::ecs2::ComponentTypeRegistry::instance(v11);
    v13 = v27;
    v14 = v28;
    *(_QWORD *)&v42 = 0;
    *((_QWORD *)&v42 + 1) = &str_110;
    v15 = re::ecs2::ComponentTypeRegistry::componentTypeWithName((os_unfair_lock_s *)v12, (const re::StringID *)&v42);
    re::StringID::destroyString((re::StringID *)&v42);
    if (v15)
    {
      v42 = 0u;
      v43 = 0u;
      re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)&v37, &v42);
      re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v42);
      v16 = v41 + 32 * v39;
      *(_QWORD *)(v16 - 32) = &off_24ED6D230;
      *(_QWORD *)(v16 - 24) = v15;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
LABEL_20:
      *(_QWORD *)(a3 + 16) = v19;
      goto LABEL_21;
    }
  }
  if (v29[0])
  {
    v20 = v30;
    v21 = v31;
    *(_QWORD *)&v42 = 0;
    *((_QWORD *)&v42 + 1) = &str_110;
    re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>,re::internal::EntityChildRelationship>(&v36, (uint64_t *)&v42);
    re::StringID::destroyString((re::StringID *)&v42);
LABEL_19:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_QWORD *)v19 = &off_24ED6CFF8;
    *(_QWORD *)(v19 + 8) = v36;
    *(_DWORD *)(v19 + 40) = 0;
    *(_QWORD *)(v19 + 16) = v37;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 24) = v38;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 32) = v39;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    *(_QWORD *)(v19 + 48) = v41;
    v41 = 0;
    ++v40;
    *(_DWORD *)(v19 + 40) = 1;
    goto LABEL_20;
  }
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
LABEL_21:
  if (v32 && (v33 & 1) != 0)
    (*(void (**)(void))(*v32 + 40))();
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v37);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v37);
}

uint64_t `anonymous namespace'::EntityBindNodeImpl::readBindingKey(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  size_t v8;
  const void *v9;
  const char *v10;
  __int128 v11;
  __int128 v12;
  size_t __n[2];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (*(_BYTE *)(a4 + 16))
    *(_BYTE *)(a4 + 16) = 0;
  __n[0] = 0;
  __n[1] = 0;
  result = re::internal::parseNextBindingKey(a2, __n, a3);
  if ((_DWORD)result)
  {
    v8 = __n[1];
    if (__n[1] == 8)
    {
      v9 = (const void *)__n[0];
      if (*(_QWORD *)__n[0] == 0x7365697469746E65)
        goto LABEL_10;
      v10 = "relative";
    }
    else
    {
      if (__n[1] != 10)
      {
        v9 = (const void *)__n[0];
LABEL_15:
        *(_QWORD *)a4 = v9;
        *(_QWORD *)(a4 + 8) = v8;
        if (*(_BYTE *)(a4 + 16))
          *(_BYTE *)(a4 + 16) = 0;
        return 1;
      }
      v9 = (const void *)__n[0];
      v10 = "components";
    }
    if (!memcmp(v9, v10, __n[1]))
    {
LABEL_10:
      v12 = 0uLL;
      result = re::internal::parseNextBindingKey(a2, &v12, a3);
      if ((_DWORD)result)
      {
        v11 = v12;
        *(_OWORD *)a4 = *(_OWORD *)__n;
        if (!*(_BYTE *)(a4 + 16))
          *(_BYTE *)(a4 + 16) = 1;
        *(_OWORD *)(a4 + 24) = v11;
      }
      return result;
    }
    goto LABEL_15;
  }
  return result;
}

uint64_t `anonymous namespace'::EntityBindNodeImpl::bindPointForKey@<X0>(uint64_t a1@<X0>, const re::IntrospectionBase *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  re::ecs2::ComponentTypeRegistry *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  char *v12;
  const char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  _anonymous_namespace_ *v19;
  double v20;
  const char *v21;
  size_t v22;
  _anonymous_namespace_ *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26[2];
  _BYTE v27[8];
  const char *v28;
  size_t v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  v30 = (unint64_t)a2;
  v31 = 0uLL;
  v32 = 0;
  re::BindPoint::addToBindPointStack((re::BindPoint *)&v30, (const re::BindPoint *)(a1 + 8));
  if (!a2)
    goto LABEL_6;
  v8 = re::ecs2::ComponentTypeRegistry::instance(v7);
  v9 = re::ecs2::ComponentTypeRegistry::componentTypeWithIntrospectionInfo((os_unfair_lock_s *)v8, a2);
  if (v9)
  {
    v10 = v9;
LABEL_8:
    v34 = 0u;
    v35 = 0u;
    re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)((char *)&v30 + 8), &v34);
    re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v34);
    v15 = *((_QWORD *)&v31 + 1);
    v16 = v33 + 32 * *((_QWORD *)&v31 + 1);
    *(_QWORD *)(v16 - 32) = &off_24ED6D230;
    *(_QWORD *)(v16 - 24) = v10;
    *(_OWORD *)a4 = v30;
    *(_QWORD *)(a4 + 16) = v31;
    *(_QWORD *)(a4 + 24) = v15;
    *((_QWORD *)&v30 + 1) = 0;
    v31 = 0uLL;
    *(_QWORD *)(a4 + 40) = v33;
    v33 = 0;
    ++v32;
    *(_DWORD *)(a4 + 32) = 1;
    goto LABEL_12;
  }
  if ((v11 & 1) == 0)
  {
    if ((_DWORD)v9)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
    }
  }
  if (re::introspect<re::ecs2::Component>(void)::info == (_UNKNOWN *)a2)
  {
LABEL_6:
    if (v27[0])
    {
      v12 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v9);
      v13 = v28;
      v14 = v29;
      *(_QWORD *)&v34 = 0;
      *((_QWORD *)&v34 + 1) = &str_110;
      v10 = re::ecs2::ComponentTypeRegistry::componentTypeWithName((os_unfair_lock_s *)v12, (const re::StringID *)&v34);
      re::StringID::destroyString((re::StringID *)&v34);
      if (v10)
        goto LABEL_8;
    }
  }
  if ((v17 & 1) == 0)
  {
    if ((_DWORD)v9)
    {
      re::introspect<re::ecs2::Entity>(void)::info = re::ecs2::introspect_Entity(0);
    }
  }
  if ((const re::IntrospectionBase *)re::introspect<re::ecs2::Entity>(void)::info != a2)
  {
LABEL_11:
    *(_QWORD *)(a4 + 40) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 32) = 0;
    goto LABEL_12;
  }
  *((_QWORD *)&v34 + 1) = 0;
  v35 = 0uLL;
  re::DynamicString::setCapacity(&v34, 0);
  if (!v27[0])
  {
    if ((_QWORD)v34 && (BYTE8(v34) & 1) != 0)
      (*(void (**)(double))(*(_QWORD *)v34 + 40))(v20);
    goto LABEL_11;
  }
  v21 = v28;
  v22 = v29;
  v26[0] = 0;
  v26[1] = (uint64_t)&str_110;
  re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>,re::internal::EntityChildRelationship>(&v30, v26);
  re::StringID::destroyString((re::StringID *)v26);
  v24 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v24;
  *((_QWORD *)&v30 + 1) = 0;
  v31 = 0uLL;
  v25 = v34;
  *(_QWORD *)(a4 + 40) = v33;
  v33 = 0;
  ++v32;
  *(_DWORD *)(a4 + 32) = 1;
  if (v25 && (BYTE8(v34) & 1) != 0)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 40))(v25, v35);
LABEL_12:
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v30 + 8);
  return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v30 + 8);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::~ECSRelationshipBindPointImpl()
{
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::copyInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6D090;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6D090;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::equals(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == (_QWORD)&re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v5, v7, v8)
       - 0x61C8864680B583E9;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  if (!a4)
    return 1;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, v5, v7, v8);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
    v6 = a4 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v7, v5, v8, v9);
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5 && a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5 && a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v4 = *a3;
  if (a2)
  {
    do
    {
      v5 = a2;
      a2 = *(_QWORD *)(a2 + 24);
    }
    while (a2);
    v6 = *(_QWORD *)(v5 + 16);
  }
  else
  {
    v6 = 0;
  }
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, v6, v8, v9);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, v5, v7, v8);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    do
    {
      v6 = a2;
      a2 = *(_QWORD *)(a2 + 24);
    }
    while (a2);
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v8 = *a3;
      v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 112))(v8, v7, v9, v10, a5);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 120))(v6, v5, v7, v8);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    do
    {
      v4 = a2;
      a2 = *(_QWORD *)(a2 + 24);
    }
    while (a2);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = *a3;
      v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 128))(v6, v5, v7, v8);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntitySceneRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  do
  {
    v4 = a2;
    a2 = *(_QWORD *)(a2 + 24);
  }
  while (a2);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 136))(v6, v5, v7, v8);
}

uint64_t `anonymous namespace'::EntityAndComponentBindingKeyHelper::componentNameFromBindingKey(uint64_t result, __int128 *a2)
{
  BOOL v2;
  __int128 v3;

  if (*((_BYTE *)a2 + 16))
  {
    if (*((_QWORD *)a2 + 1) != 10
      || (**(_QWORD **)a2 == 0x6E656E6F706D6F63
        ? (v2 = *(unsigned __int16 *)(*(_QWORD *)a2 + 8) == 29556)
        : (v2 = 0),
          !v2))
    {
      *(_BYTE *)result = 0;
      return result;
    }
    *(_BYTE *)result = 1;
    v3 = *(__int128 *)((char *)a2 + 24);
  }
  else
  {
    *(_BYTE *)result = 1;
    v3 = *a2;
  }
  *(_OWORD *)(result + 8) = v3;
  return result;
}

void re::BindPoint::addToBindPointStack<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>,re::internal::EntityChildRelationship>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, sizeof(v6));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v6);
  re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v6);
  v4 = a1[5] + 32 * a1[3];
  *(_QWORD *)(v4 - 32) = &off_24ED6D538;
  v5 = *a2;
  *(_QWORD *)(v4 - 24) = *(_QWORD *)(v4 - 24) & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)(v4 - 24) = *a2 & 0xFFFFFFFFFFFFFFFELL | v5 & 1;
  *(_QWORD *)(v4 - 16) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::~ECSRelationshipBindPointImpl()
{
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::copyInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6D160;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6D160;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::equals(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == (_QWORD)&re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4 || (*(_BYTE *)(v4 + 288) & 0x80) != 0)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, v4, v6, v7)
       - 0x61C8864680B583E9;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4 || (*(_BYTE *)(v4 + 288) & 0x80) != 0)
    return 0;
  if (!a4)
    return 1;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 && (*(_BYTE *)(v4 + 288) & 0x80) == 0)
  {
    if (a4)
    {
      v5 = *a3;
      v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v8, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, v4, v6, v7);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 288) & 0x80) != 0)
    {
      return 0;
    }
    else if (a4)
    {
      v5 = *a3;
      v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v4, v6, v7);
    }
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if ((*(_BYTE *)(v4 + 288) & 0x80) != 0)
    {
      return 0;
    }
    else if (a4)
    {
      v5 = *a3;
      v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, v4, v6, v7);
    }
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v4 = *a3;
  if (a2 && (v5 = *(_QWORD *)(a2 + 24)) != 0)
  {
    if ((*(_BYTE *)(v5 + 288) & 0x80) != 0)
      v6 = 0;
    else
      v6 = *(_QWORD *)(a2 + 24);
  }
  else
  {
    v6 = 0;
  }
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, v6, v8, v9);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4 || (*(_BYTE *)(v4 + 288) & 0x80) != 0)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (v5)
    {
      if ((*(_BYTE *)(v5 + 288) & 0x80) == 0)
      {
        v7 = *a3;
        v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 112))(v7, v5, v8, v9, a5);
      }
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4 || (*(_BYTE *)(v4 + 288) & 0x80) != 0)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  if (a4)
  {
    v4 = *(_QWORD *)(a2 + 24);
    if (v4)
    {
      if ((*(_BYTE *)(v4 + 288) & 0x80) == 0)
      {
        v5 = *a3;
        v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v8, 1uLL, a4);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4, v6, v7);
      }
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityParentRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 24);
  if (!v4 || (*(_BYTE *)(v4 + 288) & 0x80) != 0)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::~ECSRelationshipBindPointImpl()
{
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::copyInto(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED6D230;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::moveInto(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED6D230;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>>::implTypeInfo(void)const::typeInfo
      && *(_QWORD *)(a1 + 8) == a2[1];
}

unint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  const re::ecs2::ComponentTypeBase *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  v4 = *(const re::ecs2::ComponentTypeBase **)(a1 + 8);
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((unint64_t)v4 ^ ((unint64_t)v4 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                         * ((unint64_t)v4 ^ ((unint64_t)v4 >> 30))) >> 27));
  v6 = v5 ^ (v5 >> 31);
  if (a4)
  {
    v9 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), v4);
    if (v9)
    {
      v10 = v9;
      v11 = *a3;
      v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
      v6 ^= (v6 << 6)
          + (v6 >> 2)
          + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, v10, v12, v13)
          - 0x61C8864680B583E9;
    }
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (result)
  {
    if (a4)
    {
      v7 = result;
      v8 = *a3;
      v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 64))(v8, v7, v9, v10);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = a3;
  v12[1] = a4;
  result = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (result)
    v7 = a4 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = result;
    v9 = *a3;
    v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 72))(v9, v8, v10, v11);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (v6 && a4)
  {
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 80))(v7, v6, v8, v9);
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (v6 && a4)
  {
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 88))(v7, v6, v8, v9);
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v5 = *a3;
  if (a2)
    v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  else
    v6 = 0;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, v6, v8, v9);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (!a4)
    return 0;
  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (result)
  {
    v7 = result;
    v8 = *a3;
    v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = a3;
  v12[1] = a4;
  if (a4)
  {
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(result + 8));
    if (result)
    {
      v8 = result;
      v9 = *a3;
      v10 = re::Slice<re::internal::BindPointImplBase const*>::range(v12, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 112))(v9, v8, v10, v11, a5);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (!a4)
    return 0;
  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (result)
  {
    v7 = result;
    v8 = *a3;
    v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 120))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(result + 8));
    if (result)
    {
      v6 = result;
      v7 = *a3;
      v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 128))(v7, v6, v8, v9);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityComponentRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (!a4)
    return 0;
  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), *(const re::ecs2::ComponentTypeBase **)(a1 + 8));
  if (result)
  {
    v7 = result;
    v8 = *a3;
    v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 136))(v8, v7, v9, v10);
  }
  return result;
}

uint64_t `anonymous namespace'::ComponentMemberNodeImpl::ComponentMemberNodeImpl(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  re::DynamicString *v6;
  const char *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  double v10;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24ED6D300;
  *(_QWORD *)(a1 + 88) = 0;
  v6 = (re::DynamicString *)(a1 + 96);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  v7 = *(const char **)(a3 + 32);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(a1 + 128), 0);
  *(_QWORD *)(a1 + 8) = a2[3] - 1;
  (**(void (***)(_QWORD *__return_ptr, uint64_t, _QWORD *, double))a3)(v12, a3, a2, v10);
  if ((_QWORD *)(a1 + 16) != v12)
    re::BindNode::move((re::BindNode *)(a1 + 16), (re::BindNode *)v12);
  re::BindNode::deinit((re::BindNode *)v12);
  return a1;
}

double re::BindPoint::addToBindPointStack<re::internal::ComponentMemberBindPointImpl>(_QWORD *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  memset(v8, 0, sizeof(v8));
  re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a1 + 1), v8);
  v4 = re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)v8);
  v5 = a1[5] + 32 * a1[3];
  *(_QWORD *)(v5 - 32) = 0;
  *(_QWORD *)(v5 - 24) = a2;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)a2 + 32))(a2, 96, 8, v4);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)v6 = &off_24ED6D398;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = &str_110;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = &str_110;
  result = 0.0;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_DWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v5 - 16) = v6;
  return result;
}

void `anonymous namespace'::ComponentMemberNodeImpl::~ComponentMemberNodeImpl(_anonymous_namespace_::ComponentMemberNodeImpl *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  v3 = (_OWORD *)((char *)this + 128);
  v2 = *((_QWORD *)this + 16);
  if (v2)
  {
    if ((*((_BYTE *)this + 136) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 18));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *((_QWORD *)this + 12);
  if (v4)
  {
    if ((*((_BYTE *)this + 104) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 14));
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
  }
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56);
  re::BindNode::deinit((_anonymous_namespace_::ComponentMemberNodeImpl *)((char *)this + 16));
}

{
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindNodeImpl<`anonymous namespace'::ComponentMemberNodeImpl>::implTypeInfo()
{
}

re::DynamicString *re::internal::BindNodeImpl<`anonymous namespace'::ComponentMemberNodeImpl>::copyInto(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a1[1];
  *(_QWORD *)a2 = &off_24ED6D300;
  *(_QWORD *)(a2 + 8) = v4;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  re::BindNode::copy((re::BindNode *)(a2 + 16), (const re::BindNode *)(a1 + 2));
  *(_QWORD *)(a2 + 48) = a1[6];
  re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray(a2 + 56, a1 + 7);
  re::DynamicString::DynamicString((re::DynamicString *)(a2 + 96), (const re::DynamicString *)(a1 + 12));
  return re::DynamicString::DynamicString((re::DynamicString *)(a2 + 128), (const re::DynamicString *)(a1 + 16));
}

double re::internal::BindNodeImpl<`anonymous namespace'::ComponentMemberNodeImpl>::moveInto(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1[1];
  *(_QWORD *)a2 = &off_24ED6D300;
  *(_QWORD *)(a2 + 8) = v4;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  re::BindNode::move((re::BindNode *)(a2 + 16), (re::BindNode *)(a1 + 2));
  re::BindPoint::BindPoint(a2 + 48, a1 + 6);
  result = 0.0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_QWORD *)(a2 + 120) = a1[15];
  v6 = a1[13];
  *(_QWORD *)(a2 + 96) = a1[12];
  a1[12] = 0;
  v7 = a1[14];
  a1[15] = 0;
  v9 = *(_QWORD *)(a2 + 104);
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = v6;
  *(_QWORD *)(a2 + 112) = v7;
  a1[13] = v9;
  a1[14] = v8;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_QWORD *)(a2 + 152) = a1[19];
  v10 = a1[17];
  *(_QWORD *)(a2 + 128) = a1[16];
  a1[16] = 0;
  v11 = a1[18];
  a1[19] = 0;
  v13 = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 136) = v10;
  *(_QWORD *)(a2 + 144) = v11;
  a1[17] = v13;
  a1[18] = v12;
  return result;
}

BOOL re::internal::BindNodeImpl<`anonymous namespace'::ComponentMemberNodeImpl>::equals(_QWORD *a1, uint64_t *a2)
{
      && a1[1] == a2[1]
      && re::BindNode::operator==(a1 + 2, a2 + 2)
      && re::BindPoint::operator==((re::BindPoint *)(a1 + 6), (re::BindPoint *)(a2 + 6))
      && re::DynamicString::operator==((uint64_t)(a1 + 12), (uint64_t)(a2 + 12))
      && re::DynamicString::operator==((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
}

double `anonymous namespace'::ComponentMemberNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double `anonymous namespace'::ComponentMemberNodeImpl::relativeNodeForKey@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a1[9])
  {
    v10 = 0u;
    v11 = 0u;
    re::BindNode::copy((re::BindNode *)&v10, (const re::BindNode *)(a1 + 2));
  }
  else
  {
    v6 = a1 + 2;
    v7 = a1[2];
    if (!v7)
    {
      v6 = (uint64_t *)a1[4];
      v7 = *v6;
    }
    v8 = (_anonymous_namespace_ *)(*(_QWORD *(**)(__int128 *__return_ptr, uint64_t *, uint64_t))(v7 + 56))(&v10, v6, a2);
    if (!((unint64_t)v10 | (unint64_t)v11))
    {
      *a3 = 0u;
      a3[1] = 0u;
      return re::BindNode::deinit((re::BindNode *)&v10);
    }
  }
  return re::BindNode::deinit((re::BindNode *)&v10);
}

uint64_t `anonymous namespace'::ComponentMemberNodeImpl::readBindingKey(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  v3 = v4;
  if (!v4)
  {
    v2 = *(uint64_t **)(a1 + 32);
    v3 = *v2;
  }
  return (*(uint64_t (**)(uint64_t *))(v3 + 64))(v2);
}

void `anonymous namespace'::ComponentMemberNodeImpl::bindPointForKey(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  re::BindNode *v8;
  char *v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = a1[17];
  v7 = v6 >> 1;
  if ((v6 & 1) == 0)
    v7 = v6 >> 1;
  if (v7)
  {
    v8 = (re::BindNode *)(a1 + 2);
    v9 = (char *)a1[18];
    v10 = (char *)a1 + 137;
    if ((v6 & 1) != 0)
      v11 = v9;
    else
      v11 = v10;
    *(_QWORD *)&v17 = v11;
    *((_QWORD *)&v17 + 1) = v7;
    v12 = v18;
    v13.n128_f64[0] = re::BindNode::relativeNode(v8, &v17, (re::BindNode *)v18);
    v14 = v18[0];
    if (!v18[0])
    {
      v12 = v19;
      v14 = *v19;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v14 + 72))(v12, a2, a3, v13);
    re::BindNode::deinit((re::BindNode *)v18);
  }
  else
  {
    v15 = a1 + 2;
    v16 = a1[2];
    if (!v16)
    {
      v15 = (uint64_t *)a1[4];
      v16 = *v15;
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 72))(v15, a2, a3);
  }
}

uint64_t `anonymous namespace'::ComponentMemberNodeImpl::bindPointWithOverrideForKey@<X0>(uint64_t a1@<X0>, __objc2_class_ro *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _anonymous_namespace_ *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  size_t v13;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  re::BindNode *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const re::IntrospectionBase *v26;
  _QWORD *v27;
  _anonymous_namespace_ *v28;
  uint64_t v29;
  size_t v30;
  const char *v31;
  size_t v32;
  re::BindNode *v33;
  re::BindNode *v34;
  __int128 v35;
  uint64_t result;
  char *v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  re::BindNode *v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  re::BindNode *v50[5];

  v50[4] = *(re::BindNode **)MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 72))
  {
    v8 = re::DynamicString::DynamicString((re::DynamicString *)&v43, (const re::DynamicString *)(a1 + 128));
    if ((v44 & 1) != 0)
      v9 = v44 >> 1;
    else
      v9 = v44 >> 1;
    if (v9)
      v8 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)&v43, ".", 1uLL);
    v40 = 0uLL;
    v10 = *(_QWORD *)(a3 + 8);
    if (v10)
      v11 = v10 + 1;
    else
      v11 = 0;
    *((_QWORD *)&v39 + 1) = 0;
    re::DynamicString::setCapacity(&v39, v11);
    re::DynamicString::operator=((re::DynamicString *)&v39, a3);
    if ((BYTE8(v39) & 1) != 0)
      v12 = (const char *)v40;
    else
      v12 = (char *)&v39 + 9;
    if ((BYTE8(v39) & 1) != 0)
      v13 = *((_QWORD *)&v39 + 1) >> 1;
    else
      v13 = BYTE8(v39) >> 1;
    re::DynamicString::append((re::DynamicString *)&v43, v12, v13);
    v14 = (_anonymous_namespace_ *)v39;
    if ((_QWORD)v39 && (BYTE8(v39) & 1) != 0)
      v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v39 + 40))();
    v42 = 0;
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
    v46 = 0u;
    v47 = 0u;
    re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)((char *)&v39 + 8), &v46);
    re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v46);
    v15 = v42 + 32 * *((_QWORD *)&v40 + 1);
    *(_QWORD *)(v15 - 32) = &off_24ED6D468;
    *(_QWORD *)(v15 - 24) = 0;
    re::makeRelativeBindNode(*(_anonymous_namespace_ **)(a1 + 48), (uint64_t *)&v39, (uint64_t)v50);
    v16 = v45;
    if ((v44 & 1) == 0)
      v16 = (re::BindNode *)((char *)&v44 + 1);
    v17 = v44 >> 1;
    if ((v44 & 1) != 0)
      v17 = v44 >> 1;
    v37 = (char *)v16;
    v38 = v17;
    re::BindNode::bindPoint(v50, (uint64_t)a2, (uint64_t *)&v37, (uint64_t)&v46);
    if (*((_QWORD *)&v47 + 1))
    {
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)a4 = a2;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      *(_DWORD *)(a4 + 32) = 0;
      re::BindPoint::addToBindPointStack((re::BindPoint *)a4, (const re::BindPoint *)(a1 + 48));
      v18 = re::BindPoint::stackItemImpl((re::BindPoint *)a4, *(_QWORD *)(a1 + 8));
      v19 = *(_QWORD *)(a1 + 48);
      v20 = *(_QWORD *)(a1 + 104);
      v21 = *(_QWORD *)(a1 + 112);
      if ((v20 & 1) == 0)
        v21 = a1 + 105;
      v22 = v20 >> 1;
      v23 = v20 >> 1;
      if ((*(_QWORD *)(a1 + 104) & 1) != 0)
        v23 = v22;
      v37 = (char *)v21;
      v38 = v23;
      re::internal::ComponentMemberBindPointImpl::init(v18, v19, &v37, &v46);
    }
    else
    {
      *(_QWORD *)(a4 + 40) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_DWORD *)(a4 + 32) = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v46 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v46 + 8);
    re::BindNode::deinit((re::BindNode *)v50);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v39 + 8);
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v39 + 8);
    result = v43;
    if (v43)
    {
      if ((v44 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v43 + 40))();
    }
  }
  else
  {
    v24 = (uint64_t *)(a1 + 16);
    v25 = *(_QWORD *)(a1 + 16);
    if (!v25)
    {
      v24 = *(uint64_t **)(a1 + 32);
      v25 = *v24;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t *, __objc2_class_ro *, uint64_t))(v25 + 72))(&v39, v24, a2, a3);
    if (*((_QWORD *)&v40 + 1))
    {
      if ((re::BindPoint::supportsOverrideValue((re::BindPoint *)&v39) & 1) == 0
        && re::KeyValueStore::isSupportedValueType(a2, v26))
      {
        v27 = re::BindPoint::stackItemImpl((re::BindPoint *)&v39, *(_QWORD *)(a1 + 8));
        re::DynamicString::DynamicString((re::DynamicString *)&v43, (const re::DynamicString *)(a1 + 96));
        v28 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)&v43, ".", 1uLL);
        v47 = 0uLL;
        v29 = *(_QWORD *)(a3 + 8);
        if (v29)
          v30 = v29 + 1;
        else
          v30 = 0;
        *((_QWORD *)&v46 + 1) = 0;
        re::DynamicString::setCapacity(&v46, v30);
        re::DynamicString::operator=((re::DynamicString *)&v46, a3);
        if ((BYTE8(v46) & 1) != 0)
          v31 = (const char *)v47;
        else
          v31 = (char *)&v46 + 9;
        if ((BYTE8(v46) & 1) != 0)
          v32 = *((_QWORD *)&v46 + 1) >> 1;
        else
          v32 = BYTE8(v46) >> 1;
        re::DynamicString::append((re::DynamicString *)&v43, v31, v32);
        if ((_QWORD)v46 && (BYTE8(v46) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v46 + 40))();
        v33 = v45;
        if ((v44 & 1) == 0)
          v33 = (re::BindNode *)((char *)&v44 + 1);
        v34 = (re::BindNode *)(v44 >> 1);
        if ((v44 & 1) != 0)
          v34 = (re::BindNode *)(v44 >> 1);
        v50[0] = v33;
        v50[1] = v34;
        v49 = 0;
        v46 = 0u;
        v47 = 0u;
        v48 = 0;
        re::internal::ComponentMemberBindPointImpl::init(v27, (uint64_t)a2, v50, &v46);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v46 + 8);
        re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v46 + 8);
        if (v43 && (v44 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v43 + 40))();
      }
      v35 = v40;
      *(_OWORD *)a4 = v39;
      *(_OWORD *)(a4 + 16) = v35;
      *((_QWORD *)&v39 + 1) = 0;
      v40 = 0uLL;
      *(_QWORD *)(a4 + 40) = v42;
      v42 = 0;
      ++v41;
      *(_DWORD *)(a4 + 32) = 1;
    }
    else
    {
      *(_QWORD *)(a4 + 40) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_DWORD *)(a4 + 32) = 0;
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v39 + 8);
    return re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v39 + 8);
  }
  return result;
}

void re::internal::ComponentMemberBindPointImpl::~ComponentMemberBindPointImpl(re::internal::ComponentMemberBindPointImpl *this)
{
  char *v2;

  v2 = (char *)this + 56;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::internal::ComponentMemberBindPointImpl *)((char *)this + 32));
  re::StringID::destroyString((re::internal::ComponentMemberBindPointImpl *)((char *)this + 16));
}

{
  char *v2;

  v2 = (char *)this + 56;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 56);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v2);
  re::StringID::destroyString((re::internal::ComponentMemberBindPointImpl *)((char *)this + 32));
  re::StringID::destroyString((re::internal::ComponentMemberBindPointImpl *)((char *)this + 16));
  JUMPOUT(0x2276933B8);
}

const char *re::internal::BindPointImpl<re::internal::ComponentMemberBindPointImpl>::implTypeInfo()
{
}

uint64_t re::internal::BindPointImpl<re::internal::ComponentMemberBindPointImpl>::copyInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED6D398;
  a2[1] = v4;
  re::StringID::StringID((re::StringID *)(a2 + 2), (const StringID *)(a1 + 16));
  re::StringID::StringID((re::StringID *)(a2 + 4), (const StringID *)(a1 + 32));
  a2[6] = *(_QWORD *)(a1 + 48);
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 7), (uint64_t *)(a1 + 56));
}

uint64_t re::internal::BindPointImpl<re::internal::ComponentMemberBindPointImpl>::moveInto(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  *a2 = &off_24ED6D398;
  a2[1] = v2;
  v3 = a1[2];
  a2[2] = a2[2] & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  a2[2] = a1[2] & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  a2[3] = a1[3];
  a1[2] = 0;
  a1[3] = &str_110;
  v4 = a1[4];
  a2[4] = a2[4] & 0xFFFFFFFFFFFFFFFELL | v4 & 1;
  a2[4] = a1[4] & 0xFFFFFFFFFFFFFFFELL | v4 & 1;
  a2[5] = a1[5];
  a1[4] = 0;
  a1[5] = &str_110;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 6), a1 + 6);
}

BOOL re::internal::BindPointImpl<re::internal::ComponentMemberBindPointImpl>::equals(_QWORD *a1, _QWORD *a2)
{
      && a1[1] == a2[1]
      && re::StringID::operator==(a1 + 2, a2 + 2)
      && re::StringID::operator==(a1 + 4, a2 + 4)
      && re::BindPoint::operator==((re::BindPoint *)(a1 + 6), (re::BindPoint *)(a2 + 6));
}

uint64_t re::internal::ComponentMemberBindPointImpl::hash(uint64_t a1, unint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v5 = 0x9E3779B97F4A7C17;
  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2, v7, v8)
       - 0x61C8864680B583E9;
  }
  return ((a2 >> 2) + (a2 << 6) + v5) ^ a2;
}

uint64_t re::internal::ComponentMemberBindPointImpl::isWeak(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, a2, v6, v7);
}

uint64_t re::internal::ComponentMemberBindPointImpl::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 1;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, a2, v6, v7);
}

uint64_t re::internal::ComponentMemberBindPointImpl::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __objc2_class_ro *v9;
  uint64_t v10;
  uint64_t v11;
  StringID *v12;
  char v13;
  _QWORD v14[2];

  v5 = result;
  v14[0] = a3;
  v14[1] = a4;
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, a2, v7, v8);
  }
  v9 = *(__objc2_class_ro **)(v5 + 8);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 16);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 168);
      if (!v11)
      {
        v11 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v9 = *(__objc2_class_ro **)(v5 + 8);
      }
      if (!re::KeyValueStore::getValue((re::KeyValueStore *)(v11 + 32), v9, (const re::StringID *)(v5 + 16)))
        re::KeyValueStore::addOrReplaceValue((re::KeyValueStore *)(v11 + 32), *(__objc2_class_ro **)(v5 + 8), (StringID *)(v5 + 16), 0);
      v12 = (StringID *)(v5 + 32);
      result = re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v11 + 88, v12);
      if (!result)
      {
        v13 = 0;
        return re::KeyValueStore::addOrReplaceValue<BOOL>((re::KeyValueStore *)(v11 + 32), v12, &v13);
      }
    }
  }
  return result;
}

uint64_t re::internal::ComponentMemberBindPointImpl::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v5 = *a3;
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2, v6, v7);
  }
  return a2;
}

uint64_t re::internal::ComponentMemberBindPointImpl::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];

  v4 = a2;
  v20[0] = a3;
  v20[1] = a4;
  if (a4)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v8 = *(_QWORD *)(a2 + 16);
      if (!v8
        || (v9 = *(_QWORD *)(v8 + 168)) == 0
        || (v10 = (_BYTE *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v9 + 88, (_QWORD *)(a1 + 32))) == 0|| !*v10|| (Value = re::KeyValueStore::getValue((re::KeyValueStore *)(v9 + 32), *(__objc2_class_ro **)(a1 + 8), (const re::StringID *)(a1 + 16))) == 0)
      {
        v12 = *a3;
        v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v20, 1uLL, a4);
        Value = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(v12, v4, v13, v14);
        if (!Value)
          return 0;
      }
      if (!*(_QWORD *)(a1 + 72))
        return Value;
      re::BindPoint::stackItemImpl((re::BindPoint *)(a1 + 48), 0)[1] = Value;
      return re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 48));
    }
    else
    {
      v16 = *a3;
      v17 = re::Slice<re::internal::BindPointImplBase const*>::range(v20, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 88))(v16, v4, v17, v18);
    }
  }
  return v4;
}

uint64_t re::internal::ComponentMemberBindPointImpl::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (*(_QWORD *)(a1 + 8))
    return 1;
  if (!a4)
    return 0;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a2, v7, v8);
}

_BYTE *re::internal::ComponentMemberBindPointImpl::isOverridden(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *result;

  if (!*(_QWORD *)(a1 + 8))
    return 0;
  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 168);
  if (!v3)
    return 0;
  result = (_BYTE *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v3 + 88, (_QWORD *)(a1 + 32));
  if (result)
    return (_BYTE *)(*result != 0);
  return result;
}

void re::internal::ComponentMemberBindPointImpl::setIsOverridden(re *a1, uint64_t a2, uint64_t *a3, unint64_t a4, int a5)
{
  uint64_t v6;
  re *v8;
  uint64_t v9;
  re::KeyValueStore *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t Value;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint8_t buf[15];
  char v20;
  uint64_t *v21;
  unint64_t v22;

  v21 = a3;
  v22 = a4;
  v20 = a5;
  if (!*((_QWORD *)a1 + 1) || (v6 = *(_QWORD *)(a2 + 16)) == 0)
  {
LABEL_13:
    v18 = *re::ecsComponentsLogObjects(a1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Failed to set override status for bind point component member.", buf, 2u);
    }
    return;
  }
  v8 = a1;
  v9 = *(_QWORD *)(v6 + 168);
  if (!v9)
    v9 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v10 = (re::KeyValueStore *)(v9 + 32);
  v11 = (unsigned __int8 *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v9 + 88, (_QWORD *)v8 + 4);
  if (v11)
    v12 = *v11;
  else
    v12 = 0;
  Value = re::KeyValueStore::getValue(v10, *((__objc2_class_ro **)v8 + 1), (re *)((char *)v8 + 16));
  if (v12 != a5 || !Value)
  {
    re::KeyValueStore::addOrReplaceValue<BOOL>(v10, (StringID *)v8 + 2, &v20);
    if (!v22)
    {
      re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
      _os_crash();
      __break(1u);
      return;
    }
    v15 = *v21;
    v16 = re::Slice<re::internal::BindPointImplBase const*>::range(&v21, 1uLL, v22);
    a1 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 88))(v15, a2, v16, v17);
    if (a1)
    {
      re::KeyValueStore::addAndSwapValue(v10, *((const re::IntrospectionBase **)v8 + 1), (re *)((char *)v8 + 16), (__int128 *)a1);
      return;
    }
    goto LABEL_13;
  }
}

uint64_t re::internal::ComponentMemberBindPointImpl::overrideValueUntyped(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Value;
  re::BindPoint *v21;
  uint64_t result;
  _QWORD *v23;
  unint64_t v24;

  v23 = a3;
  v24 = a4;
  if (!*(_QWORD *)(a1 + 8))
  {
    if (a4)
    {
      v16 = *a3;
      v17 = re::Slice<re::internal::BindPointImplBase const*>::range(&v23, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 120))(v16, a2, v17, v18);
    }
    return 0;
  }
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
    return 0;
  v9 = *(_QWORD *)(v7 + 168);
  if (!v9)
    v9 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::KeyValueComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v10 = (_BYTE *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v9 + 88, (_QWORD *)(a1 + 32));
  if (!v10 || !*v10)
  {
    Value = re::KeyValueStore::getValue((re::KeyValueStore *)(v9 + 32), *(__objc2_class_ro **)(a1 + 8), (const re::StringID *)(a1 + 16));
    if (Value)
    {
LABEL_15:
      if (*(_QWORD *)(a1 + 72))
      {
        v21 = (re::BindPoint *)(a1 + 48);
        re::BindPoint::stackItemImpl(v21, 0)[1] = Value;
        return re::BindPoint::baseValueUntyped(v21);
      }
      return Value;
    }
    v15 = re::KeyValueStore::addOrReplaceValue((re::KeyValueStore *)(v9 + 32), *(__objc2_class_ro **)(a1 + 8), (StringID *)(a1 + 16), 0);
LABEL_14:
    Value = v15;
    if (!v15)
      return Value;
    goto LABEL_15;
  }
  if (a4)
  {
    v12 = *a3;
    v13 = re::Slice<re::internal::BindPointImplBase const*>::range(&v23, 1uLL, a4);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(v12, a2, v13, v14);
    goto LABEL_14;
  }
  re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v23, v24);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::internal::ComponentMemberBindPointImpl::markAsWritten(uint64_t a1, const re::ecs2::Component *a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *result;
  uint64_t v8;
  re::ecs2::NetworkComponent *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  result = re::ecs2::Component::markDirty(a2);
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
    if (re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
    {
      v9 = *(re::ecs2::NetworkComponent **)(v8 + 200);
      if (v9)
        re::ecs2::NetworkComponent::markDirty(v9, a2);
    }
    result = *(_QWORD **)(v8 + 168);
    if (result)
      result = re::ecs2::Component::markDirty(result);
  }
  if (a4)
  {
    v10 = *a3;
    v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v13, 1uLL, a4);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, const re::ecs2::Component *, uint64_t, uint64_t))(*(_QWORD *)v10 + 128))(v10, a2, v11, v12);
  }
  return result;
}

void *re::internal::ComponentMemberBindPointImpl::boundOwner()
{
  unsigned __int8 v0;
  _UNKNOWN **v1;
  int v3;

  v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v0 & 1) == 0)
  {
    v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v3)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
      v1 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return v1[64];
}

_QWORD *re::BindPoint::stackItemImpl(re::BindPoint *this, unint64_t a2)
{
  _QWORD *result;

  if (*((_QWORD *)this + 3) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  result = (_QWORD *)(*((_QWORD *)this + 5) + 32 * a2);
  if (!*result)
    return (_QWORD *)result[2];
  return result;
}

uint64_t re::BindNode::create<`anonymous namespace'::ComponentMemberNodeImpl,`anonymous namespace'::ComponentMemberNodeImpl const&,re::BindNode,re::StringSlice const&>(uint64_t a1, uint64_t a2, uint64_t *a3, re::BindNode *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t *v10;
  _anonymous_namespace_ *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  const char *v16;
  size_t v17;
  uint64_t result;
  uint64_t v19;
  const re::IntrospectionBase *v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  size_t v23;
  const char *v24;
  size_t v25;
  uint64_t *v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  re::KeyValueStore *v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 8) = a2;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 160, 8);
  *(_QWORD *)v9 = &off_24ED6D300;
  *(_QWORD *)(v9 + 8) = a3[1];
  *(_OWORD *)(v9 + 16) = 0u;
  v10 = (uint64_t *)(v9 + 16);
  *(_OWORD *)(v9 + 32) = 0u;
  re::BindNode::move((re::BindNode *)(v9 + 16), a4);
  *(_QWORD *)(v9 + 48) = a3[6];
  re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray(v9 + 56, a3 + 7);
  re::DynamicString::DynamicString((re::DynamicString *)(v9 + 96), (const re::DynamicString *)(a3 + 12));
  v11 = re::DynamicString::DynamicString((re::DynamicString *)(v9 + 128), (const re::DynamicString *)(a3 + 16));
  if (*(_QWORD *)(v9 + 72))
  {
    v12 = *(_QWORD *)(v9 + 136);
    if ((v12 & 1) != 0)
      v13 = v12 >> 1;
    else
      v13 = v12 >> 1;
    if (v13)
      v11 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)(v9 + 128), ".", 1uLL);
    v32 = 0;
    v33 = 0;
    v14 = *(_QWORD *)(a5 + 8);
    if (v14)
      v15 = v14 + 1;
    else
      v15 = 0;
    v31 = 0;
    re::DynamicString::setCapacity(&v30, v15);
    re::DynamicString::operator=((re::DynamicString *)&v30, a5);
    if ((v31 & 1) != 0)
      v16 = v32;
    else
      v16 = (char *)&v31 + 1;
    if ((v31 & 1) != 0)
      v17 = v31 >> 1;
    else
      v17 = v31 >> 1;
    re::DynamicString::append((re::DynamicString *)(v9 + 128), v16, v17);
    result = (uint64_t)v30;
    if (v30 && (v31 & 1) != 0)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v30 + 40))();
  }
  else
  {
    LOBYTE(v28) = 0;
    v26 = 0;
    v27 = 0;
    v19 = *v10;
    if (!*v10)
    {
      v10 = *(uint64_t **)(v9 + 32);
      v19 = *v10;
    }
    (*(void (**)(re::KeyValueStore **__return_ptr, uint64_t *, _QWORD, uint64_t **))(v19 + 72))(&v30, v10, 0, &v26);
    if ((re::BindPoint::supportsOverrideValue((re::BindPoint *)&v30) & 1) == 0)
    {
      if (re::KeyValueStore::isSupportedValueType((__objc2_class_ro *)v30, v20))
      {
        *(_QWORD *)(v9 + 48) = v30;
        re::DynamicArray<re::RigDataValue>::operator=(v9 + 56, (uint64_t)&v31);
      }
      v21 = (_anonymous_namespace_ *)re::DynamicString::append((re::DynamicString *)(v9 + 96), ".", 1uLL);
      v28 = 0;
      v29 = 0;
      v22 = *(_QWORD *)(a5 + 8);
      if (v22)
        v23 = v22 + 1;
      else
        v23 = 0;
      v27 = 0;
      re::DynamicString::setCapacity(&v26, v23);
      re::DynamicString::operator=((re::DynamicString *)&v26, a5);
      if ((v27 & 1) != 0)
        v24 = v28;
      else
        v24 = (char *)&v27 + 1;
      if ((v27 & 1) != 0)
        v25 = v27 >> 1;
      else
        v25 = v27 >> 1;
      re::DynamicString::append((re::DynamicString *)(v9 + 96), v24, v25);
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*v26 + 40))();
    }
    re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v31);
    result = re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v31);
  }
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t re::internal::ComponentMemberBindPointImpl::init(_QWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[3];
  unint64_t v21;
  uint64_t v22;

  a1[1] = a2;
  a1[6] = *a4;
  re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(a1 + 7), (uint64_t)(a4 + 1));
  re::DynamicString::format((re::DynamicString *)"animated::%.*s", (re::DynamicString *)&v19, a3[1], *a3);
  if ((v20[0] & 1) != 0)
    v6 = (_BYTE *)v20[1];
  else
    v6 = (char *)v20 + 1;
  if ((v20[0] & 1) != 0)
    v7 = v20[0] >> 1;
  else
    v7 = LOBYTE(v20[0]) >> 1;
  for (; v7; --v7)
  {
    *v6 = __tolower((char)*v6);
    ++v6;
  }
  re::StringID::StringID((re::StringID *)&v17, (const re::DynamicString *)&v19);
  v8 = v17;
  v9 = v18;
  v17 = 0;
  v18 = &str_110;
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  v21 = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v22 = v11;
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v17);
  re::DynamicString::insert((re::DynamicString *)&v19, 0, "status:", 7uLL);
  re::StringID::StringID((re::StringID *)&v17, (const re::DynamicString *)&v19);
  v12 = v17;
  v13 = v18;
  v17 = 0;
  v18 = &str_110;
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  v21 = v12 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
  v22 = v15;
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v17);
  result = v19;
  if (v19)
  {
    if ((v20[0] & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v19 + 40))();
  }
  return result;
}

void re::internal::ComponentMemberBaseBindPointImpl::~ComponentMemberBaseBindPointImpl(re::internal::ComponentMemberBaseBindPointImpl *this)
{
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::copyInto(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED6D468;
  a2[1] = v2;
  return result;
}

uint64_t re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::moveInto(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED6D468;
  a2[1] = v2;
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::ComponentMemberBaseBindPointImpl>::implTypeInfo(void)const::typeInfo
      && *(_QWORD *)(a1 + 8) == a2[1];
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::isWeak(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 56))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 72))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 104))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    v6 = *a3;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 112))(v6, v7, v8, v9, a5);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v11[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 128))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ComponentMemberBaseBindPointImpl::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *a3;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 136))(v4, v5, v6, v7);
  }
  else
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0, v9[0], 0);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  return a1;
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::~ECSRelationshipBindPointImpl(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 8));
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::implTypeInfo(void)const::typeInfo;
}

re::StringID *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::copyInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6D538;
  return re::StringID::StringID((re::StringID *)(a2 + 1), (const StringID *)(a1 + 8));
}

uint64_t re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::moveInto(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  *a2 = &off_24ED6D538;
  v2 = *(_QWORD *)(result + 8);
  a2[1] = a2[1] & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[1] = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFFELL | v2 & 1;
  a2[2] = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  return result;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>>::implTypeInfo(void)const::typeInfo
      && re::StringID::operator==((_QWORD *)(a1 + 8), a2 + 1);
}

unint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  v4 = (_QWORD *)(a1 + 8);
  v5 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(a1 + 8) >> 31) ^ (*(_QWORD *)(a1 + 8) >> 1));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  if (a4)
  {
    v7 = *(_QWORD *)(a2 + 328);
    if (v7)
    {
      v10 = *(uint64_t **)(a2 + 344);
      v11 = 8 * v7;
      while (1)
      {
        v12 = *v10;
        if (re::StringID::operator==((_QWORD *)(*v10 + 272), v4))
          break;
        ++v10;
        v11 -= 8;
        if (!v11)
          return v6;
      }
      if (v12)
      {
        v13 = *a3;
        v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v17, 1uLL, a4);
        v6 ^= (v6 << 6)
            + (v6 >> 2)
            - 0x61C8864680B583E9
            + (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, v12, v14, v15);
      }
    }
  }
  return v6;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  v4 = *(_QWORD *)(a2 + 328);
  if (!v4)
    return 0;
  v7 = (_QWORD *)(a1 + 8);
  v8 = *(uint64_t **)(a2 + 344);
  v9 = 8 * v4;
  while (1)
  {
    v10 = *v8;
    if (re::StringID::operator==((_QWORD *)(*v8 + 272), v7))
      break;
    ++v8;
    v9 -= 8;
    if (!v9)
      return 0;
  }
  if (!v10)
    return 0;
  if (!a4)
    return 1;
  v11 = *a3;
  v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 64))(v11, v10, v12, v13);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  v4 = *(_QWORD *)(a2 + 328);
  if (v4)
  {
    v7 = (_QWORD *)(result + 8);
    v8 = *(uint64_t **)(a2 + 344);
    v9 = 8 * v4;
    while (1)
    {
      v10 = *v8;
      result = re::StringID::operator==((_QWORD *)(*v8 + 272), v7);
      if ((_DWORD)result)
        break;
      ++v8;
      v9 -= 8;
      if (!v9)
        return result;
    }
    if (v10)
      v11 = a4 == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v12 = *a3;
      v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(v12, v10, v13, v14);
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  v4 = *(_QWORD *)(a2 + 328);
  if (!v4)
    return 0;
  v7 = (_QWORD *)(a1 + 8);
  v8 = *(uint64_t **)(a2 + 344);
  v9 = 8 * v4;
  while (1)
  {
    v10 = *v8;
    if (re::StringID::operator==((_QWORD *)(*v8 + 272), v7))
      break;
    ++v8;
    v9 -= 8;
    if (!v9)
      return 0;
  }
  if (v10 && a4)
  {
    v12 = *a3;
    v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 80))(v12, v10, v13, v14);
  }
  return v10;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  v4 = *(_QWORD *)(a2 + 328);
  if (!v4)
    return 0;
  v7 = (_QWORD *)(a1 + 8);
  v8 = *(uint64_t **)(a2 + 344);
  v9 = 8 * v4;
  while (1)
  {
    v10 = *v8;
    if (re::StringID::operator==((_QWORD *)(*v8 + 272), v7))
      break;
    ++v8;
    v9 -= 8;
    if (!v9)
      return 0;
  }
  if (v10 && a4)
  {
    v12 = *a3;
    v13 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(v12, v10, v13, v14);
  }
  return v10;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  if (!a4)
    return 0;
  v5 = *a3;
  if (a2 && (v6 = *(_QWORD *)(a2 + 328)) != 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    v8 = *(uint64_t **)(a2 + 344);
    v9 = 8 * v6;
    while (1)
    {
      v10 = *v8;
      if (re::StringID::operator==((_QWORD *)(*v8 + 272), v7))
        break;
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v10 = 0;
  }
  v11 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, v10, v11, v12);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 328);
  if (!v4)
    return 0;
  v7 = (_QWORD *)(a1 + 8);
  v8 = *(uint64_t **)(a2 + 344);
  v9 = 8 * v4;
  while (1)
  {
    v10 = *v8;
    if (re::StringID::operator==((_QWORD *)(*v8 + 272), v7))
      break;
    ++v8;
    v9 -= 8;
    if (!v9)
      return 0;
  }
  if (!v10)
    return 0;
  v11 = *a3;
  v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 104))(v11, v10, v12, v13);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = a3;
  v16[1] = a4;
  if (a4)
  {
    v5 = *(_QWORD *)(a2 + 328);
    if (v5)
    {
      v9 = (_QWORD *)(result + 8);
      v10 = *(uint64_t **)(a2 + 344);
      v11 = 8 * v5;
      while (1)
      {
        v12 = *v10;
        result = re::StringID::operator==((_QWORD *)(*v10 + 272), v9);
        if ((_DWORD)result)
          break;
        ++v10;
        v11 -= 8;
        if (!v11)
          return result;
      }
      if (v12)
      {
        v13 = *a3;
        v14 = re::Slice<re::internal::BindPointImplBase const*>::range(v16, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 112))(v13, v12, v14, v15, a5);
      }
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 328);
  if (!v4)
    return 0;
  v7 = (_QWORD *)(a1 + 8);
  v8 = *(uint64_t **)(a2 + 344);
  v9 = 8 * v4;
  while (1)
  {
    v10 = *v8;
    if (re::StringID::operator==((_QWORD *)(*v8 + 272), v7))
      break;
    ++v8;
    v9 -= 8;
    if (!v9)
      return 0;
  }
  if (!v10)
    return 0;
  v11 = *a3;
  v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 120))(v11, v10, v12, v13);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  if (a4)
  {
    v4 = *(_QWORD *)(a2 + 328);
    if (v4)
    {
      v7 = (_QWORD *)(result + 8);
      v8 = *(uint64_t **)(a2 + 344);
      v9 = 8 * v4;
      while (1)
      {
        v10 = *v8;
        result = re::StringID::operator==((_QWORD *)(*v8 + 272), v7);
        if ((_DWORD)result)
          break;
        ++v8;
        v9 -= 8;
        if (!v9)
          return result;
      }
      if (v10)
      {
        v11 = *a3;
        v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v14, 1uLL, a4);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 128))(v11, v10, v12, v13);
      }
    }
  }
  return result;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::EntityChildRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 328);
  if (!v4)
    return 0;
  v7 = (_QWORD *)(a1 + 8);
  v8 = *(uint64_t **)(a2 + 344);
  v9 = 8 * v4;
  while (1)
  {
    v10 = *v8;
    if (re::StringID::operator==((_QWORD *)(*v8 + 272), v7))
      break;
    ++v8;
    v9 -= 8;
    if (!v9)
      return 0;
  }
  if (!v10)
    return 0;
  v11 = *a3;
  v12 = re::Slice<re::internal::BindPointImplBase const*>::range(v15, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 136))(v11, v10, v12, v13);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void re::internal::WeakBindPointImpl<re::ecs2::ECSService>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED6D608;
  *(_QWORD *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED6D608;
  *(_QWORD *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

BOOL re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::ECSService>>::implTypeInfo(void)const::typeInfo
      && *(_QWORD *)(a1 + 8) == a2[1];
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = 0x9E3779B97F4A7C17;
  if (a4)
  {
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    v6 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v5, v8, v9)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 2) + (v5 << 6) + v6) ^ v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::isWeak()
{
  return 1;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  if (!a4)
    return 1;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = v4 - 8;
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v7, v6, v8, v9);
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = v4 - 8;
  v7 = *a3;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = v4 - 8;
  v7 = *a3;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    v5 = *(_QWORD *)(result + 8);
    if (v5)
    {
      v7 = v5 - 8;
      v8 = *a3;
      v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 112))(v8, v7, v9, v10, a5);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 120))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *(_QWORD *)(result + 8);
    if (v4)
    {
      v5 = v4 - 8;
      v6 = *a3;
      v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 128))(v6, v5, v7, v8);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::ECSService>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 136))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void re::internal::WeakBindPointImpl<re::ecs2::Scene>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED6D6D8;
  *(_QWORD *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED6D6D8;
  *(_QWORD *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

BOOL re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Scene>>::implTypeInfo(void)const::typeInfo
      && *(_QWORD *)(a1 + 8) == a2[1];
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = 0x9E3779B97F4A7C17;
  if (a4)
  {
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    v6 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v5, v8, v9)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 2) + (v5 << 6) + v6) ^ v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::isWeak()
{
  return 1;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  if (!a4)
    return 1;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = v4 - 8;
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v7, v6, v8, v9);
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = v4 - 8;
  v7 = *a3;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = v4 - 8;
  v7 = *a3;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    v5 = *(_QWORD *)(result + 8);
    if (v5)
    {
      v7 = v5 - 8;
      v8 = *a3;
      v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 112))(v8, v7, v9, v10, a5);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 120))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *(_QWORD *)(result + 8);
    if (v4)
    {
      v5 = v4 - 8;
      v6 = *a3;
      v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 128))(v6, v5, v7, v8);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Scene>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 136))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void re::internal::WeakBindPointImpl<re::ecs2::Entity>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED6D7A8;
  *(_QWORD *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED6D7A8;
  *(_QWORD *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

BOOL re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Entity>>::implTypeInfo(void)const::typeInfo
      && *(_QWORD *)(a1 + 8) == a2[1];
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = 0x9E3779B97F4A7C17;
  if (a4)
  {
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    v6 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v5, v8, v9)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 2) + (v5 << 6) + v6) ^ v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::isWeak()
{
  return 1;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  if (!a4)
    return 1;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = v4 - 8;
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v7, v6, v8, v9);
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = v4 - 8;
  v7 = *a3;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = v4 - 8;
  v7 = *a3;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    v5 = *(_QWORD *)(result + 8);
    if (v5)
    {
      v7 = v5 - 8;
      v8 = *a3;
      v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 112))(v8, v7, v9, v10, a5);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 120))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *(_QWORD *)(result + 8);
    if (v4)
    {
      v5 = v4 - 8;
      v6 = *a3;
      v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 128))(v6, v5, v7, v8);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Entity>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 136))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void re::internal::WeakBindPointImpl<re::ecs2::Component>::~WeakBindPointImpl(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::copyInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED6D878;
  *(_QWORD *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

void re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED6D878;
  *(_QWORD *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
}

BOOL re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::equals(uint64_t a1, _QWORD *a2)
{
  return (_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2) == &re::internal::BindPointImpl<re::internal::WeakBindPointImpl<re::ecs2::Component>>::implTypeInfo(void)const::typeInfo
      && *(_QWORD *)(a1 + 8) == a2[1];
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = 0x9E3779B97F4A7C17;
  if (a4)
  {
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
    v6 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, v5, v8, v9)
       - 0x61C8864680B583E9;
  }
  return ((v5 >> 2) + (v5 << 6) + v6) ^ v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::isWeak()
{
  return 1;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  if (!a4)
    return 1;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::makeAlive(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = v4 - 8;
    v7 = *a3;
    v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v7, v6, v8, v9);
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 80))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  if (a4)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(v6, v5, v7, v8);
  }
  return v5;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = v4 - 8;
  v7 = *a3;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  v6 = v4 - 8;
  v7 = *a3;
  v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 104))(v7, v6, v8, v9);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::setIsOverridden(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a3;
  v11[1] = a4;
  if (a4)
  {
    v5 = *(_QWORD *)(result + 8);
    if (v5)
    {
      v7 = v5 - 8;
      v8 = *a3;
      v9 = re::Slice<re::internal::BindPointImplBase const*>::range(v11, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 112))(v8, v7, v9, v10, a5);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 120))(v6, v5, v7, v8);
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::markAsWritten(uint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (a4)
  {
    v4 = *(_QWORD *)(result + 8);
    if (v4)
    {
      v5 = v4 - 8;
      v6 = *a3;
      v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 128))(v6, v5, v7, v8);
    }
  }
  return result;
}

uint64_t re::internal::WeakBindPointImpl<re::ecs2::Component>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 0;
  v5 = v4 - 8;
  v6 = *a3;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 136))(v6, v5, v7, v8);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::~ECSRelationshipBindPointImpl()
{
  JUMPOUT(0x2276933B8);
}

void *re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::implTypeInfo()
{
  return &re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::implTypeInfo(void)const::typeInfo;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::copyInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6D948;
}

void re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED6D948;
}

BOOL re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::equals(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == (_QWORD)&re::internal::BindPointImpl<re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>>::implTypeInfo(void)const::typeInfo;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::hash(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, v4, v6, v7)
       - 0x61C8864680B583E9;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::isWeak()
{
  return 1;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::isAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0;
  if (!a4)
    return 1;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 64))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::makeAlive(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *a3;
    v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, v4, v7, v8);
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::targetIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && a4)
  {
    v5 = *a3;
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v4, v6, v7);
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::baseValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && a4)
  {
    v5 = *a3;
    v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, v4, v6, v7);
  }
  return v4;
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::supportsOverrideValue(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *a3;
  if (a2)
    v5 = *(_QWORD *)(a2 + 16);
  else
    v5 = 0;
  v7 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, v5, v7, v8);
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::isOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 104))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::setIsOverridden(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = a3;
  v10[1] = a4;
  if (a4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      v7 = *a3;
      v8 = re::Slice<re::internal::BindPointImplBase const*>::range(v10, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 112))(v7, v5, v8, v9, a5);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::overrideValueUntyped(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v5, v4, v6, v7);
}

void re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::markAsWritten(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  if (a4)
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *a3;
      v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v8, 1uLL, a4);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v5, v4, v6, v7);
    }
  }
}

uint64_t re::internal::ECSRelationshipBindPointImpl<re::internal::ComponentEntityRelationship>::boundOwner(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a3;
  v9[1] = a4;
  if (!a4)
    return 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
    return 0;
  v5 = *a3;
  v6 = re::Slice<re::internal::BindPointImplBase const*>::range(v9, 1uLL, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(v5, v4, v6, v7);
}

uint64_t re::ecs2::AudioUpdateSystem::willAddSystemToECSService(re::ecs2::AudioUpdateSystem *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  *((_QWORD *)this + 13) = result;
  return result;
}

uint64_t re::ecs2::AudioUpdateSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  return this;
}

uint64_t re::ecs2::AudioUpdateSystem::willAddSceneToECSService(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 104);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t re::ecs2::AudioUpdateSystem::willRemoveSceneFromECSService(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 104);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t re::ecs2::AudioUpdateSystem::update(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 48))(*(_QWORD *)(a1 + 104));
}

uint64_t *re::ecs2::allocInfo_AudioUpdateSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_320);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_320))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541143C8, 0);
    *(uint64_t *)((char *)&qword_2541143D8 + 6) = 0;
    qword_2541143D8 = 0;
    qword_2541143E8 = 0;
    qword_2541143F0 = 0xFFFFFFFFLL;
    qword_2541143C8 = (uint64_t)&off_24ED7DAA8;
    qword_2541143F8 = (uint64_t)"AudioUpdateSystem";
    dword_254114400 = 0;
    unk_254114408 = 0u;
    unk_254114418 = 0u;
    unk_254114428 = 0u;
    qword_254114438 = 0;
    __cxa_guard_release(&_MergedGlobals_320);
  }
  return &qword_2541143C8;
}

void re::ecs2::initInfo_AudioUpdateSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x776AC1371AA0765CLL;
  v5[1] = "AudioUpdateSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AudioUpdateSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioUpdateSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioUpdateSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioUpdateSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioUpdateSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioUpdateSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioUpdateSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::AudioUpdateSystem *re::internal::defaultConstruct<re::ecs2::AudioUpdateSystem>(int a1, int a2, re::ecs2::AudioUpdateSystem *this)
{
  return re::ecs2::AudioUpdateSystem::AudioUpdateSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::AudioUpdateSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AudioUpdateSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AudioUpdateSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioUpdateSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioUpdateSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioUpdateSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioUpdateSystem>, this);
}

void re::ecs2::AudioUpdateSystem::~AudioUpdateSystem(re::ecs2::AudioUpdateSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AudioUpdateSystem::typeInfo(re::ecs2::AudioUpdateSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioUpdateSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioUpdateSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioUpdateSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioUpdateSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::AudioUpdateSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioUpdateSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecsComponentsLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::ecsComponentsLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "ECS.Components");
  }
  return &re::ecsComponentsLogObjects(void)::logObjects;
}

uint64_t *re::ecs2::allocInfo_MeshShadowSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_321);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_321))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114448, 0);
    *(uint64_t *)((char *)&qword_254114458 + 6) = 0;
    qword_254114458 = 0;
    qword_254114468 = 0;
    qword_254114470 = 0xFFFFFFFFLL;
    qword_254114448 = (uint64_t)&off_24ED7DAA8;
    qword_254114478 = (uint64_t)"MeshShadowSystem";
    dword_254114480 = 0;
    unk_254114488 = 0u;
    unk_254114498 = 0u;
    unk_2541144A8 = 0u;
    qword_2541144B8 = 0;
    __cxa_guard_release(&_MergedGlobals_321);
  }
  return &qword_254114448;
}

void re::ecs2::initInfo_MeshShadowSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xD0609FA8A90D6438;
  v5[1] = "MeshShadowSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA9000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MeshShadowSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshShadowSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshShadowSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshShadowSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshShadowSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshShadowSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshShadowSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::MeshShadowSystem *re::internal::defaultConstruct<re::ecs2::MeshShadowSystem>(int a1, int a2, re::ecs2::MeshShadowSystem *this)
{
  return re::ecs2::MeshShadowSystem::MeshShadowSystem(this);
}

void re::internal::defaultDestruct<re::ecs2::MeshShadowSystem>(uint64_t a1, uint64_t a2, re::ecs2::MeshShadowSystem *a3)
{
  re::ecs2::MeshShadowSystem::~MeshShadowSystem(a3);
}

uint64_t re::ecs2::introspect_MeshShadowSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshShadowSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshShadowSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshShadowSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshShadowSystem>, this);
}

re::ecs2::MeshShadowSystemStateImpl *re::ecs2::MeshShadowSystemStateImpl::MeshShadowSystemStateImpl(re::ecs2::MeshShadowSystemStateImpl *this, re::ecs2::MeshShadowSystem *a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  _QWORD v23[4];
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED6DAA0;
  *((_QWORD *)this + 1) = 0;
  v3 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = (char *)this + 48;
  v5 = (char *)this + 88;
  v6 = (char *)this + 128;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = a2;
  v27 = re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v28 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray((uint64_t)v23, (char *)&v27, 2uLL);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v4, (uint64_t)v23);
  if (v23[0] && v24)
    (*(void (**)(void))(*(_QWORD *)v23[0] + 40))();
  v23[0] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v23[1] = re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v23[2] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v23[3] = re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v24 = re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v25 = re::ecs2::ComponentImpl<re::ecs2::CustomDeformerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v26 = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray((uint64_t)&v27, (char *)v23, 7uLL);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v5, (uint64_t)&v27);
  if (v27 && v30)
    (*(void (**)(void))(*(_QWORD *)v27 + 40))();
  v27 = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v28 = re::ecs2::ComponentImpl<re::ecs2::HierarchicalFadeComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v29 = re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray((uint64_t)v23, (char *)&v27, 3uLL);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v6, (uint64_t)v23);
  if (v23[0] && v24)
    (*(void (**)(void))(*(_QWORD *)v23[0] + 40))();
  v27 = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v28 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v29 = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray((uint64_t)v23, (char *)&v27, 3uLL);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 168, (uint64_t)v23);
  if (v23[0] && v24)
    (*(void (**)(void))(*(_QWORD *)v23[0] + 40))();
  v7 = *((_QWORD *)this + 8);
  if (v7)
  {
    v8 = (_QWORD *)*((_QWORD *)this + 10);
    v9 = 8 * v7;
    do
    {
      re::DynamicArray<re::TransitionCondition *>::add(v3, v8++);
      v9 -= 8;
    }
    while (v9);
  }
  v10 = *((_QWORD *)this + 13);
  if (v10)
  {
    v11 = (_QWORD *)*((_QWORD *)this + 15);
    v12 = 8 * v10;
    do
    {
      re::DynamicArray<re::TransitionCondition *>::add(v3, v11++);
      v12 -= 8;
    }
    while (v12);
  }
  v13 = *((_QWORD *)this + 18);
  if (v13)
  {
    v14 = (_QWORD *)*((_QWORD *)this + 20);
    v15 = 8 * v13;
    do
    {
      re::DynamicArray<re::TransitionCondition *>::add(v3, v14++);
      v15 -= 8;
    }
    while (v15);
  }
  v16 = *((_QWORD *)this + 23);
  if (v16)
  {
    v17 = (void **)*((_QWORD *)this + 25);
    v18 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
    v19 = 8 * v16;
    do
    {
      if (*v17 != v18)
      {
        re::DynamicArray<re::TransitionCondition *>::add(v3, v17);
        v18 = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
      }
      ++v17;
      v19 -= 8;
    }
    while (v19);
  }
  v20 = re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v21 = *((_QWORD *)this + 3);
  if (v21 >= *((_QWORD *)this + 2))
  {
    re::DynamicArray<float *>::growCapacity(v3, v21 + 1);
    v21 = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v21) = v20;
  *((_QWORD *)this + 3) = v21 + 1;
  ++*((_DWORD *)this + 8);
  return this;
}

void re::ecs2::MeshShadowSystemStateImpl::willDeactivateComponent(uint64_t a1, re::ecs2::Entity *a2, void *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::ecs2::Entity *v11;
  const re::AssetHandle *v12;
  int isEntityAMeshReceiver;
  uint64_t v14;
  re::ecs2::Entity *v15;
  _QWORD v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v22[15];
  uint64_t v23;
  _QWORD *v24;

  v15 = a2;
  if (re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a3)
  {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(*(_QWORD *)(a1 + 208) + 1360, (uint64_t *)&v15);
    v11 = v15;
    if (*((_QWORD *)v15 + 22))
    {
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 208) + 128) + 56))(v22);
      isEntityAMeshReceiver = re::internal::shadows::isEntityAMeshReceiver(v11, (re::ecs2::Entity *)v22, v12);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
      if (isEntityAMeshReceiver)
        re::ecs2::MeshShadowSystem::processReceiverRemoval(*(re::ecs2::MeshShadowSystem **)(a1 + 208), v15);
    }
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a3)
  {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(*(_QWORD *)(a1 + 208) + 1456, (uint64_t *)&v15);
    re::ecs2::MeshShadowSystem::processCasterRemoval(*(re::ecs2::MeshShadowSystem **)(a1 + 208), v15);
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a3)
  {
    v14 = *(_QWORD *)(a1 + 208);
    if (*(_BYTE *)(v14 + 1744))
      *(_BYTE *)(v14 + 1745) = 0;
    else
      *(_WORD *)(v14 + 1744) = 1;
  }
  else if (re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a3)
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v22);
    v16[0] = 0;
    v16[1] = 0;
    v17 = 1;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v21 = 0;
    re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v16, (uint64_t)v22, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v16) = a2;
    while (v20)
    {
      v5 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v16, v20 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v16, --v20);
      ++v21;
      v6 = v5[41];
      if (v6)
      {
        v7 = (uint64_t *)v5[43];
        v8 = 8 * v6;
        do
        {
          v9 = *v7++;
          *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v16) = v9;
          v8 -= 8;
        }
        while (v8);
      }
      v10 = *(_QWORD *)(a1 + 208) + 928;
      v23 = v5[37];
      v24 = v5;
      if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v10, &v23))
      {
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(*(_QWORD *)(a1 + 208) + 1072, (uint64_t *)&v24);
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v16);
    if (v16[0] && (v17 & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)v16[0] + 40))();
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v22);
  }
}

uint64_t re::ecs2::MeshShadowSystem::processReceiverRemoval(re::ecs2::MeshShadowSystem *this, re::ecs2::Entity *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  re::internal::shadows *v11;
  re::ecs2::Entity *v12;

  v11 = (re::internal::shadows *)*((_QWORD *)a2 + 37);
  v12 = a2;
  v3 = (_QWORD *)((char *)this + 928);
  if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)this + 928, (uint64_t *)&v11))
  {
    LODWORD(v4) = 0x7FFFFFFF;
    if (*v3)
    {
      v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * ((unint64_t)v11 ^ ((unint64_t)v11 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                               * ((unint64_t)v11 ^ ((unint64_t)v11 >> 30))) >> 27));
      v6 = *(unsigned int *)(*((_QWORD *)this + 117) + 4 * ((v5 ^ (v5 >> 31)) % *((unsigned int *)this + 238)));
      if ((_DWORD)v6 != 0x7FFFFFFF)
      {
        v7 = *((_QWORD *)this + 118);
        LODWORD(v4) = v6;
        if (*(re::internal::shadows **)(v7 + 32 * v6 + 16) != v11)
        {
          v4 = v6;
          while (1)
          {
            v4 = *(_DWORD *)(v7 + 32 * v4 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v4 == 0x7FFFFFFF)
              break;
            if (*(re::internal::shadows **)(v7 + 32 * v4 + 16) == v11)
              goto LABEL_10;
          }
          LODWORD(v4) = 0x7FFFFFFF;
        }
      }
    }
LABEL_10:
    v10 = *(_QWORD *)(*((_QWORD *)this + 118) + 32 * v4 + 24);
    re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3, (unint64_t)v11);
    re::internal::shadows::removeParamsFromMaterialParameterBlock((uint64_t)v11, *(re::MaterialManager **)(*((_QWORD *)this + 14) + 24), 0);
    v8 = (_QWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 880, &v10);
    if (v8)
      --*v8;
  }
  return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 1072, (uint64_t *)&v12);
}

uint64_t re::ecs2::MeshShadowSystem::processCasterRemoval(re::ecs2::MeshShadowSystem *this, re::ecs2::Entity *a2)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  re::ecs2::Entity *v27;

  v27 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 1408, (uint64_t *)&v27);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 1360, (uint64_t *)&v27);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 1312, (uint64_t *)&v27);
  v26 = *((_QWORD *)v27 + 37);
  result = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)this + 832, (uint64_t *)&v26);
  if (!(_DWORD)result)
    return result;
  LODWORD(v4) = 0x7FFFFFFF;
  if (*((_QWORD *)this + 104))
  {
    v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v26 ^ (v26 >> 30))) >> 27));
    v6 = *(unsigned int *)(*((_QWORD *)this + 105) + 4 * ((v5 ^ (v5 >> 31)) % *((unsigned int *)this + 214)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *((_QWORD *)this + 106);
      LODWORD(v4) = v6;
      if (*(_QWORD *)(v7 + 32 * v6 + 16) != v26)
      {
        v4 = v6;
        while (1)
        {
          v4 = *(_DWORD *)(v7 + 32 * v4 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v4 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v7 + 32 * v4 + 16) == v26)
            goto LABEL_10;
        }
        LODWORD(v4) = 0x7FFFFFFF;
      }
    }
  }
LABEL_10:
  v8 = *(_QWORD *)(*((_QWORD *)this + 106) + 32 * v4 + 24);
  v25 = v8;
  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 832, v26);
  v9 = *((_QWORD *)this + 92);
  if (v9)
  {
    v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
    v11 = (v10 ^ (v10 >> 31)) % *((unsigned int *)this + 190);
    v12 = *((_QWORD *)this + 93);
    v13 = *(unsigned int *)(v12 + 4 * v11);
    v14 = (uint64_t *)((char *)this + 752);
    v15 = *((_QWORD *)this + 94);
    if ((_DWORD)v13 == 0x7FFFFFFF)
    {
      if (*(re::ecs2::Entity **)(v15 + 0x2FFFFFFFB8) != v27)
        goto LABEL_27;
    }
    else
    {
      if (*(_QWORD *)(v15 + 96 * v13 + 16) == v8)
      {
        if (*(re::ecs2::Entity **)(v15 + 96 * v13 + 24) != v27)
          goto LABEL_27;
        goto LABEL_24;
      }
      do
        v16 = *(_DWORD *)(v15 + 96 * *(unsigned int *)(v12 + 4 * v11) + 8) & 0x7FFFFFFF;
      while (v16 != 0x7FFFFFFF && *(_QWORD *)(v15 + 96 * v16 + 16) != v8);
      if (*(re::ecs2::Entity **)(v15 + 96 * v16 + 24) != v27)
        goto LABEL_25;
      while (1)
      {
        LODWORD(v13) = *(_DWORD *)(v15 + 96 * v13 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v13 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v15 + 96 * v13 + 16) == v8)
          goto LABEL_24;
      }
    }
    LODWORD(v13) = 0x7FFFFFFF;
  }
  else
  {
    v14 = (uint64_t *)((char *)this + 752);
    v15 = *((_QWORD *)this + 94);
    LODWORD(v13) = 0x7FFFFFFF;
    if (*(re::ecs2::Entity **)(v15 + 0x2FFFFFFFB8) != v27)
      goto LABEL_33;
  }
LABEL_24:
  *(_QWORD *)(v15 + 96 * v13 + 24) = 0;
LABEL_25:
  if (!v9)
  {
    LODWORD(v13) = 0x7FFFFFFF;
    goto LABEL_33;
  }
  v12 = *((_QWORD *)this + 93);
  v17 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
  v11 = (v17 ^ (v17 >> 31)) % *((unsigned int *)this + 190);
LABEL_27:
  v18 = *(unsigned int *)(v12 + 4 * v11);
  LODWORD(v13) = 0x7FFFFFFF;
  if ((_DWORD)v18 != 0x7FFFFFFF)
  {
    v19 = *v14;
    if (*(_QWORD *)(*v14 + 96 * v18 + 16) == v8)
    {
LABEL_31:
      LODWORD(v13) = v18;
    }
    else
    {
      while (1)
      {
        LODWORD(v18) = *(_DWORD *)(v19 + 96 * v18 + 8) & 0x7FFFFFFF;
        LODWORD(v13) = 0x7FFFFFFF;
        if ((_DWORD)v18 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v19 + 96 * v18 + 16) == v8)
          goto LABEL_31;
      }
    }
  }
LABEL_33:
  re::DynamicArray<unsigned long long>::remove(*((_QWORD *)this + 94) + 96 * v13 + 32, &v27);
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 1120, (uint64_t *)&v25);
  result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 1168, (uint64_t *)&v25);
  v20 = v25;
  if (!*((_QWORD *)this + 92))
  {
    v23 = *v14;
LABEL_39:
    if (*(_QWORD *)(v23 + 0x2FFFFFFFD0))
      return result;
    goto LABEL_40;
  }
  v21 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v25 ^ (v25 >> 30))) >> 27));
  v22 = *(unsigned int *)(*((_QWORD *)this + 93) + 4 * ((v21 ^ (v21 >> 31)) % *((unsigned int *)this + 190)));
  v23 = *((_QWORD *)this + 94);
  if ((_DWORD)v22 == 0x7FFFFFFF)
    goto LABEL_39;
  if (*(_QWORD *)(v23 + 96 * v22 + 16) == v25)
  {
    if (*(_QWORD *)(v23 + 96 * v22 + 48))
      return result;
    goto LABEL_41;
  }
  v24 = v22;
  while (1)
  {
    LODWORD(v24) = *(_DWORD *)(v23 + 96 * v24 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v24 == 0x7FFFFFFF)
      break;
    if (*(_QWORD *)(v23 + 96 * v24 + 16) == v25)
      goto LABEL_49;
  }
  LODWORD(v24) = 0x7FFFFFFF;
LABEL_49:
  if (!*(_QWORD *)(v23 + 96 * v24 + 48))
  {
    while (1)
    {
      LODWORD(v22) = *(_DWORD *)(v23 + 96 * v22 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v22 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v23 + 96 * v22 + 16) == v25)
        goto LABEL_41;
    }
LABEL_40:
    LODWORD(v22) = 0x7FFFFFFF;
LABEL_41:
    if (!*(_QWORD *)(v23 + 96 * v22 + 80))
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 1264, (uint64_t *)&v25);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 1120, (uint64_t *)&v25);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 1168, (uint64_t *)&v25);
      v20 = v25;
    }
    return re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 736, v20);
  }
  return result;
}

void re::ecs2::MeshShadowSystemStateImpl::willDeactivateEntity(re::ecs2::MeshShadowSystemStateImpl *this, re::ecs2::Entity *a2)
{
  re::ecs2::Entity *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::ecs2::Entity *v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE v17[120];
  uint64_t v18;
  _QWORD *v19;

  v10 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(*((_QWORD *)this + 26) + 1456, (uint64_t *)&v10);
  re::ecs2::MeshShadowSystem::processCasterRemoval(*((re::ecs2::MeshShadowSystem **)this + 26), v10);
  re::ecs2::MeshShadowSystem::processReceiverRemoval(*((re::ecs2::MeshShadowSystem **)this + 26), v10);
  if (re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    v3 = v10;
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v17);
    v11[0] = 0;
    v11[1] = 0;
    v12 = 1;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    v16 = 0;
    re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v11, (uint64_t)v17, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v11) = v3;
    while (v15)
    {
      v4 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, v15 - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v11, --v15);
      ++v16;
      v5 = v4[41];
      if (v5)
      {
        v6 = (uint64_t *)v4[43];
        v7 = 8 * v5;
        do
        {
          v8 = *v6++;
          *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v11) = v8;
          v7 -= 8;
        }
        while (v7);
      }
      v9 = *((_QWORD *)this + 26) + 928;
      v18 = v4[37];
      v19 = v4;
      if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v9, &v18))
      {
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(*((_QWORD *)this + 26) + 1072, (uint64_t *)&v19);
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v11);
    if (v11[0] && (v12 & 1) == 0)
      (*(void (**)(void))(*(_QWORD *)v11[0] + 40))();
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v17);
  }
}

void re::ecs2::MeshShadowSystemStateImpl::didDependentComponentChange(_QWORD *a1, uint64_t a2, uint64_t a3, re::ecs2::ComponentTypeBase *a4)
{
  uint64_t v5;
  const __int16 *v7;
  int16x8_t *v8;
  int16x8_t v9;
  int i;
  uint16x8_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::ecs2::ComponentTypeBase **v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  re::ecs2::ComponentTypeBase **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::ecs2::ComponentTypeBase **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  re::ecs2::ComponentTypeBase **v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned int v33;
  re::internal::shadows *v34;
  const re::AssetHandle *v35;
  int isEntityAMeshReceiver;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  re::internal::shadows *v44;
  _QWORD v45[2];
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _QWORD v51[15];
  uint64_t v52;
  _QWORD *v53;

  v44 = (re::internal::shadows *)a3;
  if ((*(_BYTE *)(a3 + 288) & 1) != 0)
  {
    if (!a4)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) didDependentComponentChange() gets NULL componentType", "componentType", "didDependentComponentChange", 442);
      _os_crash();
      __break(1u);
      return;
    }
    v5 = *(unsigned __int16 *)(a3 + 82);
    if (*(_WORD *)(a3 + 82))
    {
      v7 = (const __int16 *)((char *)a4 + 16);
      v8 = *(int16x8_t **)(a3 + 88);
      v9 = vld1q_dup_s16(v7);
      for (i = 1; ; i -= 8)
      {
        v11 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v9, *v8), (int8x16_t)xmmword_2260F1E80);
        v11.i16[0] = vmaxvq_u16(v11);
        if (v11.i32[0])
          break;
        ++v8;
        if (!--v5)
          return;
      }
      if (v11.u16[0] - i < *(unsigned __int16 *)(a3 + 80))
      {
        if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType != (_UNKNOWN *)a4)
        {
          v12 = a1[10];
          v13 = a1[8];
          if (v13)
          {
            v14 = 8 * v13;
            v15 = (re::ecs2::ComponentTypeBase **)a1[10];
            while (*v15 != a4)
            {
              ++v15;
              v14 -= 8;
              if (!v14)
              {
                v15 = (re::ecs2::ComponentTypeBase **)(v12 + 8 * v13);
                break;
              }
            }
          }
          else
          {
            v15 = (re::ecs2::ComponentTypeBase **)a1[10];
          }
          v19 = a1[15];
          v20 = a1[13];
          if (v20)
          {
            v21 = 8 * v20;
            v22 = (re::ecs2::ComponentTypeBase **)a1[15];
            while (*v22 != a4)
            {
              ++v22;
              v21 -= 8;
              if (!v21)
              {
                v22 = (re::ecs2::ComponentTypeBase **)(v19 + 8 * v20);
                break;
              }
            }
          }
          else
          {
            v22 = (re::ecs2::ComponentTypeBase **)a1[15];
          }
          v23 = a1[20];
          v24 = a1[18];
          if (v24)
          {
            v25 = 8 * v24;
            v26 = (re::ecs2::ComponentTypeBase **)a1[20];
            while (*v26 != a4)
            {
              ++v26;
              v25 -= 8;
              if (!v25)
              {
                v26 = (re::ecs2::ComponentTypeBase **)(v23 + 8 * v24);
                break;
              }
            }
          }
          else
          {
            v26 = (re::ecs2::ComponentTypeBase **)a1[20];
          }
          v27 = a1[25];
          v28 = a1[23];
          if (v28)
          {
            v29 = 8 * v28;
            v30 = (re::ecs2::ComponentTypeBase **)a1[25];
            while (*v30 != a4)
            {
              ++v30;
              v29 -= 8;
              if (!v29)
              {
                v30 = (re::ecs2::ComponentTypeBase **)(v27 + 8 * v28);
                break;
              }
            }
          }
          else
          {
            v30 = (re::ecs2::ComponentTypeBase **)a1[25];
          }
          v31 = (uint64_t)v26 - v23;
          v32 = v13 != ((uint64_t)v15 - v12) >> 3;
          if (v20 != ((uint64_t)v22 - v19) >> 3)
            v32 |= 2u;
          if (v24 != v31 >> 3)
            v32 |= 4u;
          if (v28 != ((uint64_t)v30 - v27) >> 3)
            v32 |= 8u;
          v33 = v32;
          if ((v32 & 1) != 0)
          {
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1[26] + 1312, (uint64_t *)&v44);
            if ((v33 & 2) == 0)
            {
LABEL_46:
              if ((v33 & 4) == 0)
                goto LABEL_48;
              goto LABEL_47;
            }
          }
          else if ((v32 & 2) == 0)
          {
            goto LABEL_46;
          }
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1[26] + 1360, (uint64_t *)&v44);
          if ((v33 & 4) == 0)
          {
LABEL_48:
            if (v33 >= 8)
            {
              if (re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4)
              {
                v37 = (uint64_t)v44;
                re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v51);
                v45[0] = 0;
                v45[1] = 0;
                v46 = 1;
                v48 = 0;
                v49 = 0;
                v47 = 0;
                v50 = 0;
                re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v45, (uint64_t)v51, 1uLL);
                *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v45) = v37;
                while (v49)
                {
                  v38 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v45, v49 - 1);
                  re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v45, --v49);
                  ++v50;
                  v39 = v38[41];
                  if (v39)
                  {
                    v40 = (uint64_t *)v38[43];
                    v41 = 8 * v39;
                    do
                    {
                      v42 = *v40++;
                      *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v45) = v42;
                      v41 -= 8;
                    }
                    while (v41);
                  }
                  v43 = a1[26] + 928;
                  v52 = v38[37];
                  v53 = v38;
                  if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v43, &v52))
                  {
                    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1[26] + 1072, (uint64_t *)&v53);
                  }
                }
                re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v45);
                if (v45[0] && (v46 & 1) == 0)
                  (*(void (**)(void))(*(_QWORD *)v45[0] + 40))();
                re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v51);
              }
              else if (re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
                     || re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == (_UNKNOWN *)a4
                     && (v34 = v44, *((_QWORD *)v44 + 22))
                     && ((*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1[26] + 128) + 56))(v51),
                         isEntityAMeshReceiver = re::internal::shadows::isEntityAMeshReceiver(v34, (re::ecs2::Entity *)v51, v35), re::AssetHandle::~AssetHandle((re::AssetHandle *)v51), isEntityAMeshReceiver))
              {
                re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1[26] + 1072, (uint64_t *)&v44);
              }
            }
            return;
          }
LABEL_47:
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1[26] + 1408, (uint64_t *)&v44);
          goto LABEL_48;
        }
        v16 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), a4);
        if (v16)
        {
          v17 = *(_BYTE *)(v16 + 30);
          v18 = a1[26];
          if (!*(_BYTE *)(v18 + 1744))
            *(_BYTE *)(v18 + 1744) = 1;
          *(_BYTE *)(v18 + 1745) = v17;
        }
      }
    }
  }
}

BOOL re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 32 * v4 + 16) == v2)
    return 1;
  do
  {
    v4 = *(_DWORD *)(v6 + 32 * v4 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v4 != 0x7FFFFFFF;
  }
  while ((_DWORD)v4 != 0x7FFFFFFF && *(_QWORD *)(v6 + 32 * v4 + 16) != v2);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;

  if (*(_QWORD *)result)
  {
    v2 = result;
    v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(result + 24);
    v5 = *(_QWORD *)(result + 8);
    v6 = *(unsigned int *)(v5 + 4 * v4);
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v7 + 96 * v6 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v7 + 96 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        result = re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(*(_QWORD *)(result + 16) + 96 * v6);
        v10 = *(_DWORD *)(v2 + 40);
        *(_DWORD *)(*(_QWORD *)(v2 + 16) + 96 * v6 + 8) = *(_DWORD *)(*(_QWORD *)(v2 + 16) + 96 * v6 + 8) & 0x80000000 | *(_DWORD *)(v2 + 36);
        --*(_DWORD *)(v2 + 28);
        *(_DWORD *)(v2 + 36) = v6;
        *(_DWORD *)(v2 + 40) = v10 + 1;
      }
      else
      {
        while (1)
        {
          v8 = v6;
          v9 = *(_DWORD *)(v7 + 96 * v6 + 8);
          v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v7 + 96 * v6 + 16) == a2)
          {
            *(_DWORD *)(v7 + 96 * v8 + 8) = *(_DWORD *)(v7 + 96 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 96 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
        return result;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::unionSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;

  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a3);
  v6 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v9 = *v8;
      v8 += 6;
      if (v9 < 0)
        break;
      if (v6 == ++v7)
      {
        LODWORD(v7) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if ((_DWORD)v6 != (_DWORD)v7)
  {
    v10 = v7;
    v11 = *(_QWORD *)(a1 + 16);
    do
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a3, (uint64_t *)(v11 + 24 * v10 + 16));
      v12 = *(_DWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a1 + 16);
      if (v12 <= (int)v7 + 1)
        v13 = v7 + 1;
      else
        v13 = *(_DWORD *)(a1 + 32);
      v14 = v7;
      while (1)
      {
        v10 = (v14 + 1);
        if (v13 - 1 == v14)
          break;
        ++v14;
        LODWORD(v7) = v10;
        if ((*(_DWORD *)(v11 + 24 * v10 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v7) = v13;
LABEL_17:
      ;
    }
    while (v12 != (_DWORD)v7);
  }
  v15 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v18 = *v17;
      v17 += 6;
      if (v18 < 0)
        break;
      if (v15 == ++v16)
      {
        LODWORD(v16) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v16) = 0;
  }
  if ((_DWORD)v15 != (_DWORD)v16)
  {
    v19 = v16;
    v20 = *(_QWORD *)(a2 + 16);
    do
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a3, (uint64_t *)(v20 + 24 * v19 + 16));
      v21 = *(_DWORD *)(a2 + 32);
      v20 = *(_QWORD *)(a2 + 16);
      if (v21 <= (int)v16 + 1)
        v22 = v16 + 1;
      else
        v22 = *(_DWORD *)(a2 + 32);
      v23 = v16;
      while (1)
      {
        v19 = (v23 + 1);
        if (v22 - 1 == v23)
          break;
        ++v23;
        LODWORD(v16) = v19;
        if ((*(_DWORD *)(v20 + 24 * v19 + 8) & 0x80000000) != 0)
          goto LABEL_34;
      }
      LODWORD(v16) = v22;
LABEL_34:
      ;
    }
    while (v21 != (_DWORD)v16);
  }
}

uint64_t *re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::add(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 56 * v5;
  *(_QWORD *)v11 = *a2;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_DWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(v11 + 8) = 0u;
  result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v11 + 8), a2 + 1);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::ecs2::MeshShadowSystem::willAddSystemToECSService(re::ecs2::MeshShadowSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  re::AssetHandle *v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = *((_QWORD *)this + 15);
  if (v2 && *((_QWORD *)this + 14))
  {
    v3 = *((_QWORD *)this + 16);
    if (v3)
    {
      v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 112))(v3, v4);
      v2 = *((_QWORD *)this + 15);
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, const char *))(*(_QWORD *)v2 + 8))(&v8, v2, "engine:Courier.refont");
    v6 = *((_OWORD *)this + 13);
    v5 = (re::ecs2::MeshShadowSystem *)((char *)this + 208);
    *(_OWORD *)v5 = v8;
    v8 = v6;
    v7 = *((_QWORD *)v5 + 2);
    *((_QWORD *)v5 + 2) = v9;
    v9 = v7;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
    re::AssetHandle::loadAsync(v5);
  }
}

double re::ecs2::MeshShadowSystem::willRemoveSystemFromECSService(re::ecs2::MeshShadowSystem *this)
{
  double result;

  *((_QWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::MeshShadowSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _anonymous_namespace_ *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  re *v21;
  re *v22;
  re::RenderManager *v23;
  uint64_t *v24;
  re::MaterialParameterBlock *v25;
  re::MaterialParameterBlock *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t FirstBitSet;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  re::ecs2::System *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  int *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const __int16 *v63;
  int16x8_t *v64;
  int16x8_t v65;
  int v66;
  uint16x8_t v67;
  int v68;
  int v69;
  re::MaterialAsset *v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v80;
  int v81;
  int v82;
  int *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  int *v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  unsigned int v95;
  uint64_t v96;
  _BOOL4 v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  int *v139;
  int v140;
  __guard *v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  _QWORD **v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  re::MaterialAsset *v156;
  uint64_t i;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  re::MaterialAsset *v161;
  _QWORD *v162;
  uint64_t v163;
  _DWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  re::ecs2::EntityComponentCollection *v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  int *v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int *v181;
  int v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  unsigned int v192;
  unsigned int v193;
  uint64_t v194;
  int *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  int *v205;
  int v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  _BOOL4 v211;
  char v212;
  int v213;
  uint64_t v214;
  char v215;
  int v216;
  int v217;
  re::ecs2::Entity **v218;
  uint64_t v219;
  re::ecs2::Entity *v220;
  uint64_t v221;
  int *v222;
  int v223;
  uint64_t v224;
  _QWORD *v225;
  unint64_t *v226;
  uint64_t v227;
  _BYTE *v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  _BYTE *v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int *v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  int *v265;
  int v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  _anonymous_namespace_ *v271;
  uint64_t v272;
  uint64_t v273;
  re::ecs2::RenderingSubsystem **v274;
  re::AssetHandle *v275;
  uint64_t v280;
  uint64_t v281;
  double Current;
  double v283;
  uint64_t v284;
  int *v285;
  int v286;
  uint64_t v287;
  float v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t *v292;
  unint64_t v293;
  unint64_t v294;
  unsigned int v295;
  uint64_t v296;
  re::ecs2::TransformComponent **v297;
  uint64_t *v298;
  re::ecs2::TransformComponent **v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  float v303;
  float v304;
  float v305;
  float v306;
  _anonymous_namespace_ *v307;
  float32x4_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t j;
  float *v316;
  float *v317;
  _BOOL4 v318;
  int v319;
  __int128 v320;
  __n128 v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t *v324;
  unint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  BOOL v332;
  char v333;
  uint64_t v334;
  __int128 v335;
  uint64_t v336;
  uint64_t v337;
  float32x4_t v338;
  int32x4_t v339;
  __int128 v340;
  __int128 v341;
  float32x4_t v342;
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  char v352;
  int v353;
  char v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  __int128 v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  int v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  int *v379;
  int v380;
  uint64_t v381;
  int v382;
  int v383;
  _anonymous_namespace_ *v384;
  int v385;
  uint64_t v386;
  int *v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t v392;
  unint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  int *v404;
  int v405;
  int v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  int *v410;
  int v411;
  uint64_t v412;
  int v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  int *v417;
  int v418;
  uint64_t v419;
  uint64_t *v420;
  int v421;
  int v422;
  uint64_t v423;
  int *v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  _QWORD *v428;
  unint64_t v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unsigned int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  _BOOL4 v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t *v445;
  uint64_t v446;
  _BOOL4 v447;
  uint64_t v448;
  int v449;
  re *v450;
  uint64_t *v451;
  uint64_t v452;
  int v453;
  NSObject *v454;
  _BOOL8 v455;
  uint64_t v456;
  uint64_t v457;
  _BYTE *v458;
  re::DynamicString *v459;
  re *v460;
  uint64_t v461;
  uint64_t *v462;
  uint64_t v463;
  NSObject *v464;
  uint64_t v465;
  uint64_t v466;
  _BYTE *v467;
  re::DynamicString *v468;
  re *v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  NSObject *v473;
  uint64_t v474;
  uint64_t v475;
  _BYTE *v476;
  re *v477;
  uint64_t *v478;
  uint64_t v479;
  uint64_t v480;
  NSObject *v481;
  uint64_t v482;
  uint64_t v483;
  _BYTE *v484;
  re *v485;
  uint64_t *v486;
  uint64_t v487;
  uint64_t v488;
  NSObject *v489;
  uint64_t v490;
  uint64_t v491;
  _BYTE *v492;
  re *v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  NSObject *v497;
  uint64_t v498;
  NSObject *v499;
  uint64_t v500;
  int v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  __int128 v505;
  __int128 v506;
  __int128 v507;
  uint8_t *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  __int128 v513;
  uint64_t v514;
  __int128 v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  __int128 v519;
  void *v520;
  __int128 v521;
  __int128 v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  uint64_t v527;
  uint64_t v528;
  unint64_t v529;
  unint64_t v530;
  __n128 v531;
  uint64_t v532;
  _QWORD *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  __int128 v542;
  __int128 v543;
  __int128 v544;
  __int128 v545;
  __int128 v546;
  unint64_t v547;
  unint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  int v553;
  __int128 v554;
  int v555;
  __int128 v556;
  unint64_t v557;
  unint64_t v558;
  uint64_t v559;
  __int128 v560;
  __int128 v561;
  __int128 v562;
  __int128 v563;
  __int128 v564;
  __int128 v565;
  __int128 v566;
  uint64_t v567;
  uint64_t (**v568)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v569;
  uint64_t v570;
  re *v571;
  _QWORD **v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  re::AssetHandle *v581;
  uint64_t v582;
  int v583;
  __n128 v584;
  __n128 v585;
  double v586;
  __n128 v587;
  uint64_t v588;
  __int128 v589;
  uint64_t v590;
  unsigned int v591;
  uint64_t v592;
  int v593;
  int v594;
  uint64_t v595;
  unsigned int v596;
  char v597;
  char v598;
  re *v599;
  re::RenderManager *v600;
  uint64_t *v601;
  re::MaterialParameterBlock *v602;
  re::MaterialParameterBlock *v603;
  uint64_t v604;
  re *v605;
  re::RenderManager *v606;
  uint64_t *v607;
  re::MaterialParameterBlock *v608;
  re::MaterialParameterBlock *v609;
  uint64_t v610;
  NSObject *v611;
  unint64_t v612;
  uint64_t v613;
  uint64_t v614;
  id v615;
  uint64_t v616;
  id v617;
  uint64_t v618;
  id v619;
  uint64_t v620;
  uint64_t v621;
  __int128 v622;
  __int128 v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  uint64_t v628;
  uint64_t v629;
  __int128 *v630;
  _OWORD *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  _OWORD *v636;
  uint64_t v637;
  uint64_t *v638;
  uint64_t *v639;
  uint64_t *v640;
  uint64_t *v641;
  uint64_t *v642;
  uint64_t *v643;
  uint8_t *v644;
  int32x4_t v645;
  uint64_t v646;
  re::ecs2::RenderingSubsystem **v647;
  uint64_t v648;
  uint64_t v649;
  _anonymous_namespace_ *v650;
  int v651[2];
  uint64_t v652;
  int v653;
  uint64_t v654;
  _BOOL4 v655;
  uint64_t v656;
  uint64_t v657;
  unint64_t *v658;
  _BYTE v659[16];
  uint64_t v660[2];
  _QWORD v661[2];
  unint64_t v662[2];
  float32x4_t v663;
  __int128 v664;
  __int128 v665;
  _OWORD v666[2];
  int v667;
  uint64_t v668;
  __n128 v669;
  uint64_t v670;
  __int128 v671;
  __n128 v672;
  char v673;
  _BYTE v674[23];
  __int128 v675;
  __int128 v676;
  __int128 v677;
  __int128 v678;
  float32x4_t v679;
  __int128 v680;
  int32x4_t v681;
  __int128 v682;
  __int128 v683;
  float32x4_t v684;
  float32x4_t v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  double v689;
  uint8_t buf[48];
  __int128 v691;
  __int128 v692;
  _BYTE v693[31];
  __n128 v694;
  uint8_t v695[16];
  __int128 v696;
  _BYTE v697[48];
  __int128 v698;
  __int128 v699;
  _BYTE v700[48];
  __int128 v701;
  __int128 v702;
  _BYTE v703[48];
  __int128 v704;
  __int128 v705;
  _BYTE v706[40];
  int v707;
  __int128 v708;
  __int128 v709;
  int v710;
  void *__dst;
  __int128 v712;
  __int128 v713;
  int v714;
  uint64_t v715;
  _BYTE v716[32];
  __int128 v717;
  _BYTE v718[48];
  __int128 v719;
  __int128 v720;
  __int128 v721;
  _BYTE v722[32];
  __int128 v723;
  __int128 v724;
  __int128 v725;
  uint64_t v726;

  v726 = *MEMORY[0x24BDAC8D0];
  v661[0] = a3;
  v661[1] = a4;
  v6 = *(_QWORD *)(a1 + 104);
  if (v6 && (*(_BYTE *)(v6 + 424) & 0x10) == 0)
    return;
  if (*(_BYTE *)(a1 + 2657))
    goto LABEL_4;
  v21 = *(re **)(a1 + 128);
  if (v21)
  {
    *(_BYTE *)(a1 + 2657) = 1;
    if (!*(_QWORD *)(a1 + 160))
    {
      (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v21 + 48))(v695);
      v22 = (re *)re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v695);
      if (v22)
      {
        v23 = *(re::RenderManager **)(a1 + 112);
        v24 = re::globalAllocators(v22);
        v25 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2]
                                                                                                 + 32))(v24[2], 1008, 8);
        v26 = re::MaterialParameterBlock::MaterialParameterBlock(v25, v23);
        v27 = *(_QWORD *)(a1 + 160);
        *(_QWORD *)(a1 + 160) = v26;
        if (v27)

      }
      else
      {
        *(_BYTE *)(a1 + 2657) = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v695);
    }
    if (!*(_QWORD *)(a1 + 176))
    {
      (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 128) + 64))(v695);
      v599 = (re *)re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v695);
      if (v599)
      {
        v600 = *(re::RenderManager **)(a1 + 112);
        v601 = re::globalAllocators(v599);
        v602 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v601[2]
                                                                                                  + 32))(v601[2], 1008, 8);
        v603 = re::MaterialParameterBlock::MaterialParameterBlock(v602, v600);
        v604 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 176) = v603;
        if (v604)

      }
      else
      {
        *(_BYTE *)(a1 + 2657) = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v695);
    }
    if (!*(_QWORD *)(a1 + 168))
    {
      (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 128) + 56))(v695);
      v605 = (re *)re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v695);
      if (v605)
      {
        v606 = *(re::RenderManager **)(a1 + 112);
        v607 = re::globalAllocators(v605);
        v608 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v607[2]
                                                                                                  + 32))(v607[2], 1008, 8);
        v609 = re::MaterialParameterBlock::MaterialParameterBlock(v608, v606);
        v610 = *(_QWORD *)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v609;
        if (v610)

      }
      else
      {
        *(_BYTE *)(a1 + 2657) = 0;
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v695);
    }
    if (*(_BYTE *)(a1 + 2657))
    {
LABEL_4:
      re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v660);
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v659, 3146, a1);
      v654 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
      v7 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 168) + 888));
      if (v7 >= *(_QWORD *)(a1 + 2640))
      {
        *(_QWORD *)(a1 + 2640) = v7 + 1;
        if (*(_BYTE *)(a1 + 2400))
        {
          re::MeshShadowPerFrameUpdateData::~MeshShadowPerFrameUpdateData((re::MeshShadowPerFrameUpdateData *)(a1 + 1760));
          *(_BYTE *)(a1 + 2400) = 0;
        }
        if (*(_BYTE *)(a1 + 2648))
          *(_BYTE *)(a1 + 2648) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 2648) = 1;
      }
      v8 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)v695, (uint64_t *)(a1 + 616));
      *(_QWORD *)&v697[8] = *(_QWORD *)(a1 + 656);
      LODWORD(v677) = 1;
      *(_QWORD *)&v678 = 0;
      *((_QWORD *)&v677 + 1) = 0;
      *((_QWORD *)&v676 + 1) = 0;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(&v676, 0);
      LODWORD(v677) = v677 + 2;
      v9 = *(_QWORD *)(a1 + 656);
      if ((v9 & 0x3F) != 0)
        v10 = (v9 >> 6) + 1;
      else
        v10 = v9 >> 6;
      *((_QWORD *)&v678 + 1) = *(_QWORD *)(a1 + 656);
      *(_QWORD *)buf = 0;
      re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)&v676, v10, buf);
      v11 = *(_DWORD *)(a1 + 632);
      v648 = a2;
      if ((v11 & 1) != 0)
        v12 = (_QWORD *)(a1 + 640);
      else
        v12 = *(_QWORD **)(a1 + 648);
      v13 = *(_QWORD *)(a1 + 624);
      v14 = (uint64_t *)(a1 + 640);
      while (1)
      {
        v15 = a1 + 640;
        if ((v11 & 1) == 0)
          v15 = *(_QWORD *)(a1 + 648);
        if (v12 == (_QWORD *)(v15 + 8 * v13))
          break;
        *v12++ = 0;
        v11 = *(_DWORD *)(a1 + 632);
      }
      v16 = (unint64_t *)&v696 + 1;
      if ((v696 & 1) == 0)
        v16 = *(unint64_t **)v697;
      v17 = *(_QWORD *)&v695[8];
      if ((*(_QWORD *)&v695[8] & 0x3FFFFFFFFFFFFFFLL) != 0)
      {
        v18 = 0;
        while (1)
        {
          v20 = *v16++;
          v19 = v20;
          if (v20)
            break;
          v18 -= 64;
          if (!--v17)
            goto LABEL_46;
        }
        v28 = __clz(__rbit64(v19));
        if (v28 + 1 != v18)
        {
          FirstBitSet = v28 - v18;
          do
          {
            v30 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 448, FirstBitSet);
            v31 = *(_QWORD *)(*v30 + 224);
            v32 = v30[3];
            v33 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v30[2] + 8, v32);
            if (*(_DWORD *)(v33 + 40))
              v34 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v31 + 24))(v31, v661, v30, v32, v33, 0);
            else
              v34 = 0;
            v35 = v30[5];
            v36 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v30[2] + 8, v35);
            if (*(_DWORD *)(v36 + 40))
              v34 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v31 + 32))(v31, v661, v30, v35, v36, 0);
            v37 = v30[6];
            v38 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v30[2] + 8, v37);
            if (*(_DWORD *)(v38 + 40))
            {
              if (((v34 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v31 + 40))(v31, v661, v30, v37, v38, 0)) & 1) == 0)goto LABEL_44;
            }
            else if (!v34)
            {
LABEL_44:
              re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)&v676, FirstBitSet);
              goto LABEL_45;
            }
            re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)&v676, FirstBitSet);
LABEL_45:
            FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v695, FirstBitSet + 1);
          }
          while (FirstBitSet != -1);
        }
      }
LABEL_46:
      re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 616, (uint64_t)&v676);
      if (*(_BYTE *)(a1 + 680))
      {
        v39 = *(_QWORD *)(a1 + 624);
        v40 = *(_DWORD *)(a1 + 632);
        if (v39 >= 0xB)
        {
          if ((v40 & 1) == 0)
            v14 = *(uint64_t **)(a1 + 648);
          v41 = 8 * v39;
          while (!*v14)
          {
            ++v14;
            v41 -= 8;
            if (!v41)
              goto LABEL_62;
          }
          goto LABEL_60;
        }
        if ((v40 & 1) == 0)
          v14 = *(uint64_t **)(a1 + 648);
        if (v39)
        {
          v42 = 0;
          v43 = 8 * v39;
          do
          {
            v44 = *v14++;
            v42 |= v44;
            v43 -= 8;
          }
          while (v43);
          if (v42)
          {
LABEL_60:
            v45 = *(re::ecs2::System **)(a1 + 664);
            if (!*((_BYTE *)v45 + 86))
              re::ecs2::System::queueToRun(v45, 0.0);
          }
        }
      }
LABEL_62:
      if ((_QWORD)v676 && (v677 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v676 + 40))();
      if (*(_QWORD *)v695 && (v696 & 1) == 0)
        (*(void (**)(void))(**(_QWORD **)v695 + 40))();
      (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 128) + 16))(v695);
      v46 = v702;
      *(_OWORD *)(a1 + 2576) = v701;
      *(_OWORD *)(a1 + 2592) = v46;
      *(_OWORD *)(a1 + 2608) = *(_OWORD *)v703;
      v47 = *(_OWORD *)v700;
      *(_OWORD *)(a1 + 2512) = v699;
      *(_OWORD *)(a1 + 2528) = v47;
      v48 = *(_OWORD *)&v700[32];
      *(_OWORD *)(a1 + 2544) = *(_OWORD *)&v700[16];
      *(_OWORD *)(a1 + 2560) = v48;
      v49 = *(_OWORD *)&v697[16];
      *(_OWORD *)(a1 + 2448) = *(_OWORD *)v697;
      *(_OWORD *)(a1 + 2464) = v49;
      v50 = v698;
      *(_OWORD *)(a1 + 2480) = *(_OWORD *)&v697[32];
      *(_OWORD *)(a1 + 2496) = v50;
      v51 = v696;
      *(_OWORD *)(a1 + 2416) = *(_OWORD *)v695;
      *(_QWORD *)(a1 + 2624) = *(_QWORD *)&v703[16];
      *(_OWORD *)(a1 + 2432) = v51;
      *(_QWORD *)v651 = *(unsigned int *)(a1 + 1440);
      v52 = 0;
      if (v651[0])
      {
        v53 = (int *)(*(_QWORD *)(a1 + 1424) + 8);
        while (1)
        {
          v54 = *v53;
          v53 += 6;
          if (v54 < 0)
            break;
          if (*(_QWORD *)v651 == ++v52)
          {
            LODWORD(v52) = *(_DWORD *)(a1 + 1440);
            break;
          }
        }
      }
      if (v651[0] != (_DWORD)v52)
      {
        v55 = v52;
        do
        {
          v56 = *(_QWORD *)(*(_QWORD *)(a1 + 1424) + 24 * v55 + 16);
          re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v695);
          v676 = 0uLL;
          LODWORD(v677) = 1;
          v678 = 0uLL;
          *((_QWORD *)&v677 + 1) = 0;
          v679.i32[0] = 0;
          re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)&v676, (uint64_t)v695, 1uLL);
          *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)&v676) = v56;
LABEL_76:
          while (*((_QWORD *)&v678 + 1))
          {
            v57 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v676, *((_QWORD *)&v678 + 1) - 1);
            re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)&v676, *((_QWORD *)&v678 + 1) - 1);
            --*((_QWORD *)&v678 + 1);
            ++v679.i32[0];
            v58 = *(_QWORD *)(v57 + 328);
            if (v58)
            {
              v59 = *(uint64_t **)(v57 + 344);
              v60 = 8 * v58;
              do
              {
                v61 = *v59++;
                *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)&v676) = v61;
                v60 -= 8;
              }
              while (v60);
            }
            *(_QWORD *)buf = v57;
            v62 = *(unsigned __int16 *)(v57 + 82);
            if (*(_WORD *)(v57 + 82))
            {
              v63 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                    + 16);
              v64 = *(int16x8_t **)(v57 + 88);
              v65 = vld1q_dup_s16(v63);
              v66 = 1;
              while (1)
              {
                v67 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v65, *v64), (int8x16_t)xmmword_2260F1E80);
                v67.i16[0] = vmaxvq_u16(v67);
                if (v67.i32[0])
                  break;
                v66 -= 8;
                ++v64;
                if (!--v62)
                  goto LABEL_76;
              }
              if (v67.u16[0] - v66 < *(unsigned __int16 *)(v57 + 80))
              {
                v662[0] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144));
                if (*(_BYTE *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)v662, v57))
                {
                  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 1312, (uint64_t *)buf);
                }
                else
                {
                  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 1456, (uint64_t *)buf);
                  re::ecs2::MeshShadowSystem::processCasterRemoval((re::ecs2::MeshShadowSystem *)a1, *(re::ecs2::Entity **)buf);
                }
              }
            }
          }
          re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)&v676);
          if ((_QWORD)v676 && (v677 & 1) == 0)
            (*(void (**)(void))(*(_QWORD *)v676 + 40))();
          re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v695);
          if (*(_DWORD *)(a1 + 1440) <= (v52 + 1))
            v68 = v52 + 1;
          else
            v68 = *(_DWORD *)(a1 + 1440);
          while (1)
          {
            v55 = (v52 + 1);
            if (v68 - 1 == (_DWORD)v52)
              break;
            LODWORD(v52) = v52 + 1;
            v69 = v55;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 1424) + 24 * v55 + 8) & 0x80000000) != 0)
              goto LABEL_99;
          }
          v69 = v68;
LABEL_99:
          LODWORD(v52) = v69;
        }
        while (v651[0] != v69);
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1408);
      LODWORD(v678) = 0;
      v677 = 0u;
      v676 = 0u;
      *(_QWORD *)((char *)&v678 + 4) = 0x7FFFFFFFLL;
      v71 = *(unsigned int *)(a1 + 1344);
      if ((_DWORD)v71)
      {
        v72 = 0;
        v73 = (int *)(*(_QWORD *)(a1 + 1328) + 8);
        while (1)
        {
          v74 = *v73;
          v73 += 6;
          if (v74 < 0)
            break;
          if (v71 == ++v72)
          {
            LODWORD(v72) = *(_DWORD *)(a1 + 1344);
            break;
          }
        }
      }
      else
      {
        LODWORD(v72) = 0;
      }
      if ((_DWORD)v71 == (_DWORD)v72)
      {
        v75 = 0;
        LODWORD(v76) = 0;
        v77 = *(_DWORD *)(a1 + 1344);
      }
      else
      {
        v78 = v72;
        do
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(a1 + 1328) + 24 * v78 + 16);
          v70 = (re::MaterialAsset *)(*(_QWORD *(**)(uint8_t *__return_ptr))(*(_QWORD *)v654 + 8))(v695);
          if (v695[0])
            _ZF = *(_QWORD *)&v695[8] == 0;
          else
            _ZF = 1;
          if (!_ZF)
          {
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 1456, (uint64_t *)buf);
            v70 = (re::MaterialAsset *)re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)&v676, (uint64_t *)buf);
          }
          v80 = *(_QWORD *)(*(_QWORD *)buf + 224);
          if (v80 && !*(_QWORD *)(v80 + 64))
          {
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 1456, (uint64_t *)buf);
            v70 = (re::MaterialAsset *)re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)&v676, (uint64_t *)buf);
          }
          v77 = *(_DWORD *)(a1 + 1344);
          if (v77 <= (int)v72 + 1)
            v81 = v72 + 1;
          else
            v81 = *(_DWORD *)(a1 + 1344);
          while (1)
          {
            v78 = (v72 + 1);
            if (v81 - 1 == (_DWORD)v72)
              break;
            LODWORD(v72) = v72 + 1;
            v82 = v78;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 1328) + 24 * v78 + 8) & 0x80000000) != 0)
              goto LABEL_124;
          }
          v82 = v81;
LABEL_124:
          LODWORD(v72) = v82;
        }
        while ((_DWORD)v71 != v82);
        v75 = v678;
        if ((_DWORD)v678)
        {
          v76 = 0;
          v83 = (int *)(v677 + 8);
          while (1)
          {
            v84 = *v83;
            v83 += 6;
            if (v84 < 0)
              break;
            if (v678 == ++v76)
            {
              LODWORD(v76) = v678;
              break;
            }
          }
        }
        else
        {
          LODWORD(v76) = 0;
        }
      }
      if (v75 != (_DWORD)v76)
      {
        v85 = v76;
        v86 = v677;
        do
        {
          v70 = (re::MaterialAsset *)re::ecs2::MeshShadowSystem::processCasterRemoval((re::ecs2::MeshShadowSystem *)a1, *(re::ecs2::Entity **)(v86 + 24 * v85 + 16));
          v86 = v677;
          if (v678 <= (int)v76 + 1)
            v87 = v76 + 1;
          else
            v87 = v678;
          v88 = v76;
          while (1)
          {
            v85 = (v88 + 1);
            if (v87 - 1 == v88)
              break;
            ++v88;
            LODWORD(v76) = v85;
            if ((*(_DWORD *)(v677 + 24 * v85 + 8) & 0x80000000) != 0)
              goto LABEL_141;
          }
          LODWORD(v76) = v87;
LABEL_141:
          ;
        }
        while (v75 != (_DWORD)v76);
        v77 = *(_DWORD *)(a1 + 1344);
      }
      v89 = 0;
      if (v77)
      {
        v90 = (int *)(*(_QWORD *)(a1 + 1328) + 8);
        while (1)
        {
          v91 = *v90;
          v90 += 6;
          if (v91 < 0)
            break;
          if (v77 == ++v89)
          {
            LODWORD(v89) = v77;
            break;
          }
        }
      }
      if (v77 != (_DWORD)v89)
      {
        v92 = v89;
        v93 = (uint64_t *)(a1 + 832);
        v94 = (uint64_t *)(a1 + 736);
        v656 = a1 + 1120;
        v652 = a1 + 1168;
        v95 = v77;
        while (1)
        {
          v662[0] = 0;
          v662[0] = *(_QWORD *)(*(_QWORD *)(a1 + 1328) + 24 * v92 + 16);
          *(_QWORD *)&v666[0] = *(_QWORD *)(v662[0] + 296);
          v96 = *(_QWORD *)(v662[0] + 224);
          if (v96)
            break;
LABEL_238:
          if (v95 <= (int)v89 + 1)
            v135 = v89 + 1;
          else
            v135 = v95;
          while (1)
          {
            v92 = (v89 + 1);
            if (v135 - 1 == (_DWORD)v89)
              break;
            LODWORD(v89) = v89 + 1;
            v136 = v92;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 1328) + 24 * v92 + 8) & 0x80000000) != 0)
              goto LABEL_245;
          }
          v136 = v135;
LABEL_245:
          LODWORD(v89) = v136;
          if (v77 == v136)
            goto LABEL_246;
        }
        *(_QWORD *)v693 = *(_QWORD *)(v96 + 64);
        v97 = re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1 + 832, (uint64_t *)v666);
        v98 = *v94;
        if (*v94)
        {
          v99 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v693 ^ (*(_QWORD *)v693 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                        * (*(_QWORD *)v693 ^ (*(_QWORD *)v693 >> 30))) >> 27));
          v100 = *(unsigned int *)(*(_QWORD *)(a1 + 744) + 4 * ((v99 ^ (v99 >> 31)) % *(unsigned int *)(a1 + 760)));
          if ((_DWORD)v100 != 0x7FFFFFFF)
          {
            v102 = *(_QWORD *)(a1 + 752);
            if (*(_QWORD *)(v102 + 96 * v100 + 16) == *(_QWORD *)v693)
            {
              if (!v97)
              {
LABEL_168:
                re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1 + 832, (uint64_t *)v666, v693);
                goto LABEL_214;
              }
LABEL_158:
              v101 = 1;
              goto LABEL_159;
            }
            while (1)
            {
              LODWORD(v100) = *(_DWORD *)(v102 + 96 * v100 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v100 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v102 + 96 * v100 + 16) == *(_QWORD *)v693)
              {
                if (v97)
                  goto LABEL_158;
                goto LABEL_168;
              }
            }
          }
        }
        if (!v97)
        {
          re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1 + 832, (uint64_t *)v666, v693);
          goto LABEL_219;
        }
        v101 = 0;
LABEL_159:
        v103 = *v93;
        if (*v93)
        {
          v104 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)&v666[0] ^ (*(_QWORD *)&v666[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                 * (*(_QWORD *)&v666[0] ^ (*(_QWORD *)&v666[0] >> 30))) >> 27));
          v105 = *(unsigned int *)(*(_QWORD *)(a1 + 840) + 4 * ((v104 ^ (v104 >> 31)) % *(unsigned int *)(a1 + 856)));
          v106 = *(_QWORD *)(a1 + 848);
          if ((_DWORD)v105 != 0x7FFFFFFF)
          {
            if (*(_QWORD *)(v106 + 32 * v105 + 16) != *(_QWORD *)&v666[0])
            {
              do
                v105 = *(_DWORD *)(v106 + 32 * v105 + 8) & 0x7FFFFFFF;
              while ((_DWORD)v105 != 0x7FFFFFFF && *(_QWORD *)(v106 + 32 * v105 + 16) != *(_QWORD *)&v666[0]);
              v105 = v105;
            }
LABEL_171:
            if (*(_QWORD *)(v106 + 32 * v105 + 24) == *(_QWORD *)v693)
            {
              v107 = 0;
              goto LABEL_212;
            }
            *(_QWORD *)v695 = 0;
            if (v103)
            {
              v108 = 0x94D049BB133111EBLL
                   * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)&v666[0] ^ (*(_QWORD *)&v666[0] >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(_QWORD *)&v666[0] ^ (*(_QWORD *)&v666[0] >> 30))) >> 27));
              v109 = *(unsigned int *)(*(_QWORD *)(a1 + 840) + 4 * ((v108 ^ (v108 >> 31)) % *(unsigned int *)(a1 + 856)));
              if ((_DWORD)v109 != 0x7FFFFFFF)
              {
                v119 = v109;
                v120 = v106 + 32 * v109;
                v122 = *(_QWORD *)(v120 + 16);
                v121 = (uint64_t *)(v120 + 16);
                v123 = v109;
                v124 = v109;
                if (v122 != *(_QWORD *)&v666[0])
                {
                  do
                    v123 = *(_DWORD *)(v106 + 32 * v123 + 8) & 0x7FFFFFFF;
                  while ((_DWORD)v123 != 0x7FFFFFFF && *(_QWORD *)(v106 + 32 * v123 + 16) != *(_QWORD *)&v666[0]);
                  v124 = v123;
                }
                *(_QWORD *)v695 = *(_QWORD *)(v106 + 32 * v124 + 24);
                v125 = *v121;
                while (v125 != *(_QWORD *)&v666[0])
                {
                  v119 = *(_DWORD *)(v106 + 32 * v119 + 8) & 0x7FFFFFFF;
                  v109 = 0x7FFFFFFFLL;
                  if (v119 == 0x7FFFFFFF)
                    break;
                  v125 = *(_QWORD *)(v106 + 32 * v119 + 16);
                  v109 = v119;
                }
LABEL_178:
                *(_QWORD *)(v106 + 32 * v109 + 24) = *(_QWORD *)v693;
                if (v98)
                {
                  v111 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v695 ^ (*(_QWORD *)v695 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                 * (*(_QWORD *)v695 ^ (*(_QWORD *)v695 >> 30))) >> 27));
                  v112 = *(unsigned int *)(*(_QWORD *)(a1 + 744)
                                         + 4 * ((v111 ^ (v111 >> 31)) % *(unsigned int *)(a1 + 760)));
                  v113 = *(_QWORD *)(a1 + 752);
                  if ((_DWORD)v112 != 0x7FFFFFFF)
                  {
                    while (*(_QWORD *)(v113 + 96 * v112 + 16) != *(_QWORD *)v695)
                    {
                      v112 = *(_DWORD *)(v113 + 96 * v112 + 8) & 0x7FFFFFFF;
                      if (v112 == 0x7FFFFFFF)
                        goto LABEL_184;
                    }
LABEL_185:
                    re::DynamicArray<unsigned long long>::remove(v113 + 96 * v112 + 32, v662);
                    v114 = *(_QWORD *)v695;
                    if (*v94)
                    {
                      v115 = 0x94D049BB133111EBLL
                           * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v695 ^ (*(_QWORD *)v695 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v695 ^ (*(_QWORD *)v695 >> 30))) >> 27));
                      v116 = *(unsigned int *)(*(_QWORD *)(a1 + 744)
                                             + 4 * ((v115 ^ (v115 >> 31)) % *(unsigned int *)(a1 + 760)));
                      v117 = *(_QWORD *)(a1 + 752);
                      if ((_DWORD)v116 != 0x7FFFFFFF)
                      {
                        v118 = v116;
                        if (*(_QWORD *)(v117 + 96 * v116 + 16) == *(_QWORD *)v695)
                        {
                          if (!*(_QWORD *)(v117 + 96 * v116 + 48))
                            goto LABEL_208;
LABEL_198:
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v656, (uint64_t *)v695);
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v652, (uint64_t *)v695);
LABEL_211:
                          v107 = 1;
LABEL_212:
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v656, (uint64_t *)v693);
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v652, (uint64_t *)v693);
                          if ((v101 & 1) != 0)
                          {
                            if ((v107 & 1) == 0)
                            {
LABEL_236:
                              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v656, (uint64_t *)v693);
                              v70 = (re::MaterialAsset *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v652, (uint64_t *)v693);
LABEL_237:
                              v95 = *(_DWORD *)(a1 + 1344);
                              goto LABEL_238;
                            }
LABEL_214:
                            if (*v94)
                            {
                              v126 = 0x94D049BB133111EBLL
                                   * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v693 ^ (*(_QWORD *)v693 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v693 ^ (*(_QWORD *)v693 >> 30))) >> 27));
                              v127 = *(unsigned int *)(*(_QWORD *)(a1 + 744)
                                                     + 4 * ((v126 ^ (v126 >> 31)) % *(unsigned int *)(a1 + 760)));
                              v128 = *(_QWORD *)(a1 + 752);
                              if ((_DWORD)v127 != 0x7FFFFFFF)
                              {
                                while (*(_QWORD *)(v128 + 96 * v127 + 16) != *(_QWORD *)v693)
                                {
                                  v127 = *(_DWORD *)(v128 + 96 * v127 + 8) & 0x7FFFFFFF;
                                  if (v127 == 0x7FFFFFFF)
                                    goto LABEL_234;
                                }
                                goto LABEL_235;
                              }
                            }
                            else
                            {
                              v128 = *(_QWORD *)(a1 + 752);
                            }
LABEL_234:
                            LODWORD(v127) = 0x7FFFFFFF;
LABEL_235:
                            re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)(v128 + 96 * v127 + 32), v662);
                            goto LABEL_236;
                          }
LABEL_219:
                          v697[32] = 0;
                          *(_OWORD *)v695 = 0u;
                          v696 = 0u;
                          *(_DWORD *)v697 = 0;
                          *(_QWORD *)&v697[8] = 0;
                          *(_QWORD *)&v697[16] = *(_QWORD *)v693;
                          (*(void (**)(uint8_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v654 + 8))(buf, v654, v662[0]);
                          if (buf[0])
                            v129 = *(_QWORD *)&buf[8];
                          else
                            v129 = 0;
                          *(_QWORD *)&v697[24] = v129;
                          re::DynamicArray<re::TransitionCondition *>::add(&v695[8], v662);
                          v130 = 0x94D049BB133111EBLL
                               * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v693 ^ (*(_QWORD *)v693 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v693 ^ (*(_QWORD *)v693 >> 30))) >> 27));
                          v131 = v130 ^ (v130 >> 31);
                          if (*v94)
                          {
                            v132 = v131 % *(unsigned int *)(a1 + 760);
                            v133 = *(unsigned int *)(*(_QWORD *)(a1 + 744) + 4 * v132);
                            if ((_DWORD)v133 != 0x7FFFFFFF)
                            {
                              v134 = *(_QWORD *)(a1 + 752);
                              while (*(_QWORD *)(v134 + 96 * v133 + 16) != *(_QWORD *)v693)
                              {
                                LODWORD(v133) = *(_DWORD *)(v134 + 96 * v133 + 8) & 0x7FFFFFFF;
                                if ((_DWORD)v133 == 0x7FFFFFFF)
                                  goto LABEL_229;
                              }
                              goto LABEL_230;
                            }
                          }
                          else
                          {
                            LODWORD(v132) = 0;
                          }
LABEL_229:
                          re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1 + 736, v132, v131, v693, (__n128 *)v695);
                          ++*(_DWORD *)(a1 + 776);
LABEL_230:
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v656, (uint64_t *)v693);
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v652, (uint64_t *)v693);
                          v70 = *(re::MaterialAsset **)&v695[8];
                          if (*(_QWORD *)&v695[8] && *(_QWORD *)&v697[8])
                            v70 = (re::MaterialAsset *)(*(uint64_t (**)(void))(**(_QWORD **)&v695[8] + 40))();
                          goto LABEL_237;
                        }
                        do
                          LODWORD(v118) = *(_DWORD *)(v117 + 96 * v118 + 8) & 0x7FFFFFFF;
                        while ((_DWORD)v118 != 0x7FFFFFFF
                             && *(_QWORD *)(v117 + 96 * v118 + 16) != *(_QWORD *)v695);
                        if (*(_QWORD *)(v117 + 96 * v118 + 48))
                          goto LABEL_198;
                        while (1)
                        {
                          v116 = *(_DWORD *)(v117 + 96 * v116 + 8) & 0x7FFFFFFF;
                          if (v116 == 0x7FFFFFFF)
                            break;
                          if (*(_QWORD *)(v117 + 96 * v116 + 16) == *(_QWORD *)v695)
                            goto LABEL_208;
                        }
LABEL_207:
                        LODWORD(v116) = 0x7FFFFFFF;
LABEL_208:
                        if (!*(_QWORD *)(v117 + 96 * v116 + 80))
                        {
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1264, (uint64_t *)v695);
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v656, (uint64_t *)v695);
                          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v652, (uint64_t *)v695);
                          v114 = *(_QWORD *)v695;
                        }
                        re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 736, v114);
                        goto LABEL_211;
                      }
                    }
                    else
                    {
                      v117 = *(_QWORD *)(a1 + 752);
                    }
                    if (*(_QWORD *)(v117 + 0x2FFFFFFFD0))
                      goto LABEL_198;
                    goto LABEL_207;
                  }
                }
                else
                {
                  v113 = *(_QWORD *)(a1 + 752);
                }
LABEL_184:
                LODWORD(v112) = 0x7FFFFFFF;
                goto LABEL_185;
              }
              v110 = *(_QWORD *)(v106 + 32 * v109 + 24);
            }
            else
            {
              v110 = *(_QWORD *)(v106 + 0xFFFFFFFF8);
            }
            *(_QWORD *)v695 = v110;
            v109 = 0x7FFFFFFFLL;
            goto LABEL_178;
          }
        }
        else
        {
          v106 = *(_QWORD *)(a1 + 848);
        }
        v105 = 0x7FFFFFFFLL;
        goto LABEL_171;
      }
LABEL_246:
      v137 = *(unsigned int *)(a1 + 1152);
      if ((_DWORD)v137)
      {
        v138 = 0;
        v139 = (int *)(*(_QWORD *)(a1 + 1136) + 8);
        while (1)
        {
          v140 = *v139;
          v139 += 6;
          if (v140 < 0)
            break;
          if (v137 == ++v138)
          {
            LODWORD(v138) = *(_DWORD *)(a1 + 1152);
            break;
          }
        }
      }
      else
      {
        LODWORD(v138) = 0;
      }
      if ((_DWORD)v137 != (_DWORD)v138)
      {
        v142 = v138;
        v653 = *(_DWORD *)(a1 + 1152);
        do
        {
          if (*(_QWORD *)(a1 + 736))
          {
            v143 = *(_QWORD *)(*(_QWORD *)(a1 + 1136) + 24 * v142 + 16);
            v144 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v143 ^ (v143 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v143 ^ (v143 >> 30))) >> 27));
            v145 = *(unsigned int *)(*(_QWORD *)(a1 + 744) + 4 * ((v144 ^ (v144 >> 31)) % *(unsigned int *)(a1 + 760)));
            v146 = *(_QWORD *)(a1 + 752);
            if ((_DWORD)v145 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v146 + 96 * v145 + 16) != v143)
              {
                v145 = *(_DWORD *)(v146 + 96 * v145 + 8) & 0x7FFFFFFF;
                if (v145 == 0x7FFFFFFF)
                  goto LABEL_260;
              }
              goto LABEL_261;
            }
          }
          else
          {
            v146 = *(_QWORD *)(a1 + 752);
          }
LABEL_260:
          LODWORD(v145) = 0x7FFFFFFF;
LABEL_261:
          v147 = v146 + 96 * v145;
          v150 = *(_QWORD *)(v147 + 48);
          v149 = (_QWORD *)(v147 + 48);
          v148 = v150;
          v151 = (_QWORD **)(v149 + 2);
          v152 = v149[2];
          if (v150)
          {
            v153 = v152 + 8 * v148;
            do
            {
              v154 = *(_QWORD *)(*(_QWORD *)v152 + 176);
              if (v154)
              {
                v155 = *(_QWORD *)(v154 + 72);
                if (v155)
                {
                  v156 = *(re::MaterialAsset **)(v154 + 88);
                  for (i = 24 * v155; i; i -= 24)
                  {
                    v158 = *((_QWORD *)v156 + 1);
                    if (v158)
                    {
                      v159 = atomic_load((unsigned int *)(v158 + 704));
                      if (v159 == 2)
                      {
                        v160 = *((_QWORD *)v156 + 1);
                        if (v160)
                        {
                          v161 = *(re::MaterialAsset **)(v160 + 264);
                          v70 = (re::MaterialAsset *)re::MaterialAsset::assetType(v70);
                          if (v161 == v70)
                          {
                            v70 = (re::MaterialAsset *)re::AssetHandle::loadedAsset<re::MaterialAsset>(v156);
                            if ((*((_BYTE *)v70 + 1730) & 0xFE) == 6)
                            {
                              LOBYTE(v148) = 1;
                              goto LABEL_276;
                            }
                          }
                        }
                        else
                        {
                          v70 = (re::MaterialAsset *)re::MaterialAsset::assetType(v70);
                        }
                      }
                    }
                    v156 = (re::MaterialAsset *)((char *)v156 + 24);
                  }
                }
              }
              v152 += 8;
            }
            while (v152 != v153);
            LOBYTE(v148) = 0;
LABEL_276:
            LODWORD(v137) = v653;
            v151 = (_QWORD **)(v149 + 2);
          }
          *(_BYTE *)(v146 + 96 * v145 + 88) = v148;
          *(_DWORD *)v697 = 0;
          v696 = 0u;
          *(_OWORD *)v695 = 0u;
          *(_QWORD *)&v697[4] = 0x7FFFFFFFLL;
          if (*v149)
          {
            v162 = *v151;
            v163 = (uint64_t)&(*v151)[*v149];
            while (1)
            {
              *(_QWORD *)buf = *v162;
              if (*(_QWORD *)buf)
                break;
LABEL_284:
              if (++v162 == (_QWORD *)v163)
                goto LABEL_285;
            }
            while (1)
            {
              LODWORD(v662[0]) = 0;
              v164 = (_DWORD *)re::HashTable<re::ecs2::Entity *,unsigned int,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add<int>((uint64_t)v695, (uint64_t *)buf, v662);
              v165 = (*v164 + 1);
              *v164 = v165;
              v166 = *(_QWORD *)buf;
              if (*v149 == v165)
                break;
              v167 = *(_QWORD *)(*(_QWORD *)buf + 24);
              if (!v167 || (*(_BYTE *)(v167 + 288) & 0x80) != 0)
                goto LABEL_284;
              *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)buf + 24);
            }
          }
          else
          {
LABEL_285:
            v166 = 0;
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v695);
          v168 = *(v149 - 3);
          if (v168)
          {
            if (v166 != v168)
            {
              v169 = (re::ecs2::EntityComponentCollection *)(v168 + 32);
              if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v168 + 32), (const re::ecs2::ComponentTypeBase *)v141[490]))
              {
                re::ecs2::EntityComponentCollection::remove(v169, (const re::ecs2::ComponentTypeBase *)v141[490]);
              }
              v70 = (re::MaterialAsset *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v166 + 32), (const re::ecs2::ComponentTypeBase *)v141[490]);
              if (!v70)
                v70 = (re::MaterialAsset *)re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(v166 + 32), (const re::ecs2::ComponentTypeBase *)v141[490]);
            }
          }
          else
          {
            *(v149 - 3) = v166;
          }
          if (*(_DWORD *)(a1 + 1152) <= (v138 + 1))
            v170 = v138 + 1;
          else
            v170 = *(_DWORD *)(a1 + 1152);
          while (1)
          {
            v142 = (v138 + 1);
            if (v170 - 1 == (_DWORD)v138)
              break;
            LODWORD(v138) = v138 + 1;
            v171 = v142;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 1136) + 24 * v142 + 8) & 0x80000000) != 0)
              goto LABEL_300;
          }
          v171 = v170;
LABEL_300:
          LODWORD(v138) = v171;
        }
        while ((_DWORD)v137 != v171);
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1312);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v676);
      v172 = *(unsigned int *)(a1 + 1392);
      if ((_DWORD)v172)
      {
        v173 = 0;
        v174 = (int *)(*(_QWORD *)(a1 + 1376) + 8);
        while (1)
        {
          v175 = *v174;
          v174 += 6;
          if (v175 < 0)
            break;
          if (v172 == ++v173)
          {
            LODWORD(v173) = *(_DWORD *)(a1 + 1392);
            break;
          }
        }
      }
      else
      {
        LODWORD(v173) = 0;
      }
      if ((_DWORD)v172 != (_DWORD)v173)
      {
        v176 = v173;
        while (1)
        {
          v177 = *(_QWORD *)(*(_QWORD *)(a1 + 1376) + 24 * v176 + 16);
          *(_QWORD *)v695 = *(_QWORD *)(v177 + 296);
          if (!re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1 + 832, (uint64_t *)v695))break;
          v178 = *(_QWORD *)(v177 + 224);
          if (!v178)
            break;
          *(_QWORD *)v695 = *(_QWORD *)(v178 + 64);
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1168, (uint64_t *)v695);
LABEL_355:
          if (*(_DWORD *)(a1 + 1392) <= (v173 + 1))
            v201 = v173 + 1;
          else
            v201 = *(_DWORD *)(a1 + 1392);
          while (1)
          {
            v176 = (v173 + 1);
            if (v201 - 1 == (_DWORD)v173)
              break;
            LODWORD(v173) = v173 + 1;
            v202 = v176;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 1376) + 24 * v176 + 8) & 0x80000000) != 0)
              goto LABEL_362;
          }
          v202 = v201;
LABEL_362:
          LODWORD(v173) = v202;
          if ((_DWORD)v172 == v202)
            goto LABEL_363;
        }
        *(_DWORD *)v697 = 0;
        v696 = 0u;
        *(_OWORD *)v695 = 0u;
        *(_QWORD *)&v697[4] = 0x7FFFFFFFLL;
        v179 = *(unsigned int *)(a1 + 768);
        if ((_DWORD)v179)
        {
          v180 = 0;
          v181 = (int *)(*(_QWORD *)(a1 + 752) + 8);
          while (1)
          {
            v182 = *v181;
            v181 += 24;
            if (v182 < 0)
              break;
            if (v179 == ++v180)
            {
              LODWORD(v180) = *(_DWORD *)(a1 + 768);
              break;
            }
          }
        }
        else
        {
          LODWORD(v180) = 0;
        }
        if ((_DWORD)v179 == (_DWORD)v180)
        {
          v183 = 0;
        }
        else
        {
          v184 = v180;
          v185 = *(_QWORD *)(a1 + 752);
          v186 = *(_DWORD *)(a1 + 768);
          do
          {
            v187 = v185 + 96 * v184;
            v188 = *(_QWORD *)(v187 + 48);
            if (v188)
            {
              v189 = *(uint64_t **)(v187 + 64);
              v190 = &v189[v188];
              do
              {
                v191 = *v189;
                while (1)
                {
                  v191 = *(_QWORD *)(v191 + 24);
                  if (!v191 || (*(_BYTE *)(v191 + 288) & 0x80) != 0)
                    break;
                  if (v177 == v191)
                  {
                    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v695, (uint64_t *)(v185 + 96 * v184 + 72));
                    v186 = *(_DWORD *)(a1 + 768);
                    v185 = *(_QWORD *)(a1 + 752);
                    goto LABEL_329;
                  }
                }
                ++v189;
              }
              while (v189 != v190);
            }
LABEL_329:
            if (v186 <= (int)v180 + 1)
              v192 = v180 + 1;
            else
              v192 = v186;
            while (1)
            {
              v184 = (v180 + 1);
              if (v192 - 1 == (_DWORD)v180)
                break;
              LODWORD(v180) = v180 + 1;
              v193 = v184;
              if ((*(_DWORD *)(v185 + 96 * v184 + 8) & 0x80000000) != 0)
                goto LABEL_336;
            }
            v193 = v192;
LABEL_336:
            LODWORD(v180) = v193;
          }
          while ((_DWORD)v179 != v193);
          v183 = *(_DWORD *)v697;
          if (*(_DWORD *)v697)
          {
            v194 = 0;
            v195 = (int *)(v696 + 8);
            while (1)
            {
              v196 = *v195;
              v195 += 6;
              if (v196 < 0)
                goto LABEL_343;
              if (*(unsigned int *)v697 == ++v194)
              {
                LODWORD(v194) = *(_DWORD *)v697;
                goto LABEL_343;
              }
            }
          }
        }
        LODWORD(v194) = 0;
LABEL_343:
        if (v183 != (_DWORD)v194)
        {
          v197 = v194;
          v198 = v696;
          do
          {
            *(_QWORD *)&v676 = 0;
            *(_QWORD *)&v676 = *(_QWORD *)(v198 + 24 * v197 + 16);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1168, (uint64_t *)&v676);
            v198 = v696;
            if (*(_DWORD *)v697 <= (v194 + 1))
              v199 = v194 + 1;
            else
              v199 = *(_DWORD *)v697;
            v200 = v194;
            while (1)
            {
              v197 = (v200 + 1);
              if (v199 - 1 == v200)
                break;
              ++v200;
              LODWORD(v194) = v197;
              if ((*(_DWORD *)(v696 + 24 * v197 + 8) & 0x80000000) != 0)
                goto LABEL_353;
            }
            LODWORD(v194) = v199;
LABEL_353:
            ;
          }
          while (v183 != (_DWORD)v194);
        }
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v695);
        goto LABEL_355;
      }
LABEL_363:
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1360);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1456);
      re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v695);
      *(_QWORD *)&v678 = 0;
      *(_QWORD *)&v677 = 0;
      DWORD2(v677) = 0;
      v676 = (unint64_t)v695;
      re::DynamicArray<float *>::setCapacity(&v676, 0);
      ++DWORD2(v677);
      v203 = *(unsigned int *)(a1 + 1104);
      if ((_DWORD)v203)
      {
        v204 = 0;
        v205 = (int *)(*(_QWORD *)(a1 + 1088) + 8);
        while (1)
        {
          v206 = *v205;
          v205 += 6;
          if (v206 < 0)
            break;
          if (v203 == ++v204)
          {
            LODWORD(v204) = *(_DWORD *)(a1 + 1104);
            break;
          }
        }
      }
      else
      {
        LODWORD(v204) = 0;
      }
      v207 = *(_DWORD *)(a1 + 1104);
      if ((_DWORD)v203 != (_DWORD)v204)
      {
        v208 = v204;
        do
        {
          v662[0] = 0;
          v662[0] = *(_QWORD *)(*(_QWORD *)(a1 + 1088) + 24 * v208 + 16);
          v209 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v662[0] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v209)
          {
            v210 = *(unsigned __int8 *)(v209 + 42);
            v211 = *(unsigned __int8 *)(v209 + 41) == 1;
            v212 = v211 & v210;
            v213 = v211 & (v210 >> 1);
            (*(void (**)(uint8_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v654 + 8))(buf, v654, v662[0]);
            v214 = buf[0] ? *(_QWORD *)&buf[8] : 0;
            v215 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v654 + 24))(v654, v214) == 2
                 ? v213
                 : 0;
            if ((v212 & 1) == 0 && (v215 & 1) == 0)
              re::DynamicArray<re::TransitionCondition *>::add(&v676, v662);
          }
          v207 = *(_DWORD *)(a1 + 1104);
          if (v207 <= (int)v204 + 1)
            v216 = v204 + 1;
          else
            v216 = *(_DWORD *)(a1 + 1104);
          while (1)
          {
            v208 = (v204 + 1);
            if (v216 - 1 == (_DWORD)v204)
              break;
            LODWORD(v204) = v204 + 1;
            v217 = v208;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 1088) + 24 * v208 + 8) & 0x80000000) != 0)
              goto LABEL_388;
          }
          v217 = v216;
LABEL_388:
          LODWORD(v204) = v217;
        }
        while ((_DWORD)v203 != v217);
      }
      if ((_QWORD)v677)
      {
        v218 = (re::ecs2::Entity **)v678;
        v219 = 8 * v677;
        do
        {
          v220 = *v218++;
          re::ecs2::MeshShadowSystem::processReceiverRemoval((re::ecs2::MeshShadowSystem *)a1, v220);
          v219 -= 8;
        }
        while (v219);
        v207 = *(_DWORD *)(a1 + 1104);
      }
      v221 = 0;
      if (v207)
      {
        v222 = (int *)(*(_QWORD *)(a1 + 1088) + 8);
        while (1)
        {
          v223 = *v222;
          v222 += 6;
          if (v223 < 0)
            break;
          if (v207 == ++v221)
          {
            LODWORD(v221) = v207;
            break;
          }
        }
      }
      if (v207 != (_DWORD)v221)
      {
        v224 = v221;
        v225 = (_QWORD *)(a1 + 928);
        v226 = (unint64_t *)(a1 + 880);
        v227 = a1 + 1552;
        v657 = a1 + 1600;
        v228 = &unk_255829000;
        while (1)
        {
          v662[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 1088) + 24 * v224 + 16) + 296);
          *(_QWORD *)&v666[0] = 0;
          (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v654 + 8))(buf);
          if (buf[0])
            v229 = *(_QWORD *)&buf[8];
          else
            v229 = 0;
          *(_QWORD *)&v666[0] = v229;
          if (!v228[2200])
            re::internal::shadows::setParamsOnMaterialParameterBlock(v662[0], a1 + 2448, *(re::RenderManager ***)(*(_QWORD *)(a1 + 112) + 24));
          if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1 + 928, (uint64_t *)v662))
          {
            break;
          }
          re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(a1 + 928, (uint64_t *)v662, v666);
LABEL_424:
          v238 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 880, (uint64_t *)v666);
          if (v238)
          {
            v239 = (_QWORD *)v238;
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v227, (uint64_t *)v666);
            ++*v239;
          }
          else
          {
            v240 = v228;
            v241 = *(_QWORD *)&v666[0];
            v242 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)&v666[0] ^ (*(_QWORD *)&v666[0] >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*(_QWORD *)&v666[0] ^ (*(_QWORD *)&v666[0] >> 30))) >> 27));
            v243 = v242 ^ (v242 >> 31);
            v244 = *v226;
            if (!*v226
              || (v244 = v243 % *(unsigned int *)(a1 + 904),
                  v245 = *(unsigned int *)(*(_QWORD *)(a1 + 888) + 4 * v244),
                  (_DWORD)v245 == 0x7FFFFFFF))
            {
LABEL_431:
              v247 = *(unsigned int *)(a1 + 916);
              if ((_DWORD)v247 == 0x7FFFFFFF)
              {
                v247 = *(unsigned int *)(a1 + 912);
                v248 = v247;
                if ((_DWORD)v247 == *(_DWORD *)(a1 + 904))
                {
                  re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1 + 880, 2 * *(_DWORD *)(a1 + 908));
                  v244 = v243 % *(unsigned int *)(a1 + 904);
                  v248 = *(_DWORD *)(a1 + 912);
                  v241 = *(_QWORD *)&v666[0];
                }
                *(_DWORD *)(a1 + 912) = v248 + 1;
                v249 = *(_QWORD *)(a1 + 896);
                v250 = *(_DWORD *)(v249 + 32 * v247 + 8);
              }
              else
              {
                v249 = *(_QWORD *)(a1 + 896);
                v250 = *(_DWORD *)(v249 + 32 * v247 + 8);
                *(_DWORD *)(a1 + 916) = v250 & 0x7FFFFFFF;
              }
              *(_DWORD *)(v249 + 32 * v247 + 8) = v250 | 0x80000000;
              v251 = *(_QWORD *)(a1 + 888);
              *(_DWORD *)(*(_QWORD *)(a1 + 896) + 32 * v247 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 896) + 32 * v247 + 8) & 0x80000000 | *(_DWORD *)(v251 + 4 * v244);
              *(_QWORD *)(*(_QWORD *)(a1 + 896) + 32 * v247) = v243;
              *(_QWORD *)(*(_QWORD *)(a1 + 896) + 32 * v247 + 16) = v241;
              *(_QWORD *)(*(_QWORD *)(a1 + 896) + 32 * v247 + 24) = 1;
              *(_DWORD *)(v251 + 4 * v244) = v247;
              ++*(_DWORD *)(a1 + 908);
              ++*(_DWORD *)(a1 + 920);
            }
            else
            {
              v246 = *(_QWORD *)(a1 + 896);
              while (*(_QWORD *)(v246 + 32 * v245 + 16) != *(_QWORD *)&v666[0])
              {
                v245 = *(_DWORD *)(v246 + 32 * v245 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v245 == 0x7FFFFFFF)
                  goto LABEL_431;
              }
            }
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1504, (uint64_t *)v666);
            v228 = v240;
            v227 = a1 + 1552;
            if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v657, (uint64_t *)v666))
            {
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v657, (uint64_t *)v666);
            }
          }
          if (*(_DWORD *)(a1 + 1104) <= (v221 + 1))
            v252 = v221 + 1;
          else
            v252 = *(_DWORD *)(a1 + 1104);
          while (1)
          {
            v224 = (v221 + 1);
            if (v252 - 1 == (_DWORD)v221)
              break;
            LODWORD(v221) = v221 + 1;
            v253 = v224;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 1088) + 24 * v224 + 8) & 0x80000000) != 0)
              goto LABEL_446;
          }
          v253 = v252;
LABEL_446:
          LODWORD(v221) = v253;
          if (v207 == v253)
            goto LABEL_447;
        }
        *(_QWORD *)buf = 0;
        if (*v225)
        {
          v230 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (v662[0] ^ (v662[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                         * (v662[0] ^ (v662[0] >> 30))) >> 27));
          v231 = *(unsigned int *)(*(_QWORD *)(a1 + 936) + 4 * ((v230 ^ (v230 >> 31)) % *(unsigned int *)(a1 + 952)));
          v232 = *(_QWORD *)(a1 + 944);
          if ((_DWORD)v231 != 0x7FFFFFFF)
          {
            while (*(_QWORD *)(v232 + 32 * v231 + 16) != v662[0])
            {
              v231 = *(_DWORD *)(v232 + 32 * v231 + 8) & 0x7FFFFFFF;
              if (v231 == 0x7FFFFFFF)
                goto LABEL_413;
            }
LABEL_414:
            *(_QWORD *)buf = *(_QWORD *)(v232 + 32 * v231 + 24);
            v233 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 880, (uint64_t *)buf);
            if (v233)
            {
              v234 = (_QWORD *)v233;
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v227, (uint64_t *)buf);
              --*v234;
            }
            if (*v225)
            {
              v235 = 0x94D049BB133111EBLL
                   * ((0xBF58476D1CE4E5B9 * (v662[0] ^ (v662[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                             * (v662[0] ^ (v662[0] >> 30))) >> 27));
              v236 = *(unsigned int *)(*(_QWORD *)(a1 + 936) + 4 * ((v235 ^ (v235 >> 31)) % *(unsigned int *)(a1 + 952)));
              v237 = *(_QWORD *)(a1 + 944);
              if ((_DWORD)v236 != 0x7FFFFFFF)
              {
                while (*(_QWORD *)(v237 + 32 * v236 + 16) != v662[0])
                {
                  v236 = *(_DWORD *)(v237 + 32 * v236 + 8) & 0x7FFFFFFF;
                  if (v236 == 0x7FFFFFFF)
                    goto LABEL_422;
                }
                goto LABEL_423;
              }
            }
            else
            {
              v237 = *(_QWORD *)(a1 + 944);
            }
LABEL_422:
            v236 = 0x7FFFFFFFLL;
LABEL_423:
            *(_QWORD *)(v237 + 32 * v236 + 24) = *(_QWORD *)&v666[0];
            goto LABEL_424;
          }
        }
        else
        {
          v232 = *(_QWORD *)(a1 + 944);
        }
LABEL_413:
        v231 = 0x7FFFFFFFLL;
        goto LABEL_414;
      }
LABEL_447:
      v254 = *(unsigned int *)(a1 + 912);
      if ((_DWORD)v254)
      {
        v255 = 0;
        v256 = (int *)(*(_QWORD *)(a1 + 896) + 8);
        while (1)
        {
          v257 = *v256;
          v256 += 8;
          if (v257 < 0)
            break;
          if (v254 == ++v255)
          {
            LODWORD(v255) = *(_DWORD *)(a1 + 912);
            break;
          }
        }
      }
      else
      {
        LODWORD(v255) = 0;
      }
      if ((_DWORD)v254 != (_DWORD)v255)
      {
        v258 = v255;
        do
        {
          v259 = *(_QWORD *)(a1 + 896) + 32 * v258;
          if (!*(_QWORD *)(v259 + 24))
          {
            v260 = (uint64_t *)(v259 + 16);
            if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 1552, (uint64_t *)(v259 + 16)))
            {
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 1552, v260);
            }
            if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(a1 + 1504, v260))
            {
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 1504, v260);
            }
            else
            {
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1600, v260);
            }
          }
          if (*(_DWORD *)(a1 + 912) <= (v255 + 1))
            v261 = v255 + 1;
          else
            v261 = *(_DWORD *)(a1 + 912);
          while (1)
          {
            v258 = (v255 + 1);
            if (v261 - 1 == (_DWORD)v255)
              break;
            LODWORD(v255) = v255 + 1;
            v262 = v258;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 896) + 32 * v258 + 8) & 0x80000000) != 0)
              goto LABEL_468;
          }
          v262 = v261;
LABEL_468:
          LODWORD(v255) = v262;
        }
        while ((_DWORD)v254 != v262);
      }
      v263 = *(unsigned int *)(a1 + 1632);
      if ((_DWORD)v263)
      {
        v264 = 0;
        v265 = (int *)(*(_QWORD *)(a1 + 1616) + 8);
        while (1)
        {
          v266 = *v265;
          v265 += 6;
          if (v266 < 0)
            break;
          if (v263 == ++v264)
          {
            v264 = *(unsigned int *)(a1 + 1632);
            break;
          }
        }
      }
      else
      {
        v264 = 0;
      }
      if ((_DWORD)v263 != (_DWORD)v264)
      {
        v267 = v264;
        do
        {
          re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(a1 + 880, *(_QWORD *)(*(_QWORD *)(a1 + 1616) + 24 * v267 + 16));
          v268 = *(_DWORD *)(a1 + 1632);
          if (v268 <= (int)v264 + 1)
            v269 = (v264 + 1);
          else
            v269 = v268;
          v270 = v264;
          while (1)
          {
            v267 = (v270 + 1);
            if ((_DWORD)v269 - 1 == v270)
              break;
            ++v270;
            v264 = v267;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 1616) + 24 * v267 + 8) & 0x80000000) != 0)
              goto LABEL_485;
          }
          v264 = v269;
LABEL_485:
          ;
        }
        while ((_DWORD)v263 != (_DWORD)v264);
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1072);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 1024);
      if ((_QWORD)v676 && (_QWORD)v678)
        (*(void (**)(void))(*(_QWORD *)v676 + 40))();
      v631 = (_OWORD *)(a1 + 2416);
      re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v695);
      v273 = *(_QWORD *)(v648 + 8);
      if (v273)
      {
        v274 = *(re::ecs2::RenderingSubsystem ***)v648;
        v635 = *(_QWORD *)v648 + 8 * v273;
        v275 = (re::AssetHandle *)((char *)&v701 + 8);
        v633 = a1 + 1168;
        v634 = a1 + 1120;
        v658 = (unint64_t *)(a1 + 784);
        v645 = vdupq_n_s32(0x7F800000u);
        __asm { FMOV            V13.2S, #1.0 }
        v646 = a1 + 1600;
        v649 = a1 + 1504;
        v632 = a1 + 1264;
        v280 = a1 + 1648;
        v281 = a1 + 1696;
        v643 = (uint64_t *)(a1 + 1768);
        v644 = (uint8_t *)(a1 + 1760);
        v641 = (uint64_t *)(a1 + 1848);
        v642 = (uint64_t *)(a1 + 1808);
        v639 = (uint64_t *)(a1 + 2008);
        v640 = (uint64_t *)(a1 + 1968);
        v637 = a1 + 2128;
        v638 = (uint64_t *)(a1 + 2048);
        v636 = (_OWORD *)(a1 + 2176);
        v630 = (__int128 *)(a1 + 1896);
        while (1)
        {
          v647 = v274;
          if (!*(_BYTE *)(a1 + 2400))
          {
            v695[0] = 0;
            v696 = 0uLL;
            *(_QWORD *)&v695[8] = 0;
            *(_DWORD *)v697 = 0;
            __dst = 0;
            memset(&v697[8], 0, 36);
            v698 = 0u;
            v699 = 0u;
            *(_DWORD *)v700 = 0;
            memset(&v700[8], 0, 36);
            v701 = 0u;
            v702 = 0u;
            *(_DWORD *)v703 = 0;
            memset(&v703[8], 0, 36);
            v704 = 0u;
            v705 = 0u;
            *(_DWORD *)v706 = 0;
            memset(&v706[8], 0, 32);
            v707 = 0;
            v708 = 0u;
            v709 = 0u;
            v710 = 0;
            v714 = 0;
            v712 = 0u;
            v713 = 0u;
            v715 = 0x7FFFFFFFLL;
            *(_DWORD *)v716 = 1065353216;
            *(_OWORD *)&v716[4] = xmmword_22610CC60;
            *(_QWORD *)&v716[20] = 0x3CF5C28F3F800000;
            *(_WORD *)&v716[28] = 0;
            v717 = xmmword_22610CC70;
            *(_QWORD *)v718 = 0x3EB333333F800000;
            v718[8] = 1;
            *(_OWORD *)&v718[12] = xmmword_22610CC80;
            *(_OWORD *)&v718[28] = xmmword_22610CC90;
            *(_DWORD *)&v718[44] = 1106247680;
            *(_QWORD *)&v719 = 0x419800003DCCCCCDLL;
            BYTE8(v719) = 0;
            v720 = xmmword_2260E5F50;
            LOBYTE(v721) = 1;
            *(_QWORD *)v722 = 0x3F8000003F2D42C4;
            *(_DWORD *)&v722[8] = 10;
            *(_OWORD *)&v722[12] = xmmword_22610CCA0;
            *(_DWORD *)&v722[28] = 1056964608;
            *(_QWORD *)&v723 = 0x4000000000000000;
            WORD4(v723) = 0;
            WORD6(v723) = 1;
            BYTE14(v723) = 0;
            *(_QWORD *)&v724 = 897988541;
            *((_QWORD *)&v724 + 1) = 0x3E80000000000000;
            *(_QWORD *)&v725 = 0x103DCCCCCDLL;
            v667 = 0;
            memset(v666, 0, sizeof(v666));
            v668 = 0x7FFFFFFFLL;
            re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::unionSet(v634, v633, (uint64_t)v666);
            Current = CFAbsoluteTimeGetCurrent();
            v283 = Current;
            v650 = (_anonymous_namespace_ *)*(unsigned int *)(a1 + 768);
            v284 = 0;
            if ((_DWORD)v650)
            {
              v285 = (int *)(*(_QWORD *)(a1 + 752) + 8);
              while (1)
              {
                v286 = *v285;
                v285 += 24;
                if (v286 < 0)
                  break;
                if (v650 == (_anonymous_namespace_ *)++v284)
                {
                  LODWORD(v284) = *(_DWORD *)(a1 + 768);
                  break;
                }
              }
            }
            if ((_DWORD)v650 != (_DWORD)v284)
            {
              v287 = v284;
              v288 = Current;
              while (1)
              {
                v289 = *(_QWORD *)(a1 + 752);
                v290 = v289 + 96 * v287;
                v293 = *(_QWORD *)(v290 + 16);
                v292 = (uint64_t *)(v290 + 16);
                v291 = v293;
                if (*(_QWORD *)(a1 + 736)
                  && (v294 = 0x94D049BB133111EBLL
                           * ((0xBF58476D1CE4E5B9 * (v291 ^ (v291 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (v291 ^ (v291 >> 30))) >> 27)),
                      v295 = *(_DWORD *)(*(_QWORD *)(a1 + 744)
                                       + 4 * ((v294 ^ (v294 >> 31)) % *(unsigned int *)(a1 + 760))),
                      v295 != 0x7FFFFFFF))
                {
                  v314 = *(_QWORD *)(v289 + 96 * v295 + 16);
                  for (j = *(unsigned int *)(*(_QWORD *)(a1 + 744)
                                            + 4 * ((v294 ^ (v294 >> 31)) % *(unsigned int *)(a1 + 760)));
                        v314 != v291;
                        v295 = j)
                  {
                    j = *(_DWORD *)(v289 + 96 * j + 8) & 0x7FFFFFFF;
                    v295 = 0x7FFFFFFF;
                    if (j == 0x7FFFFFFF)
                      break;
                    v314 = *(_QWORD *)(v289 + 96 * j + 16);
                  }
                }
                else
                {
                  v295 = 0x7FFFFFFF;
                }
                v296 = v289 + 96 * v295;
                v299 = *(re::ecs2::TransformComponent ***)(v296 + 24);
                v298 = (uint64_t *)(v296 + 24);
                v297 = v299;
                if (v299)
                {
                  re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(a1 + 152), v297, v662);
                }
                else
                {
                  *(_OWORD *)v662 = xmmword_2260E5F10;
                  v663 = (float32x4_t)xmmword_2260E5F20;
                  v664 = xmmword_2260E5F40;
                  v665 = xmmword_2260E5D70;
                }
                v300 = v292 + 1;
                v301 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*v647 + 7) + 32))(*((_QWORD *)*v647 + 7));
                v302 = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v301);
                if (v302)
                  LODWORD(v303) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v302 + 24))(v302, *v300);
                else
                  v303 = 1.0;
                v304 = powf(v303, *(float *)(a1 + 2468));
                v305 = v304;
                if (v304 >= 0.0001)
                  v306 = v304;
                else
                  v306 = 1.0;
                v307 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v300 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                if (v307 && *(_BYTE *)(a1 + 2520))
                {
                  v308 = vmulq_f32(v663, vnegq_f32(*(float32x4_t *)(a1 + 2528)));
                  v305 = v305
                       * (float)(1.0
                               / (float)((float)(expf((float)-*(float *)(a1 + 2516)* vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v308, 2), vaddq_f32(v308, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v308.f32, 1))).f32[0])* 30.03)+ 1.0));
                }
                v309 = *v292;
                v310 = *((_QWORD *)&v709 + 1);
                if (*((_QWORD *)&v709 + 1) >= (unint64_t)v709)
                {
                  v311 = *((_QWORD *)&v709 + 1) + 1;
                  if ((unint64_t)v709 < *((_QWORD *)&v709 + 1) + 1)
                  {
                    if (*((_QWORD *)&v708 + 1))
                    {
                      v312 = 2 * v709;
                      if (!(_QWORD)v709)
                        v312 = 8;
                      if (v312 <= v311)
                        v313 = *((_QWORD *)&v709 + 1) + 1;
                      else
                        v313 = v312;
                      re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)&v708 + 1, v313);
                    }
                    else
                    {
                      re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)&v708 + 1, v311);
                      ++v710;
                    }
                  }
                  v310 = *((_QWORD *)&v709 + 1);
                }
                v316 = (float *)((char *)__dst + 16 * v310);
                *(_QWORD *)v316 = v309;
                v316[2] = v306;
                v316[3] = v305;
                *((_QWORD *)&v709 + 1) = v310 + 1;
                ++v710;
                v317 = (float *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v658, v292);
                if (v317)
                  v318 = v283 > (float)(*v317 + *(float *)(a1 + 2652));
                else
                  v318 = 1;
                v655 = v318;
                v319 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v666, v292)|| *(_BYTE *)(a1 + 2444)|| *(_BYTE *)(v289 + 96 * v295 + 88) != 0;
                *(_QWORD *)&v678 = 0;
                *(_QWORD *)&v677 = 0;
                v676 = 0uLL;
                DWORD2(v677) = 0;
                v679 = (float32x4_t)v645;
                *(_QWORD *)&v320 = 0x7F0000007FLL;
                *((_QWORD *)&v320 + 1) = 0x7F0000007FLL;
                v680 = v320;
                v681 = v645;
                v682 = v320;
                v321 = 0uLL;
                v683 = 0u;
                v684 = 0u;
                v685 = 0u;
                v686 = 0u;
                v687 = 0u;
                *((_QWORD *)&v688 + 1) = _D13;
                if (v319)
                {
                  *(_QWORD *)&v688 = *v292;
                  *((float *)&v688 + 2) = 1.0 / v306;
                  *((float *)&v688 + 3) = v305;
                  v689 = v283;
                  v684 = *(float32x4_t *)v662;
                  v685 = v663;
                  v686 = v664;
                  v687 = v665;
                  *(_QWORD *)&buf[32] = 0;
                  memset(buf, 0, 28);
                  v322 = v289 + 96 * v295;
                  v325 = *(_QWORD *)(v322 + 48);
                  v324 = (uint64_t *)(v322 + 48);
                  v323 = v325;
                  if (v325)
                  {
                    re::DynamicArray<re::RigNodeConstraint>::setCapacity(buf, v323);
                    v326 = *v324;
                    if (*v324)
                    {
                      v327 = *(uint64_t **)(v289 + 96 * v295 + 64);
                      v328 = 8 * v326;
                      do
                      {
                        v329 = *v327;
                        v330 = *(_QWORD *)(*v327 + 224);
                        if (v330)
                        {
                          *(_QWORD *)v693 = *(_QWORD *)(v329 + 296);
                          v331 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v329 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                          if (v331)
                            v332 = *(_DWORD *)(v331 + 32) == 1;
                          else
                            v332 = 0;
                          v693[8] = v332;
                          v333 = *(_BYTE *)(v330 + 76);
                          if (v333)
                            v333 = *(_QWORD *)(v330 + 64) != 0;
                          v693[9] = v333;
                          re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)buf, (__n128 *)v693);
                        }
                        ++v327;
                        v328 -= 8;
                      }
                      while (v328);
                    }
                  }
                  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v676, (uint64_t)buf);
                  if (*(_QWORD *)buf && *(_QWORD *)&buf[32])
                    (*(void (**)(void))(**(_QWORD **)buf + 40))();
                  *(_OWORD *)v693 = xmmword_2260E5F50;
                  re::internal::shadows::generateAABBsForCluster(v298, (float32x4_t *)v693, &v684, (uint64_t)buf);
                  v681 = *(int32x4_t *)&buf[32];
                  v682 = v691;
                  v683 = v692;
                  v679 = *(float32x4_t *)buf;
                  v680 = *(_OWORD *)&buf[16];
                  if (re::internal::shadows::g_enableShadowFlattening)
                  {
                    v334 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(*v298 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                    re::AABB::transform(&v679, &v684, (uint64_t)buf);
                    v335 = *(_OWORD *)&buf[16];
                    *(_OWORD *)(v334 + 32) = *(_OWORD *)buf;
                    *(_OWORD *)(v334 + 48) = v335;
                  }
                  v336 = *(_QWORD *)&v700[32];
                  if (*(_QWORD *)&v700[32] >= *(_QWORD *)&v700[24])
                  {
                    re::DynamicArray<re::MeshShadowCluster>::growCapacity(&v700[16], *(_QWORD *)&v700[32] + 1);
                    v336 = *(_QWORD *)&v700[32];
                  }
                  v337 = re::DynamicArray<re::MeshShadowCasterInfo>::DynamicArray(v701 + 224 * v336, (uint64_t *)&v676);
                  v338 = v679;
                  v339 = v681;
                  *(_OWORD *)(v337 + 64) = v680;
                  *(int32x4_t *)(v337 + 80) = v339;
                  *(float32x4_t *)(v337 + 48) = v338;
                  v340 = v682;
                  v341 = v683;
                  v342 = v685;
                  *(float32x4_t *)(v337 + 128) = v684;
                  *(float32x4_t *)(v337 + 144) = v342;
                  *(_OWORD *)(v337 + 96) = v340;
                  *(_OWORD *)(v337 + 112) = v341;
                  v321 = (__n128)v686;
                  v343 = v687;
                  v344 = v688;
                  *(double *)(v337 + 208) = v689;
                  *(_OWORD *)(v337 + 176) = v343;
                  *(_OWORD *)(v337 + 192) = v344;
                  *(__n128 *)(v337 + 160) = v321;
                  ++*(_QWORD *)&v700[32];
                  ++*(_DWORD *)&v700[40];
                }
                if ((v655 | v319) == 1)
                  break;
LABEL_602:
                if (*(_DWORD *)(a1 + 1628))
                {
                  *(_QWORD *)buf = *v292;
                  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase((uint64_t)&buf[8], v646);
                  re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::add((uint64_t)&v704 + 8, buf);
                  v321.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&buf[8]);
                }
                v280 = a1 + 1648;
                v281 = a1 + 1696;
                if (*(_DWORD *)(a1 + 1532))
                {
                  *(_QWORD *)buf = *v292;
                  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase((uint64_t)&buf[8], v649);
                  re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::add((uint64_t)&v703[16], buf);
                  v321.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&buf[8]);
                }
                if ((_QWORD)v676 && (_QWORD)v678)
                  (*(void (**)(__n128))(*(_QWORD *)v676 + 40))(v321);
                if (*(_DWORD *)(a1 + 768) <= (v284 + 1))
                  v375 = v284 + 1;
                else
                  v375 = *(_DWORD *)(a1 + 768);
                while (1)
                {
                  v287 = (v284 + 1);
                  if (v375 - 1 == (_DWORD)v284)
                    break;
                  LODWORD(v284) = v284 + 1;
                  v376 = v287;
                  if ((*(_DWORD *)(*(_QWORD *)(a1 + 752) + 96 * v287 + 8) & 0x80000000) != 0)
                    goto LABEL_616;
                }
                v376 = v375;
LABEL_616:
                LODWORD(v284) = v376;
                if ((_DWORD)v650 == v376)
                  goto LABEL_617;
              }
              v345 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 96))(*(_QWORD *)(a1 + 128));
              v346 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(*v298 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v345)
              {
                v347 = *v298;
                do
                {
                  v348 = v347;
                  v347 = *(_QWORD *)(v347 + 24);
                }
                while (v347);
                (*(void (**)(uint64_t, _QWORD, uint64_t))(v345 + 16))(v345, *(_QWORD *)(v348 + 16), v346);
              }
              v349 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v298 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v349 && ((*(_BYTE *)(v349 + 24) == 0) & ~v319) == 0)
              {
                v350 = *(_QWORD *)(v289 + 96 * v295 + 72);
                v351 = *(unsigned __int8 *)(v349 + 25);
                if (*(_BYTE *)(v349 + 25))
                {
                  v321 = *(__n128 *)(v349 + 32);
                  v669 = *(__n128 *)(v349 + 48);
                  *(__n128 *)&buf[15] = v321;
                  *(__n128 *)&buf[31] = v669;
                  v352 = 1;
                }
                else
                {
                  v352 = 0;
                }
                v353 = *(unsigned __int8 *)(v349 + 64);
                if (*(_BYTE *)(v349 + 64))
                {
                  v321 = *(__n128 *)(v349 + 80);
                  v669 = *(__n128 *)(v349 + 96);
                  *(__n128 *)&v693[15] = v321;
                  v694 = v669;
                  v354 = 1;
                  if (v351)
                    goto LABEL_568;
                }
                else
                {
                  v354 = 0;
                  if (v351)
                  {
LABEL_568:
                    v321 = *(__n128 *)&buf[15];
                    *(_OWORD *)&v674[7] = *(_OWORD *)&buf[15];
                    v675 = *(_OWORD *)&buf[31];
                  }
                }
                if (v353)
                {
                  v321 = *(__n128 *)&v693[15];
                  v671 = *(_OWORD *)&v693[15];
                  v672 = v694;
                }
                v355 = *((_QWORD *)&v702 + 1);
                if (*((_QWORD *)&v702 + 1) >= (unint64_t)v702)
                {
                  v356 = *((_QWORD *)&v702 + 1) + 1;
                  if ((unint64_t)v702 < *((_QWORD *)&v702 + 1) + 1)
                  {
                    if (*((_QWORD *)&v701 + 1))
                    {
                      v357 = 2 * v702;
                      if (!(_QWORD)v702)
                        v357 = 8;
                      if (v357 <= v356)
                        v358 = *((_QWORD *)&v702 + 1) + 1;
                      else
                        v358 = v357;
                      re::DynamicArray<re::MeshShadowPlaneData>::setCapacity((_QWORD *)&v701 + 1, v358);
                    }
                    else
                    {
                      re::DynamicArray<re::MeshShadowPlaneData>::setCapacity((_QWORD *)&v701 + 1, v356);
                      ++*(_DWORD *)v703;
                    }
                  }
                  v355 = *((_QWORD *)&v702 + 1);
                }
                v359 = *(_QWORD *)&v703[8];
                v360 = *(_QWORD *)&v703[8] + 112 * v355;
                *(_QWORD *)v360 = v350;
                *(_BYTE *)(v360 + 16) = v352;
                if (v351)
                {
                  v321 = *(__n128 *)&v674[7];
                  v361 = v675;
                  v362 = v359 + 112 * v355;
                  *(_OWORD *)(v362 + 32) = *(_OWORD *)&v674[7];
                  *(_OWORD *)(v362 + 48) = v361;
                }
                *(_BYTE *)(v359 + 112 * v355 + 64) = v354;
                if (v353)
                {
                  v363 = v359 + 112 * v355;
                  *(_OWORD *)(v363 + 80) = v671;
                  v321 = v672;
                  *(__n128 *)(v363 + 96) = v672;
                }
                ++*((_QWORD *)&v702 + 1);
                ++*(_DWORD *)v703;
              }
              v364 = *v292;
              v365 = 0xBF58476D1CE4E5B9 * (*v292 ^ ((unint64_t)*v292 >> 30));
              v366 = (0x94D049BB133111EBLL * (v365 ^ (v365 >> 27))) ^ ((0x94D049BB133111EBLL * (v365 ^ (v365 >> 27))) >> 31);
              v367 = *v658;
              if (!*v658
                || (v367 = v366 % *(unsigned int *)(a1 + 808),
                    v368 = *(unsigned int *)(*(_QWORD *)(a1 + 792) + 4 * v367),
                    (_DWORD)v368 == 0x7FFFFFFF))
              {
LABEL_594:
                v370 = *(unsigned int *)(a1 + 820);
                if ((_DWORD)v370 == 0x7FFFFFFF)
                {
                  v370 = *(unsigned int *)(a1 + 816);
                  v371 = v370;
                  if ((_DWORD)v370 == *(_DWORD *)(a1 + 808))
                  {
                    re::HashTable<unsigned long long,float,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)v658, 2 * *(_DWORD *)(a1 + 812));
                    v367 = v366 % *(unsigned int *)(a1 + 808);
                    v371 = *(_DWORD *)(a1 + 816);
                    v364 = *v292;
                  }
                  *(_DWORD *)(a1 + 816) = v371 + 1;
                  v372 = *(_QWORD *)(a1 + 800);
                  v373 = *(_DWORD *)(v372 + 32 * v370 + 8);
                }
                else
                {
                  v372 = *(_QWORD *)(a1 + 800);
                  v373 = *(_DWORD *)(v372 + 32 * v370 + 8);
                  *(_DWORD *)(a1 + 820) = v373 & 0x7FFFFFFF;
                }
                *(_DWORD *)(v372 + 32 * v370 + 8) = v373 | 0x80000000;
                v374 = *(_QWORD *)(a1 + 792);
                *(_DWORD *)(*(_QWORD *)(a1 + 800) + 32 * v370 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 800) + 32 * v370 + 8) & 0x80000000 | *(_DWORD *)(v374 + 4 * v367);
                *(_QWORD *)(*(_QWORD *)(a1 + 800) + 32 * v370) = v366;
                *(_QWORD *)(*(_QWORD *)(a1 + 800) + 32 * v370 + 16) = v364;
                *(float *)(*(_QWORD *)(a1 + 800) + 32 * v370 + 24) = v288;
                *(_DWORD *)(v374 + 4 * v367) = v370;
                ++*(_DWORD *)(a1 + 812);
              }
              else
              {
                v369 = *(_QWORD *)(a1 + 800);
                while (*(_QWORD *)(v369 + 32 * v368 + 16) != v364)
                {
                  v368 = *(_DWORD *)(v369 + 32 * v368 + 8) & 0x7FFFFFFF;
                  if ((_DWORD)v368 == 0x7FFFFFFF)
                    goto LABEL_594;
                }
                *(float *)(v369 + 32 * v368 + 24) = v288;
              }
              ++*(_DWORD *)(a1 + 824);
              goto LABEL_602;
            }
LABEL_617:
            v377 = *(unsigned int *)(a1 + 1536);
            if ((_DWORD)v377)
            {
              v378 = 0;
              v379 = (int *)(*(_QWORD *)(a1 + 1520) + 8);
              while (1)
              {
                v380 = *v379;
                v379 += 6;
                if (v380 < 0)
                  break;
                if (v377 == ++v378)
                {
                  LODWORD(v378) = *(_DWORD *)(a1 + 1536);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v378) = 0;
            }
            if ((_DWORD)v377 != (_DWORD)v378)
            {
              v381 = v378;
              do
              {
                re::DynamicArray<re::TransitionCondition *>::add(&v695[8], (_QWORD *)(*(_QWORD *)(a1 + 1520) + 24 * v381 + 16));
                if (*(_DWORD *)(a1 + 1536) <= (v378 + 1))
                  v382 = v378 + 1;
                else
                  v382 = *(_DWORD *)(a1 + 1536);
                v383 = v378;
                while (1)
                {
                  v381 = (v383 + 1);
                  if (v382 - 1 == v383)
                    break;
                  ++v383;
                  LODWORD(v378) = v381;
                  if ((*(_DWORD *)(*(_QWORD *)(a1 + 1520) + 24 * v381 + 8) & 0x80000000) != 0)
                    goto LABEL_633;
                }
                LODWORD(v378) = v382;
LABEL_633:
                ;
              }
              while ((_DWORD)v377 != (_DWORD)v378);
            }
            v384 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 40))(*(_QWORD *)(a1 + 128));
            LODWORD(v678) = 0;
            v677 = 0u;
            v676 = 0u;
            *(_QWORD *)((char *)&v678 + 4) = 0x7FFFFFFFLL;
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v676, *((_DWORD *)v384 + 21) + *(_DWORD *)(a1 + 1292));
            re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::unionSet(v632, (uint64_t)v384 + 56, (uint64_t)&v676);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)v384 + 56);
            v385 = v678;
            if ((_DWORD)v678)
            {
              v386 = 0;
              v387 = (int *)(v677 + 8);
              while (1)
              {
                v388 = *v387;
                v387 += 6;
                if (v388 < 0)
                  break;
                if (v678 == ++v386)
                {
                  LODWORD(v386) = v678;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v386) = 0;
            }
            if ((_DWORD)v678 != (_DWORD)v386)
            {
              v389 = v386;
              v390 = v677;
              do
              {
                v391 = (uint64_t *)(v390 + 24 * v389 + 16);
                if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v666, v391))
                {
                  if (*v658)
                  {
                    v392 = *v391;
                    v393 = 0xBF58476D1CE4E5B9 * (*v391 ^ ((unint64_t)*v391 >> 30));
                    v394 = ((0x94D049BB133111EBLL * (v393 ^ (v393 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                             * (v393 ^ (v393 >> 27))) >> 31))
                         % *(unsigned int *)(a1 + 808);
                    v395 = *(_QWORD *)(a1 + 792);
                    v396 = *(unsigned int *)(v395 + 4 * v394);
                    if ((_DWORD)v396 != 0x7FFFFFFF)
                    {
                      v397 = *(_QWORD *)(a1 + 800);
                      v398 = v397 + 32 * v396;
                      if (*(_QWORD *)(v398 + 16) == v392)
                      {
                        *(_DWORD *)(v395 + 4 * v394) = *(_DWORD *)(v398 + 8) & 0x7FFFFFFF;
LABEL_650:
                        v401 = *(_QWORD *)(a1 + 800);
                        v402 = v401 + 32 * v396;
                        v405 = *(_DWORD *)(v402 + 8);
                        v404 = (int *)(v402 + 8);
                        v403 = v405;
                        if (v405 < 0)
                        {
                          *v404 = v403 & 0x7FFFFFFF;
                          v401 = *(_QWORD *)(a1 + 800);
                          v403 = *(_DWORD *)(v401 + 32 * v396 + 8);
                        }
                        *(_DWORD *)(v401 + 32 * v396 + 8) = *(_DWORD *)(a1 + 820) | v403 & 0x80000000;
                        *(_DWORD *)(a1 + 820) = v396;
                        --*(_DWORD *)(a1 + 812);
                        ++*(_DWORD *)(a1 + 824);
                      }
                      else
                      {
                        while (1)
                        {
                          v399 = v396;
                          v396 = *(_DWORD *)(v397 + 32 * v396 + 8) & 0x7FFFFFFF;
                          if (v396 == 0x7FFFFFFF)
                            break;
                          v400 = v397 + 32 * v396;
                          if (*(_QWORD *)(v400 + 16) == v392)
                          {
                            *(_DWORD *)(v397 + 32 * v399 + 8) = *(_DWORD *)(v397 + 32 * v399 + 8) & 0x80000000 | *(_DWORD *)(v400 + 8) & 0x7FFFFFFF;
                            goto LABEL_650;
                          }
                        }
                      }
                    }
                  }
                  re::DynamicArray<re::TransitionCondition *>::add(&v706[16], v391);
                }
                v390 = v677;
                if (v678 <= (int)v386 + 1)
                  v406 = v386 + 1;
                else
                  v406 = v678;
                while (1)
                {
                  v389 = (v386 + 1);
                  if (v406 - 1 == (_DWORD)v386)
                    break;
                  LODWORD(v386) = v386 + 1;
                  v407 = v389;
                  if ((*(_DWORD *)(v677 + 24 * v389 + 8) & 0x80000000) != 0)
                    goto LABEL_661;
                }
                v407 = v406;
LABEL_661:
                LODWORD(v386) = v407;
              }
              while (v385 != v407);
            }
            v408 = *(unsigned int *)(a1 + 1632);
            if ((_DWORD)v408)
            {
              v409 = 0;
              v410 = (int *)(*(_QWORD *)(a1 + 1616) + 8);
              while (1)
              {
                v411 = *v410;
                v410 += 6;
                if (v411 < 0)
                  break;
                if (v408 == ++v409)
                {
                  LODWORD(v409) = *(_DWORD *)(a1 + 1632);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v409) = 0;
            }
            if ((_DWORD)v408 != (_DWORD)v409)
            {
              v412 = v409;
              do
              {
                re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)&v698 + 1, (_QWORD *)(*(_QWORD *)(a1 + 1616) + 24 * v412 + 16));
                if (*(_DWORD *)(a1 + 1632) <= (v409 + 1))
                  v413 = v409 + 1;
                else
                  v413 = *(_DWORD *)(a1 + 1632);
                v414 = v409;
                while (1)
                {
                  v412 = (v414 + 1);
                  if (v413 - 1 == v414)
                    break;
                  ++v414;
                  LODWORD(v409) = v412;
                  if ((*(_DWORD *)(*(_QWORD *)(a1 + 1616) + 24 * v412 + 8) & 0x80000000) != 0)
                    goto LABEL_678;
                }
                LODWORD(v409) = v413;
LABEL_678:
                ;
              }
              while ((_DWORD)v408 != (_DWORD)v409);
            }
            v415 = *(unsigned int *)(a1 + 1584);
            if ((_DWORD)v415)
            {
              v416 = 0;
              v417 = (int *)(*(_QWORD *)(a1 + 1568) + 8);
              while (1)
              {
                v418 = *v417;
                v417 += 6;
                if (v418 < 0)
                  break;
                if (v415 == ++v416)
                {
                  LODWORD(v416) = *(_DWORD *)(a1 + 1584);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v416) = 0;
            }
            if ((_DWORD)v415 != (_DWORD)v416)
            {
              v419 = v416;
              do
              {
                v420 = (uint64_t *)(*(_QWORD *)(a1 + 1568) + 24 * v419 + 16);
                if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v649, v420)&& !re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v646, v420))
                {
                  re::DynamicArray<re::TransitionCondition *>::add(&v697[16], v420);
                }
                if (*(_DWORD *)(a1 + 1584) <= (v416 + 1))
                  v421 = v416 + 1;
                else
                  v421 = *(_DWORD *)(a1 + 1584);
                while (1)
                {
                  v419 = (v416 + 1);
                  if (v421 - 1 == (_DWORD)v416)
                    break;
                  LODWORD(v416) = v416 + 1;
                  v422 = v419;
                  if ((*(_DWORD *)(*(_QWORD *)(a1 + 1568) + 24 * v419 + 8) & 0x80000000) != 0)
                    goto LABEL_697;
                }
                v422 = v421;
LABEL_697:
                LODWORD(v416) = v422;
              }
              while ((_DWORD)v415 != v422);
            }
            v423 = *(unsigned int *)(a1 + 960);
            if ((_DWORD)v423)
            {
              v264 = 0;
              v424 = (int *)(*(_QWORD *)(a1 + 944) + 8);
              while (1)
              {
                v425 = *v424;
                v424 += 8;
                if (v425 < 0)
                  break;
                if (v423 == ++v264)
                {
                  v264 = *(unsigned int *)(a1 + 960);
                  break;
                }
              }
            }
            else
            {
              v264 = 0;
            }
            if ((_DWORD)v423 != (_DWORD)v264)
            {
              v426 = v264;
              do
              {
                v427 = *(_QWORD *)(a1 + 944) + 32 * v426;
                v428 = (_QWORD *)(v427 + 24);
                if (!re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)&v712, (uint64_t *)(v427 + 24)))
                {
                  memset(buf, 0, sizeof(buf));
                  *(_DWORD *)&buf[36] = 0x7FFFFFFF;
                  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)&v712, (uint64_t *)(v427 + 24), (uint64_t *)buf);
                  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)buf);
                }
                if ((_QWORD)v712)
                {
                  v429 = 0xBF58476D1CE4E5B9 * (*v428 ^ (*v428 >> 30));
                  v430 = ((0x94D049BB133111EBLL * (v429 ^ (v429 >> 27))) ^ ((0x94D049BB133111EBLL * (v429 ^ (v429 >> 27))) >> 31))
                       % DWORD2(v713);
                  v431 = v713;
                  v432 = *(unsigned int *)(*((_QWORD *)&v712 + 1) + 4 * v430);
                  if ((_DWORD)v432 != 0x7FFFFFFF)
                  {
                    while (*(_QWORD *)(v713 + 72 * v432 + 16) != *v428)
                    {
                      v432 = *(_DWORD *)(v713 + 72 * v432 + 8) & 0x7FFFFFFF;
                      if (v432 == 0x7FFFFFFF)
                        goto LABEL_714;
                    }
                    goto LABEL_715;
                  }
                }
                else
                {
                  v431 = v713;
                }
LABEL_714:
                LODWORD(v432) = 0x7FFFFFFF;
LABEL_715:
                re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v431 + 72 * v432 + 24, (uint64_t *)(v427 + 16));
                v433 = *(_DWORD *)(a1 + 960);
                if (v433 <= (int)v264 + 1)
                  v434 = (v264 + 1);
                else
                  v434 = v433;
                while (1)
                {
                  v426 = (v264 + 1);
                  if ((_DWORD)v434 - 1 == (_DWORD)v264)
                    break;
                  LODWORD(v264) = v264 + 1;
                  v435 = v426;
                  if ((*(_DWORD *)(*(_QWORD *)(a1 + 944) + 32 * v426 + 8) & 0x80000000) != 0)
                    goto LABEL_722;
                }
                v435 = v434;
LABEL_722:
                v264 = v435;
              }
              while ((_DWORD)v423 != (_DWORD)v435);
            }
            if (*(_BYTE *)(a1 + 2656))
            {
              v264 = *((_QWORD *)&v696 + 1);
              v436 = *((_QWORD *)&v699 + 1);
              v437 = *(_QWORD *)&v706[32];
              if (*(_QWORD *)&v700[32] == *(_DWORD *)(a1 + 1676))
              {
                if (*(_QWORD *)&v700[32])
                {
                  v438 = 224 * *(_QWORD *)&v700[32] - 224;
                  v439 = (uint64_t *)(v701 + 192);
                  do
                  {
                    v440 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v280, v439);
                    if (!v440)
                      break;
                    v441 = v438;
                    v438 -= 224;
                    v439 += 28;
                  }
                  while (v441);
                  v442 = !v440;
                }
                else
                {
                  v442 = 0;
                }
              }
              else
              {
                v442 = 1;
              }
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v280);
              if (*(_QWORD *)&v700[32])
              {
                v443 = 224 * *(_QWORD *)&v700[32];
                v444 = (uint64_t *)(v701 + 192);
                do
                {
                  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v280, v444);
                  v444 += 28;
                  v443 -= 224;
                }
                while (v443);
              }
              if (*(_QWORD *)&v697[32] == *(_DWORD *)(a1 + 1724))
              {
                if (*(_QWORD *)&v697[32])
                {
                  v445 = (uint64_t *)v698;
                  v446 = 8 * *(_QWORD *)&v697[32] - 8;
                  do
                  {
                    v447 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains(v281, v445);
                    if (!v447)
                      break;
                    ++v445;
                    v448 = v446;
                    v446 -= 8;
                  }
                  while (v448);
                  v449 = !v447;
                }
                else
                {
                  v449 = 0;
                }
              }
              else
              {
                v449 = 1;
              }
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v281);
              if (*(_QWORD *)&v697[32])
              {
                v451 = (uint64_t *)v698;
                v452 = 8 * *(_QWORD *)&v697[32];
                do
                {
                  v450 = (re *)re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v281, v451++);
                  v452 -= 8;
                }
                while (v452);
              }
              if (v437)
                v453 = 1;
              else
                v453 = v442;
              if (v264)
                v453 = 1;
              if (((v453 | v449) & 1) != 0 || v436)
              {
                v454 = *re::shadowLogObjects(v450);
                v455 = os_log_type_enabled(v454, OS_LOG_TYPE_DEFAULT);
                if (v455)
                {
                  v456 = *(_QWORD *)(a1 + 2640);
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = v456;
                  _os_log_impl(&dword_224FE9000, v454, OS_LOG_TYPE_DEFAULT, "MeshShadowSystem: ============= Updating Shadow %llu =============", buf, 0xCu);
                }
                if (v442)
                {
                  v457 = *(_QWORD *)(a1 + 2672);
                  if ((v457 & 1) != 0)
                  {
                    *(_QWORD *)(a1 + 2672) = 1;
                    v459 = (re::DynamicString *)(a1 + 2664);
                    v458 = *(_BYTE **)(a1 + 2680);
                  }
                  else
                  {
                    *(_BYTE *)(a1 + 2672) = v457 & 1;
                    v458 = (_BYTE *)(a1 + 2673);
                    v459 = (re::DynamicString *)(a1 + 2664);
                  }
                  *v458 = 0;
                  v460 = (re *)re::DynamicString::appendf(v459, "MeshShadowSystem: upserting %zu clusters", *(size_t *)&v700[32]);
                  if (*(_QWORD *)&v700[32])
                  {
                    v461 = 224 * *(_QWORD *)&v700[32];
                    v462 = (uint64_t *)(v701 + 192);
                    do
                    {
                      v463 = *v462;
                      v462 += 28;
                      v460 = (re *)re::DynamicString::appendf(v459, " %llu", v463);
                      v461 -= 224;
                    }
                    while (v461);
                  }
                  v464 = *re::shadowLogObjects(v460);
                  v455 = os_log_type_enabled(v464, OS_LOG_TYPE_DEFAULT);
                  if (v455)
                  {
                    v465 = a1 + 2673;
                    if ((*(_BYTE *)(a1 + 2672) & 1) != 0)
                      v465 = *(_QWORD *)(a1 + 2680);
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = v465;
                    _os_log_impl(&dword_224FE9000, v464, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                  }
                }
                if (v437)
                {
                  v466 = *(_QWORD *)(a1 + 2672);
                  if ((v466 & 1) != 0)
                  {
                    *(_QWORD *)(a1 + 2672) = 1;
                    v468 = (re::DynamicString *)(a1 + 2664);
                    v467 = *(_BYTE **)(a1 + 2680);
                  }
                  else
                  {
                    *(_BYTE *)(a1 + 2672) = v466 & 1;
                    v467 = (_BYTE *)(a1 + 2673);
                    v468 = (re::DynamicString *)(a1 + 2664);
                  }
                  *v467 = 0;
                  v469 = (re *)re::DynamicString::appendf(v468, "MeshShadowSystem: removing %zu clusters", *(size_t *)&v706[32]);
                  if (*(_QWORD *)&v706[32])
                  {
                    v470 = (uint64_t *)v708;
                    v471 = 8 * *(_QWORD *)&v706[32];
                    do
                    {
                      v472 = *v470++;
                      v469 = (re *)re::DynamicString::appendf(v468, " %llu", v472);
                      v471 -= 8;
                    }
                    while (v471);
                  }
                  v473 = *re::shadowLogObjects(v469);
                  v455 = os_log_type_enabled(v473, OS_LOG_TYPE_DEFAULT);
                  if (v455)
                  {
                    v474 = a1 + 2673;
                    if ((*(_BYTE *)(a1 + 2672) & 1) != 0)
                      v474 = *(_QWORD *)(a1 + 2680);
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = v474;
                    _os_log_impl(&dword_224FE9000, v473, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                  }
                }
                if (v264)
                {
                  v475 = *(_QWORD *)(a1 + 2672);
                  if ((v475 & 1) != 0)
                  {
                    *(_QWORD *)(a1 + 2672) = 1;
                    v264 = a1 + 2664;
                    v476 = *(_BYTE **)(a1 + 2680);
                  }
                  else
                  {
                    *(_BYTE *)(a1 + 2672) = v475 & 1;
                    v476 = (_BYTE *)(a1 + 2673);
                    v264 = a1 + 2664;
                  }
                  *v476 = 0;
                  v477 = (re *)re::DynamicString::appendf((re::DynamicString *)v264, "MeshShadowSystem: adding %zu receivers", *((size_t *)&v696 + 1));
                  if (*((_QWORD *)&v696 + 1))
                  {
                    v478 = *(uint64_t **)&v697[8];
                    v479 = 8 * *((_QWORD *)&v696 + 1);
                    do
                    {
                      v480 = *v478++;
                      v477 = (re *)re::DynamicString::appendf((re::DynamicString *)v264, " %llu", v480);
                      v479 -= 8;
                    }
                    while (v479);
                  }
                  v481 = *re::shadowLogObjects(v477);
                  v455 = os_log_type_enabled(v481, OS_LOG_TYPE_DEFAULT);
                  if (v455)
                  {
                    v482 = a1 + 2673;
                    if ((*(_BYTE *)(a1 + 2672) & 1) != 0)
                      v482 = *(_QWORD *)(a1 + 2680);
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = v482;
                    _os_log_impl(&dword_224FE9000, v481, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                  }
                }
                if (v449)
                {
                  v483 = *(_QWORD *)(a1 + 2672);
                  if ((v483 & 1) != 0)
                  {
                    *(_QWORD *)(a1 + 2672) = 1;
                    v264 = a1 + 2664;
                    v484 = *(_BYTE **)(a1 + 2680);
                  }
                  else
                  {
                    *(_BYTE *)(a1 + 2672) = v483 & 1;
                    v484 = (_BYTE *)(a1 + 2673);
                    v264 = a1 + 2664;
                  }
                  *v484 = 0;
                  v485 = (re *)re::DynamicString::appendf((re::DynamicString *)v264, "MeshShadowSystem: updating %zu receivers", *(size_t *)&v697[32]);
                  if (*(_QWORD *)&v697[32])
                  {
                    v486 = (uint64_t *)v698;
                    v487 = 8 * *(_QWORD *)&v697[32];
                    do
                    {
                      v488 = *v486++;
                      v485 = (re *)re::DynamicString::appendf((re::DynamicString *)v264, " %llu", v488);
                      v487 -= 8;
                    }
                    while (v487);
                  }
                  v489 = *re::shadowLogObjects(v485);
                  v455 = os_log_type_enabled(v489, OS_LOG_TYPE_DEFAULT);
                  if (v455)
                  {
                    v490 = a1 + 2673;
                    if ((*(_BYTE *)(a1 + 2672) & 1) != 0)
                      v490 = *(_QWORD *)(a1 + 2680);
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = v490;
                    _os_log_impl(&dword_224FE9000, v489, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                  }
                }
                if (v436)
                {
                  v491 = *(_QWORD *)(a1 + 2672);
                  if ((v491 & 1) != 0)
                  {
                    *(_QWORD *)(a1 + 2672) = 1;
                    v264 = a1 + 2664;
                    v492 = *(_BYTE **)(a1 + 2680);
                  }
                  else
                  {
                    *(_BYTE *)(a1 + 2672) = v491 & 1;
                    v492 = (_BYTE *)(a1 + 2673);
                    v264 = a1 + 2664;
                  }
                  *v492 = 0;
                  v493 = (re *)re::DynamicString::appendf((re::DynamicString *)v264, "MeshShadowSystem: removing %zu receivers", *((size_t *)&v699 + 1));
                  if (*((_QWORD *)&v699 + 1))
                  {
                    v494 = *(uint64_t **)&v700[8];
                    v495 = 8 * *((_QWORD *)&v699 + 1);
                    do
                    {
                      v496 = *v494++;
                      v493 = (re *)re::DynamicString::appendf((re::DynamicString *)v264, " %llu", v496);
                      v495 -= 8;
                    }
                    while (v495);
                  }
                  v497 = *re::shadowLogObjects(v493);
                  v455 = os_log_type_enabled(v497, OS_LOG_TYPE_DEFAULT);
                  if (v455)
                  {
                    v498 = a1 + 2673;
                    if ((*(_BYTE *)(a1 + 2672) & 1) != 0)
                      v498 = *(_QWORD *)(a1 + 2680);
                    *(_DWORD *)buf = 136315138;
                    *(_QWORD *)&buf[4] = v498;
                    _os_log_impl(&dword_224FE9000, v497, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
                  }
                }
                v499 = *re::shadowLogObjects((re *)v455);
                if (os_log_type_enabled(v499, OS_LOG_TYPE_DEFAULT))
                {
                  v500 = *(_QWORD *)(a1 + 2640);
                  *(_DWORD *)buf = 134217984;
                  *(_QWORD *)&buf[4] = v500;
                  _os_log_impl(&dword_224FE9000, v499, OS_LOG_TYPE_DEFAULT, "MeshShadowSystem: ============== End of Update %llu ==============", buf, 0xCu);
                }
              }
            }
            v501 = v695[0];
            if (v695[0] || *(_BYTE *)(a1 + 1744))
            {
              v275 = (re::AssetHandle *)((char *)&v701 + 8);
              if (!v695[0] || *(_BYTE *)(a1 + 1744))
              {
                if (!v695[0] && *(_BYTE *)(a1 + 1744))
                {
                  v501 = 1;
                  v695[0] = 1;
                }
                v695[1] = *(_BYTE *)(a1 + 1745);
              }
              else
              {
                v501 = 0;
                v695[0] = 0;
              }
            }
            else
            {
              v501 = 0;
              v275 = (re::AssetHandle *)((char *)&v701 + 8);
            }
            v502 = *(_OWORD *)(a1 + 2592);
            *(_OWORD *)&v722[16] = *(_OWORD *)(a1 + 2576);
            v723 = v502;
            v724 = *(_OWORD *)(a1 + 2608);
            *(_QWORD *)&v725 = *(_QWORD *)(a1 + 2624);
            v503 = *(_OWORD *)(a1 + 2528);
            v719 = *(_OWORD *)(a1 + 2512);
            v720 = v503;
            v504 = *(_OWORD *)(a1 + 2560);
            v721 = *(_OWORD *)(a1 + 2544);
            *(_OWORD *)v722 = v504;
            v505 = *(_OWORD *)(a1 + 2464);
            v717 = *(_OWORD *)(a1 + 2448);
            *(_OWORD *)v718 = v505;
            v506 = *(_OWORD *)(a1 + 2496);
            *(_OWORD *)&v718[16] = *(_OWORD *)(a1 + 2480);
            *(_OWORD *)&v718[32] = v506;
            v507 = *(_OWORD *)(a1 + 2432);
            *(_OWORD *)v716 = *v631;
            *(_OWORD *)&v716[16] = v507;
            if (*(_BYTE *)(a1 + 2400))
            {
              v508 = (uint8_t *)(a1 + 1760);
              if (*v644 | v501)
              {
                if (v501 || !*v644)
                {
                  if (v501 && !*v644)
                    *(_BYTE *)(a1 + 1760) = 1;
                  *(_BYTE *)(a1 + 1761) = v695[1];
                  v508 = (uint8_t *)(a1 + 1760);
                }
                else
                {
                  v508 = (uint8_t *)(a1 + 1760);
                  *v644 = 0;
                }
              }
              re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v643, (uint64_t)&v695[8]);
              re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v642, (uint64_t)&v697[16]);
              re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v641, (uint64_t)&v698 + 8);
              if (v508 == v695)
              {
                re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v640, (uint64_t)&v703[16]);
                re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v639, (uint64_t)&v704 + 8);
                re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v638, (uint64_t)&v706[16]);
              }
              else
              {
                v510 = *(_QWORD *)(a1 + 1888);
                if (v510 && *(_QWORD *)&v700[16] && v510 != *(_QWORD *)&v700[16])
                {
                  re::internal::assertLog((re::internal *)4, v509, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
                  _os_crash();
                  __break(1u);
LABEL_978:
                  re::internal::assertLog((re::internal *)4, v509, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
                  _os_crash();
                  __break(1u);
LABEL_979:
                  re::internal::assertLog((re::internal *)4, v517, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
                  _os_crash();
                  __break(1u);
LABEL_980:
                  v670 = 0;
                  v680 = 0u;
                  v679 = 0u;
                  v678 = 0u;
                  v677 = 0u;
                  v676 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = "operator[]";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 797;
                  *(_WORD *)&buf[18] = 2048;
                  *(_QWORD *)&buf[20] = 0;
                  *(_WORD *)&buf[28] = 2048;
                  *(_QWORD *)&buf[30] = 0;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  goto LABEL_981;
                }
                *(_QWORD *)(a1 + 1888) = *(_QWORD *)&v700[16];
                *(_QWORD *)&v700[16] = v510;
                v511 = *(_QWORD *)(a1 + 1920);
                v512 = *((_QWORD *)&v701 + 1);
                *(_QWORD *)(a1 + 1920) = v701;
                v513 = *v630;
                *v630 = *(_OWORD *)&v700[24];
                *(_OWORD *)&v700[24] = v513;
                *(_QWORD *)&v701 = v511;
                ++*(_DWORD *)&v700[40];
                ++*(_DWORD *)(a1 + 1912);
                v514 = *(_QWORD *)(a1 + 1928);
                if (v514 && v512 && v514 != v512)
                  goto LABEL_978;
                *(_QWORD *)(a1 + 1928) = v512;
                *((_QWORD *)&v701 + 1) = v514;
                v515 = *(_OWORD *)(a1 + 1936);
                *(_OWORD *)(a1 + 1936) = v702;
                v702 = v515;
                v516 = *(_QWORD *)(a1 + 1960);
                *(_QWORD *)(a1 + 1960) = *(_QWORD *)&v703[8];
                *(_QWORD *)&v703[8] = v516;
                ++*(_DWORD *)v703;
                ++*(_DWORD *)(a1 + 1952);
                re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v640, (uint64_t)&v703[16]);
                re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v639, (uint64_t)&v704 + 8);
                re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v638, (uint64_t)&v706[16]);
                v518 = *(_QWORD *)(a1 + 2088);
                if (v518 && *((_QWORD *)&v708 + 1) && v518 != *((_QWORD *)&v708 + 1))
                  goto LABEL_979;
                *(_QWORD *)(a1 + 2088) = *((_QWORD *)&v708 + 1);
                *((_QWORD *)&v708 + 1) = v518;
                v519 = *(_OWORD *)(a1 + 2096);
                *(_OWORD *)(a1 + 2096) = v709;
                v709 = v519;
                v520 = *(void **)(a1 + 2120);
                *(_QWORD *)(a1 + 2120) = __dst;
                __dst = v520;
                ++v710;
                ++*(_DWORD *)(a1 + 2112);
              }
              re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v637, (uint64_t *)&v712);
              v521 = v723;
              *(_OWORD *)(a1 + 2336) = *(_OWORD *)&v722[16];
              *(_OWORD *)(a1 + 2352) = v521;
              *(_OWORD *)(a1 + 2368) = v724;
              *(_QWORD *)(a1 + 2384) = v725;
              v522 = v720;
              *(_OWORD *)(a1 + 2272) = v719;
              *(_OWORD *)(a1 + 2288) = v522;
              v523 = *(_OWORD *)v722;
              *(_OWORD *)(a1 + 2304) = v721;
              *(_OWORD *)(a1 + 2320) = v523;
              v524 = *(_OWORD *)v718;
              *(_OWORD *)(a1 + 2208) = v717;
              *(_OWORD *)(a1 + 2224) = v524;
              v525 = *(_OWORD *)&v718[32];
              *(_OWORD *)(a1 + 2240) = *(_OWORD *)&v718[16];
              *(_OWORD *)(a1 + 2256) = v525;
              v526 = *(_OWORD *)&v716[16];
              *v636 = *(_OWORD *)v716;
              *(_OWORD *)(a1 + 2192) = v526;
            }
            else
            {
              re::MeshShadowPerFrameUpdateData::MeshShadowPerFrameUpdateData((uint64_t)v644, v695);
              *(_BYTE *)(a1 + 2400) = 1;
            }
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v634);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v633);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1 + 1216);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v632);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v649);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1 + 1552);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v646);
            if (*(_BYTE *)(a1 + 1744))
              *(_BYTE *)(a1 + 1744) = 0;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v676);
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v666);
            re::MeshShadowPerFrameUpdateData::~MeshShadowPerFrameUpdateData((re::MeshShadowPerFrameUpdateData *)v695);
            v274 = v647;
          }
          v527 = *(_QWORD *)(a1 + 112);
          if (!v527)
            break;
          v528 = *(_QWORD *)(v527 + 104);
          if (v528)
            v264 = re::RenderFrameBox::get(v528 + 344, 0xFFFFFFFFFFFFFFFuLL);
          else
            v264 = 0;
          if (!*(_BYTE *)(a1 + 2400))
            goto LABEL_950;
          v695[0] = *v644;
          if (v695[0])
            v695[1] = *(_BYTE *)(a1 + 1761);
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v695[8], v643);
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v697[16], v642);
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v698 + 8, v641);
          *(_QWORD *)&v701 = 0;
          memset(&v700[16], 0, 28);
          if (*(_QWORD *)(a1 + 1888))
          {
            v529 = *(_QWORD *)(a1 + 1904);
            *(_QWORD *)&v700[16] = *(_QWORD *)(a1 + 1888);
            re::DynamicArray<re::MeshShadowCluster>::setCapacity(&v700[16], v529);
            ++*(_DWORD *)&v700[40];
            v530 = *(_QWORD *)(a1 + 1904);
            if (v530 >= *(_QWORD *)&v700[32])
            {
              re::DynamicArray<re::MeshShadowCluster>::setCapacity(&v700[16], *(_QWORD *)(a1 + 1904));
              std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshShadowCluster *,re::MeshShadowCluster *,re::MeshShadowCluster *,0>(*(_QWORD *)(a1 + 1920), *(_QWORD *)(a1 + 1920) + 224 * *(_QWORD *)&v700[32], v701);
              if (*(_QWORD *)&v700[32] != v530)
              {
                v535 = *(_QWORD *)(a1 + 1920) + 224 * *(_QWORD *)&v700[32];
                v536 = v701 + 224 * *(_QWORD *)&v700[32];
                v537 = -224 * *(_QWORD *)&v700[32] + 224 * v530;
                do
                {
                  v538 = re::DynamicArray<re::MeshShadowCasterInfo>::DynamicArray(v536, (uint64_t *)v535);
                  v539 = *(_OWORD *)(v535 + 48);
                  v540 = *(_OWORD *)(v535 + 80);
                  *(_OWORD *)(v538 + 64) = *(_OWORD *)(v535 + 64);
                  *(_OWORD *)(v538 + 80) = v540;
                  *(_OWORD *)(v538 + 48) = v539;
                  v541 = *(_OWORD *)(v535 + 96);
                  v542 = *(_OWORD *)(v535 + 112);
                  v543 = *(_OWORD *)(v535 + 144);
                  *(_OWORD *)(v538 + 128) = *(_OWORD *)(v535 + 128);
                  *(_OWORD *)(v538 + 144) = v543;
                  *(_OWORD *)(v538 + 96) = v541;
                  *(_OWORD *)(v538 + 112) = v542;
                  v544 = *(_OWORD *)(v535 + 160);
                  v545 = *(_OWORD *)(v535 + 176);
                  v546 = *(_OWORD *)(v535 + 192);
                  *(_QWORD *)(v538 + 208) = *(_QWORD *)(v535 + 208);
                  *(_OWORD *)(v538 + 176) = v545;
                  *(_OWORD *)(v538 + 192) = v546;
                  *(_OWORD *)(v538 + 160) = v544;
                  v535 += 224;
                  v536 = v538 + 224;
                  v537 -= 224;
                }
                while (v537);
              }
            }
            else
            {
              v531 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshShadowCluster *,re::MeshShadowCluster *,re::MeshShadowCluster *,0>(*(_QWORD *)(a1 + 1920), *(_QWORD *)(a1 + 1920) + 224 * v530, v701);
              if (v530 != *(_QWORD *)&v700[32])
              {
                v532 = -224 * v530 + 224 * *(_QWORD *)&v700[32];
                v533 = (_QWORD *)(v701 + 224 * v530 + 32);
                do
                {
                  v534 = *(v533 - 4);
                  if (v534)
                  {
                    if (*v533)
                      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v534 + 40))(v534, v531);
                    *v533 = 0;
                    *(v533 - 3) = 0;
                    *(v533 - 2) = 0;
                    *(v533 - 4) = 0;
                    ++*((_DWORD *)v533 - 2);
                  }
                  v533 += 28;
                  v532 -= 224;
                }
                while (v532);
              }
            }
            *(_QWORD *)&v700[32] = v530;
            v274 = v647;
          }
          *(_QWORD *)&v703[8] = 0;
          v702 = 0uLL;
          *((_QWORD *)&v701 + 1) = 0;
          *(_DWORD *)v703 = 0;
          if (*(_QWORD *)(a1 + 1928))
          {
            v547 = *(_QWORD *)(a1 + 1944);
            *((_QWORD *)&v701 + 1) = *(_QWORD *)(a1 + 1928);
            re::DynamicArray<re::MeshShadowPlaneData>::setCapacity((_QWORD *)&v701 + 1, v547);
            ++*(_DWORD *)v703;
            v548 = *(_QWORD *)(a1 + 1944);
            if (v548 >= *((_QWORD *)&v702 + 1))
            {
              re::DynamicArray<re::MeshShadowPlaneData>::setCapacity((_QWORD *)&v701 + 1, *(_QWORD *)(a1 + 1944));
              std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshShadowPlaneData *,re::MeshShadowPlaneData *,re::MeshShadowPlaneData *>(*(_OWORD **)(a1 + 1960), (_OWORD *)(*(_QWORD *)(a1 + 1960) + 112 * *((_QWORD *)&v702 + 1)), *(uint64_t *)&v703[8]);
              if (*((_QWORD *)&v702 + 1) != v548)
              {
                v549 = *(_QWORD *)(a1 + 1960);
                v550 = v549 + 112 * v548;
                v551 = v549 + 112 * *((_QWORD *)&v702 + 1);
                v552 = *(_QWORD *)&v703[8] + 112 * *((_QWORD *)&v702 + 1);
                do
                {
                  *(_QWORD *)v552 = *(_QWORD *)v551;
                  v553 = *(unsigned __int8 *)(v551 + 16);
                  *(_BYTE *)(v552 + 16) = v553;
                  if (v553)
                  {
                    v554 = *(_OWORD *)(v551 + 48);
                    *(_OWORD *)(v552 + 32) = *(_OWORD *)(v551 + 32);
                    *(_OWORD *)(v552 + 48) = v554;
                  }
                  v555 = *(unsigned __int8 *)(v551 + 64);
                  *(_BYTE *)(v552 + 64) = v555;
                  if (v555)
                  {
                    v556 = *(_OWORD *)(v551 + 96);
                    *(_OWORD *)(v552 + 80) = *(_OWORD *)(v551 + 80);
                    *(_OWORD *)(v552 + 96) = v556;
                  }
                  v551 += 112;
                  v552 += 112;
                }
                while (v551 != v550);
              }
            }
            else
            {
              std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshShadowPlaneData *,re::MeshShadowPlaneData *,re::MeshShadowPlaneData *>(*(_OWORD **)(a1 + 1960), (_OWORD *)(*(_QWORD *)(a1 + 1960) + 112 * v548), *(uint64_t *)&v703[8]);
            }
            *((_QWORD *)&v702 + 1) = v548;
          }
          re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::DynamicArray((uint64_t)&v703[16], v640);
          re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::DynamicArray((uint64_t)&v704 + 8, v639);
          re::DynamicArray<char const*>::DynamicArray((uint64_t)&v706[16], v638);
          __dst = 0;
          v709 = 0uLL;
          *((_QWORD *)&v708 + 1) = 0;
          v710 = 0;
          if (*(_QWORD *)(a1 + 2088))
          {
            v557 = *(_QWORD *)(a1 + 2104);
            *((_QWORD *)&v708 + 1) = *(_QWORD *)(a1 + 2088);
            re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)&v708 + 1, v557);
            ++v710;
            v558 = *(_QWORD *)(a1 + 2104);
            if (v558 >= *((_QWORD *)&v709 + 1))
            {
              re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)&v708 + 1, *(_QWORD *)(a1 + 2104));
              v559 = *((_QWORD *)&v709 + 1);
              if (*((_QWORD *)&v709 + 1))
              {
                memmove(__dst, *(const void **)(a1 + 2120), 16 * *((_QWORD *)&v709 + 1));
                v559 = *((_QWORD *)&v709 + 1);
              }
              memcpy((char *)__dst + 16 * v559, (const void *)(*(_QWORD *)(a1 + 2120) + 16 * v559), 16 * v558 - 16 * v559);
            }
            else if (v558)
            {
              memmove(__dst, *(const void **)(a1 + 2120), 16 * v558);
            }
            *((_QWORD *)&v709 + 1) = v558;
          }
          re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable((uint64_t)&v712, v637);
          v560 = *(_OWORD *)(a1 + 2352);
          *(_OWORD *)&v722[16] = *(_OWORD *)(a1 + 2336);
          v723 = v560;
          v561 = *(_OWORD *)(a1 + 2384);
          v724 = *(_OWORD *)(a1 + 2368);
          v725 = v561;
          v562 = *(_OWORD *)(a1 + 2288);
          v719 = *(_OWORD *)(a1 + 2272);
          v720 = v562;
          v563 = *(_OWORD *)(a1 + 2320);
          v721 = *(_OWORD *)(a1 + 2304);
          *(_OWORD *)v722 = v563;
          v564 = *(_OWORD *)(a1 + 2224);
          v717 = *(_OWORD *)(a1 + 2208);
          *(_OWORD *)v718 = v564;
          v565 = *(_OWORD *)(a1 + 2256);
          *(_OWORD *)&v718[16] = *(_OWORD *)(a1 + 2240);
          *(_OWORD *)&v718[32] = v565;
          v566 = *(_OWORD *)(a1 + 2192);
          *(_OWORD *)v716 = *v636;
          *(_OWORD *)&v716[16] = v566;
          (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v264 + 320) + 368))(*(_QWORD *)(v264 + 320), v695);
          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(*v274, 0, (re::DynamicString **)v264, v662);
          *(_QWORD *)v693 = v662[0] >> 1;
          v567 = re::RenderFrameData::stream((re::RenderFrameData *)(v264 + 264), (const re::WeakStringID *)v693);
          v568 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v567, (uint64_t *)v666);
          if (!v568)
          {
            v569 = *(_QWORD *)(*(_QWORD *)(v567 + 48) + 8);
            v570 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v569 + 32))(v569, 56, 8);
            *(_QWORD *)v570 = 0;
            *(_QWORD *)(v570 + 8) = 0;
            *(_DWORD *)(v570 + 16) = 1;
            *(_QWORD *)(v570 + 32) = 0;
            *(_QWORD *)(v570 + 40) = 0;
            *(_QWORD *)(v570 + 24) = 0;
            *(_DWORD *)(v570 + 48) = 0;
            v571 = (re *)re::BucketArray<re::MeshShadowReceiverWorld,4ul>::init(v570, v569, 1uLL);
            *((_QWORD *)&v676 + 1) = v570;
            *(_QWORD *)&v676 = std::__any_imp::_SmallHandler<re::BucketArray<re::MeshShadowReceiverWorld,4ul> *>::__handle[abi:nn180100];
            v679.i64[1] = re::globalAllocators(v571)[2];
            *(_QWORD *)&v680 = 0;
            v568 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v567, (uint64_t *)v666, (re *)&v676);
            if ((_QWORD)v680)
            {
              *(_QWORD *)buf = &v676;
              (*(void (**)(_QWORD, uint8_t *))(*(_QWORD *)v680 + 16))(v680, buf);
              if ((_QWORD)v680)
              {
                (**(void (***)(_QWORD))v680)(v680);
                if ((__int128 *)v680 != &v678)
                  (*(void (**)(uint64_t))(*(_QWORD *)v679.i64[1] + 40))(v679.i64[1]);
                *(_QWORD *)&v680 = 0;
              }
            }
            if ((_QWORD)v676)
              ((void (*)(int))v676)(0);
          }
          v574 = (uint64_t)*v572;
          v575 = (*v572)[5];
          v275 = (re::AssetHandle *)(*v572)[1];
          if (v575 + 1 > 4 * (uint64_t)v275)
          {
            re::BucketArray<re::MeshShadowReceiverWorld,4ul>::setBucketsCapacity(*v572, (v575 + 4) >> 2);
            v275 = *(re::AssetHandle **)(v574 + 8);
          }
          v264 = v575 >> 2;
          if ((unint64_t)v275 <= v575 >> 2)
            goto LABEL_951;
          if ((*(_BYTE *)(v574 + 16) & 1) != 0)
            v576 = v574 + 24;
          else
            v576 = *(_QWORD *)(v574 + 32);
          v577 = *(_QWORD *)(v576 + 8 * v264);
          v578 = *(_QWORD *)(v574 + 40);
          *(_QWORD *)(v574 + 40) = v578 + 1;
          ++*(_DWORD *)(v574 + 48);
          *(_BYTE *)(v577 + (v575 & 3)) = 0;
          if (v578 == -1)
            goto LABEL_952;
          if ((unint64_t)v275 <= v578 >> 2)
            goto LABEL_953;
          re::StringID::destroyString((re::StringID *)v662);
          re::MeshShadowPerFrameUpdateData::~MeshShadowPerFrameUpdateData((re::MeshShadowPerFrameUpdateData *)v695);
          ++v274;
          v275 = (re::AssetHandle *)((char *)&v701 + 8);
          if (v274 == (re::ecs2::RenderingSubsystem **)v635)
            goto LABEL_905;
        }
        re::internal::assertLog((re::internal *)4, v272, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "sendMeshShadowPerFrameUpdateData", 1144);
        _os_crash();
        __break(1u);
LABEL_950:
        re::internal::assertLog((re::internal *)4, v272, "assertion failure: '%s' (%s:line %i) MeshShadowSystem: Cached mesh shadow doesn't exist", "m_cachedMeshShadowPerFrameUpdateData.has_value()", "sendMeshShadowPerFrameUpdateData", 1149);
        _os_crash();
        __break(1u);
LABEL_951:
        *(_QWORD *)&v666[0] = 0;
        v680 = 0u;
        v679 = 0u;
        v678 = 0u;
        v677 = 0u;
        v676 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "operator[]";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 858;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v264;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v275;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_952:
        re::internal::assertLog((re::internal *)4, v573, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
        _os_crash();
        __break(1u);
LABEL_953:
        v612 = v578 >> 2;
        *(_QWORD *)&v666[0] = 0;
        v680 = 0u;
        v679 = 0u;
        v678 = 0u;
        v677 = 0u;
        v676 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "operator[]";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 858;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v612;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v275;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_954;
      }
LABEL_905:
      (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 128) + 48))(v695);
      v579 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v695);
      if (v579 && !*(_BYTE *)(v579 + 1656))
      {
        (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(a1 + 128) + 56))(&v676);
        v580 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)&v676);
        if (v580 && !*(_BYTE *)(v580 + 1656))
        {
          (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 128) + 64))(buf);
          v582 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)buf);
          if (v582)
          {
            v583 = *(unsigned __int8 *)(v582 + 1656);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v676);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v695);
            if (!v583)
            {
              v275 = (re::AssetHandle *)(a1 + 184);
              v588 = *(_QWORD *)(a1 + 192);
              if (!v588 || *(_BYTE *)(a1 + 2600))
              {
                re::internal::shadows::regenerateShadowProxy(a1 + 2560, *(_QWORD *)(a1 + 120), v584, v585, v586, v587);
                v589 = *(_OWORD *)(a1 + 184);
                *(_OWORD *)(a1 + 184) = *(_OWORD *)v695;
                *(_OWORD *)v695 = v589;
                v590 = *(_QWORD *)(a1 + 200);
                *(_QWORD *)(a1 + 200) = v696;
                *(_QWORD *)&v696 = v590;
                re::AssetHandle::~AssetHandle((re::AssetHandle *)v695);
                v588 = *(_QWORD *)(a1 + 192);
                if (!v588)
                  goto LABEL_954;
              }
              v591 = atomic_load((unsigned int *)(v588 + 704));
              if (v591 != 2)
              {
LABEL_954:
                re::AssetHandle::loadAsync(v275);
                goto LABEL_913;
              }
              if (*(_BYTE *)(a1 + 2600))
                re::AssetHandle::loadNow(*(_QWORD *)(a1 + 192), 0);
              v592 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 88);
              if (v592)
              {
                LOBYTE(v676) = 0;
                *(_QWORD *)v695 = 0x587ABAC10091B1A0;
                *(_QWORD *)&v695[8] = "overrides:enablemeshshadows";
                re::DebugSettingsManager::getWithErrorCode<BOOL>(v592, v695, &v676);
                re::StringID::destroyString((re::StringID *)v695);
                *(_QWORD *)v695 = 0x4859B8AA739E421CLL;
                *(_QWORD *)&v695[8] = "meshshadow:enableShadowFlattening";
                v593 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v592, v695, &v676);
                re::StringID::destroyString((re::StringID *)v695);
                if (!v593)
                  re::internal::shadows::g_enableShadowFlattening = v676;
                *(_QWORD *)v695 = 0x2D4485FF0B095780;
                *(_QWORD *)&v695[8] = "meshshadow:enableMeshDepthFallbackWhenFlattening";
                v594 = re::DebugSettingsManager::getWithErrorCode<BOOL>(v592, v695, &v676);
                re::StringID::destroyString((re::StringID *)v695);
                if (!v594)
                  re::internal::shadows::g_enableMeshDepthFallbackWhenFlattening = v676;
              }
              (*(void (**)(unint64_t *__return_ptr))(**(_QWORD **)(a1 + 128) + 48))(v662);
              (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(a1 + 128) + 56))(v666);
              (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 128) + 64))(v693);
              v595 = *(_QWORD *)(a1 + 216);
              if (v595 && (v596 = atomic_load((unsigned int *)(v595 + 704)), v596 == 2))
              {
                re::makeFontID((re *)(a1 + 208), (re::StringID *)v695);
                v597 = 1;
                v673 = 1;
                *(_QWORD *)v674 = *(_QWORD *)v695;
                *(_QWORD *)&v674[8] = *(_QWORD *)&v695[8];
                *(_QWORD *)&v695[8] = &str_110;
                *(_QWORD *)v695 = 0;
                re::StringID::destroyString((re::StringID *)v695);
                v598 = 0;
              }
              else
              {
                v597 = 0;
                v673 = 0;
                v598 = 1;
              }
              ++*(_DWORD *)(v662[1] + 260);
              *(_QWORD *)v695 = *(_QWORD *)(re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v662)
                                          + 1664);
              ++*(_DWORD *)(*((_QWORD *)&v666[0] + 1) + 260);
              *(_QWORD *)&v695[8] = *(_QWORD *)(re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v666)
                                              + 1664);
              ++*(_DWORD *)(*(_QWORD *)&v693[8] + 260);
              v613 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v693);
              v614 = *(_QWORD *)(a1 + 160);
              *(_QWORD *)&v696 = *(_QWORD *)(v613 + 1664);
              *((_QWORD *)&v696 + 1) = v614;
              if (v614)
                v615 = (id)(v614 + 8);
              v616 = *(_QWORD *)(a1 + 168);
              *(_QWORD *)v697 = v616;
              if (v616)
                v617 = (id)(v616 + 8);
              v618 = *(_QWORD *)(a1 + 176);
              *(_QWORD *)&v697[8] = v618;
              if (v618)
                v619 = (id)(v618 + 8);
              v620 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(a1 + 184));
              if (!*(_QWORD *)(v620 + 416))
                goto LABEL_980;
              *(_QWORD *)&v697[16] = **(_QWORD **)(v620 + 432);
              v697[24] = v597;
              if ((v598 & 1) == 0)
                re::StringID::StringID((re::StringID *)&v697[32], (const StringID *)v674);
              LODWORD(v698) = 0;
              v622 = *(_OWORD *)(a1 + 2592);
              v705 = *(_OWORD *)(a1 + 2576);
              *(_OWORD *)v706 = v622;
              *(_OWORD *)&v706[16] = *(_OWORD *)(a1 + 2608);
              *(_QWORD *)&v706[32] = *(_QWORD *)(a1 + 2624);
              v623 = *(_OWORD *)(a1 + 2528);
              *(_OWORD *)v703 = *(_OWORD *)(a1 + 2512);
              *(_OWORD *)&v703[16] = v623;
              v624 = *(_OWORD *)(a1 + 2560);
              *(_OWORD *)&v703[32] = *(_OWORD *)(a1 + 2544);
              v704 = v624;
              v625 = *(_OWORD *)(a1 + 2464);
              *(_OWORD *)&v700[16] = *(_OWORD *)(a1 + 2448);
              *(_OWORD *)&v700[32] = v625;
              v626 = *(_OWORD *)(a1 + 2496);
              v701 = *(_OWORD *)(a1 + 2480);
              v702 = v626;
              v627 = *(_OWORD *)(a1 + 2432);
              v699 = *v631;
              *(_OWORD *)v700 = v627;
              LOBYTE(v708) = 1;
              *((_QWORD *)&v708 + 1) = *(_QWORD *)(a1 + 2640);
              v628 = *(_QWORD *)(a1 + 112);
              if (!v628)
              {
LABEL_981:
                re::internal::assertLog((re::internal *)4, v621, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "prepareShadowBuilderGlobalData", 1089);
                _os_crash();
                __break(1u);
              }
              v629 = re::RenderFrameBox::get(*(_QWORD *)(v628 + 104) + 344, 0xFFFFFFFFFFFFFFFuLL);
              (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v629 + 320) + 336))(*(_QWORD *)(v629 + 320), v695);
              if (v697[24])
                re::StringID::destroyString((re::StringID *)&v697[32]);
              if (*(_QWORD *)&v697[8])
              {

                *(_QWORD *)&v697[8] = 0;
              }
              if (*(_QWORD *)v697)
              {

                *(_QWORD *)v697 = 0;
              }
              if (*((_QWORD *)&v696 + 1))

              if ((v598 & 1) == 0)
                re::StringID::destroyString((re::StringID *)v674);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v693);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v666);
              v581 = (re::AssetHandle *)v662;
LABEL_912:
              re::AssetHandle::~AssetHandle(v581);
LABEL_913:
              re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v659);
              re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v660);
              return;
            }
LABEL_911:
            (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 128) + 48))(v695);
            re::AssetHandle::loadAsync((re::AssetHandle *)v695);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v695);
            (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 128) + 56))(v695);
            re::AssetHandle::loadAsync((re::AssetHandle *)v695);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v695);
            (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 128) + 64))(v695);
            re::AssetHandle::loadAsync((re::AssetHandle *)v695);
            v581 = (re::AssetHandle *)v695;
            goto LABEL_912;
          }
          re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v676);
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v695);
      goto LABEL_911;
    }
  }
  v611 = *re::shadowLogObjects(v21);
  if (os_log_type_enabled(v611, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v695 = 0;
    _os_log_impl(&dword_224FE9000, v611, OS_LOG_TYPE_DEFAULT, "MeshShadowSystem: Skipping update as material asset hasn't finished loading.", v695, 2u);
  }
}

uint64_t re::ecs2::MeshShadowSystem::willAddSceneToECSService(uint64_t this, re::EventBus **a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  re::ecs2::System *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  re::EventBus *v49;
  re *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  re *v55;
  re *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  re *v61;
  re *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  re *v67;
  re *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  re *v73;
  re *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  re *v79;
  re *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  re *v85;
  re *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  re *v91;
  re *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  re *v97;
  re *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  re *v103;
  re *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  re *v109;
  re *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  re *v115;
  re *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  re *v121;
  re *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  re *v127;
  re *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  re *v133;
  re *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  re *v139;
  re *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  re *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  re::ecs2::Scene *v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160[2];
  _BYTE v161[24];
  uint64_t v162;
  _BYTE *v163;
  _BYTE v164[24];
  uint64_t v165;
  re *v166;
  _BYTE v167[24];
  uint64_t v168;
  re *v169;
  _BYTE v170[24];
  uint64_t v171;
  re *v172;
  _BYTE v173[24];
  uint64_t v174;
  re *v175;
  _BYTE v176[24];
  uint64_t v177;
  re *v178;
  _BYTE v179[24];
  uint64_t v180;
  re *v181;
  _BYTE v182[24];
  uint64_t v183;
  re *v184;
  _BYTE v185[24];
  uint64_t v186;
  re *v187;
  _BYTE v188[24];
  uint64_t v189;
  re *v190;
  _BYTE v191[24];
  uint64_t v192;
  re *v193;
  _BYTE v194[24];
  uint64_t v195;
  re *v196;
  _BYTE v197[24];
  uint64_t v198;
  re *v199;
  _BYTE v200[24];
  uint64_t v201;
  re *v202;
  _BYTE v203[24];
  uint64_t v204;
  re *v205;
  _BYTE v206[24];
  uint64_t v207;
  re *v208;
  _BYTE v209[24];
  uint64_t v210;
  re *v211;
  int v212;
  const char *v213;
  __int16 v214;
  int v215;
  __int16 v216;
  unint64_t v217;
  __int16 v218;
  unint64_t v219;
  uint64_t v220[14];

  v3 = this;
  v220[11] = *MEMORY[0x24BDAC8D0];
  v151 = (re::ecs2::Scene *)a2;
  v4 = *(_QWORD *)(this + 104);
  if (v4 && (*(_BYTE *)(v4 + 424) & 0x10) == 0)
    return this;
  v160[0] = (uint64_t)a2;
  v5 = *(_QWORD *)(this + 576);
  v6 = *(_DWORD *)(this + 584);
  if (v5 >= 0xB)
  {
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)(this + 592);
    else
      v7 = *(_QWORD **)(this + 600);
    v9 = 8 * v5;
    while (!*v7)
    {
      ++v7;
      v9 -= 8;
      if (!v9)
        goto LABEL_19;
    }
    goto LABEL_18;
  }
  if ((v6 & 1) != 0)
  {
    v8 = (uint64_t *)(this + 592);
    if (!v5)
      goto LABEL_19;
  }
  else
  {
    v8 = *(uint64_t **)(this + 600);
    if (!v5)
      goto LABEL_19;
  }
  v10 = 0;
  v11 = 8 * v5;
  do
  {
    v12 = *v8++;
    v10 |= v12;
    v11 -= 8;
  }
  while (v11);
  if (v10)
  {
LABEL_18:
    *(_QWORD *)&v152 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(this + 568, 0);
    v13 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v3 + 448, v152);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::init(v13, v3 + 448, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v3 + 504), v160, (uint64_t *)&v152);
    re::DynamicBitset<unsigned long long,64ul>::clearBit(v3 + 568, v152);
    v14 = v3 + 616;
    v15 = v152;
    goto LABEL_51;
  }
LABEL_19:
  v159 = 0u;
  v152 = 0u;
  *(_QWORD *)&v153 = 0;
  *((_QWORD *)&v153 + 1) = -1;
  v154 = 0u;
  v155 = 0u;
  v156 = 0;
  v157 = 1;
  v158 = 0uLL;
  v16 = *(_QWORD *)(this + 488);
  *(_QWORD *)&v159 = 0;
  v17 = *(_QWORD *)(this + 456);
  DWORD2(v159) = 0;
  if (v16 + 1 > 4 * v17)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,4ul>::setBucketsCapacity((uint64_t *)(this + 448), (v16 + 4) >> 2);
    v17 = *(_QWORD *)(v3 + 456);
  }
  if (v17 <= v16 >> 2)
  {
    v160[1] = 0;
    memset(v220, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v212 = 136315906;
    v213 = "operator[]";
    v214 = 1024;
    v215 = 858;
    v216 = 2048;
    v217 = v16 >> 2;
    v218 = 2048;
    v219 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_143;
  }
  if ((*(_BYTE *)(v3 + 464) & 1) != 0)
    v18 = v3 + 472;
  else
    v18 = *(_QWORD *)(v3 + 480);
  v19 = *(_QWORD *)(v18 + 8 * (v16 >> 2));
  ++*(_QWORD *)(v3 + 488);
  ++*(_DWORD *)(v3 + 496);
  v20 = v19 + 112 * (v16 & 3);
  v21 = v152;
  v22 = v153;
  v23 = v154;
  *(_QWORD *)(v20 + 48) = v155;
  *(_OWORD *)(v20 + 16) = v22;
  *(_OWORD *)(v20 + 32) = v23;
  *(_OWORD *)v20 = v21;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v20 + 56, (uint64_t)&v155 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v152);
  v25 = *(_QWORD *)(v3 + 488);
  if (!v25)
  {
LABEL_143:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v26 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v3 + 448, v25 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::init(v26, v3 + 448, v160[0]);
  v220[0] = *(_QWORD *)(v3 + 488) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v3 + 504), v160, v220);
  v27 = *(_QWORD *)(v3 + 488);
  v28 = *(_QWORD *)(v3 + 608);
  if ((v27 & 0x3F) != 0)
    v29 = (v27 >> 6) + 1;
  else
    v29 = v27 >> 6;
  *(_QWORD *)(v3 + 608) = v27;
  *(_QWORD *)&v152 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v3 + 568), v29, &v152);
  if (v27 && v28 > v27)
  {
    v30 = 63;
    v31 = *(_QWORD *)(v3 + 608) & 0x3FLL;
    if (v31 && v31 != 63)
      v30 = ~(-1 << v31);
    if ((*(_BYTE *)(v3 + 584) & 1) != 0)
      v32 = v3 + 592;
    else
      v32 = *(_QWORD *)(v3 + 600);
    *(_QWORD *)(v32 + 8 * *(_QWORD *)(v3 + 576) - 8) &= v30;
  }
  v33 = *(_QWORD *)(v3 + 488);
  v34 = *(_QWORD *)(v3 + 656);
  if ((v33 & 0x3F) != 0)
    v35 = (v33 >> 6) + 1;
  else
    v35 = v33 >> 6;
  *(_QWORD *)(v3 + 656) = v33;
  *(_QWORD *)&v152 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v3 + 616), v35, &v152);
  if (v33 && v34 > v33)
  {
    v36 = 63;
    v37 = *(_QWORD *)(v3 + 656) & 0x3FLL;
    if (v37 && v37 != 63)
      v36 = ~(-1 << v37);
    if ((*(_BYTE *)(v3 + 632) & 1) != 0)
      v38 = v3 + 640;
    else
      v38 = *(_QWORD *)(v3 + 648);
    *(_QWORD *)(v38 + 8 * *(_QWORD *)(v3 + 624) - 8) &= v36;
  }
  v15 = v220[0];
  v14 = v3 + 616;
LABEL_51:
  v39 = (re::ecs2::System *)re::DynamicBitset<unsigned long long,256ul>::setBit(v14, v15);
  if (*(_BYTE *)(v3 + 680))
  {
    v40 = *(_QWORD *)(v3 + 624);
    v41 = *(_DWORD *)(v3 + 632);
    if (v40 >= 0xB)
    {
      if ((v41 & 1) != 0)
        v42 = (_QWORD *)(v3 + 640);
      else
        v42 = *(_QWORD **)(v3 + 648);
      v44 = 8 * v40;
      while (!*v42)
      {
        ++v42;
        v44 -= 8;
        if (!v44)
          goto LABEL_69;
      }
      goto LABEL_67;
    }
    if ((v41 & 1) != 0)
    {
      v43 = (uint64_t *)(v3 + 640);
      if (!v40)
        goto LABEL_69;
    }
    else
    {
      v43 = *(uint64_t **)(v3 + 648);
      if (!v40)
        goto LABEL_69;
    }
    v45 = 0;
    v46 = 8 * v40;
    do
    {
      v47 = *v43++;
      v45 |= v47;
      v46 -= 8;
    }
    while (v46);
    if (v45)
    {
LABEL_67:
      v39 = *(re::ecs2::System **)(v3 + 664);
      if (!*((_BYTE *)v39 + 86))
        re::ecs2::System::queueToRun(v39, 0.0);
    }
  }
LABEL_69:
  v152 = 0uLL;
  LODWORD(v153) = 1;
  v154 = 0uLL;
  *((_QWORD *)&v153 + 1) = 0;
  LODWORD(v155) = 0;
  v49 = a2[36];
  if (v49)
  {
    v210 = re::globalAllocators((re *)v48)[2];
    v211 = 0;
    v50 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v210 + 32))(v210, 32, 0);
    *(_QWORD *)v50 = &off_24ED6DB98;
    *((_QWORD *)v50 + 1) = v3;
    *((_QWORD *)v50 + 2) = re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentDidAddHandler;
    *((_QWORD *)v50 + 3) = 0;
    v211 = v50;
    v51 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v49, (uint64_t)v209, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v53 = v52;
    v54 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v54 = v51;
    v54[1] = v53;
    v55 = v211;
    if (v211)
    {
      v55 = (re *)(**(uint64_t (***)(re *))v211)(v211);
      if (v211 != (re *)v209)
        v55 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v210 + 40))(v210);
      v211 = 0;
    }
    v207 = re::globalAllocators(v55)[2];
    v208 = 0;
    v56 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v207 + 32))(v207, 32, 0);
    *(_QWORD *)v56 = &off_24ED6DB98;
    *((_QWORD *)v56 + 1) = v3;
    *((_QWORD *)v56 + 2) = re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentDidAddHandler;
    *((_QWORD *)v56 + 3) = 0;
    v208 = v56;
    v57 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v49, (uint64_t)v206, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v59 = v58;
    v60 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v60 = v57;
    v60[1] = v59;
    v61 = v208;
    if (v208)
    {
      v61 = (re *)(**(uint64_t (***)(re *))v208)(v208);
      if (v208 != (re *)v206)
        v61 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v207 + 40))(v207);
      v208 = 0;
    }
    v204 = re::globalAllocators(v61)[2];
    v205 = 0;
    v62 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v204 + 32))(v204, 32, 0);
    *(_QWORD *)v62 = &off_24ED6DBF0;
    *((_QWORD *)v62 + 1) = v3;
    *((_QWORD *)v62 + 2) = re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentWillRemoveHandler;
    *((_QWORD *)v62 + 3) = 0;
    v205 = v62;
    v63 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v203, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v65 = v64;
    v66 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v66 = v63;
    v66[1] = v65;
    v67 = v205;
    if (v205)
    {
      v67 = (re *)(**(uint64_t (***)(re *))v205)(v205);
      if (v205 != (re *)v203)
        v67 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v204 + 40))(v204);
      v205 = 0;
    }
    v201 = re::globalAllocators(v67)[2];
    v202 = 0;
    v68 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v201 + 32))(v201, 32, 0);
    *(_QWORD *)v68 = &off_24ED6DBF0;
    *((_QWORD *)v68 + 1) = v3;
    *((_QWORD *)v68 + 2) = re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentWillRemoveHandler;
    *((_QWORD *)v68 + 3) = 0;
    v202 = v68;
    v69 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v200, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v71 = v70;
    v72 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v72 = v69;
    v72[1] = v71;
    v73 = v202;
    if (v202)
    {
      v73 = (re *)(**(uint64_t (***)(re *))v202)(v202);
      if (v202 != (re *)v200)
        v73 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v201 + 40))(v201);
      v202 = 0;
    }
    v198 = re::globalAllocators(v73)[2];
    v199 = 0;
    v74 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v198 + 32))(v198, 32, 0);
    *(_QWORD *)v74 = &off_24ED6DC48;
    *((_QWORD *)v74 + 1) = v3;
    *((_QWORD *)v74 + 2) = re::ecs2::MeshShadowSystem::componentWillDeactivateHandler;
    *((_QWORD *)v74 + 3) = 0;
    v199 = v74;
    v75 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v197, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v77 = v76;
    v78 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v78 = v75;
    v78[1] = v77;
    v79 = v199;
    if (v199)
    {
      v79 = (re *)(**(uint64_t (***)(re *))v199)(v199);
      if (v199 != (re *)v197)
        v79 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v198 + 40))(v198);
      v199 = 0;
    }
    v195 = re::globalAllocators(v79)[2];
    v196 = 0;
    v80 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v195 + 32))(v195, 32, 0);
    *(_QWORD *)v80 = &off_24ED6DC48;
    *((_QWORD *)v80 + 1) = v3;
    *((_QWORD *)v80 + 2) = re::ecs2::MeshShadowSystem::componentWillDeactivateHandler;
    *((_QWORD *)v80 + 3) = 0;
    v196 = v80;
    v81 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v194, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v83 = v82;
    v84 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v84 = v81;
    v84[1] = v83;
    v85 = v196;
    if (v196)
    {
      v85 = (re *)(**(uint64_t (***)(re *))v196)(v196);
      if (v196 != (re *)v194)
        v85 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v195 + 40))(v195);
      v196 = 0;
    }
    v192 = re::globalAllocators(v85)[2];
    v193 = 0;
    v86 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v192 + 32))(v192, 32, 0);
    *(_QWORD *)v86 = &off_24ED6DC48;
    *((_QWORD *)v86 + 1) = v3;
    *((_QWORD *)v86 + 2) = re::ecs2::MeshShadowSystem::componentWillDeactivateHandler;
    *((_QWORD *)v86 + 3) = 0;
    v193 = v86;
    v87 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v191, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v89 = v88;
    v90 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v90 = v87;
    v90[1] = v89;
    v91 = v193;
    if (v193)
    {
      v91 = (re *)(**(uint64_t (***)(re *))v193)(v193);
      if (v193 != (re *)v191)
        v91 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v192 + 40))(v192);
      v193 = 0;
    }
    v189 = re::globalAllocators(v91)[2];
    v190 = 0;
    v92 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v189 + 32))(v189, 32, 0);
    *(_QWORD *)v92 = &off_24ED6DC48;
    *((_QWORD *)v92 + 1) = v3;
    *((_QWORD *)v92 + 2) = re::ecs2::MeshShadowSystem::componentWillDeactivateHandler;
    *((_QWORD *)v92 + 3) = 0;
    v190 = v92;
    v93 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v188, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v95 = v94;
    v96 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v96 = v93;
    v96[1] = v95;
    v97 = v190;
    if (v190)
    {
      v97 = (re *)(**(uint64_t (***)(re *))v190)(v190);
      if (v190 != (re *)v188)
        v97 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v189 + 40))(v189);
      v190 = 0;
    }
    v186 = re::globalAllocators(v97)[2];
    v187 = 0;
    v98 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v186 + 32))(v186, 32, 0);
    *(_QWORD *)v98 = &off_24ED6DC48;
    *((_QWORD *)v98 + 1) = v3;
    *((_QWORD *)v98 + 2) = re::ecs2::MeshShadowSystem::componentWillDeactivateHandler;
    *((_QWORD *)v98 + 3) = 0;
    v187 = v98;
    v99 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v49, (uint64_t)v185, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v101 = v100;
    v102 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v102 = v99;
    v102[1] = v101;
    v103 = v187;
    if (v187)
    {
      v103 = (re *)(**(uint64_t (***)(re *))v187)(v187);
      if (v187 != (re *)v185)
        v103 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v186 + 40))(v186);
      v187 = 0;
    }
    v183 = re::globalAllocators(v103)[2];
    v184 = 0;
    v104 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v183 + 32))(v183, 32, 0);
    *(_QWORD *)v104 = &off_24ED6DBF0;
    *((_QWORD *)v104 + 1) = v3;
    *((_QWORD *)v104 + 2) = re::ecs2::MeshShadowSystem::componentWillRemoveHandler;
    *((_QWORD *)v104 + 3) = 0;
    v184 = v104;
    v105 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v182, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v107 = v106;
    v108 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v108 = v105;
    v108[1] = v107;
    v109 = v184;
    if (v184)
    {
      v109 = (re *)(**(uint64_t (***)(re *))v184)(v184);
      if (v184 != (re *)v182)
        v109 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v183 + 40))(v183);
      v184 = 0;
    }
    v180 = re::globalAllocators(v109)[2];
    v181 = 0;
    v110 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v180 + 32))(v180, 32, 0);
    *(_QWORD *)v110 = &off_24ED6DBF0;
    *((_QWORD *)v110 + 1) = v3;
    *((_QWORD *)v110 + 2) = re::ecs2::MeshShadowSystem::componentWillRemoveHandler;
    *((_QWORD *)v110 + 3) = 0;
    v181 = v110;
    v111 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v179, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v113 = v112;
    v114 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v114 = v111;
    v114[1] = v113;
    v115 = v181;
    if (v181)
    {
      v115 = (re *)(**(uint64_t (***)(re *))v181)(v181);
      if (v181 != (re *)v179)
        v115 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v180 + 40))(v180);
      v181 = 0;
    }
    v177 = re::globalAllocators(v115)[2];
    v116 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v177 + 32))(v177, 32, 0);
    *(_QWORD *)v116 = &off_24ED6DBF0;
    *((_QWORD *)v116 + 1) = v3;
    *((_QWORD *)v116 + 2) = re::ecs2::MeshShadowSystem::componentWillRemoveHandler;
    *((_QWORD *)v116 + 3) = 0;
    v178 = v116;
    v117 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v176, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v119 = v118;
    v120 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v120 = v117;
    v120[1] = v119;
    v121 = v178;
    if (v178)
    {
      v121 = (re *)(**(uint64_t (***)(re *))v178)(v178);
      if (v178 != (re *)v176)
        v121 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v177 + 40))(v177);
      v178 = 0;
    }
    v174 = re::globalAllocators(v121)[2];
    v122 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v174 + 32))(v174, 32, 0);
    *(_QWORD *)v122 = &off_24ED6DBF0;
    *((_QWORD *)v122 + 1) = v3;
    *((_QWORD *)v122 + 2) = re::ecs2::MeshShadowSystem::componentWillRemoveHandler;
    *((_QWORD *)v122 + 3) = 0;
    v175 = v122;
    v123 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v173, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingRenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v125 = v124;
    v126 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v126 = v123;
    v126[1] = v125;
    v127 = v175;
    if (v175)
    {
      v127 = (re *)(**(uint64_t (***)(re *))v175)(v175);
      if (v175 != (re *)v173)
        v127 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 40))(v174);
      v175 = 0;
    }
    v171 = re::globalAllocators(v127)[2];
    v128 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v171 + 32))(v171, 32, 0);
    *(_QWORD *)v128 = &off_24ED6DBF0;
    *((_QWORD *)v128 + 1) = v3;
    *((_QWORD *)v128 + 2) = re::ecs2::MeshShadowSystem::componentWillRemoveHandler;
    *((_QWORD *)v128 + 3) = 0;
    v172 = v128;
    v129 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v170, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v131 = v130;
    v132 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v132 = v129;
    v132[1] = v131;
    v133 = v172;
    if (v172)
    {
      v133 = (re *)(**(uint64_t (***)(re *))v172)(v172);
      if (v172 != (re *)v170)
        v133 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v171 + 40))(v171);
      v172 = 0;
    }
    v168 = re::globalAllocators(v133)[2];
    v134 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v168 + 32))(v168, 32, 0);
    *(_QWORD *)v134 = &off_24ED6DCA0;
    *((_QWORD *)v134 + 1) = v3;
    *((_QWORD *)v134 + 2) = re::ecs2::MeshShadowSystem::entityWillRemoveHandler;
    *((_QWORD *)v134 + 3) = 0;
    v169 = v134;
    v135 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v49, (uint64_t)v167, 0, 0);
    v137 = v136;
    v138 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v138 = v135;
    v138[1] = v137;
    v139 = v169;
    if (v169)
    {
      v139 = (re *)(**(uint64_t (***)(re *))v169)(v169);
      if (v169 != (re *)v167)
        v139 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v168 + 40))(v168);
      v169 = 0;
    }
    v165 = re::globalAllocators(v139)[2];
    v140 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v165 + 32))(v165, 32, 0);
    *(_QWORD *)v140 = &off_24ED6DCF8;
    *((_QWORD *)v140 + 1) = v3;
    *((_QWORD *)v140 + 2) = re::ecs2::MeshShadowSystem::entityDidReparentHandler;
    *((_QWORD *)v140 + 3) = 0;
    v166 = v140;
    v141 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v49, (uint64_t)v164, 0, 0);
    v143 = v142;
    v144 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v144 = v141;
    v144[1] = v143;
    v145 = v166;
    if (v166)
    {
      v145 = (re *)(**(uint64_t (***)(re *))v166)(v166);
      if (v166 != (re *)v164)
        v145 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v165 + 40))(v165);
      v166 = 0;
    }
    v162 = re::globalAllocators(v145)[2];
    v146 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v162 + 32))(v162, 32, 0);
    *v146 = &off_24ED6DD50;
    v146[1] = v3;
    v146[2] = re::ecs2::MeshShadowSystem::entityBillboardTransformChangedHandler;
    v146[3] = 0;
    v163 = v146;
    v147 = re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(v49, (uint64_t)v161, 0, 0);
    v149 = v148;
    v150 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v152);
    *v150 = v147;
    v150[1] = v149;
    if (v163)
    {
      (**(void (***)(_BYTE *))v163)(v163);
      if (v163 != v161)
        (*(void (**)(uint64_t))(*(_QWORD *)v162 + 40))(v162);
      v163 = 0;
    }
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(v3 + 688, (uint64_t *)&v151, (uint64_t)&v152);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v152);
  this = v152;
  if ((_QWORD)v152)
  {
    if ((v153 & 1) == 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v152 + 40))();
  }
  return this;
}

uint64_t re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentDidAddHandler(uint64_t a1, uint64_t a2)
{
  if (!*(_QWORD *)(a2 + 224))
    re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::projectiveShadowReceiverOrGroundingShadowComponentWillRemoveHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  const __int16 *v5;
  int16x8_t *v6;
  int16x8_t v7;
  int v8;
  uint16x8_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  const __int16 *v12;
  int16x8_t *v13;
  int16x8_t v14;
  uint16x8_t v15;

  v3 = *(void **)(a3 + 8);
  if (v3 == re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
  {
    v11 = *(unsigned __int16 *)(a2 + 82);
    if (*(_WORD *)(a2 + 82))
    {
      v12 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 16);
      v13 = *(int16x8_t **)(a2 + 88);
      v14 = vld1q_dup_s16(v12);
      v8 = 1;
      while (1)
      {
        v15 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v14, *v13), (int8x16_t)xmmword_2260F1E80);
        v15.i16[0] = vmaxvq_u16(v15);
        v10 = v15.i16[0];
        if (v15.i32[0])
          break;
        v8 -= 8;
        ++v13;
        if (!--v11)
          goto LABEL_14;
      }
LABEL_13:
      if (v10 - v8 < *(unsigned __int16 *)(a2 + 80))
        return 0;
    }
  }
  else
  {
    if (v3 != re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
      return 0;
    v4 = *(unsigned __int16 *)(a2 + 82);
    if (*(_WORD *)(a2 + 82))
    {
      v5 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                           + 16);
      v6 = *(int16x8_t **)(a2 + 88);
      v7 = vld1q_dup_s16(v5);
      v8 = 1;
      do
      {
        v9 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v6), (int8x16_t)xmmword_2260F1E80);
        v9.i16[0] = vmaxvq_u16(v9);
        v10 = v9.i16[0];
        if (v9.i32[0])
          goto LABEL_13;
        v8 -= 8;
        ++v6;
      }
      while (--v4);
    }
  }
LABEL_14:
  if (*(_QWORD *)(a2 + 224))
    re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::componentWillDeactivateHandler(uint64_t a1, re::ecs2::Entity *a2, uint64_t a3)
{
  re::ecs2::MeshShadowSystemStateImpl::willDeactivateComponent(a1 + 232, a2, *(void **)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::componentWillRemoveHandler(uint64_t a1, re::ecs2::Entity *a2, uint64_t a3)
{
  re::ecs2::MeshShadowSystemStateImpl::willDeactivateComponent(a1 + 232, a2, *(void **)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::entityWillRemoveHandler(uint64_t a1, re::ecs2::Entity *a2)
{
  re::ecs2::MeshShadowSystemStateImpl::willDeactivateEntity((re::ecs2::MeshShadowSystemStateImpl *)(a1 + 232), a2);
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::entityDidReparentHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _BYTE v21[120];
  uint64_t v22;
  uint64_t v23;

  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v4 = a2;
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
    v6 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)(v5 + 16) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v6)
    {
      if (*(_QWORD *)(v6 + 24))
      {
        re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v21);
        v15[0] = 0;
        v15[1] = 0;
        v16 = 1;
        v18 = 0;
        v19 = 0;
        v17 = 0;
        v20 = 0;
        re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v15, (uint64_t)v21, 1uLL);
        *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v15) = a2;
        for (i = v19; v19; i = v19)
        {
          v8 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v15, i - 1);
          re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v15, --v19);
          ++v20;
          v9 = *(_QWORD *)(v8 + 328);
          if (v9)
          {
            v10 = *(uint64_t **)(v8 + 344);
            v11 = 8 * v9;
            do
            {
              v12 = *v10++;
              *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v15) = v12;
              v11 -= 8;
            }
            while (v11);
          }
          v23 = v8;
          if ((*(_BYTE *)(v8 + 288) & 1) != 0)
          {
            v13 = *(_QWORD *)(a1 + 440) + 928;
            v22 = *(_QWORD *)(v8 + 296);
            if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(v13, &v22)|| re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneUnderstandingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
            {
              re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(*(_QWORD *)(a1 + 440) + 1072, &v23);
            }
          }
        }
        re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v15);
        if (v15[0] && (v16 & 1) == 0)
          (*(void (**)(void))(*(_QWORD *)v15[0] + 40))();
        re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v21);
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::entityBillboardTransformChangedHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;

  v6 = *(_QWORD *)(a2 + 296);
  if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey(a1 + 832, &v6))
  {
    v4 = *(_QWORD *)(a2 + 224);
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 64);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(a1 + 1168, &v6);
    }
  }
  return 0;
}

uint64_t re::ecs2::MeshShadowSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Entity ***a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  re::ecs2::ComponentBucketsBase *v16;
  uint64_t v17;
  re::ecs2::Entity **v18;
  re::ecs2::Entity **v19;
  uint64_t v20;
  uint64_t v21;
  re::ecs2::Entity *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t j;
  uint64_t v30;
  re::ecs2::Scene *v31;
  re::ecs2::Scene *v32;

  v3 = this;
  v31 = (re::ecs2::Scene *)a2;
  v4 = *(_QWORD *)(this + 104);
  if (!v4 || (*(_BYTE *)(v4 + 424) & 0x10) != 0)
  {
    v32 = (re::ecs2::Scene *)a2;
    v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(this + 504), &v32);
    if (v5 != -1)
    {
      v6 = *(_QWORD *)(v3 + 512) + 16 * v5;
      re::DynamicBitset<unsigned long long,256ul>::setBit(v3 + 568, *(_QWORD *)(v6 + 8));
      re::DynamicBitset<unsigned long long,64ul>::clearBit(v3 + 616, *(_QWORD *)(v6 + 8));
      v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v3 + 448, *(_QWORD *)(v6 + 8));
      if (*v7)
      {
        v8 = v7;
        *v7 = 0;
        v9 = v7 + 1;
        v10 = *(_QWORD *)(v7[1] + 288);
        if (v10)
        {
          v11 = v7[12];
          if (v11)
          {
            for (i = 0; i != v11; ++i)
            {
              v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
              re::EventBus::unsubscribe(v10, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
            }
          }
        }
        re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
        v14 = 0;
        v15 = v8 + 3;
        do
        {
          v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
          if (*(_QWORD *)v16)
            re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
          v15[v14++] = -1;
        }
        while (v14 != 4);
        *v9 = 0;
        v9[1] = 0;
      }
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)(v3 + 504), &v32);
    }
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 128) + 40))(*(_QWORD *)(v3 + 128));
    v18 = a2[16];
    if (v18)
    {
      v19 = a2[18];
      v20 = v17 + 56;
      v21 = 8 * (_QWORD)v18;
      do
      {
        v22 = *v19;
        v23 = *((_QWORD *)*v19 + 28);
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 64);
          if (v24)
          {
            v32 = (re::ecs2::Scene *)v24;
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v20, (uint64_t *)&v32);
          }
        }
        re::ecs2::MeshShadowSystemStateImpl::willDeactivateEntity((re::ecs2::MeshShadowSystemStateImpl *)(v3 + 232), v22);
        ++v19;
        v21 -= 8;
      }
      while (v21);
    }
    v25 = v3 + 688;
    v26 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(v25, (uint64_t *)&v31);
    if (v26)
    {
      v27 = v26;
      v28 = *(_QWORD *)(v26 + 40);
      if (v28)
      {
        for (j = 0; j != v28; ++j)
        {
          v30 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v27, j);
          if (*((_QWORD *)v31 + 36))
            re::EventBus::unsubscribe(*((_QWORD *)v31 + 36), *(_QWORD *)v30, *(_QWORD *)(v30 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v25, (uint64_t *)&v31);
  }
  return this;
}

uint64_t re::ecs2::MeshShadowSystemStateImpl::dependsOnComponents(re::ecs2::MeshShadowSystemStateImpl *this)
{
  return *((_QWORD *)this + 5);
}

void re::ecs2::MeshShadowSystem::~MeshShadowSystem(re::ecs2::MeshShadowSystem *this)
{
  re::ecs2::MeshShadowSystem::~MeshShadowSystem(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 333);
  if (v2)
  {
    if ((*((_BYTE *)this + 2672) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 335));
    *(_OWORD *)((char *)this + 2664) = 0u;
    *(_OWORD *)((char *)this + 2680) = 0u;
  }
  if (*((_BYTE *)this + 2400))
    re::MeshShadowPerFrameUpdateData::~MeshShadowPerFrameUpdateData((re::ecs2::MeshShadowSystem *)((char *)this + 1760));
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 212);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 206);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 200);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 194);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 188);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 182);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 176);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 170);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 164);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 158);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 152);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 146);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 140);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 134);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 128);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 122);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 116);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 110);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 104);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 98);
  re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 92);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 86);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 448);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 504);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 568);
  *((_QWORD *)this + 76) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 616);
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 84) = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 616);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 568);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 504);
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)this + 448);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 448);
  *((_QWORD *)this + 29) = &off_24ED6DAA0;
  v3 = *((_QWORD *)this + 50);
  if (v3)
  {
    if (*((_QWORD *)this + 54))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 52) = 0;
    *((_QWORD *)this + 50) = 0;
    ++*((_DWORD *)this + 106);
  }
  v4 = *((_QWORD *)this + 45);
  if (v4)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v5 = *((_QWORD *)this + 40);
  if (v5)
  {
    if (*((_QWORD *)this + 44))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 40) = 0;
    ++*((_DWORD *)this + 86);
  }
  v6 = *((_QWORD *)this + 35);
  if (v6)
  {
    if (*((_QWORD *)this + 39))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 35) = 0;
    ++*((_DWORD *)this + 76);
  }
  v7 = *((_QWORD *)this + 30);
  if (v7)
  {
    if (*((_QWORD *)this + 34))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 30) = 0;
    ++*((_DWORD *)this + 66);
  }
  re::AssetHandle::~AssetHandle((re::ecs2::MeshShadowSystem *)((char *)this + 208));
  re::AssetHandle::~AssetHandle((re::ecs2::MeshShadowSystem *)((char *)this + 184));
  v8 = *((_QWORD *)this + 22);
  if (v8)
  {

    *((_QWORD *)this + 22) = 0;
  }
  v9 = *((_QWORD *)this + 21);
  if (v9)
  {

    *((_QWORD *)this + 21) = 0;
  }
  v10 = *((_QWORD *)this + 20);
  if (v10)
  {

    *((_QWORD *)this + 20) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::MeshShadowSystem::typeInfo(re::ecs2::MeshShadowSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshShadowSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshShadowSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshShadowSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshShadowSystem>, 0);
}

void re::MeshShadowPerFrameUpdateData::~MeshShadowPerFrameUpdateData(re::MeshShadowPerFrameUpdateData *this)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2.n128_f64[0] = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 46);
  v3 = *((_QWORD *)this + 41);
  if (v3)
  {
    if (*((_QWORD *)this + 45))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2.n128_f64[0]);
    *((_QWORD *)this + 45) = 0;
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 43) = 0;
    *((_QWORD *)this + 41) = 0;
    ++*((_DWORD *)this + 88);
  }
  v4 = *((_QWORD *)this + 36);
  if (v4)
  {
    if (*((_QWORD *)this + 40))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v4 + 40))(v4, v2);
    *((_QWORD *)this + 40) = 0;
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 36) = 0;
    ++*((_DWORD *)this + 78);
  }
  re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit((uint64_t)this + 248);
  re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit((uint64_t)this + 208);
  v5 = *((_QWORD *)this + 21);
  if (v5)
  {
    if (*((_QWORD *)this + 25))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 21) = 0;
    ++*((_DWORD *)this + 48);
  }
  re::DynamicArray<re::MeshShadowCluster>::deinit((uint64_t)this + 128);
  v6 = *((_QWORD *)this + 11);
  if (v6)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 11) = 0;
    ++*((_DWORD *)this + 28);
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 6) = 0;
    ++*((_DWORD *)this + 18);
  }
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

uint64_t re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 56 * v4;
        v6 = (uint64_t *)(v3 + 8);
        do
        {
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v6);
          v6 += 7;
          v5 -= 56;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

__n128 std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshShadowCluster *,re::MeshShadowCluster *,re::MeshShadowCluster *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (v5 != a3)
      {
        v6 = *(_QWORD *)v5;
        if (*(_QWORD *)a3)
        {
          if (v6)
            re::DynamicArray<re::RigNodeChannel>::copy((void **)a3, v5);
          else
            *(_QWORD *)(a3 + 16) = 0;
          ++*(_DWORD *)(a3 + 24);
        }
        else if (v6)
        {
          v7 = *(_QWORD *)(v5 + 16);
          *(_QWORD *)a3 = v6;
          re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a3, v7);
          ++*(_DWORD *)(a3 + 24);
          re::DynamicArray<re::RigNodeChannel>::copy((void **)a3, v5);
        }
      }
      v8 = *(_OWORD *)(v5 + 48);
      v9 = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(a3 + 80) = v9;
      *(_OWORD *)(a3 + 48) = v8;
      v10 = *(_OWORD *)(v5 + 96);
      v11 = *(_OWORD *)(v5 + 112);
      v12 = *(_OWORD *)(v5 + 144);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(a3 + 144) = v12;
      *(_OWORD *)(a3 + 96) = v10;
      *(_OWORD *)(a3 + 112) = v11;
      result = *(__n128 *)(v5 + 160);
      v14 = *(_OWORD *)(v5 + 176);
      v15 = *(_OWORD *)(v5 + 192);
      *(_QWORD *)(a3 + 208) = *(_QWORD *)(v5 + 208);
      *(_OWORD *)(a3 + 176) = v14;
      *(_OWORD *)(a3 + 192) = v15;
      *(__n128 *)(a3 + 160) = result;
      v5 += 224;
      a3 += 224;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshShadowCasterInfo>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RigNodeChannel>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

_QWORD *re::DynamicArray<re::MeshShadowPlaneData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  __int128 v13;
  int v14;
  __int128 v15;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshShadowPlaneData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 112 * v9;
        v11 = v7;
        do
        {
          *v11 = *(_QWORD *)v8;
          v12 = *(unsigned __int8 *)(v8 + 16);
          *((_BYTE *)v11 + 16) = v12;
          if (v12)
          {
            v13 = *(_OWORD *)(v8 + 48);
            *((_OWORD *)v11 + 2) = *(_OWORD *)(v8 + 32);
            *((_OWORD *)v11 + 3) = v13;
          }
          v14 = *(unsigned __int8 *)(v8 + 64);
          *((_BYTE *)v11 + 64) = v14;
          if (v14)
          {
            v15 = *(_OWORD *)(v8 + 96);
            *((_OWORD *)v11 + 5) = *(_OWORD *)(v8 + 80);
            *((_OWORD *)v11 + 6) = v15;
          }
          v8 += 112;
          v11 += 14;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_OWORD *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::MeshShadowPlaneData *,re::MeshShadowPlaneData *,re::MeshShadowPlaneData *>(_OWORD *result, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  __int128 v10;
  int v11;
  BOOL v12;
  BOOL v13;
  __int128 v14;

  if (result != a2)
  {
    v3 = a3 + 64;
    v4 = result + 5;
    do
    {
      v5 = v4 - 5;
      *(_QWORD *)(v3 - 64) = *((_QWORD *)v4 - 10);
      v6 = *((unsigned __int8 *)v4 - 64);
      if (*(_BYTE *)(v3 - 48))
        v7 = 0;
      else
        v7 = v6 == 0;
      if (!v7)
      {
        if (*(_BYTE *)(v3 - 48))
          v8 = v6 == 0;
        else
          v8 = 0;
        if (v8)
        {
          *(_BYTE *)(v3 - 48) = 0;
        }
        else
        {
          if (*(_BYTE *)(v3 - 48))
            v9 = 1;
          else
            v9 = v6 == 0;
          if (!v9)
            *(_BYTE *)(v3 - 48) = 1;
          v10 = *(v4 - 2);
          *(_OWORD *)(v3 - 32) = *(v4 - 3);
          *(_OWORD *)(v3 - 16) = v10;
        }
      }
      v11 = *((unsigned __int8 *)v4 - 16);
      if (*(_BYTE *)v3)
        v12 = 0;
      else
        v12 = v11 == 0;
      if (!v12)
      {
        if (*(_BYTE *)v3)
          v13 = v11 == 0;
        else
          v13 = 0;
        if (v13)
        {
          *(_BYTE *)v3 = 0;
        }
        else
        {
          if (!*(_BYTE *)v3)
          {
            if (*((_BYTE *)v4 - 16))
              *(_BYTE *)v3 = 1;
          }
          v14 = v4[1];
          *(_OWORD *)(v3 + 16) = *v4;
          *(_OWORD *)(v3 + 32) = v14;
        }
      }
      v3 += 112;
      v4 += 7;
    }
    while (v5 + 7 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    v6 = a2[2];
    if (v6 >= *(_QWORD *)(a1 + 16))
    {
      re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity((_QWORD *)a1, a2[2]);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,0>(a2[4], (uint64_t *)(a2[4] + 56 * *(_QWORD *)(a1 + 16)), *(_QWORD **)(a1 + 32));
      v10 = *(_QWORD *)(a1 + 16);
      if (v10 != v6)
      {
        v11 = 56 * v10;
        v12 = 56 * v6 - v11;
        v11 += 8;
        v13 = a2[4] + v11;
        v14 = *(_QWORD *)(a1 + 32) + v11;
        do
        {
          *(_QWORD *)(v14 - 8) = *(_QWORD *)(v13 - 8);
          v15 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase(v14, v13);
          v13 += 56;
          v14 = v15 + 56;
          v12 -= 56;
        }
        while (v12);
      }
    }
    else
    {
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,0>(a2[4], (uint64_t *)(a2[4] + 56 * v6), *(_QWORD **)(a1 + 32));
      v7 = *(_QWORD *)(a1 + 16);
      if (v6 != v7)
      {
        v8 = -56 * v6 + 56 * v7;
        v9 = (uint64_t *)(56 * v6 + *(_QWORD *)(a1 + 32) + 8);
        do
        {
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v9);
          v9 += 7;
          v8 -= 56;
        }
        while (v8);
      }
    }
    *(_QWORD *)(a1 + 16) = v6;
  }
  return a1;
}

_QWORD *re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshCasterReceiverWorldUpdateInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[7 * v9];
        v11 = v7;
        do
        {
          v12 = v8 + 1;
          v13 = *v8;
          v8 += 7;
          *v11 = v13;
          *(_OWORD *)(v11 + 3) = 0u;
          *((_DWORD *)v11 + 10) = 0;
          *(_OWORD *)(v11 + 1) = 0u;
          *(_QWORD *)((char *)v11 + 44) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11 + 1, v12);
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v12);
          v11 += 7;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,re::MeshCasterReceiverWorldUpdateInfo *,0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((uint64_t *)result != a2)
  {
    v5 = (uint64_t *)result;
    do
    {
      v6 = (uint64_t)(v5 + 1);
      v7 = *v5;
      v5 += 7;
      v8 = (uint64_t)(a3 + 1);
      *a3 = v7;
      a3 += 7;
      result = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(v8, v6);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, v4, v5);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, v4, v5);
    re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (_QWORD *)(v8 + 16), v8 + 24);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 72;
    }
  }
}

void re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v6 + 24));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 72;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 16) = *a4;
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase(*(_QWORD *)(a1 + 16) + 72 * v10 + 24, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6DB98;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6DB98;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6DBF0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6DBF0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6DC48;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6DC48;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6DCA0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6DCA0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6DCF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6DCF8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6DD50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6DD50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::MeshShadowSystem,REEventHandlerResult (re::ecs2::MeshShadowSystem::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::size()
{
  return 32;
}

double re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 96;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::MeshShadowSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshShadowSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

__n128 re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __n128 *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __n128 result;
  _BYTE v30[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::SeekableInputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::init((uint64_t)v30, v13, v12);
          v15 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v30[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 96;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::internal::shadows::ShadowClusterEntityData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 96 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 96 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + 96 * v9;
  v26 = a5->n128_u64[0];
  *(_QWORD *)(v25 + 64) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 24) = v26;
  *(_QWORD *)(v25 + 32) = 0;
  *(_DWORD *)(v25 + 56) = 0;
  *(_QWORD *)(v25 + 32) = a5->n128_u64[1];
  a5->n128_u64[1] = 0;
  *(_QWORD *)(v25 + 40) = a5[1].n128_u64[0];
  a5[1].n128_u64[0] = 0;
  v27 = *(_QWORD *)(v25 + 48);
  *(_QWORD *)(v25 + 48) = a5[1].n128_u64[1];
  a5[1].n128_u64[1] = v27;
  v28 = *(_QWORD *)(v25 + 64);
  *(_QWORD *)(v25 + 64) = a5[2].n128_u64[1];
  a5[2].n128_u64[1] = v28;
  ++a5[2].n128_u32[0];
  ++*(_DWORD *)(v25 + 56);
  result = a5[3];
  *(_BYTE *)(v25 + 88) = a5[4].n128_u8[0];
  *(__n128 *)(v25 + 72) = result;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
    }
  }
  return a1;
}

uint64_t re::MeshShadowPerFrameUpdateData::MeshShadowPerFrameUpdateData(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v4 = *a2;
  *(_BYTE *)a1 = v4;
  if (v4)
    *(_BYTE *)(a1 + 1) = a2[1];
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v5 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  ++*((_DWORD *)a2 + 8);
  ++*(_DWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  v8 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = v8;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v9;
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v10;
  ++*((_DWORD *)a2 + 18);
  ++*(_DWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  v11 = *((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = v11;
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  v12 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v12;
  v13 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v13;
  ++*((_DWORD *)a2 + 28);
  ++*(_DWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  v14 = *((_QWORD *)a2 + 17);
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  *(_QWORD *)(a1 + 136) = v14;
  *((_QWORD *)a2 + 16) = 0;
  *((_QWORD *)a2 + 17) = 0;
  v15 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v15;
  v16 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *((_QWORD *)a2 + 20) = v16;
  ++*((_DWORD *)a2 + 38);
  ++*(_DWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  v17 = *((_QWORD *)a2 + 22);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *(_QWORD *)(a1 + 176) = v17;
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  v18 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 23) = v18;
  v19 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  *((_QWORD *)a2 + 25) = v19;
  ++*((_DWORD *)a2 + 48);
  ++*(_DWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  v20 = *((_QWORD *)a2 + 27);
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *(_QWORD *)(a1 + 216) = v20;
  *((_QWORD *)a2 + 26) = 0;
  *((_QWORD *)a2 + 27) = 0;
  v21 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *((_QWORD *)a2 + 28) = v21;
  v22 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = v22;
  ++*((_DWORD *)a2 + 58);
  ++*(_DWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  v23 = *((_QWORD *)a2 + 32);
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
  *(_QWORD *)(a1 + 256) = v23;
  *((_QWORD *)a2 + 31) = 0;
  *((_QWORD *)a2 + 32) = 0;
  v24 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = v24;
  v25 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = *((_QWORD *)a2 + 35);
  *((_QWORD *)a2 + 35) = v25;
  ++*((_DWORD *)a2 + 68);
  ++*(_DWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  v26 = *((_QWORD *)a2 + 37);
  *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
  *(_QWORD *)(a1 + 296) = v26;
  *((_QWORD *)a2 + 36) = 0;
  *((_QWORD *)a2 + 37) = 0;
  v27 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
  *((_QWORD *)a2 + 38) = v27;
  v28 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = *((_QWORD *)a2 + 40);
  *((_QWORD *)a2 + 40) = v28;
  ++*((_DWORD *)a2 + 78);
  ++*(_DWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  v29 = *((_QWORD *)a2 + 42);
  *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
  *(_QWORD *)(a1 + 336) = v29;
  *((_QWORD *)a2 + 41) = 0;
  *((_QWORD *)a2 + 42) = 0;
  v30 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a2 + 43);
  *((_QWORD *)a2 + 43) = v30;
  v31 = *(_QWORD *)(a1 + 360);
  *(_QWORD *)(a1 + 360) = *((_QWORD *)a2 + 45);
  *((_QWORD *)a2 + 45) = v31;
  ++*((_DWORD *)a2 + 88);
  ++*(_DWORD *)(a1 + 352);
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 404) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 368), (uint64_t *)a2 + 46);
  v32 = *((_OWORD *)a2 + 27);
  *(_OWORD *)(a1 + 416) = *((_OWORD *)a2 + 26);
  *(_OWORD *)(a1 + 432) = v32;
  v33 = *((_OWORD *)a2 + 28);
  v34 = *((_OWORD *)a2 + 29);
  v35 = *((_OWORD *)a2 + 31);
  *(_OWORD *)(a1 + 480) = *((_OWORD *)a2 + 30);
  *(_OWORD *)(a1 + 496) = v35;
  *(_OWORD *)(a1 + 448) = v33;
  *(_OWORD *)(a1 + 464) = v34;
  v36 = *((_OWORD *)a2 + 32);
  v37 = *((_OWORD *)a2 + 33);
  v38 = *((_OWORD *)a2 + 35);
  *(_OWORD *)(a1 + 544) = *((_OWORD *)a2 + 34);
  *(_OWORD *)(a1 + 560) = v38;
  *(_OWORD *)(a1 + 512) = v36;
  *(_OWORD *)(a1 + 528) = v37;
  v39 = *((_OWORD *)a2 + 36);
  v40 = *((_OWORD *)a2 + 37);
  v41 = *((_OWORD *)a2 + 39);
  *(_OWORD *)(a1 + 608) = *((_OWORD *)a2 + 38);
  *(_OWORD *)(a1 + 624) = v41;
  *(_OWORD *)(a1 + 576) = v39;
  *(_OWORD *)(a1 + 592) = v40;
  return a1;
}

_QWORD *re::BucketArray<re::MeshShadowReceiverWorld,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::MeshShadowReceiverWorld,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::MeshShadowReceiverWorld,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 4, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::MeshShadowReceiverWorld,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_2257E389C()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED6DDE8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED6DE40;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED6DE98;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED6DEF0;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED6DDE8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED6DE40;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED6DE98;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED6DEF0;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 224);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 224);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 224);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  re::ecs2::Component *v15;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_QWORD *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v23);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = *(re::ecs2::Component **)(a2 + 224);
  if (v15)
  {
    for (i = 24; i != 56; i += 8)
    {
      v17 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v15);
      if (v17 != -1 && (v18 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v17, v18);
        return 0;
      }
    }
    v20 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v15);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v20, v21);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6DDE8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6DDE8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6DE40;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6DE40;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6DE98;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6DE98;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED6DEF0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED6DEF0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ShadowClusterComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ShadowClusterComponent>::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ShadowClusterComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::ShadowClusterComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::PhysicsDebugSystem::tryLoadMaterialAsset(re::RenderManager **this, AssetService *a2, AssetService *a3)
{
  tryLoadMaterialAsset((re::AssetHandle *)(this + 15), (re::AssetHandle *)(this + 21), "engine:primitiveShapeFlat.rematerialdefinition", this[14], a2);
  tryLoadMaterialAsset((re::AssetHandle *)(this + 18), (re::AssetHandle *)(this + 24), "engine:primitiveShapeFlatTransparent.rematerialdefinition", this[14], a2);
}

void tryLoadMaterialAsset(re::AssetHandle *a1, re::AssetHandle *this, const char *a3, re::RenderManager *a4, AssetService *a5)
{
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[24];
  __int128 v20;
  uint64_t v21;

  v9 = *((_QWORD *)a1 + 1);
  if (!v9 || (v10 = atomic_load((unsigned int *)(v9 + 704)), v10 != 2))
  {
    v11 = *((_QWORD *)this + 1);
    if (v11)
      goto LABEL_5;
    (*((void (**)(__int128 *__return_ptr, AssetService *, const char *))a5->var0 + 1))(&v20, a5, a3);
    v12 = *(_OWORD *)this;
    *(_OWORD *)this = v20;
    v20 = v12;
    v13 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v21;
    v21 = v13;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
    v11 = *((_QWORD *)this + 1);
    if (v11)
    {
LABEL_5:
      if (!atomic_load((unsigned int *)(v11 + 704)))
        re::AssetHandle::loadAsync(this);
      v15 = *((_QWORD *)this + 1);
      if (v15)
      {
        v16 = atomic_load((unsigned int *)(v15 + 704));
        if (v16 == 2)
        {
          re::AssetHandle::AssetHandle((re::AssetHandle *)v19, this);
          re::MaterialAsset::makeMaterialMemoryAsset((uint64_t)a5, a4, (re::AssetHandle *)v19, 0, 0);
          v17 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v20;
          v20 = v17;
          v18 = *((_QWORD *)a1 + 2);
          *((_QWORD *)a1 + 2) = v21;
          v21 = v18;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v20);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v19);
        }
      }
    }
  }
}

void re::ecs2::PhysicsDebugSystem::willAddSystemToECSService(re::ecs2::PhysicsDebugSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  AssetService *v6;
  AssetService *v7;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 13) = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v4 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  *((_QWORD *)this + 14) = v4;
  if (v4)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    v6 = (AssetService *)re::ServiceLocator::service<re::AssetService>(v5);
    re::ecs2::PhysicsDebugSystem::tryLoadMaterialAsset((re::RenderManager **)this, v6, v7);
  }
}

uint64_t re::ecs2::PhysicsDebugSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  *(_QWORD *)(this + 112) = 0;
  return this;
}

void re::ecs2::PhysicsDebugSystem::update(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v19;
  AssetService *v20;
  AssetService *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  re::ecs2::EntityComponentCollection *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  float *v44;
  __n128 v45;
  __int128 v46;
  unint64_t *v47;
  uint64_t v48;
  re::ecs2::TransformComponent **v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t v53;
  int8x16_t v54;
  unsigned __int32 v55;
  int8x16_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  re::AssetHandle *v60;
  unsigned int v61;
  float32x4_t *v62;
  __n128 v63;
  __n128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  double WorldTransformAndStyle;
  uint64_t v75;
  float *v76;
  float v77;
  int32x2_t v78;
  __n128 v79;
  unint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  int8x16_t v95;
  re::ecs2::SceneComponentTable *v96;
  uint64_t v97;
  _QWORD *v98;
  char v99;
  float32x4_t v100;
  float32x4_t v101;
  __int128 v102;
  __int128 v103;
  float32x4_t v104;
  float32x4_t v105;
  __n128 v106;
  __int128 v107;
  __int128 v108;
  __n128 v109;
  int8x16_t v110;
  uint64_t v111;
  unint64_t v112[13];
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  char v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unint64_t v128[132];
  _QWORD v129[10];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  unint64_t v135[132];
  _QWORD v136[10];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  float32x4_t v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  v7 = re::ServiceLocator::serviceOrNull<re::Engine>(v6);
  if ((!v7 || (*(_BYTE *)(v7 + 424) & 0x10) != 0)
    && a2
    && *(_QWORD *)(a1 + 112)
    && *(_QWORD *)(a1 + 104)
    && re::PhysicsDebugRenderer::isUsingPhysicsDebugRenderer(void)::featureEnabled)
  {
    v8 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 8);
    if (a2[28] > v8 && (v9 = *(_QWORD *)(a2[30] + 8 * v8)) != 0 && (v10 = *(_QWORD *)(v9 + 24)) != 0)
    {
      v11 = 0;
      v12 = *(uint64_t **)(v9 + 40);
      v13 = 8 * v10;
      while (1)
      {
        v14 = *v12;
        v15 = *(_QWORD *)(*v12 + 16);
        if (re::StringID::operator==((_QWORD *)(v15 + 272), re::ecs2::Scene::kLocalSceneDataEntityID))
        {
          v16 = *(_QWORD *)(v15 + 200);
          if (!v16)
            break;
          if (!*(_QWORD *)(v16 + 32))
            break;
          v11 = v14;
          if (!RESyncableGetOwnerPeerID())
            break;
        }
        ++v12;
        v13 -= 8;
        if (!v13)
        {
          v14 = v11;
          if (!v11)
            goto LABEL_19;
          break;
        }
      }
      v99 = 0;
      v17 = *(_DWORD *)(v14 + 28) != 0;
    }
    else
    {
      v14 = 0;
LABEL_19:
      v17 = 0;
      v99 = 1;
    }
    if ((v17 | (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 80))(*(_QWORD *)(a1 + 104))) == 1
      && (a3 & 0x100000000) == 0)
    {
      v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
      v20 = (AssetService *)re::ServiceLocator::service<re::AssetService>(v19);
      re::ecs2::PhysicsDebugSystem::tryLoadMaterialAsset((re::RenderManager **)a1, v20, v21);
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 104);
      if (v22)
        v23 = *(_QWORD *)(v22 + 312);
      else
        v23 = 0;
      re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v135, *(_QWORD *)(v23 + 224), *(re::RenderManager **)(v23 + 248));
      re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v128, *(_QWORD *)(v23 + 224), *(re::RenderManager **)(v23 + 248));
      re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v112, *(_QWORD *)(v23 + 224), *(re::RenderManager **)(v23 + 248));
      if (v121)
      {
        v114 = 0;
        ++v115;
        v121 = 0;
      }
      if (v119)
        v119 = 0;
      v118 = 998445679;
      if (v120)
      {
        v112[12] = 0;
        ++v113;
        v120 = 0;
      }
      v97 = v23;
      v98 = a2;
      if (v117)
        v117 = 0;
      v116 = 998445679;
      v96 = (re::ecs2::SceneComponentTable *)(a2 + 25);
      v24 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 25), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!v24 || (v25 = *(_QWORD *)(v24 + 24)) == 0)
      {
LABEL_90:
        v66 = re::ecs2::SceneComponentTable::get(v96, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v66)
        {
          v67 = *(_QWORD *)(v66 + 24);
          if (v67)
          {
            v68 = *(_QWORD *)(v66 + 40);
            v69 = 8 * v67;
            __asm { FMOV            V9.2S, #1.0 }
            do
            {
              v71 = *(_QWORD **)(*(_QWORD *)v68 + 80);
              if (v71)
              {
                v72 = v71[17];
                if (v72)
                {
                  v73 = *(_QWORD *)(*(_QWORD *)v68 + 16);
                  v104.i64[0] = 0x3F8000003F800000;
                  v104.i64[1] = 1065353216;
                  v105.i64[0] = 0;
                  v105.i64[1] = 0x3F80000000000000;
                  v106 = 0uLL;
                  v142.i32[0] = 3;
                  *(_QWORD *)&v143 = 0x3F8000003F800000;
                  *((_QWORD *)&v143 + 1) = 0x3F8000003F800000;
                  *(_QWORD *)&v144 = _D9;
                  WorldTransformAndStyle = getWorldTransformAndStyle(v14, v73, v72, (uint64_t)&v104, (uint64_t)&v142);
                  v75 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v72 + 16) + 24))(*(_QWORD *)(v72 + 16), WorldTransformAndStyle);
                  if (v75)
                  {
                    v76 = (float *)v75;
                    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 24))(v75) == 4)
                    {
                      v77 = (*(float (**)(_QWORD *))(*v71 + 176))(v71);
                      v79.n128_f32[0] = (*(float (**)(_QWORD *))(*v71 + 192))(v71) + (float)(v77 * -2.0);
                      if (v142.i32[0] == 3)
                      {
                        re::PhysicsDebugRenderer::drawCapsuleLines((uint64_t)v112, &v104, (__n128 *)&v142, v77, v79.n128_f32[0]);
                      }
                      else
                      {
                        *(float *)v78.i32 = v77;
                        re::PhysicsDebugRenderer::drawCapsuleShape((uint64_t)v135, &v104, (__n128 *)&v142, v78, v79);
                      }
                    }
                    else
                    {
                      v80 = v135;
                      switch(v142.i32[0])
                      {
                        case 0:
                        case 3:
                          v80 = v112;
                          goto LABEL_103;
                        case 1:
                          goto LABEL_103;
                        case 2:
                          v80 = v128;
LABEL_103:
                          re::PhysicsDebugRenderer::drawTransformedShape((uint64_t)v80, &v104, v76, (__n128 *)&v142);
                          break;
                        default:
                          break;
                      }
                      re::PhysicsDebugRenderer::drawTransformFrame((uint64_t)v135, (uint64_t)&v104, v76[4]);
                    }
                  }
                }
              }
              v68 += 8;
              v69 -= 8;
            }
            while (v69);
          }
        }
        v81 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 104) + 32))(*(_QWORD *)(a1 + 104), v98);
        if (v81)
        {
          v82 = v81;
          re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v104, v81, 0);
          v100 = v104;
          v83 = v82 == v104.i64[0] && v104.u16[4] == 0xFFFFLL;
          if (!v83 || (v104.i32[2] & 0xFFFF0000) != 4294901760)
          {
            __asm { FMOV            V8.2S, #1.0 }
            do
            {
              v86 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v100);
              if (*(_QWORD *)(v86 + 8))
              {
                v87 = v86;
                v142 = 0u;
                v101 = (float32x4_t)xmmword_2260E5D70;
                v109 = 0u;
                re::decomposeScaleRotationTranslation<float>(v86 + 112, (int32x4_t *)&v142, &v101, &v109);
                v104 = v142;
                v105 = v101;
                v106 = v109;
                v88 = *(_QWORD *)(*(_QWORD *)(v87 + 8) + 56);
                v142.i32[0] = 3;
                *(_QWORD *)&v144 = _D8;
                v143 = xmmword_22610BB10;
                re::PhysicsDebugRenderer::drawContacts((uint64_t)v112, &v104, v88, (__n128 *)&v142);
              }
              re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v100);
            }
            while (v100.i64[0] != v82 || v100.u16[4] != 0xFFFF || v100.u16[5] != 0xFFFF);
          }
        }
        if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)v128))
        {
          v91 = *(_QWORD *)(a1 + 152);
          if (v91)
          {
            v92 = atomic_load((unsigned int *)(v91 + 704));
            if (v92 == 2)
              v129[7] = *(_QWORD *)(re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 144)) + 1664);
          }
          re::PrimitiveRenderer::submitContext(v97, v128);
        }
        if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)v135))
        {
          v93 = *(_QWORD *)(a1 + 128);
          if (v93)
          {
            v94 = atomic_load((unsigned int *)(v93 + 704));
            if (v94 == 2)
              v136[7] = *(_QWORD *)(re::AssetHandle::asset<re::MaterialAsset>((re::MaterialAsset *)(a1 + 120)) + 1664);
          }
          re::PrimitiveRenderer::submitContext(v97, v135);
        }
        if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)v112))
          re::PrimitiveRenderer::submitContext(v97, v112);
        if (v123)
        {
          if (v127)
            (*(void (**)(void))(*(_QWORD *)v123 + 40))();
          v127 = 0;
          v124 = 0;
          v125 = 0;
          v123 = 0;
          ++v126;
        }
        re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)&v122);
        re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)v112);
        if (v130)
        {
          if (v134)
            (*(void (**)(void))(*(_QWORD *)v130 + 40))();
          v134 = 0;
          v131 = 0;
          v132 = 0;
          v130 = 0;
          ++v133;
        }
        re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)v129);
        re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)v128);
        if (v137)
        {
          if (v141)
            (*(void (**)(void))(*(_QWORD *)v137 + 40))();
          v141 = 0;
          v138 = 0;
          v139 = 0;
          v137 = 0;
          ++v140;
        }
        re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)v136);
        re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)v135);
        return;
      }
      v26 = *(_QWORD *)(v24 + 40);
      v27 = 8 * v25;
      __asm
      {
        FMOV            V8.2S, #1.0
        FMOV            V0.4S, #1.0
      }
      v95 = _Q0;
      while (1)
      {
        v33 = *(_QWORD **)v26;
        v34 = *(_QWORD *)(*(_QWORD *)v26 + 16);
        if ((*(_BYTE *)(v34 + 288) & 1) == 0)
          goto LABEL_75;
        if ((v99 & 1) != 0)
          v35 = 1;
        else
          v35 = *(_DWORD *)(v14 + 28);
        v36 = (re::ecs2::EntityComponentCollection *)(v34 + 32);
        v37 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v37)
          v35 = *(_DWORD *)(v37 + 28);
        if (!v35)
          goto LABEL_75;
        v101.i64[0] = 0x3F8000003F800000;
        v101.i64[1] = 1065353216;
        *(_QWORD *)&v102 = 0;
        *((_QWORD *)&v102 + 1) = 0x3F80000000000000;
        v103 = 0uLL;
        v109.n128_u32[0] = 3;
        v110.i64[0] = 0x3F8000003F800000;
        v110.i64[1] = 0x3F8000003F800000;
        v111 = _D8;
        v104.i8[0] = 0;
        v38 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v40 = v38;
        v41 = v38 ? *(_QWORD *)(v38 + 336) : 0;
        if (v35 == 1)
          break;
        if (v35 != 2)
        {
          v44 = 0;
          goto LABEL_73;
        }
        v42 = v33[12];
        if (v42)
        {
          v43 = getWorldTransformAndStyle(v14, v34, v33[12], (uint64_t)&v101, (uint64_t)&v109);
          v44 = (float *)(*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v42 + 16) + 24))(*(_QWORD *)(v42 + 16), v43);
          if (v41)
          {
            v104.i8[0] = 1;
            v45 = *(__n128 *)(v41 + 160);
            v105 = *(float32x4_t *)(v41 + 144);
            v106 = v45;
            v39 = *(_OWORD *)(v41 + 176);
            v46 = *(_OWORD *)(v41 + 192);
            v107 = v39;
            v108 = v46;
          }
          goto LABEL_54;
        }
LABEL_75:
        v26 += 8;
        v27 -= 8;
        if (!v27)
          goto LABEL_90;
      }
      v48 = *(_QWORD *)(v34 + 240);
      if (!v48)
        goto LABEL_75;
      v49 = *(re::ecs2::TransformComponent ***)(v48 + 16);
      if (v49)
      {
        re::ecs2::TransformComponent::worldSRT(v49, (const re::ecs2::Entity *)1, (uint64_t)&v142);
      }
      else
      {
        v50 = *(_OWORD *)(v48 + 48);
        v142 = *(float32x4_t *)(v48 + 32);
        v143 = v50;
        v144 = *(_OWORD *)(v48 + 64);
      }
      v101 = v142;
      v102 = v143;
      v103 = v144;
      v51 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v34 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      v52 = re::ecs2::EntityComponentCollection::get(v36, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if ((v99 & 1) != 0)
        v55 = 3;
      else
        v55 = *(_DWORD *)(v14 + 32);
      v56 = v95;
      if (v52)
      {
        v57 = *(_DWORD *)(v52 + 120);
        if (v57)
        {
          v56 = (int8x16_t)xmmword_22610BAD0;
          if (v57 != 2)
          {
            v56 = v95;
            if (v57 == 1)
              v56 = (int8x16_t)xmmword_22610BAF0;
          }
        }
        else
        {
          v56 = (int8x16_t)xmmword_22610BAE0;
        }
      }
      if (v51)
      {
        v53.i32[0] = 0;
        v54.i8[0] = *(_BYTE *)(v51 + 25);
        v56 = vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v54, v53), 0), v56, (int8x16_t)xmmword_22610BB00);
      }
      v109.n128_u32[0] = v55;
      v110 = v56;
      v111 = _D8;
      v58 = re::ecs2::EntityComponentCollection::get(v36, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v58)
        v109.n128_u32[0] = *(_DWORD *)(v58 + 32);
      v59 = v33[5];
      if (!v59)
        goto LABEL_75;
      v60 = (re::AssetHandle *)(v33 + 4);
      v61 = atomic_load((unsigned int *)(v59 + 704));
      if (v61 != 2)
      {
        if (v33[5])
          re::AssetHandle::loadAsync(v60);
        goto LABEL_75;
      }
      v44 = *(float **)(re::AssetHandle::asset<re::CollisionShapeAsset>(v60) + 8);
      if (v40)
      {
        v62 = (float32x4_t *)(v40 + 32);
        if (v104.i8[0])
        {
          v63 = *(__n128 *)(v40 + 48);
          v105 = *v62;
          v106 = v63;
          v39 = *(_OWORD *)(v40 + 64);
          v107 = v39;
          LODWORD(v108) = *(_DWORD *)(v40 + 80);
        }
        else
        {
          v104.i8[0] = 1;
          v64 = *(__n128 *)(v40 + 48);
          v105 = *v62;
          v106 = v64;
          v39 = *(_OWORD *)(v40 + 64);
          v65 = *(_OWORD *)(v40 + 80);
          v107 = v39;
          v108 = v65;
        }
      }
LABEL_54:
      if (v44)
      {
        v47 = v135;
        switch(v109.n128_u32[0])
        {
          case 0u:
          case 3u:
            v47 = v112;
            goto LABEL_71;
          case 1u:
            goto LABEL_71;
          case 2u:
            v47 = v128;
LABEL_71:
            re::PhysicsDebugRenderer::drawTransformedShape((uint64_t)v47, &v101, v44, &v109);
            break;
          default:
            break;
        }
        re::PhysicsDebugRenderer::drawTransformFrame((uint64_t)v135, (uint64_t)&v101, v44[4]);
      }
LABEL_73:
      if (v104.i8[0])
      {
        *(float *)&v39 = v44[4];
        re::PhysicsDebugRenderer::drawCenterOfMass((uint64_t)v135, &v101, &v105, *(int32x2_t *)&v39);
      }
      goto LABEL_75;
    }
  }
}

double getWorldTransformAndStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int32x4_t v13;
  __int128 v14;
  __int128 v15;
  int v16;
  re::ecs2::EntityComponentCollection *v17;
  uint64_t v18;
  _DWORD *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  double result;
  int8x16_t v29;
  int8x16_t v30;
  _OWORD v31[2];

  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(a3 + 16) + 40))(v31);
  v10 = *(_DWORD *)(a3 + 8);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  if ((v10 & 2) == 0)
  {
    v13 = vdupq_n_s32(v11);
    v12 = v13.i64[1];
    v11 = v13.i64[0];
  }
  v15 = v31[0];
  v14 = v31[1];
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v12;
  *(_OWORD *)(a4 + 16) = v14;
  *(_OWORD *)(a4 + 32) = v15;
  if (a1)
    v16 = *(_DWORD *)(a1 + 32);
  else
    v16 = 3;
  v17 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  v18 = re::ecs2::EntityComponentCollection::get(v17, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  __asm { FMOV            V0.4S, #1.0 }
  if (v18)
  {
    v24 = *(_DWORD **)(v18 + 336);
    if (v24)
    {
      v25 = v24[52];
      if (v25)
      {
        if (v25 == 2)
        {
          _Q0 = (int8x16_t)xmmword_22610BAD0;
        }
        else if (v25 == 1)
        {
          _Q0 = (int8x16_t)xmmword_22610BAF0;
        }
      }
      else
      {
        _Q0 = (int8x16_t)xmmword_22610BAE0;
      }
      v29 = _Q0;
      if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v24 + 296))(v24))
        v26 = -1;
      else
        v26 = 0;
      _Q0 = vbslq_s8((int8x16_t)vdupq_n_s32(v26), (int8x16_t)xmmword_22610BB00, v29);
    }
  }
  v30 = _Q0;
  v27 = re::ecs2::EntityComponentCollection::get(v17, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsDebugComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v27)
    v16 = *(_DWORD *)(v27 + 32);
  *(_DWORD *)a5 = v16;
  *(int8x16_t *)(a5 + 16) = v30;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a5 + 32) = result;
  return result;
}

void re::introspect_PhysicsDebugDrawMode(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  StringID v38;
  _QWORD v39[2];
  _QWORD v40[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2541144C8);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2541144C8);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Wireframe";
      qword_254114530 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Solid";
      qword_254114538 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "Transparent";
      qword_254114540 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = 3;
      *(_QWORD *)(v34 + 16) = "Lines";
      qword_254114548 = v34;
      __cxa_guard_release(&qword_2541144C8);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2541144D0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541144D0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254114550, "PhysicsDebugDrawMode", 4, 4, 1, 1);
    qword_254114550 = (uint64_t)&off_24ED7D9E8;
    qword_254114590 = (uint64_t)&re::introspect_PhysicsDebugDrawMode(BOOL)::enumTable;
    dword_254114560 = 9;
    __cxa_guard_release(&qword_2541144D0);
  }
  if ((_MergedGlobals_322 & 1) == 0)
  {
    _MergedGlobals_322 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254114550, a2);
    v36 = 0x4AC25C1CA6E97326;
    v37 = "PhysicsDebugDrawMode";
    v40[0] = 208862;
    v40[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v40);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v40);
      v6 = (unsigned int *)qword_254114590;
      v39[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v38.var0 = 2 * v12;
            v38.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v16, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v38.var0 = 2 * v20;
              v38.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v24, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v25);
      xmmword_254114570 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "PhysicsDebugDrawMode", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_PhysicsDebugDrawLevel(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2541144D8);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2541144D8);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Disabled";
      qword_254114500 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "ECSComponent";
      qword_254114508 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 3;
      *(_QWORD *)(v32 + 16) = "ThirdParty";
      qword_254114510 = v32;
      __cxa_guard_release(&qword_2541144D8);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2541144E0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541144E0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254114598, "PhysicsDebugDrawLevel", 4, 4, 1, 1);
    qword_254114598 = (uint64_t)&off_24ED7D9E8;
    qword_2541145D8 = (uint64_t)&re::introspect_PhysicsDebugDrawLevel(BOOL)::enumTable;
    dword_2541145A8 = 9;
    __cxa_guard_release(&qword_2541144E0);
  }
  if ((byte_2541144C1 & 1) == 0)
  {
    byte_2541144C1 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254114598, a2);
    v34 = 0xD89277836203328;
    v35 = "PhysicsDebugDrawLevel";
    v38[0] = 0x607DD0F01DCLL;
    v38[1] = "uint32_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_2541145D8;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_2541145B8 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "PhysicsDebugDrawLevel", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_PhysicsDebugComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541144E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541144E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541145E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541145F0 = 0;
    qword_254114600 = 0;
    qword_254114608 = 0xFFFFFFFFLL;
    qword_2541145E0 = (uint64_t)&off_24ED7DAA8;
    qword_254114610 = (uint64_t)"PhysicsDebugComponent";
    dword_254114618 = 0;
    xmmword_254114620 = 0u;
    unk_254114630 = 0u;
    xmmword_254114640 = 0u;
    qword_254114650 = 0;
    __cxa_guard_release(&qword_2541144E8);
  }
  return &qword_2541145E0;
}

void re::ecs2::initInfo_PhysicsDebugComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0xD8925C97FE41BE2;
  v16[1] = "PhysicsDebugComponent";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_2541144F0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541144F0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254114518 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::introspect_PhysicsDebugDrawLevel((re *)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "debugDrawLevel";
      *(_QWORD *)(v11 + 16) = &qword_254114598;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1C00000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254114520 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::introspect_PhysicsDebugDrawMode((re *)v12, v13);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "debugDrawMode";
      *(_QWORD *)(v14 + 16) = &qword_254114550;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x2000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254114528 = v14;
      __cxa_guard_release(&qword_2541144F0);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254114518;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsDebugComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsDebugComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsDebugComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsDebugComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

double re::internal::defaultConstruct<re::ecs2::PhysicsDebugComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED59578;
  *(_QWORD *)&result = 0x300000001;
  *(_QWORD *)(v3 + 28) = 0x300000001;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsDebugComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PhysicsDebugComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED59578;
  *(_QWORD *)&result = 0x300000001;
  *(_QWORD *)(v1 + 28) = 0x300000001;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsDebugComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsDebugComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsDebugComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsDebugComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsDebugComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsDebugComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PhysicsDebugSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541144F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541144F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114658, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114668 = 0;
    qword_254114678 = 0;
    qword_254114680 = 0xFFFFFFFFLL;
    qword_254114658 = (uint64_t)&off_24ED7DAA8;
    qword_254114688 = (uint64_t)"PhysicsDebugSystem";
    dword_254114690 = 0;
    xmmword_254114698 = 0u;
    unk_2541146A8 = 0u;
    xmmword_2541146B8 = 0u;
    qword_2541146C8 = 0;
    __cxa_guard_release(&qword_2541144F8);
  }
  return &qword_254114658;
}

void re::ecs2::initInfo_PhysicsDebugSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x4A224CD115088B76;
  v5[1] = "PhysicsDebugSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PhysicsDebugSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsDebugSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsDebugSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PhysicsDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PhysicsDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsDebugSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsDebugSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::PhysicsDebugSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  re::ecs2::System::System(a3, 1, 1);
  *(_QWORD *)v3 = &off_24ED6DF48;
  result = 0.0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsDebugSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PhysicsDebugSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  re::ecs2::System::System(a1, 1, 1);
  *(_QWORD *)v1 = &off_24ED6DF48;
  result = 0.0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsDebugSystem>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsDebugSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsDebugSystem>, this);
}

void re::ecs2::PhysicsDebugSystem::~PhysicsDebugSystem(re::ecs2::PhysicsDebugSystem *this)
{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED6DF48;
  v2 = (re::ecs2::PhysicsDebugSystem *)((char *)this + 120);
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 192));
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 168));
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 144));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED6DF48;
  v2 = (re::ecs2::PhysicsDebugSystem *)((char *)this + 120);
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 192));
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 168));
  re::AssetHandle::~AssetHandle((re::ecs2::PhysicsDebugSystem *)((char *)this + 144));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PhysicsDebugSystem::typeInfo(re::ecs2::PhysicsDebugSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsDebugSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::PhysicsDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PhysicsDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_UISortingComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541146F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541146F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541147A8, 0);
    *(uint64_t *)((char *)&qword_2541147B8 + 6) = 0;
    qword_2541147B8 = 0;
    qword_2541147C8 = 0;
    qword_2541147D0 = 0xFFFFFFFFLL;
    qword_2541147A8 = (uint64_t)&off_24ED7DAA8;
    qword_2541147D8 = (uint64_t)"UISortingComponent";
    dword_2541147E0 = 0;
    unk_2541147E8 = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254114818 = 0;
    __cxa_guard_release(&qword_2541146F0);
  }
  return &qword_2541147A8;
}

void re::ecs2::initInfo_UISortingComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const re::IntrospectionBase *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  _anonymous_namespace_ *v16;
  unint64_t v17;
  unint64_t i;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  unint64_t j;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  const re::IntrospectionBase *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  const re::IntrospectionBase *v48;
  void *v49;
  uint64_t v50;
  re *v51;
  uint64_t *v52;
  re *v53;
  uint64_t *v54;
  re *v55;
  uint64_t *v56;
  re *v57;
  uint64_t *v58;
  re *v59;
  uint64_t *v60;
  re *v61;
  uint64_t *v62;
  re *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69[2];
  StringID v70;
  _QWORD v71[2];
  uint64_t v72;
  const char *v73;

  v72 = 0x602C282B2A41051ALL;
  v73 = "UISortingComponent";
  re::StringID::destroyString((re::StringID *)&v72);
  *((_OWORD *)this + 2) = v68;
  v4 = atomic_load((unsigned __int8 *)&qword_2541146E8);
  if ((v4 & 1) != 0)
    goto LABEL_2;
  v5 = (re *)__cxa_guard_acquire(&qword_2541146E8);
  if (!(_DWORD)v5)
    goto LABEL_2;
  v6 = re::introspectionAllocator(v5);
  v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = "Component";
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 40) = 3;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  qword_2541146F8 = v8;
  v10 = re::introspectionAllocator((re *)v8);
  v11 = atomic_load((unsigned __int8 *)&qword_2541146D8);
  if ((v11 & 1) == 0)
  {
    v51 = (re *)__cxa_guard_acquire(&qword_2541146D8);
    if ((_DWORD)v51)
    {
      v52 = re::introspectionAllocator(v51);
      v53 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 24, 8);
      *(_DWORD *)v53 = 1;
      *((_QWORD *)v53 + 1) = -2;
      *((_QWORD *)v53 + 2) = "BackDecoration";
      qword_254114728 = (uint64_t)v53;
      v54 = re::introspectionAllocator(v53);
      v55 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 24, 8);
      *(_DWORD *)v55 = 1;
      *((_QWORD *)v55 + 1) = -1;
      *((_QWORD *)v55 + 2) = "BehindUIContent";
      qword_254114730 = (uint64_t)v55;
      v56 = re::introspectionAllocator(v55);
      v57 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 24, 8);
      *(_DWORD *)v57 = 1;
      *((_QWORD *)v57 + 1) = 0;
      *((_QWORD *)v57 + 2) = "UIContent";
      qword_254114738 = (uint64_t)v57;
      v58 = re::introspectionAllocator(v57);
      v59 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 24, 8);
      *(_DWORD *)v59 = 1;
      *((_QWORD *)v59 + 1) = 1;
      *((_QWORD *)v59 + 2) = "AboveUIContent";
      qword_254114740 = (uint64_t)v59;
      v60 = re::introspectionAllocator(v59);
      v61 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 24, 8);
      *(_DWORD *)v61 = 1;
      *((_QWORD *)v61 + 1) = 2;
      *((_QWORD *)v61 + 2) = "FrontDecoration";
      qword_254114748 = (uint64_t)v61;
      v62 = re::introspectionAllocator(v61);
      v63 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 24, 8);
      *(_DWORD *)v63 = 1;
      *((_QWORD *)v63 + 1) = 3;
      *((_QWORD *)v63 + 2) = "ServerBegin";
      qword_254114750 = (uint64_t)v63;
      v64 = re::introspectionAllocator(v63);
      v65 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 24, 8);
      *(_DWORD *)v65 = 1;
      *(_QWORD *)(v65 + 8) = 3;
      *(_QWORD *)(v65 + 16) = "ServerCARE";
      qword_254114758 = v65;
      __cxa_guard_release(&qword_2541146D8);
    }
  }
  v12 = atomic_load((unsigned __int8 *)&qword_2541146E0);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_2541146E0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254114760, "UISortCategory", 4, 4, 1, 1);
    qword_254114760 = (uint64_t)&off_24ED7D9E8;
    qword_2541147A0 = (uint64_t)&re::ecs2::introspect_UISortCategory(BOOL)::enumTable;
    dword_254114770 = 9;
    __cxa_guard_release(&qword_2541146E0);
  }
  if ((_MergedGlobals_323 & 1) != 0)
  {
LABEL_33:
    v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
    *(_DWORD *)v35 = 1;
    *(_QWORD *)(v35 + 8) = "m_sortCategory";
    *(_QWORD *)(v35 + 16) = &qword_254114760;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 32) = 0x5000000001;
    *(_DWORD *)(v35 + 40) = 0;
    *(_QWORD *)(v35 + 48) = 0;
    *(_QWORD *)(v35 + 56) = 0;
    *(_DWORD *)(v35 + 64) = 0;
    qword_254114700 = v35;
    v36 = re::introspectionAllocator((re *)v35);
    v38 = re::introspect_int((re *)1, v37);
    v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
    *(_DWORD *)v39 = 1;
    *(_QWORD *)(v39 + 8) = "m_sortPriorityHint";
    *(_QWORD *)(v39 + 16) = v38;
    *(_QWORD *)(v39 + 24) = 0;
    *(_QWORD *)(v39 + 32) = 0x5400000002;
    *(_DWORD *)(v39 + 40) = 0;
    *(_QWORD *)(v39 + 48) = 0;
    *(_QWORD *)(v39 + 56) = 0;
    *(_DWORD *)(v39 + 64) = 0;
    qword_254114708 = v39;
    v40 = re::introspectionAllocator((re *)v39);
    v41 = re::introspect_Vector3F((re::IntrospectionBase **)1);
    v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = "m_extents";
    *(_QWORD *)(v42 + 16) = v41;
    *(_QWORD *)(v42 + 24) = 0;
    *(_QWORD *)(v42 + 32) = 0x2000000003;
    *(_DWORD *)(v42 + 40) = 0;
    *(_QWORD *)(v42 + 48) = 0;
    *(_QWORD *)(v42 + 56) = 0;
    *(_DWORD *)(v42 + 64) = 0;
    qword_254114710 = v42;
    v43 = re::introspectionAllocator((re *)v42);
    v45 = re::introspect_BOOL((re *)1, v44);
    v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 72, 8);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = "m_usesMeshBoundingBox";
    *(_QWORD *)(v46 + 16) = v45;
    *(_QWORD *)(v46 + 24) = 0;
    *(_QWORD *)(v46 + 32) = 0x5F00000004;
    *(_DWORD *)(v46 + 40) = 0;
    *(_QWORD *)(v46 + 48) = 0;
    *(_QWORD *)(v46 + 56) = 0;
    *(_DWORD *)(v46 + 64) = 0;
    qword_254114718 = v46;
    v47 = re::introspectionAllocator((re *)v46);
    v49 = re::introspect_BOOL((re *)1, v48);
    v50 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 72, 8);
    *(_DWORD *)v50 = 1;
    *(_QWORD *)(v50 + 8) = "m_isInsideOutsidePartitionPlane";
    *(_QWORD *)(v50 + 16) = v49;
    *(_QWORD *)(v50 + 24) = 0;
    *(_QWORD *)(v50 + 32) = 0x6000000005;
    *(_DWORD *)(v50 + 40) = 0;
    *(_QWORD *)(v50 + 48) = 0;
    *(_QWORD *)(v50 + 56) = 0;
    *(_DWORD *)(v50 + 64) = 0;
    qword_254114720 = v50;
    __cxa_guard_release(&qword_2541146E8);
LABEL_2:
    *((_QWORD *)this + 2) = 0x7000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 6;
    *((_QWORD *)this + 8) = &qword_2541146F8;
    *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::UISortingComponent>;
    *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::UISortingComponent>;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::UISortingComponent>;
    *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::UISortingComponent>;
    re::IntrospectionRegistry::add(this, v3);
    v67 = v68;
    return;
  }
  _MergedGlobals_323 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254114760, v9);
  v69[0] = 0x7F888D781CAD72E0;
  v69[1] = (uint64_t)"UISortCategory";
  v72 = 208862;
  v73 = "int";
  v13 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v72);
  if (v13)
  {
    v14 = *v13;
    re::StringID::destroyString((re::StringID *)&v72);
    v15 = (unsigned int *)qword_2541147A0;
    v71[1] = v14;
    re::TypeBuilder::beginEnumType((uint64_t)&v72, v69, 1, 1, (uint64_t)v71);
    v17 = *v15;
    if ((_DWORD)v17)
    {
      for (i = 0; i < v17; ++i)
      {
        v19 = *(_QWORD *)(*((_QWORD *)v15 + 1) + 8 * i);
        if (*(_DWORD *)v19 == 1)
        {
          v20 = *(char **)(v19 + 16);
          if (v20)
          {
            v21 = *v20;
            if (*v20)
            {
              v22 = v20[1];
              if (v22)
              {
                v23 = (unsigned __int8 *)(v20 + 2);
                do
                {
                  v21 = 31 * v21 + v22;
                  v24 = *v23++;
                  v22 = v24;
                }
                while (v24);
              }
            }
          }
          else
          {
            v21 = 0;
          }
          v25 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)&v70.var0 = 2 * v21;
          v70.var1 = v20;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v72, v25, &v70);
          re::StringID::destroyString((re::StringID *)&v70);
          v17 = *v15;
        }
      }
      if (v17)
      {
        for (j = 0; j < v17; ++j)
        {
          v27 = *(_QWORD *)(*((_QWORD *)v15 + 1) + 8 * j);
          if (*(_DWORD *)v27 == 2)
          {
            v28 = *(char **)(v27 + 16);
            if (v28)
            {
              v29 = *v28;
              if (*v28)
              {
                v30 = v28[1];
                if (v30)
                {
                  v31 = (unsigned __int8 *)(v28 + 2);
                  do
                  {
                    v29 = 31 * v29 + v30;
                    v32 = *v31++;
                    v30 = v32;
                  }
                  while (v32);
                }
              }
            }
            else
            {
              v29 = 0;
            }
            v33 = *(_QWORD *)(v27 + 8);
            *(_QWORD *)&v70.var0 = 2 * v29;
            v70.var1 = v28;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v72, v33, &v70);
            re::StringID::destroyString((re::StringID *)&v70);
            v17 = *v15;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v72, v34);
    xmmword_254114780 = (__int128)v70;
    re::StringID::destroyString((re::StringID *)v69);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v72);
  re::internal::assertLog((re::internal *)5, v66, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "UISortCategory");
  _os_crash();
  __break(1u);
}

int32x4_t re::internal::defaultConstruct<re::ecs2::UISortingComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  int32x4_t result;
  __int128 v5;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED595F8;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v5 = 0x7F0000007FLL;
  *((_QWORD *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 48) = result;
  *(_OWORD *)(v3 + 64) = v5;
  *(_DWORD *)(v3 + 80) = 1;
  *(_QWORD *)(v3 + 84) = 0;
  *(_QWORD *)(v3 + 89) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::UISortingComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

int32x4_t re::internal::defaultConstructV2<re::ecs2::UISortingComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  int32x4_t result;
  __int128 v3;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED595F8;
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v3 = 0x7F0000007FLL;
  *((_QWORD *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v1 + 48) = result;
  *(_OWORD *)(v1 + 64) = v3;
  *(_DWORD *)(v1 + 80) = 1;
  *(_QWORD *)(v1 + 84) = 0;
  *(_QWORD *)(v1 + 89) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::UISortingComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_UISortingComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"UISortingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_UISortingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_UISortingComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::UISortingComponent>, this);
}

uint64_t re::ecs2::UISortingComponent::setExtents(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;

  v2 = a1[8];
  if (v2 == *a2 || vabds_f32(v2, *a2) < (float)((float)((float)(fabsf(v2) + fabsf(*a2)) + 1.0) * 0.00001))
  {
    v3 = a1[9];
    v4 = a2[1];
    if (v3 == v4 || vabds_f32(v3, v4) < (float)((float)((float)(fabsf(v3) + fabsf(v4)) + 1.0) * 0.00001))
    {
      v5 = a1[10];
      v6 = a2[2];
      if (v5 == v6 || vabds_f32(v5, v6) < (float)((float)((float)(fabsf(v5) + fabsf(v6)) + 1.0) * 0.00001))
        return 0;
    }
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)a2;
  return 1;
}

uint64_t re::ecs2::UISortingComponent::setCaSortOrder(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::EventBus *v7;
  __guard v8;
  char v9;

  v2 = *(_DWORD *)(this + 88);
  *(_DWORD *)(this + 88) = a2;
  if (v2 != a2)
  {
    v3 = *(_QWORD *)(this + 16);
    v4 = v3;
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 24);
    }
    while (v4);
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = *(re::EventBus **)(v6 + 288);
      if (v7)
      {
        v8 = re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCASortOrderEvent>();
        return re::EventBus::publish(v7, v3, v8, (uint64_t)&v9, 1uLL, 0);
      }
    }
  }
  return this;
}

uint64_t *re::ecs2::allocInfo_PrimitiveBoxComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_324);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_324))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114A50, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114A60 = 0;
    qword_254114A70 = 0;
    qword_254114A78 = 0xFFFFFFFFLL;
    qword_254114A50 = (uint64_t)&off_24ED7DAA8;
    qword_254114A80 = (uint64_t)"PrimitiveBoxComponent";
    dword_254114A88 = 0;
    xmmword_254114A90 = 0u;
    unk_254114AA0 = 0u;
    xmmword_254114AB0 = 0u;
    qword_254114AC0 = 0;
    __cxa_guard_release(&_MergedGlobals_324);
  }
  return &qword_254114A50;
}

void re::ecs2::initInfo_PrimitiveBoxComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0xA7F887F361E343B2;
  v21[1] = "PrimitiveBoxComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254114828);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254114828);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254114910 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "splitMeshes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x3800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254114918 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_GeomBuildBoxOptions((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "options";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254114920 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "createCollisionShape";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x3A00000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254114928 = v19;
      __cxa_guard_release(&qword_254114828);
    }
  }
  *((_QWORD *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254114910;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveBoxComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveBoxComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveBoxComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveBoxComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveBoxComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle *v4;

  *a3 = &off_24ED43BA8;
  v4 = (re::AssetHandle *)(a3 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 11));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxComponent>(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43BA8;
  v2 = (re::AssetHandle *)(a1 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 11));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveBoxComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveBoxComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveBoxComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveBoxComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveBoxComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveBoxWithRoundedCornersComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254114830);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254114830))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114AC8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114AD8 = 0;
    qword_254114AE8 = 0;
    qword_254114AF0 = 0xFFFFFFFFLL;
    qword_254114AC8 = (uint64_t)&off_24ED7DAA8;
    qword_254114AF8 = (uint64_t)"PrimitiveBoxWithRoundedCornersComponent";
    dword_254114B00 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254114B38 = 0;
    __cxa_guard_release(&qword_254114830);
  }
  return &qword_254114AC8;
}

void re::ecs2::initInfo_PrimitiveBoxWithRoundedCornersComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x9E4753EB8C44C9C4;
  v21[1] = "PrimitiveBoxWithRoundedCornersComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254114838);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254114838);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254114930 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "splitMeshes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x4400000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254114938 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_GeomBuildBoxWithRoundedCornersOptions((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "options";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254114940 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "createCollisionShape";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x4600000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254114948 = v19;
      __cxa_guard_release(&qword_254114838);
    }
  }
  *((_QWORD *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254114930;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle *v4;

  *a3 = &off_24ED59710;
  v4 = (re::AssetHandle *)(a3 + 9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 12));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED59710;
  v2 = (re::AssetHandle *)(a1 + 9);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 12));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveBoxWithRoundedCornersComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveBoxWithRoundedCornersComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveBoxWithRoundedCornersComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveBoxWithRoundedCornersComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveCapsuleComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254114840);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254114840))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114B40, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114B50 = 0;
    qword_254114B60 = 0;
    qword_254114B68 = 0xFFFFFFFFLL;
    qword_254114B40 = (uint64_t)&off_24ED7DAA8;
    qword_254114B70 = (uint64_t)"PrimitiveCapsuleComponent";
    dword_254114B78 = 0;
    xmmword_254114B80 = 0u;
    unk_254114B90 = 0u;
    xmmword_254114BA0 = 0u;
    qword_254114BB0 = 0;
    __cxa_guard_release(&qword_254114840);
  }
  return &qword_254114B40;
}

void re::ecs2::initInfo_PrimitiveCapsuleComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x7F9A21F41648206ELL;
  v21[1] = "PrimitiveCapsuleComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254114848);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254114848);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254114950 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "splitMeshes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254114958 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_GeomBuildCapsuleOptions((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "options";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254114960 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "createCollisionShape";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x3200000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254114968 = v19;
      __cxa_guard_release(&qword_254114848);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254114950;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveCapsuleComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveCapsuleComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveCapsuleComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveCapsuleComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveCapsuleComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveCapsuleComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveCapsuleComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle *v4;

  *a3 = &off_24ED43C90;
  v4 = (re::AssetHandle *)(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveCapsuleComponent>(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43C90;
  v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveCapsuleComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveCapsuleComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveCapsuleComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveCapsuleComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveCapsuleComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveConeComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254114850);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254114850))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114BB8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114BC8 = 0;
    qword_254114BD8 = 0;
    qword_254114BE0 = 0xFFFFFFFFLL;
    qword_254114BB8 = (uint64_t)&off_24ED7DAA8;
    qword_254114BE8 = (uint64_t)"PrimitiveConeComponent";
    dword_254114BF0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254114C28 = 0;
    __cxa_guard_release(&qword_254114850);
  }
  return &qword_254114BB8;
}

void re::ecs2::initInfo_PrimitiveConeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x6CC106C967564726;
  v21[1] = "PrimitiveConeComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254114858);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254114858);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254114970 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "splitMeshes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254114978 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_GeomBuildConeOptions((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "options";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254114980 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "createCollisionShape";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2E00000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254114988 = v19;
      __cxa_guard_release(&qword_254114858);
    }
  }
  *((_QWORD *)this + 2) = 0x7800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254114970;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveConeComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveConeComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveConeComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveConeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveConeComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveConeComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveConeComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle *v4;

  *a3 = &off_24ED43D78;
  v4 = (re::AssetHandle *)(a3 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveConeComponent>(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43D78;
  v2 = (re::AssetHandle *)(a1 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveConeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveConeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveConeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveConeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveConeComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveCylinderComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254114860);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254114860))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114C30, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114C40 = 0;
    qword_254114C50 = 0;
    qword_254114C58 = 0xFFFFFFFFLL;
    qword_254114C30 = (uint64_t)&off_24ED7DAA8;
    qword_254114C60 = (uint64_t)"PrimitiveCylinderComponent";
    dword_254114C68 = 0;
    xmmword_254114C70 = 0u;
    xmmword_254114C80 = 0u;
    xmmword_254114C90 = 0u;
    qword_254114CA0 = 0;
    __cxa_guard_release(&qword_254114860);
  }
  return &qword_254114C30;
}

void re::ecs2::initInfo_PrimitiveCylinderComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0xB29E407824C03F80;
  v21[1] = "PrimitiveCylinderComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254114868);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254114868);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254114990 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "splitMeshes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x3400000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254114998 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_GeomBuildCylinderOptions((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "options";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2541149A0 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "createCollisionShape";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x3600000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2541149A8 = v19;
      __cxa_guard_release(&qword_254114868);
    }
  }
  *((_QWORD *)this + 2) = 0x8800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254114990;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveCylinderComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveCylinderComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveCylinderComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveCylinderComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveCylinderComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveCylinderComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveCylinderComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle *v4;

  *a3 = &off_24ED43E60;
  v4 = (re::AssetHandle *)(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveCylinderComponent>(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43E60;
  v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveCylinderComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveCylinderComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveCylinderComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveCylinderComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveCylinderComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitivePlaneComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254114870);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254114870))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114CA8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114CB8 = 0;
    qword_254114CC8 = 0;
    qword_254114CD0 = 0xFFFFFFFFLL;
    qword_254114CA8 = (uint64_t)&off_24ED7DAA8;
    qword_254114CD8 = (uint64_t)"PrimitivePlaneComponent";
    dword_254114CE0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254114D18 = 0;
    __cxa_guard_release(&qword_254114870);
  }
  return &qword_254114CA8;
}

void re::ecs2::initInfo_PrimitivePlaneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x4B3FA39CDE99B550;
  v21[1] = "PrimitivePlaneComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254114878);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254114878);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541149B0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "splitMeshes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x3800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541149B8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_GeomBuildPlaneOptions((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "options";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2541149C0 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "createCollisionShape";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x3A00000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2541149C8 = v19;
      __cxa_guard_release(&qword_254114878);
    }
  }
  *((_QWORD *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2541149B0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitivePlaneComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitivePlaneComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitivePlaneComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitivePlaneComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::PrimitivePlaneComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitivePlaneComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitivePlaneComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle *v4;

  *a3 = &off_24ED597F8;
  v4 = (re::AssetHandle *)(a3 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 11));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitivePlaneComponent>(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED597F8;
  v2 = (re::AssetHandle *)(a1 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 11));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitivePlaneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitivePlaneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitivePlaneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitivePlaneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitivePlaneComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitivePyramidComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254114880);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254114880))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114D20, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114D30 = 0;
    qword_254114D40 = 0;
    qword_254114D48 = 0xFFFFFFFFLL;
    qword_254114D20 = (uint64_t)&off_24ED7DAA8;
    qword_254114D50 = (uint64_t)"PrimitivePyramidComponent";
    dword_254114D58 = 0;
    xmmword_254114D60 = 0u;
    xmmword_254114D70 = 0u;
    xmmword_254114D80 = 0u;
    qword_254114D90 = 0;
    __cxa_guard_release(&qword_254114880);
  }
  return &qword_254114D20;
}

void re::ecs2::initInfo_PrimitivePyramidComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x47DE3E13F43D68E8;
  v21[1] = "PrimitivePyramidComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254114888);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254114888);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541149D0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "splitMeshes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541149D8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_GeomBuildPyramidOptions((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "options";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2541149E0 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "createCollisionShape";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x3200000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2541149E8 = v19;
      __cxa_guard_release(&qword_254114888);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2541149D0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitivePyramidComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitivePyramidComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitivePyramidComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitivePyramidComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::PrimitivePyramidComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitivePyramidComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitivePyramidComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle *v4;

  *a3 = &off_24ED598E0;
  v4 = (re::AssetHandle *)(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitivePyramidComponent>(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED598E0;
  v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitivePyramidComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitivePyramidComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitivePyramidComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitivePyramidComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitivePyramidComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveSphereComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254114890);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254114890))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114D98, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114DA8 = 0;
    qword_254114DB8 = 0;
    qword_254114DC0 = 0xFFFFFFFFLL;
    qword_254114D98 = (uint64_t)&off_24ED7DAA8;
    qword_254114DC8 = (uint64_t)"PrimitiveSphereComponent";
    dword_254114DD0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254114E08 = 0;
    __cxa_guard_release(&qword_254114890);
  }
  return &qword_254114D98;
}

void re::ecs2::initInfo_PrimitiveSphereComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x7AD96854103F9FD2;
  v21[1] = "PrimitiveSphereComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254114898);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254114898);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541149F0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "splitMeshes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541149F8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_GeomBuildSphereOptions((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "options";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254114A00 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "createCollisionShape";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2A00000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254114A08 = v19;
      __cxa_guard_release(&qword_254114898);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_2541149F0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveSphereComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveSphereComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveSphereComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveSphereComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveSphereComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveSphereComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveSphereComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle *v4;

  *a3 = &off_24ED43F48;
  v4 = (re::AssetHandle *)(a3 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveSphereComponent>(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43F48;
  v2 = (re::AssetHandle *)(a1 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveSphereComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveSphereComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveSphereComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveSphereComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveSphereComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveTetrahedronComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541148A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541148A0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114E10, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114E20 = 0;
    qword_254114E30 = 0;
    qword_254114E38 = 0xFFFFFFFFLL;
    qword_254114E10 = (uint64_t)&off_24ED7DAA8;
    qword_254114E40 = (uint64_t)"PrimitiveTetrahedronComponent";
    dword_254114E48 = 0;
    xmmword_254114E50 = 0u;
    xmmword_254114E60 = 0u;
    xmmword_254114E70 = 0u;
    qword_254114E80 = 0;
    __cxa_guard_release(&qword_2541148A0);
  }
  return &qword_254114E10;
}

void re::ecs2::initInfo_PrimitiveTetrahedronComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x65FF83F77D591C90;
  v21[1] = "PrimitiveTetrahedronComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_2541148A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541148A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254114A10 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "splitMeshes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2800000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254114A18 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_GeomBuildTetrahedronOptions((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "options";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254114A20 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "createCollisionShape";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2A00000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254114A28 = v19;
      __cxa_guard_release(&qword_2541148A8);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254114A10;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveTetrahedronComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveTetrahedronComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveTetrahedronComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveTetrahedronComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveTetrahedronComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveTetrahedronComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveTetrahedronComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle *v4;

  *a3 = &off_24ED599C8;
  v4 = (re::AssetHandle *)(a3 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 9));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveTetrahedronComponent>(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED599C8;
  v2 = (re::AssetHandle *)(a1 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveTetrahedronComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveTetrahedronComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveTetrahedronComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveTetrahedronComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveTetrahedronComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveTubeComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541148B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541148B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114E88, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114E98 = 0;
    qword_254114EA8 = 0;
    qword_254114EB0 = 0xFFFFFFFFLL;
    qword_254114E88 = (uint64_t)&off_24ED7DAA8;
    qword_254114EB8 = (uint64_t)"PrimitiveTubeComponent";
    dword_254114EC0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254114EF8 = 0;
    __cxa_guard_release(&qword_2541148B0);
  }
  return &qword_254114E88;
}

void re::ecs2::initInfo_PrimitiveTubeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0xE45DF0EB7BA022A4;
  v21[1] = "PrimitiveTubeComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_2541148B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541148B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254114A30 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "splitMeshes";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x3000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254114A38 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_GeomBuildTubeOptions((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "options";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254114A40 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "createCollisionShape";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x3200000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254114A48 = v19;
      __cxa_guard_release(&qword_2541148B8);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254114A30;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveTubeComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveTubeComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveTubeComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveTubeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::PrimitiveTubeComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PrimitiveTubeComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveTubeComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle *v4;

  *a3 = &off_24ED59AB0;
  v4 = (re::AssetHandle *)(a3 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 10));
  re::AssetHandle::~AssetHandle(v4);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveTubeComponent>(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED59AB0;
  v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveTubeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveTubeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveTubeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveTubeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveTubeComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveBoxSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541148C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541148C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114F00, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114F10 = 0;
    qword_254114F20 = 0;
    qword_254114F28 = 0xFFFFFFFFLL;
    qword_254114F00 = (uint64_t)&off_24ED7DAA8;
    qword_254114F30 = (uint64_t)"PrimitiveBoxSystem";
    dword_254114F38 = 0;
    xmmword_254114F40 = 0u;
    xmmword_254114F50 = 0u;
    xmmword_254114F60 = 0u;
    qword_254114F70 = 0;
    __cxa_guard_release(&qword_2541148C0);
  }
  return &qword_254114F00;
}

void re::ecs2::initInfo_PrimitiveBoxSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x4C5497594D8EF5A6;
  v5[1] = "PrimitiveBoxSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitiveBoxSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveBoxSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveBoxSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveBoxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveBoxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::PrimitiveBoxSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *result;

  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  *result = &off_24ED628D8;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveBoxSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  *a3 = off_24ED62978;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = off_24ED629E8;
  v4 = a3[15];
  if (v4)
  {
    if (a3[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[17]);
      a3[16] = 0;
      a3[17] = 0;
    }
    a3[15] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxSystem>(_OWORD *a1)
{
  _QWORD *result;

  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  *result = &off_24ED628D8;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxSystem>(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24ED62978;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = off_24ED629E8;
  v2 = a1[15];
  if (v2)
  {
    if (a1[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[17]);
      a1[16] = 0;
      a1[17] = 0;
    }
    a1[15] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveBoxSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveBoxSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveBoxSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveBoxSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveBoxSystem>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveBoxWithRoundedCornersSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541148C8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541148C8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114F78, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254114F88 = 0;
    qword_254114F98 = 0;
    qword_254114FA0 = 0xFFFFFFFFLL;
    qword_254114F78 = (uint64_t)&off_24ED7DAA8;
    qword_254114FA8 = (uint64_t)"PrimitiveBoxWithRoundedCornersSystem";
    dword_254114FB0 = 0;
    xmmword_254114FB8 = 0u;
    xmmword_254114FC8 = 0u;
    xmmword_254114FD8 = 0u;
    qword_254114FE8 = 0;
    __cxa_guard_release(&qword_2541148C8);
  }
  return &qword_254114F78;
}

void re::ecs2::initInfo_PrimitiveBoxWithRoundedCornersSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xD4A71245D6CF78D4;
  v5[1] = "PrimitiveBoxWithRoundedCornersSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitiveBoxWithRoundedCornersSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *result;

  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  *result = &off_24ED62BB0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  *a3 = off_24ED62C50;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = off_24ED62CC0;
  v4 = a3[15];
  if (v4)
  {
    if (a3[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[17]);
      a3[16] = 0;
      a3[17] = 0;
    }
    a3[15] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(_OWORD *a1)
{
  _QWORD *result;

  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  *result = &off_24ED62BB0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24ED62C50;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = off_24ED62CC0;
  v2 = a1[15];
  if (v2)
  {
    if (a1[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[17]);
      a1[16] = 0;
      a1[17] = 0;
    }
    a1[15] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveBoxWithRoundedCornersSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveBoxWithRoundedCornersSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveBoxWithRoundedCornersSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveBoxWithRoundedCornersSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveCapsuleSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541148D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541148D0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254114FF0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254115000 = 0;
    qword_254115010 = 0;
    qword_254115018 = 0xFFFFFFFFLL;
    qword_254114FF0 = (uint64_t)&off_24ED7DAA8;
    qword_254115020 = (uint64_t)"PrimitiveCapsuleSystem";
    dword_254115028 = 0;
    xmmword_254115030 = 0u;
    xmmword_254115040 = 0u;
    xmmword_254115050 = 0u;
    qword_254115060 = 0;
    __cxa_guard_release(&qword_2541148D0);
  }
  return &qword_254114FF0;
}

void re::ecs2::initInfo_PrimitiveCapsuleSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x62F012C966B9B26ALL;
  v5[1] = "PrimitiveCapsuleSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitiveCapsuleSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveCapsuleSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveCapsuleSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveCapsuleSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveCapsuleSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveCapsuleSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveCapsuleSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::PrimitiveCapsuleSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *result;

  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  *result = &off_24ED62E88;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveCapsuleSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  *a3 = off_24ED62F28;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = off_24ED62F98;
  v4 = a3[15];
  if (v4)
  {
    if (a3[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[17]);
      a3[16] = 0;
      a3[17] = 0;
    }
    a3[15] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::PrimitiveCapsuleSystem>(_OWORD *a1)
{
  _QWORD *result;

  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCapsuleComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  *result = &off_24ED62E88;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveCapsuleSystem>(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24ED62F28;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = off_24ED62F98;
  v2 = a1[15];
  if (v2)
  {
    if (a1[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[17]);
      a1[16] = 0;
      a1[17] = 0;
    }
    a1[15] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveCapsuleSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveCapsuleSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveCapsuleSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveCapsuleSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveCapsuleSystem>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveConeSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541148D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541148D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115068, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254115078 = 0;
    qword_254115088 = 0;
    qword_254115090 = 0xFFFFFFFFLL;
    qword_254115068 = (uint64_t)&off_24ED7DAA8;
    qword_254115098 = (uint64_t)"PrimitiveConeSystem";
    dword_2541150A0 = 0;
    xmmword_2541150A8 = 0u;
    xmmword_2541150B8 = 0u;
    xmmword_2541150C8 = 0u;
    qword_2541150D8 = 0;
    __cxa_guard_release(&qword_2541148D8);
  }
  return &qword_254115068;
}

void re::ecs2::initInfo_PrimitiveConeSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x3E3E836F1EA3C6B2;
  v5[1] = "PrimitiveConeSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitiveConeSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveConeSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveConeSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveConeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveConeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveConeSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveConeSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::PrimitiveConeSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *result;

  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  *result = &off_24ED63160;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveConeSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  *a3 = off_24ED63200;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = off_24ED63270;
  v4 = a3[15];
  if (v4)
  {
    if (a3[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[17]);
      a3[16] = 0;
      a3[17] = 0;
    }
    a3[15] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::PrimitiveConeSystem>(_OWORD *a1)
{
  _QWORD *result;

  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveConeComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  *result = &off_24ED63160;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveConeSystem>(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24ED63200;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = off_24ED63270;
  v2 = a1[15];
  if (v2)
  {
    if (a1[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[17]);
      a1[16] = 0;
      a1[17] = 0;
    }
    a1[15] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveConeSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveConeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveConeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveConeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveConeSystem>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveCylinderSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541148E0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541148E0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541150E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541150F0 = 0;
    qword_254115100 = 0;
    qword_254115108 = 0xFFFFFFFFLL;
    qword_2541150E0 = (uint64_t)&off_24ED7DAA8;
    qword_254115110 = (uint64_t)"PrimitiveCylinderSystem";
    dword_254115118 = 0;
    xmmword_254115120 = 0u;
    xmmword_254115130 = 0u;
    xmmword_254115140 = 0u;
    qword_254115150 = 0;
    __cxa_guard_release(&qword_2541148E0);
  }
  return &qword_2541150E0;
}

void re::ecs2::initInfo_PrimitiveCylinderSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x4B4DB97F8123C98;
  v5[1] = "PrimitiveCylinderSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitiveCylinderSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveCylinderSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveCylinderSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveCylinderSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveCylinderSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveCylinderSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveCylinderSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::PrimitiveCylinderSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *result;

  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  *result = &off_24ED63438;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveCylinderSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  *a3 = off_24ED634D8;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = off_24ED63548;
  v4 = a3[15];
  if (v4)
  {
    if (a3[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[17]);
      a3[16] = 0;
      a3[17] = 0;
    }
    a3[15] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::PrimitiveCylinderSystem>(_OWORD *a1)
{
  _QWORD *result;

  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveCylinderComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  *result = &off_24ED63438;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveCylinderSystem>(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24ED634D8;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = off_24ED63548;
  v2 = a1[15];
  if (v2)
  {
    if (a1[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[17]);
      a1[16] = 0;
      a1[17] = 0;
    }
    a1[15] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveCylinderSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveCylinderSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveCylinderSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveCylinderSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveCylinderSystem>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitivePlaneSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541148E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541148E8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115158, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254115168 = 0;
    qword_254115178 = 0;
    qword_254115180 = 0xFFFFFFFFLL;
    qword_254115158 = (uint64_t)&off_24ED7DAA8;
    qword_254115188 = (uint64_t)"PrimitivePlaneSystem";
    dword_254115190 = 0;
    xmmword_254115198 = 0u;
    xmmword_2541151A8 = 0u;
    xmmword_2541151B8 = 0u;
    qword_2541151C8 = 0;
    __cxa_guard_release(&qword_2541148E8);
  }
  return &qword_254115158;
}

void re::ecs2::initInfo_PrimitivePlaneSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x89DCFC1F499118C8;
  v5[1] = "PrimitivePlaneSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitivePlaneSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitivePlaneSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitivePlaneSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitivePlaneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitivePlaneSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitivePlaneSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitivePlaneSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::PrimitivePlaneSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *result;

  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  *result = &off_24ED63710;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitivePlaneSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  *a3 = off_24ED637B0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = off_24ED63820;
  v4 = a3[15];
  if (v4)
  {
    if (a3[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[17]);
      a3[16] = 0;
      a3[17] = 0;
    }
    a3[15] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::PrimitivePlaneSystem>(_OWORD *a1)
{
  _QWORD *result;

  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePlaneComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  *result = &off_24ED63710;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitivePlaneSystem>(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24ED637B0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = off_24ED63820;
  v2 = a1[15];
  if (v2)
  {
    if (a1[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[17]);
      a1[16] = 0;
      a1[17] = 0;
    }
    a1[15] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitivePlaneSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitivePlaneSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitivePlaneSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitivePlaneSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitivePlaneSystem>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitivePyramidSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541148F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541148F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541151D0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541151E0 = 0;
    qword_2541151F0 = 0;
    qword_2541151F8 = 0xFFFFFFFFLL;
    qword_2541151D0 = (uint64_t)&off_24ED7DAA8;
    qword_254115200 = (uint64_t)"PrimitivePyramidSystem";
    dword_254115208 = 0;
    xmmword_254115210 = 0u;
    xmmword_254115220 = 0u;
    xmmword_254115230 = 0u;
    qword_254115240 = 0;
    __cxa_guard_release(&qword_2541148F0);
  }
  return &qword_2541151D0;
}

void re::ecs2::initInfo_PrimitivePyramidSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x901A0DAEED3BCC30;
  v5[1] = "PrimitivePyramidSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitivePyramidSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitivePyramidSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitivePyramidSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitivePyramidSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitivePyramidSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitivePyramidSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitivePyramidSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::PrimitivePyramidSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *result;

  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  *result = &off_24ED639E8;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitivePyramidSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  *a3 = off_24ED63A88;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = off_24ED63AF8;
  v4 = a3[15];
  if (v4)
  {
    if (a3[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[17]);
      a3[16] = 0;
      a3[17] = 0;
    }
    a3[15] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::PrimitivePyramidSystem>(_OWORD *a1)
{
  _QWORD *result;

  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitivePyramidComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  *result = &off_24ED639E8;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitivePyramidSystem>(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24ED63A88;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = off_24ED63AF8;
  v2 = a1[15];
  if (v2)
  {
    if (a1[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[17]);
      a1[16] = 0;
      a1[17] = 0;
    }
    a1[15] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitivePyramidSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitivePyramidSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitivePyramidSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitivePyramidSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitivePyramidSystem>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveSphereSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541148F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541148F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115248, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254115258 = 0;
    qword_254115268 = 0;
    qword_254115270 = 0xFFFFFFFFLL;
    qword_254115248 = (uint64_t)&off_24ED7DAA8;
    qword_254115278 = (uint64_t)"PrimitiveSphereSystem";
    dword_254115280 = 0;
    xmmword_254115288 = 0u;
    xmmword_254115298 = 0u;
    xmmword_2541152A8 = 0u;
    qword_2541152B8 = 0;
    __cxa_guard_release(&qword_2541148F8);
  }
  return &qword_254115248;
}

void re::ecs2::initInfo_PrimitiveSphereSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xB3F8B3FD294D0D86;
  v5[1] = "PrimitiveSphereSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitiveSphereSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveSphereSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveSphereSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveSphereSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveSphereSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveSphereSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveSphereSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::PrimitiveSphereSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *result;

  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  *result = &off_24ED63CC0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveSphereSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  *a3 = off_24ED63D60;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = off_24ED63DD0;
  v4 = a3[15];
  if (v4)
  {
    if (a3[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[17]);
      a3[16] = 0;
      a3[17] = 0;
    }
    a3[15] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::PrimitiveSphereSystem>(_OWORD *a1)
{
  _QWORD *result;

  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveSphereComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  *result = &off_24ED63CC0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveSphereSystem>(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24ED63D60;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = off_24ED63DD0;
  v2 = a1[15];
  if (v2)
  {
    if (a1[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[17]);
      a1[16] = 0;
      a1[17] = 0;
    }
    a1[15] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveSphereSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveSphereSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveSphereSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveSphereSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveSphereSystem>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveTetrahedronSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254114900);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254114900))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541152C0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541152D0 = 0;
    qword_2541152E0 = 0;
    qword_2541152E8 = 0xFFFFFFFFLL;
    qword_2541152C0 = (uint64_t)&off_24ED7DAA8;
    qword_2541152F0 = (uint64_t)"PrimitiveTetrahedronSystem";
    dword_2541152F8 = 0;
    xmmword_254115300 = 0u;
    xmmword_254115310 = 0u;
    xmmword_254115320 = 0u;
    qword_254115330 = 0;
    __cxa_guard_release(&qword_254114900);
  }
  return &qword_2541152C0;
}

void re::ecs2::initInfo_PrimitiveTetrahedronSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x21CCEC08E11CF988;
  v5[1] = "PrimitiveTetrahedronSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitiveTetrahedronSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveTetrahedronSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveTetrahedronSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveTetrahedronSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveTetrahedronSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveTetrahedronSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveTetrahedronSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::PrimitiveTetrahedronSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *result;

  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  *result = &off_24ED63F98;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveTetrahedronSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  *a3 = off_24ED64038;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = off_24ED640A8;
  v4 = a3[15];
  if (v4)
  {
    if (a3[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[17]);
      a3[16] = 0;
      a3[17] = 0;
    }
    a3[15] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::PrimitiveTetrahedronSystem>(_OWORD *a1)
{
  _QWORD *result;

  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTetrahedronComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  *result = &off_24ED63F98;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveTetrahedronSystem>(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24ED64038;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = off_24ED640A8;
  v2 = a1[15];
  if (v2)
  {
    if (a1[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[17]);
      a1[16] = 0;
      a1[17] = 0;
    }
    a1[15] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveTetrahedronSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveTetrahedronSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveTetrahedronSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveTetrahedronSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveTetrahedronSystem>, this);
}

uint64_t *re::ecs2::allocInfo_PrimitiveTubeSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254114908);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254114908))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115338, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254115348 = 0;
    qword_254115358 = 0;
    qword_254115360 = 0xFFFFFFFFLL;
    qword_254115338 = (uint64_t)&off_24ED7DAA8;
    qword_254115368 = (uint64_t)"PrimitiveTubeSystem";
    dword_254115370 = 0;
    xmmword_254115378 = 0u;
    xmmword_254115388 = 0u;
    xmmword_254115398 = 0u;
    qword_2541153A8 = 0;
    __cxa_guard_release(&qword_254114908);
  }
  return &qword_254115338;
}

void re::ecs2::initInfo_PrimitiveTubeSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x3E41BDBAC67DCBF4;
  v5[1] = "PrimitiveTubeSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x18000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PrimitiveTubeSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PrimitiveTubeSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PrimitiveTubeSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PrimitiveTubeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PrimitiveTubeSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PrimitiveTubeSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PrimitiveTubeSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::PrimitiveTubeSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *result;

  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::PrimitiveComponentSystemBase((uint64_t)a3);
  *result = &off_24ED64270;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::PrimitiveTubeSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  *a3 = off_24ED64310;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 18);
  a3[13] = off_24ED64380;
  v4 = a3[15];
  if (v4)
  {
    if (a3[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[17]);
      a3[16] = 0;
      a3[17] = 0;
    }
    a3[15] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::PrimitiveTubeSystem>(_OWORD *a1)
{
  _QWORD *result;

  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  result = (_QWORD *)re::ecs2::PrimitiveComponentSystemBase<re::ecs2::PrimitiveTubeComponent>::PrimitiveComponentSystemBase((uint64_t)a1);
  *result = &off_24ED64270;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::PrimitiveTubeSystem>(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_24ED64310;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 18);
  a1[13] = off_24ED64380;
  v2 = a1[15];
  if (v2)
  {
    if (a1[16])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[17]);
      a1[16] = 0;
      a1[17] = 0;
    }
    a1[15] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_PrimitiveTubeSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PrimitiveTubeSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PrimitiveTubeSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PrimitiveTubeSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PrimitiveTubeSystem>, this);
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveBoxComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)&result = 0x1000100010001;
  *(_QWORD *)(v1 + 28) = 0x1000100010001;
  *(_OWORD *)(v1 + 36) = xmmword_2260F8390;
  *(_WORD *)(v1 + 52) = 257;
  *(_BYTE *)(v1 + 54) = 0;
  *(_WORD *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 58) = 1;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_QWORD *)(v1 + 112) = 0x1000100010001;
  *(_OWORD *)(v1 + 120) = xmmword_2260F8390;
  *(_WORD *)(v1 + 136) = 257;
  *(_BYTE *)(v1 + 138) = 0;
  *(_WORD *)(v1 + 140) = 1;
  *(_QWORD *)v1 = &off_24ED43B10;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveBoxWithRoundedCornersComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)&result = 0x3000100010001;
  *(_QWORD *)(v1 + 28) = 0x3000100010001;
  *(_WORD *)(v1 + 36) = 4;
  *(_OWORD *)(v1 + 40) = xmmword_2260F83A0;
  *(_DWORD *)(v1 + 56) = 1065353216;
  *(_DWORD *)(v1 + 60) = 16777473;
  *(_WORD *)(v1 + 64) = 1;
  *(_BYTE *)(v1 + 66) = 0;
  *(_WORD *)(v1 + 68) = 0;
  *(_BYTE *)(v1 + 70) = 1;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)(v1 + 120) = 0x3000100010001;
  *(_WORD *)(v1 + 128) = 4;
  *(_OWORD *)(v1 + 132) = xmmword_2260F83A0;
  *(_DWORD *)(v1 + 148) = 1065353216;
  *(_DWORD *)(v1 + 152) = 16777473;
  *(_WORD *)(v1 + 156) = 1;
  *(_BYTE *)(v1 + 158) = 0;
  *(_WORD *)(v1 + 160) = 1;
  *(_QWORD *)v1 = &off_24ED59678;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveCapsuleComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 65544;
  *(_WORD *)(v1 + 32) = 4;
  result = 2.00000047;
  *(_QWORD *)(v1 + 36) = 0x400000003F000000;
  *(_WORD *)(v1 + 44) = 257;
  *(_BYTE *)(v1 + 46) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 50) = 1;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 65544;
  *(_WORD *)(v1 + 108) = 4;
  *(_QWORD *)(v1 + 112) = 0x400000003F000000;
  *(_WORD *)(v1 + 120) = 257;
  *(_BYTE *)(v1 + 122) = 0;
  *(_WORD *)(v1 + 124) = 1;
  *(_QWORD *)v1 = &off_24ED43BF8;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveConeComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 65544;
  result = 0.0000305175853;
  *(_QWORD *)(v1 + 32) = 0x3F0000003F800000;
  *(_DWORD *)(v1 + 40) = 65793;
  *(_WORD *)(v1 + 44) = 0;
  *(_BYTE *)(v1 + 46) = 1;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 65544;
  *(_QWORD *)(v1 + 100) = 0x3F0000003F800000;
  *(_DWORD *)(v1 + 108) = 65793;
  *(_WORD *)(v1 + 112) = 1;
  *(_QWORD *)v1 = &off_24ED43CE0;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveCylinderComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 65544;
  result = 0.0000305175853;
  *(_QWORD *)(v1 + 32) = 0x3F0000003F800000;
  *(_QWORD *)(v1 + 40) = 0x10101013F000000;
  *(_BYTE *)(v1 + 48) = 0;
  *(_WORD *)(v1 + 52) = 0;
  *(_BYTE *)(v1 + 54) = 1;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 65544;
  *(_QWORD *)(v1 + 108) = 0x3F0000003F800000;
  *(_QWORD *)(v1 + 116) = 0x10101013F000000;
  *(_BYTE *)(v1 + 124) = 0;
  *(_WORD *)(v1 + 128) = 1;
  *(_QWORD *)v1 = &off_24ED43DC8;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitivePlaneComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 65537;
  *(_WORD *)(v1 + 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 36) = result;
  *(_DWORD *)(v1 + 44) = 0;
  *(_WORD *)(v1 + 48) = 257;
  *(_DWORD *)(v1 + 52) = 2;
  *(_WORD *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 58) = 1;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_DWORD *)(v1 + 112) = 65537;
  *(_WORD *)(v1 + 116) = 0;
  *(double *)(v1 + 120) = result;
  *(_DWORD *)(v1 + 128) = 0;
  *(_WORD *)(v1 + 132) = 257;
  *(_DWORD *)(v1 + 136) = 2;
  *(_WORD *)(v1 + 140) = 1;
  *(_QWORD *)v1 = &off_24ED59760;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitivePyramidComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_WORD *)(v1 + 28) = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 32) = result;
  *(_DWORD *)(v1 + 40) = 1065353216;
  *(_WORD *)(v1 + 44) = 257;
  *(_BYTE *)(v1 + 46) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 50) = 1;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_WORD *)(v1 + 104) = 1;
  *(double *)(v1 + 108) = result;
  *(_DWORD *)(v1 + 116) = 1065353216;
  *(_WORD *)(v1 + 120) = 257;
  *(_BYTE *)(v1 + 122) = 0;
  *(_WORD *)(v1 + 124) = 1;
  *(_QWORD *)v1 = &off_24ED59848;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveSphereComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_WORD *)(v1 + 28) = 8;
  *(_DWORD *)(v1 + 32) = 1056964608;
  *(_WORD *)(v1 + 36) = 257;
  *(_BYTE *)(v1 + 38) = 0;
  *(_WORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 42) = 1;
  result = 0.0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_WORD *)(v1 + 96) = 8;
  *(_DWORD *)(v1 + 100) = 1056964608;
  *(_WORD *)(v1 + 104) = 257;
  *(_BYTE *)(v1 + 106) = 0;
  *(_WORD *)(v1 + 108) = 1;
  *(_QWORD *)v1 = &off_24ED43EB0;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveTetrahedronComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_WORD *)(v1 + 28) = 1;
  *(_DWORD *)(v1 + 32) = 1065353216;
  *(_WORD *)(v1 + 36) = 257;
  *(_BYTE *)(v1 + 38) = 0;
  *(_WORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 42) = 1;
  result = 0.0;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_WORD *)(v1 + 96) = 1;
  *(_DWORD *)(v1 + 100) = 1065353216;
  *(_WORD *)(v1 + 104) = 257;
  *(_BYTE *)(v1 + 106) = 0;
  *(_WORD *)(v1 + 108) = 1;
  *(_QWORD *)v1 = &off_24ED59930;
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::PrimitiveTubeComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 28) = 65544;
  result = 0.00000190734908;
  *(_QWORD *)(v1 + 32) = 0x3EC000003F800000;
  *(_DWORD *)(v1 + 40) = 1056964608;
  *(_WORD *)(v1 + 44) = 257;
  *(_BYTE *)(v1 + 46) = 0;
  *(_WORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 50) = 1;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_DWORD *)(v1 + 104) = 65544;
  *(_QWORD *)(v1 + 108) = 0x3EC000003F800000;
  *(_DWORD *)(v1 + 116) = 1056964608;
  *(_WORD *)(v1 + 120) = 257;
  *(_BYTE *)(v1 + 122) = 0;
  *(_WORD *)(v1 + 124) = 1;
  *(_QWORD *)v1 = &off_24ED59A18;
  return result;
}

id re::internal::defaultRetain<re::ecs2::PrimitiveBoxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveBoxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveBoxWithRoundedCornersSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::PrimitiveCapsuleSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveCapsuleSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::PrimitiveConeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveConeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::PrimitiveCylinderSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveCylinderSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::PrimitivePlaneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitivePlaneSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::PrimitivePyramidSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitivePyramidSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::PrimitiveSphereSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveSphereSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::PrimitiveTetrahedronSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveTetrahedronSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::PrimitiveTubeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PrimitiveTubeSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_VideoMaterialAttachment(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541153B8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541153B8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541154F0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254115500 = 0;
    qword_254115510 = 0;
    qword_254115518 = 0xFFFFFFFFLL;
    qword_2541154F0 = (uint64_t)&off_24ED7DAA8;
    qword_254115520 = (uint64_t)"VideoMaterialAttachment";
    dword_254115528 = 0;
    xmmword_254115530 = 0u;
    unk_254115540 = 0u;
    xmmword_254115550 = 0u;
    qword_254115560 = 0;
    __cxa_guard_release(&qword_2541153B8);
  }
  return &qword_2541154F0;
}

void re::ecs2::initInfo_VideoMaterialAttachment(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0x5307989427F46ACALL;
  v15[1] = "VideoMaterialAttachment";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_2541153C0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541153C0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "source";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254115488 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::StringID>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "parameterName";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254115490 = v13;
      __cxa_guard_release(&qword_2541153C0);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254115488;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoMaterialAttachment>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoMaterialAttachment>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoMaterialAttachment>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoMaterialAttachment>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

void re::internal::defaultConstruct<re::ecs2::VideoMaterialAttachment>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = 0;
  a3[1] = &str_110;
  a3[2] = 0;
  a3[3] = &str_110;
}

void re::internal::defaultDestruct<re::ecs2::VideoMaterialAttachment>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::StringID::destroyString((re::StringID *)(a3 + 16));
  re::StringID::destroyString((re::StringID *)a3);
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::VideoMaterialAttachment>(_QWORD *result)
{
  *result = 0;
  result[1] = &str_110;
  result[2] = 0;
  result[3] = &str_110;
  return result;
}

void re::internal::defaultDestructV2<re::ecs2::VideoMaterialAttachment>(uint64_t a1)
{
  re::StringID::destroyString((re::StringID *)(a1 + 16));
  re::StringID::destroyString((re::StringID *)a1);
}

uint64_t re::ecs2::introspect_VideoMaterialAttachment(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoMaterialAttachment", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoMaterialAttachment, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoMaterialAttachment, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoMaterialAttachment>, this);
}

uint64_t *re::ecs2::allocInfo_VideoComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541153D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541153D0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254115568, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254115578 = 0;
    qword_254115588 = 0;
    qword_254115590 = 0xFFFFFFFFLL;
    qword_254115568 = (uint64_t)&off_24ED7DAA8;
    qword_254115598 = (uint64_t)"VideoComponent";
    dword_2541155A0 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2541155D8 = 0;
    __cxa_guard_release(&qword_2541153D0);
  }
  return &qword_254115568;
}

void re::ecs2::initInfo_VideoComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  const re::IntrospectionBase *v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  const re::IntrospectionBase *v44;
  void *v45;
  uint64_t v46;
  __int128 v47;
  _QWORD v48[2];
  __int128 v49;

  v48[0] = 0xEC997E67076F9DC4;
  v48[1] = "VideoComponent";
  re::StringID::destroyString((re::StringID *)v48);
  *((_OWORD *)this + 2) = v49;
  v4 = atomic_load((unsigned __int8 *)&qword_2541153C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541153C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254115498 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "material";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541154A0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "m_video";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0xA800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541154A8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = re::IntrospectionInfo<re::DynamicArray<re::ecs2::VideoMaterialAttachment>>::get(1);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "m_attachments";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x5000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2541154B0 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::ecs2::introspect_VideoViewingMode((re::ecs2 *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "desiredViewingMode";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x3800000008;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_2541154B8 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::ecs2::introspect_VideoViewingMode((re::ecs2 *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "currentViewingMode";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x3900000009;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_2541154C0 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v29 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "currentImageSize";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x400000000ALL;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_2541154C8 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::introspect_BOOL((re *)1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "forceStereoSideBySide";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x480000000BLL;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_2541154D0 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::introspect_BOOL((re *)1, v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "m_optOutOfAudioControl";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x10B0000000ELL;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_2541154D8 = v38;
      v39 = re::introspectionAllocator((re *)v38);
      v41 = re::introspect_uint32_t((re *)1, v40);
      v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = "m_traits";
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)(v42 + 24) = 0;
      *(_QWORD *)(v42 + 32) = 0x10C0000000FLL;
      *(_DWORD *)(v42 + 40) = 0;
      *(_QWORD *)(v42 + 48) = 0;
      *(_QWORD *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_2541154E0 = v42;
      v43 = re::introspectionAllocator((re *)v42);
      v45 = re::introspect_BOOL((re *)1, v44);
      v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 72, 8);
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = "m_readyToRender";
      *(_QWORD *)(v46 + 16) = v45;
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0x4900000010;
      *(_DWORD *)(v46 + 40) = 0;
      *(_QWORD *)(v46 + 48) = 0;
      *(_QWORD *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_2541154E8 = v46;
      __cxa_guard_release(&qword_2541153C8);
    }
  }
  *((_QWORD *)this + 2) = 0x12000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 11;
  *((_QWORD *)this + 8) = &qword_254115498;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v47 = v49;
}

double re::internal::defaultConstruct<re::ecs2::VideoComponent>(int a1, int a2, re::ecs2::VideoComponent *this)
{
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::VideoComponent::VideoComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VideoComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::VideoComponent>(re::ecs2::VideoComponent *this)
{
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::VideoComponent::VideoComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VideoComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VideoComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VideoComponentSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541153D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541153D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541155E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541155F0 = 0;
    qword_254115600 = 0;
    qword_254115608 = 0xFFFFFFFFLL;
    qword_2541155E0 = (uint64_t)&off_24ED7DAA8;
    qword_254115610 = (uint64_t)"VideoComponentSystem";
    dword_254115618 = 0;
    xmmword_254115620 = 0u;
    unk_254115630 = 0u;
    xmmword_254115640 = 0u;
    qword_254115650 = 0;
    __cxa_guard_release(&qword_2541153D8);
  }
  return &qword_2541155E0;
}

void re::ecs2::initInfo_VideoComponentSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xF12E313453CDF762;
  v5[1] = "VideoComponentSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VideoComponentSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VideoComponentSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VideoComponentSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::VideoComponentSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::VideoComponentSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VideoComponentSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VideoComponentSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::VideoComponentSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  re::ecs2::System::System(a3, 1, 1);
  *(_QWORD *)v3 = &off_24ED6E020;
  *(_BYTE *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::VideoComponentSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::VideoComponentSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  re::ecs2::System::System(a1, 1, 1);
  *(_QWORD *)v1 = &off_24ED6E020;
  *(_BYTE *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 200) = 0;
  *(_DWORD *)(v1 + 208) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::VideoComponentSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VideoComponentSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoComponentSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoComponentSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoComponentSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoComponentSystem>, this);
}

uint64_t re::ecs2::VideoMaterialAttachment::isTextureAttachment(re::ecs2::VideoMaterialAttachment *this, const re::StringID *a2)
{
  uint64_t v2;
  const char *v3;
  uint64_t result;
  const char *v5;

  v2 = *(_QWORD *)this >> 1;
  if (v2 == 0x32970A2E88169C84)
  {
    v5 = (const char *)*((_QWORD *)this + 1);
    if (v5 != "REVideoAttachmentConstantImageFunction")
      return strcmp(v5, "REVideoAttachmentConstantImageFunction") != 0;
  }
  else
  {
    if (v2 != 0x41C03F11B6A8BA59)
      return 1;
    v3 = (const char *)*((_QWORD *)this + 1);
    if (v3 != "REVideoAttachmentConstantYCbCrMatrix")
    {
      result = strcmp(v3, "REVideoAttachmentConstantYCbCrMatrix");
      if (!(_DWORD)result)
        return result;
      return 1;
    }
  }
  return 0;
}

void re::ecs2::VideoComponent::~VideoComponent(re::ecs2::VideoComponent *this)
{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED6DFD0;
  v2 = (re::ecs2::VideoComponent *)((char *)this + 32);
  re::AssetHandle::~AssetHandle((re::ecs2::VideoComponent *)((char *)this + 168));
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)this + 120);
  re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::deinit((uint64_t)this + 80);
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::VideoComponent::~VideoComponent(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::VideoComponent::removeAttachment(uint64_t a1, const StringID *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  StringID *v28;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD v31[2];
  unint64_t v32;
  unint64_t v33;

  re::StringID::StringID((re::StringID *)v30, a2);
  v28 = (StringID *)a2;
  re::StringID::StringID((re::StringID *)v31, a2 + 1);
  v4 = *(_QWORD *)(a1 + 96);
  if (!v4)
    goto LABEL_19;
  v29 = a1;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 112);
    v8 = v30[0];
    v9 = (uint64_t *)(v7 + 32 * v6);
    v10 = *v9;
    if ((v30[0] ^ (unint64_t)*v9) <= 1)
      break;
LABEL_13:
    if (v6 != v5)
    {
      v17 = (unint64_t *)(v7 + 32 * v5);
      v18 = v9[1];
      *v9 = 0;
      v9[1] = (uint64_t)&str_110;
      v19 = v17[1];
      v32 = v10 & 0xFFFFFFFFFFFFFFFELL | *v17 & 1;
      v33 = v19;
      *v17 = v10;
      v17[1] = v18;
      re::StringID::destroyString((re::StringID *)&v32);
      v20 = v7 + 32 * v6;
      v21 = *(_QWORD *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 24);
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)(v20 + 24) = &str_110;
      v23 = v17[2];
      v24 = v17[3];
      v17[2] = v21;
      v17[3] = v22;
      v32 = v21 & 0xFFFFFFFFFFFFFFFELL | v23 & 1;
      v33 = v24;
      re::StringID::destroyString((re::StringID *)&v32);
      v4 = *(_QWORD *)(a1 + 96);
    }
    ++v6;
    ++v5;
    if (v6 >= v4)
      goto LABEL_18;
  }
  v12 = (const char *)v30[1];
  v11 = v31[0];
  v13 = (const char *)v31[1];
  while (1)
  {
    v14 = (const char *)v9[1];
    if (v14 != v12 && strcmp(v14, v12)
      || (v11 ^ v9[2]) > 1
      || (v15 = (const char *)v9[3], v15 != v13) && strcmp(v15, v13))
    {
LABEL_12:
      a1 = v29;
      goto LABEL_13;
    }
    if (++v6 >= v4)
      break;
    v16 = v9[4];
    v9 += 4;
    v10 = v16;
    if ((v8 ^ v16) > 1)
      goto LABEL_12;
  }
  a1 = v29;
LABEL_18:
  if (v5 != v4)
  {
    v25 = *(_QWORD *)(a1 + 112) + 32 * v5;
    v26 = 32 * v4 - 32 * v5;
    do
    {
      re::StringID::destroyString((re::StringID *)(v25 + 16));
      re::StringID::destroyString((re::StringID *)v25);
      v25 += 32;
      v26 -= 32;
    }
    while (v26);
    v27 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v5;
    ++*(_DWORD *)(a1 + 104);
    re::StringID::destroyString((re::StringID *)v31);
    re::StringID::destroyString((re::StringID *)v30);
    if (v27 != v5)
      re::DynamicArray<re::ecs2::VideoMaterialAttachment>::add((_anonymous_namespace_ *)(a1 + 120), v28);
  }
  else
  {
LABEL_19:
    re::StringID::destroyString((re::StringID *)v31);
    re::StringID::destroyString((re::StringID *)v30);
  }
}

uint64_t re::ecs2::VideoComponent::getReadyToRender(re::ecs2::VideoComponent *this)
{
  re *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const __CFString *v11;
  const char *v12;
  const __CFString *v13;
  const __CFString *v14;
  int v15;
  const __CFString *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = (re *)re::VideoDefaults::logEnabled(this);
  if ((_DWORD)v2)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = *(_QWORD *)(v4 + 296);
    v6 = *(_QWORD *)(v4 + 24);
    if (!v6 || (*(_BYTE *)(v6 + 288) & 0x80) != 0)
    {
      v10 = *re::videoLogObjects(v2);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        return *((unsigned __int8 *)this + 73);
      v13 = CFSTR("True");
      if (!*((_BYTE *)this + 73))
        v13 = CFSTR("False");
      v15 = 138412546;
      v16 = v13;
      v17 = 2048;
      v18 = v5;
      v12 = "[VideoComponentSystem]->getReadyToRender :: Getting isReadyToRender to %@ with VideoComponent with EntityID %llu";
    }
    else
    {
      v7 = *(_QWORD *)(v6 + 296);
      v8 = *(_QWORD *)(v6 + 24);
      if (!v8 || (*(_BYTE *)(v8 + 288) & 0x80) != 0)
      {
        v10 = *re::videoLogObjects(v2);
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          return *((unsigned __int8 *)this + 73);
        v14 = CFSTR("True");
        if (!*((_BYTE *)this + 73))
          v14 = CFSTR("False");
        v15 = 138412546;
        v16 = v14;
        v17 = 2048;
        v18 = v7;
        v12 = "[VideoComponentSystem]->getReadyToRender :: Getting isReadyToRender to %@ with VideoComponent Parent with EntityID %llu";
      }
      else
      {
        v9 = *(_QWORD *)(v8 + 296);
        v10 = *re::videoLogObjects(v2);
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          return *((unsigned __int8 *)this + 73);
        v11 = CFSTR("True");
        if (!*((_BYTE *)this + 73))
          v11 = CFSTR("False");
        v15 = 138412546;
        v16 = v11;
        v17 = 2048;
        v18 = v9;
        v12 = "[VideoComponentSystem]->getReadyToRender :: Getting isReadyToRender to %@ with VideoComponent Parent Paren"
              "t with EntityID %llu";
      }
    }
    _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v15, 0x16u);
  }
  return *((unsigned __int8 *)this + 73);
}

void re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded(re::ecs2::VideoComponent *this)
{
  re::AssetHandle *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  const char ***v15;
  uint64_t v16;
  const char **v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;

  v2 = (re::ecs2::VideoComponent *)((char *)this + 32);
  v3 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::ecs2::VideoComponent *)((char *)this + 32));
  v4 = (uint64_t *)((char *)this + 256);
  if (!v3)
  {
    *(_DWORD *)((char *)this + 263) = 0;
    *v4 = 0;
    return;
  }
  v5 = v3;
  v6 = *v4;
  v7 = *((_QWORD *)re::AssetHandle::assetInfo(v2) + 10);
  if (v7 == -1)
    v7 = 0;
  if (v6 != v7)
  {
    v8 = *((_QWORD *)re::AssetHandle::assetInfo(v2) + 10);
    if (v8 == -1)
      v8 = 0;
    *v4 = v8;
    v9 = *(_QWORD *)(v5 + 1664);
    if (v9)
    {
      v10 = *(_QWORD **)(v9 + 16);
      if (v10)
      {
        v11 = v10 + 1;
        v12 = v10[15];
        if (v12)
        {
          v13 = 0;
          v14 = 0;
          v15 = (const char ***)v10[16];
          v16 = 8 * v12;
          while (1)
          {
            v17 = *v15;
            if (v13)
            {
              v13 = 1;
              if (v14)
                goto LABEL_15;
            }
            else
            {
              v13 = strcmp(*v17, "VideoColor") == 0;
              if (v14)
              {
LABEL_15:
                v14 = 1;
                goto LABEL_16;
              }
            }
            v14 = strcmp(*v17, "VideoColorOpaque") == 0;
LABEL_16:
            ++v15;
            v16 -= 8;
            if (!v16)
              goto LABEL_22;
          }
        }
        v14 = 0;
        v13 = 0;
LABEL_22:
        v45 = v10 + 34;
        v19 = v10[36];
        if (v19 < 0x10)
          goto LABEL_28;
        v20 = 0;
        v21 = v10[34];
        v22 = v19 >> 4;
        while (1)
        {
          v23 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v21 + v20)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v46 = (unsigned __int16)~v23;
          if (v23 != 0xFFFF)
            break;
          v20 += 16;
          if (!--v22)
            goto LABEL_28;
        }
        v24 = __clz(__rbit64((unsigned __int16)~v23)) + v20;
        v47 = v24;
        if (v24 == -1)
        {
LABEL_28:
          v43 = 0;
          v44 = 0;
          v42 = 0;
LABEL_29:
          v45 = v10 + 100;
          v25 = v10[102];
          if (v25 < 0x10)
            goto LABEL_35;
          v26 = 0;
          v27 = v10[100];
          v28 = v25 >> 4;
          while (1)
          {
            v29 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v27 + v26)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
            v46 = (unsigned __int16)~v29;
            if (v29 != 0xFFFF)
              break;
            v26 += 16;
            if (!--v28)
              goto LABEL_35;
          }
          v30 = __clz(__rbit64((unsigned __int16)~v29)) + v26;
          v47 = v30;
          if (v30 == -1)
          {
LABEL_35:
            v41 = 0;
            v31 = 0;
            v32 = 0;
            v33 = 0;
            v34 = 0;
            v35 = 0;
            v36 = 0;
LABEL_36:

            LOBYTE(v9) = v31 & v32 & v33 & v34 & v35 & v36;
            v18 = v42 & BYTE4(v42) & v43 & v44 & BYTE4(v43) & BYTE4(v44) & BYTE4(v41) & v41;
            goto LABEL_37;
          }
          v36 = 0;
          v35 = 0;
          v34 = 0;
          v33 = 0;
          v32 = 0;
          v31 = 0;
          v41 = 0;
          while (1)
          {
            v40 = *(_QWORD *)(v45[1] + 40 * v30 + 16);
            if (v40 <= 0x434F49B34064CA12)
            {
              switch(v40)
              {
                case 0x267D7E6C64117D48:
                  BYTE4(v41) = 1;
                  break;
                case 0x434F49B3406455B4:
                  v31 = 1;
                  break;
                case 0x434F49B3406455D3:
                  v34 = 1;
                  break;
                default:
                  goto LABEL_73;
              }
            }
            else if (v40 > 0x434F49B340653E71)
            {
              if (v40 == 0x434F49B340653E72)
              {
                v33 = 1;
              }
              else
              {
                if (v40 != 0x5D7F34ED9D59B3C2)
                {
LABEL_73:
                  if (v40 == 0x434F49B340653E91)
                    v36 = 1;
                  goto LABEL_76;
                }
                LOBYTE(v41) = 1;
              }
            }
            else if (v40 == 0x434F49B34064CA13)
            {
              v32 = 1;
            }
            else
            {
              if (v40 != 0x434F49B34064CA32)
                goto LABEL_73;
              v35 = 1;
            }
LABEL_76:
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v45);
            v30 = v47;
            if (v47 == -1)
              goto LABEL_36;
          }
        }
        v42 = 0;
        v43 = 0;
        v44 = 0;
        while (1)
        {
          v37 = *(_QWORD *)(v45[1] + 40 * v24 + 16);
          if (v37 <= 0x2BBFE8D1A11FB57DLL)
          {
            if (v37 == 0x9A2E8768349D9F0)
            {
              LOBYTE(v42) = 1;
            }
            else
            {
              if (v37 != 0x18BC3918B0504006)
              {
LABEL_51:
                v38 = v37 == 0x732BCA85D2D0C82ALL;
                v39 = HIDWORD(v44);
                if (v38)
                  v39 = 1;
                HIDWORD(v44) = v39;
                goto LABEL_55;
              }
              LOBYTE(v44) = 1;
            }
          }
          else
          {
            switch(v37)
            {
              case 0x2BBFE8D1A11FB57ELL:
                BYTE4(v43) = 1;
                break;
              case 0x5249524C852BDF88:
                LOBYTE(v43) = 1;
                break;
              case 0x76E0F7428E3A3C5ALL:
                BYTE4(v42) = 1;
                break;
              default:
                goto LABEL_51;
            }
          }
LABEL_55:
          re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v45);
          v24 = v47;
          if (v47 == -1)
            goto LABEL_29;
        }
      }
      LOBYTE(v9) = 0;
    }
    v18 = 0;
    v14 = 0;
    v13 = 0;
LABEL_37:
    *((_BYTE *)this + 264) = v13 && v14;
    *((_BYTE *)this + 265) = v18 & 1;
    *((_BYTE *)this + 266) = v9 & 1;
  }
}

uint64_t re::ecs2::VideoComponent::getAverageColor(re::ecs2::VideoComponent *this)
{
  re *v1;
  unsigned __int8 v3;
  NSObject *v4;
  uint8_t v5[8];
  uint64_t v6[3];

  if (*((_QWORD *)this + 22))
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v6, (re::ecs2::VideoComponent *)((char *)this + 168));
    v1 = re::VideoAsset::loadAndConnectForRendering(v6);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
    if (v1)
      return *((_QWORD *)v1 + 78);
  }
  do
    v3 = __ldaxr((unsigned __int8 *)&re::ecs2::VideoComponent::getAverageColor(void)const::__FILE____LINE___logged);
  while (__stlxr(1u, (unsigned __int8 *)&re::ecs2::VideoComponent::getAverageColor(void)const::__FILE____LINE___logged));
  if ((v3 & 1) == 0)
  {
    v4 = *re::videoLogObjects(this);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get average color", v5, 2u);
    }
  }
  return 0;
}

float re::TargetDisplayInfoProvider::{unnamed type#9}::operator()(uint64_t a1)
{
  uint64_t v2;
  float result;
  unsigned __int8 v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  else
  {
    do
      v4 = __ldaxr((unsigned __int8 *)&re::TargetDisplayInfoProvider::{unnamed type#9}::operator()(void)const::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&re::TargetDisplayInfoProvider::{unnamed type#9}::operator()(void)const::__FILE____LINE___logged));
    if ((v4 & 1) == 0)
    {
      v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "Current max nits provider has not been set.", v6, 2u);
      }
    }
    return *(float *)(a1 + 40);
  }
  return result;
}

float re::TargetDisplayInfoProvider::{unnamed type#8}::operator()(uint64_t a1)
{
  uint64_t v2;
  float result;
  unsigned __int8 v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  else
  {
    do
      v4 = __ldaxr((unsigned __int8 *)&re::TargetDisplayInfoProvider::{unnamed type#8}::operator()(void)const::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&re::TargetDisplayInfoProvider::{unnamed type#8}::operator()(void)const::__FILE____LINE___logged));
    if ((v4 & 1) == 0)
    {
      v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "Current min nits provider has not been set.", v6, 2u);
      }
    }
    return *(float *)(a1 + 40);
  }
  return result;
}

uint64_t re::TargetDisplayInfoProvider::{unnamed type#3}::operator()(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  do
    v4 = __ldaxr((unsigned __int8 *)&re::TargetDisplayInfoProvider::{unnamed type#3}::operator()(void)const::__FILE____LINE___logged);
  while (__stlxr(1u, (unsigned __int8 *)&re::TargetDisplayInfoProvider::{unnamed type#3}::operator()(void)const::__FILE____LINE___logged));
  if ((v4 & 1) == 0)
  {
    v5 = *re::graphicsLogObjects(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "Display max brightness nits provider has not been set.", v6, 2u);
    }
  }
  return *(unsigned int *)(a1 + 40);
}

float re::TargetDisplayInfoProvider::{unnamed type#11}::operator()(uint64_t a1)
{
  uint64_t v2;
  float result;
  unsigned __int8 v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  else
  {
    do
      v4 = __ldaxr((unsigned __int8 *)&re::TargetDisplayInfoProvider::{unnamed type#11}::operator()(void)const::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&re::TargetDisplayInfoProvider::{unnamed type#11}::operator()(void)const::__FILE____LINE___logged));
    if ((v4 & 1) == 0)
    {
      v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "Max EDR value provider has not been set.", v6, 2u);
      }
    }
    return *(float *)(a1 + 40);
  }
  return result;
}

void re::ecs2::VideoComponent::processAttachments(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5, uint64_t a6, char a7, int a8)
{
  unsigned __int8 v12;
  re::VideoPlatform *v13;
  re::VideoPlatform *isLegacyDevice;
  char v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  BOOL v21;
  char v22;
  char v23;
  uint64_t v24;
  os_unfair_lock_s **v25;
  char v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  re *v31;
  uint64_t i;
  _BYTE *v33;
  re::VideoDefaults *v34;
  float *v35;
  re::VideoPlatform *v36;
  re::VideoSDRDefaults *v37;
  int v38;
  re::VideoDefaults *v39;
  re::VideoSDRDefaults *v40;
  char v41;
  NSObject *v42;
  const char *v43;
  unsigned int v44;
  re *v45;
  __int128 v46;
  re *v47;
  int v48;
  _QWORD *v49;
  float v50;
  float v51;
  re::VideoSDRDefaults *v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  int v60;
  int v61;
  int v62;
  re::VideoSDRDefaults *v63;
  int v64;
  int v65;
  re::VideoDefaults *v66;
  uint64_t j;
  _BYTE *v68;
  int v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  re::VideoDefaults *v74;
  re *v75;
  int v76;
  int v77;
  re *v80;
  NSObject *v81;
  NSObject *v82;
  const char *v83;
  re *v84;
  re *v85;
  int v86;
  re *v87;
  re::VideoDefaults *v88;
  re *v89;
  re::VideoDefaults *v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  re::VideoDefaults *v97;
  re *v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  re *v109;
  NSObject *v110;
  NSObject *v111;
  NSObject *v112;
  int v113;
  re *v114;
  NSObject *v115;
  _BOOL4 v116;
  NSObject *v117;
  const char *v118;
  NSObject *v119;
  NSObject *v120;
  NSObject *v121;
  NSObject *v122;
  const char *v123;
  const char *v124;
  const char *v125;
  const char *v126;
  const char *v127;
  const char *v128;
  const char *v129;
  NSObject *v130;
  const char *v131;
  int v132;
  re *v133;
  NSObject *v134;
  const char *v135;
  void *v136;
  const char *v137;
  NSObject *v138;
  id v139;
  NSObject *v140;
  uint64_t v141;
  NSObject *v142;
  NSObject *v143;
  NSObject *v144;
  void *v145;
  re *v146;
  NSObject *v147;
  id v148;
  NSObject *v149;
  uint64_t v150;
  re::VideoDefaults *v151;
  int v152;
  int v153;
  __int128 v154;
  __int128 v155;
  uint64_t v157;
  __int128 v158;
  char v159;
  int *v161;
  _QWORD v164[4];
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE v168[80];
  int v169;
  char v170;
  unsigned __int8 v171;
  CFArrayRef v172;
  unsigned __int8 v173;
  _BYTE v174[120];
  int v175;
  uint64_t v176;
  uint64_t v177[4];
  uint64_t v178[4];
  id v179;
  uint64_t v180[4];
  uint64_t v181[4];
  _QWORD v182[4];
  _QWORD v183[4];
  _QWORD v184[4];
  uint64_t v185;
  uint64_t v186[4];
  id v187;
  uint8_t v188[4];
  uint64_t v189;
  uint8_t v190[16];
  __int128 v191;
  __int128 v192;
  _BYTE buf[48];
  __int128 v194;
  uint8_t v195[40];
  uint64_t v196;

  v196 = *MEMORY[0x24BDAC8D0];
  v12 = atomic_load((unsigned __int8 *)&qword_2541153E0);
  if ((v12 & 1) == 0)
  {
    v151 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_2541153E0);
    if ((_DWORD)v151)
    {
      v152 = re::VideoDefaults::overrideStereoMode(v151);
      if (v152 >= 5)
        v153 = 5;
      else
        v153 = v152;
      if (v153 < 0)
        v153 = -1;
      _MergedGlobals_325 = v153;
      __cxa_guard_release(&qword_2541153E0);
    }
  }
  v13 = (re::VideoPlatform *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(*(re::RenderManager ***)(a2 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 296));
  *(_BYTE *)(a1 + 216) = 0;
  *(_WORD *)(a1 + 204) = 0;
  isLegacyDevice = (re::VideoPlatform *)re::VideoPlatform::isLegacyDevice(v13);
  if ((_DWORD)isLegacyDevice)
  {
    *(_BYTE *)(a1 + 216) = 1;
    *(_BYTE *)(a1 + 205) = 1;
  }
  v157 = a2;
  v15 = 0;
  v16 = 0;
  v161 = a3 + 60;
  while (1)
  {
    while (1)
    {
      v17 = v15;
      v18 = &a3[30 * v16];
      if (v18[1])
      {
        if (*v18)
        {
          v19 = &a3[30 * v16];
          if (*((_QWORD *)v19 + 3))
          {
            if (*((_QWORD *)v19 + 2))
              break;
          }
        }
      }
      *(_BYTE *)(a1 + 204) = 0;
      v15 = 1;
      v16 = 1;
      if ((v17 & 1) != 0)
        goto LABEL_18;
    }
    isLegacyDevice = (re::VideoPlatform *)re::VideoPlatform::isLegacyDevice(isLegacyDevice);
    if (!(_DWORD)isLegacyDevice)
      break;
    v20 = &a3[30 * v16];
    if (*((_QWORD *)v20 + 5))
      v21 = *((_QWORD *)v20 + 4) != 0;
    else
      v21 = 0;
    *(_BYTE *)(a1 + 204) = v21;
    v22 = v17 | v21;
    v16 = 1;
    v15 = 1;
    if ((v22 & 1) != 0)
      goto LABEL_18;
  }
  *(_BYTE *)(a1 + 204) = 1;
LABEL_18:
  v23 = 0;
  *(_DWORD *)(a1 + 212) = 0;
  v24 = 1;
  v25 = (os_unfair_lock_s **)a3;
  while (1)
  {
    v26 = v23;
    if (v25[1] && *v25)
    {
      re::TextureHandle::metalTexture(v25, buf);
      v27 = *(void **)buf;
      v25 = (os_unfair_lock_s **)objc_msgSend(*(id *)buf, sel_mipmapLevelCount);
      v28 = (unint64_t)v25;
      if (v27)

      if (v28 >= 2)
        break;
    }
    v25 = (os_unfair_lock_s **)&a3[30 * v24];
    v23 = 1;
    v24 = 2;
    if ((v26 & 1) != 0)
      goto LABEL_27;
  }
  *(_DWORD *)(a1 + 212) = 1;
LABEL_27:
  *(_BYTE *)(a1 + 207) = 0;
  v29 = a2;
  if (a2)
  {
    v25 = (os_unfair_lock_s **)re::VideoDefaults::inverseToneMappingAllowed((re::VideoDefaults *)v25);
    if ((_DWORD)v25)
      v30 = *(_BYTE *)(a2 + 255) != 0;
    else
      v30 = 0;
    *(_BYTE *)(a1 + 207) = v30;
  }
  v31 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)v25);
  if ((_DWORD)v31)
  {
    v130 = (id)*re::videoLogObjects(v31);
    if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 207))
        v131 = "true";
      else
        v131 = "false";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v131;
      _os_log_impl(&dword_224FE9000, v130, OS_LOG_TYPE_DEFAULT, "Needs Inverse Tone-mapping: %s", buf, 0xCu);
    }

  }
  *(_BYTE *)(a1 + 208) = 0;
  if ((a7 & 1) == 0)
  {
    for (i = 0; i != 240; i += 120)
    {
      v33 = &v168[i];
      *((_DWORD *)v33 + 27) = 0;
      *(_QWORD *)(v33 + 100) = 0;
      *(_OWORD *)v33 = 0uLL;
      *((_OWORD *)v33 + 1) = 0uLL;
      *((_OWORD *)v33 + 2) = 0uLL;
      *((_OWORD *)v33 + 3) = 0uLL;
      *((_OWORD *)v33 + 4) = 0uLL;
      *(_OWORD *)(v33 + 76) = 0uLL;
    }
    v34 = (re::VideoDefaults *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)buf, (uint64_t)a3, (uint64_t)v161, (uint64_t)v168);
    v175 = a3[60];
    if (a2 && a6)
    {
      v35 = *(float **)(a2 + 152);
      if (v35)
      {
        v36 = (re::VideoPlatform *)re::VideoDefaults::logEnabled(v34);
        if (!(_DWORD)v36)
        {
LABEL_40:
          v37 = (re::VideoSDRDefaults *)re::VideoPlatform::isLegacyDevice(v36);
          if ((v37 & 1) != 0
            || (v38 = v173, !re::VideoSDRDefaults::gammaToneCurveAllowed(v37))
            || (re::CoreVideoUtils::metalPixelFormatHasHardwareTransferFunction(v169) & 1) != 0
            || (re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)a1),
                !*(_BYTE *)(a1 + 265))
            || !v172
            || v38 == 8)
          {
            v190[0] = 0;
            *(_QWORD *)buf = 0x9A2E8768349D9F0;
            re::MaterialParameterBlock::setConstant(v13, (uint64_t *)buf, 1uLL, v190, 2, (uint64_t)v195);
            v41 = 0;
            *(_QWORD *)v195 = 0;
          }
          else
          {
            v39 = re::VideoColorTransformBase::gammaToneCurve(&v172, (uint64_t)buf);
            if (buf[0])
            {
              *(_OWORD *)v190 = *(_OWORD *)&buf[4];
              v191 = *(_OWORD *)&buf[20];
              if (re::VideoDefaults::logEnabled(v39))
              {
                v145 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDD16A8]), "initWithString:", CFSTR("Applying Gamma Tone Curve:"));
                re::CoreVideoUtils::printColorTransformInfo(&v172, v145);
                v147 = *re::videoLogObjects(v146);
                if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
                {
                  v148 = objc_retainAutorelease(v145);
                  v149 = v147;
                  v150 = objc_msgSend(v148, "cStringUsingEncoding:", 1);
                  *(_DWORD *)v195 = 136315138;
                  *(_QWORD *)&v195[4] = v150;
                  _os_log_impl(&dword_224FE9000, v149, OS_LOG_TYPE_DEFAULT, "%s", v195, 0xCu);

                }
                v29 = v157;
              }
              v187 = *(id *)(v29 + 184);
              re::VideoColorManager::computeGammaToneCurvePowerFunctionTable(a6, &v187, *(os_unfair_lock_s **)(v29 + 64), (uint64_t)v190, (re::TextureHandle *)v184);

              LOBYTE(v183[0]) = 1;
              v186[0] = 0x9A2E8768349D9F0;
              re::MaterialParameterBlock::setConstant(v13, v186, 1uLL, v183, 2, (uint64_t)v195);
              *(_QWORD *)v195 = 0;
              v185 = 0x5D7F34ED9D59B3C2;
              re::MaterialParameterBlock::setTextureHandle(v13, &v185, (re::TextureHandle *)v184, (uint64_t)v186);
              v186[0] = 0;
              v185 = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)v184);
            }
            else
            {
              v144 = *re::videoLogObjects(v39);
              if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v190 = 0;
                _os_log_impl(&dword_224FE9000, v144, OS_LOG_TYPE_DEFAULT, "SDR color transform has no gamma tone curve parameters.", v190, 2u);
              }
              LOBYTE(v186[0]) = 0;
              *(_QWORD *)v190 = 0x9A2E8768349D9F0;
              re::MaterialParameterBlock::setConstant(v13, (uint64_t *)v190, 1uLL, v186, 2, (uint64_t)v195);
              *(_QWORD *)v195 = 0;
              v29 = v157;
            }
            v41 = 1;
          }
          v44 = *(unsigned __int8 *)v35;
          if (v171 == v44)
          {
            re::VideoSDRDefaults::colorSpaceTransformationAllowed(v40);
          }
          else
          {
            if (v172 && (v40 = re::VideoColorTransformBase::conversionMatrix(&v172, (uint64_t)buf), buf[0]))
            {
              v45 = (re *)re::VideoDefaults::logEnabled(v40);
              if ((_DWORD)v45)
              {
                v142 = *re::videoLogObjects(v45);
                v45 = (re *)os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v45)
                {
                  *(_WORD *)v190 = 0;
                  _os_log_impl(&dword_224FE9000, v142, OS_LOG_TYPE_DEFAULT, "Color Space Transformation matrix computed using VideoColorTransform", v190, 2u);
                }
              }
              v158 = *(_OWORD *)&buf[16];
              v155 = *(_OWORD *)&buf[32];
              v46 = v194;
            }
            else
            {
              v47 = (re *)re::VideoDefaults::logEnabled(v40);
              if ((_DWORD)v47)
              {
                v143 = *re::videoLogObjects(v47);
                if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_224FE9000, v143, OS_LOG_TYPE_DEFAULT, "SDR color transform has no color transformation matrix. Using fallback matrix instead", buf, 2u);
                }
              }
              re::ColorHelpers::computeGamutTransformMatrix(v171, v44, (uint64_t)buf);
              v158 = *(_OWORD *)buf;
              v155 = *(_OWORD *)&buf[16];
              v46 = *(_OWORD *)&buf[32];
            }
            v154 = v46;
            if (re::VideoSDRDefaults::colorSpaceTransformationAllowed(v45))
            {
              v48 = 1;
              *(_BYTE *)(a1 + 205) = 1;
              *(_OWORD *)buf = v158;
              *(_OWORD *)&buf[16] = v155;
              *(_OWORD *)&buf[32] = v154;
              *(_QWORD *)v190 = 0x30C8E7322C94082DLL;
              re::MaterialParameterBlock::setConstant(v13, (uint64_t *)v190, 0x30uLL, buf, 49, (uint64_t)v184);
              v184[0] = 0;
              LOBYTE(v182[0]) = 1;
              *(_QWORD *)v190 = 0x76E0F7428E3A3C5ALL;
              re::MaterialParameterBlock::setConstant(v13, (uint64_t *)v190, 1uLL, v182, 2, (uint64_t)v183);
              v183[0] = 0;
              *(_OWORD *)v190 = v158;
              v191 = v155;
              v192 = v154;
              v181[0] = 0x5249524C852BDF88;
              re::MaterialParameterBlock::setConstant(v13, v181, 0x30uLL, v190, 49, (uint64_t)v182);
              v182[0] = 0;
LABEL_67:
              v49 = *(_QWORD **)(v29 + 288);
              v50 = re::TargetDisplayInfoProvider::{unnamed type#9}::operator()((uint64_t)(v49 + 48));
              v51 = re::TargetDisplayInfoProvider::{unnamed type#8}::operator()((uint64_t)(v49 + 42));
              v52 = (re::VideoSDRDefaults *)re::TargetDisplayInfoProvider::{unnamed type#3}::operator()((uint64_t)(v49 + 12));
              v53 = *(float *)(*(_QWORD *)(v29 + 112) + 2180);
              v54 = v50 * (float)(v53 + (float)(v35[41] * (float)(v35[42] - v53)));
              v55 = 1.0;
              if (v50 > 0.0001)
              {
                if (v54 <= 0.0001)
                {
                  v55 = 1.22;
                }
                else
                {
                  v56 = 1.0 - (float)(v54 / v50);
                  if (v56 > 1.0)
                    v56 = 1.0;
                  if (v56 < 0.0)
                    v56 = 0.0;
                  v57 = (float)(v56 * 0.22) + 1.0;
                  if (v57 > 1.22)
                    v57 = 1.22;
                  if (v57 >= 1.0)
                    v55 = v57;
                  else
                    v55 = 1.0;
                }
              }
              v58 = v50 / (float)v52;
              if (v58 > 1.0)
                v58 = 1.0;
              if (v58 >= 0.0)
                v59 = v58;
              else
                v59 = 0.0;
              v60 = re::VideoSDRDefaults::brightnessScalingAllowed(v52);
              if (v49[52])
                v61 = v60;
              else
                v61 = 0;
              if (!v49[16])
                v61 = 0;
              if (v49[76])
                v62 = v61;
              else
                v62 = 0;
              LOBYTE(v178[0]) = 0;
              v180[0] = 0x18BC3918B0504006;
              re::MaterialParameterBlock::setConstant(v13, v180, 1uLL, v178, 2, (uint64_t)v181);
              v181[0] = 0;
              if (v62 == 1)
              {
                *(float *)v177 = v59;
                v178[0] = 0x2BBFE8D1A11FB57ELL;
                re::MaterialParameterBlock::setConstant(v13, v178, 4uLL, v177, 1, (uint64_t)v180);
                v180[0] = 0;
              }
              v64 = re::VideoSDRDefaults::gammaBoostAllowed(v63);
              if (v170 == 2)
                v65 = 0;
              else
                v65 = v64;
              if (v65 == 1)
              {
                v179 = *(id *)(v29 + 184);
                re::VideoColorManager::computeBoostPowerFunctionTable(a6, &v179, *(os_unfair_lock_s **)(v29 + 64), (re::TextureHandle *)v188, v55);

                LOBYTE(v176) = 1;
                v177[0] = 0x732BCA85D2D0C82ALL;
                re::MaterialParameterBlock::setConstant(v13, v177, 1uLL, &v176, 2, (uint64_t)v178);
                v178[0] = 0;
                v176 = 0x267D7E6C64117D48;
                re::MaterialParameterBlock::setTextureHandle(v13, &v176, (re::TextureHandle *)v188, (uint64_t)v177);
                v177[0] = 0;
                re::TextureHandle::invalidate((re::TextureHandle *)v188);
              }
              else
              {
                v188[0] = 0;
                v177[0] = 0x732BCA85D2D0C82ALL;
                re::MaterialParameterBlock::setConstant(v13, v177, 1uLL, v188, 2, (uint64_t)v178);
                v178[0] = 0;
              }
              if (re::VideoDefaults::logEnabled(v66))
              {
                v159 = v41;
                objc_msgSend(MEMORY[0x24BDD16A8], "stringWithFormat:", CFSTR("SDR Processing Parameters"));
                v136 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v136, "appendFormat:", CFSTR("\n                    Current Max Nits: %f"), v50);
                objc_msgSend(v136, "appendFormat:", CFSTR("\n                        Minimum Nits: %f"), v51);
                objc_msgSend(v136, "appendFormat:", CFSTR("\n               Ambient Light in Nits: %f"), v54);
                objc_msgSend(v136, "appendFormat:", CFSTR("\n         Mean Passthrough Brightness: %f"), v53);
                objc_msgSend(v136, "appendFormat:", CFSTR("\n                        PreBlendMode: %s"), "True");
                objc_msgSend(v136, "appendFormat:", CFSTR("\n              VideoBrightnessScaling: %s"), "False");
                objc_msgSend(v136, "appendFormat:", CFSTR("\n                    Brightness Scale: %f"), v59);
                objc_msgSend(v136, "appendFormat:", CFSTR("\n                         Gamma Boost: %f"), v55);
                if (v48)
                  v137 = "True";
                else
                  v137 = "False";
                v138 = *re::videoLogObjects((re *)objc_msgSend(v136, "appendFormat:", CFSTR("\n          Color Space Transformation: %s"), v137));
                if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
                {
                  v139 = objc_retainAutorelease(v136);
                  v140 = v138;
                  v141 = objc_msgSend(v139, "cStringUsingEncoding:", 1);
                  *(_DWORD *)v188 = 136315138;
                  v189 = v141;
                  _os_log_impl(&dword_224FE9000, v140, OS_LOG_TYPE_DEFAULT, "%s", v188, 0xCu);

                }
                v41 = v159;
              }
              *(_BYTE *)(a1 + 208) = v48 | v41 | v65 | v62;
              goto LABEL_102;
            }
          }
          LOBYTE(v184[0]) = 0;
          *(_QWORD *)v190 = 0x76E0F7428E3A3C5ALL;
          re::MaterialParameterBlock::setConstant(v13, (uint64_t *)v190, 1uLL, v184, 2, (uint64_t)buf);
          v48 = 0;
          *(_QWORD *)buf = 0;
          goto LABEL_67;
        }
        re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)a1);
        v132 = *(unsigned __int8 *)(a1 + 265);
        v134 = *re::videoLogObjects(v133);
        v36 = (re::VideoPlatform *)os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT);
        if (v132)
        {
          if (!(_DWORD)v36)
            goto LABEL_40;
          *(_WORD *)buf = 0;
          v135 = "Video material supports gamma tone curve.";
        }
        else
        {
          if (!(_DWORD)v36)
            goto LABEL_40;
          *(_WORD *)buf = 0;
          v135 = "Video material does not support gamma tone curve.";
        }
        _os_log_impl(&dword_224FE9000, v134, OS_LOG_TYPE_DEFAULT, v135, buf, 2u);
        goto LABEL_40;
      }
      v42 = *re::videoLogObjects(v34);
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
LABEL_102:
        for (j = 0; j != -240; j -= 120)
        {
          v68 = &v168[j];
          if (*(_QWORD *)&v174[j + 104])
            re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v174[j + 104]);
          *(_QWORD *)&v174[j + 104] = 0;
          re::TextureHandle::invalidate((re::TextureHandle *)(v68 + 184));
          re::TextureHandle::invalidate((re::TextureHandle *)(v68 + 168));
          re::TextureHandle::invalidate((re::TextureHandle *)(v68 + 152));
          re::TextureHandle::invalidate((re::TextureHandle *)(v68 + 136));
          re::TextureHandle::invalidate((re::TextureHandle *)&v174[j]);
        }
        goto LABEL_106;
      }
      *(_WORD *)buf = 0;
      v43 = "Cannot process SDR content. ColorManager not found in RenderManager.";
    }
    else
    {
      v42 = *re::videoLogObjects(v34);
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        goto LABEL_102;
      *(_WORD *)buf = 0;
      v43 = "Cannot process SDR content. Parameters are not valid.";
    }
    _os_log_error_impl(&dword_224FE9000, v42, OS_LOG_TYPE_ERROR, v43, buf, 2u);
    goto LABEL_102;
  }
LABEL_106:
  v167 = 0x18BC3918B0504006;
  re::MaterialParameterBlock::handle(v13, &v167, (uint64_t)buf);
  v69 = *(unsigned __int8 *)re::ShaderGraphMaterial::getConstant((uint64_t)v13, (uint64_t)buf);
  v167 = 0;
  if (v69)
  {
    v166 = 0x2BBFE8D1A11FB57ELL;
    re::MaterialParameterBlock::handle(v13, &v166, (uint64_t)buf);
    v70 = *(float *)re::ShaderGraphMaterial::getConstant((uint64_t)v13, (uint64_t)buf);
    v166 = 0;
  }
  else
  {
    v70 = 1.0;
  }
  *(float *)(a1 + 272) = v70;
  v71 = *(_QWORD *)(a1 + 96);
  if (v71)
  {
    v72 = 32 * v71;
    v73 = *(_QWORD *)(a1 + 112);
    do
    {
      v165 = *(_QWORD *)(v73 + 16) >> 1;
      v74 = (re::VideoDefaults *)re::MaterialParameterBlock::handle(v13, &v165, (uint64_t)buf);
      v165 = 0;
      if (_MergedGlobals_325 == -1)
      {
        v77 = *(unsigned __int8 *)(a1 + 56);
        v76 = *v161;
        if (*v161 == 1 && v77 == 1)
        {
          v84 = (re *)re::VideoDefaults::logEnabled(v74);
          if ((_DWORD)v84)
          {
            v120 = (id)*re::videoLogObjects(v84);
            if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v190 = 0;
              _os_log_impl(&dword_224FE9000, v120, OS_LOG_TYPE_DEFAULT, "[StereoModeChanged] :: Setting actualStereoMode to kStereoModeStereoSideBySide", v190, 2u);
            }

          }
          v76 = 4;
        }
        else if (v76 == 3 && v77 == 1)
        {
          v85 = (re *)re::VideoDefaults::logEnabled(v74);
          if ((_DWORD)v85)
          {
            v121 = (id)*re::videoLogObjects(v85);
            if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v190 = 0;
              _os_log_impl(&dword_224FE9000, v121, OS_LOG_TYPE_DEFAULT, "[StereoModeChanged] :: Setting actualStereoMode to kStereoModeStereoOverUnder_Mono", v190, 2u);
            }

          }
          v76 = 5;
        }
        else if (v76 == -1)
        {
          v86 = *(unsigned __int8 *)(a1 + 72);
          v87 = (re *)re::VideoDefaults::logEnabled(v74);
          if (!v86)
          {
            if (!(_DWORD)v87)
              goto LABEL_137;
            v81 = (id)*re::videoLogObjects(v87);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v190 = 0;
              v82 = v81;
              v83 = "[StereoModeChanged] :: Setting actualStereoMode to kStereoModeMono because actualStereoMode is Undefined";
LABEL_200:
              _os_log_impl(&dword_224FE9000, v82, OS_LOG_TYPE_DEFAULT, v83, v190, 2u);
            }
LABEL_201:

            goto LABEL_137;
          }
          if ((_DWORD)v87)
          {
            v122 = (id)*re::videoLogObjects(v87);
            if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
            {
              v123 = "kStereoModeStereoSideBySide_Mono";
              if (v77 != 1)
                v123 = "kStereoModeStereoSideBySide";
              *(_DWORD *)v190 = 136315138;
              *(_QWORD *)&v190[4] = v123;
              _os_log_impl(&dword_224FE9000, v122, OS_LOG_TYPE_DEFAULT, "[StereoModeChanged] :: Setting actualStereoMode to %s", v190, 0xCu);
            }

          }
          if (v77 == 1)
            v76 = 4;
          else
            v76 = 1;
        }
        else if (v77 == 1)
        {
          v80 = (re *)re::VideoDefaults::logEnabled(v74);
          if (!(_DWORD)v80)
          {
LABEL_137:
            v76 = 0;
            goto LABEL_138;
          }
          v81 = (id)*re::videoLogObjects(v80);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v190 = 0;
            v82 = v81;
            v83 = "[StereoModeChanged] :: Setting actualStereoMode to kStereoModeMono because mono is prefered";
            goto LABEL_200;
          }
          goto LABEL_201;
        }
      }
      else
      {
        v75 = (re *)re::VideoDefaults::logEnabled(v74);
        if ((_DWORD)v75)
        {
          v112 = (id)*re::videoLogObjects(v75);
          if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v190 = 0;
            _os_log_impl(&dword_224FE9000, v112, OS_LOG_TYPE_DEFAULT, "[StereoModeChanged] :: Setting actualStereoMode to kOverrideStereoMode", v190, 2u);
          }

        }
        v76 = _MergedGlobals_325;
      }
LABEL_138:
      *(_DWORD *)v195 = v76;
      *(_QWORD *)v190 = 0x67AF2B14BAC98610;
      re::MaterialParameterBlock::setConstant(v13, (uint64_t *)v190, 4uLL, v195, 1, (uint64_t)v164);
      v164[0] = 0;
      v89 = (re *)re::VideoDefaults::logEnabled(v88);
      if ((_DWORD)v89 && *(_DWORD *)(a1 + 200) != v76)
      {
        v111 = (id)*re::videoLogObjects(v89);
        if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v190 = 67109120;
          *(_DWORD *)&v190[4] = v76;
          _os_log_impl(&dword_224FE9000, v111, OS_LOG_TYPE_DEFAULT, "[StereoModeChanged] :: Setting m_resolvedStereoMode to actualStereoMode which is %i", v190, 8u);
        }

      }
      *(_DWORD *)(a1 + 200) = v76;
      v90 = (re::VideoDefaults *)re::VideoDefaults::opaqueTechniqueAllowed(v89);
      if (!(_DWORD)v90)
        goto LABEL_162;
      v91 = atomic_load((unsigned __int8 *)&qword_2541153F0);
      if ((v91 & 1) == 0)
      {
        v90 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_2541153F0);
        if ((_DWORD)v90)
        {
          qword_2541153E8 = re::hashString((re *)"Transparent", v124);
          __cxa_guard_release(&qword_2541153F0);
        }
      }
      v92 = atomic_load((unsigned __int8 *)&qword_254115400);
      if ((v92 & 1) == 0)
      {
        v90 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_254115400);
        if ((_DWORD)v90)
        {
          qword_2541153F8 = re::hashString((re *)"Opaque", v125);
          __cxa_guard_release(&qword_254115400);
        }
      }
      v93 = atomic_load((unsigned __int8 *)&qword_254115410);
      if ((v93 & 1) == 0)
      {
        v90 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_254115410);
        if ((_DWORD)v90)
        {
          qword_254115408 = re::hashString((re *)"FadeDepthPrepass", v126);
          __cxa_guard_release(&qword_254115410);
        }
      }
      v94 = atomic_load((unsigned __int8 *)&qword_254115420);
      if ((v94 & 1) == 0)
      {
        v90 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_254115420);
        if ((_DWORD)v90)
        {
          qword_254115418 = re::hashString((re *)"FadeOpaque", v127);
          __cxa_guard_release(&qword_254115420);
        }
      }
      v95 = atomic_load((unsigned __int8 *)&qword_254115430);
      if ((v95 & 1) == 0)
      {
        v90 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_254115430);
        if ((_DWORD)v90)
        {
          qword_254115428 = re::hashString((re *)"VideoColor", v128);
          __cxa_guard_release(&qword_254115430);
        }
      }
      v96 = atomic_load((unsigned __int8 *)&qword_254115440);
      if ((v96 & 1) == 0)
      {
        v90 = (re::VideoDefaults *)__cxa_guard_acquire(&qword_254115440);
        if ((_DWORD)v90)
        {
          qword_254115438 = re::hashString((re *)"", v129);
          __cxa_guard_release(&qword_254115440);
        }
      }
      if (re::VideoDefaults::logEnabled(v90))
      {
        re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)a1);
        v113 = *(unsigned __int8 *)(a1 + 264);
        v115 = (id)*re::videoLogObjects(v114);
        v116 = os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT);
        if (v113)
        {
          if (v116)
          {
            *(_WORD *)v190 = 0;
            v117 = v115;
            v118 = "Video material supports opaque rendering.";
            goto LABEL_188;
          }
        }
        else if (v116)
        {
          *(_WORD *)v190 = 0;
          v117 = v115;
          v118 = "Video material does not opaque rendering.";
LABEL_188:
          _os_log_impl(&dword_224FE9000, v117, OS_LOG_TYPE_DEFAULT, v118, v190, 2u);
        }

      }
      re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)a1);
      if (*(_BYTE *)(a1 + 264))
      {
        if (a8 && !*(_BYTE *)(a1 + 204))
        {
          v109 = (re *)re::VideoDefaults::logEnabled(v97);
          if ((_DWORD)v109)
          {
            v110 = (id)*re::videoLogObjects(v109);
            if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v190 = 136315138;
              *(_QWORD *)&v190[4] = "VideoColorOpaque";
              _os_log_impl(&dword_224FE9000, v110, OS_LOG_TYPE_DEFAULT, "Using opaque technique '%s'", v190, 0xCu);
            }

          }
        }
        else
        {
          v98 = (re *)re::VideoDefaults::logEnabled(v97);
          if ((_DWORD)v98)
          {
            v119 = (id)*re::videoLogObjects(v98);
            if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v190 = 136315138;
              *(_QWORD *)&v190[4] = "VideoColor";
              _os_log_impl(&dword_224FE9000, v119, OS_LOG_TYPE_DEFAULT, "Using transparent technique '%s'", v190, 0xCu);
            }

          }
          v99 = qword_2541153F8;
          v100 = qword_254115438;
          if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
            dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
          re::MaterialParameterBlock::addPassTechniqueMapping(v13, v99, v100, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
          v101 = qword_2541153E8;
          v102 = qword_254115428;
          if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
            dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
          re::MaterialParameterBlock::addPassTechniqueMapping(v13, v101, v102, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
          v103 = qword_254115408;
          v104 = qword_254115438;
          if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
            dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
          re::MaterialParameterBlock::addPassTechniqueMapping(v13, v103, v104, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
          v105 = qword_254115418;
          v106 = qword_254115438;
          if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
            dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
          re::MaterialParameterBlock::addPassTechniqueMapping(v13, v105, v106, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
          v107 = qword_2541153E8;
          v108 = qword_254115428;
          if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
            dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
          re::MaterialParameterBlock::addPassTechniqueMapping(v13, v107, v108, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
        }
      }
LABEL_162:
      re::ecs2::VideoComponent::applyVideoAttachmentToParameterBlock(*(_QWORD *)(a1 + 16), (char **)v73, (re::TextureHandle *)a3, v13, a4, a5);
      re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)a1);
      if (*(_BYTE *)(a1 + 266))
        re::ecs2::VideoComponent::applyVideoTextureArrayAttachmentToParameterBlock(*(_QWORD *)(a1 + 16), (_QWORD *)v73, (re::TextureHandle *)a3, v13);
      v73 += 32;
      v72 -= 32;
    }
    while (v72);
  }
}

void re::ecs2::VideoComponent::removeParamsFromSystemParameterBlock(re::ecs2::VideoComponent *this, re::MaterialManager *a2, char a3, int a4)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t *SystemMaterialParameterBlock;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  re::MaterialParameterBlock *v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char **v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v8 = atomic_load((unsigned __int8 *)&qword_254115450);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254115450))
  {
    qword_254115448 = re::hashString((re *)"Transparent", v28);
    __cxa_guard_release(&qword_254115450);
  }
  v9 = atomic_load((unsigned __int8 *)&qword_254115460);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_254115460))
  {
    qword_254115458 = re::hashString((re *)"Opaque", v29);
    __cxa_guard_release(&qword_254115460);
  }
  v10 = atomic_load((unsigned __int8 *)&qword_254115470);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_254115470))
  {
    qword_254115468 = re::hashString((re *)"FadeDepthPrepass", v30);
    __cxa_guard_release(&qword_254115470);
  }
  v11 = atomic_load((unsigned __int8 *)&qword_254115480);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254115480))
  {
    qword_254115478 = re::hashString((re *)"FadeOpaque", v31);
    __cxa_guard_release(&qword_254115480);
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 2) + 296);
  SystemMaterialParameterBlock = re::MaterialManager::getSystemMaterialParameterBlock(a2, v12);
  if (SystemMaterialParameterBlock)
  {
    v14 = SystemMaterialParameterBlock;
    v38 = 0xE34F2A557A3E977;
    re::MaterialParameterBlock::removeTexture((uint64_t)SystemMaterialParameterBlock, &v38);
    v38 = 0;
    v39 = 0x264EA9E237B8F170;
    re::MaterialParameterBlock::removeConstant(v14, &v39, 4);
    v39 = 0x4D4BBA333CD6C2E7;
    re::MaterialParameterBlock::removeConstant(v14, &v39, 16);
    v39 = 0x13C58749F480030;
    re::MaterialParameterBlock::removeConstant(v14, &v39, 1);
    v39 = 0x67AF2B14BAC98610;
    re::MaterialParameterBlock::removeConstant(v14, &v39, 4);
    v39 = 0x30C8E7322C94082DLL;
    re::MaterialParameterBlock::removeConstant(v14, &v39, 48);
    if (a4)
    {
      v15 = qword_254115448;
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      re::MaterialParameterBlock::removePassTechniqueMapping((re::MaterialParameterBlock *)v14, v15, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
      v16 = qword_254115458;
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      re::MaterialParameterBlock::removePassTechniqueMapping((re::MaterialParameterBlock *)v14, v16, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
      v17 = qword_254115468;
      if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
      re::MaterialParameterBlock::removePassTechniqueMapping((re::MaterialParameterBlock *)v14, v17, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
      v18 = qword_254115478;
      if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
      re::MaterialParameterBlock::removePassTechniqueMapping((re::MaterialParameterBlock *)v14, v18, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
      v19 = qword_254115448;
      if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
      re::MaterialParameterBlock::removePassTechniqueMapping((re::MaterialParameterBlock *)v14, v19, re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash);
    }
    v37 = 0x434F49B3406455B4;
    re::MaterialParameterBlock::removeTexture((uint64_t)v14, &v37);
    v36 = 0x434F49B34064CA13;
    v37 = 0;
    re::MaterialParameterBlock::removeTexture((uint64_t)v14, &v36);
    v35 = 0x434F49B340653E72;
    v36 = 0;
    re::MaterialParameterBlock::removeTexture((uint64_t)v14, &v35);
    v34 = 0x434F49B3406455D3;
    v35 = 0;
    re::MaterialParameterBlock::removeTexture((uint64_t)v14, &v34);
    v33 = 0x434F49B34064CA32;
    v34 = 0;
    re::MaterialParameterBlock::removeTexture((uint64_t)v14, &v33);
    v32 = 0x434F49B340653E91;
    v33 = 0;
    re::MaterialParameterBlock::removeTexture((uint64_t)v14, &v32);
    v32 = 0;
    v21 = *((_QWORD *)this + 12);
    if (v21)
    {
      v22 = (char **)*((_QWORD *)this + 14);
      v23 = 32 * v21;
      do
      {
        re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock(v22, (const re::ecs2::VideoMaterialAttachment *)v14, v20);
        v22 += 4;
        v23 -= 32;
      }
      while (v23);
    }
    v24 = (char *)this + 120;
    v25 = *((_QWORD *)this + 17);
    if (v25)
    {
      v26 = (char **)*((_QWORD *)this + 19);
      v27 = 32 * v25;
      do
      {
        re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock(v26, (const re::ecs2::VideoMaterialAttachment *)v14, v20);
        v26 += 4;
        v27 -= 32;
      }
      while (v27);
    }
    re::DynamicArray<re::RigDataTypeClass::RigDataTypeAttribute>::clear((uint64_t)v24);
    if ((a3 & 1) != 0 && re::MaterialParameterBlock::isEmpty((re::MaterialParameterBlock *)v14))
      re::MaterialManager::removeSystemMaterialParameterBlock(a2, v12);
  }
}

BOOL re::areAlmostEqual<float>(float a1, float a2, float a3, float a4)
{
  if (a1 != a3 && vabds_f32(a1, a3) >= (float)((float)((float)(fabsf(a1) + fabsf(a3)) + 1.0) * 0.00001))
    return 0;
  if (a2 == a4)
    return 1;
  return vabds_f32(a2, a4) < (float)((float)((float)(fabsf(a2) + fabsf(a4)) + 1.0) * 0.00001);
}

void re::ecs2::VideoComponent::getVideoTextureHandles(re::ecs2::VideoComponent *this@<X0>, uint64_t a2@<X8>)
{
  re *v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t i;
  uint64_t v7;
  uint8_t v8[8];
  uint64_t v9[3];

  if (*((_QWORD *)this + 22)
    && (re::AssetHandle::AssetHandle((re::AssetHandle *)v9, (re::ecs2::VideoComponent *)((char *)this + 168)),
        v3 = re::VideoAsset::loadAndConnectForRendering(v9),
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v9),
        v3))
  {
    re::VideoAsset::getVideoTextureHandles((uint64_t)v3, a2);
  }
  else
  {
    do
      v4 = __ldaxr((unsigned __int8 *)&re::ecs2::VideoComponent::getVideoTextureHandles(void)const::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&re::ecs2::VideoComponent::getVideoTextureHandles(void)const::__FILE____LINE___logged));
    if ((v4 & 1) == 0)
    {
      v5 = *re::videoLogObjects(this);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get video texture handles", v8, 2u);
      }
    }
    for (i = 0; i != 240; i += 120)
    {
      v7 = a2 + i;
      *(_DWORD *)(v7 + 108) = 0;
      *(_QWORD *)(v7 + 100) = 0;
      *(_OWORD *)v7 = 0uLL;
      *(_OWORD *)(v7 + 16) = 0uLL;
      *(_OWORD *)(v7 + 32) = 0uLL;
      *(_OWORD *)(v7 + 48) = 0uLL;
      *(_OWORD *)(v7 + 64) = 0uLL;
      *(_OWORD *)(v7 + 76) = 0uLL;
    }
    *(_DWORD *)(a2 + 240) = -1;
  }
}

void re::ecs2::VideoComponent::getLegacyVideoTextureHandles(re::ecs2::VideoComponent *this, uint64_t a2)
{
  re *v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t i;
  char *v7;
  uint8_t v8[8];
  uint64_t v9[3];

  if (*(_QWORD *)(a2 + 176)
    && (re::AssetHandle::AssetHandle((re::AssetHandle *)v9, (const re::AssetHandle *)(a2 + 168)),
        v3 = re::VideoAsset::loadAndConnectForRendering(v9),
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v9),
        v3))
  {
    re::VideoAsset::getLegacyVideoTextureHandles((uint64_t)v3, (uint64_t)this);
  }
  else
  {
    do
      v4 = __ldaxr((unsigned __int8 *)&re::ecs2::VideoComponent::getLegacyVideoTextureHandles(void)const::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&re::ecs2::VideoComponent::getLegacyVideoTextureHandles(void)const::__FILE____LINE___logged));
    if ((v4 & 1) == 0)
    {
      v5 = *re::videoLogObjects(this);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get legacy video texture handles", v8, 2u);
      }
    }
    for (i = 0; i != 240; i += 120)
    {
      v7 = (char *)this + i;
      *((_DWORD *)v7 + 27) = 0;
      *(_QWORD *)(v7 + 100) = 0;
      *(_OWORD *)v7 = 0uLL;
      *((_OWORD *)v7 + 1) = 0uLL;
      *((_OWORD *)v7 + 2) = 0uLL;
      *((_OWORD *)v7 + 3) = 0uLL;
      *((_OWORD *)v7 + 4) = 0uLL;
      *(_OWORD *)(v7 + 76) = 0uLL;
    }
    *((_DWORD *)this + 60) = -1;
  }
}

uint64_t re::ecs2::VideoComponent::YCbCrMatrix(re::ecs2::VideoComponent *this)
{
  re *v1;
  uint64_t v2;
  uint64_t result;
  unsigned __int8 v4;
  NSObject *v5;
  _BOOL4 v6;
  uint8_t v7[8];
  uint64_t v8[3];

  if (*((_QWORD *)this + 22)
    && (re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (re::ecs2::VideoComponent *)((char *)this + 168)),
        v1 = re::VideoAsset::loadAndConnectForRendering(v8),
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v8),
        v1))
  {
    v2 = *((_QWORD *)v1 + 24);
    if (v2)
      return *(unsigned int *)(v2 + 2448);
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    do
      v4 = __ldaxr((unsigned __int8 *)&re::ecs2::VideoComponent::YCbCrMatrix(void)const::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&re::ecs2::VideoComponent::YCbCrMatrix(void)const::__FILE____LINE___logged));
    if ((v4 & 1) == 0)
    {
      v5 = *re::videoLogObjects(this);
      v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v6)
        return result;
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get YCbCrMatrix", v7, 2u);
    }
    return 0;
  }
}

uint64_t re::ecs2::VideoComponent::imageFunction(re::ecs2::VideoComponent *this)
{
  re *v1;
  uint64_t v2;
  uint64_t result;
  unsigned __int8 v4;
  NSObject *v5;
  _BOOL4 v6;
  uint8_t v7[8];
  uint64_t v8[3];

  if (*((_QWORD *)this + 22)
    && (re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (re::ecs2::VideoComponent *)((char *)this + 168)),
        v1 = re::VideoAsset::loadAndConnectForRendering(v8),
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v8),
        v1))
  {
    v2 = *((_QWORD *)v1 + 24);
    if (v2)
      return *(unsigned int *)(v2 + 2452);
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    do
      v4 = __ldaxr(re::ecs2::VideoComponent::imageFunction(void)const::__FILE____LINE___logged);
    while (__stlxr(1u, re::ecs2::VideoComponent::imageFunction(void)const::__FILE____LINE___logged));
    if ((v4 & 1) == 0)
    {
      v5 = *re::videoLogObjects(this);
      v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v6)
        return result;
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "VideoComponent failed to get image function", v7, 2u);
    }
    return 0;
  }
}

void re::ecs2::VideoComponent::calculateColorSpaceTransformationMatrix(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  const void *v6;
  _BYTE v7[16];
  _BYTE v8[16];
  _BYTE v9[16];
  _BYTE v10[16];
  _OWORD v11[2];
  uint64_t v12;
  const void *v13;
  __int16 v14;
  char v15;

  re::TextureHandle::TextureHandle((re::TextureHandle *)v7, (const re::TextureHandle *)a2);
  re::TextureHandle::TextureHandle((re::TextureHandle *)v8, (const re::TextureHandle *)(a2 + 16));
  re::TextureHandle::TextureHandle((re::TextureHandle *)v9, (const re::TextureHandle *)(a2 + 32));
  re::TextureHandle::TextureHandle((re::TextureHandle *)v10, (const re::TextureHandle *)(a2 + 48));
  re::TextureHandle::TextureHandle((re::TextureHandle *)v11, (const re::TextureHandle *)(a2 + 64));
  v11[1] = *(_OWORD *)(a2 + 80);
  v6 = *(const void **)(a2 + 104);
  v12 = *(_QWORD *)(a2 + 96);
  v13 = 0;
  re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v13, &v13, v6);
  v14 = *(_WORD *)(a2 + 112);
  v15 = *(_BYTE *)(a2 + 114);
  if (*(_BYTE *)(a1 + 205))
  {
    re::ColorHelpers::computeGamutTransformMatrix(HIBYTE(v12), *(unsigned __int8 *)(a1 + 206), (uint64_t)a3);
  }
  else
  {
    *a3 = xmmword_2260E5F10;
    a3[1] = xmmword_2260E5F20;
    a3[2] = xmmword_2260E5F40;
  }
  if (v13)
    re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(&v13);
  v13 = 0;
  re::TextureHandle::invalidate((re::TextureHandle *)v11);
  re::TextureHandle::invalidate((re::TextureHandle *)v10);
  re::TextureHandle::invalidate((re::TextureHandle *)v9);
  re::TextureHandle::invalidate((re::TextureHandle *)v8);
  re::TextureHandle::invalidate((re::TextureHandle *)v7);
}

uint64_t re::ecs2::VideoComponentSystem::onComponentUpdated()
{
  return 0;
}

void re::ecs2::VideoComponentSystem::willAddSystemToECSService(re::ecs2::VideoComponentSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x24BDAC8D0];
  re::VideoLightSpillGenerator::WarmUp(this);
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 14) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 15) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 16) = re::ServiceLocator::serviceOrNull<re::ColorManager>(v4);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v6 = re::ServiceLocator::serviceOrNull<re::VideoService>(v5);
  *((_QWORD *)this + 18) = v6;
  if (v6)
    *((_QWORD *)this + 17) = v6;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 20) = re::ServiceLocator::serviceOrNull<re::ProtectionOptionsService>(v7);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 22) = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v8);
  *((_QWORD *)this + 21) = re::ServiceLocator::serviceOrNull<re::AssetService>(*(_QWORD *)(*((_QWORD *)this + 14) + 648));
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 24) = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(v9);
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 25) = re::ServiceLocator::serviceOrNull<re::ResourceFetchService>(v10);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v12 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v11);
  if (v12)
  {
    if (!*((_BYTE *)this + 104))
    {
      v13[0] = this;
      v13[1] = re::ecs2::VideoComponentSystem::onComponentUpdated;
      v13[2] = 0;
      v13[3] = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v12 + 352), (uint64_t)v13);
      *((_BYTE *)this + 104) = 1;
    }
  }
}

void re::ecs2::VideoComponentSystem::willRemoveSystemFromECSService(re::ecs2::VideoComponentSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  re::ecs2::VideoComponentSystem **v6;
  __int128 v7;
  _BYTE v8[8];
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v3 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v2);
  if (v3)
  {
    if (*((_BYTE *)this + 104))
    {
      v4 = v3;
      if (*(_QWORD *)(v3 + 368))
      {
        v5 = 0;
        do
        {
          v6 = (re::ecs2::VideoComponentSystem **)(*(_QWORD *)(v4 + 384) + 32 * v5);
          if (*v6 == this)
          {
            if (!*(_DWORD *)(v4 + 432))
            {
              re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)(v4 + 352), v5);
              continue;
            }
            v8[0] = 0;
            v7 = *((_OWORD *)v6 + 1);
            v9 = *(_OWORD *)v6;
            v10 = v7;
            re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)(v4 + 392), (uint64_t)v8);
          }
          ++v5;
        }
        while (v5 < *(_QWORD *)(v4 + 368));
      }
    }
  }
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
}

double re::ecs2::VideoComponentSystem::willAddSceneToECSService(re::ecs2::VideoComponentSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v4;
  re::ecs2::SceneComponentTable *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  re::ecs2::VideoComponentSystem *v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = *((_QWORD *)this + 19);
    if (v4)
      (*(void (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)v4 + 40))(v4, a2);
    v5 = (re::ecs2::Scene *)((char *)a2 + 200);
    v6 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v10 = this;
    v11 = re::ecs2::VideoComponentSystem::willRemoveComponents;
    v12 = 0;
    v13 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 392), (uint64_t)&v10);
    v10 = this;
    v11 = re::ecs2::VideoComponentSystem::onActivateVideoComponent;
    v12 = 0;
    v13 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 216), (uint64_t)&v10);
    v7 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v10 = this;
    v11 = re::ecs2::VideoComponentSystem::onActivateVideoPlayerComponent;
    v12 = 0;
    v13 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v7 + 216), (uint64_t)&v10);
    v8 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v10 = this;
    v11 = re::ecs2::VideoComponentSystem::willRemoveVideoPlayerComponents;
    v12 = 0;
    v13 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v8 + 392), (uint64_t)&v10);
    v10 = this;
    v11 = re::ecs2::VideoComponentSystem::didAddVideoPlayerComponents;
    v12 = 0;
    v13 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v8 + 128), (uint64_t)&v10);
  }
  return result;
}

void re::ecs2::VideoComponentSystem::willRemoveSceneFromECSService(re::ecs2::VideoComponentSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v4;
  re::ecs2::SceneComponentTable *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v4 = *((_QWORD *)this + 19);
    if (v4)
      (*(void (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)v4 + 48))(v4, a2);
    v5 = (re::ecs2::Scene *)((char *)a2 + 200);
    v6 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v9 = this;
    *((_QWORD *)&v9 + 1) = re::ecs2::VideoComponentSystem::willRemoveComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 392, &v9);
    *(_QWORD *)&v9 = this;
    *((_QWORD *)&v9 + 1) = re::ecs2::VideoComponentSystem::onActivateVideoComponent;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 216, &v9);
    v7 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v9 = this;
    *((_QWORD *)&v9 + 1) = re::ecs2::VideoComponentSystem::onActivateVideoPlayerComponent;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v7 + 216, &v9);
    v8 = re::ecs2::SceneComponentTable::get(v5, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v9 = this;
    *((_QWORD *)&v9 + 1) = re::ecs2::VideoComponentSystem::willRemoveVideoPlayerComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v8 + 392, &v9);
    *(_QWORD *)&v9 = this;
    *((_QWORD *)&v9 + 1) = re::ecs2::VideoComponentSystem::didAddVideoPlayerComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v8 + 128, &v9);
  }
}

uint64_t re::ecs2::VideoComponentSystem::willRemoveComponents(uint64_t a1, uint64_t a2, re::ecs2::VideoComponent **a3, uint64_t a4)
{
  re::MaterialManager *v4;
  BOOL v5;
  uint64_t v7;
  re::ecs2::VideoComponent *v8;

  v4 = *(re::MaterialManager **)(*(_QWORD *)(a1 + 120) + 24);
  if (v4)
    v5 = a4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v7 = 8 * a4;
    do
    {
      v8 = *a3++;
      re::ecs2::VideoComponent::removeParamsFromSystemParameterBlock(v8, v4, 1, 1);
      v7 -= 8;
    }
    while (v7);
  }
  return 0;
}

uint64_t re::ecs2::VideoComponentSystem::willRemoveVideoPlayerComponents(_BOOL8 a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13[3];
  uint8_t buf[4];
  uint64_t *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *re::videoLogObjects((re *)a1);
      a1 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (a1)
      {
        *(_DWORD *)buf = 134217984;
        v15 = v6;
        _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "VideoComponentSystem::willRemoveVideoPlayerComponents: %p", buf, 0xCu);
      }
      v8 = v6[2];
      if (v8)
      {
        if (v6[6])
        {
          v9 = (_QWORD *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(v6 + 5));
          if (v9)
            re::VideoAsset::cleanupVideoPlayerHelper(v9);
          v10 = v6[6];
          if (v10)
          {
            v11 = atomic_load((unsigned int *)(v10 + 704));
            if (v11 == 2)
            {
              memset(v13, 0, sizeof(v13));
              re::ecs2::VideoPlayerComponent::setVideoAsset(v6, v13);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v13);
            }
          }
        }
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerStatusComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      }
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::VideoComponentSystem::didAddVideoPlayerComponents(_BOOL8 a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v5 = 8 * a4;
    do
    {
      v6 = *a3;
      v7 = *re::videoLogObjects((re *)a1);
      a1 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      if (a1)
      {
        *(_DWORD *)buf = 134217984;
        v10 = v6;
        _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "VideoComponentSystem::didAddVideoPlayerComponents: %p", buf, 0xCu);
      }
      ++a3;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::VideoComponentSystem::onActivateVideoComponent(float *a1)
{
  re::ecs2::System::resetTaskOptions(a1);
  return 0;
}

uint64_t re::ecs2::VideoComponentSystem::onActivateVideoPlayerComponent(float *a1)
{
  re::ecs2::System::resetTaskOptions(a1);
  return 0;
}

void re::ecs2::VideoComponentSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  CFTimeInterval v9;
  re::VideoDefaults *v10;
  float32x2_t *v11;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int32 v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  re *v24;
  uint64_t v25;
  uint64_t v26;
  __int32 v27;
  __int32 v28;
  int v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  re::VideoAsset *v36;
  char **v37;
  re::ColorManager *v38;
  re::RenderManager *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  re::VideoManager *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t i;
  uint64_t v54;
  os_unfair_lock_s *v55;
  re::VideoAsset *v56;
  re::VideoDefaults **VideoPlayerComponentHelper;
  uint64_t **v58;
  _QWORD *v59;
  re *v60;
  NSObject *v61;
  re::VideoDefaults *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *Asset;
  uint64_t v68;
  uint64_t v69;
  _anonymous_namespace_ *ViewDescriptor;
  uint64_t v74;
  re::ecs2::CameraViewDescriptorsComponent **v75;
  re::ecs2::CameraViewDescriptorsComponent *v76;
  uint64_t v77;
  re::ecs2::EntityComponentCollection *v78;
  uint64_t v79;
  float *v80;
  uint64_t v81;
  unint64_t v82;
  _anonymous_namespace_ *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  double v88;
  double v89;
  uint64_t v90;
  id v91;
  void *v92;
  id v93;
  float32x2_t v94;
  float32x2_t v95;
  uint64_t v96;
  unsigned int v97;
  __int32 v98;
  float32x2_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  void *v103;
  void *v104;
  id v105;
  id v106;
  float32x2_t v107;
  uint64_t v108;
  float v109;
  uint64_t v110;
  float *v111;
  uint64_t v112;
  re::ecs2::CameraViewDescriptorsComponent *v113;
  _anonymous_namespace_ *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  char v118;
  double v119;
  double v120;
  uint64_t v121;
  id v122;
  void *v123;
  id v124;
  float32x2_t v125;
  float32x2_t v126;
  uint64_t v127;
  unsigned int v128;
  __int32 v129;
  float32x2_t v130;
  uint64_t v131;
  void *v132;
  id v133;
  void *v134;
  void *v135;
  id v136;
  id v137;
  float32x2_t v138;
  uint64_t v139;
  float v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  double v146;
  uint64_t v147;
  id v148;
  void *v149;
  id v150;
  float32x2_t v151;
  float32x2_t v152;
  uint64_t v153;
  unsigned int v154;
  __int32 v155;
  float32x2_t v156;
  uint64_t v157;
  void *v158;
  id v159;
  void *v160;
  void *v161;
  id v162;
  id v163;
  float32x2_t v164;
  uint64_t v165;
  float v166;
  uint64_t v167;
  uint64_t v168;
  re::ecs2::CameraViewDescriptorsComponent *v169;
  _anonymous_namespace_ *v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  char v174;
  double v175;
  double v176;
  uint64_t v177;
  id v178;
  void *v179;
  id v180;
  float32x2_t v181;
  float32x2_t v182;
  uint64_t v183;
  unsigned int v184;
  __int32 v185;
  float32x2_t v186;
  uint64_t v187;
  void *v188;
  id v189;
  void *v190;
  void *v191;
  id v192;
  id v193;
  float32x2_t v194;
  uint64_t v195;
  double v196;
  _anonymous_namespace_ *v197;
  __int32 v198;
  uint64_t v199;
  char v200;
  char v201;
  float32x2_t v202;
  __int32 v203;
  float v204;
  unint64_t v205;
  _anonymous_namespace_ *v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  char v210;
  double v211;
  double v212;
  uint64_t v213;
  id v214;
  void *v215;
  id v216;
  float32x2_t v217;
  float32x2_t v218;
  uint64_t v219;
  unsigned int v220;
  __int32 v221;
  float32x2_t v222;
  uint64_t v223;
  void *v224;
  id v225;
  void *v226;
  void *v227;
  id v228;
  id v229;
  float32x2_t v230;
  uint64_t v231;
  float v232;
  double v233;
  double v234;
  float LayerSize;
  float v236;
  float v237;
  double v238;
  _anonymous_namespace_ *v239;
  __int32 v240;
  uint64_t v241;
  char v242;
  char v243;
  float32x2_t v244;
  __int32 v245;
  float v246;
  unint64_t v247;
  _anonymous_namespace_ *v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  char v252;
  double v253;
  double v254;
  uint64_t v255;
  id v256;
  void *v257;
  id v258;
  float32x2_t v259;
  float32x2_t v260;
  uint64_t v261;
  unsigned int v262;
  __int32 v263;
  float32x2_t v264;
  uint64_t v265;
  void *v266;
  id v267;
  void *v268;
  void *v269;
  id v270;
  id v271;
  float32x2_t v272;
  uint64_t v273;
  double v274;
  double v275;
  float v276;
  float v277;
  float v278;
  double v279;
  _anonymous_namespace_ *v280;
  __int32 v281;
  uint64_t v282;
  char v283;
  char v284;
  float32x2_t v285;
  __int32 v286;
  double v287;
  double v288;
  float v289;
  unsigned int v290;
  re::VideoDefaults *v291;
  char v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  re::VideoDefaults *v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t *v299;
  _QWORD *v300;
  uint64_t v301;
  re *v302;
  re::VideoDefaults *v303;
  re *v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  re::ecs2::NetworkComponent *v308;
  uint64_t j;
  char *v310;
  int v311;
  re::VideoDefaults *v312;
  re *v313;
  uint64_t v314;
  uint8_t *v315;
  re *v316;
  re::VideoDefaults *v317;
  re::VideoDefaults *v318;
  re::VideoDefaults *v319;
  BOOL v320;
  uint64_t *v321;
  uint64_t v322;
  re::VideoDefaults *v323;
  char v324;
  BOOL v325;
  uint64_t v326;
  BOOL v327;
  _anonymous_namespace_ *v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  float32x4_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint8_t *v337;
  uint64_t v338;
  int v339;
  int v340;
  uint64_t v341;
  _DWORD *v342;
  char v343;
  _BOOL4 v344;
  int v345;
  int v346;
  uint64_t v347;
  _DWORD *v348;
  re::VideoDefaults *v349;
  re *v350;
  uint64_t k;
  char *v352;
  NSObject *v353;
  uint64_t v354;
  const __CFString *v355;
  NSObject *v356;
  uint64_t v357;
  const __CFString *v358;
  uint64_t v359;
  unsigned int v360;
  const __CFString *v361;
  NSObject *v362;
  uint64_t v363;
  const __CFString *v364;
  const __CFString *v365;
  NSObject *v366;
  const char *v367;
  __int32 v368;
  NSObject *v369;
  uint64_t v370;
  const __CFString *v371;
  uint64_t v372;
  unsigned int v373;
  const __CFString *v374;
  NSObject *v375;
  NSObject *v376;
  re::VideoDefaults *v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _BYTE *v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _BYTE *v393;
  uint64_t v394;
  _anonymous_namespace_ *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _BYTE *v400;
  uint64_t v401;
  uint64_t v402;
  _BYTE *v403;
  uint64_t v404;
  int v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  re::ecs2::ImageBasedReflectionReceiverComponent **v410;
  uint64_t v411;
  re::ecs2::ImageBasedReflectionReceiverComponent *v412;
  _BOOL4 v413;
  uint64_t v414;
  int v416;
  char v417;
  int v418;
  _QWORD *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  float32x4_t *v428;
  float v429;
  float v430;
  float v431;
  float v432;
  float v433;
  float v434;
  float v435;
  float v436;
  float v437;
  float v438;
  float v439;
  float v440;
  float v441;
  float v442;
  float v443;
  float v444;
  float v445;
  uint32x4_t v446;
  uint32x4_t v447;
  uint64_t v448;
  uint64_t v449;
  float32x4_t v450;
  float32x4_t v451;
  __int128 v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  unint64_t v461;
  float32x4_t v462;
  float32x4_t *v463;
  float32x4_t *v464;
  int64_t v465;
  unint64_t v466;
  uint64_t v467;
  unint64_t v468;
  char *v469;
  float32x4_t *v470;
  float32x4_t *v471;
  char *v472;
  float32x4_t *v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t *v476;
  uint64_t v477;
  unint64_t v478;
  unint64_t v479;
  char *v480;
  float32x4_t *v481;
  float32x4_t *v482;
  char *v483;
  float32x4_t *v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t *v487;
  uint64_t v488;
  unint64_t v489;
  unint64_t v490;
  char *v491;
  float32x4_t *v492;
  float32x4_t *v493;
  char *v494;
  float32x4_t *v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t *v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  char *v502;
  float32x4_t *v503;
  float32x4_t *v504;
  char *v505;
  float32x4_t *v506;
  float32x4_t v507;
  int64_t v508;
  unint64_t v509;
  float32x4_t v510;
  float32x2_t *v511;
  float32x2_t *v512;
  const float *v513;
  float32x4_t v514;
  float32x4_t v515;
  double v516;
  unint64_t v517;
  uint64_t v518;
  unsigned int *v519;
  uint64_t v520;
  unsigned int *v521;
  uint64_t v522;
  double v523;
  float v524;
  uint64_t v525;
  re::VideoDefaults *v526;
  float v527;
  float v528;
  float v529;
  uint64_t v530;
  uint64_t v531;
  re *v532;
  NSObject *v533;
  uint64_t v534;
  unint64_t v535;
  re *v536;
  unint64_t v537;
  uint64_t m;
  uint64_t v539;
  unint64_t v540;
  BOOL v541;
  int v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  __int32 v549;
  uint64_t v550;
  int v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t n;
  NSObject *v559;
  unsigned int v560;
  uint64_t v561;
  int *v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  float32x4_t **v568;
  uint64_t v569;
  float32x4_t *v570;
  float32x4_t v571;
  __int128 v572;
  _anonymous_namespace_ *v573;
  float32x4_t v574;
  char **v575;
  re::ColorManager *v576;
  re::RenderManager *v577;
  unsigned int v578;
  unsigned int v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  _QWORD *p_isa;
  unsigned int v585;
  uint64_t v586;
  uint64_t v587;
  _BOOL4 v588;
  uint64_t v589;
  char *v590;
  re::VideoDefaults *v591;
  uint64_t ii;
  char *v593;
  re *v594;
  uint64_t v595;
  uint64_t v596;
  uint8_t *v597;
  uint64_t v598;
  uint8_t *v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  _DWORD *v603;
  _BOOL4 v604;
  uint64_t v605;
  int v606;
  int v607;
  uint64_t jj;
  _DWORD *v609;
  uint64_t kk;
  char *v611;
  unsigned int v612;
  unsigned int v613;
  NSObject *v614;
  NSObject *v615;
  uint64_t ReadyToRender;
  uint64_t v617;
  uint64_t v618;
  uint64_t *v619;
  uint64_t v620;
  int v621;
  re *v622;
  uint64_t v623;
  _BOOL4 v624;
  re *v625;
  re *v626;
  re *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  const __CFString *v631;
  NSObject *v632;
  const char *v633;
  const __CFString *v634;
  NSObject *v635;
  double v636;
  double v637;
  NSObject *v638;
  __int32 v639;
  NSObject *v640;
  uint64_t v641;
  _QWORD *v642;
  uint64_t v643;
  NSObject *v644;
  const __CFString *v645;
  re::VideoDefaults *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t *v650;
  uint64_t v651;
  uint64_t v652;
  re::VideoAsset *v653;
  re::VideoDefaults **v654;
  float32x2_t **v655;
  re::ecs2::Entity *v656;
  re::VideoDefaults *isVideoEntityHierarchyValid;
  re *v658;
  NSObject *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t *v662;
  uint64_t v663;
  uint64_t v664;
  float32x2_t v665;
  re::AssetManager *v666;
  re::VideoDefaults *v667;
  uint64_t v668;
  uint64_t *v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  uint64_t v675;
  int v676;
  re::MaterialParameterBlock *v677;
  uint64_t *v678;
  uint64_t *v679;
  unsigned int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  uint64_t v689;
  unint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  int *v694;
  int v695;
  uint64_t v696;
  uint64_t v697;
  __n128 v698;
  uint64_t *v699;
  unint64_t v700;
  re::AssetHandle *v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  int v713;
  char *v714;
  re::VideoDefaults *v715;
  re *v716;
  float v717;
  float v718;
  float v719;
  float v720;
  float v721;
  float v722;
  float v723;
  float v724;
  float32x4_t v725;
  float32x4_t v726;
  float v727;
  float v728;
  float v729;
  float v730;
  float v731;
  float32x4_t *v732;
  char *v733;
  uint64_t v734;
  float v735;
  unint64_t v736;
  uint64_t v737;
  float32x4_t *v738;
  unint64_t v739;
  float32x4_t *v740;
  float v741;
  unint64_t v742;
  re::ecs2::TransformComponent **v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t v747;
  float v748;
  float32x4_t v749;
  float32x4_t *v750;
  float v751;
  unint64_t v752;
  float32x4_t v753;
  float32x4_t v754;
  float32x4_t v755;
  float32x4_t v756;
  int8x16_t v757;
  float32x4_t v758;
  int8x16_t v759;
  uint64_t v760;
  float32x4_t v761;
  re::ecs2::TransformComponent **v762;
  float32x4_t v763;
  float v764;
  float v765;
  float v766;
  float v767;
  float v768;
  uint64_t v769;
  float v770;
  re::VideoDefaults *v771;
  int v772;
  int v773;
  NSObject *v774;
  const char *v775;
  void *v776;
  NSObject *v777;
  uint64_t v778;
  NSObject *v779;
  re *v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  NSObject *v784;
  const char *v785;
  BOOL *v786;
  uint64_t v787;
  uint64_t *v788;
  uint64_t v789;
  double v790;
  int v791;
  float v792;
  int v793;
  _QWORD *v794;
  _QWORD *v795;
  uint64_t v796;
  uint64_t *v797;
  float v798;
  uint64_t v799;
  int v800;
  re::TextureHandle *v801;
  re::TextureHandle *v802;
  float v803;
  float v804;
  re::ecs2::CameraViewDescriptorsComponent **v805;
  re::TextureHandle *v806[2];
  unint64_t v807;
  float v808;
  float32x4_t v809;
  __int32 v810;
  int v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  float v815;
  float v816;
  re::ecs2::SceneComponentTable *v817;
  float v818;
  os_log_t log;
  os_log_t loga;
  NSObject *logb;
  NSObject *logc;
  float logd;
  uint64_t v824;
  re::ecs2::CameraViewDescriptorsComponent *v825;
  re::ecs2::CameraViewDescriptorsComponent *v826[2];
  unint64_t v827;
  float v828;
  re::RenderManager *v829;
  float32x4_t v830;
  uint64_t v831;
  float32x4_t v832;
  char v833;
  float32x4_t v834;
  uint64_t v835;
  float v836;
  re::TextureHandle *v837[2];
  uint64_t *v838;
  float32x4_t v839;
  re::DynamicString *v840[2];
  re::DynamicString *v841[2];
  re::DynamicString *v842[2];
  float v843;
  re::DynamicString *v844[2];
  re::AssetHandle *v845[2];
  re::AssetHandle *v846[2];
  re::AssetHandle *v847[2];
  float v848;
  float v849;
  float32x2_t v850;
  float v851;
  float v852;
  unint64_t v853;
  float32x2_t v854;
  float v855;
  float v856;
  unint64_t v857;
  float32x2_t v858;
  float v859;
  float v860;
  unint64_t v861;
  float32x2_t v862;
  float v863;
  float v864;
  unint64_t v865;
  unint64_t v866;
  float32x2_t v867;
  float v868;
  float v869;
  unint64_t v870;
  unint64_t v871;
  float32x2_t v872;
  float v873;
  float v874;
  unint64_t v875;
  unint64_t v876;
  uint64_t v877;
  _QWORD *v878;
  uint64_t v879;
  re::TextureHandle *v880[2];
  re::TextureHandle *v881[2];
  _BYTE v882[24];
  _DWORD v883[62];
  CMTime v884;
  __int128 v885;
  __int128 v886;
  _QWORD v887[5];
  _QWORD v888[3];
  int v889;
  uint64_t v890;
  uint64_t v891[3];
  _DWORD v892[62];
  uint64_t *v893;
  unint64_t v894;
  unint64_t v895;
  int v896;
  uint64_t *v897;
  _QWORD v898[2];
  unint64_t v899;
  int v900;
  float32x4_t *v901;
  _BYTE v902[24];
  _BYTE v903[24];
  _BYTE v904[16];
  uint64_t v905[2];
  CMTime v906;
  uint64_t v907[3];
  CMTime v908;
  float32x4_t v909;
  __int128 v910;
  float32x4_t v911[4];
  uint64_t v912;
  unint64_t v913;
  uint64_t v914;
  int v915;
  uint64_t v916;
  _QWORD v917[2];
  uint64_t v918;
  int v919;
  uint64_t v920;
  _QWORD v921[2];
  uint64_t v922;
  int v923;
  unsigned int *v924;
  _QWORD v925[2];
  uint64_t v926;
  int v927;
  unsigned int *v928;
  BOOL v929[8];
  unint64_t v930;
  unint64_t v931;
  int v932;
  uint64_t v933;
  unint64_t v934;
  unint64_t v935;
  unint64_t v936;
  int v937;
  uint64_t v938;
  unint64_t v939[2];
  float32x4_t v940;
  __int128 v941;
  float32x4_t v942;
  float32x4_t v943[2];
  void *v944;
  void *__p;
  unint64_t v946;
  void *v947;
  void *v948;
  uint64_t v949;
  uint64_t v950;
  uint8_t buf[48];
  float32x4_t v952;
  _BYTE v953[16];
  __int128 v954;
  CFTypeRef v955;
  const void *v956;
  __int16 v957;
  char v958;
  _BYTE v959[120];
  _DWORD v960[4];
  float32x4_t v961[4];
  __int128 v962;
  __int128 v963;
  CFTypeRef cf[2];
  unint64_t v965;
  _QWORD v966[15];
  _DWORD v967[4];
  float32x4_t v968[2];
  float32x4_t v969;
  float32x4_t v970;
  int v971;
  const char *v972;
  __int16 v973;
  int v974;
  __int16 v975;
  unint64_t v976;
  __int16 v977;
  unint64_t v978;
  uint64_t v979;
  simd_float4x4 v980;
  simd_float4x4 v981;

  v5 = a1;
  v979 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 136);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 152);
    if (v7)
    {
      if (*(_BYTE *)(v7 + 128))
      {
        v8 = *(void **)(v7 + 64);
        if (v8)
          objc_msgSend(v8, "dispatchAvailableCompletionNotifications");
      }
    }
  }
  if (!a2)
    return;
  v9 = CACurrentMediaTime();
  if (re::VideoDefaults::targetDisplayTimeAllowed(v10) && (v11 = *(float32x2_t **)(v5 + 112)) != 0)
  {
    *(double *)&_D10 = v9;
    if (*(double *)&v11[147] > 0.0)
      _D10 = v11[147];
  }
  else
  {
    *(double *)&_D10 = v9;
  }
  v13 = *(float *)&a3;
  memset(&v908, 0, sizeof(v908));
  CMTimeMakeWithSeconds(&v908, *(Float64 *)&_D10, 1000000000);
  v14 = *(_QWORD *)(v5 + 160);
  if (v14)
    log = (os_log_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  else
    log = 0;
  v15 = *(_QWORD *)(v5 + 168);
  if (v15)
  {
    v16 = *(_QWORD *)(v5 + 136);
    if (v16)
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase((uint64_t)v961, v16 + 8);
      v17 = v961[2].i32[0];
      v799 = a3;
      v18 = 0;
      if (v961[2].i32[0])
      {
        v19 = (int *)(v961[1].i64[0] + 8);
        while (1)
        {
          v20 = *v19;
          v19 += 6;
          if (v20 < 0)
            break;
          if (v961[2].u32[0] == ++v18)
          {
            LODWORD(v18) = v961[2].i32[0];
            break;
          }
        }
      }
      if (v961[2].i32[0] != (_DWORD)v18)
      {
        v21 = v18;
        v22 = v961[1].i64[0];
        do
        {
          v23 = *(_QWORD *)(v22 + 24 * v21 + 16);
          os_unfair_lock_lock((os_unfair_lock_t)(v15 + 64));
          re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)v15, v23, buf);
          os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 64));
          if (buf[0])
          {
            re::AssetHandle::AssetHandle((re::AssetHandle *)v968, (const re::AssetHandle *)&buf[8]);
            re::AssetHandle::AssetHandle((re::AssetHandle *)v907, (const re::AssetHandle *)v968);
            v24 = re::VideoAsset::loadAndConnectForRendering(v907);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v907);
            if (v24)
            {
              v25 = *(_QWORD *)(v5 + 136);
              v939[0] = v23;
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v25 + 8, (uint64_t *)v939);
              v26 = *(_QWORD *)(v5 + 136);
              v939[0] = v23;
              re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v26 + 56, (uint64_t *)v939);
            }
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v968);
            if (buf[0])
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[8]);
          }
          v22 = v961[1].i64[0];
          if (v961[2].i32[0] <= (v18 + 1))
            v27 = v18 + 1;
          else
            v27 = v961[2].i32[0];
          while (1)
          {
            v21 = (v18 + 1);
            if (v27 - 1 == (_DWORD)v18)
              break;
            LODWORD(v18) = v18 + 1;
            v28 = v21;
            if ((*(_DWORD *)(v961[1].i64[0] + 24 * v21 + 8) & 0x80000000) != 0)
              goto LABEL_36;
          }
          v28 = v27;
LABEL_36:
          LODWORD(v18) = v28;
        }
        while (v17 != v28);
      }
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::HashSetBase((uint64_t)buf, *(_QWORD *)(v5 + 136) + 56);
      v29 = *(_DWORD *)&buf[32];
      if (*(_DWORD *)&buf[32])
      {
        v30 = 0;
        v31 = (int *)(*(_QWORD *)&buf[16] + 8);
        while (1)
        {
          v32 = *v31;
          v31 += 6;
          if (v32 < 0)
            break;
          if (*(unsigned int *)&buf[32] == ++v30)
          {
            LODWORD(v30) = *(_DWORD *)&buf[32];
            break;
          }
        }
      }
      else
      {
        LODWORD(v30) = 0;
      }
      if (*(_DWORD *)&buf[32] != (_DWORD)v30)
      {
        v33 = v30;
        v34 = *(_QWORD *)&buf[16];
        do
        {
          v35 = *(_QWORD *)(v34 + 24 * v33 + 16);
          os_unfair_lock_lock((os_unfair_lock_t)(v15 + 64));
          re::AssetManager::lookupExistingAsset_assetTablesLocked((re::internal::AssetTypeRegistry **)v15, v35, v968);
          os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 64));
          if (v968[0].i8[0])
          {
            re::AssetHandle::AssetHandle((re::AssetHandle *)v939, (const re::AssetHandle *)&v968[0].u32[2]);
            v36 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v939);
            if (v36)
            {
              if (*((_QWORD *)v36 + 24))
              {
                v934 = 0;
                v929[0] = 0;
                LOBYTE(v925[0]) = 0;
                v38 = *(re::ColorManager **)(v5 + 128);
                v37 = *(char ***)(v5 + 136);
                v39 = *(re::RenderManager **)(v5 + 120);
                v906 = v908;
                re::VideoAsset::retrieveBuffersAndUpdateRuntimeData(v36, v37, v39, v38, (unint64_t)log, (id *)&v934, &v906, v13, v929, (BOOL *)v925);
                if (v929[0])
                {
                  v40 = *(_QWORD *)(v5 + 136);
                  v911[0].i64[0] = v35;
                  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v40 + 56, (uint64_t *)v911);
                }
              }
            }
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v939);
            if (v968[0].i8[0])
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v968[0].u32[2]);
          }
          v34 = *(_QWORD *)&buf[16];
          if (*(_DWORD *)&buf[32] <= (v30 + 1))
            v41 = v30 + 1;
          else
            v41 = *(_DWORD *)&buf[32];
          while (1)
          {
            v33 = (v30 + 1);
            if (v41 - 1 == (_DWORD)v30)
              break;
            LODWORD(v30) = v30 + 1;
            v42 = v33;
            if ((*(_DWORD *)(*(_QWORD *)&buf[16] + 24 * v33 + 8) & 0x80000000) != 0)
              goto LABEL_59;
          }
          v42 = v41;
LABEL_59:
          LODWORD(v30) = v42;
        }
        while (v29 != v42);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)buf);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v961);
      a3 = v799;
    }
  }
  if ((a3 & 0x100000000) != 0)
    return;
  if (!*(_QWORD *)(v5 + 120))
    return;
  v43 = *(_QWORD *)(v5 + 112);
  if (v43)
  {
    if ((*(_BYTE *)(v43 + 424) & 0x10) == 0)
      return;
  }
  v809.i64[0] = re::ecs2::ImageBasedReflectionSystem::findReflectionContentComponent((re::ecs2::ImageBasedReflectionSystem *)a2, 0);
  v817 = (re::ecs2::SceneComponentTable *)(a2 + 200);
  v44 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v45 = v44 ? *(_QWORD *)(v44 + 24) : 0;
  v46 = re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v47 = v46 ? *(_QWORD *)(v46 + 24) : 0;
  v48 = re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if ((!v48 || !*(_QWORD *)(v48 + 24)) && !v45 && !v47)
    return;
  v800 = a3;
  v49 = *(re::VideoManager **)(v5 + 136);
  if (v49)
    re::VideoManager::initializeVideoProcessorIfNeeded(v49, *(re::RenderManager **)(v5 + 120));
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v905);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v904, 3091, v5);
  v50 = re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v50)
  {
    v51 = *(_QWORD *)(v50 + 24);
    if (v51)
    {
      v52 = *(uint64_t **)(v50 + 40);
      for (i = 8 * v51; i; i -= 8)
      {
        v54 = *v52;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v961, (const re::AssetHandle *)(*v52 + 40));
        v55 = (os_unfair_lock_s *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v961);
        if (v55)
        {
          v56 = (re::VideoAsset *)v55;
          re::VideoAsset::processResourceData(v55);
          VideoPlayerComponentHelper = re::VideoAsset::createOrGetVideoPlayerComponentHelper(v56);
          if (VideoPlayerComponentHelper)
          {
            if (*(_QWORD *)(v5 + 168))
            {
              v58 = (uint64_t **)VideoPlayerComponentHelper;
              v59 = *(_QWORD **)(v54 + 16);
              re::AssetHandle::AssetHandle((re::AssetHandle *)v903, (const re::AssetHandle *)v961);
              re::ecs2::VideoPlayerComponentHelper::update(v58, v59, (const re::AssetHandle *)v903, *(re::AssetManager **)(v5 + 168));
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v903);
            }
            goto LABEL_89;
          }
          v61 = (id)*re::videoLogObjects(0);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_fault_impl(&dword_224FE9000, v61, OS_LOG_TYPE_FAULT, "Unable to create VideoPlayerComponentHelper", buf, 2u);
          }
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)v961);
          v61 = (id)*re::videoLogObjects(v60);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_224FE9000, v61, OS_LOG_TYPE_DEFAULT, "Started async loading of VideoPlayerComponent's VideoAsset.", buf, 2u);
          }
        }

LABEL_89:
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v961);
        ++v52;
      }
    }
  }
  v62 = (re::VideoDefaults *)re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v62)
  {
    v63 = *((_QWORD *)v62 + 3);
    if (v63)
    {
      v64 = (uint64_t *)*((_QWORD *)v62 + 5);
      v65 = 8 * v63;
      do
      {
        v66 = *v64;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v961, (const re::AssetHandle *)(*(_QWORD *)(*v64 + 56) + 152));
        if (!v961[0].i64[1])
        {
          Asset = (uint64_t *)re::ecs2::VideoProxyComponent::impl::generateAsset(*(re::ecs2::VideoProxyComponent::impl **)(v66 + 56), *(re::AssetManager **)(v5 + 168));
          re::AssetHandle::operator=((uint64_t *)v961, Asset);
        }
        v68 = *(_QWORD *)(v66 + 16);
        re::AssetHandle::AssetHandle((re::AssetHandle *)v902, (const re::AssetHandle *)v961);
        re::ecs2::VideoProxyComponent::update(v66, v68, (const re::AssetHandle *)v902, *(_QWORD *)(v5 + 168));
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v902);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v961);
        ++v64;
        v65 -= 8;
      }
      while (v65);
    }
  }
  v69 = re::VideoDefaults::logEnabled(v62);
  v824 = v5;
  if ((v69 & 1) != 0)
    goto LABEL_1022;
LABEL_97:
  v829 = *(re::RenderManager **)(v5 + 120);
  v901 = 0;
  v899 = 0;
  v898[0] = 0;
  v898[1] = 0;
  v900 = 0;
  ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  __asm { FMOV            V10.2S, #1.0 }
  if (ViewDescriptor)
  {
    v74 = *((_QWORD *)ViewDescriptor + 3);
    if (v74)
    {
      v75 = (re::ecs2::CameraViewDescriptorsComponent **)*((_QWORD *)ViewDescriptor + 5);
      v801 = (re::TextureHandle *)&v75[v74];
      v831 = 0;
      LODWORD(v9) = 786163454;
      do
      {
        v805 = v75;
        v76 = *v75;
        v77 = *((_QWORD *)*v75 + 2);
        if (v77 && (*(_BYTE *)(v77 + 288) & 1) != 0)
        {
          v78 = (re::ecs2::EntityComponentCollection *)(v77 + 32);
          v79 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v77 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v825 = v76;
          if (v79)
          {
            v80 = (float *)v79;
            v81 = *((_QWORD *)v76 + 27);
            if (!v81)
            {
              if (*((_QWORD *)v76 + 32))
                goto LABEL_175;
              *(_QWORD *)&v233 = re::ecs2::PerspectiveCameraComponent::calculateWorldPose(v79, 0, (uint64_t)v968).n128_u64[0];
              LayerSize = re::RenderManager::getLayerSize(v829, 0, v233, v234);
              v961[0].i32[0] = -1;
              v961[3] = (float32x4_t)xmmword_2260E5F10;
              v962 = xmmword_2260E5F20;
              v963 = xmmword_2260E5F40;
              *(_OWORD *)cf = xmmword_2260E5D70;
              v961[1] = v968[0];
              v961[2] = v968[1];
              v965 = __PAIR64__(LODWORD(v236), LODWORD(LayerSize));
              v966[0] = 0x3F8000003F800000;
              v237 = LayerSize / v236;
              if (v236 < 0.0001)
                v237 = 1.0;
              re::ecs2::PerspectiveCameraComponent::calculateProjection(v80, (uint64_t)buf, v237);
              goto LABEL_337;
            }
            if (v81 != 1 || *((_QWORD *)v76 + 32))
            {
              v82 = 0;
              while (1)
              {
                ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v76, (re::ecs2::CameraViewDescriptorsComponent *)v82);
                if (ViewDescriptor)
                  break;
LABEL_135:
                ++v82;
                v76 = v825;
                if (*((_QWORD *)v825 + 27) <= v82)
                {
                  if (!*((_QWORD *)v825 + 32))
                    goto LABEL_338;
LABEL_175:
                  v141 = 0;
                  while (1)
                  {
                    ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v76, (re::ecs2::CameraViewDescriptorsComponent *)(v141 + 0x10000));
                    if (ViewDescriptor)
                      break;
LABEL_204:
                    ++v141;
                    v76 = v825;
                    if (v141 >= *((_QWORD *)v825 + 32))
                      goto LABEL_338;
                  }
                  v82 = (unint64_t)ViewDescriptor;
                  v142 = 0;
                  v143 = 1;
                  v144 = 1;
                  while (2)
                  {
                    v87 = v144;
                    if (!*(_QWORD *)(v82 + 304))
                    {
                      v152 = 0;
                      goto LABEL_198;
                    }
                    re::AssetHandle::AssetHandle((re::AssetHandle *)v968, (const re::AssetHandle *)(*(_QWORD *)(v82 + 320) + 24 * v142 + 32));
                    if (v968[0].i64[1])
                    {
                      v147 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v968);
                      if (v147)
                      {
                        v858 = 0;
                        if (*(_DWORD *)(v147 + 240))
                          goto LABEL_1035;
                        v148 = *(id *)(v147 + 160);
                        if (v148)
                        {
                          v149 = v148;
                          v859 = (float)(unint64_t)objc_msgSend(v148, sel_width);
                          v150 = objc_msgSend(v149, sel_height);
                          v151.f32[0] = v859;
                          v151.f32[1] = (float)(unint64_t)v150;
                          v858 = v151;

                        }
LABEL_197:
                        re::AssetHandle::~AssetHandle((re::AssetHandle *)v968);
                        v152 = v858;
LABEL_198:
                        if (fabsf(vaddv_f32(vmul_f32(v152, v152))) >= 1.0e-10)
                        {
                          v861 = (unint64_t)v152;
                          re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v80, v143, (uint64_t)v968);
                          v165 = *(_QWORD *)(v82 + 16 * v142 + 204);
                          v961[3] = (float32x4_t)xmmword_2260E5F10;
                          v962 = xmmword_2260E5F20;
                          v963 = xmmword_2260E5F40;
                          *(_OWORD *)cf = xmmword_2260E5D70;
                          v961[0].i32[0] = v142;
                          v961[1] = v968[0];
                          v961[2] = v968[1];
                          v966[0] = v165;
                          v965 = v861;
                          if (*((float *)&v861 + 1) >= 0.0001)
                            v166 = *(float *)&v861 / *((float *)&v861 + 1);
                          else
                            v166 = 1.0;
                          re::ecs2::PerspectiveCameraComponent::calculateProjection(v80, (uint64_t)buf, v166);
                          re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v961[3]);
                        }
                        v144 = 0;
                        v143 = 2;
                        v142 = 1;
                        if ((v87 & 1) == 0)
                          goto LABEL_204;
                        continue;
                      }
LABEL_195:
                      v156 = 0;
                    }
                    else
                    {
                      if (!*(_QWORD *)(v82 + 304))
                        goto LABEL_1003;
                      v153 = *(_QWORD *)(v82 + 320);
                      v154 = *(_DWORD *)(v153 + 4 * v142 + 80);
                      if (v154 == -1)
                      {
                        v157 = v153 + 8 * v142;
                        v158 = *(void **)(v157 + 88);
                        if (v158)
                        {
                          v159 = objc_msgSend(v158, sel_width);
                          if (!*(_QWORD *)(v82 + 304))
                            goto LABEL_1009;
                          v860 = (float)(unint64_t)v159;
                          v160 = *(void **)(*(_QWORD *)(v82 + 320) + 8 * v142 + 88);
                        }
                        else
                        {
                          v161 = *(void **)(v157 + 104);
                          if (!v161)
                            goto LABEL_195;
                          v162 = objc_msgSend(v161, sel_width);
                          if (!*(_QWORD *)(v82 + 304))
                            goto LABEL_1014;
                          v860 = (float)(unint64_t)v162;
                          v160 = *(void **)(*(_QWORD *)(v82 + 320) + 8 * v142 + 104);
                        }
                        v163 = objc_msgSend(v160, sel_height, v786);
                        v164.f32[0] = v860;
                        v164.f32[1] = (float)(unint64_t)v163;
                        v858 = v164;
                        goto LABEL_197;
                      }
                      v156.f32[0] = re::RenderManager::getLayerSize(v829, v154, v145, v146);
                      v156.i32[1] = v155;
                    }
                    break;
                  }
                  v858 = v156;
                  goto LABEL_197;
                }
              }
              v83 = ViewDescriptor;
              v84 = 0;
              v85 = 1;
              v86 = 1;
              while (2)
              {
                v87 = v86;
                if (!*((_QWORD *)v83 + 38))
                {
                  v95 = 0;
                  goto LABEL_129;
                }
                re::AssetHandle::AssetHandle((re::AssetHandle *)v968, (const re::AssetHandle *)(*((_QWORD *)v83 + 40) + 24 * v84 + 32));
                if (v968[0].i64[1])
                {
                  v90 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v968);
                  if (v90)
                  {
                    v850 = 0;
                    if (*(_DWORD *)(v90 + 240))
                      goto LABEL_1035;
                    v91 = *(id *)(v90 + 160);
                    if (v91)
                    {
                      v92 = v91;
                      v851 = (float)(unint64_t)objc_msgSend(v91, sel_width);
                      v93 = objc_msgSend(v92, sel_width);
                      v94.f32[0] = v851;
                      v94.f32[1] = (float)(unint64_t)v93;
                      v850 = v94;

                    }
LABEL_128:
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)v968);
                    v95 = v850;
LABEL_129:
                    if (fabsf(vaddv_f32(vmul_f32(v95, v95))) >= 1.0e-10)
                    {
                      v853 = (unint64_t)v95;
                      re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v80, v85, (uint64_t)v968);
                      v108 = *(_QWORD *)((char *)v83 + 16 * v84 + 204);
                      v961[3] = (float32x4_t)xmmword_2260E5F10;
                      v962 = xmmword_2260E5F20;
                      v963 = xmmword_2260E5F40;
                      *(_OWORD *)cf = xmmword_2260E5D70;
                      v961[0].i32[0] = v84;
                      v961[1] = v968[0];
                      v961[2] = v968[1];
                      v966[0] = v108;
                      v965 = v853;
                      if (*((float *)&v853 + 1) >= 0.0001)
                        v109 = *(float *)&v853 / *((float *)&v853 + 1);
                      else
                        v109 = 1.0;
                      re::ecs2::PerspectiveCameraComponent::calculateProjection(v80, (uint64_t)buf, v109);
                      re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v961[3]);
                    }
                    v86 = 0;
                    v85 = 2;
                    v84 = 1;
                    if ((v87 & 1) == 0)
                      goto LABEL_135;
                    continue;
                  }
LABEL_126:
                  v99 = 0;
                }
                else
                {
                  if (!*((_QWORD *)v83 + 38))
                  {
                    v939[0] = 0;
                    v962 = 0u;
                    memset(v961, 0, sizeof(v961));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "operator[]";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 797;
                    *(_WORD *)&buf[18] = 2048;
                    *(_QWORD *)&buf[20] = 0;
                    *(_WORD *)&buf[28] = 2048;
                    *(_QWORD *)&buf[30] = 0;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_1003:
                    v939[0] = 0;
                    v962 = 0u;
                    memset(v961, 0, sizeof(v961));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)buf = 136315906;
                    *(_QWORD *)&buf[4] = "operator[]";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 797;
                    *(_WORD *)&buf[18] = 2048;
                    *(_QWORD *)&buf[20] = 0;
                    *(_WORD *)&buf[28] = 2048;
                    *(_QWORD *)&buf[30] = 0;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_1004;
                  }
                  v96 = *((_QWORD *)v83 + 40);
                  v97 = *(_DWORD *)(v96 + 4 * v84 + 80);
                  if (v97 == -1)
                  {
                    v100 = v96 + 8 * v84;
                    v101 = *(void **)(v100 + 88);
                    if (v101)
                    {
                      v102 = objc_msgSend(v101, sel_width);
                      if (!*((_QWORD *)v83 + 38))
                        goto LABEL_1008;
                      v852 = (float)(unint64_t)v102;
                      v103 = *(void **)(*((_QWORD *)v83 + 40) + 8 * v84 + 88);
                    }
                    else
                    {
                      v104 = *(void **)(v100 + 104);
                      if (!v104)
                        goto LABEL_126;
                      v105 = objc_msgSend(v104, sel_width);
                      if (!*((_QWORD *)v83 + 38))
                        goto LABEL_1012;
                      v852 = (float)(unint64_t)v105;
                      v103 = *(void **)(*((_QWORD *)v83 + 40) + 8 * v84 + 104);
                    }
                    v106 = objc_msgSend(v103, sel_height, v786);
                    v107.f32[0] = v852;
                    v107.f32[1] = (float)(unint64_t)v106;
                    v850 = v107;
                    goto LABEL_128;
                  }
                  v99.f32[0] = re::RenderManager::getLayerSize(v829, v97, v88, v89);
                  v99.i32[1] = v98;
                }
                break;
              }
              v850 = v99;
              goto LABEL_128;
            }
            ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v76, 0);
            if (ViewDescriptor)
            {
              v197 = ViewDescriptor;
              v198 = 0;
              v199 = 1;
              v200 = 1;
              do
              {
                v201 = v200;
                v202 = 0;
                if (!*((_QWORD *)v197 + 38))
                {
                  v202.f32[0] = re::RenderManager::getLayerSize(v829, 0, 0.0, v196);
                  v202.i32[1] = v203;
                }
                v196 = COERCE_DOUBLE(vmul_f32(v202, v202));
                *(float *)&v196 = fabsf(vaddv_f32(*(float32x2_t *)&v196));
                if (*(float *)&v196 >= 1.0e-10)
                {
                  v866 = (unint64_t)v202;
                  re::ecs2::PerspectiveCameraComponent::calculateWorldPose((uint64_t)v80, v199, (uint64_t)v968);
                  v961[3] = (float32x4_t)xmmword_2260E5F10;
                  v962 = xmmword_2260E5F20;
                  v963 = xmmword_2260E5F40;
                  *(_OWORD *)cf = xmmword_2260E5D70;
                  v961[0].i32[0] = v198;
                  v961[1] = v968[0];
                  v961[2] = v968[1];
                  v966[0] = _D10;
                  v965 = v866;
                  if (*((float *)&v866 + 1) >= 0.0001)
                    v204 = *(float *)&v866 / *((float *)&v866 + 1);
                  else
                    v204 = 1.0;
                  re::ecs2::PerspectiveCameraComponent::calculateProjection(v80, (uint64_t)buf, v204);
                  re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v961[3]);
                }
                v200 = 0;
                v198 = 1;
                v199 = 2;
              }
              while ((v201 & 1) != 0);
            }
          }
          else
          {
            v110 = re::ecs2::EntityComponentCollection::get(v78, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            if (v110)
            {
              v111 = (float *)v110;
              v112 = *((_QWORD *)v76 + 27);
              if (!v112)
              {
                if (*((_QWORD *)v76 + 32))
                  goto LABEL_251;
                *(_QWORD *)&v274 = re::ecs2::OrthographicCameraComponent::calculateWorldPose(v110, 0, (uint64_t)v968).n128_u64[0];
                v276 = re::RenderManager::getLayerSize(v829, 0, v274, v275);
                v961[0].i32[0] = -1;
                v961[3] = (float32x4_t)xmmword_2260E5F10;
                v962 = xmmword_2260E5F20;
                v963 = xmmword_2260E5F40;
                *(_OWORD *)cf = xmmword_2260E5D70;
                v961[1] = v968[0];
                v961[2] = v968[1];
                v965 = __PAIR64__(LODWORD(v277), LODWORD(v276));
                v966[0] = 0x3F8000003F800000;
                v278 = v276 / v277;
                if (v277 < 0.0001)
                  v278 = 1.0;
                re::ecs2::OrthographicCameraComponent::calculateProjection(v111, (uint64_t)buf, v278);
                goto LABEL_337;
              }
              if (v112 != 1 || *((_QWORD *)v76 + 32))
              {
                v113 = 0;
                while (1)
                {
                  ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v76, v113);
                  if (ViewDescriptor)
                    break;
LABEL_171:
                  v113 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v113 + 1);
                  v76 = v825;
                  if (*((_QWORD *)v825 + 27) <= (unint64_t)v113)
                  {
                    if (!*((_QWORD *)v825 + 32))
                      goto LABEL_338;
LABEL_251:
                    v205 = 0;
                    while (1)
                    {
                      ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v76, (re::ecs2::CameraViewDescriptorsComponent *)(v205 + 0x10000));
                      if (ViewDescriptor)
                        break;
LABEL_280:
                      ++v205;
                      v76 = v825;
                      if (v205 >= *((_QWORD *)v825 + 32))
                        goto LABEL_338;
                    }
                    v206 = ViewDescriptor;
                    v207 = 0;
                    v208 = 1;
                    v209 = 1;
                    while (2)
                    {
                      v210 = v209;
                      if (!*((_QWORD *)v206 + 38))
                      {
                        v218 = 0;
                        goto LABEL_274;
                      }
                      re::AssetHandle::AssetHandle((re::AssetHandle *)v968, (const re::AssetHandle *)(*((_QWORD *)v206 + 40) + 24 * v207 + 32));
                      if (v968[0].i64[1])
                      {
                        v213 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v968);
                        if (v213)
                        {
                          v867 = 0;
                          if (*(_DWORD *)(v213 + 240))
                            goto LABEL_1035;
                          v214 = *(id *)(v213 + 160);
                          if (v214)
                          {
                            v215 = v214;
                            v868 = (float)(unint64_t)objc_msgSend(v214, sel_width);
                            v216 = objc_msgSend(v215, sel_height);
                            v217.f32[0] = v868;
                            v217.f32[1] = (float)(unint64_t)v216;
                            v867 = v217;

                          }
LABEL_273:
                          re::AssetHandle::~AssetHandle((re::AssetHandle *)v968);
                          v218 = v867;
LABEL_274:
                          if (fabsf(vaddv_f32(vmul_f32(v218, v218))) >= 1.0e-10)
                          {
                            v870 = (unint64_t)v218;
                            re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)v111, v208, (uint64_t)v968);
                            v231 = *(_QWORD *)((char *)v206 + 16 * v207 + 204);
                            v961[3] = (float32x4_t)xmmword_2260E5F10;
                            v962 = xmmword_2260E5F20;
                            v963 = xmmword_2260E5F40;
                            *(_OWORD *)cf = xmmword_2260E5D70;
                            v961[0].i32[0] = v207;
                            v961[1] = v968[0];
                            v961[2] = v968[1];
                            v966[0] = v231;
                            v965 = v870;
                            if (*((float *)&v870 + 1) >= 0.0001)
                              v232 = *(float *)&v870 / *((float *)&v870 + 1);
                            else
                              v232 = 1.0;
                            re::ecs2::OrthographicCameraComponent::calculateProjection(v111, (uint64_t)buf, v232);
                            re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v961[3]);
                          }
                          v209 = 0;
                          v208 = 2;
                          v207 = 1;
                          if ((v210 & 1) == 0)
                            goto LABEL_280;
                          continue;
                        }
LABEL_271:
                        v222 = 0;
                      }
                      else
                      {
                        if (!*((_QWORD *)v206 + 38))
                          goto LABEL_1007;
                        v219 = *((_QWORD *)v206 + 40);
                        v220 = *(_DWORD *)(v219 + 4 * v207 + 80);
                        if (v220 == -1)
                        {
                          v223 = v219 + 8 * v207;
                          v224 = *(void **)(v223 + 88);
                          if (v224)
                          {
                            v225 = objc_msgSend(v224, sel_width);
                            if (!*((_QWORD *)v206 + 38))
                              goto LABEL_1015;
                            v869 = (float)(unint64_t)v225;
                            v226 = *(void **)(*((_QWORD *)v206 + 40) + 8 * v207 + 88);
                          }
                          else
                          {
                            v227 = *(void **)(v223 + 104);
                            if (!v227)
                              goto LABEL_271;
                            v228 = objc_msgSend(v227, sel_width);
                            if (!*((_QWORD *)v206 + 38))
                              goto LABEL_1018;
                            v869 = (float)(unint64_t)v228;
                            v226 = *(void **)(*((_QWORD *)v206 + 40) + 8 * v207 + 104);
                          }
                          v229 = objc_msgSend(v226, sel_height, v786);
                          v230.f32[0] = v869;
                          v230.f32[1] = (float)(unint64_t)v229;
                          v867 = v230;
                          goto LABEL_273;
                        }
                        v222.f32[0] = re::RenderManager::getLayerSize(v829, v220, v211, v212);
                        v222.i32[1] = v221;
                      }
                      break;
                    }
                    v867 = v222;
                    goto LABEL_273;
                  }
                }
                v114 = ViewDescriptor;
                v115 = 0;
                v116 = 1;
                v117 = 1;
                while (2)
                {
                  v118 = v117;
                  if (!*((_QWORD *)v114 + 38))
                  {
                    v126 = 0;
                    goto LABEL_165;
                  }
                  re::AssetHandle::AssetHandle((re::AssetHandle *)v968, (const re::AssetHandle *)(*((_QWORD *)v114 + 40) + 24 * v115 + 32));
                  if (v968[0].i64[1])
                  {
                    v121 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v968);
                    if (v121)
                    {
                      v854 = 0;
                      if (*(_DWORD *)(v121 + 240))
                        goto LABEL_1035;
                      v122 = *(id *)(v121 + 160);
                      if (v122)
                      {
                        v123 = v122;
                        v855 = (float)(unint64_t)objc_msgSend(v122, sel_width);
                        v124 = objc_msgSend(v123, sel_width);
                        v125.f32[0] = v855;
                        v125.f32[1] = (float)(unint64_t)v124;
                        v854 = v125;

                      }
LABEL_164:
                      re::AssetHandle::~AssetHandle((re::AssetHandle *)v968);
                      v126 = v854;
LABEL_165:
                      if (fabsf(vaddv_f32(vmul_f32(v126, v126))) >= 1.0e-10)
                      {
                        v857 = (unint64_t)v126;
                        re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)v111, v116, (uint64_t)v968);
                        v139 = *(_QWORD *)((char *)v114 + 16 * v115 + 204);
                        v961[3] = (float32x4_t)xmmword_2260E5F10;
                        v962 = xmmword_2260E5F20;
                        v963 = xmmword_2260E5F40;
                        *(_OWORD *)cf = xmmword_2260E5D70;
                        v961[0].i32[0] = v115;
                        v961[1] = v968[0];
                        v961[2] = v968[1];
                        v966[0] = v139;
                        v965 = v857;
                        if (*((float *)&v857 + 1) >= 0.0001)
                          v140 = *(float *)&v857 / *((float *)&v857 + 1);
                        else
                          v140 = 1.0;
                        re::ecs2::OrthographicCameraComponent::calculateProjection(v111, (uint64_t)buf, v140);
                        re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v961[3]);
                      }
                      v117 = 0;
                      v116 = 2;
                      v115 = 1;
                      if ((v118 & 1) == 0)
                        goto LABEL_171;
                      continue;
                    }
LABEL_162:
                    v130 = 0;
                  }
                  else
                  {
                    if (!*((_QWORD *)v114 + 38))
                      goto LABEL_1006;
                    v127 = *((_QWORD *)v114 + 40);
                    v128 = *(_DWORD *)(v127 + 4 * v115 + 80);
                    if (v128 == -1)
                    {
                      v131 = v127 + 8 * v115;
                      v132 = *(void **)(v131 + 88);
                      if (v132)
                      {
                        v133 = objc_msgSend(v132, sel_width);
                        if (!*((_QWORD *)v114 + 38))
                          goto LABEL_1013;
                        v856 = (float)(unint64_t)v133;
                        v134 = *(void **)(*((_QWORD *)v114 + 40) + 8 * v115 + 88);
                      }
                      else
                      {
                        v135 = *(void **)(v131 + 104);
                        if (!v135)
                          goto LABEL_162;
                        v136 = objc_msgSend(v135, sel_width);
                        if (!*((_QWORD *)v114 + 38))
                          goto LABEL_1016;
                        v856 = (float)(unint64_t)v136;
                        v134 = *(void **)(*((_QWORD *)v114 + 40) + 8 * v115 + 104);
                      }
                      v137 = objc_msgSend(v134, sel_height, v786);
                      v138.f32[0] = v856;
                      v138.f32[1] = (float)(unint64_t)v137;
                      v854 = v138;
                      goto LABEL_164;
                    }
                    v130.f32[0] = re::RenderManager::getLayerSize(v829, v128, v119, v120);
                    v130.i32[1] = v129;
                  }
                  break;
                }
                v854 = v130;
                goto LABEL_164;
              }
              ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v76, 0);
              if (ViewDescriptor)
              {
                v239 = ViewDescriptor;
                v240 = 0;
                v241 = 1;
                v242 = 1;
                do
                {
                  v243 = v242;
                  v244 = 0;
                  if (!*((_QWORD *)v239 + 38))
                  {
                    v244.f32[0] = re::RenderManager::getLayerSize(v829, 0, 0.0, v238);
                    v244.i32[1] = v245;
                  }
                  v238 = COERCE_DOUBLE(vmul_f32(v244, v244));
                  *(float *)&v238 = fabsf(vaddv_f32(*(float32x2_t *)&v238));
                  if (*(float *)&v238 >= 1.0e-10)
                  {
                    v871 = (unint64_t)v244;
                    re::ecs2::OrthographicCameraComponent::calculateWorldPose((uint64_t)v111, v241, (uint64_t)v968);
                    v961[3] = (float32x4_t)xmmword_2260E5F10;
                    v962 = xmmword_2260E5F20;
                    v963 = xmmword_2260E5F40;
                    *(_OWORD *)cf = xmmword_2260E5D70;
                    v961[0].i32[0] = v240;
                    v961[1] = v968[0];
                    v961[2] = v968[1];
                    v966[0] = _D10;
                    v965 = v871;
                    if (*((float *)&v871 + 1) >= 0.0001)
                      v246 = *(float *)&v871 / *((float *)&v871 + 1);
                    else
                      v246 = 1.0;
                    re::ecs2::OrthographicCameraComponent::calculateProjection(v111, (uint64_t)buf, v246);
                    re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v961[3]);
                  }
                  v242 = 0;
                  v240 = 1;
                  v241 = 2;
                }
                while ((v243 & 1) != 0);
              }
            }
            else
            {
              ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v78, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (!ViewDescriptor)
                goto LABEL_338;
              v167 = (uint64_t)ViewDescriptor;
              v168 = *((_QWORD *)v76 + 27);
              if (!v168)
              {
                if (*((_QWORD *)v76 + 32))
                  goto LABEL_297;
                re::ecs2::CustomMatrixCameraComponent::calculateWorldPose((uint64_t)ViewDescriptor, 0, v968);
                v289 = re::RenderManager::getLayerSize(v829, 0, v287, v288);
                v961[0].i32[0] = -1;
                v961[3] = (float32x4_t)xmmword_2260E5F10;
                v962 = xmmword_2260E5F20;
                v963 = xmmword_2260E5F40;
                *(_OWORD *)cf = xmmword_2260E5D70;
                v961[1] = v968[0];
                v961[2] = v968[1];
                v965 = __PAIR64__(v290, LODWORD(v289));
                v966[0] = 0x3F8000003F800000;
                re::ecs2::CustomMatrixCameraComponent::calculateProjection(v167, 0, (uint64_t)buf);
LABEL_337:
                re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v961[3]);
                goto LABEL_338;
              }
              if (v168 != 1 || *((_QWORD *)v76 + 32))
              {
                v169 = 0;
                while (1)
                {
                  ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v76, v169);
                  if (ViewDescriptor)
                    break;
LABEL_236:
                  v169 = (re::ecs2::CameraViewDescriptorsComponent *)((char *)v169 + 1);
                  v76 = v825;
                  if (*((_QWORD *)v825 + 27) <= (unint64_t)v169)
                  {
                    if (!*((_QWORD *)v825 + 32))
                      goto LABEL_338;
LABEL_297:
                    v247 = 0;
                    while (1)
                    {
                      ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v76, (re::ecs2::CameraViewDescriptorsComponent *)(v247 + 0x10000));
                      if (ViewDescriptor)
                        break;
LABEL_323:
                      ++v247;
                      v76 = v825;
                      if (v247 >= *((_QWORD *)v825 + 32))
                        goto LABEL_338;
                    }
                    v248 = ViewDescriptor;
                    v249 = 0;
                    v250 = 1;
                    v251 = 1;
                    while (2)
                    {
                      v252 = v251;
                      if (!*((_QWORD *)v248 + 38))
                      {
                        v260 = 0;
                        goto LABEL_320;
                      }
                      re::AssetHandle::AssetHandle((re::AssetHandle *)v968, (const re::AssetHandle *)(*((_QWORD *)v248 + 40) + 24 * v249 + 32));
                      if (v968[0].i64[1])
                      {
                        v255 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v968);
                        if (v255)
                        {
                          v872 = 0;
                          if (*(_DWORD *)(v255 + 240))
                            goto LABEL_1035;
                          v256 = *(id *)(v255 + 160);
                          if (v256)
                          {
                            v257 = v256;
                            v873 = (float)(unint64_t)objc_msgSend(v256, sel_width);
                            v258 = objc_msgSend(v257, sel_height);
                            v259.f32[0] = v873;
                            v259.f32[1] = (float)(unint64_t)v258;
                            v872 = v259;

                          }
LABEL_319:
                          re::AssetHandle::~AssetHandle((re::AssetHandle *)v968);
                          v260 = v872;
LABEL_320:
                          if (fabsf(vaddv_f32(vmul_f32(v260, v260))) >= 1.0e-10)
                          {
                            v875 = (unint64_t)v260;
                            re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v167, v250, v968);
                            v273 = *(_QWORD *)((char *)v248 + 16 * v249 + 204);
                            v961[3] = (float32x4_t)xmmword_2260E5F10;
                            v962 = xmmword_2260E5F20;
                            v963 = xmmword_2260E5F40;
                            *(_OWORD *)cf = xmmword_2260E5D70;
                            v961[0].i32[0] = v249;
                            v961[1] = v968[0];
                            v961[2] = v968[1];
                            v966[0] = v273;
                            v965 = v875;
                            re::ecs2::CustomMatrixCameraComponent::calculateProjection(v167, v250, (uint64_t)buf);
                            re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v961[3]);
                          }
                          v251 = 0;
                          v250 = 2;
                          v249 = 1;
                          if ((v252 & 1) == 0)
                            goto LABEL_323;
                          continue;
                        }
LABEL_317:
                        v264 = 0;
                      }
                      else
                      {
                        if (!*((_QWORD *)v248 + 38))
                          goto LABEL_1011;
                        v261 = *((_QWORD *)v248 + 40);
                        v262 = *(_DWORD *)(v261 + 4 * v249 + 80);
                        if (v262 == -1)
                        {
                          v265 = v261 + 8 * v249;
                          v266 = *(void **)(v265 + 88);
                          if (v266)
                          {
                            v267 = objc_msgSend(v266, sel_width);
                            if (!*((_QWORD *)v248 + 38))
                              goto LABEL_1019;
                            v874 = (float)(unint64_t)v267;
                            v268 = *(void **)(*((_QWORD *)v248 + 40) + 8 * v249 + 88);
                          }
                          else
                          {
                            v269 = *(void **)(v265 + 104);
                            if (!v269)
                              goto LABEL_317;
                            v270 = objc_msgSend(v269, sel_width);
                            if (!*((_QWORD *)v248 + 38))
                              goto LABEL_1021;
                            v874 = (float)(unint64_t)v270;
                            v268 = *(void **)(*((_QWORD *)v248 + 40) + 8 * v249 + 104);
                          }
                          v271 = objc_msgSend(v268, sel_height, v786);
                          v272.f32[0] = v874;
                          v272.f32[1] = (float)(unint64_t)v271;
                          v872 = v272;
                          goto LABEL_319;
                        }
                        v264.f32[0] = re::RenderManager::getLayerSize(v829, v262, v253, v254);
                        v264.i32[1] = v263;
                      }
                      break;
                    }
                    v872 = v264;
                    goto LABEL_319;
                  }
                }
                v170 = ViewDescriptor;
                v171 = 0;
                v172 = 1;
                v173 = 1;
                while (2)
                {
                  v174 = v173;
                  if (!*((_QWORD *)v170 + 38))
                  {
                    v182 = 0;
                    goto LABEL_233;
                  }
                  re::AssetHandle::AssetHandle((re::AssetHandle *)v968, (const re::AssetHandle *)(*((_QWORD *)v170 + 40) + 24 * v171 + 32));
                  if (v968[0].i64[1])
                  {
                    v177 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)v968);
                    if (v177)
                    {
                      v862 = 0;
                      if (*(_DWORD *)(v177 + 240))
                      {
LABEL_1035:
                        v780 = (re *)std::__throw_bad_variant_access[abi:nn180100]();
                        goto LABEL_1036;
                      }
                      v178 = *(id *)(v177 + 160);
                      if (v178)
                      {
                        v179 = v178;
                        v863 = (float)(unint64_t)objc_msgSend(v178, sel_width);
                        v180 = objc_msgSend(v179, sel_width);
                        v181.f32[0] = v863;
                        v181.f32[1] = (float)(unint64_t)v180;
                        v862 = v181;

                      }
LABEL_232:
                      re::AssetHandle::~AssetHandle((re::AssetHandle *)v968);
                      v182 = v862;
LABEL_233:
                      if (fabsf(vaddv_f32(vmul_f32(v182, v182))) >= 1.0e-10)
                      {
                        v865 = (unint64_t)v182;
                        re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v167, v172, v968);
                        v195 = *(_QWORD *)((char *)v170 + 16 * v171 + 204);
                        v961[3] = (float32x4_t)xmmword_2260E5F10;
                        v962 = xmmword_2260E5F20;
                        v963 = xmmword_2260E5F40;
                        *(_OWORD *)cf = xmmword_2260E5D70;
                        v961[0].i32[0] = v171;
                        v961[1] = v968[0];
                        v961[2] = v968[1];
                        v966[0] = v195;
                        v965 = v865;
                        re::ecs2::CustomMatrixCameraComponent::calculateProjection(v167, v172, (uint64_t)buf);
                        re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v961[3]);
                      }
                      v173 = 0;
                      v172 = 2;
                      v171 = 1;
                      if ((v174 & 1) == 0)
                        goto LABEL_236;
                      continue;
                    }
LABEL_230:
                    v186 = 0;
                  }
                  else
                  {
                    if (!*((_QWORD *)v170 + 38))
                      goto LABEL_1010;
                    v183 = *((_QWORD *)v170 + 40);
                    v184 = *(_DWORD *)(v183 + 4 * v171 + 80);
                    if (v184 == -1)
                    {
                      v187 = v183 + 8 * v171;
                      v188 = *(void **)(v187 + 88);
                      if (v188)
                      {
                        v189 = objc_msgSend(v188, sel_width);
                        if (!*((_QWORD *)v170 + 38))
                          goto LABEL_1017;
                        v864 = (float)(unint64_t)v189;
                        v190 = *(void **)(*((_QWORD *)v170 + 40) + 8 * v171 + 88);
                      }
                      else
                      {
                        v191 = *(void **)(v187 + 104);
                        if (!v191)
                          goto LABEL_230;
                        v192 = objc_msgSend(v191, sel_width);
                        if (!*((_QWORD *)v170 + 38))
                          goto LABEL_1020;
                        v864 = (float)(unint64_t)v192;
                        v190 = *(void **)(*((_QWORD *)v170 + 40) + 8 * v171 + 104);
                      }
                      v193 = objc_msgSend(v190, sel_height, v786, v787);
                      v194.f32[0] = v864;
                      v194.f32[1] = (float)(unint64_t)v193;
                      v862 = v194;
                      goto LABEL_232;
                    }
                    v186.f32[0] = re::RenderManager::getLayerSize(v829, v184, v175, v176);
                    v186.i32[1] = v185;
                  }
                  break;
                }
                v862 = v186;
                goto LABEL_232;
              }
              ViewDescriptor = (_anonymous_namespace_ *)re::ecs2::CameraViewDescriptorsComponent::tryGetViewDescriptor(v76, 0);
              if (ViewDescriptor)
              {
                v280 = ViewDescriptor;
                v281 = 0;
                v282 = 1;
                v283 = 1;
                do
                {
                  v284 = v283;
                  v285 = 0;
                  if (!*((_QWORD *)v280 + 38))
                  {
                    v285.f32[0] = re::RenderManager::getLayerSize(v829, 0, 0.0, v279);
                    v285.i32[1] = v286;
                  }
                  v279 = COERCE_DOUBLE(vmul_f32(v285, v285));
                  *(float *)&v279 = fabsf(vaddv_f32(*(float32x2_t *)&v279));
                  if (*(float *)&v279 >= 1.0e-10)
                  {
                    v876 = (unint64_t)v285;
                    re::ecs2::CustomMatrixCameraComponent::calculateWorldPose(v167, v282, v968);
                    v961[3] = (float32x4_t)xmmword_2260E5F10;
                    v962 = xmmword_2260E5F20;
                    v963 = xmmword_2260E5F40;
                    *(_OWORD *)cf = xmmword_2260E5D70;
                    v961[0].i32[0] = v281;
                    v961[1] = v968[0];
                    v961[2] = v968[1];
                    v966[0] = _D10;
                    v965 = v876;
                    re::ecs2::CustomMatrixCameraComponent::calculateProjection(v167, v282, (uint64_t)buf);
                    re::Projection::computeMatrix4x4F((re::Projection *)buf, (uint64_t)&v961[3]);
                  }
                  v283 = 0;
                  v281 = 1;
                  v282 = 2;
                }
                while ((v284 & 1) != 0);
              }
            }
          }
        }
LABEL_338:
        v75 = v805 + 1;
      }
      while (v805 + 1 != (re::ecs2::CameraViewDescriptorsComponent **)v801);
    }
  }
  v897 = 0;
  v895 = 0;
  v896 = 0;
  v894 = 0;
  v291 = (re::VideoDefaults *)re::DynamicArray<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo>::setCapacity(&v893, 0);
  ++v896;
  v292 = 0;
  v293 = v824;
  if (re::VideoDefaults::colorSpaceTransformationAllowed(v291))
  {
    v294 = *(char **)(v824 + 128);
    if (v294[64])
      v292 = *v294;
    else
      v292 = 0;
  }
  v295 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v824 + 192) + 24))(*(_QWORD *)(v824 + 192));
  v296 = (re::VideoDefaults *)re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v296)
  {
    v297 = *((_QWORD *)v296 + 3);
    if (v297)
    {
      v298 = (uint64_t *)*((_QWORD *)v296 + 5);
      v299 = &v298[v297];
      v300 = &unk_255829000;
      v833 = v292;
      do
      {
        v301 = *v298;
        v877 = *(_QWORD *)(*v298 + 16);
        v302 = (re *)re::VideoDefaults::logEnabled(v296);
        if ((_DWORD)v302)
        {
          v353 = (id)*re::videoLogObjects(v302);
          if (os_log_type_enabled(v353, OS_LOG_TYPE_DEFAULT))
          {
            v354 = *(_QWORD *)(v877 + 280);
            v355 = CFSTR("Yes");
            if ((*(_DWORD *)(v877 + 288) & 1) == 0)
              v355 = CFSTR("No");
            v961[0].i32[0] = 136315394;
            *(uint64_t *)((char *)v961[0].i64 + 4) = v354;
            v961[0].i16[6] = 2112;
            *(uint64_t *)((char *)&v961[0].i64[1] + 6) = (uint64_t)v355;
            _os_log_impl(&dword_224FE9000, v353, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->update :: Entity %s isActive == %@;",
              (uint8_t *)v961,
              0x16u);
          }

        }
        if (v300[253] != -1)
          dispatch_once(&re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken, &__block_literal_global_35);
        if (re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::gSystemMaterialParametersDirtyTracking)
          re::ecs2::VideoComponent::removeParamsFromSystemParameterBlock((re::ecs2::VideoComponent *)v301, *(re::MaterialManager **)(*(_QWORD *)(v293 + 120) + 24), 0, *(_BYTE *)(v301 + 284) == 0);
        *(_DWORD *)(v301 + 200) = -1;
        *(_QWORD *)(v301 + 192) = 0;
        *(_BYTE *)(v301 + 206) = v292;
        *(_DWORD *)(v301 + 280) = 1065353216;
        re::AssetHandle::loadAsync((re::AssetHandle *)(v301 + 32));
        v304 = (re *)re::VideoDefaults::logEnabled(v303);
        if ((_DWORD)v304)
        {
          v356 = (id)*re::videoLogObjects(v304);
          if (os_log_type_enabled(v356, OS_LOG_TYPE_DEFAULT))
          {
            v357 = *(_QWORD *)(v877 + 280);
            if ((*(_BYTE *)(v877 + 288) & 1) != 0)
              v358 = CFSTR("Yes");
            else
              v358 = CFSTR("No");
            v359 = *(_QWORD *)(v301 + 40);
            if (v359)
            {
              v360 = atomic_load((unsigned int *)(v359 + 704));
              if (v360 == 2)
                v361 = CFSTR("Yes");
              else
                v361 = CFSTR("No");
            }
            else
            {
              v361 = CFSTR("No");
            }
            v368 = *(_DWORD *)(v301 + 268);
            v961[0].i32[0] = 136315906;
            *(uint64_t *)((char *)v961[0].i64 + 4) = v357;
            v961[0].i16[6] = 2112;
            *(uint64_t *)((char *)&v961[0].i64[1] + 6) = (uint64_t)v358;
            v961[1].i16[3] = 2112;
            v961[1].i64[1] = (uint64_t)v361;
            v961[2].i16[0] = 1024;
            *(__int32 *)((char *)v961[2].i32 + 2) = v368;
            _os_log_impl(&dword_224FE9000, v356, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->update :: Entity %s isActive == %@; materials.isLoaded == %@; traits == %d",
              (uint8_t *)v961,
              0x26u);
          }

        }
        if ((*(_BYTE *)(v877 + 288) & 1) != 0
          && (v305 = *(_QWORD *)(v301 + 40)) != 0
          && (v306 = atomic_load((unsigned int *)(v305 + 704)), v306 == 2)
          && (v307 = *(_QWORD *)(v301 + 16)) != 0
          && (v308 = *(re::ecs2::NetworkComponent **)(v307 + 200)) != 0
          && re::ecs2::NetworkComponent::owningProcessType(v308) == 2
          && *(float *)(v293 + 208) == 0.0)
        {
          for (j = 0; j != 240; j += 120)
          {
            v310 = (char *)v961 + j;
            *((_DWORD *)v310 + 27) = 0;
            *(_QWORD *)(v310 + 100) = 0;
            *(_OWORD *)v310 = 0uLL;
            *((_OWORD *)v310 + 1) = 0uLL;
            *((_OWORD *)v310 + 2) = 0uLL;
            *((_OWORD *)v310 + 3) = 0uLL;
            *((_OWORD *)v310 + 4) = 0uLL;
            *(_OWORD *)(v310 + 76) = 0uLL;
          }
          v967[0] = -1;
          re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)v301);
          v311 = *(unsigned __int8 *)(v301 + 265);
          v313 = (re *)re::VideoDefaults::logEnabled(v312);
          v788 = v299;
          if (v311)
          {
            if ((_DWORD)v313)
            {
              v375 = (id)*re::videoLogObjects(v313);
              if (os_log_type_enabled(v375, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_224FE9000, v375, OS_LOG_TYPE_DEFAULT, "VideoComponent's material supports applying a gamma tone curve. Using Metal textures that do not apply a hardware de-gamma", buf, 2u);
              }

              v293 = v824;
            }
            re::ecs2::VideoComponent::getVideoTextureHandles((re::ecs2::VideoComponent *)v301, (uint64_t)buf);
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *>((uint64_t)buf, (uint64_t)v960, (uint64_t)v961);
            v314 = 0;
            v967[0] = v960[0];
            do
            {
              v315 = &buf[v314];
              if (*(_QWORD *)&v959[v314 + 104])
                re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v959[v314 + 104]);
              *(_QWORD *)&v959[v314 + 104] = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)(v315 + 184));
              re::TextureHandle::invalidate((re::TextureHandle *)(v315 + 168));
              re::TextureHandle::invalidate((re::TextureHandle *)(v315 + 152));
              re::TextureHandle::invalidate((re::TextureHandle *)(v315 + 136));
              re::TextureHandle::invalidate((re::TextureHandle *)&v959[v314]);
              v314 -= 120;
            }
            while (v314 != -240);
          }
          else
          {
            if ((_DWORD)v313)
            {
              v376 = (id)*re::videoLogObjects(v313);
              if (os_log_type_enabled(v376, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_224FE9000, v376, OS_LOG_TYPE_DEFAULT, "VideoComponent's material does not support applying a gamma tone curve. Using Metal textures that apply a hardware de-gamma", buf, 2u);
              }

              v293 = v824;
            }
            re::ecs2::VideoComponent::getLegacyVideoTextureHandles((re::ecs2::VideoComponent *)buf, v301);
            std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *>((uint64_t)buf, (uint64_t)v960, (uint64_t)v961);
            v336 = 0;
            v967[0] = v960[0];
            do
            {
              v337 = &buf[v336];
              if (*(_QWORD *)&v959[v336 + 104])
                re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v959[v336 + 104]);
              *(_QWORD *)&v959[v336 + 104] = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)(v337 + 184));
              re::TextureHandle::invalidate((re::TextureHandle *)(v337 + 168));
              re::TextureHandle::invalidate((re::TextureHandle *)(v337 + 152));
              re::TextureHandle::invalidate((re::TextureHandle *)(v337 + 136));
              re::TextureHandle::invalidate((re::TextureHandle *)&v959[v336]);
              v336 -= 120;
            }
            while (v336 != -240);
          }
          re::TextureHandle::TextureHandle((re::TextureHandle *)buf, (const re::TextureHandle *)v961);
          re::TextureHandle::TextureHandle((re::TextureHandle *)&buf[16], (const re::TextureHandle *)&v961[1]);
          re::TextureHandle::TextureHandle((re::TextureHandle *)&buf[32], (const re::TextureHandle *)&v961[2]);
          re::TextureHandle::TextureHandle((re::TextureHandle *)&v952, (const re::TextureHandle *)&v961[3]);
          re::TextureHandle::TextureHandle((re::TextureHandle *)v953, (const re::TextureHandle *)&v962);
          v954 = v963;
          v955 = cf[0];
          v956 = 0;
          re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v956, &v956, cf[1]);
          v338 = 0;
          v957 = v965;
          v958 = BYTE2(v965);
          v339 = BYTE4(v955);
          v340 = BYTE5(v955);
          v341 = *(_QWORD *)(v293 + 120);
          do
          {
            v342 = &v892[v338];
            v342[27] = 0;
            *(_QWORD *)(v342 + 25) = 0;
            *(_OWORD *)v342 = 0uLL;
            *((_OWORD *)v342 + 1) = 0uLL;
            *((_OWORD *)v342 + 2) = 0uLL;
            *((_OWORD *)v342 + 3) = 0uLL;
            *((_OWORD *)v342 + 4) = 0uLL;
            v338 += 30;
            *(_OWORD *)(v342 + 19) = 0uLL;
          }
          while (v338 != 60);
          v343 = v339 != 0;
          v344 = v340 == 0;
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)v968, (uint64_t)v961, (uint64_t)v967, (uint64_t)v892);
          v892[60] = v967[0];
          v345 = re::ecs2::VideoComponent::YCbCrMatrix((re::ecs2::VideoComponent *)v301);
          v346 = re::ecs2::VideoComponent::imageFunction((re::ecs2::VideoComponent *)v301);
          re::ecs2::VideoComponent::processAttachments(v301, v341, v892, v345, v346, 0, v343, v344);
          v347 = 0;
          v300 = (_QWORD *)&unk_255829000;
          do
          {
            v348 = &v892[v347];
            if (*(_QWORD *)&v892[v347 + 56])
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v892[v347 + 56]);
            *(_QWORD *)&v892[v347 + 56] = 0;
            re::TextureHandle::invalidate((re::TextureHandle *)(v348 + 46));
            re::TextureHandle::invalidate((re::TextureHandle *)(v348 + 42));
            re::TextureHandle::invalidate((re::TextureHandle *)(v348 + 38));
            re::TextureHandle::invalidate((re::TextureHandle *)(v348 + 34));
            re::TextureHandle::invalidate((re::TextureHandle *)&v892[v347 + 30]);
            v347 -= 30;
          }
          while (v347 != -60);
          v350 = (re *)re::VideoDefaults::logEnabled(v349);
          if ((_DWORD)v350)
          {
            v369 = (id)*re::videoLogObjects(v350);
            if (os_log_type_enabled(v369, OS_LOG_TYPE_DEFAULT))
            {
              v370 = *(_QWORD *)(v877 + 280);
              v371 = CFSTR("Yes");
              if ((*(_BYTE *)(v877 + 288) & 1) == 0)
                v371 = CFSTR("No");
              v372 = *(_QWORD *)(v301 + 40);
              if (v372)
              {
                v373 = atomic_load((unsigned int *)(v372 + 704));
                _ZF = v373 == 2;
                v374 = CFSTR("Yes");
                if (!_ZF)
                  v374 = CFSTR("No");
              }
              else
              {
                v374 = CFSTR("No");
              }
              v968[0].i32[0] = 136315650;
              *(uint64_t *)((char *)v968[0].i64 + 4) = v370;
              v968[0].i16[6] = 2112;
              *(uint64_t *)((char *)&v968[0].i64[1] + 6) = (uint64_t)v371;
              v968[1].i16[3] = 2112;
              v968[1].i64[1] = (uint64_t)v374;
              _os_log_impl(&dword_224FE9000, v369, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->update :: PlaybackComponent is Remote :: Entity %s isActive == %@; materials.isLoaded == %@",
                (uint8_t *)v968,
                0x20u);
            }

            v300 = (_QWORD *)&unk_255829000;
          }
          v293 = v824;
          if (v956)
            re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(&v956);
          v956 = 0;
          re::TextureHandle::invalidate((re::TextureHandle *)v953);
          re::TextureHandle::invalidate((re::TextureHandle *)&v952);
          re::TextureHandle::invalidate((re::TextureHandle *)&buf[32]);
          re::TextureHandle::invalidate((re::TextureHandle *)&buf[16]);
          re::TextureHandle::invalidate((re::TextureHandle *)buf);
          for (k = 0; k != -30; k -= 15)
          {
            v352 = (char *)v961 + k * 8;
            if (v966[k + 13])
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v966[k + 13]);
            v966[k + 13] = 0;
            re::TextureHandle::invalidate((re::TextureHandle *)(v352 + 184));
            re::TextureHandle::invalidate((re::TextureHandle *)(v352 + 168));
            re::TextureHandle::invalidate((re::TextureHandle *)(v352 + 152));
            re::TextureHandle::invalidate((re::TextureHandle *)(v352 + 136));
            re::TextureHandle::invalidate((re::TextureHandle *)&v966[k]);
          }
          v292 = v833;
          v299 = v788;
        }
        else
        {
          re::AssetHandle::AssetHandle((re::AssetHandle *)v891, (const re::AssetHandle *)(v301 + 168));
          v316 = re::VideoAsset::loadAndConnectForRendering(v891);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v891);
          v296 = (re::VideoDefaults *)re::VideoDefaults::logEnabled(v317);
          if ((_DWORD)v296)
          {
            v362 = (id)*re::videoLogObjects(v296);
            if (os_log_type_enabled(v362, OS_LOG_TYPE_DEFAULT))
            {
              v363 = *(_QWORD *)(v877 + 280);
              v364 = CFSTR("Yes");
              if ((*(_DWORD *)(v877 + 288) & 1) != 0)
                v365 = CFSTR("Yes");
              else
                v365 = CFSTR("No");
              if (!v316)
                v364 = CFSTR("No");
              v961[0].i32[0] = 136315650;
              *(uint64_t *)((char *)v961[0].i64 + 4) = v363;
              v961[0].i16[6] = 2112;
              *(uint64_t *)((char *)&v961[0].i64[1] + 6) = (uint64_t)v365;
              v961[1].i16[3] = 2112;
              v961[1].i64[1] = (uint64_t)v364;
              _os_log_impl(&dword_224FE9000, v362, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->update :: Entity %s isActive == %@; VideoAssetIsLoaded == %@",
                (uint8_t *)v961,
                0x20u);
            }

            v300 = (_QWORD *)&unk_255829000;
          }
          if ((*(_BYTE *)(v877 + 288) & 1) != 0 && v316)
          {
            v318 = (re::VideoDefaults *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v877 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            v838 = v298;
            if (v318)
            {
              v319 = v318;
              v318 = (re::VideoDefaults *)re::VideoDefaults::logEnabled(v318);
              if ((_DWORD)v318)
              {
                v366 = (id)*re::videoLogObjects(v318);
                if (os_log_type_enabled(v366, OS_LOG_TYPE_DEFAULT))
                {
                  v367 = "Enabled";
                  if (!*((_BYTE *)v319 + 25))
                    v367 = "Disabled";
                  v961[0].i32[0] = 136315138;
                  *(uint64_t *)((char *)v961[0].i64 + 4) = (uint64_t)v367;
                  _os_log_impl(&dword_224FE9000, v366, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->update :: PassthroughDarkeningComponent Exists and lightspillEnabled is %s", (uint8_t *)v961, 0xCu);
                }

              }
              v320 = *((_BYTE *)v319 + 25) != 0;
            }
            else
            {
              v320 = 0;
            }
            v321 = v299;
            v322 = re::VideoPSEProcessor::NeedsProcessing(v318);
            v323 = (re::VideoDefaults *)re::VideoDefaults::overridePseEnabled(v322);
            v324 = (char)v323;
            if ((re::VideoDefaults::useLegacyVideoTextures(v323) & 1) != 0)
            {
              v325 = 1;
            }
            else
            {
              re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)v301);
              v325 = *(_BYTE *)(v301 + 265) == 0;
            }
            v326 = *((_QWORD *)v316 + 25);
            if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v877 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
            {
              v327 = 1;
            }
            else if (v326)
            {
              v327 = *(_BYTE *)(*(_QWORD *)v326 + 4) != 0;
            }
            else
            {
              v327 = 0;
            }
            *((_BYTE *)v316 + 932) = 0;
            v961[0].i64[0] = v877;
            v961[0].i64[1] = v301;
            v328 = re::AssetHandle::AssetHandle((re::AssetHandle *)&v961[1], (const re::AssetHandle *)(v301 + 168));
            v961[2].i64[1] = (uint64_t)v316;
            v961[3].i8[0] = v320 & (v324 ^ 1);
            v961[3].i8[1] = v325;
            v961[3].i8[2] = v327;
            v961[3].i8[3] = v326 != 0;
            v293 = v824;
            v292 = v833;
            v299 = v321;
            v298 = v838;
            v300 = (_QWORD *)&unk_255829000;
            if (v895 >= v894)
            {
              v329 = v895 + 1;
              if (v894 < v895 + 1)
              {
                if (v893)
                {
                  v330 = 8;
                  if (v894)
                    v330 = 2 * v894;
                  if (v330 <= v329)
                    v331 = v895 + 1;
                  else
                    v331 = v330;
                  re::DynamicArray<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo>::setCapacity(&v893, v331);
                }
                else
                {
                  re::DynamicArray<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo>::setCapacity(&v893, v329);
                  ++v896;
                }
              }
            }
            v332 = v895;
            v333 = (float32x4_t *)&v897[7 * v895];
            *v333 = v961[0];
            v333[1].i64[1] = 0;
            v333[2].i64[0] = 0;
            v333[1].i64[0] = 0;
            v333[1].i64[1] = v961[1].i64[1];
            v961[1].i64[1] = 0;
            v334 = v333[1].i64[0];
            v333[1].i64[0] = 0;
            v333[1].i64[0] = v961[1].i64[0];
            v961[1].i64[0] = v334;
            v335 = v333[2].i64[0];
            v333[2].i64[0] = v961[2].i64[0];
            v961[2].i64[0] = v335;
            LODWORD(v335) = v961[3].i32[0];
            v333[2].i64[1] = v961[2].i64[1];
            v333[3].i32[0] = v335;
            v895 = v332 + 1;
            ++v896;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)&v961[1]);
          }
        }
        ++v298;
      }
      while (v298 != v299);
    }
  }
  v377 = (re::VideoDefaults *)re::VideoDefaults::autoSynchronousProcessingAllowed(v296);
  v378 = (uint64_t)v897;
  v379 = v895;
  if ((v377 & 1) != 0)
  {
    v380 = 126 - 2 * __clz(v895);
    if (v895)
      v381 = v380;
    else
      v381 = 0;
    std::__introsort<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *,false>((uint64_t)v897, (__int128 *)&v897[7 * v895], v381, 1);
  }
  if (v379)
  {
    v382 = (uint64_t *)(v378 + 40);
    v383 = 56 * v379;
    do
    {
      v384 = *v382;
      *(_QWORD *)(v384 + 16) = -1;
      v385 = *(_QWORD *)(v384 + 168);
      if (v385)
        *(_BYTE *)(v385 + 7016) &= 0xE0u;
      v382 += 7;
      v383 -= 56;
    }
    while (v383);
  }
  v386 = re::VideoDefaults::histogramGenerationAllowed(v377);
  if ((v386 & 1) != 0)
  {
    v386 = re::VideoDefaults::overrideHistogramGeneration((re::VideoDefaults *)v386);
    if (!v379)
      goto LABEL_487;
    v387 = 56 * v379;
    v388 = (_BYTE *)(v378 + 48);
    do
    {
      if (*v388)
        v389 = 1;
      else
        v389 = v386;
      if (v389 == 1)
      {
        v390 = *((_QWORD *)v388 - 1);
        if (v390)
        {
          v391 = *(_QWORD *)(v390 + 168);
          if (v391)
            *(_BYTE *)(v391 + 7016) |= 1u;
        }
      }
      v388 += 56;
      v387 -= 56;
    }
    while (v387);
  }
  if (v379)
  {
    v392 = 56 * v379;
    v393 = (_BYTE *)(v378 + 40);
    do
    {
      if (v393[9])
      {
        v394 = *(_QWORD *)(*(_QWORD *)v393 + 168);
        if (v394)
          *(_BYTE *)(v394 + 7016) |= 2u;
      }
      v393 += 56;
      v392 -= 56;
    }
    while (v392);
  }
LABEL_487:
  v395 = (_anonymous_namespace_ *)re::VideoDefaults::autoSynchronousProcessingAllowed((re::VideoDefaults *)v386);
  if ((v395 & 1) != 0)
  {
    if (v379)
    {
      v396 = 56 * v379;
      v397 = v378 + 40;
      do
      {
        v398 = *(_QWORD *)(*(_QWORD *)v397 + 168);
        if (v398)
          *(_BYTE *)(v398 + 7016) |= 8u;
        v397 += 56;
        v396 -= 56;
      }
      while (v396);
    }
  }
  else if (v379)
  {
    v399 = 56 * v379;
    v400 = (_BYTE *)(v378 + 40);
    do
    {
      if (v400[10])
      {
        v401 = *(_QWORD *)(*(_QWORD *)v400 + 168);
        if (v401)
          *(_BYTE *)(v401 + 7016) |= 8u;
      }
      v400 += 56;
      v399 -= 56;
    }
    while (v399);
  }
  v890 = 0;
  v888[2] = 0;
  v888[1] = 0;
  v889 = 0;
  re::DynamicArray<float *>::setCapacity(v888, v379);
  ++v889;
  if (v379)
  {
    v878 = (_QWORD *)(v378 + 56 * v379);
    v402 = 56 * v379;
    v794 = (_QWORD *)v378;
    v403 = (_BYTE *)(v378 + 40);
    do
    {
      if (v403[11])
      {
        if (*(_QWORD *)v403)
        {
          v404 = *(_QWORD *)(*(_QWORD *)v403 + 168);
          if (v404)
            *(_BYTE *)(v404 + 7016) |= 0x10u;
        }
      }
      v403 += 56;
      v402 -= 56;
    }
    while (v402);
    v405 = 0;
    v406 = (_QWORD *)v378;
    do
    {
      v407 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v406 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v809.i64[0])
      {
        if (v809.i64[0] == v407)
        {
          v408 = re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v408)
          {
            v409 = *(_QWORD *)(v408 + 24);
            if (v409)
            {
              v410 = *(re::ecs2::ImageBasedReflectionReceiverComponent ***)(v408 + 40);
              v411 = 8 * v409;
              do
              {
                v412 = *v410;
                v413 = re::ecs2::ImageBasedReflectionReceiverComponent::receivesSpecularLightSpill(*v410);
                if (v413)
                {
                  v414 = *(_QWORD *)(v406[5] + 168);
                  if (v414)
                    *(_BYTE *)(v414 + 7016) |= 4u;
                }
                (*(void (**)(float32x4_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v295 + 8))(v961, v295, *((_QWORD *)v412 + 2));
                if (v961[0].i8[0])
                  _ZF = v961[0].i64[1] == 0;
                else
                  _ZF = 1;
                v416 = !_ZF;
                v417 = !_ZF || v413;
                if ((v417 & 1) != 0)
                  v418 = v416 ^ 1;
                else
                  v418 = re::ecs2::ImageBasedReflectionReceiverComponent::receivesDiffuseLightSpill(v412);
                v405 |= v418;
                ++v410;
                v411 -= 8;
              }
              while (v411);
            }
          }
        }
      }
      v406 += 7;
    }
    while (v406 != v878);
    v419 = v794;
    while (1)
    {
      v420 = v419[1];
      v421 = *(_QWORD *)(v420 + 40);
      if (v421)
      {
        v422 = *v419;
        v423 = v419[5];
        v424 = atomic_load((unsigned int *)(v421 + 704));
        if (v424 == 2 && *(float *)(v824 + 208) == 0.0)
        {
          if (*(_BYTE *)(v420 + 57) && (v425 = v899) != 0)
          {
            v426 = *(_QWORD *)(v422 + 176);
            if (v426)
            {
              v427 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v426 + 32));
              if (v427)
              {
                v789 = v423;
                re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)v422, (const re::ecs2::Entity *)1, v911);
                v961[0] = (float32x4_t)xmmword_2260E5F10;
                v961[1] = (float32x4_t)xmmword_2260E5F20;
                v961[2] = (float32x4_t)xmmword_2260E5F40;
                v961[3] = (float32x4_t)xmmword_2260E5D70;
                re::MeshAsset::tightAABBFromMesh(v427, v961, &v909);
                v427 = 0;
                v428 = v901;
                v802 = (re::TextureHandle *)&v901[8 * v425];
                v793 = v405;
                v795 = v419;
                while (1)
                {
                  v948 = 0;
                  v947 = 0;
                  v949 = 0;
                  __p = 0;
                  v944 = 0;
                  v946 = 0;
                  std::vector<re::ecs2::PolygonFrustumClipper::Vertex>::reserve(&v944, 4uLL);
                  v429 = v428[2].f32[0];
                  v430 = v428[2].f32[1];
                  v431 = v430 + v430;
                  v432 = v428[2].f32[2];
                  v433 = v428[2].f32[3];
                  v434 = v432 + v432;
                  v435 = v429 * (float)(v429 + v429);
                  v436 = v430 * (float)(v430 + v430);
                  v437 = v432 * (float)(v432 + v432);
                  v438 = (float)(v429 + v429) * v430;
                  v439 = (float)(v429 + v429) * v432;
                  v440 = v431 * v432;
                  v441 = (float)(v429 + v429) * v433;
                  v442 = v431 * v433;
                  v443 = v434 * v433;
                  v980.columns[0].i32[3] = 0;
                  v980.columns[0].f32[0] = 1.0 - (float)(v436 + v437);
                  v980.columns[0].f32[1] = v438 + v443;
                  v980.columns[0].f32[2] = v439 - v442;
                  v980.columns[1].i32[3] = 0;
                  v980.columns[1].f32[0] = v438 - v443;
                  v980.columns[1].f32[1] = 1.0 - (float)(v435 + v437);
                  v980.columns[1].f32[2] = v440 + v441;
                  v444 = v440 - v441;
                  v980.columns[2].i32[3] = 0;
                  v980.columns[2].f32[0] = v439 + v442;
                  v980.columns[2].f32[1] = v444;
                  v980.columns[2].f32[2] = 1.0 - (float)(v435 + v436);
                  v980.columns[3] = (simd_float4)v428[1];
                  v980.columns[3].i32[3] = 1.0;
                  v981 = __invert_f4(v980);
                  v834 = (float32x4_t)v981.columns[1];
                  v839 = (float32x4_t)v981.columns[0];
                  v830 = (float32x4_t)v981.columns[3];
                  v832 = (float32x4_t)v981.columns[2];
                  v445 = (float)((float)(v428[7].f32[0] * v428[7].f32[2]) * v428[7].f32[1]) * v428[7].f32[3];
                  *(float32x4_t *)v845 = v428[1];
                  re::AABB::transform(&v909, v911, (uint64_t)v943);
                  v446 = (uint32x4_t)vcgtq_f32(v943[0], *(float32x4_t *)v845);
                  v446.i32[3] = v446.i32[2];
                  if ((vmaxvq_u32(v446) & 0x80000000) != 0
                    || (v447 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)v845, v943[1]),
                        v447.i32[3] = v447.i32[2],
                        (vmaxvq_u32(v447) & 0x80000000) != 0))
                  {
                    v449 = 0;
                    v970 = 0u;
                    v969 = 0u;
                    v450 = v909;
                    v451 = v909;
                    v451.i32[0] = v910;
                    v451.i32[3] = HIDWORD(v910);
                    memset(v968, 0, sizeof(v968));
                    *(float32x4_t *)v939 = v909;
                    v940 = v451;
                    v452 = v910;
                    DWORD2(v452) = v909.i32[2];
                    v450.i32[1] = DWORD1(v910);
                    v941 = v452;
                    v942 = v450;
                    v454 = v428[3];
                    v453 = v428[4];
                    v455 = v428[5];
                    v456 = v428[6];
                    v457 = v911[0];
                    v458 = v911[1];
                    v459 = v911[2];
                    v460 = v911[3];
                    do
                    {
                      v461 = 0;
                      *(float32x4_t *)buf = v457;
                      *(float32x4_t *)&buf[16] = v458;
                      *(float32x4_t *)&buf[32] = v459;
                      v952 = v460;
                      do
                      {
                        v961[v461 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v839, COERCE_FLOAT(*(_OWORD *)&buf[v461])), v834, *(float32x2_t *)&buf[v461], 1), v832, *(float32x4_t *)&buf[v461], 2), v830, *(float32x4_t *)&buf[v461], 3);
                        v461 += 16;
                      }
                      while (v461 != 64);
                      v968[v449] = vaddq_f32(v961[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v961[0], COERCE_FLOAT(*(_OWORD *)&v939[2 * v449])), v961[1], (float32x2_t)v939[2 * v449], 1), v961[2], *(float32x4_t *)&v939[2 * v449], 2));
                      ++v449;
                    }
                    while (v449 != 4);
                    v462 = vaddq_f32(v456, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v454, v968[0].f32[0]), v453, *(float32x2_t *)v968[0].f32, 1), v455, v968[0], 2));
                    v463 = (float32x4_t *)__p;
                    *(float32x4_t *)v846 = v455;
                    *(float32x4_t *)v826 = v456;
                    *(float32x4_t *)v806 = v454;
                    v809 = v453;
                    if ((unint64_t)__p >= v946)
                    {
                      v465 = ((_BYTE *)__p - (_BYTE *)v944) >> 5;
                      v466 = v465 + 1;
                      if ((unint64_t)(v465 + 1) >> 59)
                        goto LABEL_1038;
                      v467 = v946 - (_QWORD)v944;
                      if ((uint64_t)(v946 - (_QWORD)v944) >> 4 > v466)
                        v466 = v467 >> 4;
                      if ((unint64_t)v467 >= 0x7FFFFFFFFFFFFFE0)
                        v468 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v468 = v466;
                      if (v468)
                      {
                        *(float32x4_t *)v840 = v462;
                        v469 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)&v946, v468);
                        v462 = *(float32x4_t *)v840;
                      }
                      else
                      {
                        v469 = 0;
                      }
                      v470 = (float32x4_t *)&v469[32 * v465];
                      *v470 = v462;
                      v470[1].i64[0] = 0;
                      v471 = (float32x4_t *)__p;
                      v472 = (char *)v944;
                      v473 = v470;
                      if (__p != v944)
                      {
                        do
                        {
                          v474 = v471[-1];
                          v473[-2] = v471[-2];
                          v473[-1] = v474;
                          v473 -= 2;
                          v471 -= 2;
                        }
                        while (v471 != (float32x4_t *)v472);
                        v471 = (float32x4_t *)v472;
                      }
                      v464 = v470 + 2;
                      v944 = v473;
                      __p = &v470[2];
                      v946 = (unint64_t)&v469[32 * v468];
                      if (v471)
                        operator delete(v471);
                      v455 = *(float32x4_t *)v846;
                      v456 = *(float32x4_t *)v826;
                      v454 = *(float32x4_t *)v806;
                      v453 = v809;
                    }
                    else
                    {
                      *(float32x4_t *)__p = v462;
                      v463[1].i64[0] = 0;
                      v464 = v463 + 2;
                    }
                    __p = v464;
                    v475 = vaddq_f32(v456, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v454, v968[1].f32[0]), v453, *(float32x2_t *)v968[1].f32, 1), v455, v968[1], 2));
                    if ((unint64_t)v464 >= v946)
                    {
                      v477 = ((char *)v464 - (_BYTE *)v944) >> 5;
                      if ((unint64_t)(v477 + 1) >> 59)
                        goto LABEL_1038;
                      v478 = (uint64_t)(v946 - (_QWORD)v944) >> 4;
                      if (v478 <= v477 + 1)
                        v478 = v477 + 1;
                      if (v946 - (unint64_t)v944 >= 0x7FFFFFFFFFFFFFE0)
                        v479 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v479 = v478;
                      if (v479)
                      {
                        *(float32x4_t *)v841 = v475;
                        v480 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)&v946, v479);
                        v475 = *(float32x4_t *)v841;
                      }
                      else
                      {
                        v480 = 0;
                      }
                      v481 = (float32x4_t *)&v480[32 * v477];
                      *v481 = v475;
                      v481[1].i64[0] = 1065353216;
                      v482 = (float32x4_t *)__p;
                      v483 = (char *)v944;
                      v484 = v481;
                      if (__p != v944)
                      {
                        do
                        {
                          v485 = v482[-1];
                          v484[-2] = v482[-2];
                          v484[-1] = v485;
                          v484 -= 2;
                          v482 -= 2;
                        }
                        while (v482 != (float32x4_t *)v483);
                        v482 = (float32x4_t *)v483;
                      }
                      v476 = v481 + 2;
                      v944 = v484;
                      __p = &v481[2];
                      v946 = (unint64_t)&v480[32 * v479];
                      if (v482)
                        operator delete(v482);
                      v455 = *(float32x4_t *)v846;
                      v456 = *(float32x4_t *)v826;
                      v454 = *(float32x4_t *)v806;
                      v453 = v809;
                    }
                    else
                    {
                      *v464 = v475;
                      v464[1].i64[0] = 1065353216;
                      v476 = v464 + 2;
                    }
                    __p = v476;
                    v486 = vaddq_f32(v456, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v454, v969.f32[0]), v453, *(float32x2_t *)v969.f32, 1), v455, v969, 2));
                    if ((unint64_t)v476 >= v946)
                    {
                      v488 = ((char *)v476 - (_BYTE *)v944) >> 5;
                      if ((unint64_t)(v488 + 1) >> 59)
                        goto LABEL_1038;
                      v489 = (uint64_t)(v946 - (_QWORD)v944) >> 4;
                      if (v489 <= v488 + 1)
                        v489 = v488 + 1;
                      if (v946 - (unint64_t)v944 >= 0x7FFFFFFFFFFFFFE0)
                        v490 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v490 = v489;
                      if (v490)
                      {
                        *(float32x4_t *)v842 = v486;
                        v491 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)&v946, v490);
                        v486 = *(float32x4_t *)v842;
                      }
                      else
                      {
                        v491 = 0;
                      }
                      v492 = (float32x4_t *)&v491[32 * v488];
                      *v492 = v486;
                      v492[1].i64[0] = 0x3F8000003F800000;
                      v493 = (float32x4_t *)__p;
                      v494 = (char *)v944;
                      v495 = v492;
                      if (__p != v944)
                      {
                        do
                        {
                          v496 = v493[-1];
                          v495[-2] = v493[-2];
                          v495[-1] = v496;
                          v495 -= 2;
                          v493 -= 2;
                        }
                        while (v493 != (float32x4_t *)v494);
                        v493 = (float32x4_t *)v494;
                      }
                      v487 = v492 + 2;
                      v944 = v495;
                      __p = &v492[2];
                      v946 = (unint64_t)&v491[32 * v490];
                      if (v493)
                        operator delete(v493);
                      v455 = *(float32x4_t *)v846;
                      v456 = *(float32x4_t *)v826;
                      v454 = *(float32x4_t *)v806;
                      v453 = v809;
                    }
                    else
                    {
                      *v476 = v486;
                      v476[1].i64[0] = 0x3F8000003F800000;
                      v487 = v476 + 2;
                    }
                    __p = v487;
                    v497 = vaddq_f32(v456, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v454, v970.f32[0]), v453, *(float32x2_t *)v970.f32, 1), v455, v970, 2));
                    if ((unint64_t)v487 >= v946)
                    {
                      v499 = ((char *)v487 - (_BYTE *)v944) >> 5;
                      if ((unint64_t)(v499 + 1) >> 59)
LABEL_1038:
                        abort();
                      v500 = (uint64_t)(v946 - (_QWORD)v944) >> 4;
                      if (v500 <= v499 + 1)
                        v500 = v499 + 1;
                      if (v946 - (unint64_t)v944 >= 0x7FFFFFFFFFFFFFE0)
                        v501 = 0x7FFFFFFFFFFFFFFLL;
                      else
                        v501 = v500;
                      if (v501)
                      {
                        *(float32x4_t *)v847 = v497;
                        v502 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)&v946, v501);
                        v497 = *(float32x4_t *)v847;
                      }
                      else
                      {
                        v502 = 0;
                      }
                      v503 = (float32x4_t *)&v502[32 * v499];
                      *v503 = v497;
                      v503[1].i64[0] = 0x3F80000000000000;
                      v504 = (float32x4_t *)__p;
                      v505 = (char *)v944;
                      v506 = v503;
                      if (__p != v944)
                      {
                        do
                        {
                          v507 = v504[-1];
                          v506[-2] = v504[-2];
                          v506[-1] = v507;
                          v506 -= 2;
                          v504 -= 2;
                        }
                        while (v504 != (float32x4_t *)v505);
                        v504 = (float32x4_t *)v505;
                      }
                      v498 = v503 + 2;
                      v944 = v506;
                      __p = &v503[2];
                      v946 = (unint64_t)&v502[32 * v501];
                      if (v504)
                        operator delete(v504);
                    }
                    else
                    {
                      *v487 = v497;
                      v487[1].i64[0] = 0x3F80000000000000;
                      v498 = v487 + 2;
                    }
                    __p = v498;
                    re::ecs2::PolygonFrustumClipper::clipToFrustum((char **)&v947, &v944);
                    v508 = (_BYTE *)__p - (_BYTE *)v944;
                    if ((unint64_t)((_BYTE *)__p - (_BYTE *)v944) >= 0x60)
                    {
                      *(_QWORD *)&buf[32] = 0;
                      v509 = v508 >> 5;
                      memset(buf, 0, 28);
                      v938 = 0;
                      v936 = 0;
                      v934 = 0;
                      v935 = 0;
                      v937 = 0;
                      v933 = 0;
                      v931 = 0;
                      *(_QWORD *)v929 = 0;
                      v930 = 0;
                      v932 = 0;
                      re::DynamicArray<re::Quaternion<float>>::setCapacity(buf, v508 >> 5);
                      if (v935 < v509)
                        re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v934, v509);
                      if (v930 < v509)
                        re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v929, v509);
                      v511 = (float32x2_t *)v944;
                      v512 = (float32x2_t *)__p;
                      while (v511 != v512)
                      {
                        *(float32x2_t *)v510.f32 = *v511;
                        v510.i32[2] = v511[1].i32[0];
                        v513 = (const float *)&v511[1] + 1;
                        v514 = vld1q_dup_f32(v513);
                        v515 = vdivq_f32(v510, v514);
                        v961[0] = v515;
                        v515.f32[1] = -v515.f32[1];
                        v925[0] = vmul_f32(vadd_f32(*(float32x2_t *)v515.f32, _D10), (float32x2_t)0x3F0000003F000000);
                        re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)buf, (__n128 *)v961);
                        re::DynamicArray<unsigned long>::add(&v934, v925);
                        v921[0] = vminnm_f32(vmaxnm_f32(v511[2], 0), _D10);
                        re::DynamicArray<unsigned long>::add(v929, v921);
                        v511 += 4;
                      }
                      v928 = 0;
                      v926 = 0;
                      v925[0] = 0;
                      v925[1] = 0;
                      v927 = 0;
                      v924 = 0;
                      v922 = 0;
                      v921[0] = 0;
                      v921[1] = 0;
                      v923 = 0;
                      re::computeConvexHull2d(v938, v936, (uint64_t)v925);
                      re::computeConvexHull2d(v933, v931, (uint64_t)v921);
                      v448 = 0;
                      if (v926 && v922)
                      {
                        v920 = 0;
                        v918 = 0;
                        v917[0] = 0;
                        v917[1] = 0;
                        v919 = 0;
                        v916 = 0;
                        v914 = 0;
                        v912 = 0;
                        v913 = 0;
                        v915 = 0;
                        if (v936)
                        {
                          re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v917, v936);
                          v517 = v913;
                        }
                        else
                        {
                          v517 = 0;
                        }
                        v518 = v931;
                        if (v517 < v931)
                          re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v912, v931);
                        if (v926)
                        {
                          v519 = v928;
                          v520 = 4 * v926;
                          while (1)
                          {
                            v82 = *v519;
                            v87 = v936;
                            if (v936 <= v82)
                              break;
                            re::DynamicArray<unsigned long>::add(v917, (_QWORD *)(v938 + 8 * v82));
                            ++v519;
                            v520 -= 4;
                            if (!v520)
                              goto LABEL_634;
                          }
LABEL_1004:
                          v950 = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          v971 = 136315906;
                          v972 = "operator[]";
                          v973 = 1024;
                          v974 = 789;
                          v975 = 2048;
                          v976 = v82;
                          v977 = 2048;
                          v978 = v87;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1005:
                          v950 = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          v971 = 136315906;
                          v972 = "operator[]";
                          v973 = 1024;
                          v974 = 789;
                          v975 = 2048;
                          v976 = v82;
                          v977 = 2048;
                          v978 = v87;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1006:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1007:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1008:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1009:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1010:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1011:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1012:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1013:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1014:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1015:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1016:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1017:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1018:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1019:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1020:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          _os_log_send_and_compose_impl();
                          _os_crash_msg();
                          __break(1u);
LABEL_1021:
                          v939[0] = 0;
                          v962 = 0u;
                          memset(v961, 0, sizeof(v961));
                          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                          *(_DWORD *)buf = 136315906;
                          *(_QWORD *)&buf[4] = "operator[]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = 797;
                          *(_WORD *)&buf[18] = 2048;
                          *(_QWORD *)&buf[20] = 0;
                          *(_WORD *)&buf[28] = 2048;
                          *(_QWORD *)&buf[30] = 0;
                          LODWORD(v787) = 38;
                          v786 = (BOOL *)buf;
                          _os_log_send_and_compose_impl();
                          v69 = _os_crash_msg();
                          __break(1u);
LABEL_1022:
                          v779 = (id)*re::videoLogObjects((re *)v69);
                          if (os_log_type_enabled(v779, OS_LOG_TYPE_DEFAULT))
                          {
                            v961[0].i32[0] = 134218240;
                            *(float32x2_t *)&v961[0].i32[1] = _D10;
                            v961[0].i16[6] = 2048;
                            *(double *)((char *)&v961[0].i64[1] + 6) = *(double *)&_D10 - v9;
                            _os_log_impl(&dword_224FE9000, v779, OS_LOG_TYPE_DEFAULT, "Target Display Time: %.6fs (%+.6fs)", (uint8_t *)v961, 0x16u);
                          }

                          v5 = v824;
                          goto LABEL_97;
                        }
LABEL_634:
                        if (v922)
                        {
                          v521 = v924;
                          v522 = 4 * v922;
                          do
                          {
                            v82 = *v521;
                            v87 = v931;
                            if (v931 <= v82)
                              goto LABEL_1005;
                            re::DynamicArray<unsigned long>::add(&v912, (_QWORD *)(v933 + 8 * v82));
                            ++v521;
                            v522 -= 4;
                          }
                          while (v522);
                        }
                        v961[0].i64[0] = v920;
                        v961[0].i64[1] = v918;
                        re::computeSignedAreaOf2DPolygon(v961, v518, v516);
                        v524 = v445 * *(float *)&v523;
                        v961[0].i64[0] = v916;
                        v961[0].i64[1] = v914;
                        v526 = (re::VideoDefaults *)re::computeSignedAreaOf2DPolygon(v961, v525, v523);
                        *(float *)&v9 = v527;
                        v528 = 1.0 / v527;
                        if (*(float *)&v9 <= 0.0001)
                          v528 = 0.0;
                        if (v528 <= 4.0)
                          v529 = v528;
                        else
                          v529 = 4.0;
                        v530 = vcvtps_s32_f32(v524 * v529);
                        v531 = (uint64_t)v445;
                        if ((uint64_t)v445 >= v530)
                          v531 = v530;
                        if (v530 >= 0)
                          v448 = v531;
                        else
                          v448 = 0;
                        v532 = (re *)re::VideoDefaults::logEnabled(v526);
                        v405 = v793;
                        v419 = v795;
                        if ((v532 & 1) != 0)
                        {
                          v533 = (id)*re::videoLogObjects(v532);
                          if (os_log_type_enabled(v533, OS_LOG_TYPE_DEFAULT))
                          {
                            v961[0].i32[0] = 134218752;
                            *(double *)((char *)v961[0].i64 + 4) = v529;
                            v961[0].i16[6] = 2048;
                            *(double *)((char *)&v961[0].i64[1] + 6) = v524;
                            v961[1].i16[3] = 2048;
                            v961[1].i64[1] = v448;
                            v961[2].i16[0] = 2048;
                            *(double *)((char *)v961[2].i64 + 2) = (float)(*(float *)&v9 * 100.0);
                            _os_log_impl(&dword_224FE9000, v533, OS_LOG_TYPE_DEFAULT, "Area: %f * %f,  estimation = %lld (%.0f%% visible)", (uint8_t *)v961, 0x2Au);
                          }

                        }
                        if (v912 && v916)
                          (*(void (**)(void))(*(_QWORD *)v912 + 40))();
                        if (v917[0] && v920)
                          (*(void (**)(void))(*(_QWORD *)v917[0] + 40))();
                      }
                      if (v921[0] && v924)
                        (*(void (**)(void))(*(_QWORD *)v921[0] + 40))();
                      if (v925[0] && v928)
                        (*(void (**)(void))(*(_QWORD *)v925[0] + 40))();
                      if (*(_QWORD *)v929 && v933)
                        (*(void (**)(void))(**(_QWORD **)v929 + 40))();
                      if (v934 && v938)
                        (*(void (**)(void))(*(_QWORD *)v934 + 40))();
                      if (*(_QWORD *)buf && *(_QWORD *)&buf[32])
                        (*(void (**)(void))(**(_QWORD **)buf + 40))();
                    }
                    else
                    {
                      v448 = 0;
                    }
                  }
                  else
                  {
                    v448 = (uint64_t)v445;
                  }
                  if (v944)
                  {
                    __p = v944;
                    operator delete(v944);
                  }
                  if (v947)
                  {
                    v948 = v947;
                    operator delete(v947);
                  }
                  if (v448 > v427)
                    v427 = v448;
                  v428 += 8;
                  if (v428 == (float32x4_t *)v802)
                  {
                    v423 = v789;
                    break;
                  }
                }
              }
            }
            else
            {
              v427 = 0;
            }
          }
          else
          {
            v427 = -1;
          }
          v534 = *(_QWORD *)(v423 + 16);
          if (v534 <= v427)
            v534 = v427;
          *(_QWORD *)(v423 + 16) = v534;
        }
      }
      v419 += 7;
      if (v419 == v878)
      {
        LOBYTE(v793) = v405;
        v378 = (uint64_t)v897;
        v535 = v895;
        goto LABEL_689;
      }
    }
  }
  LOBYTE(v793) = 0;
  v535 = 0;
LABEL_689:
  v969.i32[0] = 0;
  memset(v968, 0, sizeof(v968));
  *(_QWORD *)&v9 = 0x7FFFFFFFLL;
  *(uint64_t *)((char *)v969.i64 + 4) = 0x7FFFFFFFLL;
  v537 = v378 + 56 * v535;
  v827 = v537;
  v807 = v535;
  if (v535)
  {
    for (m = v378; m != v537; m += 56)
    {
      v539 = *(_QWORD *)(m + 8);
      v540 = *(_QWORD *)(m + 40);
      if (v539)
        v541 = v540 == 0;
      else
        v541 = 1;
      if (!v541 && *(_QWORD *)(v540 + 192))
      {
        v542 = *(unsigned __int8 *)(v539 + 56);
        v543 = v968[0].i64[0];
        v544 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v540 ^ (v540 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v540 ^ (v540 >> 30))) >> 27));
        v545 = v544 ^ (v544 >> 31);
        if (!v968[0].i64[0])
          goto LABEL_700;
        v546 = *(unsigned int *)(v968[0].i64[1] + 4 * (v545 % v968[1].u32[2]));
        if ((_DWORD)v546 != 0x7FFFFFFF)
        {
          v554 = v968[1].i64[0] + 32 * v546;
          v555 = *(_QWORD *)(v554 + 16);
          v556 = *(unsigned int *)(v968[0].i64[1] + 4 * (v545 % v968[1].u32[2]));
          if (v555 == v540)
          {
            if (*(unsigned __int8 *)(v554 + 24) != v542)
            {
LABEL_721:
              *(_BYTE *)(v968[1].i64[0] + 32 * v546 + 24) = v542;
              v559 = (id)*re::videoLogObjects(v536);
              if (os_log_type_enabled(v559, OS_LOG_TYPE_DEFAULT))
              {
                v961[0].i16[0] = 0;
                _os_log_impl(&dword_224FE9000, v559, OS_LOG_TYPE_DEFAULT, "Differing viewing modes detected on VideoComponents that share the same VideoAsset.", (uint8_t *)v961, 2u);
              }

              v537 = v827;
              continue;
            }
          }
          else
          {
            while (1)
            {
              v556 = *(_DWORD *)(v968[1].i64[0] + 32 * v556 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v556 == 0x7FFFFFFF)
                break;
              v557 = v968[1].i64[0] + 32 * v556;
              if (*(_QWORD *)(v557 + 16) == v540)
              {
                if (*(unsigned __int8 *)(v557 + 24) == v542)
                  break;
                for (n = *(unsigned int *)(v968[0].i64[1] + 4 * (v545 % v968[1].u32[2])); v555 != v540; v546 = n)
                {
                  n = *(_DWORD *)(v968[1].i64[0] + 32 * n + 8) & 0x7FFFFFFF;
                  v546 = 0x7FFFFFFFLL;
                  if (n == 0x7FFFFFFF)
                    break;
                  v555 = *(_QWORD *)(v968[1].i64[0] + 32 * n + 16);
                }
                goto LABEL_721;
              }
            }
          }
        }
        v543 = v545 % v968[1].u32[2];
        v547 = *(unsigned int *)(v968[0].i64[1] + 4 * v543);
        if ((_DWORD)v547 == 0x7FFFFFFF)
        {
          v537 = v827;
LABEL_700:
          v548 = v969.u32[1];
          if (v969.i32[1] == 0x7FFFFFFF)
          {
            v548 = v969.u32[0];
            v549 = v969.i32[0];
            if (v969.i32[0] == v968[1].i32[2])
            {
              re::HashTable<re::VideoAsset const*,re::ecs2::VideoViewingMode,re::Hash<re::VideoAsset const*>,re::EqualTo<re::VideoAsset const*>,true,false>::setCapacity((uint64_t)v968, 2 * v968[1].i32[3]);
              v537 = v827;
              v549 = v969.i32[0];
              v543 = v545 % v968[1].u32[2];
            }
            v969.i32[0] = v549 + 1;
            v550 = v968[1].i64[0];
            v551 = *(_DWORD *)(v968[1].i64[0] + 32 * v548 + 8);
          }
          else
          {
            v550 = v968[1].i64[0];
            v551 = *(_DWORD *)(v968[1].i64[0] + 32 * v969.u32[1] + 8);
            v969.i32[1] = v551 & 0x7FFFFFFF;
          }
          v552 = v550 + 32 * v548;
          *(_DWORD *)(v552 + 8) = v551 | 0x80000000;
          v553 = v968[0].i64[1];
          *(_DWORD *)(v552 + 8) = *(_DWORD *)(v968[0].i64[1] + 4 * v543) | 0x80000000;
          *(_QWORD *)v552 = v545;
          *(_QWORD *)(v552 + 16) = v540;
          *(_BYTE *)(v552 + 24) = v542;
          *(_DWORD *)(v553 + 4 * v543) = v548;
          ++v968[1].i32[3];
          ++v969.i32[2];
          continue;
        }
        v537 = v827;
        while (*(_QWORD *)(v968[1].i64[0] + 32 * v547 + 16) != v540)
        {
          v547 = *(_DWORD *)(v968[1].i64[0] + 32 * v547 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v547 == 0x7FFFFFFF)
            goto LABEL_700;
        }
      }
    }
  }
  v560 = v969.i32[0];
  if (v969.i32[0])
  {
    v561 = 0;
    v562 = (int *)(v968[1].i64[0] + 8);
    while (1)
    {
      v563 = *v562;
      v562 += 8;
      if (v563 < 0)
        break;
      if (v969.u32[0] == ++v561)
      {
        LODWORD(v561) = v969.i32[0];
        break;
      }
    }
  }
  else
  {
    LODWORD(v561) = 0;
  }
  if (v969.i32[0] == (_DWORD)v561)
  {
    v831 = 0;
    LOBYTE(v829) = 0;
  }
  else
  {
    LOBYTE(v829) = 0;
    v831 = 0;
    v564 = v561;
    v565 = v968[1].i64[0];
    v810 = v969.i32[0];
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v565 + 32 * v564 + 16) + 192))
      {
        v835 = *(_QWORD *)(v565 + 32 * v564 + 16);
        v939[0] = 0;
        v566 = re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v566)
        {
          v567 = *(_QWORD *)(v566 + 24);
          if (v567)
          {
            v568 = *(float32x4_t ***)(v566 + 40);
            v569 = 8 * v567;
            do
            {
              v570 = *v568;
              v571 = (*v568)[6];
              *(float32x4_t *)buf = (*v568)[5];
              *(float32x4_t *)&buf[16] = v571;
              re::DynamicString::DynamicString((re::DynamicString *)&buf[32], (const re::DynamicString *)&v570[7]);
              if (buf[0])
              {
                v885 = *(_OWORD *)buf;
                v886 = *(_OWORD *)&buf[16];
                re::DynamicString::DynamicString((re::DynamicString *)v887, (const re::DynamicString *)&buf[32]);
                v572 = v886;
                *(_OWORD *)(v835 + 40) = v885;
                *(_OWORD *)(v835 + 56) = v572;
                re::DynamicString::operator=((re::DynamicString *)(v835 + 72), (re::DynamicString *)v887);
                v573 = (_anonymous_namespace_ *)v887[0];
                if (v887[0])
                {
                  if ((v887[1] & 1) != 0)
                    v573 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v887[0] + 40))();
                  memset(v887, 0, 32);
                }
                v961[0].i8[0] = 0;
                memset(&v961[0].u32[2], 0, 56);
                re::DynamicString::setCapacity((float32x4_t *)v961[2].i64, 0);
                v574 = v961[1];
                v570[5] = v961[0];
                v570[6] = v574;
                re::DynamicString::operator=((re::DynamicString *)&v570[7], (re::DynamicString *)&v961[2]);
                if (v961[2].i64[0] && (v961[2].i8[8] & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v961[2].i64[0] + 40))();
              }
              if (*(_QWORD *)&buf[32] && (buf[40] & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)&buf[32] + 40))();
              ++v568;
              v569 -= 8;
            }
            while (v569);
          }
        }
        v961[0].i8[0] = 0;
        buf[0] = 0;
        v576 = *(re::ColorManager **)(v824 + 128);
        v575 = *(char ***)(v824 + 136);
        v577 = *(re::RenderManager **)(v824 + 120);
        v884 = v908;
        re::VideoAsset::retrieveBuffersAndUpdateRuntimeData((re::VideoAsset *)v835, v575, v577, v576, (unint64_t)log, (id *)v939, &v884, v13, (BOOL *)v961, (BOOL *)buf);
        v831 |= v939[0];
        LOBYTE(v829) = (v961[0].u8[0] | v829 & 1) != 0;
        v560 = v810;
      }
      if (v560 <= (int)v561 + 1)
        v578 = v561 + 1;
      else
        v578 = v560;
      while (1)
      {
        v564 = (v561 + 1);
        if (v578 - 1 == (_DWORD)v561)
          break;
        LODWORD(v561) = v561 + 1;
        v579 = v564;
        if ((*(_DWORD *)(v565 + 32 * v564 + 8) & 0x80000000) != 0)
          goto LABEL_757;
      }
      v579 = v578;
LABEL_757:
      LODWORD(v561) = v579;
    }
    while (v560 != v579);
  }
  v580 = v378;
  v581 = v827;
  if (v807)
  {
    do
    {
      v582 = *(_QWORD *)(v580 + 8);
      v583 = *(_QWORD *)(v582 + 40);
      if (v583)
      {
        p_isa = *(_QWORD **)(v580 + 40);
        v585 = atomic_load((unsigned int *)(v583 + 704));
        if (v585 == 2)
        {
          if (*(_QWORD *)(v582 + 176))
          {
            v586 = p_isa[21];
            loga = *(os_log_t *)(v580 + 40);
            v587 = v580;
            if ((re::VideoDefaults::useLegacyVideoTextures(v536) & 1) != 0)
            {
              v588 = 1;
            }
            else
            {
              re::ecs2::VideoComponent::queryMaterialPropertiesIfNeeded((re::ecs2::VideoComponent *)v582);
              v588 = *(_BYTE *)(v582 + 265) == 0;
            }
            re::ecs2::VideoComponent::getVideoTextureHandles((re::ecs2::VideoComponent *)v582, (uint64_t)v961);
            v589 = 0;
            v811 = BYTE4(cf[0]);
            do
            {
              v590 = (char *)v961 + v589 * 8;
              if (v966[v589 + 13])
                re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v966[v589 + 13]);
              v966[v589 + 13] = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)(v590 + 184));
              re::TextureHandle::invalidate((re::TextureHandle *)(v590 + 168));
              re::TextureHandle::invalidate((re::TextureHandle *)(v590 + 152));
              re::TextureHandle::invalidate((re::TextureHandle *)(v590 + 136));
              re::TextureHandle::invalidate((re::TextureHandle *)&v966[v589]);
              v589 -= 15;
            }
            while (v589 != -30);
            for (ii = 0; ii != 240; ii += 120)
            {
              v593 = (char *)v961 + ii;
              *((_DWORD *)v593 + 27) = 0;
              *(_QWORD *)(v593 + 100) = 0;
              *(_OWORD *)v593 = 0uLL;
              *((_OWORD *)v593 + 1) = 0uLL;
              *((_OWORD *)v593 + 2) = 0uLL;
              *((_OWORD *)v593 + 3) = 0uLL;
              *((_OWORD *)v593 + 4) = 0uLL;
              *(_OWORD *)(v593 + 76) = 0uLL;
            }
            v967[0] = -1;
            v594 = (re *)re::VideoDefaults::logEnabled(v591);
            v595 = v824;
            if (v588)
            {
              if ((_DWORD)v594)
              {
                v614 = (id)*re::videoLogObjects(v594);
                if (os_log_type_enabled(v614, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_224FE9000, v614, OS_LOG_TYPE_DEFAULT, "Using legacy video textures.", buf, 2u);
                }

                v595 = v824;
              }
              re::ecs2::VideoComponent::getLegacyVideoTextureHandles((re::ecs2::VideoComponent *)buf, v582);
              std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *>((uint64_t)buf, (uint64_t)v960, (uint64_t)v961);
              v596 = 0;
              v967[0] = v960[0];
              do
              {
                v597 = &buf[v596];
                if (*(_QWORD *)&v959[v596 + 104])
                  re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v959[v596 + 104]);
                *(_QWORD *)&v959[v596 + 104] = 0;
                re::TextureHandle::invalidate((re::TextureHandle *)(v597 + 184));
                re::TextureHandle::invalidate((re::TextureHandle *)(v597 + 168));
                re::TextureHandle::invalidate((re::TextureHandle *)(v597 + 152));
                re::TextureHandle::invalidate((re::TextureHandle *)(v597 + 136));
                re::TextureHandle::invalidate((re::TextureHandle *)&v959[v596]);
                v596 -= 120;
              }
              while (v596 != -240);
            }
            else
            {
              if ((_DWORD)v594)
              {
                v615 = (id)*re::videoLogObjects(v594);
                if (os_log_type_enabled(v615, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_224FE9000, v615, OS_LOG_TYPE_DEFAULT, "Using regular video textures.", buf, 2u);
                }

                v595 = v824;
              }
              re::ecs2::VideoComponent::getVideoTextureHandles((re::ecs2::VideoComponent *)v582, (uint64_t)buf);
              std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *>((uint64_t)buf, (uint64_t)v960, (uint64_t)v961);
              v598 = 0;
              v967[0] = v960[0];
              do
              {
                v599 = &buf[v598];
                if (*(_QWORD *)&v959[v598 + 104])
                  re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v959[v598 + 104]);
                *(_QWORD *)&v959[v598 + 104] = 0;
                re::TextureHandle::invalidate((re::TextureHandle *)(v599 + 184));
                re::TextureHandle::invalidate((re::TextureHandle *)(v599 + 168));
                re::TextureHandle::invalidate((re::TextureHandle *)(v599 + 152));
                re::TextureHandle::invalidate((re::TextureHandle *)(v599 + 136));
                re::TextureHandle::invalidate((re::TextureHandle *)&v959[v598]);
                v598 -= 120;
              }
              while (v598 != -240);
            }
            re::TextureHandle::TextureHandle((re::TextureHandle *)buf, (const re::TextureHandle *)v961);
            re::TextureHandle::TextureHandle((re::TextureHandle *)&buf[16], (const re::TextureHandle *)&v961[1]);
            re::TextureHandle::TextureHandle((re::TextureHandle *)&buf[32], (const re::TextureHandle *)&v961[2]);
            re::TextureHandle::TextureHandle((re::TextureHandle *)&v952, (const re::TextureHandle *)&v961[3]);
            re::TextureHandle::TextureHandle((re::TextureHandle *)v953, (const re::TextureHandle *)&v962);
            v954 = v963;
            v955 = cf[0];
            v956 = 0;
            re::VideoObject<re::VideoColorTransformBase>::setRef((int)&v956, &v956, cf[1]);
            v600 = 0;
            v957 = v965;
            v958 = BYTE2(v965);
            v601 = BYTE5(v955);
            v602 = *(_QWORD *)(v595 + 120);
            v580 = v587;
            do
            {
              v603 = &v883[v600];
              v603[27] = 0;
              *(_QWORD *)(v603 + 25) = 0;
              *(_OWORD *)v603 = 0uLL;
              *((_OWORD *)v603 + 1) = 0uLL;
              *((_OWORD *)v603 + 2) = 0uLL;
              *((_OWORD *)v603 + 3) = 0uLL;
              *((_OWORD *)v603 + 4) = 0uLL;
              v600 += 30;
              *(_OWORD *)(v603 + 19) = 0uLL;
            }
            while (v600 != 60);
            v604 = v601 == 0;
            if (v586)
              v605 = v586 + 2096;
            else
              v605 = 0;
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)v939, (uint64_t)v961, (uint64_t)v967, (uint64_t)v883);
            v883[60] = v967[0];
            v606 = re::ecs2::VideoComponent::YCbCrMatrix((re::ecs2::VideoComponent *)v582);
            v607 = re::ecs2::VideoComponent::imageFunction((re::ecs2::VideoComponent *)v582);
            re::ecs2::VideoComponent::processAttachments(v582, v602, v883, v606, v607, v605, v811 != 0, v604);
            for (jj = 0; jj != -60; jj -= 30)
            {
              v609 = &v883[jj];
              if (*(_QWORD *)&v883[jj + 56])
                re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v883[jj + 56]);
              *(_QWORD *)&v883[jj + 56] = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)(v609 + 46));
              re::TextureHandle::invalidate((re::TextureHandle *)(v609 + 42));
              re::TextureHandle::invalidate((re::TextureHandle *)(v609 + 38));
              re::TextureHandle::invalidate((re::TextureHandle *)(v609 + 34));
              re::TextureHandle::invalidate((re::TextureHandle *)&v883[jj + 30]);
            }
            if (v956)
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release(&v956);
            v956 = 0;
            re::TextureHandle::invalidate((re::TextureHandle *)v953);
            re::TextureHandle::invalidate((re::TextureHandle *)&v952);
            re::TextureHandle::invalidate((re::TextureHandle *)&buf[32]);
            re::TextureHandle::invalidate((re::TextureHandle *)&buf[16]);
            re::TextureHandle::invalidate((re::TextureHandle *)buf);
            for (kk = 0; kk != -30; kk -= 15)
            {
              v611 = (char *)v961 + kk * 8;
              if (v966[kk + 13])
                re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v966[kk + 13]);
              v966[kk + 13] = 0;
              re::TextureHandle::invalidate((re::TextureHandle *)(v611 + 184));
              re::TextureHandle::invalidate((re::TextureHandle *)(v611 + 168));
              re::TextureHandle::invalidate((re::TextureHandle *)(v611 + 152));
              re::TextureHandle::invalidate((re::TextureHandle *)(v611 + 136));
              re::TextureHandle::invalidate((re::TextureHandle *)&v966[kk]);
            }
            p_isa = &loga->isa;
          }
          re::VideoAsset::dimensions((re::VideoAsset *)p_isa);
          v613 = v612;
          re::VideoAsset::dimensions((re::VideoAsset *)p_isa);
          *(_QWORD *)(v582 + 192) = __PAIR64__(HIDWORD(v536), v613);
          v581 = v827;
        }
      }
      v580 += 56;
    }
    while (v580 != v581);
  }
  ReadyToRender = re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (ReadyToRender)
  {
    v617 = *(_QWORD *)(ReadyToRender + 24);
    if (v617)
    {
      v618 = 8 * v617;
      v619 = *(uint64_t **)(ReadyToRender + 40);
      while (1)
      {
        v620 = *v619;
        if (!*(_QWORD *)(*v619 + 176))
          break;
        *(_QWORD *)buf = *(_QWORD *)(v620 + 64);
        v621 = *(unsigned __int8 *)(v620 + 57);
        v622 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)ReadyToRender);
        if ((_DWORD)v622)
        {
          v622 = (re *)re::areAlmostEqual<float>(*(float *)(v620 + 64), *(float *)(v620 + 68), *(float *)(v620 + 192), *(float *)(v620 + 196));
          if ((v622 & 1) == 0)
          {
            v635 = *re::videoLogObjects(v622);
            v622 = (re *)os_log_type_enabled(v635, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v622)
            {
              v636 = *(float *)(v620 + 192);
              v637 = *(float *)(v620 + 196);
              v961[0].i32[0] = 134218240;
              *(double *)((char *)v961[0].i64 + 4) = v636;
              v961[0].i16[6] = 2048;
              *(double *)((char *)&v961[0].i64[1] + 6) = v637;
              _os_log_impl(&dword_224FE9000, v635, OS_LOG_TYPE_DEFAULT, "New video texture dimension: %f, %f", (uint8_t *)v961, 0x16u);
            }
          }
        }
        v623 = *(_QWORD *)(v620 + 192);
        *(_QWORD *)(v620 + 64) = v623;
        switch(*(_DWORD *)(v620 + 200))
        {
          case 0xFFFFFFFF:
            *(_BYTE *)(v620 + 57) = 0;
            break;
          case 0:
            *(_BYTE *)(v620 + 57) = 1;
            break;
          case 1:
            *(_BYTE *)(v620 + 57) = 2;
            goto LABEL_822;
          case 2:
            *(_BYTE *)(v620 + 57) = 2;
            break;
          case 3:
            *(_BYTE *)(v620 + 57) = 2;
            goto LABEL_824;
          case 4:
            *(_BYTE *)(v620 + 57) = 1;
LABEL_822:
            *(float *)(v620 + 64) = *(float *)&v623 * 0.5;
            break;
          case 5:
            *(_BYTE *)(v620 + 57) = 1;
LABEL_824:
            *(float *)(v620 + 68) = *((float *)&v623 + 1) * 0.5;
            break;
          default:
            break;
        }
        ReadyToRender = re::VideoDefaults::logEnabled(v622);
        if ((_DWORD)ReadyToRender)
        {
          v638 = *re::videoLogObjects((re *)ReadyToRender);
          ReadyToRender = os_log_type_enabled(v638, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)ReadyToRender)
          {
            v639 = *(unsigned __int8 *)(v620 + 57);
            v961[0].i64[0] = 0x104000200;
            v961[0].i16[4] = 1024;
            *(__int32 *)((char *)&v961[0].i32[2] + 2) = v639;
            _os_log_impl(&dword_224FE9000, v638, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->updateSyncedState :: allResourcesAreReady == %d and currentViewingMode == %hhu", (uint8_t *)v961, 0xEu);
          }
        }
        if (v621 != *(unsigned __int8 *)(v620 + 57) || *(_QWORD *)buf != *(_QWORD *)(v620 + 64))
          goto LABEL_828;
LABEL_830:
        v624 = *(_QWORD *)(v620 + 176)
            && (ReadyToRender = re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)(v620 + 168))) != 0
            && *(_BYTE *)(ReadyToRender + 933) != 0;
        v625 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)ReadyToRender);
        if (!(_DWORD)v625)
          goto LABEL_835;
        v628 = *(_QWORD *)(v620 + 16);
        v812 = *(_QWORD *)(v628 + 296);
        v629 = *(_QWORD *)(v628 + 24);
        if (!v629 || (*(_BYTE *)(v629 + 288) & 0x80) != 0)
        {
          logb = (id)*re::videoLogObjects(v625);
          if (os_log_type_enabled(logb, OS_LOG_TYPE_DEFAULT))
          {
            v961[0].i32[0] = 138412546;
            v634 = CFSTR("False");
            if (v624)
              v634 = CFSTR("True");
            *(uint64_t *)((char *)v961[0].i64 + 4) = (uint64_t)v634;
            v961[0].i16[6] = 2048;
            *(uint64_t *)((char *)&v961[0].i64[1] + 6) = v812;
            v632 = logb;
            v633 = "[VideoComponentSystem]->update :: Setting isReadyToRender to %@ with VideoComponent with EntityID %llu";
            goto LABEL_872;
          }
        }
        else
        {
          v813 = *(_QWORD *)(v629 + 296);
          v630 = *(_QWORD *)(v629 + 24);
          if (!v630 || (*(_BYTE *)(v630 + 288) & 0x80) != 0)
          {
            logb = (id)*re::videoLogObjects(v625);
            if (os_log_type_enabled(logb, OS_LOG_TYPE_DEFAULT))
            {
              v961[0].i32[0] = 138412546;
              v645 = CFSTR("False");
              if (v624)
                v645 = CFSTR("True");
              *(uint64_t *)((char *)v961[0].i64 + 4) = (uint64_t)v645;
              v961[0].i16[6] = 2048;
              *(uint64_t *)((char *)&v961[0].i64[1] + 6) = v813;
              v632 = logb;
              v633 = "[VideoComponentSystem]->update :: Setting isReadyToRender to %@ with VideoComponent Parent with EntityID %llu";
              goto LABEL_872;
            }
          }
          else
          {
            v814 = *(_QWORD *)(v630 + 296);
            logb = (id)*re::videoLogObjects(v625);
            if (os_log_type_enabled(logb, OS_LOG_TYPE_DEFAULT))
            {
              v961[0].i32[0] = 138412546;
              v631 = CFSTR("False");
              if (v624)
                v631 = CFSTR("True");
              *(uint64_t *)((char *)v961[0].i64 + 4) = (uint64_t)v631;
              v961[0].i16[6] = 2048;
              *(uint64_t *)((char *)&v961[0].i64[1] + 6) = v814;
              v632 = logb;
              v633 = "[VideoComponentSystem]->update :: Setting isReadyToRender to %@ with VideoComponent Parent Parent w"
                     "ith EntityID %llu";
LABEL_872:
              _os_log_impl(&dword_224FE9000, v632, OS_LOG_TYPE_DEFAULT, v633, (uint8_t *)v961, 0x16u);
            }
          }
        }

LABEL_835:
        ReadyToRender = re::ecs2::VideoComponent::getReadyToRender((re::ecs2::VideoComponent *)v620);
        if ((ReadyToRender & 1) == 0 && v624)
        {
          v626 = (re *)re::VideoDefaults::logEnabled((re::VideoDefaults *)ReadyToRender);
          if ((_DWORD)v626)
          {
            v640 = (id)*re::videoLogObjects(v626);
            if (os_log_type_enabled(v640, OS_LOG_TYPE_DEFAULT))
            {
              logc = v640;
              v641 = *(_QWORD *)(*(_QWORD *)(v620 + 16) + 296);
              v642 = re::AssetHandle::assetInfo((re::AssetHandle *)(v620 + 168));
              if ((v642[17] & 1) != 0)
                v643 = v642[18];
              else
                v643 = (uint64_t)v642 + 137;
              v961[0].i32[0] = 134218498;
              *(uint64_t *)((char *)v961[0].i64 + 4) = v641;
              v640 = logc;
              v961[0].i16[6] = 2112;
              *(uint64_t *)((char *)&v961[0].i64[1] + 6) = (uint64_t)CFSTR("True");
              v961[1].i16[3] = 2080;
              v961[1].i64[1] = v643;
              _os_log_impl(&dword_224FE9000, logc, OS_LOG_TYPE_DEFAULT, "[VideoComponentSystem]->update :: Setting VideoComponent with EntityID %llu isReadyToRender to %@ for VideAsset %s", (uint8_t *)v961, 0x20u);
            }

          }
          *(_BYTE *)(v620 + 73) = 1;
          v627 = (re *)re::VideoDefaults::logEnabled(v626);
          if ((_DWORD)v627)
          {
            v644 = *re::videoLogObjects(v627);
            if (os_log_type_enabled(v644, OS_LOG_TYPE_DEFAULT))
            {
              v961[0].i32[0] = 136315138;
              *(uint64_t *)((char *)v961[0].i64 + 4) = (uint64_t)"TRUE";
              _os_log_impl(&dword_224FE9000, v644, OS_LOG_TYPE_DEFAULT, "[VideoComponent]->setIsReadyToRender :: Setting ready to render %s", (uint8_t *)v961, 0xCu);
            }
          }
          ReadyToRender = *(_QWORD *)(*(_QWORD *)(v620 + 16) + 200);
          if (ReadyToRender)
            re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)ReadyToRender, (const re::ecs2::Component *)v620);
        }
        ++v619;
        v618 -= 8;
        if (!v618)
          goto LABEL_874;
      }
      if (!*(_BYTE *)(v620 + 57))
        goto LABEL_830;
      *(_QWORD *)(v620 + 64) = 0;
      *(_BYTE *)(v620 + 57) = 0;
LABEL_828:
      ReadyToRender = *(_QWORD *)(*(_QWORD *)(v620 + 16) + 200);
      if (ReadyToRender)
        re::ecs2::NetworkComponent::markDirty((re::ecs2::NetworkComponent *)ReadyToRender, (const re::ecs2::Component *)v620);
      goto LABEL_830;
    }
  }
LABEL_874:
  v646 = (re::VideoDefaults *)re::VideoDefaults::frameTimeLogEnabled((re::VideoDefaults *)ReadyToRender);
  if ((v646 & 1) == 0 || re::VideoDefaults::frameDropThreshold(v646) >= v13)
    goto LABEL_875;
  v780 = (re *)re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v780)
  {
    v781 = *((_QWORD *)v780 + 3);
    if (v781)
    {
      v782 = *((_QWORD *)v780 + 5);
      v783 = 8 * v781;
      while (*(float *)(*(_QWORD *)v782 + 64) <= 0.0)
      {
        v782 += 8;
        v783 -= 8;
        if (!v783)
          goto LABEL_1031;
      }
LABEL_1036:
      v784 = (id)*re::videoLogObjects(v780);
      if (!os_log_type_enabled(v784, OS_LOG_TYPE_DEFAULT))
        goto LABEL_1034;
      v961[0].i32[0] = 134217984;
      *(double *)((char *)v961[0].i64 + 4) = v13;
      v785 = "VideoFrameTime VideoPlaying deltaTime: %f";
      goto LABEL_1033;
    }
  }
LABEL_1031:
  v784 = (id)*re::videoLogObjects(v780);
  if (os_log_type_enabled(v784, OS_LOG_TYPE_DEFAULT))
  {
    v961[0].i32[0] = 134217984;
    *(double *)((char *)v961[0].i64 + 4) = v13;
    v785 = "VideoFrameTime VideoHidden deltaTime: %f";
LABEL_1033:
    _os_log_impl(&dword_224FE9000, v784, OS_LOG_TYPE_DEFAULT, v785, (uint8_t *)v961, 0xCu);
  }
LABEL_1034:

LABEL_875:
  v647 = re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v648 = v824;
  if (v647)
  {
    v649 = *(_QWORD *)(v647 + 24);
    if (v649)
    {
      v650 = *(uint64_t **)(v647 + 40);
      v651 = 8 * v649;
      do
      {
        v652 = *v650;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v961, (const re::AssetHandle *)(*v650 + 40));
        v653 = (re::VideoAsset *)re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v961);
        if (v653)
        {
          v654 = re::VideoAsset::createOrGetVideoPlayerComponentHelper(v653);
          if (v654)
          {
            v655 = (float32x2_t **)v654;
            v656 = *(re::ecs2::Entity **)(v652 + 16);
            isVideoEntityHierarchyValid = (re::VideoDefaults *)re::ecs2::VideoPlayerComponentHelper::impl::isVideoEntityHierarchyValid((re::ecs2::VideoPlayerComponentHelper::impl *)v654, v656);
            if ((_DWORD)isVideoEntityHierarchyValid)
            {
              if (*(_QWORD *)(v648 + 168))
              {
                v658 = (re *)re::VideoDefaults::logEnabled(isVideoEntityHierarchyValid);
                if ((_DWORD)v658)
                {
                  v659 = (id)*re::videoLogObjects(v658);
                  if (os_log_type_enabled(v659, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_224FE9000, v659, OS_LOG_TYPE_DEFAULT, "[VideoComponentSystem]->update ::  VPC Manager Post Buffer Retrieval Update called", buf, 2u);
                  }

                  v648 = v824;
                }
                re::ecs2::VideoPlayerComponentHelper::impl::postBufferRetrievalUpdate(*v655, v13, *(re::ecs2::Entity **)(v652 + 16), *(re::AssetManager **)(v648 + 168));
              }
              re::ecs2::VideoPlayerComponentHelper::impl::handleEntitiesPosition((re::ecs2::VideoPlayerComponentHelper::impl *)*v655, v656);
              re::AssetHandle::AssetHandle((re::AssetHandle *)v882, (const re::AssetHandle *)v961);
              re::ecs2::VideoPlayerComponentHelper::updateAudioSrcPosition((uint64_t *)v655, v656, (const re::AssetHandle *)v882);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v882);
            }
          }
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v961);
        ++v650;
        v651 -= 8;
      }
      while (v651);
    }
  }
  v660 = re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v660)
  {
    v661 = *(_QWORD *)(v660 + 24);
    if (v661)
    {
      v662 = *(uint64_t **)(v660 + 40);
      v663 = 8 * v661;
      do
      {
        v664 = *v662;
        re::AssetHandle::AssetHandle((re::AssetHandle *)v961, (const re::AssetHandle *)(*(_QWORD *)(*v662 + 56) + 152));
        if (re::AssetHandle::loadedAsset<re::VideoAsset>((re::VideoAsset *)v961))
        {
          v666 = *(re::AssetManager **)(v648 + 168);
          if (v666)
            re::ecs2::VideoProxyComponent::impl::postBufferRetrievalUpdate(*(float32x2_t **)(v664 + 56), v665, *(re::ecs2::Entity **)(v664 + 16), v666);
        }
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v961);
        ++v662;
        v663 -= 8;
      }
      while (v663);
    }
  }
  v667 = (re::VideoDefaults *)re::ecs2::SceneComponentTable::get(v817, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v667)
  {
    v668 = *((_QWORD *)v667 + 3);
    if (v668)
    {
      v669 = (uint64_t *)*((_QWORD *)v667 + 5);
      v670 = 8 * v668;
      do
      {
        v671 = *v669++;
        v672 = *(_QWORD *)(v648 + 120);
        v673 = *(_QWORD *)(v671 + 224);
        v674 = *(_QWORD *)(v671 + 232);
        v675 = *(_QWORD *)(v671 + 240);
        v676 = *(_DWORD *)(v671 + 248);
        v677 = (re::MaterialParameterBlock *)re::MaterialManager::getOrAddSystemMaterialParameterBlock(*(re::RenderManager ***)(v672 + 24), *(_QWORD *)(*(_QWORD *)(v671 + 16) + 296));
        *(_QWORD *)buf = v673;
        v939[0] = 111644657;
        re::MaterialParameterBlock::setConstant(v677, (uint64_t *)v939, 8uLL, buf, 32, (uint64_t)v961);
        v961[0].i64[0] = 0;
        v939[0] = v674;
        v911[0].i64[0] = 111644419;
        re::MaterialParameterBlock::setConstant(v677, (uint64_t *)v911, 8uLL, v939, 32, (uint64_t)buf);
        *(_QWORD *)buf = 0;
        v911[0].i64[0] = v675;
        v934 = 0x30654208A56;
        re::MaterialParameterBlock::setConstant(v677, (uint64_t *)&v934, 8uLL, v911, 32, (uint64_t)v939);
        v939[0] = 0;
        *(_DWORD *)v929 = v676;
        v648 = v824;
        v934 = 0x26C7B60B7DDA417CLL;
        re::MaterialParameterBlock::setConstant(v677, (uint64_t *)&v934, 4uLL, v929, 3, (uint64_t)v911);
        v670 -= 8;
      }
      while (v670);
    }
  }
  if ((re::VideoDefaults::passthroughTintColorTuningAllowed(v667) & 1) == 0)
    goto LABEL_932;
  memset(buf, 0, 36);
  *(CFTimeInterval *)&buf[36] = v9;
  if (!v895)
  {
    v692 = 0;
    goto LABEL_929;
  }
  v678 = v897;
  v679 = &v897[7 * v895];
  do
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v939, (const re::AssetHandle *)(v678 + 2));
    if (v939[1])
    {
      v680 = atomic_load((unsigned int *)(v939[1] + 704));
      if (v680 == 2)
      {
        v681 = v678[5];
        v682 = *(_QWORD *)(v681 + 168);
        if (v682)
        {
          if ((*(_BYTE *)(v682 + 7016) & 1) != 0)
          {
            v683 = *v678;
            v684 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v678 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PassthroughDarkeningComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            if (v684)
            {
              v685 = v684;
              if (*(_BYTE *)(v684 + 25))
              {
                v686 = *((_QWORD *)re::AssetHandle::assetInfo((re::AssetHandle *)v939) + 10);
                if (v686 == -1)
                  v686 = 0;
                v911[0].i64[0] = v686;
                v687 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v686 ^ (v686 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v686 ^ (v686 >> 30))) >> 27));
                v688 = v687 ^ (v687 >> 31);
                if (!*(_QWORD *)buf)
                {
                  LODWORD(v690) = 0;
                  *(float32x4_t *)((char *)&v961[1] + 4) = (float32x4_t)xmmword_22612DF10;
                  *(float32x4_t *)((char *)&v961[2] + 4) = (float32x4_t)xmmword_22612DF20;
                  v961[0].i64[0] = v681;
                  v961[0].i64[1] = v683;
                  v961[1].i32[0] = *(_DWORD *)(v685 + 96);
LABEL_921:
                  re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)buf, v690, v688, v911, (uint64_t)v961);
                  ++*(_DWORD *)&buf[40];
                  goto LABEL_922;
                }
                v689 = *(unsigned int *)(*(_QWORD *)&buf[8] + 4 * (v688 % *(unsigned int *)&buf[24]));
                if ((_DWORD)v689 == 0x7FFFFFFF)
                {
LABEL_916:
                  *(float32x4_t *)((char *)&v961[1] + 4) = (float32x4_t)xmmword_22612DF10;
                  *(float32x4_t *)((char *)&v961[2] + 4) = (float32x4_t)xmmword_22612DF20;
                  v961[0].i64[0] = v681;
                  v961[0].i64[1] = v683;
                  v961[1].i32[0] = *(_DWORD *)(v685 + 96);
                  v690 = v688 % *(unsigned int *)&buf[24];
                  v691 = *(unsigned int *)(*(_QWORD *)&buf[8] + 4 * v690);
                  if ((_DWORD)v691 == 0x7FFFFFFF)
                    goto LABEL_921;
                  while (*(_QWORD *)(*(_QWORD *)&buf[16] + 80 * v691 + 16) != v686)
                  {
                    LODWORD(v691) = *(_DWORD *)(*(_QWORD *)&buf[16] + 80 * v691 + 8) & 0x7FFFFFFF;
                    if ((_DWORD)v691 == 0x7FFFFFFF)
                      goto LABEL_921;
                  }
                }
                else
                {
                  while (*(_QWORD *)(*(_QWORD *)&buf[16] + 80 * v689 + 16) != v686)
                  {
                    LODWORD(v689) = *(_DWORD *)(*(_QWORD *)&buf[16] + 80 * v689 + 8) & 0x7FFFFFFF;
                    if ((_DWORD)v689 == 0x7FFFFFFF)
                      goto LABEL_916;
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_922:
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v939);
    v678 += 7;
  }
  while (v678 != v679);
  v692 = *(_DWORD *)&buf[32];
  if (!*(_DWORD *)&buf[32])
  {
LABEL_929:
    LODWORD(v693) = 0;
    goto LABEL_930;
  }
  v693 = 0;
  v694 = (int *)(*(_QWORD *)&buf[16] + 8);
  while (1)
  {
    v695 = *v694;
    v694 += 20;
    if (v695 < 0)
      break;
    if (*(unsigned int *)&buf[32] == ++v693)
    {
      LODWORD(v693) = *(_DWORD *)&buf[32];
      break;
    }
  }
LABEL_930:
  if (v692 != (_DWORD)v693)
  {
    v703 = v693;
    v790 = v13;
    v704 = *(_QWORD *)&buf[16];
    v791 = v692;
    do
    {
      v705 = v704 + 80 * v703;
      v708 = *(_QWORD *)(v705 + 24);
      v707 = (uint64_t *)(v705 + 24);
      v706 = v708;
      if (v708)
      {
        v709 = v704 + 80 * v703;
        v711 = *(_QWORD *)(v709 + 32);
        v710 = v709 + 32;
        if (v711)
        {
          v879 = v710;
          v797 = v707;
          re::VideoAsset::getVideoTextureHandles(v706, (uint64_t)v961);
          v712 = 0;
          v713 = BYTE4(cf[0]);
          do
          {
            v714 = (char *)v961 + v712 * 8;
            if (v966[v712 + 13])
              re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v966[v712 + 13]);
            v966[v712 + 13] = 0;
            re::TextureHandle::invalidate((re::TextureHandle *)(v714 + 184));
            re::TextureHandle::invalidate((re::TextureHandle *)(v714 + 168));
            re::TextureHandle::invalidate((re::TextureHandle *)(v714 + 152));
            re::TextureHandle::invalidate((re::TextureHandle *)(v714 + 136));
            re::TextureHandle::invalidate((re::TextureHandle *)&v966[v712]);
            v712 -= 15;
          }
          while (v712 != -30);
          v716 = (re *)re::VideoDefaults::logEnabled(v715);
          if ((_DWORD)v716)
          {
            v774 = (id)*re::videoLogObjects(v716);
            if (os_log_type_enabled(v774, OS_LOG_TYPE_DEFAULT))
            {
              v775 = "Enabled";
              if (!v713)
                v775 = "Disabled";
              v961[0].i32[0] = 136315138;
              *(uint64_t *)((char *)v961[0].i64 + 4) = (uint64_t)v775;
              _os_log_impl(&dword_224FE9000, v774, OS_LOG_TYPE_DEFAULT, "=========== HDR Tuning %s ========================", (uint8_t *)v961, 0xCu);
            }

          }
          v836 = re::VideoDefaults::hueLerpVelocityVideoTuning(0);
          v803 = re::VideoDefaults::saturationPowerVideoTuning(0);
          v717 = re::VideoDefaults::minSaturationVideoTuning(0);
          v718 = re::VideoDefaults::maxSaturationVideoTuning(0);
          v848 = re::VideoDefaults::saturationInflectionVideoTuning(0);
          v843 = re::VideoDefaults::saturationSmoothingVideoTuning(0);
          v719 = re::VideoDefaults::brightnessMinVideoTuning(0);
          v720 = re::VideoDefaults::brightnessMaxVideoTuning(0);
          v721 = re::VideoDefaults::brightnessInflectionVideoTuning(0);
          v722 = re::VideoDefaults::brightnessSmoothingVideoTuning(0);
          v723 = re::VideoDefaults::colorSmoothTimeVideoTuning(0);
          v724 = re::VideoDefaults::gazeDeadbandVideoTuning(0);
          v725.f32[0] = re::VideoDefaults::gazeMaxAngleVideoTuning(0);
          if (v713)
          {
            v818 = re::VideoDefaults::minSaturationVideoTuning((re::VideoDefaults *)1);
            v828 = re::VideoDefaults::maxSaturationVideoTuning((re::VideoDefaults *)1);
            v727 = re::VideoDefaults::saturationPowerVideoTuning((re::VideoDefaults *)1);
            v728 = re::VideoDefaults::saturationInflectionVideoTuning((re::VideoDefaults *)1);
            v843 = re::VideoDefaults::saturationSmoothingVideoTuning((re::VideoDefaults *)1);
            v729 = re::VideoDefaults::hueLerpVelocityVideoTuning((re::VideoDefaults *)1);
            v815 = re::VideoDefaults::brightnessMinVideoTuning((re::VideoDefaults *)1);
            v730 = re::VideoDefaults::brightnessMaxVideoTuning((re::VideoDefaults *)1);
            v721 = re::VideoDefaults::brightnessInflectionVideoTuning((re::VideoDefaults *)1);
            v731 = re::VideoDefaults::brightnessSmoothingVideoTuning((re::VideoDefaults *)1);
            logd = re::VideoDefaults::colorSmoothTimeVideoTuning((re::VideoDefaults *)1);
            v808 = re::VideoDefaults::gazeMaxAngleVideoTuning((re::VideoDefaults *)1);
            v724 = re::VideoDefaults::gazeDeadbandVideoTuning((re::VideoDefaults *)1);
            v732 = (float32x4_t *)("N2re4ecs213ComponentImplINS0_30VisualProxyScopeTraceComponentELNS0_17ComponentTypeBase5FlagsE2EEE"
                                 + 88);
            v733 = "N2re8internal8CallableIZNS_18FramePersistentPtrINS_4ecs232BlendShapeWeightsBufferComponent23BlendShap"
                   "eWeightsInputsENS_12FrameManagerEE5resetENS_10ArcWeakPtrIS6_EEPS5_ONS_8FunctionIFvPvEEEEUlSC_E_SD_JEEE"
                 + 115;
            v734 = v879;
          }
          else
          {
            v815 = v719;
            v828 = v718;
            v818 = v717;
            logd = v723;
            v808 = v725.f32[0];
            v732 = (float32x4_t *)"lagsE2EEE";
            v733 = "ENS_12FrameManagerEE5resetENS_10ArcWeakPtrIS6_EEPS5_ONS_8FunctionIFvPvEEEEUlSC_E_SD_JEEE";
            v735 = v722;
            v727 = v803;
            v729 = v836;
            v734 = v879;
            v730 = v720;
            v731 = v735;
            v728 = v848;
          }
          v849 = v728;
          v736 = v899;
          v804 = v724;
          if (v899)
          {
            v737 = *(_QWORD *)(*(_QWORD *)v734 + 240);
            v738 = v901;
            v739 = v899 << 7;
            if (v737)
            {
              v740 = v901 + 1;
              v741 = 0.0;
              v742 = v899 << 7;
              do
              {
                v743 = *(re::ecs2::TransformComponent ***)(v737 + 16);
                if (v743)
                {
                  re::ecs2::TransformComponent::worldMatrix4x4F(v743, (const re::ecs2::Entity *)1, v961);
                  v744 = v961[3];
                }
                else
                {
                  v744 = *(float32x4_t *)(v737 + 64);
                }
                v745 = *v740;
                v740 += 8;
                v746 = vsubq_f32(v745, v744);
                v747 = vmulq_f32(v746, v746);
                v741 = v741
                     + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v747, 2), vaddq_f32(v747, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v747.f32, 1))).f32[0]);
                v742 -= 128;
              }
              while (v742);
              v748 = v741 / (float)v736;
              v732 = (float32x4_t *)("N2re4ecs213ComponentImplINS0_30VisualProxyScopeTraceComponentELNS0_17ComponentTypeBase5FlagsE2EEE"
                                   + 88);
              v733 = "N2re8internal8CallableIZNS_18FramePersistentPtrINS_4ecs232BlendShapeWeightsBufferComponent23BlendSh"
                     "apeWeightsInputsENS_12FrameManagerEE5resetENS_10ArcWeakPtrIS6_EEPS5_ONS_8FunctionIFvPvEEEEUlSC_E_SD_JEEE"
                   + 115;
              v734 = v879;
            }
            else
            {
              v748 = 0.0;
            }
            v752 = 0;
            v750 = &v738[8 * v736];
            v749 = 0uLL;
            v751 = v815;
            do
            {
              v753 = v738[v752 / 0x10 + 2];
              v754 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v753, (int32x4_t)v753), (int8x16_t)v753, 0xCuLL);
              v755 = *((float32x4_t *)v733 + 238);
              v756 = vmlaq_f32(vmulq_f32(v753, v732[108]), v755, v754);
              v757 = (int8x16_t)vaddq_f32(v756, v756);
              v758 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v757, (int32x4_t)v757), v757, 0xCuLL);
              v759 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v758, (int32x4_t)v758), (int8x16_t)v758, 0xCuLL), vnegq_f32(v753)), v758, v754);
              v726 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v759, (int32x4_t)v759), v759, 0xCuLL);
              v725 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v758, v753, 3), v755), v726);
              v749 = vaddq_f32(v749, v725);
              v752 += 128;
            }
            while (v739 != v752);
            v692 = v791;
          }
          else
          {
            v749 = 0uLL;
            v748 = 0.0;
            v750 = v901;
            v738 = v901;
            v751 = v815;
          }
          *(float32x4_t *)v837 = v749;
          v816 = v748;
          v726.f32[0] = (float)v736;
          if (v736)
          {
            v796 = v726.i64[0];
            v760 = *(_QWORD *)(*(_QWORD *)v734 + 240);
            v761 = 0uLL;
            do
            {
              v762 = *(re::ecs2::TransformComponent ***)(v760 + 16);
              if (v762)
              {
                *(float32x4_t *)v880 = v761;
                re::ecs2::TransformComponent::worldMatrix4x4F(v762, (const re::ecs2::Entity *)1, v961);
                v761 = *(float32x4_t *)v880;
                v763 = v961[3];
              }
              else
              {
                v763 = *(float32x4_t *)(v760 + 64);
              }
              v725 = vsubq_f32(v763, v738[1]);
              v761 = vaddq_f32(v761, v725);
              v738 += 8;
            }
            while (v738 != v750);
            v764 = v731;
            v765 = v843;
            v726.i64[0] = v796;
            v725.i32[0] = v796;
          }
          else
          {
            v764 = v731;
            v765 = v843;
            v761 = 0uLL;
            v725.i32[0] = 0;
          }
          *(float32x4_t *)v844 = vdivq_f32(*(float32x4_t *)v837, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v726.f32, 0));
          *(float32x4_t *)v881 = vdivq_f32(v761, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v725.f32, 0));
          v766 = re::TargetDisplayInfoProvider::{unnamed type#11}::operator()(*(_QWORD *)(*(_QWORD *)(v824 + 120) + 288) + 480);
          v767 = re::TargetDisplayInfoProvider::{unnamed type#12}::operator()(*(_QWORD *)(*(_QWORD *)(v824 + 120) + 288) + 528);
          v768 = *(float *)(v704 + 80 * v703 + 40);
          v769 = *v797;
          *(_DWORD *)(v769 + 864) = v800;
          *(float *)(v769 + 868) = v816;
          *(re::DynamicString **)(v769 + 880) = v844[0];
          *(_DWORD *)(v769 + 888) = v844[1];
          *(re::TextureHandle **)(v769 + 896) = v881[0];
          *(_DWORD *)(v769 + 904) = v881[1];
          v792 = v766;
          *(float *)(v769 + 912) = v766;
          v770 = v767;
          *(float *)(v769 + 916) = v767;
          *(float *)(v769 + 720) = v729;
          *(_OWORD *)(v769 + 724) = xmmword_2260FD410;
          *(float *)(v769 + 740) = v727;
          *(_QWORD *)(v769 + 744) = 0x3FC666663D4CCCCDLL;
          *(float *)(v769 + 752) = v818;
          *(float *)(v769 + 756) = v828;
          *(float *)(v769 + 760) = v849;
          *(float *)(v769 + 764) = v765;
          *(float *)(v769 + 768) = v751;
          *(float *)(v769 + 772) = v730;
          *(_QWORD *)(v769 + 776) = 0x42C800003F800000;
          *(float *)(v769 + 784) = v721;
          *(float *)(v769 + 788) = v764;
          *(_QWORD *)(v769 + 792) = 0x40A000003F800000;
          v798 = v768;
          *(float *)(v769 + 800) = v768;
          *(_DWORD *)(v769 + 804) = 1092616192;
          *(float *)(v769 + 808) = logd;
          *(_DWORD *)(v769 + 812) = 1120403456;
          *(int32x4_t *)(v769 + 816) = vdupq_n_s32(0x3E99999Au);
          *(_QWORD *)(v769 + 832) = 0x3E8000003F0A3D71;
          *(float *)(v769 + 840) = v804;
          *(_DWORD *)(v769 + 844) = 1036831949;
          *(float *)(v769 + 848) = v808;
          if (re::VideoDefaults::logEnabled(v771))
          {
            objc_msgSend(MEMORY[0x24BDD16A8], "stringWithFormat:", CFSTR("Color Tuning Frame %llu:"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v824 + 120) + 136) + 24) & 0xFFFFFFFFFFFFFFFLL);
            v776 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v776, "appendString:", CFSTR("\n== Context ========================"));
            objc_msgSend(v776, "appendFormat:", CFSTR("\n        deltaTime: %f"), *(_QWORD *)&v790);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n     gazeDistance: %{private}f"), v816);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n    gazeDirection: (%{private}f, %{private}f, %{private}f)"), *(float *)v844, *((float *)v844 + 1), *(float *)&v844[1]);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n     gazeToCenter: (%{private}f, %{private}f, %{private}f)"), *(float *)v881, *((float *)v881 + 1), *(float *)&v881[1]);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n         edrValue: %f"), v792);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n        edrFactor: %f"), v770);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n== Properties ====================="));
            objc_msgSend(v776, "appendFormat:", CFSTR("\n-- Hue ----------------------------"));
            objc_msgSend(v776, "appendFormat:", CFSTR("\n       hueLerpVelocity: %f"), v729);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n    hueMinLerpVelocity: %f"), 0x3FC1EB8520000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n    hueMaxLerpVelocity: %f"), 0x3FF4CCCCC0000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n          hueLerpPower: %f"), 0x4000000000000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n-- Saturation ---------------------"));
            objc_msgSend(v776, "appendFormat:", CFSTR("\n                        saturationPower: %f"), 0x3FCEB851E0000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n                       saturationPower2: %f"), v727);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n    saturationHueDependentMinMultiplier: %f"), 0x3FA99999A0000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n    saturationHueDependentMaxMultiplier: %f"), 0x3FF8CCCCC0000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n                          saturationMin: %f"), v818);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n                          saturationMax: %f"), v828);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n                    saturationSmoothing: %f"), v765);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n                   saturationInflection: %f"), v849);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n-- Brightness ---------------------"));
            objc_msgSend(v776, "appendFormat:", CFSTR("\n             brightnessMin: %f"), v751);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n             brightnessMax: %f"), v730);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n      brightnessInflection: %f"), v721);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n       brightnessSmoothing: %f"), v764);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n           brightnessPower: %f"), 0x3FF0000000000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n    brightnessLerpVelocity: %f"), 0x4059000000000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n               darkenValue: %f"), 0x3FF0000000000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n      darkenDividingFactor: %f"), 0x4014000000000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n-- Color --------------------------"));
            objc_msgSend(v776, "appendFormat:", CFSTR("\n            colorTransition: %f"), v798);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n     colorSmoothMaxVelocity: %f"), 0x4024000000000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n            colorSmoothTime: %f"), logd);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n    colorOutputLerpVelocity: %f"), 0x4059000000000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n               colorDefault: [%f, %f, %f]"), 0x3FD3333340000000, 0x3FD3333340000000, 0x3FD3333340000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n-- Gaze ---------------------------"));
            objc_msgSend(v776, "appendFormat:", CFSTR("\n        gazeDistancePower: %f"), 0x3FE147AE20000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n    gazeMinDistanceEffect: %f"), 0x3FD0000000000000);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n        gazeAngleDeadband: %f"), v804);
            objc_msgSend(v776, "appendFormat:", CFSTR("\n           gazeMinDimming: %f"), 0x3FB99999A0000000);
            v777 = (id)*re::videoLogObjects((re *)objc_msgSend(v776, "appendFormat:", CFSTR("\n             gazeMaxAngle: %f"), v808));
            if (os_log_type_enabled(v777, OS_LOG_TYPE_DEFAULT))
            {
              v778 = objc_msgSend(objc_retainAutorelease(v776), "cStringUsingEncoding:", 1);
              v961[0].i32[0] = 136315138;
              *(uint64_t *)((char *)v961[0].i64 + 4) = v778;
              _os_log_impl(&dword_224FE9000, v777, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)v961, 0xCu);
            }

          }
        }
      }
      v704 = *(_QWORD *)&buf[16];
      if (*(_DWORD *)&buf[32] <= (v693 + 1))
        v772 = v693 + 1;
      else
        v772 = *(_DWORD *)&buf[32];
      while (1)
      {
        v703 = (v693 + 1);
        if (v772 - 1 == (_DWORD)v693)
          break;
        LODWORD(v693) = v693 + 1;
        v773 = v703;
        if ((*(_DWORD *)(*(_QWORD *)&buf[16] + 80 * v703 + 8) & 0x80000000) != 0)
          goto LABEL_992;
      }
      v773 = v772;
LABEL_992:
      LODWORD(v693) = v773;
    }
    while (v692 != v773);
  }
  re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)buf);
  v648 = v824;
LABEL_932:
  v696 = *(_QWORD *)(v648 + 160);
  if (v696 && v831)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v696 + 32))(v696, v831);
  v697 = *(_QWORD *)(v648 + 136);
  if (v697)
  {
    *(_BYTE *)(v697 + 144) = v829 & 1;
    *(_BYTE *)(v697 + 145) = v829 & 1 & v793;
  }
  v698.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v968);
  if (v888[0] && v890)
    (*(void (**)(double))(*(_QWORD *)v888[0] + 40))(v698.n128_f64[0]);
  v699 = v893;
  if (v893 && v897)
  {
    if (v895)
    {
      v700 = 56 * v895;
      v701 = (re::AssetHandle *)(v897 + 2);
      do
      {
        re::AssetHandle::~AssetHandle(v701);
        v701 = (re::AssetHandle *)(v702 + 56);
        v700 -= 56;
      }
      while (v700);
      v699 = v893;
    }
    (*(void (**)(uint64_t *, __n128))(*v699 + 40))(v699, v698);
  }
  if (v898[0])
  {
    if (v901)
      (*(void (**)(__n128))(*(_QWORD *)v898[0] + 40))(v698);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v904);
  re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v905);
}

float re::TargetDisplayInfoProvider::{unnamed type#12}::operator()(uint64_t a1)
{
  uint64_t v2;
  float result;
  unsigned __int8 v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  else
  {
    do
      v4 = __ldaxr(re::TargetDisplayInfoProvider::{unnamed type#12}::operator()(void)const::__FILE____LINE___logged);
    while (__stlxr(1u, re::TargetDisplayInfoProvider::{unnamed type#12}::operator()(void)const::__FILE____LINE___logged));
    if ((v4 & 1) == 0)
    {
      v5 = *re::graphicsLogObjects(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "Max EDR factor provider has not been set.", v6, 2u);
      }
    }
    return *(float *)(a1 + 40);
  }
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 80 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 80;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

void re::ecs2::VideoComponentSystem::~VideoComponentSystem(re::ecs2::VideoComponentSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::VideoComponentSystem::typeInfo(re::ecs2::VideoComponentSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VideoComponentSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VideoComponentSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VideoComponentSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VideoComponentSystem>, 0);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

__n128 re::DynamicArray<`anonymous namespace'::ViewInfo>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)a1)
    {
      v15 = 2 * v4;
      v16 = v4 == 0;
      v17 = 8;
      if (!v16)
        v17 = v15;
      if (v17 <= v6)
        v18 = v6;
      else
        v18 = v17;
    }
    else
    {
      ++*(_DWORD *)(a1 + 24);
    }
  }
  v8 = *(_QWORD *)(a1 + 32) + (*(_QWORD *)(a1 + 16) << 7);
  v9 = *(_OWORD *)(a2 + 112);
  v11 = *(_OWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v8 + 112) = v9;
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 80) = v10;
  result = *(__n128 *)a2;
  v13 = *(_OWORD *)(a2 + 16);
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 48) = v14;
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v13;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_QWORD *re::DynamicArray<`anonymous namespace'::ViewInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 7;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], v5[2] << 7);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

__n128 std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *,re::VideoChannelTextureHandles *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __n128 *v7;
  __n128 result;
  unsigned __int16 v9;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (__n128 *)(a3 + v6);
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6), (re::TextureHandle *)(a1 + v6));
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6 + 16), (re::TextureHandle *)(a1 + v6 + 16));
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6 + 32), (re::TextureHandle *)(a1 + v6 + 32));
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6 + 48), (re::TextureHandle *)(a1 + v6 + 48));
      re::TextureHandle::operator=((re::TextureHandle *)(a3 + v6 + 64), (re::TextureHandle *)(a1 + v6 + 64));
      result = *(__n128 *)(a1 + v6 + 80);
      v7[6].n128_u64[0] = *(_QWORD *)(a1 + v6 + 96);
      v7[5] = result;
      v7[6].n128_u64[1] = *(_QWORD *)(a1 + v6 + 104);
      *(_QWORD *)(a1 + v6 + 104) = 0;
      v9 = *(_WORD *)(a1 + v6 + 112);
      v7[7].n128_u8[2] = *(_BYTE *)(a1 + v6 + 114);
      v7[7].n128_u16[0] = v9;
      v6 += 120;
    }
    while (a1 + v6 != a2);
  }
  return result;
}

id re::internal::defaultRetain<re::ecs2::VideoComponentSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VideoComponentSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Slice<re::ecs2::VideoComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoComponent>,re::Slice<re::ecs2::VideoComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::createSubscription<re::ecs2::VideoComponentSystem>(re::ecs2::VideoComponentSystem *,REEventHandlerResult (re::ecs2::VideoComponentSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Slice<re::ecs2::VideoPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::VideoPlayerComponent>,re::Slice<re::ecs2::VideoPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::VideoPlayerComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

_QWORD *re::DynamicArray<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 56 * v9;
        v11 = v8 + 16;
        v12 = v7;
        do
        {
          *(_OWORD *)v12 = *(_OWORD *)(v11 - 16);
          v12[3] = 0;
          v12[4] = 0;
          v12[2] = 0;
          v12[3] = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          v13 = v12[2];
          v12[2] = 0;
          v12[2] = *(_QWORD *)v11;
          *(_QWORD *)v11 = v13;
          v14 = v12[4];
          v12[4] = *(_QWORD *)(v11 + 16);
          *(_QWORD *)(v11 + 16) = v14;
          v15 = *(_QWORD *)(v11 + 24);
          *((_DWORD *)v12 + 12) = *(_DWORD *)(v11 + 32);
          v12[5] = v15;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
          v17 = v16 + 40;
          v11 = v16 + 56;
          v12 += 7;
        }
        while (v17 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  __int128 *v32;
  __int128 *v33;
  unsigned int v34;
  __int128 *v35;
  unsigned int v36;
  __int128 *v37;
  unsigned int v38;
  unsigned int v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  __int128 *v57;
  __int128 *v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  _OWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  __int128 *v72;
  _OWORD *v73;
  uint64_t v74;
  re::AssetHandle *v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  re::AssetHandle *v93;
  int64_t v94;
  int64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD *v164;
  re::AssetHandle *v165;
  uint64_t v166;
  _OWORD *v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 *v180;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  int v192;

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_QWORD *)a1 + 4);
  v5 = *((_QWORD *)a1 + 5);
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v6 = *((_DWORD *)a1 + 12);
  *a1 = *a2;
  *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v7 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 12);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
  *((_DWORD *)a1 + 12) = v8;
  v11 = a2[1];
  v14 = v6;
  *a2 = v2;
  a2[1] = v3;
  v12 = *((_QWORD *)a2 + 4);
  v13 = v5;
  *((_DWORD *)a2 + 12) = v14;
  v9 = v13;
  *((_QWORD *)a2 + 4) = v4;
  *((_QWORD *)a2 + 5) = v9;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v11);
  return result;
}

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  double result;

  v6 = *(unsigned __int8 *)(a2 + 50);
  if (v6 <= *(unsigned __int8 *)(a1 + 50))
  {
    if (*(unsigned __int8 *)(a3 + 50) > v6)
    {
      *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)a2, (__int128 *)a3).n128_u64[0];
      if (*(unsigned __int8 *)(a2 + 50) > *(unsigned __int8 *)(a1 + 50))
        *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)a1, (__int128 *)a2).n128_u64[0];
    }
  }
  else
  {
    *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)a1, (__int128 *)a2).n128_u64[0];
    if (*(unsigned __int8 *)(a3 + 50) > *(unsigned __int8 *)(a2 + 50))
      *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)a2, (__int128 *)a3).n128_u64[0];
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  re::AssetHandle *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;

  v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (*(unsigned __int8 *)(a2 - 6) > *(unsigned __int8 *)(a1 + 50))
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)a1, (__int128 *)(a2 - 56));
      return v4;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a2 - 56);
      return v4;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a1 + 112, a2 - 56);
      return v4;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a1 + 112, a1 + 168);
      if (*(unsigned __int8 *)(a2 - 6) > *(unsigned __int8 *)(a1 + 218))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)(a1 + 168), (__int128 *)(a2 - 56));
        if (*(unsigned __int8 *)(a1 + 218) > *(unsigned __int8 *)(a1 + 162))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)(a1 + 112), (__int128 *)(a1 + 168));
          if (*(unsigned __int8 *)(a1 + 162) > *(unsigned __int8 *)(a1 + 106))
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)(a1 + 56), (__int128 *)(a1 + 112));
            if (*(unsigned __int8 *)(a1 + 106) > *(unsigned __int8 *)(a1 + 50))
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)a1, (__int128 *)(a1 + 56));
          }
        }
      }
      return 1;
    default:
      v5 = a1 + 112;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a1 + 112);
      v6 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v7 = 0;
      v8 = 0;
      v9 = (re::AssetHandle *)&v23;
      break;
  }
  while (*(unsigned __int8 *)(v6 + 50) <= *(unsigned __int8 *)(v5 + 50))
  {
LABEL_15:
    v5 = v6;
    v7 += 56;
    v6 += 56;
    if (v6 == a2)
      return 1;
  }
  v22 = *(_OWORD *)v6;
  v23 = *(_OWORD *)(v6 + 16);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  v10 = *(_QWORD *)(v6 + 40);
  v24 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v6 + 32) = 0;
  v25 = v10;
  v11 = v7;
  v26 = *(_DWORD *)(v6 + 48);
  while (1)
  {
    v12 = a1 + v11;
    v13 = *(_QWORD *)(a1 + v11 + 144);
    v14 = *(_QWORD *)(a1 + v11 + 152);
    *(_QWORD *)(v12 + 144) = *(_QWORD *)(a1 + v11 + 200);
    *(_DWORD *)(v12 + 216) = *(_DWORD *)(a1 + v11 + 160);
    v15 = *(_OWORD *)(a1 + v11 + 128);
    *(_OWORD *)(v12 + 168) = *(_OWORD *)(a1 + v11 + 112);
    v16 = *(_OWORD *)(a1 + v11 + 184);
    *(_OWORD *)(v12 + 184) = v15;
    *(_OWORD *)(v12 + 128) = v16;
    *(_QWORD *)(v12 + 200) = v13;
    *(_QWORD *)(v12 + 208) = v14;
    if (v11 == -112)
      break;
    v11 -= 56;
    if (BYTE2(v26) <= *(unsigned __int8 *)(v12 + 106))
    {
      v17 = a1 + v11 + 168;
      goto LABEL_13;
    }
  }
  v17 = a1;
LABEL_13:
  v18 = *(_OWORD *)(v17 + 16);
  v19 = v23;
  *(_OWORD *)v17 = v22;
  *(_OWORD *)(v17 + 16) = v19;
  v23 = v18;
  v20 = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v17 + 32) = v24;
  v24 = v20;
  *(_QWORD *)(v12 + 152) = v25;
  ++v8;
  *(_DWORD *)(v12 + 160) = v26;
  if (v8 != 8)
  {
    re::AssetHandle::~AssetHandle(v9);
    goto LABEL_15;
  }
  v4 = v6 + 56 == a2;
  re::AssetHandle::~AssetHandle(v9);
  return v4;
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a2, a3);
  if (*(unsigned __int8 *)(a4 + 50) > *(unsigned __int8 *)(a3 + 50))
  {
    *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)a3, (__int128 *)a4).n128_u64[0];
    if (*(unsigned __int8 *)(a3 + 50) > *(unsigned __int8 *)(a2 + 50))
    {
      *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)a2, (__int128 *)a3).n128_u64[0];
      if (*(unsigned __int8 *)(a2 + 50) > *(unsigned __int8 *)(a1 + 50))
        *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)a1, (__int128 *)a2).n128_u64[0];
    }
  }
  return result;
}

void re::HashTable<re::VideoAsset const*,re::ecs2::VideoViewingMode,re::Hash<re::VideoAsset const*>,re::EqualTo<re::VideoAsset const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 16);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::VideoAsset const*,re::ecs2::VideoViewingMode,re::Hash<re::VideoAsset const*>,re::EqualTo<re::VideoAsset const*>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 16) = *(_QWORD *)v13;
            *(_BYTE *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = *(_BYTE *)(v13 + 8);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

__n128 re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  __n128 result;
  __int128 v27;
  __int128 v28;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 80;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoColorInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 80 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + 80 * v9;
  result = *(__n128 *)a5;
  v27 = *(_OWORD *)(a5 + 16);
  v28 = *(_OWORD *)(a5 + 32);
  *(_QWORD *)(v25 + 72) = *(_QWORD *)(a5 + 48);
  *(_OWORD *)(v25 + 56) = v28;
  *(_OWORD *)(v25 + 40) = v27;
  *(__n128 *)(v25 + 24) = result;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void *introspect_REVisibilityMode(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  re::IntrospectionBasic *v18;
  uint64_t v19[2];
  __int128 v20;

  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Always";
      introspect_REVisibilityMode(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "Never";
      qword_255828810 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = 2;
      *(_QWORD *)(v17 + 16) = "VisibleOnRemote";
      qword_255828818 = v17;
    }
  }
  {
    v18 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&introspect_REVisibilityMode(BOOL)::info, "REVisibilityMode", 1, 1, 1, 1);
    *(_QWORD *)v18 = &off_24ED7D9E8;
    *((_QWORD *)v18 + 8) = &introspect_REVisibilityMode(BOOL)::enumTable;
    *((_DWORD *)v18 + 4) = 9;
  }
  if (a1)
  {
    if ((introspect_REVisibilityMode(BOOL)::isInitialized & 1) != 0)
      return &introspect_REVisibilityMode(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    v5 = introspect_REVisibilityMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v20);
    if ((v5 & 1) != 0)
      return &introspect_REVisibilityMode(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((introspect_REVisibilityMode(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &introspect_REVisibilityMode(BOOL)::info;
    }
  }
  introspect_REVisibilityMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&introspect_REVisibilityMode(BOOL)::info, a2);
  v19[0] = 0x94DC8454B42571D0;
  v19[1] = (uint64_t)"REVisibilityMode";
  xmmword_255828848 = v20;
  re::StringID::destroyString((re::StringID *)v19);
  if ((a1 & 1) == 0)
    goto LABEL_9;
  return &introspect_REVisibilityMode(BOOL)::info;
}

_QWORD *re::ecs2::SubdivisionSurfaceSystemComponentStateImpl::SubdivisionSurfaceSystemComponentStateImpl(_QWORD *a1, uint64_t a2)
{
  _QWORD v4[2];
  _QWORD v5[5];

  v5[4] = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24ED6E0D8;
  a1[1] = a2;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[2] = re::ecs2::ComponentImpl<re::ecs2::RenderOptionsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[3] = re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 4;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((_anonymous_namespace_ *)(a1 + 2), (uint64_t)v4);
  return a1;
}

BOOL re::ecs2::SubdivisionSurfaceSystemComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v23[2];
  _QWORD v24[2];
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v25, a5, 0);
  v8 = v25;
  v9 = v26;
  v25 = a4;
  v26 = v8;
  v27 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v26);
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 16) + 176);
      if (*(_QWORD *)(*(_QWORD *)v14 + 240))
        v17 = v16 == 0;
      else
        v17 = 1;
      if (v17 || !re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v16 + 32)))
      {
        v19 = (unint64_t *)(a3 + 32);
      }
      else
      {
        v18 = v15 + 232;
        v24[0] = v18;
        v24[1] = 7;
        if (!re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)v24)
          || (v23[0] = v18,
              v23[1] = 8,
              v19 = (unint64_t *)(a3 + 32),
              !re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)v23)))
        {
          v19 = (unint64_t *)(a3 + 48);
        }
      }
      v20 = v25;
      v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v26);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *v19);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v26);
    }
    while (v26 != a5 || (unsigned __int16)v27 != 0xFFFF || WORD1(v27) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::SubdivisionSurfaceSystemComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  uint64_t v7;
  re::RenderManager *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  __guard *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 isEmpty;
  _BOOL4 v31;
  _BOOL4 v32;
  const re::ecs2::MeshComponent *v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  re::ecs2::TransformHelper *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _OWORD *v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  re::DynamicString **v84;
  re::RenderFrameData *v85;
  uint64_t v86;
  uint64_t (**v87)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BOOL8 v94;
  uint64_t v96;
  uint64_t v97;
  re *v98;
  uint64_t v99;
  re::ecs2::RenderingSubsystem *v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  int v107;
  int v108;
  BOOL v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _OWORD v113[4];
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  __int128 *v118;
  __int128 v119;
  _OWORD v120[2];
  int v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE v124[48];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(re::RenderManager **)(v7 + 112);
  v9 = *((_QWORD *)v8 + 4);
  v10 = *(_QWORD *)(v7 + 144);
  v103 = re::RenderManager::perFrameAllocator(v8);
  v123 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  v121 = 0;
  memset(v120, 0, sizeof(v120));
  v122 = 0x7FFFFFFFLL;
  v104 = a3;
  v11 = *(_QWORD *)(a3 + 8);
  v12 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v11 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayTracedShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v12 && (v13 = *(_QWORD *)(v12 + 24)) != 0)
  {
    v107 = 0;
    v14 = *(_QWORD *)(v12 + 40);
    v15 = 8 * v13;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)v14 + 25))
      {
        v16 = *(_QWORD *)(*(_QWORD *)v14 + 16);
        if (*(_BYTE *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v123, v16))
        {
          v17 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v17 && !*(_BYTE *)(v17 + 27))
          {
            *(_QWORD *)&v126 = *(_QWORD *)(v16 + 296);
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v120, (uint64_t *)&v126);
          }
          else
          {
            v107 = 1;
          }
        }
      }
      v14 += 8;
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    v107 = 0;
  }
  v18 = (unint64_t)&v126;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v126, a5, 0);
  v118 = a4;
  v119 = v126;
  if ((_QWORD)v126 != a5 || WORD4(v126) != 0xFFFFLL || (DWORD2(v126) & 0xFFFF0000) != 0xFFFF0000)
  {
    v19 = 0;
    v112 = v9 + 72;
    v100 = (re::ecs2::RenderingSubsystem *)v11;
    v101 = v9 + 8;
    do
    {
      v21 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v119);
      v22 = *(_QWORD *)v21;
      v23 = *(_QWORD *)(*(_QWORD *)v21 + 16);
      v24 = *(_QWORD *)(v23 + 176);
      v25 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v24 + 32));
      v26 = *(_QWORD *)(v25 + 392);
      v27 = *(_QWORD *)(v25 + 376);
      v28 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v23 + 32), (const re::ecs2::ComponentTypeBase *)v20[347]);
      v108 = v19;
      if (v28)
      {
        v111 = *(_QWORD *)(v28 + 208);
        v27 = *(_QWORD *)(v28 + 192);
      }
      else
      {
        v111 = v26;
      }
      v29 = v22;
      v116 = (void *)(v22 + 232);
      v117 = 7;
      v114 = v22 + 232;
      v115 = 8;
      isEmpty = re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)&v116);
      v31 = re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)&v114);
      *(_QWORD *)&v126 = *(_QWORD *)(v23 + 296);
      v32 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v120, (uint64_t *)&v126);
      v34 = (((v31 || v32) | re::ecs2::MeshComponentHelper::isMappedToOcclusionPass((re::ecs2::MeshComponentHelper *)v24, v33)) ^ 1) & v107;
      v109 = isEmpty;
      if (!isEmpty || (v34 & 1) != 0)
      {
        v38 = *(_QWORD *)(a1 + 8);
        if (v38)
          v39 = *(re::ecs2::TransformHelper **)(v38 + 152);
        else
          v39 = 0;
        re::ecs2::TransformHelper::computeWorldMatrixForRendering(v39, (re::ecs2::TransformComponent **)v23, v113);
        v41 = *(_QWORD *)(v29 + 392);
        v42 = *(_QWORD *)(v41 + 88);
        v43 = *(_QWORD *)(v41 + 96);
        v44 = v27;
        if (v27)
        {
          if (v27 >> 58)
            goto LABEL_90;
          v45 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, (v27 << 6) | 0x1F, 0);
          v44 = v27;
          v46 = (v45 + 31) & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)(v46 - 16) = v27;
          *(_QWORD *)(v46 - 8) = v45;
          v47 = (_OWORD *)(v46 + 32);
          v48 = v27;
          do
          {
            *(v47 - 2) = xmmword_2260E5F10;
            *(v47 - 1) = xmmword_2260E5F20;
            *v47 = xmmword_2260E5F40;
            v47[1] = xmmword_2260E5D70;
            v47 += 4;
            --v48;
          }
          while (v48);
          if ((_DWORD)v27)
          {
            v49 = v34;
            v50 = 0;
            v51 = v112;
            while (v50 != v44)
            {
              v52 = (_OWORD *)re::DataArray<re::MeshInstance>::tryGet(v51, *(_QWORD *)(v111 + 8 * v50));
              v53 = 0;
              v54 = (float32x4_t)v113[0];
              v55 = (float32x4_t)v113[1];
              v56 = (float32x4_t)v113[2];
              v57 = (float32x4_t)v113[3];
              v58 = v52[3];
              v59 = v52[4];
              v60 = v52[5];
              *(_OWORD *)v124 = v52[2];
              *(_OWORD *)&v124[16] = v58;
              *(_OWORD *)&v124[32] = v59;
              v125 = v60;
              do
              {
                *(__int128 *)((char *)&v126 + v53) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v54, COERCE_FLOAT(*(_OWORD *)&v124[v53])), v55, *(float32x2_t *)&v124[v53], 1), v56, *(float32x4_t *)&v124[v53], 2), v57, *(float32x4_t *)&v124[v53], 3);
                v53 += 16;
              }
              while (v53 != 64);
              v61 = v127;
              v62 = v128;
              v63 = v129;
              v64 = (_OWORD *)(v46 + (v50 << 6));
              *v64 = v126;
              v64[1] = v61;
              v64[2] = v62;
              v64[3] = v63;
              ++v50;
              v51 = v112;
              v44 = v27;
              if (v50 == v27)
              {
                v34 = v49;
                goto LABEL_38;
              }
            }
            re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v44, v44);
            _os_crash();
            __break(1u);
LABEL_90:
            re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 64, v44);
            _os_crash();
            __break(1u);
LABEL_91:
            re::internal::assertLog((re::internal *)6, v40, "assertion failure: '%s' (%s:line %i) Size overflow in allocateArray. Element size = %zu, count = %zu", "!overflow", "allocateArray", 61, 24, v44);
            _os_crash();
            __break(1u);
            goto LABEL_92;
          }
        }
        else
        {
          v46 = 0;
        }
LABEL_38:
        if (!v109)
        {
          *(_QWORD *)&v126 = v116;
          *((_QWORD *)&v126 + 1) = v117;
          LOWORD(v127) = 0;
          while (1)
          {
            re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)&v116, (uint64_t)v124);
            if (HIDWORD(v126) == *(_DWORD *)&v124[12] && (unsigned __int16)v127 == *(unsigned __int16 *)&v124[16])
              break;
            v65 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v126);
            v66 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v126);
            if (v42 <= v65)
            {
              re::internal::assertLog((re::internal *)6, v67, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v65, v42);
              _os_crash();
              __break(1u);
LABEL_67:
              re::internal::assertLog((re::internal *)6, v80, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v81, v42);
              _os_crash();
              __break(1u);
LABEL_68:
              v84 = 0;
LABEL_69:
              v85 = (re::RenderFrameData *)(v84 + 33);
              re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v100, 0, v84, v113);
              v114 = *(_QWORD *)&v113[0] >> 1;
              v86 = re::RenderFrameData::stream(v85, (const re::WeakStringID *)&v114);
              v87 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v86, (uint64_t *)&v116);
              if (!v87)
              {
                v96 = *(_QWORD *)(*(_QWORD *)(v86 + 48) + 8);
                v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v96 + 32))(v96, 56, 8);
                *(_QWORD *)v97 = 0;
                *(_QWORD *)(v97 + 8) = 0;
                *(_DWORD *)(v97 + 16) = 1;
                *(_QWORD *)(v97 + 32) = 0;
                *(_QWORD *)(v97 + 40) = 0;
                *(_QWORD *)(v97 + 24) = 0;
                *(_DWORD *)(v97 + 48) = 0;
                v98 = (re *)re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul>::init(v97, v96, 1uLL);
                v99 = re::globalAllocators(v98)[2];
                *(_QWORD *)v124 = &off_24ED6E230;
                *(_QWORD *)&v124[8] = v96;
                *(_QWORD *)&v124[24] = v99;
                *(_QWORD *)&v124[32] = v124;
                *(_QWORD *)&v126 = std::__any_imp::_SmallHandler<re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul> *>::__handle[abi:nn180100];
                *((_QWORD *)&v126 + 1) = v97;
                *((_QWORD *)&v129 + 1) = v99;
                *(_QWORD *)&v130 = 0;
                re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v128, (uint64_t)v124);
                v87 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v86, (uint64_t *)&v116, (re *)&v126);
                if ((_QWORD)v130)
                {
                  v118 = &v126;
                  (*(void (**)(_QWORD, __int128 **))(*(_QWORD *)v130 + 16))(v130, &v118);
                  if ((_QWORD)v130)
                  {
                    (**(void (***)(_QWORD))v130)(v130);
                    if ((__int128 *)v130 != &v128)
                      (*(void (**)(_QWORD))(**((_QWORD **)&v129 + 1) + 40))(*((_QWORD *)&v129 + 1));
                    *(_QWORD *)&v130 = 0;
                  }
                }
                if ((_QWORD)v126)
                  ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD, _QWORD))v126)(0, &v126, 0, 0, 0);
                if (*(_QWORD *)&v124[32])
                {
                  (***(void (****)(_QWORD))&v124[32])(*(_QWORD *)&v124[32]);
                  if (*(_BYTE **)&v124[32] != v124)
                    (*(void (**)(_QWORD))(**(_QWORD **)&v124[24] + 40))(*(_QWORD *)&v124[24]);
                }
              }
              v89 = *v88;
              v90 = *(_QWORD *)(*v88 + 40);
              v42 = *(_QWORD *)(*v88 + 8);
              if (v90 + 1 > 4 * v42)
              {
                re::BucketArray<re::SimplifiedMeshBufferFlagData,4ul>::setBucketsCapacity((_QWORD *)*v88, (v90 + 4) >> 2);
                v42 = *(_QWORD *)(v89 + 8);
              }
              v18 = v90 >> 2;
              if (v42 > v90 >> 2)
              {
                if ((*(_BYTE *)(v89 + 16) & 1) != 0)
                  v91 = v89 + 24;
                else
                  v91 = *(_QWORD *)(v89 + 32);
                v92 = *(_QWORD *)(v91 + 8 * v18);
                v93 = *(_QWORD *)(v89 + 40);
                *(_QWORD *)(v89 + 40) = v93 + 1;
                ++*(_DWORD *)(v89 + 48);
                *(_QWORD *)(v92 + 8 * (v90 & 3)) = &off_24ED6E1C0;
                if (v93 != -1)
                {
                  re::BucketArray<unsigned long,4ul>::operator[](v89, v93);
                  re::StringID::destroyString((re::StringID *)v113);
                  goto LABEL_78;
                }
LABEL_93:
                re::internal::assertLog((re::internal *)4, v93, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
                _os_crash();
                __break(1u);
              }
LABEL_92:
              v118 = 0;
              v129 = 0u;
              v130 = 0u;
              v127 = 0u;
              v128 = 0u;
              v126 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v124 = 136315906;
              *(_QWORD *)&v124[4] = "operator[]";
              *(_WORD *)&v124[12] = 1024;
              *(_DWORD *)&v124[14] = 858;
              *(_WORD *)&v124[18] = 2048;
              *(_QWORD *)&v124[20] = v18;
              *(_WORD *)&v124[28] = 2048;
              *(_QWORD *)&v124[30] = v42;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_93;
            }
            v68 = v43 + 168 * v65;
            ++*(_BYTE *)(v68 + 7);
            *(_QWORD *)(v68 + 80) = v46 + ((unint64_t)v66 << 6);
            re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v126);
          }
          v44 = v27;
        }
        if (v34)
        {
          v102 = v34;
          if (v44)
          {
            if (!is_mul_ok(v44, 0x18uLL) || 24 * v44 >= 0xFFFFFFFFFFFFFFF0)
              goto LABEL_91;
            v69 = v44;
            v70 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, (24 * v44 + 16) | 7, 0);
            v71 = (_QWORD *)((v70 + 23) & 0xFFFFFFFFFFFFFFF8);
            *(v71 - 2) = v69;
            *(v71 - 1) = v70;
            v110 = v69;
            bzero(v71, 24 * v69);
            v72 = 0;
            v73 = 1;
            do
            {
              v74 = re::DataArray<re::MeshInstance>::tryGet(v112, *(_QWORD *)(v111 + 8 * v72));
              v75 = re::DataArray<re::MeshModel>::tryGet(v101, *(_QWORD *)(v74 + 16));
              v76 = &v71[3 * v72];
              *v76 = v46 + (v72 << 6);
              v76[1] = *(_QWORD *)(v74 + 16);
              v76[2] = *(_QWORD *)(v75 + 56);
              v72 = v73;
            }
            while (v110 > v73++);
          }
          else
          {
            v71 = 0;
          }
          *(_QWORD *)&v126 = v114;
          *((_QWORD *)&v126 + 1) = v115;
          LOWORD(v127) = 0;
          while (1)
          {
            re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)&v114, (uint64_t)v124);
            if (HIDWORD(v126) == *(_DWORD *)&v124[12] && (unsigned __int16)v127 == *(unsigned __int16 *)&v124[16])
              break;
            v78 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v126);
            v79 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v126);
            v81 = v78;
            if (v42 <= v78)
              goto LABEL_67;
            v82 = v43 + 168 * v78;
            ++*(_BYTE *)(v82 + 8);
            *(_QWORD *)(v82 + 88) = &v71[3 * v79];
            re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v126);
          }
          v34 = v102;
        }
        v37 = v108;
      }
      else
      {
        v35 = (unint64_t)v118;
        v36 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v119);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(v104 + 16), v35, v36, *(_QWORD *)(v104 + 32));
        v37 = v108;
      }
      v19 = v37 | v34;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v119);
    }
    while ((_QWORD)v119 != a5 || WORD4(v119) != 0xFFFF || WORD5(v119) != 0xFFFF);
    if ((v19 & 1) != 0)
    {
      v83 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 104);
      if (!v83)
        goto LABEL_68;
      v84 = (re::DynamicString **)re::RenderFrameBox::get(v83 + 344, 0xFFFFFFFFFFFFFFFuLL);
      goto LABEL_69;
    }
  }
LABEL_78:
  v94 = *(_DWORD *)(a5 + 40) != 0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v120);
  return v94;
}

