void re::IntrospectionDynamicArray<re::Matrix4x4<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::Matrix4x4<float>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::Matrix4x4<float>>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::Matrix4x4<float>>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::Matrix4x4<float>>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::Matrix4x4<float>>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::Matrix4x4<float>>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::Matrix4x4<float>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  _OWORD v10[4];

  memset(v10, 0, sizeof(v10));
  re::DynamicArray<re::Matrix4x4<float>>::add(this, (uint64_t)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + (*((_QWORD *)this + 2) << 6) - 64);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::Matrix4x4<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::Matrix4x4<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 6);
}

void re::DynamicArray<re::Matrix4x4<float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = (void *)(*(_QWORD *)(a1 + 32) + (v4 << 6));
      v6 = (a2 << 6) - (v4 << 6);
      if (v6 >= 1)
        bzero(v5, ((((unint64_t)v6 >> 6) - ((unint64_t)v6 > 0x3F)) << 6) + 64);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[8];
  uint64_t v16;

  v9 = *(_QWORD *)a2;
  if (*(re::Allocator **)a2 == a4)
  {
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    if (v9)
    {
      if (*(_QWORD *)(a2 + 32))
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      ++*(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)a2 = a4;
    re::DynamicArray<re::Matrix4x4<float>>::setCapacity((_QWORD *)a2, a5);
  }
  ++*(_DWORD *)(a2 + 24);
  re::DynamicArray<re::Matrix4x4<float>>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v16);
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
    {
      v12 = *(char **)(a2 + 32);
      v13 = v11 << 6;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v14, v12, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v14, (void **)v12, a4, 0);
        v12 += 64;
        v13 -= 64;
      }
      while (v13);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 6);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + ((uint64_t)v3 << 6);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Matrix4x4<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<re::Quaternion<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::Quaternion<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::Quaternion<float>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::Quaternion<float>>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::Quaternion<float>>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::Quaternion<float>>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::Quaternion<float>>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::Quaternion<float>>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::Quaternion<float>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  __int128 v10;

  v10 = xmmword_2260E5D70;
  re::DynamicArray<re::Vector3<float>>::add(this, (__n128 *)&v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 16 * *((_QWORD *)this + 2) - 16);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::Quaternion<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::Quaternion<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

void re::DynamicArray<re::Quaternion<float>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = (void *)(*(_QWORD *)(a1 + 32) + 16 * v4);
      v6 = 16 * a2 - 16 * v4;
      if (v6 >= 1)
        memset_pattern16(v5, &xmmword_2260E5D70, 16 * (((unint64_t)v6 >> 4) - ((unint64_t)v6 > 0xF)) + 16);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[8];
  uint64_t v16;

  v9 = *(_QWORD *)a2;
  if (*(re::Allocator **)a2 == a4)
  {
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    if (v9)
    {
      if (*(_QWORD *)(a2 + 32))
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      ++*(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)a2 = a4;
    re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)a2, a5);
  }
  ++*(_DWORD *)(a2 + 24);
  re::DynamicArray<re::Quaternion<float>>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v16);
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
    {
      v12 = *(char **)(a2 + 32);
      v13 = 16 * v11;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v14, v12, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v14, (void **)v12, a4, 0);
        v12 += 16;
        v13 -= 16;
      }
      while (v13);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 16 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Quaternion<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<re::Vector2<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::Vector2<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::Vector2<float>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::Vector2<float>>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::Vector2<float>>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::Vector2<float>>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<unsigned long>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::Vector2<float>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  re::DynamicArray<unsigned long>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 8 * *((_QWORD *)this + 2) - 8);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::Vector2<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::Vector2<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<unsigned long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 8 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector2<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginListType((uint64_t)v12, a2, 1, 0x28uLL, 8uLL, &v11);
    re::TypeBuilder::setConstructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
    re::TypeBuilder::setDestructor((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
    re::TypeBuilder::setListUsesContiguousStorage((uint64_t)v12, 1);
    re::TypeBuilder::setListAccessors((uint64_t)v12, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIndexer((uint64_t)v12, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
    re::TypeBuilder::setListIterator((uint64_t)v12, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionDynamicArray<re::Vector3<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::Vector3<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::Vector3<float>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::Vector3<float>>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::Vector3<float>>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::Quaternion<float>>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::Vector3<float>>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::Vector3<float>>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::Vector3<float>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  __n128 v10;

  v10 = 0u;
  re::DynamicArray<re::Vector3<float>>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 16 * *((_QWORD *)this + 2) - 16);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::Vector3<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::Vector3<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  char v4;

  re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()((uint64_t)&v4, a1, a2, a3, a4);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, re::Allocator *a4, unint64_t a5)
{
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[8];
  uint64_t v16;

  v9 = *(_QWORD *)a2;
  if (*(re::Allocator **)a2 == a4)
  {
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    if (v9)
    {
      if (*(_QWORD *)(a2 + 32))
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      ++*(_DWORD *)(a2 + 24);
    }
    *(_QWORD *)a2 = a4;
    re::DynamicArray<re::Quaternion<float>>::setCapacity((_QWORD *)a2, a5);
  }
  ++*(_DWORD *)(a2 + 24);
  re::DynamicArray<re::Vector3<float>>::resize(a2, a5);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v16);
    v11 = *(_QWORD *)(a2 + 16);
    if (v11)
    {
      v12 = *(char **)(a2 + 32);
      v13 = 16 * v11;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v14, v12, a4, 0);
        re::TypeInfo::construct((re::TypeInfo *)v14, (void **)v12, a4, 0);
        v12 += 16;
        v13 -= 16;
      }
      while (v13);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 16 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Vector3<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void *re::introspect_FillMode(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  uint64_t v19;
  re::IntrospectionBasic *v20;
  uint64_t v21[2];
  __int128 v22;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "FillNone";
      re::introspect_FillMode(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "FillForwards";
      qword_255827060 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "FillBackwards";
      qword_255827068 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 3;
      *(_QWORD *)(v19 + 16) = "FillBoth";
      qword_255827070 = v19;
    }
  }
  {
    v20 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_FillMode(BOOL)::info, "FillMode", 1, 1, 1, 1);
    *(_QWORD *)v20 = &off_24ED7D9E8;
    *((_QWORD *)v20 + 8) = &re::introspect_FillMode(BOOL)::enumTable;
    *((_DWORD *)v20 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_FillMode(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_FillMode(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    v5 = re::introspect_FillMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    if ((v5 & 1) != 0)
      return &re::introspect_FillMode(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_FillMode(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_FillMode(BOOL)::info;
    }
  }
  re::introspect_FillMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_FillMode(BOOL)::info, a2);
  v21[0] = 0x3ADB0C51BCCLL;
  v21[1] = (uint64_t)"FillMode";
  xmmword_2558270A0 = v22;
  re::StringID::destroyString((re::StringID *)v21);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_FillMode(BOOL)::info;
}

void re::internal::registerEnumType<re::FillMode>(re::TypeRegistry *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  StringID v31;
  _QWORD v32[2];
  _QWORD v33[61];

  v33[0] = 6104748;
  v33[1] = "char";
  v8 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, v33);
  if (!v8)
  {
    re::StringID::destroyString((re::StringID *)v33);
    goto LABEL_29;
  }
  v9 = *v8;
  re::StringID::destroyString((re::StringID *)v33);
  if (!a1)
  {
LABEL_29:
    re::internal::assertLog((re::internal *)5, v11, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, a3[1]);
    _os_crash();
    __break(1u);
    return;
  }
  v12 = *(unsigned int **)(a2 + 64);
  v32[0] = a1;
  v32[1] = v9;
  re::TypeBuilder::beginEnumType((uint64_t)v33, a3, 1, 1, (uint64_t)v32);
  v13 = *v12;
  if ((_DWORD)v13)
  {
    for (i = 0; i < v13; ++i)
    {
      v15 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8 * i);
      if (*(_DWORD *)v15 == 1)
      {
        v16 = *(char **)(v15 + 16);
        if (v16)
        {
          v17 = *v16;
          if (*v16)
          {
            v18 = v16[1];
            if (v18)
            {
              v19 = (unsigned __int8 *)(v16 + 2);
              do
              {
                v17 = 31 * v17 + v18;
                v20 = *v19++;
                v18 = v20;
              }
              while (v20);
            }
          }
        }
        else
        {
          v17 = 0;
        }
        v21 = *(_QWORD *)(v15 + 8);
        *(_QWORD *)&v31.var0 = 2 * v17;
        v31.var1 = v16;
        re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v33, v21, &v31);
        re::StringID::destroyString((re::StringID *)&v31);
        v13 = *v12;
      }
    }
    if (v13)
    {
      for (j = 0; j < v13; ++j)
      {
        v23 = *(_QWORD *)(*((_QWORD *)v12 + 1) + 8 * j);
        if (*(_DWORD *)v23 == 2)
        {
          v24 = *(char **)(v23 + 16);
          if (v24)
          {
            v25 = *v24;
            if (*v24)
            {
              v26 = v24[1];
              if (v26)
              {
                v27 = (unsigned __int8 *)(v24 + 2);
                do
                {
                  v25 = 31 * v25 + v26;
                  v28 = *v27++;
                  v26 = v28;
                }
                while (v28);
              }
            }
          }
          else
          {
            v25 = 0;
          }
          v29 = *(_QWORD *)(v23 + 8);
          *(_QWORD *)&v31.var0 = 2 * v25;
          v31.var1 = v24;
          re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v33, v29, &v31);
          re::StringID::destroyString((re::StringID *)&v31);
          v13 = *v12;
        }
      }
    }
  }
  re::TypeBuilder::commitTo((re::TypeBuilder *)v33, a1, a4);
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v33, v30);
}

void *re::introspect_LoopBehavior(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  uint64_t v19;
  re::IntrospectionBasic *v20;
  uint64_t v21[2];
  __int128 v22;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Constant";
      re::introspect_LoopBehavior(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "Repeat";
      qword_2558270E0 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "RepeatCumulative";
      qword_2558270E8 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 3;
      *(_QWORD *)(v19 + 16) = "AutoReverse";
      qword_2558270F0 = v19;
    }
  }
  {
    v20 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::introspect_LoopBehavior(BOOL)::info, "LoopBehavior", 1, 1, 1, 1);
    *(_QWORD *)v20 = &off_24ED7D9E8;
    *((_QWORD *)v20 + 8) = &re::introspect_LoopBehavior(BOOL)::enumTable;
    *((_DWORD *)v20 + 4) = 9;
  }
  if (v2)
  {
    if ((re::introspect_LoopBehavior(BOOL)::isInitialized & 1) != 0)
      return &re::introspect_LoopBehavior(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    v5 = re::introspect_LoopBehavior(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    if ((v5 & 1) != 0)
      return &re::introspect_LoopBehavior(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::introspect_LoopBehavior(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::introspect_LoopBehavior(BOOL)::info;
    }
  }
  re::introspect_LoopBehavior(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::introspect_LoopBehavior(BOOL)::info, a2);
  v21[0] = 0x3834E1F9FF309A6CLL;
  v21[1] = (uint64_t)"LoopBehavior";
  xmmword_255827120 = v22;
  re::StringID::destroyString((re::StringID *)v21);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::introspect_LoopBehavior(BOOL)::info;
}

uint64_t *re::introspect_TimelineType(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  re *v49;
  uint64_t *v50;
  re *v51;
  uint64_t *v52;
  re *v53;
  uint64_t *v54;
  re *v55;
  uint64_t *v56;
  re *v57;
  uint64_t *v58;
  re *v59;
  uint64_t *v60;
  re *v61;
  uint64_t *v62;
  re *v63;
  uint64_t *v64;
  re *v65;
  uint64_t *v66;
  re *v67;
  uint64_t *v68;
  re *v69;
  uint64_t *v70;
  re *v71;
  uint64_t *v72;
  re *v73;
  uint64_t *v74;
  re *v75;
  uint64_t *v76;
  re *v77;
  uint64_t *v78;
  re *v79;
  uint64_t *v80;
  re *v81;
  uint64_t *v82;
  re *v83;
  uint64_t *v84;
  re *v85;
  uint64_t *v86;
  re *v87;
  uint64_t *v88;
  re *v89;
  uint64_t *v90;
  re *v91;
  uint64_t *v92;
  re *v93;
  uint64_t *v94;
  re *v95;
  uint64_t *v96;
  re *v97;
  uint64_t *v98;
  re *v99;
  uint64_t *v100;
  re *v101;
  uint64_t *v102;
  re *v103;
  uint64_t *v104;
  re *v105;
  uint64_t *v106;
  re *v107;
  uint64_t *v108;
  re *v109;
  uint64_t *v110;
  re *v111;
  uint64_t *v112;
  re *v113;
  uint64_t *v114;
  re *v115;
  uint64_t *v116;
  re *v117;
  uint64_t *v118;
  re *v119;
  uint64_t *v120;
  re *v121;
  uint64_t *v122;
  re *v123;
  uint64_t *v124;
  re *v125;
  uint64_t *v126;
  re *v127;
  uint64_t *v128;
  re *v129;
  uint64_t *v130;
  re *v131;
  uint64_t *v132;
  re *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  StringID v139;
  _QWORD v140[2];
  _QWORD v141[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_2540FAEA8);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_2540FAEA8);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 1;
      *((_QWORD *)v35 + 2) = "TimelineClip";
      qword_2540FAF00 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 2;
      *((_QWORD *)v37 + 2) = "TimelineGroup";
      qword_2540FAF08 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 3;
      *((_QWORD *)v39 + 2) = "FloatAnimationClip";
      qword_2540FAF10 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 4;
      *((_QWORD *)v41 + 2) = "DoubleAnimationClip";
      qword_2540FAF18 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 5;
      *((_QWORD *)v43 + 2) = "Vector2FAnimationClip";
      qword_2540FAF20 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 6;
      *((_QWORD *)v45 + 2) = "Vector3FAnimationClip";
      qword_2540FAF28 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 7;
      *((_QWORD *)v47 + 2) = "Vector4FAnimationClip";
      qword_2540FAF30 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *((_QWORD *)v49 + 1) = 8;
      *((_QWORD *)v49 + 2) = "QuaternionFAnimationClip";
      qword_2540FAF38 = (uint64_t)v49;
      v50 = re::introspectionAllocator(v49);
      v51 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 24, 8);
      *(_DWORD *)v51 = 1;
      *((_QWORD *)v51 + 1) = 9;
      *((_QWORD *)v51 + 2) = "SRTAnimationClip";
      qword_2540FAF40 = (uint64_t)v51;
      v52 = re::introspectionAllocator(v51);
      v53 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 24, 8);
      *(_DWORD *)v53 = 1;
      *((_QWORD *)v53 + 1) = 10;
      *((_QWORD *)v53 + 2) = "SkeletalPoseAnimationClip";
      qword_2540FAF48 = (uint64_t)v53;
      v54 = re::introspectionAllocator(v53);
      v55 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 24, 8);
      *(_DWORD *)v55 = 1;
      *((_QWORD *)v55 + 1) = 11;
      *((_QWORD *)v55 + 2) = "FloatAnimation";
      qword_2540FAF50 = (uint64_t)v55;
      v56 = re::introspectionAllocator(v55);
      v57 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 24, 8);
      *(_DWORD *)v57 = 1;
      *((_QWORD *)v57 + 1) = 12;
      *((_QWORD *)v57 + 2) = "DoubleAnimation";
      qword_2540FAF58 = (uint64_t)v57;
      v58 = re::introspectionAllocator(v57);
      v59 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 24, 8);
      *(_DWORD *)v59 = 1;
      *((_QWORD *)v59 + 1) = 13;
      *((_QWORD *)v59 + 2) = "Vector2FAnimation";
      qword_2540FAF60 = (uint64_t)v59;
      v60 = re::introspectionAllocator(v59);
      v61 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 24, 8);
      *(_DWORD *)v61 = 1;
      *((_QWORD *)v61 + 1) = 14;
      *((_QWORD *)v61 + 2) = "Vector3FAnimation";
      qword_2540FAF68 = (uint64_t)v61;
      v62 = re::introspectionAllocator(v61);
      v63 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 24, 8);
      *(_DWORD *)v63 = 1;
      *((_QWORD *)v63 + 1) = 15;
      *((_QWORD *)v63 + 2) = "Vector4FAnimation";
      qword_2540FAF70 = (uint64_t)v63;
      v64 = re::introspectionAllocator(v63);
      v65 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 24, 8);
      *(_DWORD *)v65 = 1;
      *((_QWORD *)v65 + 1) = 16;
      *((_QWORD *)v65 + 2) = "QuaternionFAnimation";
      qword_2540FAF78 = (uint64_t)v65;
      v66 = re::introspectionAllocator(v65);
      v67 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v66 + 32))(v66, 24, 8);
      *(_DWORD *)v67 = 1;
      *((_QWORD *)v67 + 1) = 17;
      *((_QWORD *)v67 + 2) = "SRTAnimation";
      qword_2540FAF80 = (uint64_t)v67;
      v68 = re::introspectionAllocator(v67);
      v69 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v68 + 32))(v68, 24, 8);
      *(_DWORD *)v69 = 1;
      *((_QWORD *)v69 + 1) = 18;
      *((_QWORD *)v69 + 2) = "SkeletalPoseAnimation";
      qword_2540FAF88 = (uint64_t)v69;
      v70 = re::introspectionAllocator(v69);
      v71 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v70 + 32))(v70, 24, 8);
      *(_DWORD *)v71 = 1;
      *((_QWORD *)v71 + 1) = 19;
      *((_QWORD *)v71 + 2) = "FloatKeyframeAnimation";
      qword_2540FAF90 = (uint64_t)v71;
      v72 = re::introspectionAllocator(v71);
      v73 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v72 + 32))(v72, 24, 8);
      *(_DWORD *)v73 = 1;
      *((_QWORD *)v73 + 1) = 20;
      *((_QWORD *)v73 + 2) = "DoubleKeyframeAnimation";
      qword_2540FAF98 = (uint64_t)v73;
      v74 = re::introspectionAllocator(v73);
      v75 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v74 + 32))(v74, 24, 8);
      *(_DWORD *)v75 = 1;
      *((_QWORD *)v75 + 1) = 21;
      *((_QWORD *)v75 + 2) = "Vector2FKeyframeAnimation";
      qword_2540FAFA0 = (uint64_t)v75;
      v76 = re::introspectionAllocator(v75);
      v77 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v76 + 32))(v76, 24, 8);
      *(_DWORD *)v77 = 1;
      *((_QWORD *)v77 + 1) = 22;
      *((_QWORD *)v77 + 2) = "Vector3FKeyframeAnimation";
      qword_2540FAFA8 = (uint64_t)v77;
      v78 = re::introspectionAllocator(v77);
      v79 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v78 + 32))(v78, 24, 8);
      *(_DWORD *)v79 = 1;
      *((_QWORD *)v79 + 1) = 23;
      *((_QWORD *)v79 + 2) = "Vector4FKeyframeAnimation";
      qword_2540FAFB0 = (uint64_t)v79;
      v80 = re::introspectionAllocator(v79);
      v81 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v80 + 32))(v80, 24, 8);
      *(_DWORD *)v81 = 1;
      *((_QWORD *)v81 + 1) = 24;
      *((_QWORD *)v81 + 2) = "QuaternionFKeyframeAnimation";
      qword_2540FAFB8 = (uint64_t)v81;
      v82 = re::introspectionAllocator(v81);
      v83 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v82 + 32))(v82, 24, 8);
      *(_DWORD *)v83 = 1;
      *((_QWORD *)v83 + 1) = 25;
      *((_QWORD *)v83 + 2) = "SRTKeyframeAnimation";
      qword_2540FAFC0 = (uint64_t)v83;
      v84 = re::introspectionAllocator(v83);
      v85 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v84 + 32))(v84, 24, 8);
      *(_DWORD *)v85 = 1;
      *((_QWORD *)v85 + 1) = 26;
      *((_QWORD *)v85 + 2) = "SkeletalPoseKeyframeAnimation";
      qword_2540FAFC8 = (uint64_t)v85;
      v86 = re::introspectionAllocator(v85);
      v87 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v86 + 32))(v86, 24, 8);
      *(_DWORD *)v87 = 1;
      *((_QWORD *)v87 + 1) = 27;
      *((_QWORD *)v87 + 2) = "FloatSampledAnimation";
      qword_2540FAFD0 = (uint64_t)v87;
      v88 = re::introspectionAllocator(v87);
      v89 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v88 + 32))(v88, 24, 8);
      *(_DWORD *)v89 = 1;
      *((_QWORD *)v89 + 1) = 28;
      *((_QWORD *)v89 + 2) = "DoubleSampledAnimation";
      qword_2540FAFD8 = (uint64_t)v89;
      v90 = re::introspectionAllocator(v89);
      v91 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v90 + 32))(v90, 24, 8);
      *(_DWORD *)v91 = 1;
      *((_QWORD *)v91 + 1) = 29;
      *((_QWORD *)v91 + 2) = "Vector2FSampledAnimation";
      qword_2540FAFE0 = (uint64_t)v91;
      v92 = re::introspectionAllocator(v91);
      v93 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v92 + 32))(v92, 24, 8);
      *(_DWORD *)v93 = 1;
      *((_QWORD *)v93 + 1) = 30;
      *((_QWORD *)v93 + 2) = "Vector3FSampledAnimation";
      qword_2540FAFE8 = (uint64_t)v93;
      v94 = re::introspectionAllocator(v93);
      v95 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v94 + 32))(v94, 24, 8);
      *(_DWORD *)v95 = 1;
      *((_QWORD *)v95 + 1) = 31;
      *((_QWORD *)v95 + 2) = "Vector4FSampledAnimation";
      qword_2540FAFF0 = (uint64_t)v95;
      v96 = re::introspectionAllocator(v95);
      v97 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v96 + 32))(v96, 24, 8);
      *(_DWORD *)v97 = 1;
      *((_QWORD *)v97 + 1) = 32;
      *((_QWORD *)v97 + 2) = "QuaternionFSampledAnimation";
      qword_2540FAFF8 = (uint64_t)v97;
      v98 = re::introspectionAllocator(v97);
      v99 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v98 + 32))(v98, 24, 8);
      *(_DWORD *)v99 = 1;
      *((_QWORD *)v99 + 1) = 33;
      *((_QWORD *)v99 + 2) = "SRTSampledAnimation";
      qword_2540FB000 = (uint64_t)v99;
      v100 = re::introspectionAllocator(v99);
      v101 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v100 + 32))(v100, 24, 8);
      *(_DWORD *)v101 = 1;
      *((_QWORD *)v101 + 1) = 34;
      *((_QWORD *)v101 + 2) = "SkeletalPoseSampledAnimation";
      qword_2540FB008 = (uint64_t)v101;
      v102 = re::introspectionAllocator(v101);
      v103 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v102 + 32))(v102, 24, 8);
      *(_DWORD *)v103 = 1;
      *((_QWORD *)v103 + 1) = 35;
      *((_QWORD *)v103 + 2) = "SkeletalAnimation";
      qword_2540FB010 = (uint64_t)v103;
      v104 = re::introspectionAllocator(v103);
      v105 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v104 + 32))(v104, 24, 8);
      *(_DWORD *)v105 = 1;
      *((_QWORD *)v105 + 1) = 36;
      *((_QWORD *)v105 + 2) = "TransformAnimation";
      qword_2540FB018 = (uint64_t)v105;
      v106 = re::introspectionAllocator(v105);
      v107 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v106 + 32))(v106, 24, 8);
      *(_DWORD *)v107 = 1;
      *((_QWORD *)v107 + 1) = 37;
      *((_QWORD *)v107 + 2) = "OrbitAnimation";
      qword_2540FB020 = (uint64_t)v107;
      v108 = re::introspectionAllocator(v107);
      v109 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v108 + 32))(v108, 24, 8);
      *(_DWORD *)v109 = 1;
      *((_QWORD *)v109 + 1) = 38;
      *((_QWORD *)v109 + 2) = "AudioAnimationTimeline";
      qword_2540FB028 = (uint64_t)v109;
      v110 = re::introspectionAllocator(v109);
      v111 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v110 + 32))(v110, 24, 8);
      *(_DWORD *)v111 = 1;
      *((_QWORD *)v111 + 1) = 39;
      *((_QWORD *)v111 + 2) = "FloatAnimationBlendTree";
      qword_2540FB030 = (uint64_t)v111;
      v112 = re::introspectionAllocator(v111);
      v113 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v112 + 32))(v112, 24, 8);
      *(_DWORD *)v113 = 1;
      *((_QWORD *)v113 + 1) = 40;
      *((_QWORD *)v113 + 2) = "DoubleAnimationBlendTree";
      qword_2540FB038 = (uint64_t)v113;
      v114 = re::introspectionAllocator(v113);
      v115 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v114 + 32))(v114, 24, 8);
      *(_DWORD *)v115 = 1;
      *((_QWORD *)v115 + 1) = 41;
      *((_QWORD *)v115 + 2) = "Vector2FAnimationBlendTree";
      qword_2540FB040 = (uint64_t)v115;
      v116 = re::introspectionAllocator(v115);
      v117 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v116 + 32))(v116, 24, 8);
      *(_DWORD *)v117 = 1;
      *((_QWORD *)v117 + 1) = 42;
      *((_QWORD *)v117 + 2) = "Vector3FAnimationBlendTree";
      qword_2540FB048 = (uint64_t)v117;
      v118 = re::introspectionAllocator(v117);
      v119 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v118 + 32))(v118, 24, 8);
      *(_DWORD *)v119 = 1;
      *((_QWORD *)v119 + 1) = 43;
      *((_QWORD *)v119 + 2) = "Vector4FAnimationBlendTree";
      qword_2540FB050 = (uint64_t)v119;
      v120 = re::introspectionAllocator(v119);
      v121 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v120 + 32))(v120, 24, 8);
      *(_DWORD *)v121 = 1;
      *((_QWORD *)v121 + 1) = 44;
      *((_QWORD *)v121 + 2) = "QuaternionFAnimationBlendTree";
      qword_2540FB058 = (uint64_t)v121;
      v122 = re::introspectionAllocator(v121);
      v123 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v122 + 32))(v122, 24, 8);
      *(_DWORD *)v123 = 1;
      *((_QWORD *)v123 + 1) = 45;
      *((_QWORD *)v123 + 2) = "SRTAnimationBlendTree";
      qword_2540FB060 = (uint64_t)v123;
      v124 = re::introspectionAllocator(v123);
      v125 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v124 + 32))(v124, 24, 8);
      *(_DWORD *)v125 = 1;
      *((_QWORD *)v125 + 1) = 46;
      *((_QWORD *)v125 + 2) = "SkeletalPoseAnimationBlendTree";
      qword_2540FB068 = (uint64_t)v125;
      v126 = re::introspectionAllocator(v125);
      v127 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v126 + 32))(v126, 24, 8);
      *(_DWORD *)v127 = 1;
      *((_QWORD *)v127 + 1) = 48;
      *((_QWORD *)v127 + 2) = "EventTimeline";
      qword_2540FB070 = (uint64_t)v127;
      v128 = re::introspectionAllocator(v127);
      v129 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v128 + 32))(v128, 24, 8);
      *(_DWORD *)v129 = 1;
      *((_QWORD *)v129 + 1) = 50;
      *((_QWORD *)v129 + 2) = "BlendShapeWeightsAnimation";
      qword_2540FB078 = (uint64_t)v129;
      v130 = re::introspectionAllocator(v129);
      v131 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v130 + 32))(v130, 24, 8);
      *(_DWORD *)v131 = 1;
      *((_QWORD *)v131 + 1) = 59;
      *((_QWORD *)v131 + 2) = "BlendShapeWeightsSampledAnimation";
      qword_2540FB080 = (uint64_t)v131;
      v132 = re::introspectionAllocator(v131);
      v133 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v132 + 32))(v132, 24, 8);
      *(_DWORD *)v133 = 1;
      *((_QWORD *)v133 + 1) = 60;
      *((_QWORD *)v133 + 2) = "BlendShapeWeightsAnimationClip";
      qword_2540FB088 = (uint64_t)v133;
      v134 = re::introspectionAllocator(v133);
      v135 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v134 + 32))(v134, 24, 8);
      *(_DWORD *)v135 = 1;
      *(_QWORD *)(v135 + 8) = 61;
      *(_QWORD *)(v135 + 16) = "BlendShapeWeightsKeyframeAnimation";
      qword_2540FB090 = v135;
      __cxa_guard_release(&qword_2540FAEA8);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2540FAEB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2540FAEB0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2540FAEB8, "TimelineType", 4, 4, 1, 1);
    qword_2540FAEB8 = (uint64_t)&off_24ED7D9E8;
    qword_2540FAEF8 = (uint64_t)&re::introspect_TimelineType(BOOL)::enumTable;
    dword_2540FAEC8 = 9;
    __cxa_guard_release(&qword_2540FAEB0);
  }
  if (v2)
  {
    if ((_MergedGlobals_28 & 1) != 0)
      return &qword_2540FAEB8;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v141);
    v5 = _MergedGlobals_28;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v141);
    if ((v5 & 1) != 0)
      return &qword_2540FAEB8;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((_MergedGlobals_28 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_2540FAEB8;
    }
  }
  _MergedGlobals_28 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2540FAEB8, a2);
  v137 = 0x3DB5CF76C26C4676;
  v138 = "TimelineType";
  v141[0] = 208862;
  v141[1] = "int";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v141);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v141);
    v11 = (unsigned int *)qword_2540FAEF8;
    v140[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v141, &v137, 1, 1, (uint64_t)v140);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v139.var0 = 2 * v17;
          v139.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v141, v21, &v139);
          re::StringID::destroyString((re::StringID *)&v139);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v139.var0 = 2 * v25;
            v139.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v141, v29, &v139);
            re::StringID::destroyString((re::StringID *)&v139);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v141, v30);
    xmmword_2540FAED8 = (__int128)v139;
    re::StringID::destroyString((re::StringID *)&v137);
    if ((v2 & 1) != 0)
      return &qword_2540FAEB8;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v141);
  re::internal::assertLog((re::internal *)5, v136, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "TimelineType", v137, v138);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

float re::calculateNodeSRT@<S0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  int v4;
  float32x4_t v7;
  float result;
  int8x16_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v4 = a1[5].u8[0];
  v20 = xmmword_2260E5D70;
  re::convertIntrinsicEulersToQuaternions<float>((uint64_t)&a1[2], 1, v4, (uint64_t)&v20, 1);
  _Q1 = a1[1];
  _Q3 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(_Q1)), (float32x4_t)v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL));
  v7 = vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q3, (int32x4_t)_Q3), _Q3, 0xCuLL), (float32x4_t)v20, _Q1, 3);
  _Q3.i32[0] = HIDWORD(v20);
  _Q2 = vmlaq_laneq_f32(v7, _Q1, (float32x4_t)v20, 3);
  __asm { FMLA            S0, S3, V1.S[3] }
  _Q5 = a1[3];
  v15 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q5, (int32x4_t)_Q5), (int8x16_t)_Q5, 0xCuLL), vnegq_f32(_Q2)), _Q5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL));
  v16 = vmlaq_laneq_f32(vmlaq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), v15, 0xCuLL), _Q5, result), _Q2, _Q5, 3);
  __asm { FMLA            S2, S0, V5.S[3] }
  v16.i32[3] = _Q2.i32[0];
  v17 = a1[4].i64[1];
  v18 = a1->i64[0];
  v19 = a1->i64[1];
  a2->i64[0] = a1[4].i64[0];
  a2->i64[1] = v17;
  a2[1] = v16;
  a2[2].i64[0] = v18;
  a2[2].i64[1] = v19;
  return result;
}

_QWORD *re::DynamicArray<unsigned long>::copy(_QWORD *this, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  if (!a4)
    return this;
  v5 = a2;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v12 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(_QWORD *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_12;
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 8 * a2), __src, 8 * a4);
  }
  else
  {
    re::DynamicArray<unsigned long>::growCapacity(this, a2 + a4);
    v10 = v6[2] - v5;
    v11 = &__src[8 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 8 * v5), __src, 8 * v10);
      v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 8 * v5), v11, &__src[8 * v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_QWORD *re::DynamicArray<float>::copy(_QWORD *this, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  if (!a4)
    return this;
  v5 = a2;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v12 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(_QWORD *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  v4 = a4;
  v8 = a2 + a4;
  if (__CFADD__(a2, a4))
    goto LABEL_12;
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + 4 * a2), __src, 4 * a4);
  }
  else
  {
    re::DynamicArray<float>::growCapacity(this, a2 + a4);
    v10 = v6[2] - v5;
    v11 = &__src[4 * v10];
    if (v10)
    {
      memmove((void *)(v6[4] + 4 * v5), __src, 4 * v10);
      v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + 4 * v5), v11, &__src[4 * v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

void re::convertQuaternionsToIntrinsicEulers<float>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  float *v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  float *v49;
  float *v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  float *v69;
  float *v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  uint64_t v89;
  float *v90;
  float *v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  uint64_t v108;
  float *v109;
  float *v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;

  switch(a3)
  {
    case 0:
      if (!a2)
        return;
      v7 = 0;
      v8 = (float *)(a1 + 8);
      v9 = (float *)(a4 + 4);
      v10 = 1.0;
      while (a5 != v7)
      {
        v11 = *(v8 - 2);
        v12 = *(v8 - 1);
        v13 = v11 + v11;
        v14 = v12 + v12;
        v15 = *v8;
        v16 = v8[1];
        v17 = v15 + v15;
        v18 = v15 * (float)(v15 + v15);
        v127 = (float)(v12 + v12) * *v8;
        v133 = v11 * (float)(v11 + v11);
        v19 = (float)(v11 + v11) * v16;
        v20 = (float)(v11 + v11) * *v8;
        v21 = (float)(v12 + v12) * v16;
        v22 = v20 + v21;
        if ((float)(v20 + v21) <= v10)
          v23 = v20 + v21;
        else
          v23 = v10;
        if (v23 < -1.0)
          v23 = -1.0;
        *v9 = asinf(v23);
        if (fabsf(v22) >= 0.9999)
        {
          v27 = atan2f(v127 + v19, 1.0 - (float)(v133 + v18));
          v28 = 0.0;
        }
        else
        {
          v24 = v13 * v12;
          v25 = 1.0 - (float)((float)(v12 * v14) + v18);
          v26 = v24 - (float)(v17 * v16);
          v27 = atan2f(-(float)(v127 - v19), 1.0 - (float)(v133 + (float)(v12 * v14)));
          v28 = atan2f(-v26, v25);
        }
        *(v9 - 1) = v27;
        v9[1] = v28;
        ++v7;
        v8 += 4;
        v9 += 4;
        v10 = 1.0;
        if (a2 == v7)
          return;
      }
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a5, a5);
      _os_crash();
      __break(1u);
      goto LABEL_79;
    case 1:
      if (!a2)
        return;
      v29 = 0;
      v30 = (float *)(a1 + 8);
      v31 = (float *)(a4 + 8);
      v32 = 1.0;
      while (a5 != v29)
      {
        v33 = *(v30 - 2);
        v34 = *(v30 - 1);
        v35 = v33 + v33;
        v36 = v34 + v34;
        v38 = *v30;
        v37 = v30[1];
        v39 = v38 + v38;
        v40 = v34 * (float)(v34 + v34);
        v128 = (float)(v33 + v33) * *v30;
        v134 = v33 * (float)(v33 + v33);
        v41 = (float)(v34 + v34) * v37;
        v42 = (float)(v33 + v33) * v34;
        v43 = (float)(v38 + v38) * v37;
        v44 = v42 + v43;
        if ((float)(v42 + v43) <= v32)
          v45 = v42 + v43;
        else
          v45 = v32;
        if (v45 < -1.0)
          v45 = -1.0;
        *v31 = asinf(v45);
        if (fabsf(v44) >= 0.9999)
        {
          v47 = atan2f(v128 + v41, 1.0 - (float)(v134 + v40));
          v46 = 0.0;
        }
        else
        {
          v46 = atan2f(-(float)((float)(v36 * v38) - (float)(v35 * v37)), 1.0 - (float)(v134 + (float)(v38 * v39)));
          v47 = atan2f(-(float)(v128 - v41), 1.0 - (float)(v40 + (float)(v38 * v39)));
        }
        *(v31 - 2) = v46;
        *(v31 - 1) = v47;
        ++v29;
        v30 += 4;
        v31 += 4;
        v32 = 1.0;
        if (a2 == v29)
          return;
      }
LABEL_79:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a5, a5);
      _os_crash();
      __break(1u);
      goto LABEL_80;
    case 2:
      if (!a2)
        return;
      v48 = 0;
      v49 = (float *)(a1 + 8);
      v50 = (float *)(a4 + 8);
      v51 = 1.0;
      while (a5 != v48)
      {
        v53 = *(v49 - 2);
        v52 = *(v49 - 1);
        v54 = v53 + v53;
        v55 = v52 + v52;
        v57 = *v49;
        v56 = v49[1];
        v58 = v57 * (float)(v57 + v57);
        v129 = (float)(v53 + v53) * v52;
        v135 = v52 * (float)(v52 + v52);
        v59 = (float)(v57 + v57) * v56;
        v60 = (float)(v52 + v52) * *v49;
        v61 = (float)(v53 + v53) * v56;
        v62 = v60 + v61;
        if ((float)(v60 + v61) <= v51)
          v63 = v60 + v61;
        else
          v63 = v51;
        if (v63 < -1.0)
          v63 = -1.0;
        *(v50 - 2) = asinf(v63);
        if (fabsf(v62) >= 0.9999)
        {
          v67 = atan2f(v129 + v59, 1.0 - (float)(v135 + v58));
          v66 = 0.0;
        }
        else
        {
          v64 = (float)(v54 * v57) - (float)(v55 * v56);
          v65 = 1.0 - (float)((float)(v53 * v54) + v58);
          v66 = atan2f(-v64, 1.0 - (float)((float)(v53 * v54) + v135));
          v67 = atan2f(-(float)(v129 - v59), v65);
        }
        *(v50 - 1) = v66;
        *v50 = v67;
        ++v48;
        v49 += 4;
        v50 += 4;
        v51 = 1.0;
        if (a2 == v48)
          return;
      }
LABEL_80:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a5, a5);
      _os_crash();
      __break(1u);
      goto LABEL_81;
    case 3:
      if (!a2)
        return;
      v68 = 0;
      v69 = (float *)(a1 + 8);
      v70 = (float *)(a4 + 8);
      v71 = 1.0;
      while (a5 != v68)
      {
        v72 = *(v69 - 2);
        v73 = *(v69 - 1);
        v74 = v72 + v72;
        v75 = v73 + v73;
        v77 = *v69;
        v76 = v69[1];
        v78 = v77 + v77;
        v79 = v73 * (float)(v73 + v73);
        v130 = (float)(v73 + v73) * *v69;
        v136 = v72 * (float)(v72 + v72);
        v124 = (float)(v72 + v72) * v76;
        v80 = (float)(v72 + v72) * v73;
        v81 = (float)(v77 + v77) * v76;
        v82 = v80 - v81;
        if ((float)(v80 - v81) > v71)
          v82 = v71;
        if (v82 < -1.0)
          v82 = -1.0;
        *v70 = asinf(-v82);
        if (vabds_f32(v80, v81) >= 0.9999)
        {
          v87 = atan2f(-(float)(v130 - v124), 1.0 - (float)(v136 + v79));
          v88 = 0.0;
        }
        else
        {
          v83 = v74 * v77;
          v84 = 1.0 - (float)(v79 + (float)(v77 * v78));
          v85 = 1.0 - (float)(v136 + (float)(v77 * v78));
          v86 = v83 + (float)(v75 * v76);
          v87 = atan2f(v130 + v124, v85);
          v88 = atan2f(v86, v84);
        }
        *(v70 - 2) = v87;
        *(v70 - 1) = v88;
        ++v68;
        v69 += 4;
        v70 += 4;
        v71 = 1.0;
        if (a2 == v68)
          return;
      }
LABEL_81:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a5, a5);
      _os_crash();
      __break(1u);
      goto LABEL_82;
    case 4:
      if (!a2)
        return;
      v89 = 0;
      v90 = (float *)(a1 + 8);
      v91 = (float *)(a4 + 8);
      v92 = 1.0;
      while (a5 != v89)
      {
        v93 = *(v90 - 2);
        v94 = *(v90 - 1);
        v95 = v93 + v93;
        v96 = *v90;
        v97 = v90[1];
        v98 = v96 + v96;
        v99 = v96 * (float)(v96 + v96);
        v131 = (float)(v93 + v93) * *v90;
        v137 = v94 * (float)(v94 + v94);
        v125 = (float)(v94 + v94) * v97;
        v100 = (float)(v94 + v94) * *v90;
        v101 = (float)(v93 + v93) * v97;
        if ((float)(v100 - v101) >= -1.0)
          v102 = -(float)(v100 - v101);
        else
          v102 = v92;
        if (v102 < -1.0)
          v102 = -1.0;
        *(v91 - 2) = asinf(v102);
        if (vabds_f32(v100, v101) >= 0.9999)
        {
          v106 = atan2f(-(float)(v131 - v125), 1.0 - (float)(v137 + v99));
          v107 = 0.0;
        }
        else
        {
          v103 = v93 * v95;
          v104 = (float)(v95 * v94) + (float)(v98 * v97);
          v105 = 1.0 - (float)((float)(v93 * v95) + v99);
          v106 = atan2f(v131 + v125, 1.0 - (float)(v103 + v137));
          v107 = atan2f(v104, v105);
        }
        *(v91 - 1) = v106;
        *v91 = v107;
        ++v89;
        v90 += 4;
        v91 += 4;
        v92 = 1.0;
        if (a2 == v89)
          return;
      }
LABEL_82:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a5, a5);
      _os_crash();
      __break(1u);
      goto LABEL_83;
    case 5:
      if (!a2)
        return;
      v108 = 0;
      v109 = (float *)(a1 + 8);
      v110 = (float *)(a4 + 4);
      v111 = 1.0;
      do
      {
        if (a5 == v108)
        {
LABEL_83:
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a5, a5);
          _os_crash();
          __break(1u);
LABEL_84:
          re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unknown rotation order", "!\"Unreachable code\"", "convertQuaternionsToIntrinsicEulers", 505);
          _os_crash();
          __break(1u);
          JUMPOUT(0x225132C9CLL);
        }
        v112 = *(v109 - 2);
        v113 = *(v109 - 1);
        v114 = v112 + v112;
        v115 = v113 + v113;
        v117 = *v109;
        v116 = v109[1];
        v118 = v117 * (float)(v117 + v117);
        v132 = (float)(v112 + v112) * v113;
        v138 = v112 * (float)(v112 + v112);
        v126 = (float)(v117 + v117) * v116;
        v119 = (float)(v112 + v112) * *v109;
        v120 = (float)(v113 + v113) * v116;
        v121 = v119 - v120;
        if ((float)(v119 - v120) > v111)
          v121 = v111;
        if (v121 < -1.0)
          v121 = -1.0;
        *v110 = asinf(-v121);
        if (vabds_f32(v119, v120) >= 0.9999)
        {
          v123 = atan2f(-(float)(v132 - v126), 1.0 - (float)(v138 + v118));
          v122 = 0.0;
        }
        else
        {
          v122 = atan2f((float)(v115 * v117) + (float)(v114 * v116), 1.0 - (float)(v138 + (float)(v113 * v115)));
          v123 = atan2f(v132 + v126, 1.0 - (float)((float)(v113 * v115) + v118));
        }
        *(v110 - 1) = v122;
        v110[1] = v123;
        ++v108;
        v109 += 4;
        v110 += 4;
        v111 = 1.0;
      }
      while (a2 != v108);
      return;
    default:
      goto LABEL_84;
  }
}

float re::BlendSpace::init(uint64_t a1, uint64_t a2, unint64_t *a3, re::BindNode **a4)
{
  __objc2_class_ro **v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __objc2_class_ro **p_info;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  float result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  size_t v24;
  _QWORD *v25;
  const re::IntrospectionBase *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37[2];
  char v38[8];
  char *__s;
  uint64_t v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  __int16 v44;
  unint64_t *v45;
  __int16 v46;
  unint64_t v47;
  _BYTE v48[12];
  __int16 v49;
  int v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v5 = a3;
  v6 = a2;
  v60 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[8];
  v8 = a3[5];
  v9 = a3[3];
  *((_QWORD *)&v55 + 1) = v9;
  *(_QWORD *)&v56 = 0;
  *(_QWORD *)&v55 = a2;
  if (v9)
  {
    if (v9 >= 0x555555555555556)
    {
LABEL_45:
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v9);
      _os_crash();
      __break(1u);
      goto LABEL_46;
    }
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 48 * v9, 8);
    *(_QWORD *)&v56 = v10;
    if (!v10)
    {
LABEL_46:
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_47:
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
      _os_crash();
      __break(1u);
      goto LABEL_48;
    }
    v12 = v9 - 1;
    if (v9 != 1)
    {
      do
      {
        *v10 = 0;
        v10[1] = &str_110;
        v10[2] = 0;
        v10[3] = &str_110;
        v10[4] = 0;
        v10[5] = 0;
        v10 += 6;
        --v12;
      }
      while (v12);
    }
    *v10 = 0;
    v10[1] = &str_110;
    v10[2] = 0;
    v10[3] = &str_110;
    v10[4] = 0;
    v10[5] = 0;
    if (*((_QWORD *)&v55 + 1) != v9)
      goto LABEL_47;
    v13 = 0;
    p_info = (__objc2_class_ro **)v56;
    do
    {
      v4 = &p_info[v13];
      re::StringID::operator=((unint64_t *)&p_info[v13], (uint64_t *)(v8 + v13 * 8));
      re::StringID::operator=((unint64_t *)&p_info[v13 + 2], (uint64_t *)(v8 + v13 * 8 + 16));
      *(_OWORD *)&p_info[v13 + 4] = *(_OWORD *)(v8 + v13 * 8 + 32);
      v13 += 6;
    }
    while (6 * v9 != v13);
  }
  else
  {
    p_info = (__objc2_class_ro **)v56;
  }
  if ((__int128 *)(a1 + 72) != &v55)
  {
    v15 = *(_QWORD *)(a1 + 72);
    if (v15)
      v16 = v15 == (_QWORD)v55;
    else
      v16 = 1;
    if (!v16)
    {
LABEL_48:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      _os_crash();
      __break(1u);
    }
    v17 = *(_QWORD *)(a1 + 80);
    v18 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = v55;
    *(_QWORD *)(a1 + 80) = v9;
    *(_QWORD *)&v55 = v15;
    *((_QWORD *)&v55 + 1) = v17;
    *(_QWORD *)(a1 + 88) = p_info;
    *(_QWORD *)&v56 = v18;
  }
  v35 = v6;
  re::FixedArray<re::BlendSpaceAxisDefinition>::deinit(&v55);
  re::FixedArray<re::BindPoint>::init<>(a1 + 96, *(_QWORD *)a1, v5[3]);
  re::FixedArray<int>::init<>((uint64_t *)(a1 + 120), *(_QWORD *)a1, v5[3]);
  re::FixedArray<int>::init<>((uint64_t *)(a1 + 144), *(_QWORD *)a1, *(_QWORD *)(a1 + 16));
  re::FixedArray<int>::init<>((uint64_t *)(a1 + 168), *(_QWORD *)a1, *(_QWORD *)(a1 + 16));
  v20 = v5[3];
  if (v20)
  {
    v21 = 0;
    v6 = 0;
    v4 = (__objc2_class_ro **)&v41[8];
    p_info = VideoSpillMapMetalSession.info;
    do
    {
      v9 = v5[3];
      if (v9 <= v6)
        goto LABEL_41;
      v9 = *(_QWORD *)(a1 + 128);
      if (v9 <= v6)
        goto LABEL_42;
      v22 = v5[5] + v21;
      *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v6) = *(_DWORD *)(v22 + 40);
      re::StringID::StringID((re::StringID *)v38, (const StringID *)(v22 + 16));
      if ((v23 & 1) == 0
      {
        re::introspect<float>(void)::info = re::introspect_float(0, v26);
      }
      v24 = strlen(__s);
      v37[0] = (uint64_t)__s;
      v37[1] = v24;
      re::BindNode::bindPointWithOverride(a4, (uint64_t)re::introspect<float>(void)::info, v37, (uint64_t)v41);
      v9 = *(_QWORD *)(a1 + 104);
      if (v9 <= v6)
        goto LABEL_43;
      v25 = (_QWORD *)(*(_QWORD *)(a1 + 112) + v21);
      *v25 = *(_QWORD *)v41;
      re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v25 + 1), (uint64_t)&v41[8]);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v41[8]);
      re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v41[8]);
      re::StringID::destroyString((re::StringID *)v38);
      ++v6;
      v21 += 48;
    }
    while (v20 != v6);
  }
  if ((*(_DWORD *)(a1 + 8) & 0xFFFFFFFD) != 1)
  {
    re::FixedArray<int>::init<>((uint64_t *)(a1 + 24), v35, v5[8]);
    re::FixedArray<int>::init<>((uint64_t *)(a1 + 48), v35, v5[3] * v5[8]);
    v27 = v5[8];
    if (v27)
    {
      v28 = 0;
      v29 = 0;
      v21 = 0;
      v30 = v5[10];
      v31 = v5[3];
      while (!v31)
      {
LABEL_36:
        v5 = *(unint64_t **)(a1 + 32);
        if ((unint64_t)v5 <= v21)
          goto LABEL_44;
        result = *(float *)(v30 + (v21 << 6) + 16);
        *(float *)(*(_QWORD *)(a1 + 40) + 4 * v21++) = result;
        v29 += v31;
        v28 += 4 * v31;
        if (v21 == v27)
          return result;
      }
      v32 = 0;
      v33 = v30 + (v21 << 6);
      v5 = *(unint64_t **)(v33 + 40);
      v34 = (_QWORD *)(v33 + 56);
      while (v5 != v32)
      {
        v4 = (__objc2_class_ro **)((char *)v32 + v29);
        p_info = *(__objc2_class_ro ***)(a1 + 56);
        if (p_info <= (__objc2_class_ro **)((char *)v32 + v29))
          goto LABEL_40;
        *(_DWORD *)(*(_QWORD *)(a1 + 64) + v28 + 4 * (_QWORD)v32) = *(_DWORD *)(*v34 + 4 * (_QWORD)v32);
        v32 = (unint64_t *)((char *)v32 + 1);
        if ((unint64_t *)v31 == v32)
          goto LABEL_36;
      }
      *(_QWORD *)v48 = 0;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v41 = 136315906;
      *(_QWORD *)&v41[4] = "operator[]";
      v42 = 1024;
      v43 = 797;
      v44 = 2048;
      v45 = v5;
      v46 = 2048;
      v47 = (unint64_t)v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      *(_QWORD *)v48 = 0;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v41 = 136315906;
      *(_QWORD *)&v41[4] = "operator[]";
      v42 = 1024;
      v43 = 468;
      v44 = 2048;
      v45 = (unint64_t *)v4;
      v46 = 2048;
      v47 = (unint64_t)p_info;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_41:
      *(_QWORD *)v48 = 0;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v41 = 136315906;
      *(_QWORD *)&v41[4] = "operator[]";
      v42 = 1024;
      v43 = 797;
      v44 = 2048;
      v45 = (unint64_t *)v6;
      v46 = 2048;
      v47 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_42:
      *(_QWORD *)v48 = 0;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v41 = 136315906;
      *(_QWORD *)&v41[4] = "operator[]";
      v42 = 1024;
      v43 = 468;
      v44 = 2048;
      v45 = (unint64_t *)v6;
      v46 = 2048;
      v47 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_43:
      v40 = 0;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v48 = 136315906;
      *(_QWORD *)&v48[4] = "operator[]";
      v49 = 1024;
      v50 = 468;
      v51 = 2048;
      v52 = v6;
      v53 = 2048;
      v54 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      *(_QWORD *)v48 = 0;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v55 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v41 = 136315906;
      *(_QWORD *)&v41[4] = "operator[]";
      v42 = 1024;
      v43 = 468;
      v44 = 2048;
      v45 = (unint64_t *)v21;
      v46 = 2048;
      v47 = (unint64_t)v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_45;
    }
  }
  return result;
}

unint64_t re::BlendSpace::samplePosition(re::BlendSpace *this, uint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 10) * a2;
  if (*((_QWORD *)this + 7) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 8) + 4 * v2;
}

void re::BlendSpace::computeWeights(re::BlendSpace *this, double a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  re::BindPoint *v6;
  uint64_t v7;
  _DWORD *v8;
  float *v9;
  float *v10;
  float *v11;
  float v12;
  float v13;
  uint64_t v14;
  unint64_t i;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float *v27;
  unint64_t v28;
  float v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  float v41;
  unint64_t v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float *v48;
  unint64_t v49;
  float v50;
  uint64_t v51;

  if (*((_QWORD *)this + 13))
  {
    v3 = 0;
    v4 = 24;
    do
    {
      v5 = (uint64_t *)(*((_QWORD *)this + 14) + v4);
      v7 = *v5;
      v6 = (re::BindPoint *)(v5 - 3);
      if (v7 && re::BindPoint::isAlive(v6))
      {
        v8 = (_DWORD *)re::BindPoint::valueUntyped(v6);
        if (*((_QWORD *)this + 16) <= v3)
          goto LABEL_64;
        *(_DWORD *)(*((_QWORD *)this + 17) + 4 * v3) = *v8;
      }
      ++v3;
      v4 += 48;
    }
    while (v3 < *((_QWORD *)this + 13));
  }
  switch(*((_DWORD *)this + 2))
  {
    case 1:
      if (!*((_QWORD *)this + 10))
        goto LABEL_70;
      if (!*((_QWORD *)this + 16))
        goto LABEL_71;
      LODWORD(a2) = **((_DWORD **)this + 17);
      return;
    case 2:
      if (!*((_QWORD *)this + 16))
        goto LABEL_72;
      v9 = (float *)*((_QWORD *)this + 17);
      v10 = (float *)re::BlendSpace::samplePosition(this, 0);
      v11 = (float *)re::BlendSpace::samplePosition(this, *((_QWORD *)this + 2) - 1);
      v12 = *v9;
      if (*v9 > *v11)
        v12 = *v11;
      if (v12 >= *v10)
        v13 = v12;
      else
        v13 = *v10;
      v14 = *((_QWORD *)this + 22);
      if (v14)
        bzero(*((void **)this + 23), 4 * v14);
      if (*((_QWORD *)this + 2) < 2uLL)
        return;
      for (i = 0; v13 > *(float *)re::BlendSpace::samplePosition(this, i + 1); ++i)
      {
        v16 = i + 2;
        if (v16 >= *((_QWORD *)this + 2))
          return;
      }
      v47 = *(float *)re::BlendSpace::samplePosition(this, i);
      v48 = (float *)re::BlendSpace::samplePosition(this, i + 1);
      v49 = *((_QWORD *)this + 22);
      if (v49 <= i + 1)
        goto LABEL_78;
      v50 = (float)(v13 - v47) / (float)(*v48 - v47);
      v51 = *((_QWORD *)this + 23);
      *(float *)(v51 + 4 * i + 4) = v50;
      if (v49 <= i)
        goto LABEL_79;
      *(float *)(v51 + 4 * i) = 1.0 - v50;
      return;
    case 3:
      v17 = *((_QWORD *)this + 10);
      if (!v17)
        goto LABEL_73;
      if (v17 == 1)
        goto LABEL_74;
      if (!*((_QWORD *)this + 16))
        goto LABEL_75;
      v18 = *((_QWORD *)this + 11);
      v19 = *(unsigned int *)(v18 + 44);
      v20 = *(unsigned int *)(v18 + 92);
      v21 = (char *)*((_QWORD *)this + 20);
      LODWORD(a2) = **((_DWORD **)this + 17);
      if (*((_QWORD *)this + 16) <= 1uLL)
        goto LABEL_76;
      if (*((_QWORD *)this + 10) <= 1uLL)
        goto LABEL_77;
      LODWORD(v22) = *(_DWORD *)(*((_QWORD *)this + 17) + 4);
      if (!(_DWORD)v20)
        return;
      v23 = 0;
      v24 = 0;
      while (!(_DWORD)v19)
      {
LABEL_36:
        ++v24;
        v23 += v19;
        if (v24 == v20)
          return;
      }
      v25 = *((_QWORD *)this + 22);
      v26 = v23;
      v27 = (float *)v21;
      v28 = v19;
      while (v25 > v26)
      {
        v29 = *v27++;
        *(float *)(*((_QWORD *)this + 23) + 4 * v26++) = *(float *)&v21[4 * v19 + 4 * v24] * v29;
        if (!--v28)
          goto LABEL_36;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_63;
    case 4:
      if (!*((_QWORD *)this + 2))
        return;
      v30 = 0;
      v31 = *((_QWORD *)this + 10);
      break;
    default:
      return;
  }
  do
  {
    v32 = re::BlendSpace::samplePosition(this, v30);
    if (v31)
    {
      v33 = 0;
      v34 = 0.0;
      while (*((_QWORD *)this + 16) != v33)
      {
        v35 = *(float *)(v32 + 4 * v33) - *(float *)(*((_QWORD *)this + 17) + 4 * v33);
        v34 = v34 + (float)(v35 * v35);
        if (v31 == ++v33)
          goto LABEL_46;
      }
LABEL_63:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_64:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_65:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_66:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_67:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_68:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_71:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_72:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_73:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_74:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_75:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_76:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_77:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_78:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_79:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v34 = 0.0;
LABEL_46:
    v36 = *((_QWORD *)this + 19);
    if (v36 <= v30)
      goto LABEL_65;
    v37 = *((_QWORD *)this + 20);
    *(float *)(v37 + 4 * v30++) = v34;
    v38 = *((_QWORD *)this + 2);
  }
  while (v30 < v38);
  if (v38)
  {
    v39 = 0;
    v40 = *((_QWORD *)this + 4);
    v41 = 0.0;
    do
    {
      if (v40 == v39)
        goto LABEL_66;
      if (v36 <= v39)
        goto LABEL_67;
      v42 = *((_QWORD *)this + 22);
      if (v42 <= v39)
        goto LABEL_68;
      v43 = *(float *)(*((_QWORD *)this + 5) + 4 * v39) * *(float *)(*((_QWORD *)this + 5) + 4 * v39);
      v44 = expf((float)-*(float *)(v37 + 4 * v39) / (float)(v43 + v43));
      v45 = *((_QWORD *)this + 23);
      *(float *)(v45 + 4 * v39) = v44;
      v41 = v41 + v44;
      ++v39;
    }
    while (v38 != v39);
    v46 = 0;
    while (v42 != v46)
    {
      *(float *)(v45 + 4 * v46) = *(float *)(v45 + 4 * v46) / v41;
      if (v38 == ++v46)
        return;
    }
    goto LABEL_69;
  }
}

void `anonymous namespace'::computeWeightsForUniformAxis(void *a1, unint64_t a2, double a3, float a4, float a5)
{
  float v7;
  float v8;
  int v9;
  unint64_t v10;

  if (a5 < *(float *)&a3)
    *(float *)&a3 = a5;
  if (*(float *)&a3 < a4)
    *(float *)&a3 = a4;
  v7 = (float)((float)(*(float *)&a3 - a4) / (float)(a5 - a4)) * (float)(a2 - 1);
  v8 = floorf(v7);
  v9 = (int)(float)(v8 + 1.0);
  if (a2)
    bzero(a1, 4 * a2);
  *(float *)&a3 = v7 - v8;
  if (a2 > v9)
    *((_DWORD *)a1 + v9) = LODWORD(a3);
  v10 = v9 - 1;
  if (a2 <= v10)
  {
    re::internal::assertLog((re::internal *)6, a2, a3, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v10, a2);
    _os_crash();
    __break(1u);
  }
  else
  {
    *((float *)a1 + v10) = 1.0 - *(float *)&a3;
  }
}

uint64_t re::BlendSpaceBuilder::addAxis(re::BlendSpaceBuilder *this, const re::StringID *a2, int a3, float a4, float a5)
{
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  __n128 v14;
  _QWORD v15[2];
  float v16;
  float v17;
  int v18;
  int v19;

  if (re::BlendSpaceBuilder::axisIndex(this, a2) != -1)
    return -1;
  v11 = *((_QWORD *)this + 1);
  if ((*(_DWORD *)v11 & 0xFFFFFFFD) != 1 || (v10 = -1, a3) && (float)(a5 - a4) > 0.0)
  {
    v12 = (_anonymous_namespace_ *)(v11 + 8);
    v10 = *(_QWORD *)(v11 + 24);
    re::StringID::StringID((re::StringID *)&v14, (const StringID *)a2);
    v15[0] = 0;
    v15[1] = "";
    v16 = a4;
    v17 = a5;
    v18 = 0;
    v19 = a3;
    re::DynamicArray<re::BlendSpaceAxisDefinition>::add(v12, &v14);
    re::StringID::destroyString((re::StringID *)v15);
    re::StringID::destroyString((re::StringID *)&v14);
  }
  return v10;
}

uint64_t re::BlendSpaceBuilder::axisIndex(re::BlendSpaceBuilder *this, const re::StringID *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *i;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return -1;
  v5 = 0;
  for (i = *(_QWORD **)(v2 + 40); !re::StringID::operator==(i, a2); i += 6)
  {
    if (v3 == ++v5)
      return -1;
  }
  return v5;
}

uint64_t re::BlendSpaceBuilder::setDefaultControlValueForAxis(uint64_t this, unint64_t a2, float a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)(v3 + 24) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(*(_QWORD *)(v3 + 40) + 48 * a2 + 40) = a3;
  return this;
}

unint64_t *re::BlendSpaceBuilder::setControlValueBindPath(re::BlendSpaceBuilder *this, unint64_t a2, const re::StringID *a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (*(_QWORD *)(v3 + 24) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::StringID::operator=((unint64_t *)(*(_QWORD *)(v3 + 40) + 48 * a2 + 16), (uint64_t *)a3);
}

uint64_t re::BlendSpaceBuilder::addSample(re::BlendSpaceBuilder *this, StringID *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  float v9;
  float v10[6];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(v3 + 64);
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD **)(v3 + 80);
    v7 = -v4;
    while (!re::StringID::operator==(v6, a2))
    {
      --v5;
      v6 += 8;
      if (v7 == v5)
        goto LABEL_7;
    }
    if (v5 != 1)
      return -1;
  }
LABEL_7:
  if ((*(_DWORD *)v3 & 0xFFFFFFFD) == 1)
    return -1;
  re::StringID::StringID((re::StringID *)v10, a2);
  v10[4] = 0.0;
  v15 = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v14 = 0;
  v9 = re::DynamicArray<re::BlendSpaceSampleDefinition>::add((_anonymous_namespace_ *)(v3 + 48), v10);
  if (v11)
  {
    if (v15)
      (*(void (**)(float))(*(_QWORD *)v11 + 40))(v9);
    v15 = 0;
    v12 = 0;
    v13 = 0;
    v11 = 0;
    ++v14;
  }
  re::StringID::destroyString((re::StringID *)v10);
  return *(_QWORD *)(v3 + 64) - 1;
}

uint64_t re::BlendSpaceBuilder::setSamplePosition(uint64_t a1, unint64_t a2, float *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _anonymous_namespace_ *v8;

  v4 = *(_QWORD *)(a1 + 8);
  if (a4 != *(_QWORD *)(v4 + 24) || (*(_DWORD *)v4 & 0xFFFFFFFD) == 1)
    return 0;
  if (*(_QWORD *)(v4 + 64) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = a4;
  if (a4)
  {
    v8 = (_anonymous_namespace_ *)(*(_QWORD *)(v4 + 80) + (a2 << 6) + 24);
    do
    {
      re::DynamicArray<float>::add(v8, a3++);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t re::BlendSpaceBuilder::setSampleFalloff(uint64_t this, unint64_t a2, float a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)(v3 + 64) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(float *)(*(_QWORD *)(v3 + 80) + (a2 << 6) + 16) = a3;
  return this;
}

unint64_t re::BlendSpaceBuilder::addSampleUniform(re::BlendSpaceBuilder *this, StringID *a2, int a3, int a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE v23[20];
  _BYTE v24[20];
  uint64_t v25;
  int v26;
  uint64_t v27;
  _BYTE v28[12];
  __int16 v29;
  int v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 1);
  if ((*(_DWORD *)v5 & 0xFFFFFFFD) != 1)
    return -1;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
  {
    *(_QWORD *)v28 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    v15 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v23 = 136315906;
    *(_QWORD *)&v23[4] = "operator[]";
    *(_WORD *)&v23[12] = 1024;
    *(_DWORD *)&v23[14] = 789;
    *(_WORD *)&v23[18] = 2048;
    *(_QWORD *)v24 = 0;
    *(_WORD *)&v24[8] = 2048;
    *(_QWORD *)&v24[10] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v5 + 40);
  if (v6 != 1)
    LODWORD(v6) = *(_DWORD *)(v11 + 92);
  v12 = *(_DWORD *)(v11 + 44);
  if (!*(_QWORD *)(v5 + 64))
  {
    v13 = (v6 * v12);
    *(_QWORD *)(v5 + 48) = *(_QWORD *)this;
    v14 = v5 + 48;
    re::DynamicArray<re::BlendSpaceSampleDefinition>::setCapacity((_QWORD *)v14, v13);
    ++*(_DWORD *)(v14 + 24);
    re::DynamicArray<re::BlendSpaceSampleDefinition>::resize(*((_QWORD *)this + 1) + 48, v13);
  }
  v15 = (a4 + v12 * a3);
  re::StringID::StringID((re::StringID *)v23, a2);
  *(_DWORD *)&v23[16] = 0;
  v27 = 0;
  *(_QWORD *)&v24[12] = 0;
  v25 = 0;
  *(_QWORD *)&v24[4] = 0;
  v26 = 0;
  v16 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(v16 + 64);
  if (v4 <= v15)
  {
LABEL_16:
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v28 = 136315906;
    *(_QWORD *)&v28[4] = "operator[]";
    v29 = 1024;
    v30 = 789;
    v31 = 2048;
    v32 = v15;
    v33 = 2048;
    v34 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v17 = *(_QWORD *)(v16 + 80) + (v15 << 6);
  v18 = *(_QWORD *)v23;
  v19 = *(_QWORD *)&v23[8];
  *(_QWORD *)v23 = 0;
  *(_QWORD *)&v23[8] = &str_110;
  v20 = *(_QWORD *)(v17 + 8);
  v21 = v18 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v17 & 1;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)&v35 = v21;
  *((_QWORD *)&v35 + 1) = v20;
  *(_QWORD *)v17 = v18;
  re::StringID::destroyString((re::StringID *)&v35);
  *(_DWORD *)(v17 + 16) = *(_DWORD *)&v23[16];
  re::DynamicArray<re::RigComponentConstraint>::operator=(v17 + 24, (uint64_t)&v24[4]);
  if (*(_QWORD *)&v24[4])
  {
    if (v27)
      (*(void (**)(void))(**(_QWORD **)&v24[4] + 40))();
    v27 = 0;
    *(_QWORD *)&v24[12] = 0;
    v25 = 0;
    *(_QWORD *)&v24[4] = 0;
    ++v26;
  }
  re::StringID::destroyString((re::StringID *)v23);
  return v15;
}

void re::BlendSpaceBuilder::build(re::BlendSpaceBuilder *this@<X0>, uint64_t a2@<X8>)
{
  int *v3;
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  v3 = (int *)*((_QWORD *)this + 1);
  v4 = *((_QWORD *)v3 + 8);
  if (v4 <= 1)
  {
    v5 = v31;
    v6 = v32;
    v7 = v33;
    *(_BYTE *)a2 = 0;
    v8 = 8000;
LABEL_28:
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = &re::AnimationErrorCategory(void)::instance;
    *(_OWORD *)(a2 + 24) = v5;
    *(_QWORD *)(a2 + 40) = v6;
    *(_QWORD *)(a2 + 48) = v7;
    return;
  }
  v9 = *((_QWORD *)v3 + 3);
  if (!v9)
  {
    v5 = v31;
    v6 = v32;
    v7 = v33;
    *(_BYTE *)a2 = 0;
    v8 = 8003;
    goto LABEL_28;
  }
  v11 = *v3;
  if ((*v3 & 0xFFFFFFFD) == 1)
  {
    v12 = *((_QWORD *)v3 + 5);
    v13 = v12 + 48 * v9;
    do
    {
      re::StringID::StringID((re::StringID *)&v31, (const StringID *)v12);
      re::StringID::StringID((re::StringID *)&v32, (const StringID *)(v12 + 16));
      v34 = *(_OWORD *)(v12 + 32);
      if ((float)(*((float *)&v34 + 1) - *(float *)&v34) <= 0.0)
      {
        re::DynamicString::format((re::DynamicString *)"Axis range for uniform blend space not defined for axis %s.", (re::DynamicString *)&v28, *((_QWORD *)&v31 + 1));
        v25 = v28;
        v26 = v29;
        v27 = v30;
        *(_BYTE *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 8001;
        *(_QWORD *)(a2 + 16) = &re::AnimationErrorCategory(void)::instance;
        *(_OWORD *)(a2 + 24) = v25;
        *(_QWORD *)(a2 + 40) = v26;
        *(_QWORD *)(a2 + 48) = v27;
        re::StringID::destroyString((re::StringID *)&v32);
        re::StringID::destroyString((re::StringID *)&v31);
        return;
      }
      re::StringID::destroyString((re::StringID *)&v32);
      re::StringID::destroyString((re::StringID *)&v31);
      v12 += 48;
    }
    while (v12 != v13);
    v15 = *((_QWORD *)v3 + 8);
    if (!v15)
      goto LABEL_19;
    v16 = v15 << 6;
    v17 = (_QWORD *)(*((_QWORD *)v3 + 10) + 8);
    while (*(v17 - 1) > 1uLL || !*v17 || *(_BYTE *)*v17)
    {
      v17 += 8;
      v16 -= 64;
      if (!v16)
        goto LABEL_19;
    }
LABEL_27:
    v5 = v31;
    v6 = v32;
    v7 = v33;
    *(_BYTE *)a2 = 0;
    v8 = 8002;
    goto LABEL_28;
  }
  v18 = (_QWORD *)(*((_QWORD *)v3 + 10) + 40);
  v19 = v4 << 6;
  do
  {
    if (*v18 != v9)
    {
      re::DynamicString::format((re::DynamicString *)"Blend space sample %s has an invalid position.", (re::DynamicString *)&v31, *(v18 - 4));
      goto LABEL_27;
    }
    v18 += 8;
    v19 -= 64;
  }
  while (v19);
LABEL_19:
  v20 = *((_QWORD *)this + 1);
  if (v11 == 2)
  {
    v21 = *(_QWORD *)(v20 + 80);
    v22 = *(_QWORD *)(v20 + 64);
    v23 = 126 - 2 * __clz(v22);
    if (v22)
      v24 = v23;
    else
      v24 = 0;
    std::__introsort<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *,false>(v21, v21 + (v22 << 6), v24, 1);
    v20 = *((_QWORD *)this + 1);
  }
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = v20;
}

void std::__introsort<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  _BOOL4 v20;
  unint64_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t *v41;
  _BOOL4 v42;
  uint64_t *v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  void *v74;
  unint64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL4 v92;
  unint64_t v93;
  void *v94;
  void *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  unint64_t v115;
  unint64_t v116;
  void *v117;
  void *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  void *v136;
  void *v137;
  unint64_t v138;
  unint64_t *v140;
  unint64_t *v141;
  unint64_t v142;
  void *v143;
  unint64_t *v144;
  unint64_t *v145;
  unint64_t v146;
  unint64_t v147;
  void *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  void *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  int64_t v157;
  unint64_t v158;
  void *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unint64_t v166;
  void *v167;
  int v168;
  uint64_t v169;
  __int128 v170;
  int v171;
  float *v172;
  unint64_t v173;
  uint64_t v174;

LABEL_1:
  v155 = (uint64_t *)(a2 - 64);
  v7 = (uint64_t *)a1;
  while (2)
  {
    a1 = (uint64_t)v7;
    v8 = a2 - (_QWORD)v7;
    v9 = v8 >> 6;
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a2 - 24), *(float **)(a2 - 8), *(_QWORD *)(a1 + 40), *(float **)(a1 + 56)))
        {
          std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a1, v155);
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1, a1 + 64, (uint64_t)v155);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1, a1 + 64, a1 + 128, (uint64_t)v155);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *,0>(a1, a1 + 64, a1 + 128, a1 + 192, (uint64_t)v155);
        return;
      default:
        if (v8 <= 1535)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              v58 = (_QWORD *)(a1 + 64);
              if (a1 + 64 != a2)
              {
                v59 = 0;
                v60 = (_QWORD *)a1;
                do
                {
                  v61 = v58;
                  if (re::BlendSpaceBuilder::build(void)::$_0::operator()(v58[5], (float *)v58[7], v60[5], (float *)v60[7]))
                  {
                    v62 = a2;
                    v63 = *v61;
                    v64 = (void *)v61[1];
                    v166 = *v61 & 1;
                    v166 = *v61 & 0xFFFFFFFFFFFFFFFELL | v63 & 1;
                    v167 = v64;
                    *v61 = 0;
                    v61[1] = &str_110;
                    v168 = *((_DWORD *)v60 + 20);
                    v169 = v60[11];
                    v170 = *((_OWORD *)v60 + 6);
                    v60[12] = 0;
                    v60[13] = 0;
                    v60[11] = 0;
                    v172 = (float *)v60[15];
                    v60[15] = 0;
                    ++*((_DWORD *)v60 + 28);
                    v171 = 1;
                    v65 = v59;
                    while (1)
                    {
                      v66 = a1 + v65;
                      v67 = *(_QWORD *)(a1 + v65);
                      v68 = *(_QWORD *)(a1 + v65 + 8);
                      *(_QWORD *)v66 = 0;
                      *(_QWORD *)(v66 + 8) = &str_110;
                      v69 = *(void **)(a1 + v65 + 72);
                      v70 = v67 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a1 + v65 + 64) & 1;
                      *(_QWORD *)(v66 + 72) = v68;
                      v158 = v70;
                      v159 = v69;
                      *(_QWORD *)(v66 + 64) = v67;
                      re::StringID::destroyString((re::StringID *)&v158);
                      *(_DWORD *)(v66 + 80) = *(_DWORD *)(v66 + 16);
                      re::DynamicArray<re::RigComponentConstraint>::operator=(v66 + 88, v66 + 24);
                      if (!v65)
                        break;
                      v65 -= 64;
                      if (!re::BlendSpaceBuilder::build(void)::$_0::operator()(*((uint64_t *)&v170 + 1), v172, *(_QWORD *)(v66 - 24), *(float **)(v66 - 8)))
                      {
                        v71 = a1 + v65 + 64;
                        goto LABEL_76;
                      }
                    }
                    v71 = a1;
LABEL_76:
                    v72 = v166;
                    v73 = v167;
                    v166 = 0;
                    v167 = &str_110;
                    v74 = *(void **)(v71 + 8);
                    v75 = v72 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v71 & 1;
                    *(_QWORD *)(v71 + 8) = v73;
                    v158 = v75;
                    v159 = v74;
                    *(_QWORD *)v71 = v72;
                    re::StringID::destroyString((re::StringID *)&v158);
                    *(_DWORD *)(v71 + 16) = v168;
                    re::DynamicArray<re::RigComponentConstraint>::operator=(v66 + 24, (uint64_t)&v169);
                    a2 = v62;
                    if (v169)
                    {
                      if (v172)
                        (*(void (**)(void))(*(_QWORD *)v169 + 40))();
                      v172 = 0;
                      v170 = 0uLL;
                      v169 = 0;
                      ++v171;
                    }
                    re::StringID::destroyString((re::StringID *)&v166);
                  }
                  v58 = v61 + 8;
                  v59 += 64;
                  v60 = v61;
                }
                while (v61 + 8 != (_QWORD *)a2);
              }
            }
          }
          else if (a1 != a2)
          {
            v140 = (unint64_t *)(a1 + 64);
            if (a1 + 64 != a2)
            {
              do
              {
                v141 = v140;
                if (re::BlendSpaceBuilder::build(void)::$_0::operator()(v140[5], (float *)v140[7], *(_QWORD *)(a1 + 40), *(float **)(a1 + 56)))
                {
                  v142 = *v141;
                  v143 = (void *)v141[1];
                  v166 = *v141 & 1;
                  v166 = *v141 & 0xFFFFFFFFFFFFFFFELL | v142 & 1;
                  v167 = v143;
                  *v141 = 0;
                  v141[1] = (unint64_t)&str_110;
                  v168 = *(_DWORD *)(a1 + 80);
                  v169 = *(_QWORD *)(a1 + 88);
                  v170 = *(_OWORD *)(a1 + 96);
                  *(_QWORD *)(a1 + 96) = 0;
                  *(_QWORD *)(a1 + 104) = 0;
                  *(_QWORD *)(a1 + 88) = 0;
                  v172 = *(float **)(a1 + 120);
                  *(_QWORD *)(a1 + 120) = 0;
                  ++*(_DWORD *)(a1 + 112);
                  v171 = 1;
                  v144 = v141;
                  do
                  {
                    v145 = v144;
                    v146 = *(v144 - 8);
                    v144 -= 8;
                    v147 = *(v145 - 7);
                    *(v145 - 7) = (unint64_t)&str_110;
                    *v144 = 0;
                    v148 = (void *)v145[1];
                    v149 = v146 & 0xFFFFFFFFFFFFFFFELL | *v145 & 1;
                    v145[1] = v147;
                    v158 = v149;
                    v159 = v148;
                    *v145 = v146;
                    re::StringID::destroyString((re::StringID *)&v158);
                    *((_DWORD *)v145 + 4) = *((_DWORD *)v145 - 12);
                    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v145 + 3), (uint64_t)(v145 - 5));
                  }
                  while (re::BlendSpaceBuilder::build(void)::$_0::operator()(*((uint64_t *)&v170 + 1), v172, *(v145 - 11), (float *)*(v145 - 9)));
                  v150 = v166;
                  v151 = (unint64_t)v167;
                  v166 = 0;
                  v167 = &str_110;
                  v152 = (void *)v144[1];
                  v153 = v150 & 0xFFFFFFFFFFFFFFFELL | *v144 & 1;
                  v144[1] = v151;
                  v158 = v153;
                  v159 = v152;
                  *v144 = v150;
                  re::StringID::destroyString((re::StringID *)&v158);
                  *((_DWORD *)v144 + 4) = v168;
                  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v144 + 3), (uint64_t)&v169);
                  if (v169)
                  {
                    if (v172)
                      (*(void (**)(void))(*(_QWORD *)v169 + 40))();
                    v172 = 0;
                    v170 = 0uLL;
                    v169 = 0;
                    ++v171;
                  }
                  re::StringID::destroyString((re::StringID *)&v166);
                }
                v140 = v141 + 8;
                a1 = (uint64_t)v141;
              }
              while (v141 + 8 != (unint64_t *)a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v154 = a2;
            v157 = (v9 - 2) >> 1;
            v76 = v157;
            do
            {
              v77 = v76;
              if (v157 >= v76)
              {
                v78 = (2 * v76) | 1;
                v79 = a1 + (v78 << 6);
                if (2 * v76 + 2 < (uint64_t)v9)
                {
                  v80 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(v79 + 40), *(float **)(v79 + 56), *(_QWORD *)(v79 + 104), *(float **)(v79 + 120));
                  v79 += (unint64_t)v80 << 6;
                  if (v80)
                    v78 = 2 * v77 + 2;
                }
                v81 = a1 + (v77 << 6);
                if (!re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(v79 + 40), *(float **)(v79 + 56), *(_QWORD *)(v81 + 40), *(float **)(v81 + 56)))
                {
                  v82 = *(_QWORD *)v81;
                  v166 = *(_QWORD *)v81 & 1;
                  v166 = *(_QWORD *)v81 & 0xFFFFFFFFFFFFFFFELL | v82 & 1;
                  v167 = *(void **)(v81 + 8);
                  *(_QWORD *)v81 = 0;
                  *(_QWORD *)(v81 + 8) = &str_110;
                  v83 = a1 + (v77 << 6);
                  v168 = *(_DWORD *)(v83 + 16);
                  v169 = *(_QWORD *)(v83 + 24);
                  *(_QWORD *)(v83 + 24) = 0;
                  *(_QWORD *)&v170 = *(_QWORD *)(v83 + 32);
                  *(_QWORD *)(v83 + 32) = 0;
                  *((_QWORD *)&v170 + 1) = *(_QWORD *)(v83 + 40);
                  *(_QWORD *)(v83 + 40) = 0;
                  v172 = *(float **)(v83 + 56);
                  *(_QWORD *)(v83 + 56) = 0;
                  ++*(_DWORD *)(v83 + 48);
                  v171 = 1;
                  do
                  {
                    v84 = v79;
                    v85 = *(_QWORD *)v79;
                    v86 = *(_QWORD *)(v79 + 8);
                    *(_QWORD *)v79 = 0;
                    *(_QWORD *)(v79 + 8) = &str_110;
                    v87 = *(void **)(v81 + 8);
                    v88 = v85 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v81 & 1;
                    *(_QWORD *)(v81 + 8) = v86;
                    v158 = v88;
                    v159 = v87;
                    *(_QWORD *)v81 = v85;
                    re::StringID::destroyString((re::StringID *)&v158);
                    *(_DWORD *)(v81 + 16) = *(_DWORD *)(v79 + 16);
                    v89 = v79 + 24;
                    re::DynamicArray<re::RigComponentConstraint>::operator=(v81 + 24, v79 + 24);
                    if (v157 < v78)
                      break;
                    v90 = (2 * v78) | 1;
                    v79 = a1 + (v90 << 6);
                    v91 = 2 * v78 + 2;
                    if (v91 < (uint64_t)v9)
                    {
                      v92 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(v79 + 40), *(float **)(v79 + 56), *(_QWORD *)(v79 + 104), *(float **)(v79 + 120));
                      v79 += (unint64_t)v92 << 6;
                      if (v92)
                        v90 = v91;
                    }
                    v81 = v84;
                    v78 = v90;
                  }
                  while (!re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(v79 + 40), *(float **)(v79 + 56), *((uint64_t *)&v170 + 1), v172));
                  v93 = v166;
                  v94 = v167;
                  v166 = 0;
                  v167 = &str_110;
                  v95 = *(void **)(v84 + 8);
                  v96 = v93 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v84 & 1;
                  *(_QWORD *)(v84 + 8) = v94;
                  v158 = v96;
                  v159 = v95;
                  *(_QWORD *)v84 = v93;
                  re::StringID::destroyString((re::StringID *)&v158);
                  *(_DWORD *)(v84 + 16) = v168;
                  re::DynamicArray<re::RigComponentConstraint>::operator=(v89, (uint64_t)&v169);
                  if (v169)
                  {
                    if (v172)
                      (*(void (**)(void))(*(_QWORD *)v169 + 40))();
                    v172 = 0;
                    v170 = 0uLL;
                    v169 = 0;
                    ++v171;
                  }
                  re::StringID::destroyString((re::StringID *)&v166);
                }
              }
              v76 = v77 - 1;
            }
            while (v77);
            v97 = (unint64_t)v8 >> 6;
            v98 = v154;
            do
            {
              v99 = 0;
              v100 = *(_QWORD *)a1;
              v101 = *(void **)(a1 + 8);
              v158 = *(_QWORD *)a1 & 1;
              v158 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL | v100 & 1;
              v159 = v101;
              *(_QWORD *)a1 = 0;
              *(_QWORD *)(a1 + 8) = &str_110;
              v160 = *(_DWORD *)(a1 + 16);
              v102 = *(_QWORD *)(a1 + 32);
              v161 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 24) = 0;
              v162 = v102;
              *(_QWORD *)(a1 + 32) = 0;
              v163 = *(_QWORD *)(a1 + 40);
              *(_QWORD *)(a1 + 40) = 0;
              v165 = *(_QWORD *)(a1 + 56);
              *(_QWORD *)(a1 + 56) = 0;
              ++*(_DWORD *)(a1 + 48);
              v164 = 1;
              v103 = a1;
              do
              {
                v104 = v103 + (v99 << 6) + 64;
                v105 = (2 * v99) | 1;
                v106 = 2 * v99 + 2;
                if (v106 < v97)
                {
                  v107 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(v103 + (v99 << 6) + 104), *(float **)(v103 + (v99 << 6) + 120), *(_QWORD *)(v103 + (v99 << 6) + 168), *(float **)(v103 + (v99 << 6) + 184));
                  v104 += (unint64_t)v107 << 6;
                  if (v107)
                    v105 = v106;
                }
                v108 = *(_QWORD *)v104;
                v109 = *(_QWORD *)(v104 + 8);
                *(_QWORD *)v104 = 0;
                *(_QWORD *)(v104 + 8) = &str_110;
                v110 = *(void **)(v103 + 8);
                v111 = v108 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v103 & 1;
                *(_QWORD *)(v103 + 8) = v109;
                v166 = v111;
                v167 = v110;
                *(_QWORD *)v103 = v108;
                re::StringID::destroyString((re::StringID *)&v166);
                *(_DWORD *)(v103 + 16) = *(_DWORD *)(v104 + 16);
                re::DynamicArray<re::RigComponentConstraint>::operator=(v103 + 24, v104 + 24);
                v103 = v104;
                v99 = v105;
              }
              while (v105 <= (uint64_t)((unint64_t)(v97 - 2) >> 1));
              if (v104 == v98 - 64)
              {
                v135 = v158;
                v136 = v159;
                v158 = 0;
                v159 = &str_110;
                v137 = *(void **)(v104 + 8);
                v138 = v135 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v104 & 1;
                *(_QWORD *)(v104 + 8) = v136;
                v166 = v138;
                v167 = v137;
                *(_QWORD *)v104 = v135;
                re::StringID::destroyString((re::StringID *)&v166);
                *(_DWORD *)(v104 + 16) = v160;
                re::DynamicArray<re::RigComponentConstraint>::operator=(v104 + 24, (uint64_t)&v161);
              }
              else
              {
                v112 = *(_QWORD *)(v98 - 64);
                v113 = *(_QWORD *)(v98 - 56);
                *(_QWORD *)(v98 - 64) = 0;
                *(_QWORD *)(v98 - 56) = &str_110;
                v114 = *(void **)(v104 + 8);
                v115 = v112 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v104 & 1;
                *(_QWORD *)(v104 + 8) = v113;
                v166 = v115;
                v167 = v114;
                *(_QWORD *)v104 = v112;
                re::StringID::destroyString((re::StringID *)&v166);
                *(_DWORD *)(v104 + 16) = *(_DWORD *)(v98 - 48);
                re::DynamicArray<re::RigComponentConstraint>::operator=(v104 + 24, v98 - 40);
                v116 = v158;
                v117 = v159;
                v158 = 0;
                v159 = &str_110;
                v118 = *(void **)(v98 - 56);
                v119 = v116 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v98 - 64) & 1;
                *(_QWORD *)(v98 - 56) = v117;
                v166 = v119;
                v167 = v118;
                *(_QWORD *)(v98 - 64) = v116;
                re::StringID::destroyString((re::StringID *)&v166);
                *(_DWORD *)(v98 - 48) = v160;
                re::DynamicArray<re::RigComponentConstraint>::operator=(v98 - 40, (uint64_t)&v161);
                v120 = v104 - a1 + 64;
                if (v120 >= 65)
                {
                  v121 = (((unint64_t)v120 >> 6) - 2) >> 1;
                  v122 = a1 + (v121 << 6);
                  if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(v122 + 40), *(float **)(v122 + 56), *(_QWORD *)(v104 + 40), *(float **)(v104 + 56)))
                  {
                    v123 = *(_QWORD *)v104;
                    v124 = *(void **)(v104 + 8);
                    v166 = *(_QWORD *)v104 & 1;
                    v166 = *(_QWORD *)v104 & 0xFFFFFFFFFFFFFFFELL | v123 & 1;
                    v167 = v124;
                    *(_QWORD *)v104 = 0;
                    *(_QWORD *)(v104 + 8) = &str_110;
                    v168 = *(_DWORD *)(v104 + 16);
                    v169 = *(_QWORD *)(v104 + 24);
                    *(_QWORD *)(v104 + 24) = 0;
                    *(_QWORD *)&v170 = *(_QWORD *)(v104 + 32);
                    *(_QWORD *)(v104 + 32) = 0;
                    *((_QWORD *)&v170 + 1) = *(_QWORD *)(v104 + 40);
                    *(_QWORD *)(v104 + 40) = 0;
                    v172 = *(float **)(v104 + 56);
                    *(_QWORD *)(v104 + 56) = 0;
                    ++*(_DWORD *)(v104 + 48);
                    v171 = 1;
                    do
                    {
                      v125 = v122;
                      v126 = *(_QWORD *)v122;
                      v127 = *(_QWORD *)(v122 + 8);
                      *(_QWORD *)v122 = 0;
                      *(_QWORD *)(v122 + 8) = &str_110;
                      v128 = *(_QWORD *)(v104 + 8);
                      v129 = v126 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v104 & 1;
                      *(_QWORD *)(v104 + 8) = v127;
                      v173 = v129;
                      v174 = v128;
                      *(_QWORD *)v104 = v126;
                      re::StringID::destroyString((re::StringID *)&v173);
                      *(_DWORD *)(v104 + 16) = *(_DWORD *)(v122 + 16);
                      v130 = v122 + 24;
                      re::DynamicArray<re::RigComponentConstraint>::operator=(v104 + 24, v122 + 24);
                      if (!v121)
                        break;
                      v121 = (v121 - 1) >> 1;
                      v122 = a1 + (v121 << 6);
                      v104 = v125;
                    }
                    while (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(v122 + 40), *(float **)(v122 + 56), *((uint64_t *)&v170 + 1), v172));
                    v131 = v166;
                    v132 = v167;
                    v166 = 0;
                    v167 = &str_110;
                    v133 = *(_QWORD *)(v125 + 8);
                    v134 = v131 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v125 & 1;
                    *(_QWORD *)(v125 + 8) = v132;
                    v173 = v134;
                    v174 = v133;
                    *(_QWORD *)v125 = v131;
                    re::StringID::destroyString((re::StringID *)&v173);
                    *(_DWORD *)(v125 + 16) = v168;
                    re::DynamicArray<re::RigComponentConstraint>::operator=(v130, (uint64_t)&v169);
                    if (v169)
                    {
                      if (v172)
                        (*(void (**)(void))(*(_QWORD *)v169 + 40))();
                      v172 = 0;
                      v170 = 0uLL;
                      v169 = 0;
                      ++v171;
                    }
                    re::StringID::destroyString((re::StringID *)&v166);
                  }
                }
              }
              if (v161)
              {
                if (v165)
                  (*(void (**)(void))(*(_QWORD *)v161 + 40))();
                v165 = 0;
                v162 = 0;
                v163 = 0;
                v161 = 0;
                ++v164;
              }
              re::StringID::destroyString((re::StringID *)&v158);
              v98 -= 64;
            }
            while (v97-- > 2);
          }
          return;
        }
        v10 = a1 + (v9 >> 1 << 6);
        if ((unint64_t)v8 <= 0x2000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1 + (v9 >> 1 << 6), a1, (uint64_t)v155);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1, a1 + (v9 >> 1 << 6), (uint64_t)v155);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1 + 64, v10 - 64, a2 - 128);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1 + 128, a1 + 64 + (v9 >> 1 << 6), a2 - 192);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(v10 - 64, a1 + (v9 >> 1 << 6), a1 + 64 + (v9 >> 1 << 6));
          std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a1, (uint64_t *)(a1 + (v9 >> 1 << 6)));
        }
        --a3;
        if ((a4 & 1) == 0
          && !re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a1 - 24), *(float **)(a1 - 8), *(_QWORD *)(a1 + 40), *(float **)(a1 + 56)))
        {
          v37 = *(_QWORD *)a1;
          v38 = *(void **)(a1 + 8);
          v166 = *(_QWORD *)a1 & 1;
          v166 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL | v37 & 1;
          v167 = v38;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = &str_110;
          v168 = *(_DWORD *)(a1 + 16);
          v169 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)&v170 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = 0;
          *((_QWORD *)&v170 + 1) = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = 0;
          v172 = *(float **)(a1 + 56);
          *(_QWORD *)(a1 + 56) = 0;
          ++*(_DWORD *)(a1 + 48);
          v171 = 1;
          if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*((uint64_t *)&v170 + 1), v172, *(_QWORD *)(a2 - 24), *(float **)(a2 - 8)))
          {
            v39 = a1;
            do
            {
              v7 = (uint64_t *)(v39 + 64);
              v40 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*((uint64_t *)&v170 + 1), v172, *(_QWORD *)(v39 + 104), *(float **)(v39 + 120));
              v39 = (uint64_t)v7;
            }
            while (!v40);
          }
          else
          {
            v41 = (uint64_t *)(a1 + 64);
            do
            {
              v7 = v41;
              if ((unint64_t)v41 >= a2)
                break;
              v42 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*((uint64_t *)&v170 + 1), v172, v41[5], (float *)v41[7]);
              v41 = v7 + 8;
            }
            while (!v42);
          }
          v43 = (uint64_t *)a2;
          if ((unint64_t)v7 < a2)
          {
            v44 = a2;
            do
            {
              v43 = (uint64_t *)(v44 - 64);
              v45 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*((uint64_t *)&v170 + 1), v172, *(_QWORD *)(v44 - 24), *(float **)(v44 - 8));
              v44 = (unint64_t)v43;
            }
            while (v45);
          }
          while (v7 < v43)
          {
            std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>(v7, v43);
            do
            {
              v46 = v7[13];
              v47 = (float *)v7[15];
              v7 += 8;
            }
            while (!re::BlendSpaceBuilder::build(void)::$_0::operator()(*((uint64_t *)&v170 + 1), v172, v46, v47));
            do
            {
              v48 = *(v43 - 3);
              v49 = (float *)*(v43 - 1);
              v43 -= 8;
            }
            while (re::BlendSpaceBuilder::build(void)::$_0::operator()(*((uint64_t *)&v170 + 1), v172, v48, v49));
          }
          if (v7 - 8 != (uint64_t *)a1)
          {
            v50 = *(v7 - 8);
            v51 = *(v7 - 7);
            *(v7 - 8) = 0;
            *(v7 - 7) = (uint64_t)&str_110;
            v52 = *(void **)(a1 + 8);
            v53 = v50 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)a1 & 1;
            *(_QWORD *)(a1 + 8) = v51;
            v158 = v53;
            v159 = v52;
            *(_QWORD *)a1 = v50;
            re::StringID::destroyString((re::StringID *)&v158);
            *(_DWORD *)(a1 + 16) = *((_DWORD *)v7 - 12);
            re::DynamicArray<re::RigComponentConstraint>::operator=(a1 + 24, (uint64_t)(v7 - 5));
          }
          v54 = v166;
          v55 = (uint64_t)v167;
          v166 = 0;
          v167 = &str_110;
          v56 = (void *)*(v7 - 7);
          v57 = v54 & 0xFFFFFFFFFFFFFFFELL | *(v7 - 8) & 1;
          *(v7 - 7) = v55;
          v158 = v57;
          v159 = v56;
          *(v7 - 8) = v54;
          re::StringID::destroyString((re::StringID *)&v158);
          *((_DWORD *)v7 - 12) = v168;
          re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v7 - 5), (uint64_t)&v169);
          if (v169)
          {
            if (v172)
              (*(void (**)(void))(*(_QWORD *)v169 + 40))();
            v172 = 0;
            v170 = 0uLL;
            v169 = 0;
            ++v171;
          }
          re::StringID::destroyString((re::StringID *)&v166);
          a4 = 0;
          continue;
        }
        v11 = 0;
        v12 = *(_QWORD *)a1;
        v13 = *(void **)(a1 + 8);
        v166 = *(_QWORD *)a1 & 1;
        v166 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
        v167 = v13;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = &str_110;
        v14 = *(_DWORD *)(a1 + 16);
        v169 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = 0;
        v15 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)&v170 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = 0;
        *((_QWORD *)&v170 + 1) = v15;
        *(_QWORD *)(a1 + 40) = 0;
        v172 = *(float **)(a1 + 56);
        ++*(_DWORD *)(a1 + 48);
        v168 = v14;
        *(_QWORD *)(a1 + 56) = 0;
        v171 = 1;
        do
        {
          v16 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a1 + v11 + 104), *(float **)(a1 + v11 + 120), *((uint64_t *)&v170 + 1), v172);
          v11 += 64;
        }
        while (v16);
        v17 = a1 + v11;
        v18 = a2;
        if (v11 == 64)
        {
          v21 = a2;
          while (v17 < v21)
          {
            v19 = (uint64_t *)(v21 - 64);
            v22 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(v21 - 24), *(float **)(v21 - 8), *((uint64_t *)&v170 + 1), v172);
            v21 = (unint64_t)v19;
            if (v22)
              goto LABEL_20;
          }
          v19 = (uint64_t *)v21;
        }
        else
        {
          do
          {
            v19 = (uint64_t *)(v18 - 64);
            v20 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(v18 - 24), *(float **)(v18 - 8), *((uint64_t *)&v170 + 1), v172);
            v18 = (unint64_t)v19;
          }
          while (!v20);
        }
LABEL_20:
        v7 = (uint64_t *)(a1 + v11);
        if (v17 < (unint64_t)v19)
        {
          v23 = v19;
          do
          {
            std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>(v7, v23);
            do
            {
              v24 = v7[13];
              v25 = (float *)v7[15];
              v7 += 8;
            }
            while (re::BlendSpaceBuilder::build(void)::$_0::operator()(v24, v25, *((uint64_t *)&v170 + 1), v172));
            do
            {
              v26 = *(v23 - 3);
              v27 = (float *)*(v23 - 1);
              v23 -= 8;
            }
            while (!re::BlendSpaceBuilder::build(void)::$_0::operator()(v26, v27, *((uint64_t *)&v170 + 1), v172));
          }
          while (v7 < v23);
        }
        if (v7 - 8 != (uint64_t *)a1)
        {
          v28 = *(v7 - 8);
          v29 = *(v7 - 7);
          *(v7 - 8) = 0;
          *(v7 - 7) = (uint64_t)&str_110;
          v30 = *(void **)(a1 + 8);
          v31 = v28 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)a1 & 1;
          *(_QWORD *)(a1 + 8) = v29;
          v158 = v31;
          v159 = v30;
          *(_QWORD *)a1 = v28;
          re::StringID::destroyString((re::StringID *)&v158);
          *(_DWORD *)(a1 + 16) = *((_DWORD *)v7 - 12);
          re::DynamicArray<re::RigComponentConstraint>::operator=(a1 + 24, (uint64_t)(v7 - 5));
        }
        v32 = v166;
        v33 = (uint64_t)v167;
        v166 = 0;
        v167 = &str_110;
        v34 = (void *)*(v7 - 7);
        v35 = v32 & 0xFFFFFFFFFFFFFFFELL | *(v7 - 8) & 1;
        *(v7 - 7) = v33;
        v158 = v35;
        v159 = v34;
        *(v7 - 8) = v32;
        re::StringID::destroyString((re::StringID *)&v158);
        *((_DWORD *)v7 - 12) = v168;
        re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v7 - 5), (uint64_t)&v169);
        if (v169)
        {
          if (v172)
            (*(void (**)(void))(*(_QWORD *)v169 + 40))();
          v172 = 0;
          v170 = 0uLL;
          v169 = 0;
          ++v171;
        }
        re::StringID::destroyString((re::StringID *)&v166);
        if (v17 < (unint64_t)v19)
        {
LABEL_35:
          std::__introsort<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *,false>(a1, v7 - 8, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1, (uint64_t)(v7 - 8));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>((uint64_t)v7, a2))
        {
          if ((v36 & 1) != 0)
            continue;
          goto LABEL_35;
        }
        a2 = (unint64_t)(v7 - 8);
        if ((v36 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = ((char *)a2 - (char *)v10) >> 4;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *(a2 - 2);
        v20 = a2 - 2;
        if ((*a3)(v21, *v10))
        {
          v23 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *(_OWORD *)v20;
          *(_OWORD *)v20 = v23;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v10 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v10 + 2, v10 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2, a3);
        return;
      default:
        if (v13 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((uint64_t)v10, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((uint64_t)v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[2 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(&v10[2 * (v14 >> 1)], v10, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, &v10[2 * (v14 >> 1)], a2 - 2, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10 + 2, v16 - 2, a2 - 4, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10 + 4, &v10[2 * v15 + 2], a2 - 6, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v16 - 2, v16, &v10[2 * v15 + 2], a3);
            v22 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v16;
            *(_OWORD *)v16 = v22;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(*(v10 - 2), *v10) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &>(v10, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v17 = (char *)std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &>((__int128 *)v10, (__int128 *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((char *)v10, v17, a3);
          v10 = (uint64_t *)(v17 + 16);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v17 + 16, (char *)a2, a3))
          {
            v11 = v12 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, v17, a3, -v12, a5 & 1);
            v10 = (uint64_t *)(v17 + 16);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (uint64_t *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,re::Pair<void const*,void *,true>*>((char *)v10, (char *)a2, (char *)a2, (uint64_t (**)(unint64_t, unint64_t))a3, a6);
        return;
    }
  }
}

  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = ((char *)a2 - (char *)v10) >> 4;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *(a2 - 2);
        v20 = a2 - 2;
        if ((*a3)(v21, *v10))
        {
          v23 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *(_OWORD *)v20;
          *(_OWORD *)v20 = v23;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v10 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v10 + 2, v10 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2, a3);
        return;
      default:
        if (v13 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((uint64_t)v10, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((uint64_t)v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[2 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(&v10[2 * (v14 >> 1)], v10, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, &v10[2 * (v14 >> 1)], a2 - 2, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10 + 2, v16 - 2, a2 - 4, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10 + 4, &v10[2 * v15 + 2], a2 - 6, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v16 - 2, v16, &v10[2 * v15 + 2], a3);
            v22 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v16;
            *(_OWORD *)v16 = v22;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(*(v10 - 2), *v10) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &>(v10, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v17 = (char *)std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &>((__int128 *)v10, (__int128 *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((char *)v10, v17, a3);
          v10 = (uint64_t *)(v17 + 16);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v17 + 16, (char *)a2, a3))
          {
            v11 = v12 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, v17, a3, -v12, a5 & 1);
            v10 = (uint64_t *)(v17 + 16);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (uint64_t *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,re::Pair<void const*,void *,true>*>((char *)v10, (char *)a2, (char *)a2, (uint64_t (**)(unint64_t, unint64_t))a3, a6);
        return;
    }
  }
}

  v8 = (uint64_t)a2 - 56;
  v92 = (uint64_t)a2 - 168;
  v93 = (uint64_t)(a2 - 7);
  v9 = a1;
  v95 = (unint64_t)a2;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v8, a1))
        {
          v48 = *(_OWORD *)a1;
          v102 = *(_QWORD *)(a1 + 16);
          v101 = v48;
          v49 = *(_OWORD *)v8;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 + 16);
          *(_OWORD *)a1 = v49;
          v50 = v101;
          *(_QWORD *)(v8 + 16) = v102;
          *(_OWORD *)v8 = v50;
          v101 = *(_OWORD *)(a1 + 24);
          v51 = v101;
          v102 = *(_QWORD *)(a1 + 40);
          v52 = v102;
          v53 = *((_QWORD *)a2 - 2);
          *(_OWORD *)(a1 + 24) = *(a2 - 2);
          *(_QWORD *)(a1 + 40) = v53;
          *((_QWORD *)a2 - 2) = v52;
          *(a2 - 2) = v51;
          LOBYTE(v52) = *(_BYTE *)(a1 + 48);
          *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 - 8);
          *((_BYTE *)a2 - 8) = v52;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, a1 + 56, v8);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, a1 + 56, a1 + 112, v8);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *,0>(a1, a1 + 56, a1 + 112, a1 + 168, v8);
        return;
      default:
        if (v10 <= 1343)
        {
          if ((a4 & 1) != 0)
          {
            if ((__int128 *)a1 != a2)
            {
              v54 = a1 + 56;
              if ((__int128 *)(a1 + 56) != a2)
              {
                v55 = 0;
                v56 = a1;
                do
                {
                  v57 = v54;
                  if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v54, v56))
                  {
                    v58 = *(_OWORD *)v57;
                    v102 = *(_QWORD *)(v57 + 16);
                    v101 = v58;
                    *(_QWORD *)(v57 + 8) = 0;
                    *(_QWORD *)(v57 + 16) = 0;
                    *(_QWORD *)v57 = 0;
                    v103 = *(_OWORD *)(v56 + 80);
                    v104 = *(_QWORD *)(v56 + 96);
                    *(_QWORD *)(v56 + 88) = 0;
                    *(_QWORD *)(v56 + 96) = 0;
                    *(_QWORD *)(v56 + 80) = 0;
                    v105 = *(_BYTE *)(v56 + 104);
                    v59 = v55;
                    while (1)
                    {
                      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1 + v59 + 56, (__int128 *)(a1 + v59));
                      if (!v59)
                        break;
                      v59 -= 56;
                      if ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v101, v59 + a1) & 1) == 0)
                      {
                        v60 = a1 + v59 + 56;
                        goto LABEL_76;
                      }
                    }
                    v60 = a1;
LABEL_76:
                    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v60, &v101);
                    a2 = (__int128 *)v95;
                    if (SHIBYTE(v104) < 0)
                      operator delete((void *)v103);
                    if (SHIBYTE(v102) < 0)
                      operator delete((void *)v101);
                  }
                  v54 = v57 + 56;
                  v55 += 56;
                  v56 = v57;
                }
                while ((__int128 *)(v57 + 56) != a2);
              }
            }
          }
          else if ((__int128 *)a1 != a2)
          {
            v89 = a1 + 56;
            if ((__int128 *)(a1 + 56) != a2)
            {
              do
              {
                v90 = v89;
                if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v89, a1))
                {
                  v91 = *(_OWORD *)v90;
                  v102 = *(_QWORD *)(v90 + 16);
                  v101 = v91;
                  *(_QWORD *)(v90 + 8) = 0;
                  *(_QWORD *)(v90 + 16) = 0;
                  *(_QWORD *)v90 = 0;
                  v103 = *(_OWORD *)(a1 + 80);
                  v104 = *(_QWORD *)(a1 + 96);
                  *(_QWORD *)(a1 + 88) = 0;
                  *(_QWORD *)(a1 + 96) = 0;
                  *(_QWORD *)(a1 + 80) = 0;
                  v105 = *(_BYTE *)(a1 + 104);
                  do
                  {
                    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1 + 56, (__int128 *)a1);
                    a1 -= 56;
                  }
                  while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v101, a1) & 1) != 0);
                  std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1 + 56, &v101);
                  if (SHIBYTE(v104) < 0)
                    operator delete((void *)v103);
                  if (SHIBYTE(v102) < 0)
                    operator delete((void *)v101);
                }
                v89 = v90 + 56;
                a1 = v90;
              }
              while ((__int128 *)(v90 + 56) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)a1 != a2)
          {
            v61 = (unint64_t)(v11 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = (__int128 *)(a1 + 56 * v64);
                if (2 * v62 + 2 < v11
                  && reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a1 + 56 * v64, (uint64_t)v65 + 56))
                {
                  v65 = (__int128 *)((char *)v65 + 56);
                  v64 = 2 * v63 + 2;
                }
                v66 = a1 + 56 * v63;
                a2 = (__int128 *)v95;
                if ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)v65, v66) & 1) == 0)
                {
                  v67 = *(_OWORD *)v66;
                  v102 = *(_QWORD *)(v66 + 16);
                  v101 = v67;
                  *(_QWORD *)(v66 + 8) = 0;
                  *(_QWORD *)(v66 + 16) = 0;
                  *(_QWORD *)v66 = 0;
                  v68 = *(_OWORD *)(v66 + 24);
                  v104 = *(_QWORD *)(v66 + 40);
                  v103 = v68;
                  *(_QWORD *)(v66 + 32) = 0;
                  *(_QWORD *)(v66 + 40) = 0;
                  *(_QWORD *)(v66 + 24) = 0;
                  v105 = *(_BYTE *)(v66 + 48);
                  do
                  {
                    v69 = (uint64_t)v65;
                    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v66, v65);
                    if (v61 < v64)
                      break;
                    v70 = (2 * v64) | 1;
                    v65 = (__int128 *)(a1 + 56 * v70);
                    v71 = 2 * v64 + 2;
                    if (v71 < v11
                      && reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a1 + 56 * v70, (uint64_t)v65 + 56))
                    {
                      v65 = (__int128 *)((char *)v65 + 56);
                      v70 = v71;
                    }
                    v66 = v69;
                    v64 = v70;
                  }
                  while (!reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)v65, (uint64_t)&v101));
                  std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v69, &v101);
                  if (SHIBYTE(v104) < 0)
                    operator delete((void *)v103);
                  a2 = (__int128 *)v95;
                  if (SHIBYTE(v102) < 0)
                    operator delete((void *)v101);
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v72 = v10 / 0x38uLL;
            v94 = (__int128 *)(a1 + 24);
            do
            {
              v73 = 0;
              v74 = *(_OWORD *)a1;
              v97 = *(_QWORD *)(a1 + 16);
              *(_OWORD *)v96 = v74;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v75 = *v94;
              v99 = *(_QWORD *)(a1 + 40);
              __p = v75;
              *(_QWORD *)(a1 + 32) = 0;
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)v94 = 0;
              v100 = *(_BYTE *)(a1 + 48);
              v76 = a1;
              do
              {
                v77 = v76 + 56 * v73 + 56;
                v78 = (2 * v73) | 1;
                v79 = 2 * v73 + 2;
                if (v79 < v72
                  && reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v76 + 56 * v73 + 56, v76 + 56 * v73 + 112))
                {
                  v77 += 56;
                  v78 = v79;
                }
                std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v76, (__int128 *)v77);
                v76 = v77;
                v73 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              v80 = (__int128 *)((char *)a2 - 56);
              if ((__int128 *)v77 == (__int128 *)((char *)a2 - 56))
              {
                v81 = (__int128 *)((char *)a2 - 56);
                std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v77, (__int128 *)v96);
              }
              else
              {
                std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v77, v80);
                v81 = (__int128 *)((char *)a2 - 56);
                std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>((uint64_t)v80, (__int128 *)v96);
                v82 = v77 - a1 + 56;
                if (v82 >= 57)
                {
                  v83 = (v82 / 0x38uLL - 2) >> 1;
                  v84 = (__int128 *)(a1 + 56 * v83);
                  if (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)v84, v77))
                  {
                    v85 = *(_OWORD *)v77;
                    v102 = *(_QWORD *)(v77 + 16);
                    v101 = v85;
                    *(_QWORD *)(v77 + 8) = 0;
                    *(_QWORD *)(v77 + 16) = 0;
                    *(_QWORD *)v77 = 0;
                    v86 = *(_OWORD *)(v77 + 24);
                    v104 = *(_QWORD *)(v77 + 40);
                    v103 = v86;
                    *(_QWORD *)(v77 + 32) = 0;
                    *(_QWORD *)(v77 + 40) = 0;
                    *(_QWORD *)(v77 + 24) = 0;
                    v105 = *(_BYTE *)(v77 + 48);
                    do
                    {
                      v87 = (uint64_t)v84;
                      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v77, v84);
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = (__int128 *)(a1 + 56 * v83);
                      v77 = v87;
                    }
                    while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)v84, (uint64_t)&v101) & 1) != 0);
                    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v87, &v101);
                    if (SHIBYTE(v104) < 0)
                      operator delete((void *)v103);
                    if (SHIBYTE(v102) < 0)
                      operator delete((void *)v101);
                  }
                }
              }
              if (SHIBYTE(v99) < 0)
                operator delete((void *)__p);
              if (SHIBYTE(v97) < 0)
                operator delete(v96[0]);
              v88 = v72-- <= 2;
              a2 = v81;
            }
            while (!v88);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = a1 + 56 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0x1C01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(v13, a1, v8);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, v13, v8);
          v14 = 56 * v12;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1 + 56, v14 + a1 - 56, v93);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1 + 112, a1 + 56 + v14, v92);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(v14 + a1 - 56, v13, a1 + 56 + v14);
          v15 = *(_OWORD *)a1;
          v102 = *(_QWORD *)(a1 + 16);
          v101 = v15;
          v16 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v16;
          v17 = v101;
          *(_QWORD *)(v13 + 16) = v102;
          *(_OWORD *)v13 = v17;
          v101 = *(_OWORD *)(a1 + 24);
          v18 = v101;
          v102 = *(_QWORD *)(a1 + 40);
          v19 = v102;
          v20 = *(_QWORD *)(v13 + 40);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(v13 + 24);
          *(_QWORD *)(a1 + 40) = v20;
          *(_QWORD *)(v13 + 40) = v19;
          *(_OWORD *)(v13 + 24) = v18;
          LOBYTE(v19) = *(_BYTE *)(a1 + 48);
          *(_BYTE *)(a1 + 48) = *(_BYTE *)(v13 + 48);
          *(_BYTE *)(v13 + 48) = v19;
        }
        --a3;
        if ((a4 & 1) == 0
          && (reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(a1 - 56, a1) & 1) == 0)
        {
          v37 = *(_OWORD *)a1;
          v102 = *(_QWORD *)(a1 + 16);
          v101 = v37;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v38 = *(_OWORD *)(a1 + 24);
          v104 = *(_QWORD *)(a1 + 40);
          v103 = v38;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          v105 = *(_BYTE *)(a1 + 48);
          if ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v101, v8) & 1) != 0)
          {
            v9 = a1;
            a2 = (__int128 *)v95;
            do
              v9 += 56;
            while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v101, v9) & 1) == 0);
          }
          else
          {
            v39 = a1 + 56;
            a2 = (__int128 *)v95;
            do
            {
              v9 = v39;
              if (v39 >= v95)
                break;
              v40 = reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v101, v39);
              v39 = v9 + 56;
            }
            while (!v40);
          }
          v41 = (unint64_t)a2;
          if (v9 < (unint64_t)a2)
          {
            v41 = (unint64_t)a2;
            do
              v41 -= 56;
            while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v101, v41) & 1) != 0);
          }
          while (v9 < v41)
          {
            v42 = *(_OWORD *)v9;
            v97 = *(_QWORD *)(v9 + 16);
            *(_OWORD *)v96 = v42;
            v43 = *(_OWORD *)v41;
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v41 + 16);
            *(_OWORD *)v9 = v43;
            v44 = *(_OWORD *)v96;
            *(_QWORD *)(v41 + 16) = v97;
            *(_OWORD *)v41 = v44;
            v45 = *(_QWORD *)(v9 + 40);
            v46 = *(_OWORD *)(v9 + 24);
            v47 = *(_QWORD *)(v41 + 40);
            *(_OWORD *)(v9 + 24) = *(_OWORD *)(v41 + 24);
            *(_QWORD *)(v9 + 40) = v47;
            *(_OWORD *)(v41 + 24) = v46;
            *(_QWORD *)(v41 + 40) = v45;
            LOBYTE(v45) = *(_BYTE *)(v9 + 48);
            *(_BYTE *)(v9 + 48) = *(_BYTE *)(v41 + 48);
            *(_BYTE *)(v41 + 48) = v45;
            do
              v9 += 56;
            while (!reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v101, v9));
            do
              v41 -= 56;
            while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()((uint64_t)&v101, v41) & 1) != 0);
          }
          if (v9 - 56 != a1)
            std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1, (__int128 *)(v9 - 56));
          std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(v9 - 56, &v101);
          if (SHIBYTE(v104) < 0)
            operator delete((void *)v103);
          if (SHIBYTE(v102) < 0)
            operator delete((void *)v101);
          a4 = 0;
          continue;
        }
        v21 = 0;
        v22 = *(_OWORD *)a1;
        v102 = *(_QWORD *)(a1 + 16);
        v101 = v22;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v23 = *(_OWORD *)(a1 + 24);
        v104 = *(_QWORD *)(a1 + 40);
        v103 = v23;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        v105 = *(_BYTE *)(a1 + 48);
        do
          v21 += 56;
        while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v21 + a1, (uint64_t)&v101) & 1) != 0);
        v24 = a1 + v21;
        v25 = v95;
        v26 = v21 == 56;
        a2 = (__int128 *)v95;
        if (v26)
        {
          v25 = v95;
          do
          {
            if (v24 >= v25)
              break;
            v25 -= 56;
          }
          while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v25, (uint64_t)&v101) & 1) == 0);
        }
        else
        {
          do
            v25 -= 56;
          while (!reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v25, (uint64_t)&v101));
        }
        if (v24 >= v25)
        {
          v35 = (__int128 *)(v24 - 56);
        }
        else
        {
          v27 = v24;
          v28 = v25;
          do
          {
            v29 = *(_OWORD *)v27;
            v97 = *(_QWORD *)(v27 + 16);
            *(_OWORD *)v96 = v29;
            v30 = *(_OWORD *)v28;
            *(_QWORD *)(v27 + 16) = *(_QWORD *)(v28 + 16);
            *(_OWORD *)v27 = v30;
            v31 = *(_OWORD *)v96;
            *(_QWORD *)(v28 + 16) = v97;
            *(_OWORD *)v28 = v31;
            v32 = *(_QWORD *)(v27 + 40);
            v33 = *(_OWORD *)(v27 + 24);
            v34 = *(_QWORD *)(v28 + 40);
            *(_OWORD *)(v27 + 24) = *(_OWORD *)(v28 + 24);
            *(_QWORD *)(v27 + 40) = v34;
            *(_OWORD *)(v28 + 24) = v33;
            *(_QWORD *)(v28 + 40) = v32;
            LOBYTE(v32) = *(_BYTE *)(v27 + 48);
            *(_BYTE *)(v27 + 48) = *(_BYTE *)(v28 + 48);
            *(_BYTE *)(v28 + 48) = v32;
            do
              v27 += 56;
            while ((reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v27, (uint64_t)&v101) & 1) != 0);
            do
              v28 -= 56;
            while (!reality_archive_file_pack(char const*,char const*,BOOL)::$_0::operator()(v28, (uint64_t)&v101));
          }
          while (v27 < v28);
          v35 = (__int128 *)(v27 - 56);
        }
        if (v35 != (__int128 *)a1)
          std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>(a1, v35);
        std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,std::string,BOOL>,std::tuple<std::string,std::string,BOOL>,std::string,std::string,BOOL,0ul,1ul,2ul>((uint64_t)v35, &v101);
        if (SHIBYTE(v104) < 0)
          operator delete((void *)v103);
        if (SHIBYTE(v102) < 0)
          operator delete((void *)v101);
        if (v24 < v25)
        {
LABEL_35:
          std::__introsort<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *,false>(a1, v35, a3, a4 & 1);
          a4 = 0;
          v9 = (unint64_t)v35 + 56;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>(a1, (uint64_t)v35);
        v9 = (unint64_t)v35 + 56;
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,reality_archive_file_pack(char const*,char const*,BOOL)::$_0 &,std::tuple<std::string,std::string,BOOL> *>((uint64_t)v35 + 56, v95))
        {
          if (v36)
            continue;
          goto LABEL_35;
        }
        a2 = v35;
        if (!v36)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unint64_t **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (*v36 < **(_QWORD **)v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), (unint64_t **)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), (unint64_t **)(v8 + 32), (__n128 *)(v8 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (unint64_t **)(v8 + 16);
          v39 = (unint64_t **)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(unint64_t **)(v41 + 16);
                if (*v43 < **(_QWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = v37;
              v78 = a1[2];
              if (*v78 < **a1)
              {
                v79 = a1[3];
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v81 = *(v80 - 4);
                  v80 -= 2;
                }
                while (*v78 < *v81);
                *v80 = v78;
                v80[1] = v79;
              }
              v37 = v77 + 2;
              a1 = v77;
            }
            while (v77 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unint64_t **)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (unint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v86 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_QWORD **)v67 < **(_QWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if ((unint64_t **)v67 == a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 < **(_QWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_QWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (unint64_t *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13;
            do
            {
              v33 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (unint64_t *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((unint64_t **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13;
            do
            {
              v24 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (unint64_t *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((unint64_t **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, (unint64_t **)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (unint64_t **)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unsigned int **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (*v36 < **(_DWORD **)v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), (unsigned int **)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), (unsigned int **)(v8 + 32), (__n128 *)(v8 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (unsigned int **)(v8 + 16);
          v39 = (unsigned int **)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(unsigned int **)(v41 + 16);
                if (*v43 < **(_DWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_DWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = v37;
              v78 = a1[2];
              if (*v78 < **a1)
              {
                v79 = a1[3];
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v81 = *(v80 - 4);
                  v80 -= 2;
                }
                while (*v78 < *v81);
                *v80 = v78;
                v80[1] = v79;
              }
              v37 = v77 + 2;
              a1 = v77;
            }
            while (v77 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unsigned int **)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unsigned int **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (unsigned int **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unsigned int **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v86 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_DWORD **)v67 < **(_DWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if ((unsigned int **)v67 == a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_DWORD **)v67;
                  if (**(_DWORD **)v72 < **(_DWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_DWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unsigned int **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_DWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (unsigned int *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13;
            do
            {
              v33 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (unsigned int *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((unsigned int **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13;
            do
            {
              v24 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (unsigned int *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((unsigned int **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, (unsigned int **)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (unsigned int **)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v86 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v86;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(unsigned __int16 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (unsigned __int16 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v78 = v37;
              v79 = a1[2];
              if (*v79 < **a1)
              {
                v80 = a1[3];
                v81 = v78;
                do
                {
                  *(_OWORD *)v81 = *((_OWORD *)v81 - 1);
                  v82 = *(v81 - 4);
                  v81 -= 2;
                }
                while (*v79 < *v82);
                *v81 = v79;
                v81[1] = v80;
              }
              v37 = v78 + 2;
              a1 = v78;
            }
            while (v78 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v64 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      v64 = v61 <= v62 ? *v52[2] : **v52;
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v64 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v65 = (unint64_t)v9 >> 4;
            do
            {
              v66 = 0;
              v87 = *(_OWORD *)v8;
              v67 = v8;
              do
              {
                v68 = &v67[2 * v66 + 2];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v65 && **v68 < *v68[2])
                {
                  v68 += 2;
                  v69 = v70;
                }
                *(_OWORD *)v67 = *(_OWORD *)v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_OWORD *)v68 = v87;
              }
              else
              {
                *(_OWORD *)v68 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v87;
                v71 = (char *)v68 - (char *)v8 + 16;
                if (v71 >= 17)
                {
                  v72 = (((unint64_t)v71 >> 4) - 2) >> 1;
                  v73 = &v8[2 * v72];
                  v74 = *v68;
                  if (**v73 < **v68)
                  {
                    v75 = v68[1];
                    do
                    {
                      v76 = v68;
                      v68 = v73;
                      *(_OWORD *)v76 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[2 * v72];
                    }
                    while (**v73 < *v74);
                    *v68 = v74;
                    v68[1] = v75;
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v83 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v83;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v85 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v85;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v84;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v86 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v86;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(unsigned __int8 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (unsigned __int8 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v78 = v37;
              v79 = a1[2];
              if (*v79 < **a1)
              {
                v80 = a1[3];
                v81 = v78;
                do
                {
                  *(_OWORD *)v81 = *((_OWORD *)v81 - 1);
                  v82 = *(v81 - 4);
                  v81 -= 2;
                }
                while (*v79 < *v82);
                *v81 = v79;
                v81[1] = v80;
              }
              v37 = v78 + 2;
              a1 = v78;
            }
            while (v78 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v64 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      v64 = v61 <= v62 ? *v52[2] : **v52;
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v64 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v65 = (unint64_t)v9 >> 4;
            do
            {
              v66 = 0;
              v87 = *(_OWORD *)v8;
              v67 = v8;
              do
              {
                v68 = &v67[2 * v66 + 2];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v65 && **v68 < *v68[2])
                {
                  v68 += 2;
                  v69 = v70;
                }
                *(_OWORD *)v67 = *(_OWORD *)v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_OWORD *)v68 = v87;
              }
              else
              {
                *(_OWORD *)v68 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v87;
                v71 = (char *)v68 - (char *)v8 + 16;
                if (v71 >= 17)
                {
                  v72 = (((unint64_t)v71 >> 4) - 2) >> 1;
                  v73 = &v8[2 * v72];
                  v74 = *v68;
                  if (**v73 < **v68)
                  {
                    v75 = v68[1];
                    do
                    {
                      v76 = v68;
                      v68 = v73;
                      *(_OWORD *)v76 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[2 * v72];
                    }
                    while (**v73 < *v74);
                    *v68 = v74;
                    v68[1] = v75;
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v83 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v83;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v85 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v85;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v84;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (uint64_t **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_QWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 < **(_QWORD **)v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)&a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (__n128 *)a2[-1].n128_u64);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_QWORD **)(v41 + 16);
                if (*v43 < **(_QWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *v79 = v79[-1];
                  v80 = (uint64_t *)v79[-2].n128_u64[0];
                  --v79;
                }
                while (*v77 < *v80);
                v79->n128_u64[0] = (unint64_t)v77;
                v79->n128_u64[1] = (unint64_t)v78;
              }
              v37 = v76 + 1;
              a1 = (uint64_t **)v76;
            }
            while (&v76[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (uint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (uint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (uint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_QWORD **)v67 < **(_QWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v85;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 < **(_QWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (uint64_t **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, (uint64_t **)&a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], (uint64_t **)&a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, (uint64_t **)&a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], (uint64_t **)&a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= *(_QWORD *)a2[-1].n128_u64[0])
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= (_QWORD **)a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_QWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v83;
            v32 = *v13;
            do
            {
              v33 = *(uint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (uint64_t *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((uint64_t **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= (uint64_t **)v19)
              break;
            v21 = (_QWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < (uint64_t **)v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v82;
            v23 = *v13;
            do
            {
              v24 = *(uint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (uint64_t *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((uint64_t **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (uint64_t **)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (int **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_DWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 < **(_DWORD **)v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)&a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)(v8 + 32), (__n128 *)a2[-1].n128_u64);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_DWORD **)(v41 + 16);
                if (*v43 < **(_DWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_DWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *v79 = v79[-1];
                  v80 = (int *)v79[-2].n128_u64[0];
                  --v79;
                }
                while (*v77 < *v80);
                v79->n128_u64[0] = (unint64_t)v77;
                v79->n128_u64[1] = (unint64_t)v78;
              }
              v37 = v76 + 1;
              a1 = (int **)v76;
            }
            while (&v76[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (int **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (int **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (int **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_DWORD **)v67 < **(_DWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v85;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_DWORD **)v67;
                  if (**(_DWORD **)v72 < **(_DWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_DWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (int **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, (int **)&a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], (int **)&a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, (int **)&a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], (int **)&a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= *(_DWORD *)a2[-1].n128_u64[0])
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= (_DWORD **)a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_DWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(_DWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_DWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v83;
            v32 = *v13;
            do
            {
              v33 = *(int **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (int *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((int **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= (int **)v19)
              break;
            v21 = (_DWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = (_DWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < (int **)v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v82;
            v23 = *v13;
            do
            {
              v24 = *(int **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (int *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((int **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (int **)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(__int16 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (__int16 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *(_OWORD *)v79 = *((_OWORD *)v79 - 1);
                  v80 = *(v79 - 4);
                  v79 -= 2;
                }
                while (*v77 < *v80);
                *v79 = v77;
                v79[1] = v78;
              }
              v37 = v76 + 2;
              a1 = v76;
            }
            while (v76 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  LOWORD(v54) = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    LOWORD(v54) = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (**v56 <= (__int16)v54)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      LOWORD(v61) = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        LOWORD(v61) = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (*v57 <= (__int16)v61);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = v8;
              do
              {
                v67 = &v66[2 * v65 + 2];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **v67 < *v67[2])
                {
                  v67 += 2;
                  v68 = v69;
                }
                *(_OWORD *)v66 = *(_OWORD *)v67;
                v66 = v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if (v67 == a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v85;
                v70 = (char *)v67 - (char *)v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = &v8[2 * v71];
                  v73 = *v67;
                  if (**v72 < **v67)
                  {
                    v74 = v67[1];
                    do
                    {
                      v75 = v67;
                      v67 = v72;
                      *(_OWORD *)v75 = *(_OWORD *)v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = &v8[2 * v71];
                    }
                    while (**v72 < *v73);
                    *v67 = v73;
                    v67[1] = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v83;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v82;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2 - 2;
  v93 = a2 - 4;
  v94 = a2;
  v91 = a2 - 6;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = v94;
    v10 = (char *)v94 - (char *)v8;
    v11 = ((char *)v94 - (char *)v8) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v33 = v94 - 2;
        if (re::DynamicString::operator<(*(v94 - 2), *v8))
        {
          v98 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v33;
          *(_OWORD *)v33 = v98;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v7);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v8 + 4, v7);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v8 + 4, v8 + 6, v7);
        return;
      default:
        if (v10 <= 383)
        {
          v34 = v8 + 2;
          v36 = v8 == v94 || v34 == v94;
          if ((a4 & 1) != 0)
          {
            if (!v36)
            {
              v37 = 0;
              v38 = v8;
              do
              {
                v39 = v34;
                v40 = v38[2];
                if (re::DynamicString::operator<(v40, *v38))
                {
                  v41 = v38[3];
                  v42 = v37;
                  while (1)
                  {
                    v43 = (char *)v8 + v42;
                    *(_OWORD *)((char *)v8 + v42 + 16) = *(_OWORD *)((char *)v8 + v42);
                    if (!v42)
                      break;
                    v42 -= 16;
                    if ((re::DynamicString::operator<(v40, *((_QWORD *)v43 - 2)) & 1) == 0)
                    {
                      v44 = (uint64_t *)((char *)v8 + v42 + 16);
                      goto LABEL_70;
                    }
                  }
                  v44 = v8;
LABEL_70:
                  *v44 = v40;
                  v44[1] = v41;
                }
                v34 = v39 + 2;
                v37 += 16;
                v38 = v39;
              }
              while (v39 + 2 != v94);
            }
          }
          else if (!v36)
          {
            do
            {
              v83 = v34;
              v84 = a1[2];
              if (re::DynamicString::operator<(v84, *a1))
              {
                v85 = a1[3];
                v86 = v83;
                do
                {
                  v87 = v86 - 2;
                  *(_OWORD *)v86 = *((_OWORD *)v86 - 1);
                  v88 = re::DynamicString::operator<(v84, *(v86 - 4));
                  v86 = v87;
                }
                while ((v88 & 1) != 0);
                *v87 = v84;
                v87[1] = v85;
              }
              v34 = v83 + 2;
              a1 = v83;
            }
            while (v83 + 2 != v94);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != v94)
          {
            v89 = (char *)v94 - (char *)v8;
            v45 = (unint64_t)(v11 - 2) >> 1;
            v46 = v45;
            do
            {
              v47 = v46;
              if (v45 >= v46)
              {
                v48 = (2 * v46) | 1;
                v49 = &a1[2 * v48];
                v50 = 2 * v46 + 2;
                if (v50 >= v11)
                {
                  v56 = *v49;
                }
                else
                {
                  v51 = *v49;
                  v52 = v46;
                  v53 = v49[2];
                  v54 = re::DynamicString::operator<(*v49, v53);
                  v55 = v54 == 0;
                  if (v54)
                    v56 = v53;
                  else
                    v56 = v51;
                  v47 = v52;
                  v45 = (unint64_t)(v11 - 2) >> 1;
                  if (!v55)
                  {
                    v49 += 2;
                    v48 = v50;
                  }
                }
                v57 = &a1[2 * v47];
                v58 = *v57;
                if ((re::DynamicString::operator<(v56, *v57) & 1) == 0)
                {
                  v90 = v57[1];
                  v92 = v47;
                  do
                  {
                    v59 = v57;
                    v57 = v49;
                    *(_OWORD *)v59 = *(_OWORD *)v49;
                    if (v45 < v48)
                      break;
                    v60 = (2 * v48) | 1;
                    v49 = &a1[2 * v60];
                    v61 = 2 * v48 + 2;
                    if (v61 >= v11)
                    {
                      v66 = *v49;
                      v48 = (2 * v48) | 1;
                    }
                    else
                    {
                      v62 = *v49;
                      v63 = v49[2];
                      v64 = re::DynamicString::operator<(*v49, v63);
                      v65 = v64 == 0;
                      if (v64)
                        v66 = v63;
                      else
                        v66 = v62;
                      if (!v65)
                        v49 += 2;
                      v45 = (unint64_t)(v11 - 2) >> 1;
                      v48 = v65 ? v60 : v61;
                    }
                  }
                  while (!re::DynamicString::operator<(v66, v58));
                  v47 = v92;
                  *v57 = v58;
                  v57[1] = v90;
                }
              }
              v46 = v47 - 1;
            }
            while (v47);
            v67 = v89 >> 4;
            v68 = v94;
            do
            {
              v69 = 0;
              v99 = *(_OWORD *)a1;
              v70 = v67 - 2;
              if (v67 < 2)
                v70 = v67 - 1;
              v71 = v70 >> 1;
              v72 = a1;
              do
              {
                v73 = &v72[2 * v69 + 2];
                v74 = (2 * v69) | 1;
                v75 = 2 * v69 + 2;
                if (v75 < v67 && re::DynamicString::operator<(*v73, v72[2 * v69 + 4]))
                {
                  v73 += 2;
                  v74 = v75;
                }
                *(_OWORD *)v72 = *(_OWORD *)v73;
                v72 = v73;
                v69 = v74;
              }
              while (v74 <= v71);
              v68 -= 2;
              if (v73 == v68)
              {
                *(_OWORD *)v73 = v99;
              }
              else
              {
                *(_OWORD *)v73 = *(_OWORD *)v68;
                *(_OWORD *)v68 = v99;
                v76 = (char *)v73 - (char *)a1 + 16;
                if (v76 >= 17)
                {
                  v77 = (((unint64_t)v76 >> 4) - 2) >> 1;
                  v78 = &a1[2 * v77];
                  v79 = *v73;
                  if (re::DynamicString::operator<(*v78, *v73))
                  {
                    v80 = v73[1];
                    do
                    {
                      v81 = v73;
                      v73 = v78;
                      *(_OWORD *)v81 = *(_OWORD *)v78;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = &a1[2 * v77];
                    }
                    while ((re::DynamicString::operator<(*v78, v79) & 1) != 0);
                    *v73 = v79;
                    v73[1] = v80;
                  }
                }
              }
            }
            while (v67-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v8[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v13, v8, v7);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v13, v7);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8 + 2, v13 - 2, v93);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8 + 4, &v8[2 * v12 + 2], v91);
          v9 = v94;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v13 - 2, v13, &v8[2 * v12 + 2]);
          v95 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v95;
        }
        --a3;
        v14 = *v8;
        if ((a4 & 1) == 0 && (re::DynamicString::operator<(*(v8 - 2), *v8) & 1) == 0)
        {
          v26 = v8[1];
          if ((re::DynamicString::operator<(v14, *v7) & 1) != 0)
          {
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while ((re::DynamicString::operator<(v14, v27) & 1) == 0);
          }
          else
          {
            v28 = v8 + 2;
            do
            {
              v8 = v28;
              if (v28 >= v94)
                break;
              v28 += 2;
            }
            while (!re::DynamicString::operator<(v14, *v8));
          }
          v29 = v94;
          if (v8 < v94)
          {
            v29 = v94;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while ((re::DynamicString::operator<(v14, v30) & 1) != 0);
          }
          while (v8 < v29)
          {
            v97 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v97;
            do
            {
              v31 = v8[2];
              v8 += 2;
            }
            while (!re::DynamicString::operator<(v14, v31));
            do
            {
              v32 = *(v29 - 2);
              v29 -= 2;
            }
            while ((re::DynamicString::operator<(v14, v32) & 1) != 0);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v14;
          *(v8 - 1) = v26;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = re::DynamicString::operator<(a1[v15 + 2], v14);
          v15 += 2;
        }
        while ((v17 & 1) != 0);
        v18 = &a1[v15];
        v19 = v9;
        if (v15 == 2)
        {
          v19 = v9;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while ((re::DynamicString::operator<(v21, v14) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (!re::DynamicString::operator<(v20, v14));
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v96 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v96;
            do
            {
              v23 = v8[2];
              v8 += 2;
            }
            while ((re::DynamicString::operator<(v23, v14) & 1) != 0);
            do
            {
              v24 = *(v22 - 2);
              v22 -= 2;
            }
            while (!re::DynamicString::operator<(v24, v14));
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v14;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v25 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v94))
        {
          if (v25)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v25)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_QWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 >> 1 < **(_QWORD **)v8 >> 1)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (_QWORD **)(v8 + 16), &a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (__n128 *)(v8 + 16), (__n128 *)(v8 + 32), a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (__n128 *)(v8 + 16), (__n128 *)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_QWORD **)(v41 + 16);
                if (*v43 >> 1 < **(_QWORD **)v41 >> 1)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >> 1 >= v46 >> 1)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = (uint64_t)v37;
              v78 = *(_QWORD **)(a1 + 16);
              if (*v78 >> 1 < **(_QWORD **)a1 >> 1)
              {
                v79 = *(_QWORD *)(a1 + 24);
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *(_OWORD *)(v80 - 16);
                  v81 = *(_QWORD **)(v80 - 32);
                  v80 -= 16;
                }
                while (*v78 >> 1 < *v81 >> 1);
                *(_QWORD *)v80 = v78;
                *(_QWORD *)(v80 + 8) = v79;
              }
              v37 = (__n128 *)(v77 + 16);
              a1 = v77;
            }
            while ((__n128 *)(v77 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52 >> 1;
                  v54 = *v52[2];
                  v55 = v53 >= v54 >> 1;
                  if (v53 < v54 >> 1)
                    v52 += 2;
                  else
                    v54 = **v52;
                  if (!v55)
                    v51 = 2 * v50 + 2;
                }
                v56 = (unint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >> 1 >= **v56 >> 1)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      if (v61 >> 1 >= *v52[2] >> 1)
                      {
                        v51 = v60;
                      }
                      else
                      {
                        v61 = *v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v61 >> 1 >= *v57 >> 1);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v62 = (unint64_t)v9 >> 4;
            do
            {
              v63 = 0;
              v86 = *(_OWORD *)v8;
              v64 = v62 - 2;
              if (v62 < 2)
                v64 = v62 - 1;
              v65 = v64 >> 1;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v63 + 1];
                v68 = (2 * v63) | 1;
                v69 = 2 * v63 + 2;
                if (v69 < v62 && **(_QWORD **)v67 >> 1 < **(_QWORD **)(v67 + 16) >> 1)
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v63 = v68;
              }
              while (v68 <= v65);
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 >> 1 < **(_QWORD **)v67 >> 1)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 >> 1 < *v73 >> 1);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v62-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (__int128 *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 16 * (v10 >> 1)), (_QWORD **)a1, &a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)a1, (_QWORD **)(a1 + 16 * (v10 >> 1)), &a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 16), (_QWORD **)v12 - 2, &a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 32), (_QWORD **)(a1 + 16 + 16 * v11), &a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v12 - 1, (_QWORD **)v12, (_QWORD **)(a1 + 16 + 16 * v11));
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v82;
        }
        --a3;
        v13 = *(_QWORD **)a1;
        v14 = **(_QWORD **)a1 >> 1;
        if ((a4 & 1) == 0 && v14 <= **(_QWORD **)(a1 - 16) >> 1)
        {
          if (v14 >= *(_QWORD *)a2[-1].n128_u64[0] >> 1)
          {
            v28 = a1 + 16;
            do
            {
              v8 = v28;
              if (v28 >= (unint64_t)a2)
                break;
              v28 += 16;
            }
            while (v14 >= **(_QWORD **)v8 >> 1);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27 >> 1);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30 >> 1);
          }
          v31 = *(_QWORD *)(a1 + 8);
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13 >> 1;
            do
            {
              v33 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33 >> 1);
            do
              v34 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34 >> 1);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 8);
        do
        {
          v17 = **(_QWORD **)(a1 + v15 + 16);
          v15 += 16;
        }
        while (v14 > v17 >> 1);
        v18 = a1 + v15;
        v19 = (__int128 *)a2;
        if (v15 == 16)
        {
          v19 = (__int128 *)a2;
          do
          {
            if (v18 >= (unint64_t)v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19-- - 2);
          }
          while (v14 <= *v21 >> 1);
        }
        else
        {
          do
            v20 = (_QWORD *)*((_QWORD *)v19-- - 2);
          while (v14 <= *v20 >> 1);
        }
        v8 = a1 + v15;
        if (v18 < (unint64_t)v19)
        {
          v22 = v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13 >> 1;
            do
            {
              v24 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v23 > *v24 >> 1);
            do
              v25 = (_QWORD *)*((_QWORD *)v22-- - 2);
            while (v23 <= *v25 >> 1);
          }
          while (v8 < (unint64_t)v22);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (unint64_t)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v85 = a2 - 32;
  v87 = a2 - 16;
  v83 = a2 - 48;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = (a2 - v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v37 = *((_QWORD *)a2 - 2);
        v36 = a2 - 16;
        if ((*a3)(v37, *(_QWORD *)a1))
        {
          v98 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v36;
          *(_OWORD *)v36 = v98;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, v87, a3);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, v87, a3);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6, v87, a3);
        return;
      default:
        if (v11 <= 383)
        {
          v38 = a1 + 16;
          v40 = a1 == a2 || v38 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = a1;
              do
              {
                v43 = *((_QWORD *)v42 + 2);
                v44 = *(_QWORD *)v42;
                v42 = v38;
                if ((*a3)(v43, v44))
                {
                  v92 = *(_OWORD *)v42;
                  v45 = *(_QWORD *)v42;
                  v46 = v41;
                  while (1)
                  {
                    *(_OWORD *)&a1[v46 + 16] = *(_OWORD *)&a1[v46];
                    if (!v46)
                      break;
                    v47 = (*a3)(v45, *(_QWORD *)&a1[v46 - 16]);
                    v46 -= 16;
                    if ((v47 & 1) == 0)
                    {
                      v48 = &a1[v46 + 16];
                      goto LABEL_71;
                    }
                  }
                  v48 = a1;
LABEL_71:
                  *(_OWORD *)v48 = v92;
                }
                v38 = v42 + 16;
                v41 += 16;
              }
              while (v42 + 16 != a2);
            }
          }
          else if (!v40)
          {
            do
            {
              v77 = *((_QWORD *)a1 + 2);
              v78 = *(_QWORD *)a1;
              a1 = v38;
              if ((*a3)(v77, v78))
              {
                v94 = *(_OWORD *)a1;
                v79 = *(_QWORD *)a1;
                v80 = a1;
                do
                {
                  v81 = v80 - 16;
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v82 = (*a3)(v79, *((_QWORD *)v80 - 4));
                  v80 = v81;
                }
                while ((v82 & 1) != 0);
                *(_OWORD *)v81 = v94;
              }
              v38 = a1 + 16;
            }
            while (a1 + 16 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v84 = v11;
            v86 = a2;
            v49 = (unint64_t)(v12 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &a1[16 * v52];
                if (2 * v50 + 2 < v12 && (*a3)(*(_QWORD *)v53, *((_QWORD *)v53 + 2)))
                {
                  v53 += 16;
                  v52 = 2 * v51 + 2;
                }
                v54 = &a1[16 * v51];
                if (((*a3)(*(_QWORD *)v53, *(_QWORD *)v54) & 1) == 0)
                {
                  v93 = v51;
                  v88 = *(_OWORD *)v54;
                  v55 = *(_QWORD *)v54;
                  do
                  {
                    v56 = v54;
                    v54 = v53;
                    *(_OWORD *)v56 = *(_OWORD *)v53;
                    if (v49 < v52)
                      break;
                    v57 = (2 * v52) | 1;
                    v53 = &a1[16 * v57];
                    v58 = 2 * v52 + 2;
                    if (v58 < v12 && (*a3)(*(_QWORD *)v53, *((_QWORD *)v53 + 2)))
                    {
                      v53 += 16;
                      v57 = v58;
                    }
                    v52 = v57;
                  }
                  while (!(*a3)(*(_QWORD *)v53, v55));
                  *(_OWORD *)v54 = v88;
                  v51 = v93;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            v59 = v86;
            v60 = v84 >> 4;
            do
            {
              v61 = 0;
              v99 = *(_OWORD *)a1;
              v62 = v60 - 2;
              if (v60 < 2)
                v62 = v60 - 1;
              v63 = v62 >> 1;
              v64 = a1;
              do
              {
                v65 = (uint64_t *)&v64[16 * v61 + 16];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v60 && (*a3)(*v65, *(_QWORD *)&v64[16 * v61 + 32]))
                {
                  v65 += 2;
                  v66 = v67;
                }
                *(_OWORD *)v64 = *(_OWORD *)v65;
                v64 = (char *)v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v68 = (uint64_t *)(v59 - 16);
              if (v65 == v68)
              {
                v69 = v68;
                *(_OWORD *)v65 = v99;
                v71 = v60 - 1;
              }
              else
              {
                *(_OWORD *)v65 = *(_OWORD *)v68;
                v69 = v68;
                *(_OWORD *)v68 = v99;
                v70 = (char *)v65 - a1 + 16;
                v71 = v60 - 1;
                if (v70 >= 17)
                {
                  v72 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v73 = &a1[16 * v72];
                  if ((*a3)(*(_QWORD *)v73, *v65))
                  {
                    v89 = *(_OWORD *)v65;
                    v74 = *v65;
                    do
                    {
                      v75 = v65;
                      v65 = (uint64_t *)v73;
                      *(_OWORD *)v75 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &a1[16 * v72];
                    }
                    while (((*a3)(*(_QWORD *)v73, v74) & 1) != 0);
                    *(_OWORD *)v65 = v89;
                  }
                }
              }
              v76 = v60 <= 2;
              v60 = v71;
              v59 = (char *)v69;
            }
            while (!v76);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &a1[16 * ((unint64_t)v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v14, a1, v87, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v14, v87, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)a1 + 2, (_QWORD *)v14 - 2, v85, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)a1 + 4, &a1[16 * v13 + 16], v83, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)v14 - 2, v14, &a1[16 * v13 + 16], a3);
          v95 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v95;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)(*((_QWORD *)a1 - 2), *(_QWORD *)a1) & 1) == 0)
        {
          v91 = *(_OWORD *)a1;
          v28 = *(_QWORD *)a1;
          if (((*a3)(*(_QWORD *)a1, *(_QWORD *)v87) & 1) != 0)
          {
            v10 = a1;
            do
            {
              v29 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (((*a3)(v28, v29) & 1) == 0);
          }
          else
          {
            v30 = a1 + 16;
            do
            {
              v10 = v30;
              if (v30 >= a2)
                break;
              v30 += 16;
            }
            while (!(*a3)(v28, *(_QWORD *)v10));
          }
          v31 = a2;
          if (v10 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *((_QWORD *)v31 - 2);
              v31 -= 16;
            }
            while (((*a3)(v28, v32) & 1) != 0);
          }
          while (v10 < v31)
          {
            v97 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v31;
            *(_OWORD *)v31 = v97;
            do
            {
              v33 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (!(*a3)(v28, v33));
            do
            {
              v34 = *((_QWORD *)v31 - 2);
              v31 -= 16;
            }
            while (((*a3)(v28, v34) & 1) != 0);
          }
          v35 = v10 - 16;
          if (v10 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)v35;
          a5 = 0;
          *(_OWORD *)v35 = v91;
          continue;
        }
        v15 = 0;
        v90 = *(_OWORD *)a1;
        v16 = *(_QWORD *)a1;
        do
        {
          v17 = (*a3)(*(_QWORD *)&a1[v15 + 16], v16);
          v15 += 16;
        }
        while ((v17 & 1) != 0);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 16)
        {
          do
          {
            if (v18 >= a2)
              break;
            v21 = *((_QWORD *)a2 - 2);
            a2 -= 16;
          }
          while (((*a3)(v21, v16) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *((_QWORD *)a2 - 2);
            a2 -= 16;
          }
          while (!(*a3)(v20, v16));
        }
        v10 = &a1[v15];
        if (v18 < a2)
        {
          v22 = a2;
          do
          {
            v96 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v96;
            do
            {
              v23 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (((*a3)(v23, v16) & 1) != 0);
            do
            {
              v24 = *((_QWORD *)v22 - 2);
              v22 -= 16;
            }
            while (!(*a3)(v24, v16));
          }
          while (v10 < v22);
        }
        v25 = v10 - 16;
        if (v10 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)v25;
        *(_OWORD *)v25 = v90;
        v26 = v18 >= a2;
        a2 = v19;
        if (!v26)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, v10 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v10 - 16, a3);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v19, a3))
        {
          if (v27)
            continue;
          goto LABEL_29;
        }
        a2 = v10 - 16;
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v101 = (uint64_t)a1;
  v105 = (uint64_t)a1;
  while (2)
  {
    v10 = (__int128 *)a4;
    v11 = (uint64_t)a2;
    v104 = (re::DynamicString *)(a2 - 3);
    v102 = (uint64_t)(a2 - 6);
    v12 = a2 - 1;
LABEL_3:
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - a4) >> 4);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(_QWORD *)(a4 + 32) < *(_QWORD *)(v11 - 16))
        {
          v42 = a4 + 48;
          v43 = v11;
          goto LABEL_66;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>>(v101, (uint64_t)a2, (uint64_t)v104, (uint64_t)v104, a3, a4 + 48);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>>(v101, (uint64_t)a2, (uint64_t)v104, (uint64_t)v104, v102, v102, a3, a4 + 48);
        return;
      case 5uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>>(v101, (uint64_t)a2, (uint64_t)v104, (uint64_t)v104, v102, v102, v11 - 144, v11 - 144);
        if (*(_QWORD *)(a4 + 32) < *(_QWORD *)(v11 - 160))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &>(v11 - 144, a4 + 48);
          if (*(_QWORD *)(v11 - 160) < *(_QWORD *)(v11 - 112))
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &>(v102, v11 - 144);
            if (*(_QWORD *)(v11 - 112) < *(_QWORD *)(v11 - 64))
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &>((uint64_t)v104, v102);
              if (*(_QWORD *)(v11 - 64) < *((_QWORD *)a2 - 2))
              {
                v43 = (uint64_t)a2;
                v42 = (uint64_t)v104;
LABEL_66:
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &>(v43, v42);
              }
            }
          }
        }
        return;
      default:
        if (v11 - a4 <= 1151)
        {
          if ((a6 & 1) != 0)
          {
            if (a2 != v10)
            {
              v44 = a2 - 3;
              if (a2 - 3 != v10)
              {
                v45 = 0;
                do
                {
                  v46 = v44 - 1;
                  if (*((_QWORD *)v44 - 2) < *((_QWORD *)v44 + 4))
                  {
                    *(_QWORD *)&v111 = *((_QWORD *)v44 - 6);
                    *((_QWORD *)v44 - 6) = 0;
                    *(_QWORD *)&v112 = *((_QWORD *)v44 - 4);
                    *((_QWORD *)v44 - 4) = 0;
                    *((_QWORD *)&v112 + 1) = *((_QWORD *)v44 - 3);
                    *((_QWORD *)v44 - 3) = 0;
                    *((_QWORD *)&v111 + 1) = *((_QWORD *)v44 - 5);
                    *((_QWORD *)v44 - 5) = 0;
                    v113 = *v46;
                    v47 = v45;
                    do
                    {
                      v48 = (char *)a2 + v47;
                      v49 = (re::DynamicString *)((char *)a2 + v47 - 48);
                      re::DynamicString::operator=((re::DynamicString *)((char *)a2 + v47 - 96), v49);
                      *(__int128 *)((char *)a2 + v47 - 64) = *(__int128 *)((char *)a2 + v47 - 16);
                      if (!v47)
                        break;
                      v47 += 48;
                    }
                    while ((unint64_t)v113 < *((_QWORD *)v48 + 4));
                    re::DynamicString::operator=(v49, (re::DynamicString *)&v111);
                    *((_OWORD *)v48 - 1) = v113;
                    if ((_QWORD)v111)
                    {
                      if ((BYTE8(v111) & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)v111 + 40))();
                    }
                  }
                  v44 = v46 - 2;
                  v45 -= 48;
                }
                while (v46 - 2 != v10);
              }
            }
          }
          else if (a2 != v10)
          {
            v93 = a2 - 3;
            if (a2 - 3 != v10)
            {
              v94 = (re::DynamicString *)(a2 - 6);
              do
              {
                v95 = v93 - 1;
                if (*((_QWORD *)v93 - 2) < *((_QWORD *)v93 + 4))
                {
                  *(_QWORD *)&v111 = *((_QWORD *)v93 - 6);
                  *((_QWORD *)v93 - 6) = 0;
                  *(_QWORD *)&v112 = *((_QWORD *)v93 - 4);
                  *((_QWORD *)v93 - 4) = 0;
                  *((_QWORD *)&v112 + 1) = *((_QWORD *)v93 - 3);
                  *((_QWORD *)v93 - 3) = 0;
                  *((_QWORD *)&v111 + 1) = *((_QWORD *)v93 - 5);
                  *((_QWORD *)v93 - 5) = 0;
                  v113 = *v95;
                  v96 = v94;
                  do
                  {
                    v97 = (re::DynamicString *)((char *)v96 + 48);
                    v98 = re::DynamicString::operator=(v96, (re::DynamicString *)((char *)v96 + 48));
                    *((_OWORD *)v98 + 2) = *((_OWORD *)v98 + 5);
                    v99 = *((_QWORD *)v98 + 16);
                    v96 = v97;
                  }
                  while ((unint64_t)v113 < v99);
                  v100 = re::DynamicString::operator=(v97, (re::DynamicString *)&v111);
                  *((_OWORD *)v100 + 2) = v113;
                  if ((_QWORD)v111)
                  {
                    if ((BYTE8(v111) & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v111 + 40))();
                  }
                }
                v93 = v95 - 2;
                v94 = (re::DynamicString *)((char *)v94 - 48);
              }
              while (v95 - 2 != v10);
            }
          }
          return;
        }
        if (!a5)
        {
          v50 = (char *)a2 - (char *)v10;
          if (a2 != v10 && v50 >= 49)
          {
            v51 = 0xAAAAAAAAAAAAAAABLL * (v50 >> 4);
            v52 = (unint64_t)(v51 - 2) >> 1;
            v53 = v52;
            do
            {
              v54 = v53;
              if ((unint64_t)v50 >= 0x60)
              {
                v55 = &a2[-3 * v53];
                v56 = 0xAAAAAAAAAAAAAAABLL * ((48 * v53) >> 4);
                if (v52 >= v56)
                {
                  v57 = 2 * v56;
                  v58 = (2 * v56) | 1;
                  v59 = &a2[-3 * v58];
                  v60 = v57 + 2;
                  if (v60 < v51)
                  {
                    v61 = *((_QWORD *)v59 - 2);
                    v62 = *((_QWORD *)v59 - 8);
                    v63 = v61 >= v62;
                    v64 = v61 >= v62 ? 0 : -1;
                    v59 += 3 * v64;
                    if (!v63)
                      v58 = v60;
                  }
                  if (*((_QWORD *)v59 - 2) >= *((_QWORD *)v55 - 2))
                  {
                    *(_QWORD *)&v111 = *((_QWORD *)v55 - 6);
                    *((_QWORD *)v55 - 6) = 0;
                    *(_QWORD *)&v112 = *((_QWORD *)v55 - 4);
                    *((_QWORD *)v55 - 4) = 0;
                    *((_QWORD *)&v112 + 1) = *((_QWORD *)v55 - 3);
                    *((_QWORD *)v55 - 3) = 0;
                    *((_QWORD *)&v111 + 1) = *((_QWORD *)v55 - 5);
                    *((_QWORD *)v55 - 5) = 0;
                    v113 = *(v55 - 1);
                    v65 = v113;
                    do
                    {
                      v66 = v55;
                      v55 = v59;
                      v67 = (re::DynamicString *)(v59 - 3);
                      re::DynamicString::operator=((re::DynamicString *)(v66 - 3), (re::DynamicString *)(v59 - 3));
                      *(v66 - 1) = *(v55 - 1);
                      if (v52 < v58)
                        break;
                      v68 = (2 * v58) | 1;
                      v59 = &a2[-3 * v68];
                      if (2 * v58 + 2 < v51)
                      {
                        v69 = *((_QWORD *)v59 - 2);
                        v70 = *((_QWORD *)v59 - 8);
                        v71 = v69 >= v70;
                        v72 = v69 >= v70 ? 0 : -1;
                        v59 += 3 * v72;
                        if (!v71)
                          v68 = 2 * v58 + 2;
                      }
                      v58 = v68;
                    }
                    while (*((_QWORD *)v59 - 2) >= v65);
                    re::DynamicString::operator=(v67, (re::DynamicString *)&v111);
                    *(v55 - 1) = v113;
                    if ((_QWORD)v111 && (BYTE8(v111) & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v111 + 40))();
                    v50 = (char *)a2 - (char *)v10;
                  }
                }
              }
              v53 = v54 - 1;
            }
            while (v54);
            v73 = v50 / 0x30uLL;
            do
            {
              v74 = 0;
              v106 = *((_QWORD *)a2 - 6);
              *((_QWORD *)a2 - 6) = 0;
              v108 = *((_QWORD *)a2 - 4);
              *((_QWORD *)a2 - 4) = 0;
              v109 = *((_QWORD *)a2 - 3);
              *((_QWORD *)a2 - 3) = 0;
              v107 = *((_QWORD *)a2 - 5);
              *((_QWORD *)a2 - 5) = 0;
              v110 = *(a2 - 1);
              v75 = a2;
              do
              {
                v76 = &v75[3 * ~v74];
                v77 = (2 * v74) | 1;
                v78 = 2 * v74 + 2;
                if (v78 < v73)
                {
                  v79 = *((_QWORD *)v76 - 2);
                  v80 = *((_QWORD *)v76 - 8);
                  v81 = v79 >= v80;
                  v82 = v79 >= v80 ? 0 : -1;
                  v76 += 3 * v82;
                  if (!v81)
                    v77 = v78;
                }
                v83 = (char *)(v76 - 3);
                re::DynamicString::operator=((re::DynamicString *)(v75 - 3), (re::DynamicString *)(v76 - 3));
                *(v75 - 1) = *(v76 - 1);
                v75 = v76;
                v74 = v77;
              }
              while (v77 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
              v84 = v76 - 1;
              v85 = v10 + 3;
              if (v76 == v10 + 3)
              {
                re::DynamicString::operator=((re::DynamicString *)(v76 - 3), (re::DynamicString *)&v106);
                *v84 = v110;
              }
              else
              {
                re::DynamicString::operator=((re::DynamicString *)(v76 - 3), (re::DynamicString *)v10);
                *v84 = v10[2];
                re::DynamicString::operator=((re::DynamicString *)v10, (re::DynamicString *)&v106);
                v10[2] = v110;
                if ((char *)a2 - v83 >= 49)
                {
                  v86 = (((char *)a2 - v83) / 0x30uLL - 2) >> 1;
                  v87 = &a2[-3 * v86];
                  if (*((_QWORD *)v87 - 2) < *(_QWORD *)v84)
                  {
                    v111 = 0u;
                    v112 = 0u;
                    *(_QWORD *)&v111 = *((_QWORD *)v76 - 6);
                    *((_QWORD *)v76 - 6) = 0;
                    v88 = v112;
                    *(_QWORD *)&v112 = *((_QWORD *)v76 - 4);
                    *((_QWORD *)v76 - 4) = v88;
                    *((_QWORD *)&v112 + 1) = *((_QWORD *)v76 - 3);
                    *((_QWORD *)v76 - 3) = 0;
                    v89 = *((_QWORD *)&v111 + 1);
                    *((_QWORD *)&v111 + 1) = *((_QWORD *)v76 - 5);
                    *((_QWORD *)v76 - 5) = v89;
                    v113 = *v84;
                    do
                    {
                      v90 = v87;
                      v91 = (re::DynamicString *)(v87 - 3);
                      re::DynamicString::operator=((re::DynamicString *)(v76 - 3), (re::DynamicString *)(v87 - 3));
                      *(v76 - 1) = *(v90 - 1);
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = &a2[-3 * v86];
                      v76 = v90;
                    }
                    while (*((_QWORD *)v87 - 2) < (unint64_t)v113);
                    re::DynamicString::operator=(v91, (re::DynamicString *)&v111);
                    *(v90 - 1) = v113;
                    if ((_QWORD)v111)
                    {
                      if ((BYTE8(v111) & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)v111 + 40))();
                    }
                  }
                }
              }
              if (v106 && (v107 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v106 + 40))();
              v10 = v85;
            }
            while (v73-- > 2);
          }
          return;
        }
        v14 = v13 >> 1;
        v15 = a4 + 48;
        v16 = v11 - 48 * (v13 >> 1);
        if (v13 < 0x81)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>>(v11 - 48 * (v13 >> 1), v11 - 48 * (v13 >> 1), v105, (uint64_t)a2, v15, a4 + 48);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>>(v105, (uint64_t)a2, v11 - 48 * (v13 >> 1), v11 - 48 * (v13 >> 1), v15, a4 + 48);
          v17 = v11 - 48 * v14 + 48;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>>((uint64_t)v104, (uint64_t)v104, v17, v17, a4 + 96, a4 + 96);
          v18 = v11 + 48 * ~v14;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>>(v102, v102, v18, v18, a4 + 144, a4 + 144);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>>(v17, v17, v16, v16, v18, v18);
          *(_QWORD *)&v111 = *(_QWORD *)(v11 - 48);
          *(_QWORD *)(v11 - 48) = 0;
          *(_QWORD *)&v112 = *(_QWORD *)(v11 - 32);
          *(_QWORD *)(v11 - 32) = 0;
          *((_QWORD *)&v112 + 1) = *(_QWORD *)(v11 - 24);
          *(_QWORD *)(v11 - 24) = 0;
          *((_QWORD *)&v111 + 1) = *(_QWORD *)(v11 - 40);
          *(_QWORD *)(v11 - 40) = 0;
          v113 = *v12;
          re::DynamicString::operator=(v104, (re::DynamicString *)(v16 - 48));
          *v12 = *(_OWORD *)(v16 - 16);
          re::DynamicString::operator=((re::DynamicString *)(v16 - 48), (re::DynamicString *)&v111);
          *(_OWORD *)(v16 - 16) = v113;
          if ((_QWORD)v111 && (BYTE8(v111) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v111 + 40))();
        }
        --a5;
        if ((a6 & 1) == 0 && *(_QWORD *)(v11 + 32) >= *(_QWORD *)(v11 - 16))
        {
          v111 = 0u;
          v112 = 0u;
          v31 = (_QWORD *)(v11 - 48);
          *(_QWORD *)&v111 = *(_QWORD *)(v11 - 48);
          *v31 = 0;
          v32 = v112;
          *(_QWORD *)&v112 = *(_QWORD *)(v11 - 32);
          v31[2] = v32;
          *((_QWORD *)&v112 + 1) = *(_QWORD *)(v11 - 24);
          v31[3] = 0;
          v33 = *((_QWORD *)&v111 + 1);
          *((_QWORD *)&v111 + 1) = *(_QWORD *)(v11 - 40);
          v31[1] = v33;
          v113 = *(_OWORD *)(v11 - 16);
          if ((unint64_t)v113 >= *((_QWORD *)v10 + 4))
          {
            v36 = (_QWORD *)(v11 - 64);
            do
            {
              a2 = (__int128 *)(v36 + 2);
              if (v36 + 2 <= (_QWORD *)v10)
                break;
              v37 = *v36;
              v36 -= 6;
            }
            while ((unint64_t)v113 >= v37);
          }
          else
          {
            v34 = v11;
            do
            {
              a2 = (__int128 *)(v34 - 48);
              v35 = *(_QWORD *)(v34 - 64);
              v34 -= 48;
            }
            while ((unint64_t)v113 >= v35);
          }
          if (a2 > v10)
          {
            v38 = v10;
            do
            {
              v10 = v38 + 3;
              v39 = *((_QWORD *)v38 + 4);
              v38 += 3;
            }
            while ((unint64_t)v113 < v39);
          }
          while (a2 > v10)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &>((uint64_t)a2, (uint64_t)v10);
            do
            {
              v40 = *((_QWORD *)a2 - 8);
              a2 -= 3;
            }
            while ((unint64_t)v113 >= v40);
            do
            {
              v41 = *((_QWORD *)v10 + 4);
              v10 += 3;
            }
            while ((unint64_t)v113 < v41);
          }
          if (a2 + 3 != (__int128 *)v11)
          {
            re::DynamicString::operator=((re::DynamicString *)(v11 - 48), (re::DynamicString *)a2);
            *(_OWORD *)(v11 - 16) = a2[2];
          }
          re::DynamicString::operator=((re::DynamicString *)a2, (re::DynamicString *)&v111);
          a2[2] = v113;
          if ((_QWORD)v111 && (BYTE8(v111) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v111 + 40))();
          a6 = 0;
          continue;
        }
        v19 = 0;
        v111 = 0u;
        v112 = 0u;
        *(_QWORD *)&v111 = *(_QWORD *)(v11 - 48);
        *(_QWORD *)(v11 - 48) = 0;
        v20 = v112;
        *(_QWORD *)&v112 = *(_QWORD *)(v11 - 32);
        *(_QWORD *)(v11 - 32) = v20;
        *((_QWORD *)&v112 + 1) = *(_QWORD *)(v11 - 24);
        *(_QWORD *)(v11 - 24) = 0;
        v21 = *((_QWORD *)&v111 + 1);
        *((_QWORD *)&v111 + 1) = *(_QWORD *)(v11 - 40);
        *(_QWORD *)(v11 - 40) = v21;
        v113 = *v12;
        do
        {
          v22 = *(_QWORD *)(v11 + v19 - 64);
          v19 -= 48;
        }
        while (v22 < (unint64_t)v113);
        v23 = (__int128 *)(v11 + v19);
        if (v19 == -48)
        {
          while (v23 > v10)
          {
            v24 = v10 + 3;
            v26 = *((_QWORD *)v10 + 4);
            v10 += 3;
            if (v26 < (unint64_t)v113)
              goto LABEL_23;
          }
          v24 = v10;
        }
        else
        {
          do
          {
            v24 = v10 + 3;
            v25 = *((_QWORD *)v10 + 4);
            v10 += 3;
          }
          while (v25 >= (unint64_t)v113);
        }
LABEL_23:
        if (v23 <= v24)
        {
          a2 = v23;
        }
        else
        {
          v27 = (unint64_t)v24;
          a2 = v23;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats *> &>((uint64_t)a2, v27);
            do
            {
              v28 = *((_QWORD *)a2 - 8);
              a2 -= 3;
            }
            while (v28 < (unint64_t)v113);
            do
            {
              v29 = *(_QWORD *)(v27 + 32);
              v27 += 48;
            }
            while (v29 >= (unint64_t)v113);
          }
          while ((unint64_t)a2 > v27);
        }
        v10 = a2 + 3;
        if (a2 + 3 != (__int128 *)v11)
        {
          re::DynamicString::operator=(v104, (re::DynamicString *)a2);
          *v12 = a2[2];
        }
        re::DynamicString::operator=((re::DynamicString *)a2, (re::DynamicString *)&v111);
        a2[2] = v113;
        if ((_QWORD)v111 && (BYTE8(v111) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v111 + 40))();
        if (v23 > v24)
        {
LABEL_62:
          std::__introsort<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>,false>(v105, v11, a2 + 3, a2 + 3, a5, a6 & 1);
          a6 = 0;
          a1 = a2 + 3;
          goto LABEL_1;
        }
        v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>>(v105, v11, (uint64_t)(a2 + 3), (uint64_t)(a2 + 3));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::AssetLoadRequest::LoadStatistics::forEachStat(void({block_pointer})(re::AssetLoadRequest::LoadStatistics::AssetTypeStats const&))::$_0 &,std::reverse_iterator<re::AssetLoadRequest::LoadStatistics::AssetTypeStats*>>((uint64_t)a2, (uint64_t)a2, a3, a4))
        {
          a1 = a2 + 3;
          if ((v30 & 1) != 0)
            goto LABEL_1;
          goto LABEL_62;
        }
        a4 = (uint64_t)(a2 + 3);
        a3 = (uint64_t)(a2 + 3);
        a2 = (__int128 *)v11;
        if ((v30 & 1) == 0)
          goto LABEL_3;
        return;
    }
  }
}

  v9 = (unsigned int *)a2;
  v143 = a2 - 80;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)v9 - v10;
    v12 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 4);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v62 = *a3;
        v63 = (_OWORD *)(a2 - 80);
        {
          v164 = *(_OWORD *)a1;
          v200 = *(_OWORD *)(a1 + 48);
          v212 = *(_OWORD *)(a1 + 64);
          v176 = *(_OWORD *)(a1 + 16);
          v188 = *(_OWORD *)(a1 + 32);
          v64 = *(_OWORD *)(a2 - 16);
          v66 = *(_OWORD *)(a2 - 64);
          v65 = *(_OWORD *)(a2 - 48);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(a1 + 64) = v64;
          *(_OWORD *)(a1 + 16) = v66;
          *(_OWORD *)(a1 + 32) = v65;
          *(_OWORD *)a1 = *v63;
          *(_OWORD *)(a2 - 32) = v200;
          *(_OWORD *)(a2 - 16) = v212;
          *(_OWORD *)(a2 - 64) = v176;
          *(_OWORD *)(a2 - 48) = v188;
          *v63 = v164;
        }
        return;
      case 3:
        return;
      case 4:
        return;
      case 5:
        v67 = (__int128 *)(a1 + 80);
        v68 = (__int128 *)(a1 + 160);
        v69 = (__int128 *)(a1 + 240);
        v70 = (__int128 *)(a2 - 80);
        {
          v189 = *(_OWORD *)(a1 + 272);
          v201 = *(_OWORD *)(a1 + 288);
          v213 = *(_OWORD *)(a1 + 304);
          v165 = *v69;
          v177 = *(_OWORD *)(a1 + 256);
          v72 = *(_OWORD *)(a2 - 64);
          v71 = *(_OWORD *)(a2 - 48);
          v73 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 - 32);
          *(_OWORD *)(a1 + 304) = v73;
          *(_OWORD *)(a1 + 256) = v72;
          *(_OWORD *)(a1 + 272) = v71;
          *v69 = *v70;
          *v70 = v165;
          *(_OWORD *)(a2 - 32) = v201;
          *(_OWORD *)(a2 - 16) = v213;
          *(_OWORD *)(a2 - 64) = v177;
          *(_OWORD *)(a2 - 48) = v189;
          {
            v190 = *(_OWORD *)(a1 + 192);
            v202 = *(_OWORD *)(a1 + 208);
            v214 = *(_OWORD *)(a1 + 224);
            v166 = *v68;
            v178 = *(_OWORD *)(a1 + 176);
            v74 = *(_OWORD *)(a1 + 288);
            *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 272);
            *(_OWORD *)(a1 + 208) = v74;
            *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 304);
            v75 = *(_OWORD *)(a1 + 256);
            *v68 = *v69;
            *(_OWORD *)(a1 + 176) = v75;
            *(_OWORD *)(a1 + 288) = v202;
            *(_OWORD *)(a1 + 304) = v214;
            *(_OWORD *)(a1 + 256) = v178;
            *(_OWORD *)(a1 + 272) = v190;
            *v69 = v166;
            {
              v191 = *(_OWORD *)(a1 + 112);
              v203 = *(_OWORD *)(a1 + 128);
              v215 = *(_OWORD *)(a1 + 144);
              v167 = *v67;
              v179 = *(_OWORD *)(a1 + 96);
              v76 = *(_OWORD *)(a1 + 208);
              *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 192);
              *(_OWORD *)(a1 + 128) = v76;
              *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 224);
              v77 = *(_OWORD *)(a1 + 176);
              *v67 = *v68;
              *(_OWORD *)(a1 + 96) = v77;
              *(_OWORD *)(a1 + 208) = v203;
              *(_OWORD *)(a1 + 224) = v215;
              *(_OWORD *)(a1 + 176) = v179;
              *(_OWORD *)(a1 + 192) = v191;
              *v68 = v167;
              {
                v168 = *(_OWORD *)a1;
                v204 = *(_OWORD *)(a1 + 48);
                v216 = *(_OWORD *)(a1 + 64);
                v180 = *(_OWORD *)(a1 + 16);
                v192 = *(_OWORD *)(a1 + 32);
                v78 = *(_OWORD *)(a1 + 144);
                v79 = *(_OWORD *)(a1 + 112);
                *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 128);
                *(_OWORD *)(a1 + 64) = v78;
                v80 = *v67;
                *(_OWORD *)(a1 + 16) = *(_OWORD *)(a1 + 96);
                *(_OWORD *)(a1 + 32) = v79;
                *(_OWORD *)a1 = v80;
                *(_OWORD *)(a1 + 128) = v204;
                *(_OWORD *)(a1 + 144) = v216;
                *(_OWORD *)(a1 + 96) = v180;
                *(_OWORD *)(a1 + 112) = v192;
                *v67 = v168;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 1919)
        {
          v81 = a1 + 80;
          v82 = (unsigned int *)a1 == v9 || v81 == (_QWORD)v9;
          v83 = v82;
          if ((a5 & 1) != 0)
          {
            if ((v83 & 1) == 0)
            {
              v84 = 0;
              v85 = a1;
              do
              {
                v86 = *(_DWORD *)(v85 + 80);
                v87 = *(_DWORD *)v85;
                v88 = *(_DWORD *)(v85 + 4);
                v85 = v81;
                {
                  v89 = *(_DWORD *)v85;
                  v90 = *(_DWORD *)(v85 + 4);
                  v217 = *(_QWORD *)(v85 + 72);
                  v193 = *(_OWORD *)(v85 + 40);
                  v205 = *(_OWORD *)(v85 + 56);
                  v181 = *(_OWORD *)(v85 + 24);
                  v169 = *(_OWORD *)(v85 + 8);
                  v91 = v84;
                  while (1)
                  {
                    v92 = (_OWORD *)(a1 + v91);
                    v93 = *(_OWORD *)(a1 + v91 + 48);
                    v92[7] = *(_OWORD *)(a1 + v91 + 32);
                    v92[8] = v93;
                    v92[9] = *(_OWORD *)(a1 + v91 + 64);
                    v94 = *(_OWORD *)(a1 + v91 + 16);
                    v92[5] = *(_OWORD *)(a1 + v91);
                    v92[6] = v94;
                    if (!v91)
                      break;
                    v91 -= 80;
                    {
                      v95 = a1 + v91 + 80;
                      goto LABEL_78;
                    }
                  }
                  v95 = a1;
LABEL_78:
                  *(_DWORD *)v95 = v89;
                  *(_DWORD *)(v95 + 4) = v90;
                  *(_QWORD *)(v95 + 72) = v217;
                  *(_OWORD *)(v95 + 8) = v169;
                  *(_OWORD *)(v95 + 56) = v205;
                  *(_OWORD *)(v95 + 40) = v193;
                  *(_OWORD *)(v95 + 24) = v181;
                }
                v81 = v85 + 80;
                v84 += 80;
              }
              while (v85 + 80 != a2);
            }
          }
          else if ((v83 & 1) == 0)
          {
            do
            {
              v131 = *(_DWORD *)(a1 + 80);
              v132 = *(_DWORD *)a1;
              v133 = *(_DWORD *)(a1 + 4);
              a1 = v81;
              {
                v134 = *(_DWORD *)a1;
                v135 = *(_DWORD *)(a1 + 4);
                v220 = *(_QWORD *)(a1 + 72);
                v196 = *(_OWORD *)(a1 + 40);
                v208 = *(_OWORD *)(a1 + 56);
                v184 = *(_OWORD *)(a1 + 24);
                v172 = *(_OWORD *)(a1 + 8);
                v136 = (_OWORD *)a1;
                do
                {
                  v137 = v136 - 5;
                  v138 = *(v136 - 2);
                  v136[2] = *(v136 - 3);
                  v136[3] = v138;
                  v136[4] = *(v136 - 1);
                  v139 = *(v136 - 4);
                  *v136 = *(v136 - 5);
                  v136[1] = v139;
                  v136 = v137;
                }
                while (v140);
                *(_DWORD *)v137 = v134;
                *((_DWORD *)v137 + 1) = v135;
                *(_OWORD *)((char *)v137 + 8) = v172;
                *((_QWORD *)v137 + 9) = v220;
                *(_OWORD *)((char *)v137 + 56) = v208;
                *(_OWORD *)((char *)v137 + 40) = v196;
                *(_OWORD *)((char *)v137 + 24) = v184;
              }
              v81 = a1 + 80;
            }
            while (a1 + 80 != a2);
          }
          return;
        }
        if (!a4)
        {
          if ((unsigned int *)a1 != v9)
          {
            v96 = (unint64_t)(v12 - 2) >> 1;
            v144 = v96;
            do
            {
              v97 = v96;
              if (v144 >= v96)
              {
                v98 = (2 * v96) | 1;
                v99 = a1 + 80 * v98;
                if (2 * v96 + 2 < v12
                {
                  v99 += 80;
                  v98 = 2 * v97 + 2;
                }
                v100 = a1 + 80 * v97;
                {
                  v141 = v97;
                  v101 = *(_DWORD *)(v100 + 4);
                  v142 = *(_DWORD *)v100;
                  v218 = *(_QWORD *)(v100 + 72);
                  v194 = *(_OWORD *)(v100 + 40);
                  v206 = *(_OWORD *)(v100 + 56);
                  v182 = *(_OWORD *)(v100 + 24);
                  v170 = *(_OWORD *)(v100 + 8);
                  do
                  {
                    v102 = v99;
                    *(_OWORD *)v100 = *(_OWORD *)v99;
                    v103 = *(_OWORD *)(v99 + 16);
                    v104 = *(_OWORD *)(v99 + 32);
                    v105 = *(_OWORD *)(v99 + 64);
                    *(_OWORD *)(v100 + 48) = *(_OWORD *)(v99 + 48);
                    *(_OWORD *)(v100 + 64) = v105;
                    *(_OWORD *)(v100 + 16) = v103;
                    *(_OWORD *)(v100 + 32) = v104;
                    if (v144 < v98)
                      break;
                    v106 = (2 * v98) | 1;
                    v99 = a1 + 80 * v106;
                    v107 = 2 * v98 + 2;
                    if (v107 < v12
                    {
                      v99 += 80;
                      v106 = v107;
                    }
                    v100 = v102;
                    v98 = v106;
                  }
                  *(_DWORD *)v102 = v142;
                  *(_DWORD *)(v102 + 4) = v101;
                  *(_QWORD *)(v102 + 72) = v218;
                  *(_OWORD *)(v102 + 8) = v170;
                  *(_OWORD *)(v102 + 56) = v206;
                  *(_OWORD *)(v102 + 40) = v194;
                  *(_OWORD *)(v102 + 24) = v182;
                  v97 = v141;
                }
              }
              v96 = v97 - 1;
            }
            while (v97);
            v108 = v11 / 0x50uLL;
            do
            {
              v109 = 0;
              v171 = *(_OWORD *)a1;
              v207 = *(_OWORD *)(a1 + 48);
              v219 = *(_OWORD *)(a1 + 64);
              v183 = *(_OWORD *)(a1 + 16);
              v195 = *(_OWORD *)(a1 + 32);
              v110 = (_OWORD *)a1;
              do
              {
                v111 = (uint64_t)&v110[5 * v109 + 5];
                v112 = (2 * v109) | 1;
                v113 = 2 * v109 + 2;
                if (v113 < v108
                {
                  v111 += 80;
                  v112 = v113;
                }
                *v110 = *(_OWORD *)v111;
                v114 = *(_OWORD *)(v111 + 16);
                v115 = *(_OWORD *)(v111 + 32);
                v116 = *(_OWORD *)(v111 + 64);
                v110[3] = *(_OWORD *)(v111 + 48);
                v110[4] = v116;
                v110[1] = v114;
                v110[2] = v115;
                v110 = (_OWORD *)v111;
                v109 = v112;
              }
              while (v112 <= (uint64_t)((unint64_t)(v108 - 2) >> 1));
              v117 = (_OWORD *)(a2 - 80);
              v82 = v111 == a2 - 80;
              a2 -= 80;
              if (v82)
              {
                *(_OWORD *)v111 = v171;
                *(_OWORD *)(v111 + 48) = v207;
                *(_OWORD *)(v111 + 64) = v219;
                *(_OWORD *)(v111 + 16) = v183;
                *(_OWORD *)(v111 + 32) = v195;
              }
              else
              {
                *(_OWORD *)v111 = *v117;
                v118 = v117[1];
                v119 = v117[2];
                v120 = v117[4];
                *(_OWORD *)(v111 + 48) = v117[3];
                *(_OWORD *)(v111 + 64) = v120;
                *(_OWORD *)(v111 + 16) = v118;
                *(_OWORD *)(v111 + 32) = v119;
                v117[3] = v207;
                v117[4] = v219;
                v117[1] = v183;
                v117[2] = v195;
                *v117 = v171;
                v121 = v111 - a1 + 80;
                if (v121 >= 81)
                {
                  v122 = (v121 / 0x50uLL - 2) >> 1;
                  v123 = a1 + 80 * v122;
                  {
                    v124 = *(_DWORD *)v111;
                    v125 = *(_DWORD *)(v111 + 4);
                    v160 = *(_QWORD *)(v111 + 72);
                    v154 = *(_OWORD *)(v111 + 40);
                    v157 = *(_OWORD *)(v111 + 56);
                    v151 = *(_OWORD *)(v111 + 24);
                    v148 = *(_OWORD *)(v111 + 8);
                    do
                    {
                      v126 = v123;
                      *(_OWORD *)v111 = *(_OWORD *)v123;
                      v127 = *(_OWORD *)(v123 + 16);
                      v128 = *(_OWORD *)(v123 + 32);
                      v129 = *(_OWORD *)(v123 + 64);
                      *(_OWORD *)(v111 + 48) = *(_OWORD *)(v123 + 48);
                      *(_OWORD *)(v111 + 64) = v129;
                      *(_OWORD *)(v111 + 16) = v127;
                      *(_OWORD *)(v111 + 32) = v128;
                      if (!v122)
                        break;
                      v122 = (v122 - 1) >> 1;
                      v123 = a1 + 80 * v122;
                      v111 = v126;
                    }
                    *(_DWORD *)v126 = v124;
                    *(_DWORD *)(v126 + 4) = v125;
                    *(_QWORD *)(v126 + 72) = v160;
                    *(_OWORD *)(v126 + 8) = v148;
                    *(_OWORD *)(v126 + 56) = v157;
                    *(_OWORD *)(v126 + 40) = v154;
                    *(_OWORD *)(v126 + 24) = v151;
                  }
                }
              }
            }
            while (v108-- > 2);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (_OWORD *)(a1 + 80 * ((unint64_t)v12 >> 1));
        if ((unint64_t)v11 < 0x2801)
        {
        }
        else
        {
          v15 = 5 * v13;
          v161 = *(_OWORD *)a1;
          v197 = *(_OWORD *)(a1 + 48);
          v209 = *(_OWORD *)(a1 + 64);
          v173 = *(_OWORD *)(a1 + 16);
          v185 = *(_OWORD *)(a1 + 32);
          v16 = v14[4];
          v18 = v14[1];
          v17 = v14[2];
          *(_OWORD *)(a1 + 48) = v14[3];
          *(_OWORD *)(a1 + 64) = v16;
          *(_OWORD *)(a1 + 16) = v18;
          *(_OWORD *)(a1 + 32) = v17;
          *(_OWORD *)a1 = *v14;
          v14[3] = v197;
          v14[4] = v209;
          v14[1] = v173;
          v14[2] = v185;
          *v14 = v161;
        }
        --a4;
        if ((a5 & 1) == 0
        {
          v44 = *(_DWORD *)a1;
          v43 = *(_DWORD *)(a1 + 4);
          v159 = *(_QWORD *)(a1 + 72);
          v153 = *(_OWORD *)(a1 + 40);
          v156 = *(_OWORD *)(a1 + 56);
          v150 = *(_OWORD *)(a1 + 24);
          v147 = *(_OWORD *)(a1 + 8);
          {
            v10 = a1;
            do
            {
              v45 = *(_DWORD *)(v10 + 80);
              v46 = *(_DWORD *)(v10 + 84);
              v10 += 80;
            }
          }
          else
          {
            v47 = (unsigned int *)(a1 + 80);
            do
            {
              v10 = (unint64_t)v47;
              if (v47 >= v9)
                break;
              v47 = (unsigned int *)(v10 + 80);
            }
            while (!v48);
          }
          v49 = v9;
          if (v10 < (unint64_t)v9)
          {
            v49 = v9;
            do
            {
              v50 = *(v49 - 20);
              v51 = *(v49 - 19);
              v49 -= 20;
            }
          }
          while (v10 < (unint64_t)v49)
          {
            v163 = *(_OWORD *)v10;
            v199 = *(_OWORD *)(v10 + 48);
            v211 = *(_OWORD *)(v10 + 64);
            v175 = *(_OWORD *)(v10 + 16);
            v187 = *(_OWORD *)(v10 + 32);
            v52 = *((_OWORD *)v49 + 4);
            v54 = *((_OWORD *)v49 + 1);
            v53 = *((_OWORD *)v49 + 2);
            *(_OWORD *)(v10 + 48) = *((_OWORD *)v49 + 3);
            *(_OWORD *)(v10 + 64) = v52;
            *(_OWORD *)(v10 + 16) = v54;
            *(_OWORD *)(v10 + 32) = v53;
            *(_OWORD *)v10 = *(_OWORD *)v49;
            *((_OWORD *)v49 + 3) = v199;
            *((_OWORD *)v49 + 4) = v211;
            *((_OWORD *)v49 + 1) = v175;
            *((_OWORD *)v49 + 2) = v187;
            *(_OWORD *)v49 = v163;
            do
            {
              v55 = *(_DWORD *)(v10 + 80);
              v56 = *(_DWORD *)(v10 + 84);
              v10 += 80;
            }
            do
            {
              v57 = *(v49 - 20);
              v58 = *(v49 - 19);
              v49 -= 20;
            }
          }
          if (v10 - 80 != a1)
          {
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 80);
            v59 = *(_OWORD *)(v10 - 64);
            v60 = *(_OWORD *)(v10 - 48);
            v61 = *(_OWORD *)(v10 - 16);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 64) = v61;
            *(_OWORD *)(a1 + 16) = v59;
            *(_OWORD *)(a1 + 32) = v60;
          }
          a5 = 0;
          *(_DWORD *)(v10 - 80) = v44;
          *(_DWORD *)(v10 - 76) = v43;
          *(_OWORD *)(v10 - 72) = v147;
          *(_QWORD *)(v10 - 8) = v159;
          *(_OWORD *)(v10 - 24) = v156;
          *(_OWORD *)(v10 - 40) = v153;
          *(_OWORD *)(v10 - 56) = v150;
          continue;
        }
        v19 = 0;
        v20 = *(_DWORD *)a1;
        v21 = *(_DWORD *)(a1 + 4);
        v158 = *(_QWORD *)(a1 + 72);
        v152 = *(_OWORD *)(a1 + 40);
        v155 = *(_OWORD *)(a1 + 56);
        v149 = *(_OWORD *)(a1 + 24);
        v146 = *(_OWORD *)(a1 + 8);
        do
        {
          v19 += 80;
        }
        while (v22);
        v23 = a1 + v19;
        if (v19 == 80)
        {
          v9 = (unsigned int *)a2;
          do
          {
            if (v23 >= (unint64_t)v9)
              break;
            v26 = *(v9 - 20);
            v27 = *(v9 - 19);
            v9 -= 20;
          }
        }
        else
        {
          do
          {
            v24 = *(v9 - 20);
            v25 = *(v9 - 19);
            v9 -= 20;
          }
        }
        if (v23 >= (unint64_t)v9)
        {
          v37 = v23 - 80;
        }
        else
        {
          v28 = a1 + v19;
          v29 = v9;
          do
          {
            v162 = *(_OWORD *)v28;
            v198 = *(_OWORD *)(v28 + 48);
            v210 = *(_OWORD *)(v28 + 64);
            v174 = *(_OWORD *)(v28 + 16);
            v186 = *(_OWORD *)(v28 + 32);
            v30 = *((_OWORD *)v29 + 4);
            v32 = *((_OWORD *)v29 + 1);
            v31 = *((_OWORD *)v29 + 2);
            *(_OWORD *)(v28 + 48) = *((_OWORD *)v29 + 3);
            *(_OWORD *)(v28 + 64) = v30;
            *(_OWORD *)(v28 + 16) = v32;
            *(_OWORD *)(v28 + 32) = v31;
            *(_OWORD *)v28 = *(_OWORD *)v29;
            *((_OWORD *)v29 + 3) = v198;
            *((_OWORD *)v29 + 4) = v210;
            *((_OWORD *)v29 + 1) = v174;
            *((_OWORD *)v29 + 2) = v186;
            *(_OWORD *)v29 = v162;
            do
            {
              v33 = *(_DWORD *)(v28 + 80);
              v34 = *(_DWORD *)(v28 + 84);
              v28 += 80;
            }
            do
            {
              v35 = *(v29 - 20);
              v36 = *(v29 - 19);
              v29 -= 20;
            }
          }
          while (v28 < (unint64_t)v29);
          v37 = v28 - 80;
        }
        if (v37 != a1)
        {
          *(_OWORD *)a1 = *(_OWORD *)v37;
          v38 = *(_OWORD *)(v37 + 16);
          v39 = *(_OWORD *)(v37 + 32);
          v40 = *(_OWORD *)(v37 + 64);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(v37 + 48);
          *(_OWORD *)(a1 + 64) = v40;
          *(_OWORD *)(a1 + 16) = v38;
          *(_OWORD *)(a1 + 32) = v39;
        }
        *(_DWORD *)v37 = v20;
        *(_DWORD *)(v37 + 4) = v21;
        *(_QWORD *)(v37 + 72) = v158;
        *(_OWORD *)(v37 + 8) = v146;
        *(_OWORD *)(v37 + 56) = v155;
        *(_OWORD *)(v37 + 40) = v152;
        *(_OWORD *)(v37 + 24) = v149;
        v41 = v23 >= (unint64_t)v9;
        v9 = (unsigned int *)a2;
        if (!v41)
        {
LABEL_32:
          a5 = 0;
          v10 = v37 + 80;
          continue;
        }
        v10 = v37 + 80;
        {
          if (v42)
            continue;
          goto LABEL_32;
        }
        a2 = v37;
        if (!v42)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = (__int128 *)(a2 - 2);
        if (*v20 < **v9)
        {
          v22 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v19;
          *v19 = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v9, v9 + 2, v9 + 4, (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v9, v9 + 2, v9 + 4, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)v9, (uint64_t)a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v9 + 1, v15 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v9 + 2, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v15 - 1, v15, &v9[2 * v14 + 2]);
            v21 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (**(v9 - 2) >= **v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &>(v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)v9, v16);
          v9 = v16 + 2;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)(v16 + 2), a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,re::Pair<unsigned long long const*,void *,true>*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = (__int128 *)(a2 - 2);
        if (*v20 < **v9)
        {
          v22 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v19;
          *v19 = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v9, v9 + 2, v9 + 4, (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v9, v9 + 2, v9 + 4, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)v9, (uint64_t)a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v9 + 1, v15 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v9 + 2, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v15 - 1, v15, &v9[2 * v14 + 2]);
            v21 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (**(v9 - 2) >= **v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &>(v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)v9, v16);
          v9 = v16 + 2;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)(v16 + 2), a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,re::Pair<unsigned int const*,void *,true>*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = a2 - 2;
        if (*v20 < **v9)
        {
          v22 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v19;
          *(_OWORD *)v19 = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v9, (_OWORD *)v9 + 1, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v9, (__n128 *)v9 + 1, (__n128 *)v9 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v9, (__n128 *)v9 + 1, (__n128 *)v9 + 2, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(&v9[2 * (v13 >> 1)], v9, (_OWORD *)a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v9, &v9[2 * (v13 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v9 + 2, (_OWORD *)v15 - 1, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v9 + 4, &v9[2 * v14 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v21 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (**(v9 - 2) >= **v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &>(v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((__n128 *)v9, v16);
          v9 = v16 + 2;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>((__n128 *)v16 + 1, a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,re::Pair<unsigned short const*,void *,true>*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = a2 - 2;
        if (*v20 < **v9)
        {
          v22 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v19;
          *(_OWORD *)v19 = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v9, (_OWORD *)v9 + 1, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v9, (__n128 *)v9 + 1, (__n128 *)v9 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v9, (__n128 *)v9 + 1, (__n128 *)v9 + 2, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(&v9[2 * (v13 >> 1)], v9, (_OWORD *)a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v9, &v9[2 * (v13 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v9 + 2, (_OWORD *)v15 - 1, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v9 + 4, &v9[2 * v14 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v21 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (**(v9 - 2) >= **v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned char const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<unsigned char const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &>(v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((__n128 *)v9, v16);
          v9 = v16 + 2;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>((__n128 *)v16 + 1, a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,re::Pair<unsigned char const*,void *,true>*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = (__int128 *)(a2 - 2);
        if (*v20 < **v9)
        {
          v22 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v19;
          *v19 = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v9, v9 + 2, v9 + 4, (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v9, v9 + 2, v9 + 4, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)v9, (uint64_t)a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v9 + 1, v15 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v9 + 2, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v15 - 1, v15, &v9[2 * v14 + 2]);
            v21 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (**(v9 - 2) >= **v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<long long const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &>(v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)v9, (uint64_t)v16);
          v9 = v16 + 2;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)(v16 + 2), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,re::Pair<long long const*,void *,true>*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = (__int128 *)(a2 - 2);
        if (*v20 < **v9)
        {
          v22 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v19;
          *v19 = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v9, v9 + 2, v9 + 4, (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v9, v9 + 2, v9 + 4, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)v9, (uint64_t)a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v9 + 1, v15 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v9 + 2, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v15 - 1, v15, &v9[2 * v14 + 2]);
            v21 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (**(v9 - 2) >= **v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<int const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &>(v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)v9, (uint64_t)v16);
          v9 = v16 + 2;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)(v16 + 2), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,re::Pair<int const*,void *,true>*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = a2 - 2;
        if (*v20 < **v9)
        {
          v22 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v19;
          *(_OWORD *)v19 = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v9, (_OWORD *)v9 + 1, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v9, (__n128 *)v9 + 1, (__n128 *)v9 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v9, (__n128 *)v9 + 1, (__n128 *)v9 + 2, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(&v9[2 * (v13 >> 1)], v9, (_OWORD *)a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v9, &v9[2 * (v13 >> 1)], (_OWORD *)a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v9 + 2, (_OWORD *)v15 - 1, (_OWORD *)a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v9 + 4, &v9[2 * v14 + 2], (_OWORD *)a2 - 3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v21 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (**(v9 - 2) >= **v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<short const*,void *,true> *,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &>(v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((__n128 *)v9, v16);
          v9 = v16 + 2;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>((__n128 *)v16 + 1, a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,re::Pair<short const*,void *,true>*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = a2 - 2;
        if (re::DynamicString::operator<(v20, *v9))
        {
          v22 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *(_OWORD *)v19;
          *(_OWORD *)v19 = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v9, v9 + 2, v9 + 4, a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>((uint64_t)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>((uint64_t)v9, (uint64_t)a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v21 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((re::DynamicString::operator<(*(v9 - 2), *v9) & 1) == 0)
          {
            v9 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::DynamicString const*,void *,true> *,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = (uint64_t *)std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::DynamicString const*,void *,true> *,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &>((__int128 *)v9, (__int128 *)a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v9, v16);
          v9 = v16 + 2;
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v16 + 2, a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,re::Pair<re::DynamicString const*,void *,true>*>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = (_QWORD *)a2[-1].n128_u64[0];
        v19 = (__int128 *)&a2[-1];
        if (*v20 >> 1 < *(_QWORD *)v9->n128_u64[0] >> 1)
        {
          v22 = (__int128)*v9;
          *v9 = (__n128)*v19;
          *v19 = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v9, &v9[1], &a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v9, v9 + 1, v9 + 2, a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((uint64_t)v9, (uint64_t)a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (__int128 *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)&v9[v13 >> 1], v9, &a2[-1]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v9, &v9[v13 >> 1], &a2[-1]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)&v9[1], (_QWORD **)v15 - 2, &a2[-2]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)&v9[2], &v9[v14 + 1], &a2[-3]);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v15 - 1, (_QWORD **)v15, &v9[v14 + 1]);
            v21 = (__int128)*v9;
            *v9 = (__n128)*v15;
            *v15 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_QWORD *)v9[-1].n128_u64[0] >> 1 >= *(_QWORD *)v9->n128_u64[0] >> 1)
          {
            v9 = (__n128 *)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::StringID const*,void *,true> *,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<re::StringID const*,void *,true> *,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &>((__int128 *)v9, (__int128 *)a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((uint64_t)v9, (uint64_t)v16);
          v9 = (__n128 *)(v16 + 1);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((uint64_t)(v16 + 1), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (__n128 *)(v16 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__n128 *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,re::Pair<re::StringID const*,void *,true>*>((unint64_t **)v9, (char *)a2, (char *)a2, a3);
        return;
    }
  }
}

  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = ((char *)a2 - (char *)v10) >> 4;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *(a2 - 2);
        v20 = a2 - 2;
        if ((*a3)(v21, *v10))
        {
          v23 = *(_OWORD *)v10;
          *(_OWORD *)v10 = *(_OWORD *)v20;
          *(_OWORD *)v20 = v23;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v10 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v10 + 2, v10 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2, a3);
        return;
      default:
        if (v13 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((uint64_t)v10, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((uint64_t)v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[2 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x801)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(&v10[2 * (v14 >> 1)], v10, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, &v10[2 * (v14 >> 1)], a2 - 2, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10 + 2, v16 - 2, a2 - 4, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10 + 4, &v10[2 * v15 + 2], a2 - 6, a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v16 - 2, v16, &v10[2 * v15 + 2], a3);
            v22 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v16;
            *(_OWORD *)v16 = v22;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(*(v10 - 2), *v10) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &>(v10, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v17 = (char *)std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &>((__int128 *)v10, (__int128 *)a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_14;
          v19 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((char *)v10, v17, a3);
          v10 = (uint64_t *)(v17 + 16);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v17 + 16, (char *)a2, a3))
          {
            v11 = v12 + 1;
            if (v19)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<google::protobuf::io::ZeroCopyOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, v17, a3, -v12, a5 & 1);
            v10 = (uint64_t *)(v17 + 16);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (uint64_t *)v17;
          if (v19)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,re::Pair<void const*,void *,true>*>((char *)v10, (char *)a2, (char *)a2, (uint64_t (**)(unint64_t, unint64_t))a3, a6);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 2) < v8[2])
        {
          v91 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v91;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(v8, (uint64_t)(v8 + 4), (uint64_t)(v8 + 8), (uint64_t)(a2 - 4));
        return;
      case 5uLL:
        v39 = (__int128 *)(v8 + 4);
        v40 = (__int128 *)(v8 + 8);
        v41 = (__int128 *)(v8 + 12);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(v8, (uint64_t)(v8 + 4), (uint64_t)(v8 + 8), (uint64_t)(v8 + 12));
        if (*(a2 - 2) < v8[14])
        {
          v42 = *v41;
          *v41 = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v42;
          if (v8[14] < v8[10])
          {
            v43 = *v40;
            *v40 = *v41;
            *v41 = v43;
            if (v8[10] < v8[6])
            {
              v44 = *v39;
              *v39 = *v40;
              *v40 = v44;
              if (v8[6] < v8[2])
              {
                v92 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v39;
                *v39 = v92;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v45 = v8 + 4;
          v47 = v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = v8;
              do
              {
                v50 = v45;
                v51 = v49[6];
                if (v51 < v49[2])
                {
                  v52 = *(_QWORD *)v45;
                  v53 = *((_DWORD *)v49 + 7);
                  v54 = v48;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v54 + 16) = *(_OWORD *)((char *)v8 + v54);
                    if (!v54)
                      break;
                    v55 = *(float *)((char *)v8 + v54 - 8);
                    v54 -= 16;
                    if (v51 >= v55)
                    {
                      v56 = (uint64_t)v8 + v54 + 16;
                      goto LABEL_79;
                    }
                  }
                  v56 = (uint64_t)v8;
LABEL_79:
                  *(_QWORD *)v56 = v52;
                  *(float *)(v56 + 8) = v51;
                  *(_DWORD *)(v56 + 12) = v53;
                }
                v45 = v50 + 4;
                v48 += 16;
                v49 = v50;
              }
              while (v50 + 4 != a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v82 = v45;
              v83 = a1[6];
              if (v83 < a1[2])
              {
                v84 = *(_QWORD *)v45;
                v85 = *((_DWORD *)a1 + 7);
                v86 = v82;
                do
                {
                  *(_OWORD *)v86 = *((_OWORD *)v86 - 1);
                  v87 = *(v86 - 6);
                  v86 -= 4;
                }
                while (v83 < v87);
                *(_QWORD *)v86 = v84;
                v86[2] = v83;
                *((_DWORD *)v86 + 3) = v85;
              }
              v45 = v82 + 4;
              a1 = v82;
            }
            while (v82 + 4 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v57 = (v10 - 2) >> 1;
            v58 = v57;
            do
            {
              v59 = v58;
              if (v57 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = &v8[4 * v60];
                if (2 * v59 + 2 < (uint64_t)v10 && v61[2] < v61[6])
                {
                  v61 += 4;
                  v60 = 2 * v59 + 2;
                }
                v62 = v8[4 * v59 + 2];
                if (v61[2] >= v62)
                {
                  v63 = &v8[4 * v59];
                  v64 = *(_QWORD *)v63;
                  v65 = *((_DWORD *)v63 + 3);
                  do
                  {
                    v66 = v63;
                    v63 = v61;
                    *(_OWORD *)v66 = *(_OWORD *)v61;
                    if (v57 < v60)
                      break;
                    v67 = 2 * v60;
                    v60 = (2 * v60) | 1;
                    v61 = &v8[4 * v60];
                    v68 = v67 + 2;
                    if (v68 < (uint64_t)v10 && v61[2] < v61[6])
                    {
                      v61 += 4;
                      v60 = v68;
                    }
                  }
                  while (v61[2] >= v62);
                  *(_QWORD *)v63 = v64;
                  v63[2] = v62;
                  *((_DWORD *)v63 + 3) = v65;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v69 = (unint64_t)v9 >> 4;
            do
            {
              v70 = 0;
              v93 = *(_OWORD *)v8;
              v71 = v8;
              do
              {
                v72 = v71;
                v71 += 4 * v70 + 4;
                v73 = 2 * v70;
                v70 = (2 * v70) | 1;
                v74 = v73 + 2;
                if (v74 < v69 && v71[2] < v71[6])
                {
                  v71 += 4;
                  v70 = v74;
                }
                *(_OWORD *)v72 = *(_OWORD *)v71;
              }
              while (v70 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
              a2 -= 4;
              if (v71 == a2)
              {
                *(_OWORD *)v71 = v93;
              }
              else
              {
                *(_OWORD *)v71 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v93;
                v75 = (char *)v71 - (char *)v8 + 16;
                if (v75 >= 17)
                {
                  v76 = (((unint64_t)v75 >> 4) - 2) >> 1;
                  v77 = v71[2];
                  if (v8[4 * v76 + 2] < v77)
                  {
                    v78 = *(_QWORD *)v71;
                    v79 = *((_DWORD *)v71 + 3);
                    do
                    {
                      v80 = v71;
                      v71 = &v8[4 * v76];
                      *(_OWORD *)v80 = *(_OWORD *)v71;
                      if (!v76)
                        break;
                      v76 = (v76 - 1) >> 1;
                    }
                    while (v8[4 * v76 + 2] < v77);
                    *(_QWORD *)v71 = v78;
                    v71[2] = v77;
                    *((_DWORD *)v71 + 3) = v79;
                  }
                }
              }
            }
            while (v69-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[4 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(&a1[4 * (v10 >> 1)], a1, a2 - 4);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, &a1[4 * (v10 >> 1)], a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1 + 4, v12 - 4, a2 - 8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1 + 8, &a1[4 * v11 + 4], a2 - 12);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(v12 - 4, v12, &a1[4 * v11 + 4]);
          v88 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v88;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v13 = a1[2];
          if (*(a1 - 2) < v13)
            goto LABEL_11;
          if (v13 >= *(a2 - 2))
          {
            v30 = a1 + 4;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              v31 = v30[2];
              v30 += 4;
            }
            while (v13 >= v31);
          }
          else
          {
            v28 = a1;
            do
            {
              v8 = v28 + 4;
              v29 = v28[6];
              v28 += 4;
            }
            while (v13 >= v29);
          }
          v32 = a2;
          if (v8 < a2)
          {
            v33 = a2;
            do
            {
              v32 = v33 - 4;
              v34 = *(v33 - 2);
              v33 -= 4;
            }
            while (v13 < v34);
          }
          v35 = *(_QWORD *)a1;
          v36 = *((_DWORD *)a1 + 3);
          while (v8 < v32)
          {
            v90 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v90;
            do
            {
              v37 = v8[6];
              v8 += 4;
            }
            while (v13 >= v37);
            do
            {
              v38 = *(v32 - 2);
              v32 -= 4;
            }
            while (v13 < v38);
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *((_QWORD *)v8 - 2) = v35;
          *(v8 - 2) = v13;
          *((_DWORD *)v8 - 1) = v36;
          continue;
        }
        v13 = a1[2];
LABEL_11:
        v14 = 0;
        v15 = *(_QWORD *)a1;
        v16 = *((_DWORD *)a1 + 3);
        do
        {
          v17 = a1[v14 + 6];
          v14 += 4;
        }
        while (v17 < v13);
        v18 = &a1[v14];
        v19 = a2;
        if (v14 == 4)
        {
          v22 = a2;
          while (v18 < v22)
          {
            v20 = v22 - 4;
            v23 = *(v22 - 2);
            v22 -= 4;
            if (v23 < v13)
              goto LABEL_21;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 4;
            v21 = *(v19 - 2);
            v19 -= 4;
          }
          while (v21 >= v13);
        }
LABEL_21:
        v8 = v18;
        if (v18 < v20)
        {
          v24 = v20;
          do
          {
            v89 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v24;
            *(_OWORD *)v24 = v89;
            do
            {
              v25 = v8[6];
              v8 += 4;
            }
            while (v25 < v13);
            do
            {
              v26 = *(v24 - 2);
              v24 -= 4;
            }
            while (v26 >= v13);
          }
          while (v8 < v24);
        }
        if (v8 - 4 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *((_QWORD *)v8 - 2) = v15;
        *(v8 - 2) = v13;
        *((_DWORD *)v8 - 1) = v16;
        if (v18 < v20)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *,false>(a1, v8 - 4, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, v8 - 4);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(v8, a2))
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 4;
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = a2 - v9;
    v11 = (uint64_t)(a2 - v9) >> 4;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v56 = *(_QWORD *)(a2 - 16);
        v55 = a2 - 16;
        v57 = *(_DWORD *)(v55 + 8);
        v58 = v56 < *(_QWORD *)v9;
        if (v57 != *(_DWORD *)(v9 + 8))
          v58 = v57 == 1;
        if (v58)
        {
          v138 = *(_OWORD *)v9;
          v59 = *(_QWORD *)v55;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v55 + 8);
          *(_QWORD *)v9 = v59;
          *(_DWORD *)(v55 + 8) = DWORD2(v138);
          *(_QWORD *)v55 = v138;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>((__int128 *)v9, (__int128 *)(v9 + 16), a2 - 16);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(v9, v9 + 16, v9 + 32, a2 - 16);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(v9, v9 + 16, v9 + 32, v9 + 48, a2 - 16);
        return;
      default:
        if (v10 <= 383)
        {
          v60 = v9 + 16;
          v62 = v9 == a2 || v60 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v62)
            {
              v63 = 0;
              v64 = v9;
              do
              {
                v65 = *(_DWORD *)(v64 + 24);
                v66 = *(_DWORD *)(v64 + 8);
                v67 = *(_QWORD *)(v64 + 16);
                v68 = *(_QWORD *)v64;
                v64 = v60;
                v69 = v65 == 1;
                v70 = v67 < v68;
                if (v65 == v66)
                  v69 = v70;
                if (v69)
                {
                  v71 = v63;
                  while (1)
                  {
                    v72 = v9 + v71;
                    *(_QWORD *)(v72 + 16) = *(_QWORD *)(v9 + v71);
                    *(_DWORD *)(v72 + 24) = *(_DWORD *)(v9 + v71 + 8);
                    if (!v71)
                      break;
                    v73 = *(_DWORD *)(v72 - 8);
                    v74 = v67 < *(_QWORD *)(v72 - 16);
                    if (v65 != v73)
                      v74 = v65 == 1;
                    v71 -= 16;
                    if (!v74)
                    {
                      v75 = v9 + v71 + 16;
                      goto LABEL_105;
                    }
                  }
                  v75 = v9;
LABEL_105:
                  *(_QWORD *)v75 = v67;
                  *(_DWORD *)(v75 + 8) = v65;
                }
                v60 = v64 + 16;
                v63 += 16;
              }
              while (v64 + 16 != a2);
            }
          }
          else if (!v62)
          {
            do
            {
              v123 = *(_DWORD *)(a1 + 24);
              v124 = *(_DWORD *)(a1 + 8);
              v125 = *(_QWORD *)(a1 + 16);
              v126 = *(_QWORD *)a1;
              a1 = v60;
              v127 = v123 == 1;
              v128 = v125 < v126;
              if (v123 == v124)
                v127 = v128;
              if (v127)
              {
                v129 = a1;
                do
                {
                  v130 = v129;
                  v131 = *(_QWORD *)(v129 - 16);
                  v129 -= 16;
                  *(_QWORD *)v130 = v131;
                  *(_DWORD *)(v130 + 8) = *(_DWORD *)(v130 - 8);
                  v132 = *(_DWORD *)(v130 - 24);
                  v133 = v125 < *(_QWORD *)(v130 - 32);
                  if (v123 != v132)
                    v133 = v123 == 1;
                }
                while (v133);
                *(_QWORD *)v129 = v125;
                *(_DWORD *)(v129 + 8) = v123;
              }
              v60 = a1 + 16;
            }
            while (a1 + 16 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v76 = (v11 - 2) >> 1;
            v77 = v76;
            do
            {
              v78 = v77;
              if (v76 >= v77)
              {
                v79 = (2 * v77) | 1;
                v80 = v9 + 16 * v79;
                if (2 * v78 + 2 >= (uint64_t)v11)
                {
                  v83 = *(_QWORD *)v80;
                }
                else
                {
                  v81 = *(_DWORD *)(v80 + 8);
                  if (v81 == *(_DWORD *)(v80 + 24))
                    v82 = *(_QWORD *)v80 < *(_QWORD *)(v80 + 16);
                  else
                    v82 = v81 == 1;
                  if (v82)
                    v83 = *(_QWORD *)(v80 + 16);
                  else
                    v83 = *(_QWORD *)v80;
                  if (v82)
                  {
                    v80 += 16;
                    v79 = 2 * v78 + 2;
                  }
                }
                v84 = v9 + 16 * v78;
                v85 = *(_DWORD *)(v80 + 8);
                v86 = *(_DWORD *)(v84 + 8);
                v87 = *(_QWORD *)v84;
                v88 = v83 < *(_QWORD *)v84;
                if (v85 != v86)
                  v88 = v85 == 1;
                if (!v88)
                {
                  do
                  {
                    v89 = v84;
                    v84 = v80;
                    v90 = *(_QWORD *)v80;
                    *(_DWORD *)(v89 + 8) = *(_DWORD *)(v84 + 8);
                    *(_QWORD *)v89 = v90;
                    if (v76 < v79)
                      break;
                    v91 = (2 * v79) | 1;
                    v80 = v9 + 16 * v91;
                    v79 = 2 * v79 + 2;
                    if (v79 >= (uint64_t)v11)
                    {
                      v95 = *(_QWORD *)v80;
                      v79 = v91;
                    }
                    else
                    {
                      v92 = *(_DWORD *)(v80 + 8);
                      v93 = v92 == *(_DWORD *)(v80 + 24) ? *(_QWORD *)v80 < *(_QWORD *)(v80 + 16) : v92 == 1;
                      v94 = !v93;
                      v95 = v93 ? *(_QWORD *)(v80 + 16) : *(_QWORD *)v80;
                      if (v94)
                        v79 = v91;
                      else
                        v80 += 16;
                    }
                    v96 = *(_DWORD *)(v80 + 8);
                    v97 = v95 < v87;
                    v98 = v96 == v86 ? v97 : v96 == 1;
                  }
                  while (v98 != 1);
                  *(_QWORD *)v84 = v87;
                  *(_DWORD *)(v84 + 8) = v86;
                }
              }
              v77 = v78 - 1;
            }
            while (v78);
            v99 = (unint64_t)v10 >> 4;
            do
            {
              v100 = 0;
              v139 = *(_OWORD *)v9;
              v101 = v99 - 2;
              if (v99 < 2)
                v101 = v99 - 1;
              v102 = v101 >> 1;
              v103 = v9;
              do
              {
                v104 = v103 + 16 * (v100 + 1);
                v105 = (2 * v100) | 1;
                v106 = 2 * v100 + 2;
                if (v106 < v99)
                {
                  v107 = *(_DWORD *)(v104 + 8);
                  if (v107 == *(_DWORD *)(v104 + 24) ? *(_QWORD *)v104 < *(_QWORD *)(v104 + 16) : v107 == 1)
                  {
                    v104 += 16;
                    v105 = v106;
                  }
                }
                v109 = *(_QWORD *)v104;
                *(_DWORD *)(v103 + 8) = *(_DWORD *)(v104 + 8);
                *(_QWORD *)v103 = v109;
                v103 = v104;
                v100 = v105;
              }
              while (v105 <= v102);
              a2 -= 16;
              if (v104 == a2)
              {
                *(_DWORD *)(v104 + 8) = DWORD2(v139);
                *(_QWORD *)v104 = v139;
              }
              else
              {
                v110 = *(_QWORD *)a2;
                *(_DWORD *)(v104 + 8) = *(_DWORD *)(a2 + 8);
                *(_QWORD *)v104 = v110;
                *(_DWORD *)(a2 + 8) = DWORD2(v139);
                *(_QWORD *)a2 = v139;
                v111 = v104 - v9 + 16;
                if (v111 >= 17)
                {
                  v112 = (((unint64_t)v111 >> 4) - 2) >> 1;
                  v113 = v9 + 16 * v112;
                  v114 = *(_DWORD *)(v113 + 8);
                  v115 = *(_DWORD *)(v104 + 8);
                  v116 = *(_QWORD *)v104;
                  if (v114 == v115 ? *(_QWORD *)v113 < *(_QWORD *)v104 : v114 == 1)
                  {
                    do
                    {
                      v118 = v104;
                      v104 = v113;
                      v119 = *(_QWORD *)v113;
                      *(_DWORD *)(v118 + 8) = *(_DWORD *)(v104 + 8);
                      *(_QWORD *)v118 = v119;
                      if (!v112)
                        break;
                      v112 = (v112 - 1) >> 1;
                      v113 = v9 + 16 * v112;
                      v120 = *(_DWORD *)(v113 + 8);
                    }
                    while (v120 == v115 ? *(_QWORD *)v113 < v116 : v120 == 1);
                    *(_QWORD *)v104 = v116;
                    *(_DWORD *)(v104 + 8) = v115;
                  }
                }
              }
            }
            while (v99-- > 2);
          }
          return;
        }
        v12 = v11 >> 1;
        v13 = v9 + 16 * (v11 >> 1);
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>((__int128 *)(a1 + 16 * (v11 >> 1)), (__int128 *)a1, a2 - 16);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>((__int128 *)a1, (__int128 *)(a1 + 16 * (v11 >> 1)), a2 - 16);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>((__int128 *)(a1 + 16), (__int128 *)(v13 - 16), a2 - 32);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>((__int128 *)(a1 + 32), (__int128 *)(a1 + 16 + 16 * v12), a2 - 48);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>((__int128 *)(v13 - 16), (__int128 *)v13, a1 + 16 + 16 * v12);
          v135 = *(_OWORD *)a1;
          v14 = *(_QWORD *)v13;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v13 + 8);
          *(_QWORD *)a1 = v14;
          *(_DWORD *)(v13 + 8) = DWORD2(v135);
          *(_QWORD *)v13 = v135;
        }
        --a4;
        v15 = *(_QWORD *)a1;
        if ((a5 & 1) == 0)
        {
          v17 = *(_DWORD *)(a1 - 8);
          v16 = *(_DWORD *)(a1 + 8);
          if (v17 == v16)
            v18 = *(_QWORD *)(a1 - 16) < v15;
          else
            v18 = v17 == 1;
          if (v18)
            goto LABEL_14;
          if (v16 == *(_DWORD *)(a2 - 8))
            v40 = v15 < *(_QWORD *)(a2 - 16);
          else
            v40 = v16 == 1;
          if (v40)
          {
            v9 = a1;
            do
            {
              v41 = *(_QWORD *)(v9 + 16);
              v9 += 16;
              v42 = v15 < v41;
              if (v16 != *(_DWORD *)(v9 + 8))
                v42 = v16 == 1;
            }
            while (!v42);
          }
          else
          {
            v43 = a1 + 16;
            do
            {
              v9 = v43;
              if (v43 >= a2)
                break;
              v44 = v16 == *(_DWORD *)(v43 + 8) ? v15 < *(_QWORD *)v43 : v16 == 1;
              v43 += 16;
            }
            while (!v44);
          }
          v45 = a2;
          if (v9 < a2)
          {
            v45 = a2;
            do
            {
              v46 = *(_QWORD *)(v45 - 16);
              v45 -= 16;
              v47 = v15 < v46;
              if (v16 != *(_DWORD *)(v45 + 8))
                v47 = v16 == 1;
            }
            while (v47);
          }
          while (v9 < v45)
          {
            v137 = *(_OWORD *)v9;
            v48 = *(_QWORD *)v45;
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v45 + 8);
            *(_QWORD *)v9 = v48;
            *(_DWORD *)(v45 + 8) = DWORD2(v137);
            *(_QWORD *)v45 = v137;
            do
            {
              v49 = v16 == 1;
              v50 = *(_QWORD *)(v9 + 16);
              v9 += 16;
              v51 = v15 < v50;
              if (v16 == *(_DWORD *)(v9 + 8))
                v49 = v51;
            }
            while (!v49);
            do
            {
              v52 = *(_QWORD *)(v45 - 16);
              v45 -= 16;
              v53 = v15 < v52;
              if (v16 != *(_DWORD *)(v45 + 8))
                v53 = v16 == 1;
            }
            while (v53);
          }
          if (v9 - 16 != a1)
          {
            v54 = *(_QWORD *)(v9 - 16);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 - 8);
            *(_QWORD *)a1 = v54;
          }
          a5 = 0;
          *(_QWORD *)(v9 - 16) = v15;
          *(_DWORD *)(v9 - 8) = v16;
          continue;
        }
        v16 = *(_DWORD *)(a1 + 8);
LABEL_14:
        v19 = 0;
        do
        {
          v20 = *(_DWORD *)(a1 + v19 + 24);
          v21 = *(_QWORD *)(a1 + v19 + 16) < v15;
          if (v20 != v16)
            v21 = v20 == 1;
          v19 += 16;
        }
        while (v21);
        v22 = a1 + v19;
        v23 = a2;
        if (v19 == 16)
        {
          v23 = a2;
          do
          {
            if (v22 >= v23)
              break;
            v27 = *(_QWORD *)(v23 - 16);
            v23 -= 16;
            v28 = *(_DWORD *)(v23 + 8);
            v29 = v27 < v15;
            if (v28 != v16)
              v29 = v28 == 1;
          }
          while (!v29);
        }
        else
        {
          do
          {
            v24 = *(_QWORD *)(v23 - 16);
            v23 -= 16;
            v25 = *(_DWORD *)(v23 + 8);
            v26 = v24 < v15;
            if (v25 != v16)
              v26 = v25 == 1;
          }
          while (!v26);
        }
        v9 = v22;
        if (v22 < v23)
        {
          v30 = v23;
          do
          {
            v136 = *(_OWORD *)v9;
            v31 = *(_QWORD *)v30;
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v30 + 8);
            *(_QWORD *)v9 = v31;
            *(_DWORD *)(v30 + 8) = DWORD2(v136);
            *(_QWORD *)v30 = v136;
            do
            {
              v32 = *(_QWORD *)(v9 + 16);
              v9 += 16;
              v33 = *(_DWORD *)(v9 + 8);
              v34 = v32 < v15;
              if (v33 != v16)
                v34 = v33 == 1;
            }
            while (v34);
            do
            {
              v35 = *(_QWORD *)(v30 - 16);
              v30 -= 16;
              v36 = *(_DWORD *)(v30 + 8);
              v37 = v35 < v15;
              if (v36 != v16)
                v37 = v36 == 1;
            }
            while (!v37);
          }
          while (v9 < v30);
        }
        if (v9 - 16 != a1)
        {
          v38 = *(_QWORD *)(v9 - 16);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v9 - 8);
          *(_QWORD *)a1 = v38;
        }
        *(_QWORD *)(v9 - 16) = v15;
        *(_DWORD *)(v9 - 8) = v16;
        if (v22 < v23)
        {
LABEL_43:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *,false>(a1, v9 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v39 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(a1, v9 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *>(v9, a2))
        {
          if (v39)
            continue;
          goto LABEL_43;
        }
        a2 = v9 - 16;
        if (!v39)
          goto LABEL_1;
        return;
    }
  }
}

  v180 = (__int128 *)((char *)a2 - 56);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((unsigned __int8 *)a2 - 6) > *(unsigned __int8 *)(a1 + 50))
        {
          v71 = (__int128 *)a1;
          v72 = (__int128 *)((char *)a2 - 56);
          goto LABEL_57;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, (uint64_t)v180);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a1 + 112, (uint64_t)v180);
        return;
      case 5:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, a1 + 56, a1 + 112, a1 + 168);
        if (*((unsigned __int8 *)a2 - 6) > *(unsigned __int8 *)(a1 + 218))
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)(a1 + 168), v180);
          if (*(unsigned __int8 *)(a1 + 218) > *(unsigned __int8 *)(a1 + 162))
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)(a1 + 112), (__int128 *)(a1 + 168));
            if (*(unsigned __int8 *)(a1 + 162) > *(unsigned __int8 *)(a1 + 106))
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)(a1 + 56), (__int128 *)(a1 + 112));
              if (*(unsigned __int8 *)(a1 + 106) > *(unsigned __int8 *)(a1 + 50))
              {
                v71 = (__int128 *)a1;
                v72 = (__int128 *)(a1 + 56);
LABEL_57:
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>(v71, v72);
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 1343)
        {
          if ((a4 & 1) != 0)
          {
            if ((__int128 *)a1 != a2)
            {
              v73 = (_OWORD *)(a1 + 56);
              if ((__int128 *)(a1 + 56) != a2)
              {
                v74 = 0;
                v75 = (re::AssetHandle *)&v189;
                v76 = a1;
                do
                {
                  v77 = v73;
                  if (*(unsigned __int8 *)(v76 + 106) > *(unsigned __int8 *)(v76 + 50))
                  {
                    v78 = *(_OWORD *)(v76 + 72);
                    v188 = *v73;
                    v189 = v78;
                    *(_QWORD *)(v76 + 72) = 0;
                    *(_QWORD *)(v76 + 80) = 0;
                    v79 = *(_QWORD *)(v76 + 96);
                    v190 = *(_QWORD *)(v76 + 88);
                    *(_QWORD *)(v76 + 88) = 0;
                    v191 = v79;
                    v80 = *(_DWORD *)(v76 + 104);
                    v81 = v74;
                    v192 = v80;
                    while (1)
                    {
                      v82 = a1 + v81;
                      v83 = *(_QWORD *)(a1 + v81 + 32);
                      v84 = *(_QWORD *)(a1 + v81 + 40);
                      *(_QWORD *)(v82 + 32) = *(_QWORD *)(a1 + v81 + 88);
                      *(_DWORD *)(v82 + 104) = *(_DWORD *)(a1 + v81 + 48);
                      v85 = *(_OWORD *)(a1 + v81 + 16);
                      *(_OWORD *)(v82 + 56) = *(_OWORD *)(a1 + v81);
                      v86 = *(_OWORD *)(a1 + v81 + 72);
                      *(_OWORD *)(v82 + 72) = v85;
                      *(_OWORD *)(v82 + 16) = v86;
                      *(_QWORD *)(v82 + 88) = v83;
                      *(_QWORD *)(v82 + 96) = v84;
                      if (!v81)
                        break;
                      v81 -= 56;
                      if (BYTE2(v192) <= *(unsigned __int8 *)(v82 - 6))
                      {
                        v87 = a1 + v81 + 56;
                        goto LABEL_75;
                      }
                    }
                    v87 = a1;
LABEL_75:
                    *(_OWORD *)v87 = v188;
                    v88 = *(_QWORD *)(v87 + 24);
                    v89 = *(_QWORD *)(v87 + 32);
                    *(_QWORD *)(v87 + 24) = *((_QWORD *)&v189 + 1);
                    *((_QWORD *)&v189 + 1) = v88;
                    v90 = *(_QWORD *)(v87 + 16);
                    *(_QWORD *)(v87 + 16) = 0;
                    *(_QWORD *)(v87 + 16) = v189;
                    *(_QWORD *)(v87 + 32) = v190;
                    *(_QWORD *)&v189 = v90;
                    v190 = v89;
                    v91 = v191;
                    *(_DWORD *)(v82 + 48) = v192;
                    *(_QWORD *)(v82 + 40) = v91;
                    re::AssetHandle::~AssetHandle(v75);
                  }
                  v73 = (_OWORD *)((char *)v77 + 56);
                  v74 += 56;
                  v76 = (uint64_t)v77;
                }
                while ((_OWORD *)((char *)v77 + 56) != a2);
              }
            }
          }
          else if ((__int128 *)a1 != a2)
          {
            v164 = (_OWORD *)(a1 + 56);
            if ((__int128 *)(a1 + 56) != a2)
            {
              v165 = (re::AssetHandle *)&v189;
              v166 = a1 + 96;
              do
              {
                v167 = v164;
                if (*(unsigned __int8 *)(a1 + 106) > *(unsigned __int8 *)(a1 + 50))
                {
                  v168 = *(_OWORD *)(a1 + 72);
                  v188 = *v164;
                  v189 = v168;
                  *(_QWORD *)(a1 + 72) = 0;
                  *(_QWORD *)(a1 + 80) = 0;
                  v169 = *(_QWORD *)(a1 + 96);
                  v190 = *(_QWORD *)(a1 + 88);
                  *(_QWORD *)(a1 + 88) = 0;
                  v191 = v169;
                  v170 = v166;
                  v192 = *(_DWORD *)(a1 + 104);
                  do
                  {
                    v171 = (_QWORD *)v170;
                    v172 = *(_OWORD *)(v170 - 80);
                    *(_OWORD *)(v170 - 40) = *(_OWORD *)(v170 - 96);
                    v173 = *(_OWORD *)(v170 - 24);
                    *(_OWORD *)(v170 - 24) = v172;
                    *(_OWORD *)(v170 - 80) = v173;
                    v174 = *(_QWORD *)(v170 - 8);
                    *(_QWORD *)(v170 - 8) = *(_QWORD *)(v170 - 64);
                    *(_QWORD *)(v170 - 64) = v174;
                    *(_DWORD *)(v170 + 8) = *(_DWORD *)(v170 - 48);
                    v175 = *(_QWORD *)(v170 - 56);
                    v170 -= 56;
                    *v171 = v175;
                  }
                  while (BYTE2(v192) > *((unsigned __int8 *)v171 - 102));
                  *(_OWORD *)(v170 - 40) = v188;
                  v176 = *(_QWORD *)(v170 - 16);
                  *(_QWORD *)(v170 - 16) = *((_QWORD *)&v189 + 1);
                  *((_QWORD *)&v189 + 1) = v176;
                  v177 = *(_QWORD *)(v170 - 24);
                  *(_QWORD *)(v170 - 24) = 0;
                  *(_QWORD *)(v170 - 24) = v189;
                  *(_QWORD *)&v189 = v177;
                  v178 = *(_QWORD *)(v170 - 8);
                  *(_QWORD *)(v170 - 8) = v190;
                  v190 = v178;
                  v179 = v191;
                  *(_DWORD *)(v170 + 8) = v192;
                  *(_QWORD *)v170 = v179;
                  re::AssetHandle::~AssetHandle(v165);
                }
                v164 = (_OWORD *)((char *)v167 + 56);
                v166 += 56;
                a1 = (uint64_t)v167;
              }
              while ((_OWORD *)((char *)v167 + 56) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)a1 != a2)
          {
            v92 = (unint64_t)(v9 - 2) >> 1;
            v93 = (re::AssetHandle *)&v189;
            v94 = v92;
            do
            {
              v95 = v94;
              if (v92 >= v94)
              {
                v96 = (2 * v94) | 1;
                v97 = a1 + 56 * v96;
                if (2 * v95 + 2 < v9)
                {
                  v98 = *(unsigned __int8 *)(a1 + 56 * v96 + 50);
                  v99 = *(unsigned __int8 *)(v97 + 106);
                  v97 += 56 * (v98 > v99);
                  if (v98 > v99)
                    v96 = 2 * v95 + 2;
                }
                if (*(unsigned __int8 *)(v97 + 50) <= *(unsigned __int8 *)(a1 + 56 * v95 + 50))
                {
                  v100 = a1 + 56 * v95;
                  v188 = *(_OWORD *)v100;
                  *((_QWORD *)v93 + 1) = 0;
                  *((_QWORD *)v93 + 2) = 0;
                  *(_QWORD *)v93 = 0;
                  *((_QWORD *)&v189 + 1) = *(_QWORD *)(v100 + 24);
                  *(_QWORD *)(v100 + 24) = 0;
                  v101 = v189;
                  *(_QWORD *)&v189 = 0;
                  *(_QWORD *)&v189 = *(_QWORD *)(v100 + 16);
                  *(_QWORD *)(v100 + 16) = v101;
                  v102 = v190;
                  v190 = *(_QWORD *)(v100 + 32);
                  *(_QWORD *)(v100 + 32) = v102;
                  v103 = *(_QWORD *)(v100 + 40);
                  v192 = *(_DWORD *)(v100 + 48);
                  v191 = v103;
                  do
                  {
                    v104 = v97;
                    *(_OWORD *)v100 = *(_OWORD *)v97;
                    v105 = *(_QWORD *)(v100 + 24);
                    *(_QWORD *)(v100 + 24) = *(_QWORD *)(v104 + 24);
                    *(_QWORD *)(v104 + 24) = v105;
                    v106 = *(_QWORD *)(v100 + 16);
                    *(_QWORD *)(v100 + 16) = 0;
                    *(_QWORD *)(v100 + 16) = *(_QWORD *)(v104 + 16);
                    *(_QWORD *)(v104 + 16) = v106;
                    v107 = *(_QWORD *)(v100 + 32);
                    *(_QWORD *)(v100 + 32) = *(_QWORD *)(v104 + 32);
                    *(_QWORD *)(v104 + 32) = v107;
                    v108 = *(_QWORD *)(v104 + 40);
                    *(_DWORD *)(v100 + 48) = *(_DWORD *)(v104 + 48);
                    *(_QWORD *)(v100 + 40) = v108;
                    if (v92 < v96)
                      break;
                    v109 = (2 * v96) | 1;
                    v97 = a1 + 56 * v109;
                    v110 = 2 * v96 + 2;
                    if (v110 < v9)
                    {
                      v111 = *(unsigned __int8 *)(a1 + 56 * v109 + 50);
                      v112 = *(unsigned __int8 *)(v97 + 106);
                      v97 += 56 * (v111 > v112);
                      if (v111 > v112)
                        v109 = v110;
                    }
                    v100 = v104;
                    v96 = v109;
                  }
                  while (*(unsigned __int8 *)(v97 + 50) <= BYTE2(v192));
                  *(_OWORD *)v104 = v188;
                  v113 = *(_QWORD *)(v104 + 24);
                  v114 = *(_QWORD *)(v104 + 32);
                  *(_QWORD *)(v104 + 24) = *((_QWORD *)&v189 + 1);
                  *((_QWORD *)&v189 + 1) = v113;
                  v115 = *(_QWORD *)(v104 + 16);
                  *(_QWORD *)(v104 + 16) = 0;
                  *(_QWORD *)(v104 + 16) = v189;
                  *(_QWORD *)(v104 + 32) = v190;
                  *(_QWORD *)&v189 = v115;
                  v190 = v114;
                  LODWORD(v115) = v192;
                  *(_QWORD *)(v104 + 40) = v191;
                  *(_DWORD *)(v104 + 48) = v115;
                  re::AssetHandle::~AssetHandle(v93);
                }
              }
              v94 = v95 - 1;
            }
            while (v95);
            v116 = v8 / 0x38uLL;
            do
            {
              v117 = 0;
              v118 = a2;
              v182 = *(_OWORD *)a1;
              v184 = 0;
              v185 = 0;
              v183 = 0;
              v119 = *(_QWORD *)(a1 + 32);
              v184 = *(_QWORD *)(a1 + 24);
              v183 = *(_QWORD *)(a1 + 16);
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)(a1 + 24) = 0;
              v120 = v185;
              v185 = v119;
              *(_QWORD *)(a1 + 32) = v120;
              LODWORD(v120) = *(_DWORD *)(a1 + 48);
              v186 = *(_QWORD *)(a1 + 40);
              v187 = v120;
              v121 = a1;
              do
              {
                v122 = v117 + 1;
                v123 = v121 + 56 * (v117 + 1);
                v124 = (2 * v117) | 1;
                v125 = 2 * v117 + 2;
                if (v125 < v116)
                {
                  v126 = *(unsigned __int8 *)(v121 + 56 * v122 + 50);
                  v127 = *(unsigned __int8 *)(v123 + 106);
                  v123 += 56 * (v126 > v127);
                  if (v126 > v127)
                    v124 = v125;
                }
                *(_OWORD *)v121 = *(_OWORD *)v123;
                v128 = *(_QWORD *)(v121 + 24);
                *(_QWORD *)(v121 + 24) = *(_QWORD *)(v123 + 24);
                *(_QWORD *)(v123 + 24) = v128;
                v129 = *(_QWORD *)(v121 + 16);
                *(_QWORD *)(v121 + 16) = 0;
                *(_QWORD *)(v121 + 16) = *(_QWORD *)(v123 + 16);
                *(_QWORD *)(v123 + 16) = v129;
                v130 = *(_QWORD *)(v121 + 32);
                *(_QWORD *)(v121 + 32) = *(_QWORD *)(v123 + 32);
                *(_QWORD *)(v123 + 32) = v130;
                v131 = v123 + 40;
                v132 = *(_QWORD *)(v123 + 40);
                *(_DWORD *)(v121 + 48) = *(_DWORD *)(v123 + 48);
                *(_QWORD *)(v121 + 40) = v132;
                v121 = v123;
                v117 = v124;
              }
              while (v124 <= (uint64_t)((unint64_t)(v116 - 2) >> 1));
              a2 = (__int128 *)((char *)a2 - 56);
              if ((__int128 *)v123 == (__int128 *)((char *)v118 - 56))
              {
                *(_OWORD *)v123 = v182;
                v159 = *(_QWORD *)(v123 + 24);
                *(_QWORD *)(v123 + 24) = v184;
                v184 = v159;
                v160 = *(_QWORD *)(v123 + 16);
                *(_QWORD *)(v123 + 16) = 0;
                *(_QWORD *)(v123 + 16) = v183;
                v183 = v160;
                v161 = *(_QWORD *)(v123 + 32);
                *(_QWORD *)(v123 + 32) = v185;
                v185 = v161;
                v162 = v186;
                *(_DWORD *)(v131 + 8) = v187;
                *(_QWORD *)v131 = v162;
              }
              else
              {
                *(_OWORD *)v123 = *a2;
                v133 = *(_QWORD *)(v123 + 24);
                *(_QWORD *)(v123 + 24) = *((_QWORD *)v118 - 4);
                *((_QWORD *)v118 - 4) = v133;
                v134 = *(_QWORD *)(v123 + 16);
                *(_QWORD *)(v123 + 16) = 0;
                *(_QWORD *)(v123 + 16) = *((_QWORD *)v118 - 5);
                *((_QWORD *)v118 - 5) = v134;
                v135 = *(_QWORD *)(v123 + 32);
                *(_QWORD *)(v123 + 32) = *((_QWORD *)v118 - 3);
                *((_QWORD *)v118 - 3) = v135;
                v136 = *((_QWORD *)v118 - 2);
                *(_DWORD *)(v123 + 48) = *((_DWORD *)v118 - 2);
                *(_QWORD *)v131 = v136;
                *a2 = v182;
                v137 = *((_QWORD *)v118 - 4);
                *((_QWORD *)v118 - 4) = v184;
                v184 = v137;
                v138 = *((_QWORD *)v118 - 5);
                *((_QWORD *)v118 - 5) = 0;
                *((_QWORD *)v118 - 5) = v183;
                v183 = v138;
                v139 = *((_QWORD *)v118 - 3);
                *((_QWORD *)v118 - 3) = v185;
                v185 = v139;
                v140 = v186;
                *((_DWORD *)v118 - 2) = v187;
                *((_QWORD *)v118 - 2) = v140;
                v141 = v123 - a1 + 56;
                if (v141 >= 57)
                {
                  v142 = (v141 / 0x38uLL - 2) >> 1;
                  if (*(unsigned __int8 *)(a1 + 56 * v142 + 50) > *(unsigned __int8 *)(v123 + 50))
                  {
                    v188 = *(_OWORD *)v123;
                    v190 = 0;
                    v189 = 0uLL;
                    *((_QWORD *)&v189 + 1) = *(_QWORD *)(v123 + 24);
                    *(_QWORD *)(v123 + 24) = 0;
                    v143 = v189;
                    *(_QWORD *)&v189 = 0;
                    *(_QWORD *)&v189 = *(_QWORD *)(v123 + 16);
                    *(_QWORD *)(v123 + 16) = v143;
                    v144 = v190;
                    v190 = *(_QWORD *)(v123 + 32);
                    *(_QWORD *)(v123 + 32) = v144;
                    v145 = *(_QWORD *)v131;
                    v192 = *(_DWORD *)(v123 + 48);
                    v191 = v145;
                    do
                    {
                      v146 = v123;
                      v123 = a1 + 56 * v142;
                      *(_OWORD *)v146 = *(_OWORD *)v123;
                      v147 = *(_QWORD *)(v146 + 24);
                      v148 = (uint64_t *)(v123 + 24);
                      *(_QWORD *)(v146 + 24) = *(_QWORD *)(v123 + 24);
                      *(_QWORD *)(v123 + 24) = v147;
                      v149 = *(_QWORD *)(v146 + 16);
                      *(_QWORD *)(v146 + 16) = 0;
                      v150 = (uint64_t *)(v123 + 16);
                      *(_QWORD *)(v146 + 16) = *(_QWORD *)(v123 + 16);
                      *(_QWORD *)(v123 + 16) = v149;
                      v151 = (uint64_t *)(v123 + 32);
                      v152 = *(_QWORD *)(v146 + 32);
                      *(_QWORD *)(v146 + 32) = *(_QWORD *)(v123 + 32);
                      *(_QWORD *)(v123 + 32) = v152;
                      v154 = *(_QWORD *)(v123 + 40);
                      v153 = v123 + 40;
                      *(_DWORD *)(v146 + 48) = *(_DWORD *)(v123 + 48);
                      *(_QWORD *)(v146 + 40) = v154;
                      if (!v142)
                        break;
                      v142 = (v142 - 1) >> 1;
                    }
                    while (*(unsigned __int8 *)(a1 + 56 * v142 + 50) > BYTE2(v192));
                    *(_OWORD *)v123 = v188;
                    v155 = *v148;
                    *v148 = *((_QWORD *)&v189 + 1);
                    *((_QWORD *)&v189 + 1) = v155;
                    v156 = *v150;
                    *v150 = 0;
                    *v150 = v189;
                    *(_QWORD *)&v189 = v156;
                    v157 = *v151;
                    *v151 = v190;
                    v190 = v157;
                    v158 = v191;
                    *(_DWORD *)(v153 + 8) = v192;
                    *(_QWORD *)v153 = v158;
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v189);
                  }
                }
              }
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v183);
            }
            while (v116-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = (_OWORD *)(a1 + 56 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 < 0x1C01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>((uint64_t)v11, a1, (uint64_t)v180);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, (uint64_t)v11, (uint64_t)v180);
          v12 = 56 * v10;
          v13 = a1 + 56 * v10;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1 + 56, v13 - 56, (uint64_t)(a2 - 7));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1 + 112, a1 + 56 + v12, (uint64_t)a2 - 168);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(v13 - 56, (uint64_t)v11, a1 + 56 + v12);
          v188 = *(_OWORD *)a1;
          v190 = 0;
          v189 = 0uLL;
          v14 = *(_QWORD *)(a1 + 32);
          v189 = *(_OWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          v15 = v190;
          v190 = v14;
          *(_QWORD *)(a1 + 32) = v15;
          LODWORD(v15) = *(_DWORD *)(a1 + 48);
          v191 = *(_QWORD *)(a1 + 40);
          v192 = v15;
          v17 = *(_QWORD *)(a1 + 16);
          v16 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = 0;
          v18 = *(_QWORD *)(v13 + 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v13 + 16);
          *(_QWORD *)(a1 + 24) = v18;
          *(_QWORD *)(v13 + 16) = v17;
          *(_QWORD *)(v13 + 24) = v16;
          v19 = *(_QWORD *)(a1 + 32);
          v20 = *(_QWORD *)(v13 + 40);
          v21 = *(_DWORD *)(v13 + 48);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v13 + 32);
          *(_QWORD *)(a1 + 40) = v20;
          *(_QWORD *)(v13 + 32) = v19;
          *(_OWORD *)a1 = *v11;
          *(_DWORD *)(a1 + 48) = v21;
          *v11 = v188;
          *(_QWORD *)(v13 + 24) = *((_QWORD *)&v189 + 1);
          *((_QWORD *)&v189 + 1) = v16;
          v22 = *(_QWORD *)(v13 + 16);
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 16) = v189;
          *(_QWORD *)&v189 = v22;
          v23 = *(_QWORD *)(v13 + 32);
          *(_QWORD *)(v13 + 32) = v190;
          v190 = v23;
          v24 = v191;
          *(_DWORD *)(v13 + 48) = v192;
          *(_QWORD *)(v13 + 40) = v24;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v189);
        }
        --a3;
        if ((a4 & 1) == 0 && *(unsigned __int8 *)(a1 - 6) <= *(unsigned __int8 *)(a1 + 50))
        {
          v188 = *(_OWORD *)a1;
          v190 = 0;
          v189 = 0uLL;
          v50 = *(_QWORD *)(a1 + 32);
          v189 = *(_OWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          v51 = v190;
          v190 = v50;
          *(_QWORD *)(a1 + 32) = v51;
          v52 = *(_QWORD *)(a1 + 40);
          v192 = *(_DWORD *)(a1 + 48);
          v191 = v52;
          if (BYTE2(v192) <= *((unsigned __int8 *)a2 - 6))
          {
            v55 = a1 + 56;
            do
            {
              v7 = v55;
              if (v55 >= (unint64_t)a2)
                break;
              v56 = *(unsigned __int8 *)(v55 + 50);
              v55 += 56;
            }
            while (BYTE2(v192) <= v56);
          }
          else
          {
            v53 = a1;
            do
            {
              v7 = v53 + 56;
              v54 = *(unsigned __int8 *)(v53 + 106);
              v53 += 56;
            }
            while (BYTE2(v192) <= v54);
          }
          v57 = a2;
          if (v7 < (unint64_t)a2)
          {
            v58 = a2;
            do
            {
              v57 = (__int128 *)((char *)v58 - 56);
              v59 = *((unsigned __int8 *)v58 - 6);
              v58 = (__int128 *)((char *)v58 - 56);
            }
            while (BYTE2(v192) > v59);
          }
          while (v7 < (unint64_t)v57)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)v7, v57);
            do
            {
              v60 = *(unsigned __int8 *)(v7 + 106);
              v7 += 56;
            }
            while (BYTE2(v192) <= v60);
            do
            {
              v61 = *((unsigned __int8 *)v57 - 6);
              v57 = (__int128 *)((char *)v57 - 56);
            }
            while (!v61);
          }
          v62 = (_OWORD *)(v7 - 56);
          if (v7 - 56 != a1)
          {
            *(_OWORD *)a1 = *v62;
            v63 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v7 - 32);
            *(_QWORD *)(v7 - 32) = v63;
            v64 = *(_QWORD *)(a1 + 16);
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 40);
            *(_QWORD *)(v7 - 40) = v64;
            v65 = *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 24);
            *(_QWORD *)(v7 - 24) = v65;
            v66 = *(_QWORD *)(v7 - 16);
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(v7 - 8);
            *(_QWORD *)(a1 + 40) = v66;
          }
          *v62 = v188;
          v67 = *(_QWORD *)(v7 - 32);
          *(_QWORD *)(v7 - 32) = *((_QWORD *)&v189 + 1);
          *((_QWORD *)&v189 + 1) = v67;
          v68 = *(_QWORD *)(v7 - 40);
          *(_QWORD *)(v7 - 40) = 0;
          *(_QWORD *)(v7 - 40) = v189;
          *(_QWORD *)&v189 = v68;
          v69 = *(_QWORD *)(v7 - 24);
          *(_QWORD *)(v7 - 24) = v190;
          v190 = v69;
          v70 = v191;
          *(_DWORD *)(v7 - 8) = v192;
          *(_QWORD *)(v7 - 16) = v70;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v189);
          a4 = 0;
          continue;
        }
        v25 = 0;
        v26 = *(_OWORD *)a1;
        v190 = 0;
        v189 = 0uLL;
        v27 = *(_QWORD *)(a1 + 32);
        v189 = *(_OWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        v28 = v190;
        v190 = v27;
        v29 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 32) = v28;
        v192 = *(_DWORD *)(a1 + 48);
        v188 = v26;
        v191 = v29;
        do
        {
          v30 = *(unsigned __int8 *)(a1 + v25 + 106);
          v25 += 56;
        }
        while (v30 > BYTE2(v192));
        v31 = a1 + v25;
        v32 = a2;
        if (v25 == 56)
        {
          v35 = a2;
          while (v31 < (unint64_t)v35)
          {
            v33 = (__int128 *)((char *)v35 - 56);
            v36 = *((unsigned __int8 *)v35 - 6);
            v35 = (__int128 *)((char *)v35 - 56);
            if (v36 > BYTE2(v192))
              goto LABEL_20;
          }
          v33 = v35;
        }
        else
        {
          do
          {
            v33 = (__int128 *)((char *)v32 - 56);
            v34 = *((unsigned __int8 *)v32 - 6);
            v32 = (__int128 *)((char *)v32 - 56);
          }
          while (v34 <= BYTE2(v192));
        }
LABEL_20:
        if (v31 >= (unint64_t)v33)
        {
          v7 = v31;
        }
        else
        {
          v37 = v33;
          v7 = v31;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *&>((__int128 *)v7, v37);
            do
            {
              v38 = *(unsigned __int8 *)(v7 + 106);
              v7 += 56;
            }
            while (v38 > BYTE2(v192));
            do
            {
              v39 = *((unsigned __int8 *)v37 - 6);
              v37 = (__int128 *)((char *)v37 - 56);
            }
            while (v39 <= BYTE2(v192));
          }
          while (v7 < (unint64_t)v37);
        }
        v40 = (_OWORD *)(v7 - 56);
        if (v7 - 56 != a1)
        {
          *(_OWORD *)a1 = *v40;
          v41 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(v7 - 32);
          *(_QWORD *)(v7 - 32) = v41;
          v42 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 40);
          *(_QWORD *)(v7 - 40) = v42;
          v43 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 24);
          *(_QWORD *)(v7 - 24) = v43;
          v44 = *(_QWORD *)(v7 - 16);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v7 - 8);
          *(_QWORD *)(a1 + 40) = v44;
        }
        *v40 = v188;
        v45 = *(_QWORD *)(v7 - 32);
        *(_QWORD *)(v7 - 32) = *((_QWORD *)&v189 + 1);
        *((_QWORD *)&v189 + 1) = v45;
        v46 = *(_QWORD *)(v7 - 40);
        *(_QWORD *)(v7 - 40) = 0;
        *(_QWORD *)(v7 - 40) = v189;
        *(_QWORD *)&v189 = v46;
        v47 = *(_QWORD *)(v7 - 24);
        *(_QWORD *)(v7 - 24) = v190;
        v190 = v47;
        v48 = v191;
        *(_DWORD *)(v7 - 8) = v192;
        *(_QWORD *)(v7 - 16) = v48;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v189);
        if (v31 < (unint64_t)v33)
        {
LABEL_33:
          std::__introsort<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *,false>(a1, v7 - 56, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v49 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(a1, v7 - 56);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::$_1 &,re::ecs2::VideoComponentSystem::update(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::VideoAssetInfo *>(v7, (uint64_t)a2))
        {
          if ((v49 & 1) != 0)
            continue;
          goto LABEL_33;
        }
        a2 = (__int128 *)(v7 - 56);
        if ((v49 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = (__int128 *)((char *)a2 - 24);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 24), v11))
        {
          v30 = *((_QWORD *)v11 + 2);
          v28 = *v11;
          v26 = *v10;
          *((_QWORD *)v11 + 2) = *((_QWORD *)a2 - 1);
          *v11 = v26;
          *v10 = v28;
          *((_QWORD *)a2 - 1) = v30;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(v11, (__int128 *)((char *)v11 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)a2 - 24, a3);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((__n128 *)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)v11 + 72, (uint64_t)a2 - 24, a3);
        return;
      default:
        if (v14 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 24 * (v15 >> 1));
          if ((unint64_t)v14 < 0xC01)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((__int128 *)((char *)v11 + 24 * v16), v11, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(v11, (__int128 *)((char *)v11 + 24 * v16), (__int128 *)((char *)a2 - 24), a3);
            v18 = 3 * v16;
            v19 = (__int128 *)((char *)v11 + 24 * v16 - 24);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((__int128 *)((char *)v11 + 24), v19, a2 - 3, a3);
            v20 = v11 + 3;
            v21 = (__int128 *)((char *)v11 + 8 * v18 + 24);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(v20, v21, (__int128 *)((char *)a2 - 72), a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(v19, v17, v21, a3);
            v29 = *(_QWORD *)(a1 + 16);
            v27 = *(_OWORD *)a1;
            v22 = *v17;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)a1 = v22;
            *((_QWORD *)v17 + 2) = v29;
            *v17 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::Matrix<double,3,1> *,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::Matrix<double,3,1> *,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&)>((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(a1, v23, a3);
          v11 = (__int128 *)(v23 + 24);
          if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(v23 + 24, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*,false>(a1, v23, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v23 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*,geo::math::Matrix<double,3,1>*>((__n128 *)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v53 = *(a2 - 4);
        v52 = a2 - 4;
        v54 = v53 < *v8;
        if (v53 == *v8)
          v54 = v52[2] < v8[2];
        if (v54)
        {
          v143 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v52;
          *(_OWORD *)v52 = v143;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(v8, v8 + 4, a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(v8, v8 + 4, v8 + 8, a2 - 4);
        return;
      case 5uLL:
        v55 = (__int128 *)(v8 + 4);
        v56 = (__int128 *)(v8 + 8);
        v57 = (__int128 *)(v8 + 12);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(v8, v8 + 4, v8 + 8, v8 + 12);
        v59 = *(a2 - 4);
        v58 = a2 - 4;
        v60 = v8[12];
        v61 = v59 < v60;
        if (v59 == v60)
          v61 = v58[2] < v8[14];
        if (v61)
        {
          v62 = *v57;
          *v57 = *(_OWORD *)v58;
          *(_OWORD *)v58 = v62;
          v63 = v8[12];
          v64 = v8[8];
          v74 = v63 == v64;
          v65 = v63 < v64;
          if (v74)
            v65 = v8[14] < v8[10];
          if (v65)
          {
            v66 = *v56;
            *v56 = *v57;
            *v57 = v66;
            v67 = v8[8];
            v68 = v8[4];
            v74 = v67 == v68;
            v69 = v67 < v68;
            if (v74)
              v69 = v8[10] < v8[6];
            if (v69)
            {
              v70 = *v55;
              *v55 = *v56;
              *v56 = v70;
              v71 = v8[4];
              v74 = v71 == *v8;
              v72 = v71 < *v8;
              if (v74)
                v72 = v8[6] < v8[2];
              if (v72)
              {
                v144 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v55;
                *v55 = v144;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v73 = v8 + 4;
          v74 = v8 == a2 || v73 == a2;
          v75 = v74;
          if ((a4 & 1) != 0)
          {
            if ((v75 & 1) == 0)
            {
              v76 = 0;
              v77 = v8;
              do
              {
                v78 = v73;
                v79 = v77[4];
                v80 = v77[6];
                v81 = v79 < *v77;
                if (v79 == *v77)
                  v81 = v80 < v77[2];
                if (v81)
                {
                  v82 = v77[5];
                  v83 = v77[7];
                  v84 = v76;
                  while (1)
                  {
                    v85 = (char *)v8 + v84;
                    *(_OWORD *)((char *)v8 + v84 + 16) = *(_OWORD *)((char *)v8 + v84);
                    if (!v84)
                      break;
                    v86 = *((_DWORD *)v85 - 4);
                    v87 = v80 < *((_DWORD *)v85 - 2);
                    v74 = v79 == v86;
                    v88 = v79 < v86;
                    if (!v74)
                      v87 = v88;
                    v84 -= 16;
                    if (!v87)
                    {
                      v89 = (unsigned int *)((char *)v8 + v84 + 16);
                      goto LABEL_115;
                    }
                  }
                  v89 = v8;
LABEL_115:
                  *v89 = v79;
                  v89[1] = v82;
                  v89[2] = v80;
                  v89[3] = v83;
                }
                v73 = v78 + 4;
                v76 += 16;
                v77 = v78;
              }
              while (v78 + 4 != a2);
            }
          }
          else if ((v75 & 1) == 0)
          {
            do
            {
              v129 = v73;
              v130 = a1[4];
              v131 = a1[6];
              v132 = v130 < *a1;
              if (v130 == *a1)
                v132 = v131 < a1[2];
              if (v132)
              {
                v133 = a1[5];
                v134 = a1[7];
                v135 = v129;
                do
                {
                  *(_OWORD *)v135 = *((_OWORD *)v135 - 1);
                  v136 = *(v135 - 8);
                  v137 = *(v135 - 6);
                  v135 -= 4;
                  v138 = v131 < v137;
                  v74 = v130 == v136;
                  v139 = v130 < v136;
                  if (v74)
                    v139 = v138;
                }
                while (v139);
                *v135 = v130;
                v135[1] = v133;
                v135[2] = v131;
                v135[3] = v134;
              }
              v73 = v129 + 4;
              a1 = v129;
            }
            while (v129 + 4 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v90 = (v10 - 2) >> 1;
            v91 = v90;
            do
            {
              v92 = v91;
              if (v90 >= v91)
              {
                v93 = (2 * v91) | 1;
                v94 = &v8[4 * v93];
                if (2 * v92 + 2 >= (uint64_t)v10)
                {
                  v96 = *v94;
                }
                else
                {
                  v95 = v94[4];
                  v96 = *v94;
                  v97 = v94[2] < v94[6];
                  if (*v94 != v95)
                    v97 = *v94 < v95;
                  if (v97)
                  {
                    v96 = v94[4];
                    v94 += 4;
                    v93 = 2 * v92 + 2;
                  }
                }
                v98 = &v8[4 * v92];
                v99 = *v98;
                v100 = v98[2];
                v74 = v96 == *v98;
                v101 = v96 < *v98;
                if (v74)
                  v101 = v94[2] < v100;
                if (!v101)
                {
                  v102 = v98[1];
                  v103 = v98[3];
                  do
                  {
                    v104 = v98;
                    v98 = v94;
                    *(_OWORD *)v104 = *(_OWORD *)v94;
                    if (v90 < v93)
                      break;
                    v105 = (2 * v93) | 1;
                    v94 = &v8[4 * v105];
                    v93 = 2 * v93 + 2;
                    if (v93 >= (uint64_t)v10)
                    {
                      v106 = *v94;
                      v93 = v105;
                    }
                    else
                    {
                      v106 = v94[4];
                      v107 = v94[2] < v94[6];
                      if (*v94 != v106)
                        v107 = *v94 < v106;
                      if (v107)
                      {
                        v94 += 4;
                      }
                      else
                      {
                        v106 = *v94;
                        v93 = v105;
                      }
                    }
                    v108 = v94[2] < v100;
                    v74 = v106 == v99;
                    v109 = v106 < v99;
                    if (!v74)
                      v108 = v109;
                  }
                  while (!v108);
                  *v98 = v99;
                  v98[1] = v102;
                  v98[2] = v100;
                  v98[3] = v103;
                }
              }
              v91 = v92 - 1;
            }
            while (v92);
            v110 = (unint64_t)v9 >> 4;
            do
            {
              v111 = 0;
              v145 = *(_OWORD *)v8;
              v112 = v8;
              do
              {
                v113 = &v112[4 * v111 + 4];
                v114 = (2 * v111) | 1;
                v115 = 2 * v111 + 2;
                if (v115 < v110)
                {
                  v116 = v113[4];
                  v117 = *v113 < v116;
                  if (*v113 == v116)
                    v117 = v113[2] < v113[6];
                  if (v117)
                  {
                    v113 += 4;
                    v114 = v115;
                  }
                }
                *(_OWORD *)v112 = *(_OWORD *)v113;
                v112 = v113;
                v111 = v114;
              }
              while (v114 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              a2 -= 4;
              if (v113 == a2)
              {
                *(_OWORD *)v113 = v145;
              }
              else
              {
                *(_OWORD *)v113 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v145;
                v118 = (char *)v113 - (char *)v8 + 16;
                if (v118 >= 17)
                {
                  v119 = (((unint64_t)v118 >> 4) - 2) >> 1;
                  v120 = &v8[4 * v119];
                  v121 = *v113;
                  v122 = v113[2];
                  v123 = *v120 < *v113;
                  if (*v120 == *v113)
                    v123 = v120[2] < v122;
                  if (v123)
                  {
                    v124 = v113[1];
                    v125 = v113[3];
                    do
                    {
                      v126 = v113;
                      v113 = v120;
                      *(_OWORD *)v126 = *(_OWORD *)v120;
                      if (!v119)
                        break;
                      v119 = (v119 - 1) >> 1;
                      v120 = &v8[4 * v119];
                      v127 = *v120 < v121;
                      if (*v120 == v121)
                        v127 = v120[2] < v122;
                    }
                    while (v127);
                    *v113 = v121;
                    v113[1] = v124;
                    v113[2] = v122;
                    v113[3] = v125;
                  }
                }
              }
            }
            while (v110-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[4 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(&a1[4 * (v10 >> 1)], a1, a2 - 4);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, &a1[4 * (v10 >> 1)], a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1 + 4, v12 - 4, a2 - 8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1 + 8, &a1[4 * v11 + 4], a2 - 12);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(v12 - 4, v12, &a1[4 * v11 + 4]);
          v140 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v140;
        }
        --a3;
        v13 = *a1;
        if ((a4 & 1) == 0)
        {
          v15 = *(a1 - 4);
          v14 = a1[2];
          v74 = v15 == v13;
          v16 = v15 < v13;
          if (v74)
            v16 = *(a1 - 2) < v14;
          if (v16)
            goto LABEL_13;
          v35 = *(a2 - 4);
          v74 = v13 == v35;
          v36 = v13 < v35;
          if (v74)
            v36 = v14 < *(a2 - 2);
          if (v36)
          {
            v8 = a1;
            do
            {
              v37 = v8[4];
              v8 += 4;
              v38 = v13 < v37;
              if (v13 == v37)
                v38 = v14 < v8[2];
            }
            while (!v38);
          }
          else
          {
            v39 = a1 + 4;
            do
            {
              v8 = v39;
              if (v39 >= a2)
                break;
              v40 = *v39;
              v41 = v14 < v8[2];
              v74 = v13 == v40;
              v42 = v13 < v40;
              if (!v74)
                v41 = v42;
              v39 = v8 + 4;
            }
            while (!v41);
          }
          v43 = a2;
          if (v8 < a2)
          {
            v43 = a2;
            do
            {
              v44 = *(v43 - 4);
              v43 -= 4;
              v45 = v13 < v44;
              if (v13 == v44)
                v45 = v14 < v43[2];
            }
            while (v45);
          }
          v46 = a1[1];
          v47 = a1[3];
          while (v8 < v43)
          {
            v142 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v43;
            *(_OWORD *)v43 = v142;
            do
            {
              v48 = v8[4];
              v8 += 4;
              v49 = v13 < v48;
              if (v13 == v48)
                v49 = v14 < v8[2];
            }
            while (!v49);
            do
            {
              v50 = *(v43 - 4);
              v43 -= 4;
              v51 = v13 < v50;
              if (v13 == v50)
                v51 = v14 < v43[2];
            }
            while (v51);
          }
          if (v8 - 4 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 4) = v13;
          *(v8 - 3) = v46;
          *(v8 - 2) = v14;
          *(v8 - 1) = v47;
          continue;
        }
        v14 = a1[2];
LABEL_13:
        v17 = 0;
        v18 = a1[1];
        v19 = a1[3];
        do
        {
          v20 = a1[v17 + 4];
          v21 = a1[v17 + 6] < v14;
          v74 = v20 == v13;
          v22 = v20 < v13;
          if (!v74)
            v21 = v22;
          v17 += 4;
        }
        while (v21);
        v23 = &a1[v17];
        v24 = a2;
        if (v17 == 4)
        {
          v24 = a2;
          do
          {
            if (v23 >= v24)
              break;
            v27 = *(v24 - 4);
            v24 -= 4;
            v28 = v27 < v13;
            if (v27 == v13)
              v28 = v24[2] < v14;
          }
          while (!v28);
        }
        else
        {
          do
          {
            v25 = *(v24 - 4);
            v24 -= 4;
            v26 = v25 < v13;
            if (v25 == v13)
              v26 = v24[2] < v14;
          }
          while (!v26);
        }
        v8 = v23;
        if (v23 < v24)
        {
          v29 = (unint64_t)v24;
          do
          {
            v141 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v141;
            do
            {
              v30 = v8[4];
              v8 += 4;
              v31 = v30 < v13;
              if (v30 == v13)
                v31 = v8[2] < v14;
            }
            while (v31);
            do
            {
              v32 = *(_DWORD *)(v29 - 16);
              v29 -= 16;
              v33 = v32 < v13;
              if (v32 == v13)
                v33 = *(_DWORD *)(v29 + 8) < v14;
            }
            while (!v33);
          }
          while ((unint64_t)v8 < v29);
        }
        if (v8 - 4 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 4) = v13;
        *(v8 - 3) = v18;
        *(v8 - 2) = v14;
        *(v8 - 1) = v19;
        if (v23 < v24)
        {
LABEL_42:
          std::__introsort<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *,false>(a1, v8 - 4, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(a1, v8 - 4);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::MaterialTechniqueVariant::resolveConstantArgument(re::TypedArgument const&,re::ConstantTableCollection const&,re::Slice<re::ConstantLayer> const&,re::Slice<re::ConstantLayer> const&,re::ConstantResolution &,BOOL,unsigned long long)::$_1 &,re::FillCommand *>(v8, a2))
        {
          if (v34)
            continue;
          goto LABEL_42;
        }
        a2 = v8 - 4;
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v31 = *(a2 - 4);
        v30 = a2 - 4;
        if (v31 > *(float *)v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v30;
          *(_OWORD *)v30 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)v8, (float *)(v8 + 16), a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)v8, (float *)(v8 + 16), (float *)(v8 + 32), (unsigned __int32 *)a2 - 4);
        return;
      case 5uLL:
        v32 = (__int128 *)(v8 + 16);
        v33 = (__int128 *)(v8 + 32);
        v34 = (__int128 *)(v8 + 48);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)v8, (float *)(v8 + 16), (float *)(v8 + 32), (unsigned __int32 *)(v8 + 48));
        v36 = *(a2 - 4);
        v35 = a2 - 4;
        if (v36 > *(float *)(v8 + 48))
        {
          v37 = *v34;
          *v34 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v37;
          if (*(float *)v34 > *(float *)v33)
          {
            v38 = *v33;
            *v33 = *v34;
            *v34 = v38;
            if (*(float *)v33 > *(float *)v32)
            {
              v39 = *v32;
              *v32 = *v33;
              *v33 = v39;
              if (*(float *)(v8 + 16) > *(float *)v8)
              {
                v86 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v32;
                *v32 = v86;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v40 = (float *)(v8 + 16);
          v42 = (float *)v8 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v42)
            {
              v43 = 0;
              v44 = v8;
              do
              {
                v45 = v40;
                v46 = *(float *)(v44 + 16);
                if (v46 > *(float *)v44)
                {
                  v87 = *(_QWORD *)(v44 + 20);
                  v91 = *(_DWORD *)(v44 + 28);
                  v47 = v43;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v47 + 16) = *(_OWORD *)(v8 + v47);
                    if (!v47)
                      break;
                    v48 = *(float *)(v8 + v47 - 16);
                    v47 -= 16;
                    if (v46 <= v48)
                    {
                      v49 = v8 + v47 + 16;
                      goto LABEL_75;
                    }
                  }
                  v49 = v8;
LABEL_75:
                  *(float *)v49 = v46;
                  *(_DWORD *)(v49 + 12) = v91;
                  *(_QWORD *)(v49 + 4) = v87;
                }
                v40 = v45 + 4;
                v43 += 16;
                v44 = (unint64_t)v45;
              }
              while (v45 + 4 != a2);
            }
          }
          else if (!v42)
          {
            do
            {
              v72 = (uint64_t)v40;
              v73 = *(float *)(a1 + 16);
              if (v73 > *(float *)a1)
              {
                v90 = *(_QWORD *)(a1 + 20);
                v93 = *(_DWORD *)(a1 + 28);
                v74 = v40;
                do
                {
                  *(_OWORD *)v74 = *((_OWORD *)v74 - 1);
                  v75 = *(v74 - 8);
                  v74 -= 4;
                }
                while (v73 > v75);
                *v74 = v73;
                *((_DWORD *)v74 + 3) = v93;
                *(_QWORD *)(v74 + 1) = v90;
              }
              v40 += 4;
              a1 = v72;
            }
            while ((float *)(v72 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v50 = (v10 - 2) >> 1;
            v51 = v50;
            do
            {
              v52 = v51;
              if (v50 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = (float *)(v8 + 16 * v53);
                if (2 * v52 + 2 < (uint64_t)v10 && *v54 > v54[4])
                {
                  v54 += 4;
                  v53 = 2 * v52 + 2;
                }
                v55 = (float *)(v8 + 16 * v52);
                v56 = *v55;
                if (*v54 <= *v55)
                {
                  v92 = *((_DWORD *)v55 + 3);
                  v88 = *(_QWORD *)(v55 + 1);
                  do
                  {
                    v57 = v55;
                    v55 = v54;
                    *(_OWORD *)v57 = *(_OWORD *)v54;
                    if (v50 < v53)
                      break;
                    v58 = 2 * v53;
                    v53 = (2 * v53) | 1;
                    v54 = (float *)(v8 + 16 * v53);
                    v59 = v58 + 2;
                    if (v59 < (uint64_t)v10 && *v54 > v54[4])
                    {
                      v54 += 4;
                      v53 = v59;
                    }
                  }
                  while (*v54 <= v56);
                  *v55 = v56;
                  *((_DWORD *)v55 + 3) = v92;
                  *(_QWORD *)(v55 + 1) = v88;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v60 = (unint64_t)v9 >> 4;
            do
            {
              v61 = 0;
              v89 = *(_OWORD *)v8;
              v62 = (float *)v8;
              do
              {
                v63 = v62;
                v62 += 4 * v61 + 4;
                v64 = 2 * v61;
                v61 = (2 * v61) | 1;
                v65 = v64 + 2;
                if (v65 < v60 && *v62 > v62[4])
                {
                  v62 += 4;
                  v61 = v65;
                }
                *(_OWORD *)v63 = *(_OWORD *)v62;
              }
              while (v61 <= (uint64_t)((unint64_t)(v60 - 2) >> 1));
              a2 -= 4;
              if (v62 == a2)
              {
                *(_OWORD *)v62 = v89;
              }
              else
              {
                *(_OWORD *)v62 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v89;
                v66 = (uint64_t)v62 - v8 + 16;
                if (v66 >= 17)
                {
                  v67 = (((unint64_t)v66 >> 4) - 2) >> 1;
                  v68 = (float *)(v8 + 16 * v67);
                  v69 = *v62;
                  if (*v68 > *v62)
                  {
                    v81 = *((_DWORD *)v62 + 3);
                    v78 = *(_QWORD *)(v62 + 1);
                    do
                    {
                      v70 = v62;
                      v62 = v68;
                      *(_OWORD *)v70 = *(_OWORD *)v68;
                      if (!v67)
                        break;
                      v67 = (v67 - 1) >> 1;
                      v68 = (float *)(v8 + 16 * v67);
                    }
                    while (*v68 > v69);
                    *v62 = v69;
                    *((_DWORD *)v62 + 3) = v81;
                    *(_QWORD *)(v62 + 1) = v78;
                  }
                }
              }
            }
            while (v60-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (float *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)(a1 + 16 * (v10 >> 1)), (float *)a1, a2 - 4);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)a1, (float *)(a1 + 16 * (v10 >> 1)), a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)(a1 + 16), v12 - 4, a2 - 8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>((float *)(a1 + 32), (float *)(a1 + 16 + 16 * v11), a2 - 12);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>(v12 - 4, v12, (float *)(a1 + 16 + 16 * v11));
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *(float *)a1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 16) <= v13)
        {
          v80 = *(_DWORD *)(a1 + 12);
          v77 = *(_QWORD *)(a1 + 4);
          if (v13 <= *(a2 - 4))
          {
            v25 = a1 + 16;
            do
            {
              v8 = v25;
              if (v25 >= (unint64_t)a2)
                break;
              v25 += 16;
            }
            while (v13 <= *(float *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v24 = *(float *)(v8 + 16);
              v8 += 16;
            }
            while (v13 <= v24);
          }
          v26 = a2;
          if (v8 < (unint64_t)a2)
          {
            v26 = a2;
            do
            {
              v27 = *(v26 - 4);
              v26 -= 4;
            }
            while (v13 > v27);
          }
          while (v8 < (unint64_t)v26)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v26;
            *(_OWORD *)v26 = v84;
            do
            {
              v28 = *(float *)(v8 + 16);
              v8 += 16;
            }
            while (v13 <= v28);
            do
            {
              v29 = *(v26 - 4);
              v26 -= 4;
            }
            while (v13 > v29);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(float *)(v8 - 16) = v13;
          *(_DWORD *)(v8 - 4) = v80;
          *(_QWORD *)(v8 - 12) = v77;
          continue;
        }
        v14 = 0;
        v79 = *(_DWORD *)(a1 + 12);
        v76 = *(_QWORD *)(a1 + 4);
        do
        {
          v15 = *(float *)(a1 + v14 + 16);
          v14 += 16;
        }
        while (v15 > v13);
        v16 = a1 + v14;
        v17 = a2;
        if (v14 == 16)
        {
          v17 = a2;
          do
          {
            if (v16 >= (unint64_t)v17)
              break;
            v19 = *(v17 - 4);
            v17 -= 4;
          }
          while (v19 <= v13);
        }
        else
        {
          do
          {
            v18 = *(v17 - 4);
            v17 -= 4;
          }
          while (v18 <= v13);
        }
        v8 = a1 + v14;
        if (v16 < (unint64_t)v17)
        {
          v20 = v17;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v20;
            *(_OWORD *)v20 = v83;
            do
            {
              v21 = *(float *)(v8 + 16);
              v8 += 16;
            }
            while (v21 > v13);
            do
            {
              v22 = *(v20 - 4);
              v20 -= 4;
            }
            while (v22 <= v13);
          }
          while (v8 < (unint64_t)v20);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(float *)(v8 - 16) = v13;
        *(_DWORD *)(v8 - 4) = v79;
        *(_QWORD *)(v8 - 12) = v76;
        if (v16 < (unint64_t)v17)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v23 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>(a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::$_7 &,re::SFBSystemShellStencilBlurMeshNode::executeWithRenderForBlurBitSet(re::RenderGraphContext &)::StencilPortalSortInfo *>(v8, (uint64_t)a2))
        {
          if (v23)
            continue;
          goto LABEL_29;
        }
        a2 = (float *)(v8 - 16);
        if (!v23)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unint64_t **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (*v36 < **(_QWORD **)v8)
        {
          v93 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v93;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), (unint64_t **)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        v37 = (__int128 *)(v8 + 16);
        v38 = (__int128 *)(v8 + 32);
        v39 = (__int128 *)(v8 + 48);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), (unint64_t **)(v8 + 32), (_OWORD *)(v8 + 48));
        v41 = *(a2 - 2);
        v40 = a2 - 2;
        if (*v41 < **(_QWORD **)(v8 + 48))
        {
          v42 = *v39;
          *v39 = *(_OWORD *)v40;
          *(_OWORD *)v40 = v42;
          if (**(_QWORD **)v39 < **(_QWORD **)v38)
          {
            v43 = *v38;
            *v38 = *v39;
            *v39 = v43;
            if (**(_QWORD **)v38 < **(_QWORD **)v37)
            {
              v44 = *v37;
              *v37 = *v38;
              *v38 = v44;
              if (**(_QWORD **)(v8 + 16) < **(_QWORD **)v8)
              {
                v94 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v37;
                *v37 = v94;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v45 = (unint64_t **)(v8 + 16);
          v47 = (unint64_t **)v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = v8;
              do
              {
                v50 = v45;
                v51 = *(unint64_t **)(v49 + 16);
                if (*v51 < **(_QWORD **)v49)
                {
                  v52 = *(_QWORD *)(v49 + 24);
                  v53 = v48;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v53 + 16) = *(_OWORD *)(v8 + v53);
                    if (!v53)
                      break;
                    v54 = **(_QWORD **)(v8 + v53 - 16);
                    v53 -= 16;
                    if (*v51 >= v54)
                    {
                      v55 = (_QWORD *)(v8 + v53 + 16);
                      goto LABEL_76;
                    }
                  }
                  v55 = (_QWORD *)v8;
LABEL_76:
                  *v55 = v51;
                  v55[1] = v52;
                }
                v45 = v50 + 2;
                v48 += 16;
                v49 = (unint64_t)v50;
              }
              while (v50 + 2 != a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v85 = v45;
              v86 = a1[2];
              if (*v86 < **a1)
              {
                v87 = a1[3];
                v88 = v85;
                do
                {
                  *(_OWORD *)v88 = *((_OWORD *)v88 - 1);
                  v89 = *(v88 - 4);
                  v88 -= 2;
                }
                while (*v86 < *v89);
                *v88 = v86;
                v88[1] = v87;
              }
              v45 = v85 + 2;
              a1 = v85;
            }
            while (v85 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unint64_t **)v8 != a2)
          {
            v56 = (v10 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = (unint64_t **)(v8 + 16 * v59);
                if (2 * v58 + 2 >= (uint64_t)v10)
                {
                  v62 = **v60;
                }
                else
                {
                  v61 = **v60;
                  v62 = *v60[2];
                  v63 = v61 >= v62;
                  if (v61 > v62)
                    v62 = **v60;
                  if (!v63)
                  {
                    v60 += 2;
                    v59 = 2 * v58 + 2;
                  }
                }
                v64 = (unint64_t **)(v8 + 16 * v58);
                v65 = *v64;
                if (v62 >= **v64)
                {
                  v66 = v64[1];
                  do
                  {
                    v67 = v64;
                    v64 = v60;
                    *(_OWORD *)v67 = *(_OWORD *)v60;
                    if (v56 < v59)
                      break;
                    v68 = (2 * v59) | 1;
                    v60 = (unint64_t **)(v8 + 16 * v68);
                    v59 = 2 * v59 + 2;
                    if (v59 >= (uint64_t)v10)
                    {
                      v69 = **v60;
                      v59 = v68;
                    }
                    else
                    {
                      v69 = **v60;
                      v70 = *v60[2];
                      v71 = v69 >= v70;
                      if (v69 <= v70)
                        v69 = *v60[2];
                      if (v71)
                        v59 = v68;
                      else
                        v60 += 2;
                    }
                  }
                  while (v69 >= *v65);
                  *v64 = v65;
                  v64[1] = v66;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v72 = (unint64_t)v9 >> 4;
            do
            {
              v73 = 0;
              v95 = *(_OWORD *)v8;
              v74 = (_OWORD *)v8;
              do
              {
                v75 = (uint64_t)&v74[v73 + 1];
                v76 = (2 * v73) | 1;
                v77 = 2 * v73 + 2;
                if (v77 < v72 && **(_QWORD **)v75 < **(_QWORD **)(v75 + 16))
                {
                  v75 += 16;
                  v76 = v77;
                }
                *v74 = *(_OWORD *)v75;
                v74 = (_OWORD *)v75;
                v73 = v76;
              }
              while (v76 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              a2 -= 2;
              if ((unint64_t **)v75 == a2)
              {
                *(_OWORD *)v75 = v95;
              }
              else
              {
                *(_OWORD *)v75 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v95;
                v78 = v75 - v8 + 16;
                if (v78 >= 17)
                {
                  v79 = (((unint64_t)v78 >> 4) - 2) >> 1;
                  v80 = (_OWORD *)(v8 + 16 * v79);
                  v81 = *(_QWORD **)v75;
                  if (**(_QWORD **)v80 < **(_QWORD **)v75)
                  {
                    v82 = *(_QWORD *)(v75 + 8);
                    do
                    {
                      v83 = (_OWORD *)v75;
                      v75 = (uint64_t)v80;
                      *v83 = *v80;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = (_OWORD *)(v8 + 16 * v79);
                    }
                    while (**(_QWORD **)v80 < *v81);
                    *(_QWORD *)v75 = v81;
                    *(_QWORD *)(v75 + 8) = v82;
                  }
                }
              }
            }
            while (v72-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v90 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v90;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_QWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (unint64_t *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v92 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v92;
            v32 = *v13;
            do
            {
              v33 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (unint64_t *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((unint64_t **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v91 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v91;
            v23 = *v13;
            do
            {
              v24 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (unint64_t *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((unint64_t **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < v19)
        {
LABEL_29:
          a4 = 0;
          continue;
        }
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (unint64_t **)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unsigned int **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (*v36 < **(_DWORD **)v8)
        {
          v93 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v93;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), (unsigned int **)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        v37 = (__int128 *)(v8 + 16);
        v38 = (__int128 *)(v8 + 32);
        v39 = (__int128 *)(v8 + 48);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), (unsigned int **)(v8 + 32), (_OWORD *)(v8 + 48));
        v41 = *(a2 - 2);
        v40 = a2 - 2;
        if (*v41 < **(_DWORD **)(v8 + 48))
        {
          v42 = *v39;
          *v39 = *(_OWORD *)v40;
          *(_OWORD *)v40 = v42;
          if (**(_DWORD **)v39 < **(_DWORD **)v38)
          {
            v43 = *v38;
            *v38 = *v39;
            *v39 = v43;
            if (**(_DWORD **)v38 < **(_DWORD **)v37)
            {
              v44 = *v37;
              *v37 = *v38;
              *v38 = v44;
              if (**(_DWORD **)(v8 + 16) < **(_DWORD **)v8)
              {
                v94 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v37;
                *v37 = v94;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v45 = (unsigned int **)(v8 + 16);
          v47 = (unsigned int **)v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = v8;
              do
              {
                v50 = v45;
                v51 = *(unsigned int **)(v49 + 16);
                if (*v51 < **(_DWORD **)v49)
                {
                  v52 = *(_QWORD *)(v49 + 24);
                  v53 = v48;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v53 + 16) = *(_OWORD *)(v8 + v53);
                    if (!v53)
                      break;
                    v54 = **(_DWORD **)(v8 + v53 - 16);
                    v53 -= 16;
                    if (*v51 >= v54)
                    {
                      v55 = (_QWORD *)(v8 + v53 + 16);
                      goto LABEL_76;
                    }
                  }
                  v55 = (_QWORD *)v8;
LABEL_76:
                  *v55 = v51;
                  v55[1] = v52;
                }
                v45 = v50 + 2;
                v48 += 16;
                v49 = (unint64_t)v50;
              }
              while (v50 + 2 != a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v85 = v45;
              v86 = a1[2];
              if (*v86 < **a1)
              {
                v87 = a1[3];
                v88 = v85;
                do
                {
                  *(_OWORD *)v88 = *((_OWORD *)v88 - 1);
                  v89 = *(v88 - 4);
                  v88 -= 2;
                }
                while (*v86 < *v89);
                *v88 = v86;
                v88[1] = v87;
              }
              v45 = v85 + 2;
              a1 = v85;
            }
            while (v85 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unsigned int **)v8 != a2)
          {
            v56 = (v10 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = (unsigned int **)(v8 + 16 * v59);
                if (2 * v58 + 2 >= (uint64_t)v10)
                {
                  v62 = **v60;
                }
                else
                {
                  v61 = **v60;
                  v62 = *v60[2];
                  v63 = v61 >= v62;
                  if (v61 > v62)
                    v62 = **v60;
                  if (!v63)
                  {
                    v60 += 2;
                    v59 = 2 * v58 + 2;
                  }
                }
                v64 = (unsigned int **)(v8 + 16 * v58);
                v65 = *v64;
                if (v62 >= **v64)
                {
                  v66 = v64[1];
                  do
                  {
                    v67 = v64;
                    v64 = v60;
                    *(_OWORD *)v67 = *(_OWORD *)v60;
                    if (v56 < v59)
                      break;
                    v68 = (2 * v59) | 1;
                    v60 = (unsigned int **)(v8 + 16 * v68);
                    v59 = 2 * v59 + 2;
                    if (v59 >= (uint64_t)v10)
                    {
                      v69 = **v60;
                      v59 = v68;
                    }
                    else
                    {
                      v69 = **v60;
                      v70 = *v60[2];
                      v71 = v69 >= v70;
                      if (v69 <= v70)
                        v69 = *v60[2];
                      if (v71)
                        v59 = v68;
                      else
                        v60 += 2;
                    }
                  }
                  while (v69 >= *v65);
                  *v64 = v65;
                  v64[1] = v66;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v72 = (unint64_t)v9 >> 4;
            do
            {
              v73 = 0;
              v95 = *(_OWORD *)v8;
              v74 = (_OWORD *)v8;
              do
              {
                v75 = (uint64_t)&v74[v73 + 1];
                v76 = (2 * v73) | 1;
                v77 = 2 * v73 + 2;
                if (v77 < v72 && **(_DWORD **)v75 < **(_DWORD **)(v75 + 16))
                {
                  v75 += 16;
                  v76 = v77;
                }
                *v74 = *(_OWORD *)v75;
                v74 = (_OWORD *)v75;
                v73 = v76;
              }
              while (v76 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              a2 -= 2;
              if ((unsigned int **)v75 == a2)
              {
                *(_OWORD *)v75 = v95;
              }
              else
              {
                *(_OWORD *)v75 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v95;
                v78 = v75 - v8 + 16;
                if (v78 >= 17)
                {
                  v79 = (((unint64_t)v78 >> 4) - 2) >> 1;
                  v80 = (_OWORD *)(v8 + 16 * v79);
                  v81 = *(_DWORD **)v75;
                  if (**(_DWORD **)v80 < **(_DWORD **)v75)
                  {
                    v82 = *(_QWORD *)(v75 + 8);
                    do
                    {
                      v83 = (_OWORD *)v75;
                      v75 = (uint64_t)v80;
                      *v83 = *v80;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = (_OWORD *)(v8 + 16 * v79);
                    }
                    while (**(_DWORD **)v80 < *v81);
                    *(_QWORD *)v75 = v81;
                    *(_QWORD *)(v75 + 8) = v82;
                  }
                }
              }
            }
            while (v72-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unsigned int **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v90 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v90;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_DWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (unsigned int *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v92 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v92;
            v32 = *v13;
            do
            {
              v33 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (unsigned int *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((unsigned int **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v91 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v91;
            v23 = *v13;
            do
            {
              v24 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (unsigned int *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((unsigned int **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < v19)
        {
LABEL_29:
          a4 = 0;
          continue;
        }
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (unsigned int **)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v94 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v94;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        v37 = v8 + 2;
        v38 = v8 + 4;
        v39 = v8 + 6;
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3);
        v41 = *(a2 - 2);
        v40 = a2 - 2;
        if (*v41 < *v8[6])
        {
          v42 = *(_OWORD *)v39;
          *(_OWORD *)v39 = *(_OWORD *)v40;
          *(_OWORD *)v40 = v42;
          if (**v39 < **v38)
          {
            v43 = *(_OWORD *)v38;
            *(_OWORD *)v38 = *(_OWORD *)v39;
            *(_OWORD *)v39 = v43;
            if (**v38 < **v37)
            {
              v44 = *(_OWORD *)v37;
              *(_OWORD *)v37 = *(_OWORD *)v38;
              *(_OWORD *)v38 = v44;
              if (*v8[2] < **v8)
              {
                v95 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v95;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v45 = v8 + 2;
          v47 = v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = v8;
              do
              {
                v50 = v45;
                v51 = v49[2];
                if (*v51 < **v49)
                {
                  v52 = v49[3];
                  v53 = v48;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v53 + 16) = *(_OWORD *)((char *)v8 + v53);
                    if (!v53)
                      break;
                    v54 = **(unsigned __int16 **)((char *)v8 + v53 - 16);
                    v53 -= 16;
                    if (*v51 >= v54)
                    {
                      v55 = (unsigned __int16 **)((char *)v8 + v53 + 16);
                      goto LABEL_76;
                    }
                  }
                  v55 = v8;
LABEL_76:
                  *v55 = v51;
                  v55[1] = v52;
                }
                v45 = v50 + 2;
                v48 += 16;
                v49 = v50;
              }
              while (v50 + 2 != a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v86 = v45;
              v87 = a1[2];
              if (*v87 < **a1)
              {
                v88 = a1[3];
                v89 = v86;
                do
                {
                  *(_OWORD *)v89 = *((_OWORD *)v89 - 1);
                  v90 = *(v89 - 4);
                  v89 -= 2;
                }
                while (*v87 < *v90);
                *v89 = v87;
                v89[1] = v88;
              }
              v45 = v86 + 2;
              a1 = v86;
            }
            while (v86 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v56 = (v10 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = &v8[2 * v59];
                if (2 * v58 + 2 >= (uint64_t)v10)
                {
                  v62 = **v60;
                }
                else
                {
                  v61 = **v60;
                  v62 = *v60[2];
                  v63 = v61 >= v62;
                  if (v61 > v62)
                    v62 = **v60;
                  if (!v63)
                  {
                    v60 += 2;
                    v59 = 2 * v58 + 2;
                  }
                }
                v64 = &v8[2 * v58];
                v65 = *v64;
                if (v62 >= **v64)
                {
                  v66 = v64[1];
                  do
                  {
                    v67 = v64;
                    v64 = v60;
                    *(_OWORD *)v67 = *(_OWORD *)v60;
                    if (v56 < v59)
                      break;
                    v68 = (2 * v59) | 1;
                    v60 = &v8[2 * v68];
                    v59 = 2 * v59 + 2;
                    if (v59 >= (uint64_t)v10)
                    {
                      v72 = **v60;
                      v59 = v68;
                    }
                    else
                    {
                      v69 = **v60;
                      v70 = *v60[2];
                      v71 = v69 >= v70;
                      v72 = v69 <= v70 ? *v60[2] : **v60;
                      if (v71)
                        v59 = v68;
                      else
                        v60 += 2;
                    }
                  }
                  while (v72 >= *v65);
                  *v64 = v65;
                  v64[1] = v66;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v73 = (unint64_t)v9 >> 4;
            do
            {
              v74 = 0;
              v96 = *(_OWORD *)v8;
              v75 = v8;
              do
              {
                v76 = &v75[2 * v74 + 2];
                v77 = (2 * v74) | 1;
                v78 = 2 * v74 + 2;
                if (v78 < v73 && **v76 < *v76[2])
                {
                  v76 += 2;
                  v77 = v78;
                }
                *(_OWORD *)v75 = *(_OWORD *)v76;
                v75 = v76;
                v74 = v77;
              }
              while (v77 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
              a2 -= 2;
              if (v76 == a2)
              {
                *(_OWORD *)v76 = v96;
              }
              else
              {
                *(_OWORD *)v76 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v96;
                v79 = (char *)v76 - (char *)v8 + 16;
                if (v79 >= 17)
                {
                  v80 = (((unint64_t)v79 >> 4) - 2) >> 1;
                  v81 = &v8[2 * v80];
                  v82 = *v76;
                  if (**v81 < **v76)
                  {
                    v83 = v76[1];
                    do
                    {
                      v84 = v76;
                      v76 = v81;
                      *(_OWORD *)v84 = *(_OWORD *)v81;
                      if (!v80)
                        break;
                      v80 = (v80 - 1) >> 1;
                      v81 = &v8[2 * v80];
                    }
                    while (**v81 < *v82);
                    *v76 = v82;
                    v76[1] = v83;
                  }
                }
              }
            }
            while (v73-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v91 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v91;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v93 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v93;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v92 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v92;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          a4 = 0;
          continue;
        }
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v94 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v94;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        v37 = v8 + 2;
        v38 = v8 + 4;
        v39 = v8 + 6;
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3);
        v41 = *(a2 - 2);
        v40 = a2 - 2;
        if (*v41 < *v8[6])
        {
          v42 = *(_OWORD *)v39;
          *(_OWORD *)v39 = *(_OWORD *)v40;
          *(_OWORD *)v40 = v42;
          if (**v39 < **v38)
          {
            v43 = *(_OWORD *)v38;
            *(_OWORD *)v38 = *(_OWORD *)v39;
            *(_OWORD *)v39 = v43;
            if (**v38 < **v37)
            {
              v44 = *(_OWORD *)v37;
              *(_OWORD *)v37 = *(_OWORD *)v38;
              *(_OWORD *)v38 = v44;
              if (*v8[2] < **v8)
              {
                v95 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v95;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v45 = v8 + 2;
          v47 = v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = v8;
              do
              {
                v50 = v45;
                v51 = v49[2];
                if (*v51 < **v49)
                {
                  v52 = v49[3];
                  v53 = v48;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v53 + 16) = *(_OWORD *)((char *)v8 + v53);
                    if (!v53)
                      break;
                    v54 = **(unsigned __int8 **)((char *)v8 + v53 - 16);
                    v53 -= 16;
                    if (*v51 >= v54)
                    {
                      v55 = (unsigned __int8 **)((char *)v8 + v53 + 16);
                      goto LABEL_76;
                    }
                  }
                  v55 = v8;
LABEL_76:
                  *v55 = v51;
                  v55[1] = v52;
                }
                v45 = v50 + 2;
                v48 += 16;
                v49 = v50;
              }
              while (v50 + 2 != a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v86 = v45;
              v87 = a1[2];
              if (*v87 < **a1)
              {
                v88 = a1[3];
                v89 = v86;
                do
                {
                  *(_OWORD *)v89 = *((_OWORD *)v89 - 1);
                  v90 = *(v89 - 4);
                  v89 -= 2;
                }
                while (*v87 < *v90);
                *v89 = v87;
                v89[1] = v88;
              }
              v45 = v86 + 2;
              a1 = v86;
            }
            while (v86 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v56 = (v10 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = &v8[2 * v59];
                if (2 * v58 + 2 >= (uint64_t)v10)
                {
                  v62 = **v60;
                }
                else
                {
                  v61 = **v60;
                  v62 = *v60[2];
                  v63 = v61 >= v62;
                  if (v61 > v62)
                    v62 = **v60;
                  if (!v63)
                  {
                    v60 += 2;
                    v59 = 2 * v58 + 2;
                  }
                }
                v64 = &v8[2 * v58];
                v65 = *v64;
                if (v62 >= **v64)
                {
                  v66 = v64[1];
                  do
                  {
                    v67 = v64;
                    v64 = v60;
                    *(_OWORD *)v67 = *(_OWORD *)v60;
                    if (v56 < v59)
                      break;
                    v68 = (2 * v59) | 1;
                    v60 = &v8[2 * v68];
                    v59 = 2 * v59 + 2;
                    if (v59 >= (uint64_t)v10)
                    {
                      v72 = **v60;
                      v59 = v68;
                    }
                    else
                    {
                      v69 = **v60;
                      v70 = *v60[2];
                      v71 = v69 >= v70;
                      v72 = v69 <= v70 ? *v60[2] : **v60;
                      if (v71)
                        v59 = v68;
                      else
                        v60 += 2;
                    }
                  }
                  while (v72 >= *v65);
                  *v64 = v65;
                  v64[1] = v66;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v73 = (unint64_t)v9 >> 4;
            do
            {
              v74 = 0;
              v96 = *(_OWORD *)v8;
              v75 = v8;
              do
              {
                v76 = &v75[2 * v74 + 2];
                v77 = (2 * v74) | 1;
                v78 = 2 * v74 + 2;
                if (v78 < v73 && **v76 < *v76[2])
                {
                  v76 += 2;
                  v77 = v78;
                }
                *(_OWORD *)v75 = *(_OWORD *)v76;
                v75 = v76;
                v74 = v77;
              }
              while (v77 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
              a2 -= 2;
              if (v76 == a2)
              {
                *(_OWORD *)v76 = v96;
              }
              else
              {
                *(_OWORD *)v76 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v96;
                v79 = (char *)v76 - (char *)v8 + 16;
                if (v79 >= 17)
                {
                  v80 = (((unint64_t)v79 >> 4) - 2) >> 1;
                  v81 = &v8[2 * v80];
                  v82 = *v76;
                  if (**v81 < **v76)
                  {
                    v83 = v76[1];
                    do
                    {
                      v84 = v76;
                      v76 = v81;
                      *(_OWORD *)v84 = *(_OWORD *)v81;
                      if (!v80)
                        break;
                      v80 = (v80 - 1) >> 1;
                      v81 = &v8[2 * v80];
                    }
                    while (**v81 < *v82);
                    *v76 = v82;
                    v76[1] = v83;
                  }
                }
              }
            }
            while (v73-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v91 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v91;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v93 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v93;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v92 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v92;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          a4 = 0;
          continue;
        }
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (uint64_t **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_QWORD *)*((_QWORD *)a2 - 2);
        v35 = a2 - 1;
        if (*v36 < **(_QWORD **)v8)
        {
          v92 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v92;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), a2 - 1);
        return;
      case 5uLL:
        v37 = (__int128 *)(v8 + 16);
        v38 = (__int128 *)(v8 + 32);
        v39 = (__int128 *)(v8 + 48);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (_OWORD *)(v8 + 48));
        v41 = (_QWORD *)*((_QWORD *)a2 - 2);
        v40 = a2 - 1;
        if (*v41 < **(_QWORD **)(v8 + 48))
        {
          v42 = *v39;
          *v39 = *v40;
          *v40 = v42;
          if (**(_QWORD **)v39 < **(_QWORD **)v38)
          {
            v43 = *v38;
            *v38 = *v39;
            *v39 = v43;
            if (**(_QWORD **)v38 < **(_QWORD **)v37)
            {
              v44 = *v37;
              *v37 = *v38;
              *v38 = v44;
              if (**(_QWORD **)(v8 + 16) < **(_QWORD **)v8)
              {
                v93 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v37;
                *v37 = v93;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v45 = (__int128 *)(v8 + 16);
          v47 = (__int128 *)v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = v8;
              do
              {
                v50 = v45;
                v51 = *(_QWORD **)(v49 + 16);
                if (*v51 < **(_QWORD **)v49)
                {
                  v52 = *(_QWORD *)(v49 + 24);
                  v53 = v48;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v53 + 16) = *(_OWORD *)(v8 + v53);
                    if (!v53)
                      break;
                    v54 = **(_QWORD **)(v8 + v53 - 16);
                    v53 -= 16;
                    if (*v51 >= v54)
                    {
                      v55 = (_QWORD *)(v8 + v53 + 16);
                      goto LABEL_76;
                    }
                  }
                  v55 = (_QWORD *)v8;
LABEL_76:
                  *v55 = v51;
                  v55[1] = v52;
                }
                v45 = v50 + 1;
                v48 += 16;
                v49 = (unint64_t)v50;
              }
              while (v50 + 1 != a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v84 = v45;
              v85 = a1[2];
              if (*v85 < **a1)
              {
                v86 = a1[3];
                v87 = v84;
                do
                {
                  *v87 = *(v87 - 1);
                  v88 = (uint64_t *)*((_QWORD *)v87-- - 4);
                }
                while (*v85 < *v88);
                *(_QWORD *)v87 = v85;
                *((_QWORD *)v87 + 1) = v86;
              }
              v45 = v84 + 1;
              a1 = (uint64_t **)v84;
            }
            while (v84 + 1 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 != a2)
          {
            v56 = (v10 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = (uint64_t **)(v8 + 16 * v59);
                if (2 * v58 + 2 >= (uint64_t)v10)
                {
                  v62 = **v60;
                }
                else
                {
                  v61 = **v60;
                  v62 = *v60[2];
                  v63 = v61 < v62;
                  if (v61 > v62)
                    v62 = **v60;
                  if (v63)
                  {
                    v60 += 2;
                    v59 = 2 * v58 + 2;
                  }
                }
                v64 = (uint64_t **)(v8 + 16 * v58);
                v65 = *v64;
                if (v62 >= **v64)
                {
                  v66 = v64[1];
                  do
                  {
                    v67 = v64;
                    v64 = v60;
                    *(_OWORD *)v67 = *(_OWORD *)v60;
                    if (v56 < v59)
                      break;
                    v68 = (2 * v59) | 1;
                    v60 = (uint64_t **)(v8 + 16 * v68);
                    v59 = 2 * v59 + 2;
                    if (v59 >= (uint64_t)v10)
                    {
                      v69 = **v60;
                      v59 = v68;
                    }
                    else
                    {
                      v69 = **v60;
                      v70 = *v60[2];
                      v71 = v69 < v70;
                      if (v69 <= v70)
                        v69 = *v60[2];
                      if (v71)
                        v60 += 2;
                      else
                        v59 = v68;
                    }
                  }
                  while (v69 >= *v65);
                  *v64 = v65;
                  v64[1] = v66;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v72 = (unint64_t)v9 >> 4;
            do
            {
              v73 = 0;
              v94 = *(_OWORD *)v8;
              v74 = (_OWORD *)v8;
              do
              {
                v75 = (uint64_t)&v74[v73 + 1];
                v76 = (2 * v73) | 1;
                v77 = 2 * v73 + 2;
                if (v77 < v72 && **(_QWORD **)v75 < **(_QWORD **)(v75 + 16))
                {
                  v75 += 16;
                  v76 = v77;
                }
                *v74 = *(_OWORD *)v75;
                v74 = (_OWORD *)v75;
                v73 = v76;
              }
              while (v76 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              if ((__int128 *)v75 == --a2)
              {
                *(_OWORD *)v75 = v94;
              }
              else
              {
                *(_OWORD *)v75 = *a2;
                *a2 = v94;
                v78 = v75 - v8 + 16;
                if (v78 >= 17)
                {
                  v79 = (((unint64_t)v78 >> 4) - 2) >> 1;
                  v80 = (_OWORD *)(v8 + 16 * v79);
                  v81 = *(_QWORD **)v75;
                  if (**(_QWORD **)v80 < **(_QWORD **)v75)
                  {
                    v82 = *(_QWORD *)(v75 + 8);
                    do
                    {
                      v83 = (_OWORD *)v75;
                      v75 = (uint64_t)v80;
                      *v83 = *v80;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = (_OWORD *)(v8 + 16 * v79);
                    }
                    while (**(_QWORD **)v80 < *v81);
                    *(_QWORD *)v75 = v81;
                    *(_QWORD *)(v75 + 8) = v82;
                  }
                }
              }
              v63 = v72-- <= 2;
            }
            while (!v63);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (uint64_t **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, (uint64_t **)a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], (uint64_t **)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, (uint64_t **)a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], (uint64_t **)a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v89 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v89;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **((_QWORD **)a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= (_QWORD **)a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_QWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v91 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v91;
            v32 = *v13;
            do
            {
              v33 = *(uint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (uint64_t *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((uint64_t **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= (uint64_t **)v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19-- - 2);
          }
          while (*v21 >= v14);
        }
        else
        {
          do
            v20 = (_QWORD *)*((_QWORD *)v19-- - 2);
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < (uint64_t **)v19)
        {
          v22 = v19;
          do
          {
            v90 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v90;
            v23 = *v13;
            do
            {
              v24 = *(uint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (uint64_t *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((uint64_t **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (uint64_t **)v19)
        {
LABEL_29:
          a4 = 0;
          continue;
        }
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__int128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (int **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_DWORD *)*((_QWORD *)a2 - 2);
        v35 = a2 - 1;
        if (*v36 < **(_DWORD **)v8)
        {
          v92 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v92;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)(v8 + 32), a2 - 1);
        return;
      case 5uLL:
        v37 = (__int128 *)(v8 + 16);
        v38 = (__int128 *)(v8 + 32);
        v39 = (__int128 *)(v8 + 48);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)(v8 + 32), (_OWORD *)(v8 + 48));
        v41 = (_DWORD *)*((_QWORD *)a2 - 2);
        v40 = a2 - 1;
        if (*v41 < **(_DWORD **)(v8 + 48))
        {
          v42 = *v39;
          *v39 = *v40;
          *v40 = v42;
          if (**(_DWORD **)v39 < **(_DWORD **)v38)
          {
            v43 = *v38;
            *v38 = *v39;
            *v39 = v43;
            if (**(_DWORD **)v38 < **(_DWORD **)v37)
            {
              v44 = *v37;
              *v37 = *v38;
              *v38 = v44;
              if (**(_DWORD **)(v8 + 16) < **(_DWORD **)v8)
              {
                v93 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v37;
                *v37 = v93;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v45 = (__int128 *)(v8 + 16);
          v47 = (__int128 *)v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = v8;
              do
              {
                v50 = v45;
                v51 = *(_DWORD **)(v49 + 16);
                if (*v51 < **(_DWORD **)v49)
                {
                  v52 = *(_QWORD *)(v49 + 24);
                  v53 = v48;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v53 + 16) = *(_OWORD *)(v8 + v53);
                    if (!v53)
                      break;
                    v54 = **(_DWORD **)(v8 + v53 - 16);
                    v53 -= 16;
                    if (*v51 >= v54)
                    {
                      v55 = (_QWORD *)(v8 + v53 + 16);
                      goto LABEL_76;
                    }
                  }
                  v55 = (_QWORD *)v8;
LABEL_76:
                  *v55 = v51;
                  v55[1] = v52;
                }
                v45 = v50 + 1;
                v48 += 16;
                v49 = (unint64_t)v50;
              }
              while (v50 + 1 != a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v84 = v45;
              v85 = a1[2];
              if (*v85 < **a1)
              {
                v86 = a1[3];
                v87 = v84;
                do
                {
                  *v87 = *(v87 - 1);
                  v88 = (int *)*((_QWORD *)v87-- - 4);
                }
                while (*v85 < *v88);
                *(_QWORD *)v87 = v85;
                *((_QWORD *)v87 + 1) = v86;
              }
              v45 = v84 + 1;
              a1 = (int **)v84;
            }
            while (v84 + 1 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 != a2)
          {
            v56 = (v10 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = (int **)(v8 + 16 * v59);
                if (2 * v58 + 2 >= (uint64_t)v10)
                {
                  v62 = **v60;
                }
                else
                {
                  v61 = **v60;
                  v62 = *v60[2];
                  v63 = v61 < v62;
                  if (v61 > v62)
                    v62 = **v60;
                  if (v63)
                  {
                    v60 += 2;
                    v59 = 2 * v58 + 2;
                  }
                }
                v64 = (int **)(v8 + 16 * v58);
                v65 = *v64;
                if (v62 >= **v64)
                {
                  v66 = v64[1];
                  do
                  {
                    v67 = v64;
                    v64 = v60;
                    *(_OWORD *)v67 = *(_OWORD *)v60;
                    if (v56 < v59)
                      break;
                    v68 = (2 * v59) | 1;
                    v60 = (int **)(v8 + 16 * v68);
                    v59 = 2 * v59 + 2;
                    if (v59 >= (uint64_t)v10)
                    {
                      v69 = **v60;
                      v59 = v68;
                    }
                    else
                    {
                      v69 = **v60;
                      v70 = *v60[2];
                      v71 = v69 < v70;
                      if (v69 <= v70)
                        v69 = *v60[2];
                      if (v71)
                        v60 += 2;
                      else
                        v59 = v68;
                    }
                  }
                  while (v69 >= *v65);
                  *v64 = v65;
                  v64[1] = v66;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v72 = (unint64_t)v9 >> 4;
            do
            {
              v73 = 0;
              v94 = *(_OWORD *)v8;
              v74 = (_OWORD *)v8;
              do
              {
                v75 = (uint64_t)&v74[v73 + 1];
                v76 = (2 * v73) | 1;
                v77 = 2 * v73 + 2;
                if (v77 < v72 && **(_DWORD **)v75 < **(_DWORD **)(v75 + 16))
                {
                  v75 += 16;
                  v76 = v77;
                }
                *v74 = *(_OWORD *)v75;
                v74 = (_OWORD *)v75;
                v73 = v76;
              }
              while (v76 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              if ((__int128 *)v75 == --a2)
              {
                *(_OWORD *)v75 = v94;
              }
              else
              {
                *(_OWORD *)v75 = *a2;
                *a2 = v94;
                v78 = v75 - v8 + 16;
                if (v78 >= 17)
                {
                  v79 = (((unint64_t)v78 >> 4) - 2) >> 1;
                  v80 = (_OWORD *)(v8 + 16 * v79);
                  v81 = *(_DWORD **)v75;
                  if (**(_DWORD **)v80 < **(_DWORD **)v75)
                  {
                    v82 = *(_QWORD *)(v75 + 8);
                    do
                    {
                      v83 = (_OWORD *)v75;
                      v75 = (uint64_t)v80;
                      *v83 = *v80;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = (_OWORD *)(v8 + 16 * v79);
                    }
                    while (**(_DWORD **)v80 < *v81);
                    *(_QWORD *)v75 = v81;
                    *(_QWORD *)(v75 + 8) = v82;
                  }
                }
              }
              v63 = v72-- <= 2;
            }
            while (!v63);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (int **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, (int **)a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], (int **)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, (int **)a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], (int **)a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v89 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v89;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **((_DWORD **)a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= (_DWORD **)a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_DWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(_DWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (_DWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v91 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v91;
            v32 = *v13;
            do
            {
              v33 = *(int **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (int *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((int **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= (int **)v19)
              break;
            v21 = (_DWORD *)*((_QWORD *)v19-- - 2);
          }
          while (*v21 >= v14);
        }
        else
        {
          do
            v20 = (_DWORD *)*((_QWORD *)v19-- - 2);
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < (int **)v19)
        {
          v22 = v19;
          do
          {
            v90 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v90;
            v23 = *v13;
            do
            {
              v24 = *(int **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (int *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((int **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (int **)v19)
        {
LABEL_29:
          a4 = 0;
          continue;
        }
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__int128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v92 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v92;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        v37 = v8 + 2;
        v38 = v8 + 4;
        v39 = v8 + 6;
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3);
        v41 = *(a2 - 2);
        v40 = a2 - 2;
        if (*v41 < *v8[6])
        {
          v42 = *(_OWORD *)v39;
          *(_OWORD *)v39 = *(_OWORD *)v40;
          *(_OWORD *)v40 = v42;
          if (**v39 < **v38)
          {
            v43 = *(_OWORD *)v38;
            *(_OWORD *)v38 = *(_OWORD *)v39;
            *(_OWORD *)v39 = v43;
            if (**v38 < **v37)
            {
              v44 = *(_OWORD *)v37;
              *(_OWORD *)v37 = *(_OWORD *)v38;
              *(_OWORD *)v38 = v44;
              if (*v8[2] < **v8)
              {
                v93 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v37;
                *(_OWORD *)v37 = v93;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v45 = v8 + 2;
          v47 = v8 == a2 || v45 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v47)
            {
              v48 = 0;
              v49 = v8;
              do
              {
                v50 = v45;
                v51 = v49[2];
                if (*v51 < **v49)
                {
                  v52 = v49[3];
                  v53 = v48;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v53 + 16) = *(_OWORD *)((char *)v8 + v53);
                    if (!v53)
                      break;
                    v54 = **(__int16 **)((char *)v8 + v53 - 16);
                    v53 -= 16;
                    if (*v51 >= v54)
                    {
                      v55 = (__int16 **)((char *)v8 + v53 + 16);
                      goto LABEL_76;
                    }
                  }
                  v55 = v8;
LABEL_76:
                  *v55 = v51;
                  v55[1] = v52;
                }
                v45 = v50 + 2;
                v48 += 16;
                v49 = v50;
              }
              while (v50 + 2 != a2);
            }
          }
          else if (!v47)
          {
            do
            {
              v84 = v45;
              v85 = a1[2];
              if (*v85 < **a1)
              {
                v86 = a1[3];
                v87 = v84;
                do
                {
                  *(_OWORD *)v87 = *((_OWORD *)v87 - 1);
                  v88 = *(v87 - 4);
                  v87 -= 2;
                }
                while (*v85 < *v88);
                *v87 = v85;
                v87[1] = v86;
              }
              v45 = v84 + 2;
              a1 = v84;
            }
            while (v84 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v56 = (v10 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = &v8[2 * v59];
                if (2 * v58 + 2 >= (uint64_t)v10)
                {
                  LOWORD(v62) = **v60;
                }
                else
                {
                  v61 = **v60;
                  v62 = *v60[2];
                  v63 = v61 < v62;
                  if (v61 > v62)
                    LOWORD(v62) = **v60;
                  if (v63)
                  {
                    v60 += 2;
                    v59 = 2 * v58 + 2;
                  }
                }
                v64 = &v8[2 * v58];
                v65 = *v64;
                if (**v64 <= (__int16)v62)
                {
                  v66 = v64[1];
                  do
                  {
                    v67 = v64;
                    v64 = v60;
                    *(_OWORD *)v67 = *(_OWORD *)v60;
                    if (v56 < v59)
                      break;
                    v68 = (2 * v59) | 1;
                    v60 = &v8[2 * v68];
                    v59 = 2 * v59 + 2;
                    if (v59 >= (uint64_t)v10)
                    {
                      LOWORD(v69) = **v60;
                      v59 = v68;
                    }
                    else
                    {
                      v69 = **v60;
                      v70 = *v60[2];
                      v71 = v69 < v70;
                      if (v69 <= v70)
                        LOWORD(v69) = *v60[2];
                      if (v71)
                        v60 += 2;
                      else
                        v59 = v68;
                    }
                  }
                  while (*v65 <= (__int16)v69);
                  *v64 = v65;
                  v64[1] = v66;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v72 = (unint64_t)v9 >> 4;
            do
            {
              v73 = 0;
              v94 = *(_OWORD *)v8;
              v74 = v8;
              do
              {
                v75 = &v74[2 * v73 + 2];
                v76 = (2 * v73) | 1;
                v77 = 2 * v73 + 2;
                if (v77 < v72 && **v75 < *v75[2])
                {
                  v75 += 2;
                  v76 = v77;
                }
                *(_OWORD *)v74 = *(_OWORD *)v75;
                v74 = v75;
                v73 = v76;
              }
              while (v76 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
              a2 -= 2;
              if (v75 == a2)
              {
                *(_OWORD *)v75 = v94;
              }
              else
              {
                *(_OWORD *)v75 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v94;
                v78 = (char *)v75 - (char *)v8 + 16;
                if (v78 >= 17)
                {
                  v79 = (((unint64_t)v78 >> 4) - 2) >> 1;
                  v80 = &v8[2 * v79];
                  v81 = *v75;
                  if (**v80 < **v75)
                  {
                    v82 = v75[1];
                    do
                    {
                      v83 = v75;
                      v75 = v80;
                      *(_OWORD *)v83 = *(_OWORD *)v80;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v8[2 * v79];
                    }
                    while (**v80 < *v81);
                    *v75 = v81;
                    v75[1] = v82;
                  }
                }
              }
              v63 = v72-- <= 2;
            }
            while (!v63);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v89 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v89;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v91 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v91;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v90 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v90;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          a4 = 0;
          continue;
        }
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2 - 2;
  v98 = a2 - 4;
  v99 = a2;
  v96 = a2 - 6;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = v99;
    v10 = (char *)v99 - (char *)v8;
    v11 = ((char *)v99 - (char *)v8) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v33 = v99 - 2;
        if (re::DynamicString::operator<(*(v99 - 2), *v8))
        {
          v103 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v33;
          *(_OWORD *)v33 = v103;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v7);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v8 + 4, v7);
        return;
      case 5:
        v34 = v8 + 2;
        v35 = v8 + 4;
        v36 = v8 + 6;
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v8 + 4, v8 + 6);
        v37 = v99 - 2;
        if (re::DynamicString::operator<(*(v99 - 2), v8[6]))
        {
          v38 = *(_OWORD *)v36;
          *(_OWORD *)v36 = *(_OWORD *)v37;
          *(_OWORD *)v37 = v38;
          if (re::DynamicString::operator<(*v36, *v35))
          {
            v39 = *(_OWORD *)v35;
            *(_OWORD *)v35 = *(_OWORD *)v36;
            *(_OWORD *)v36 = v39;
            if (re::DynamicString::operator<(*v35, *v34))
            {
              v40 = *(_OWORD *)v34;
              *(_OWORD *)v34 = *(_OWORD *)v35;
              *(_OWORD *)v35 = v40;
              if (re::DynamicString::operator<(v8[2], *v8))
              {
                v104 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *(_OWORD *)v34;
                *(_OWORD *)v34 = v104;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 383)
        {
          v41 = v8 + 2;
          v43 = v8 == v99 || v41 == v99;
          if ((a4 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v46 = v41;
                v47 = v45[2];
                if (re::DynamicString::operator<(v47, *v45))
                {
                  v48 = v45[3];
                  v49 = v44;
                  while (1)
                  {
                    v50 = (char *)v8 + v49;
                    *(_OWORD *)((char *)v8 + v49 + 16) = *(_OWORD *)((char *)v8 + v49);
                    if (!v49)
                      break;
                    v49 -= 16;
                    if ((re::DynamicString::operator<(v47, *((_QWORD *)v50 - 2)) & 1) == 0)
                    {
                      v51 = (uint64_t *)((char *)v8 + v49 + 16);
                      goto LABEL_74;
                    }
                  }
                  v51 = v8;
LABEL_74:
                  *v51 = v47;
                  v51[1] = v48;
                }
                v41 = v46 + 2;
                v44 += 16;
                v45 = v46;
              }
              while (v46 + 2 != v99);
            }
          }
          else if (!v43)
          {
            do
            {
              v88 = v41;
              v89 = a1[2];
              if (re::DynamicString::operator<(v89, *a1))
              {
                v90 = a1[3];
                v91 = v88;
                do
                {
                  v92 = v91 - 2;
                  *(_OWORD *)v91 = *((_OWORD *)v91 - 1);
                  v93 = re::DynamicString::operator<(v89, *(v91 - 4));
                  v91 = v92;
                }
                while ((v93 & 1) != 0);
                *v92 = v89;
                v92[1] = v90;
              }
              v41 = v88 + 2;
              a1 = v88;
            }
            while (v88 + 2 != v99);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != v99)
          {
            v94 = (char *)v99 - (char *)v8;
            v52 = (unint64_t)(v11 - 2) >> 1;
            v53 = v52;
            do
            {
              v54 = v53;
              if (v52 >= v53)
              {
                v55 = (2 * v53) | 1;
                v56 = &a1[2 * v55];
                v57 = 2 * v53 + 2;
                v58 = v53;
                if (v57 >= v11)
                {
                  v63 = *v56;
                }
                else
                {
                  v59 = *v56;
                  v60 = v56[2];
                  v61 = re::DynamicString::operator<(*v56, v60);
                  v62 = v61 == 0;
                  if (v61)
                    v63 = v60;
                  else
                    v63 = v59;
                  v52 = (unint64_t)(v11 - 2) >> 1;
                  if (!v62)
                  {
                    v56 += 2;
                    v55 = v57;
                  }
                }
                v54 = v58;
                v64 = &a1[2 * v58];
                v65 = *v64;
                if ((re::DynamicString::operator<(v63, *v64) & 1) == 0)
                {
                  v95 = v64[1];
                  v97 = v54;
                  do
                  {
                    v66 = v64;
                    v64 = v56;
                    *(_OWORD *)v66 = *(_OWORD *)v56;
                    if (v52 < v55)
                      break;
                    v67 = (2 * v55) | 1;
                    v56 = &a1[2 * v67];
                    v68 = 2 * v55 + 2;
                    if (v68 >= v11)
                    {
                      v73 = *v56;
                      v55 = (2 * v55) | 1;
                    }
                    else
                    {
                      v69 = *v56;
                      v70 = v56[2];
                      v71 = re::DynamicString::operator<(*v56, v70);
                      v72 = v71 == 0;
                      if (v71)
                        v73 = v70;
                      else
                        v73 = v69;
                      if (!v72)
                        v56 += 2;
                      v52 = (unint64_t)(v11 - 2) >> 1;
                      v55 = v72 ? v67 : v68;
                    }
                  }
                  while (!re::DynamicString::operator<(v73, v65));
                  v54 = v97;
                  *v64 = v65;
                  v64[1] = v95;
                }
              }
              v53 = v54 - 1;
            }
            while (v54);
            v74 = v94 >> 4;
            v75 = v99;
            do
            {
              v76 = 0;
              v105 = *(_OWORD *)a1;
              v77 = a1;
              do
              {
                v78 = &v77[2 * v76 + 2];
                v79 = (2 * v76) | 1;
                v80 = 2 * v76 + 2;
                if (v80 < v74 && re::DynamicString::operator<(*v78, v77[2 * v76 + 4]))
                {
                  v78 += 2;
                  v79 = v80;
                }
                *(_OWORD *)v77 = *(_OWORD *)v78;
                v77 = v78;
                v76 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
              v75 -= 2;
              if (v78 == v75)
              {
                *(_OWORD *)v78 = v105;
              }
              else
              {
                *(_OWORD *)v78 = *(_OWORD *)v75;
                *(_OWORD *)v75 = v105;
                v81 = (char *)v78 - (char *)a1 + 16;
                if (v81 >= 17)
                {
                  v82 = (((unint64_t)v81 >> 4) - 2) >> 1;
                  v83 = &a1[2 * v82];
                  v84 = *v78;
                  if (re::DynamicString::operator<(*v83, *v78))
                  {
                    v85 = v78[1];
                    do
                    {
                      v86 = v78;
                      v78 = v83;
                      *(_OWORD *)v86 = *(_OWORD *)v83;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &a1[2 * v82];
                    }
                    while ((re::DynamicString::operator<(*v83, v84) & 1) != 0);
                    *v78 = v84;
                    v78[1] = v85;
                  }
                }
              }
            }
            while (v74-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v8[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v13, v8, v7);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v13, v7);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8 + 2, v13 - 2, v98);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8 + 4, &v8[2 * v12 + 2], v96);
          v9 = v99;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v13 - 2, v13, &v8[2 * v12 + 2]);
          v100 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v100;
        }
        --a3;
        v14 = *v8;
        if ((a4 & 1) == 0 && (re::DynamicString::operator<(*(v8 - 2), *v8) & 1) == 0)
        {
          v26 = v8[1];
          if ((re::DynamicString::operator<(v14, *v7) & 1) != 0)
          {
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while ((re::DynamicString::operator<(v14, v27) & 1) == 0);
          }
          else
          {
            v28 = v8 + 2;
            do
            {
              v8 = v28;
              if (v28 >= v99)
                break;
              v28 += 2;
            }
            while (!re::DynamicString::operator<(v14, *v8));
          }
          v29 = v99;
          if (v8 < v99)
          {
            v29 = v99;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while ((re::DynamicString::operator<(v14, v30) & 1) != 0);
          }
          while (v8 < v29)
          {
            v102 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v102;
            do
            {
              v31 = v8[2];
              v8 += 2;
            }
            while (!re::DynamicString::operator<(v14, v31));
            do
            {
              v32 = *(v29 - 2);
              v29 -= 2;
            }
            while ((re::DynamicString::operator<(v14, v32) & 1) != 0);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v14;
          *(v8 - 1) = v26;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = re::DynamicString::operator<(a1[v15 + 2], v14);
          v15 += 2;
        }
        while ((v17 & 1) != 0);
        v18 = &a1[v15];
        v19 = v9;
        if (v15 == 2)
        {
          v19 = v9;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while ((re::DynamicString::operator<(v21, v14) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (!re::DynamicString::operator<(v20, v14));
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v101 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v101;
            do
            {
              v23 = v8[2];
              v8 += 2;
            }
            while ((re::DynamicString::operator<(v23, v14) & 1) != 0);
            do
            {
              v24 = *(v22 - 2);
              v22 -= 2;
            }
            while (!re::DynamicString::operator<(v24, v14));
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v14;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          a4 = 0;
          continue;
        }
        {
          if (v25)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v25)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (__int128 *)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v37 = (_QWORD *)a2[-1].n128_u64[0];
        v36 = (__int128 *)&a2[-1];
        if (*v37 >> 1 < **(_QWORD **)v8 >> 1)
        {
          v92 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v36;
          *v36 = v92;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (_QWORD **)(v8 + 16), &a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (__n128 *)(v8 + 16), (__n128 *)(v8 + 32), a2 - 1);
        return;
      case 5uLL:
        v38 = (__int128 *)(v8 + 16);
        v39 = (__int128 *)(v8 + 32);
        v40 = (__int128 *)(v8 + 48);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (__n128 *)(v8 + 16), (__n128 *)(v8 + 32), (__n128 *)(v8 + 48));
        v42 = (_QWORD *)a2[-1].n128_u64[0];
        v41 = a2 - 1;
        if (*v42 >> 1 < **(_QWORD **)(v8 + 48) >> 1)
        {
          v43 = (__n128)*v40;
          *v40 = (__int128)*v41;
          *v41 = v43;
          if (**(_QWORD **)v40 >> 1 < **(_QWORD **)v39 >> 1)
          {
            v44 = *v39;
            *v39 = *v40;
            *v40 = v44;
            if (**(_QWORD **)v39 >> 1 < **(_QWORD **)v38 >> 1)
            {
              v45 = *v38;
              *v38 = *v39;
              *v39 = v45;
              if (**(_QWORD **)(v8 + 16) >> 1 < **(_QWORD **)v8 >> 1)
              {
                v93 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v38;
                *v38 = v93;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v46 = (__n128 *)(v8 + 16);
          v48 = (__n128 *)v8 == a2 || v46 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = v8;
              do
              {
                v51 = v46;
                v52 = *(_QWORD **)(v50 + 16);
                if (*v52 >> 1 < **(_QWORD **)v50 >> 1)
                {
                  v53 = *(_QWORD *)(v50 + 24);
                  v54 = v49;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v54 + 16) = *(_OWORD *)(v8 + v54);
                    if (!v54)
                      break;
                    v55 = **(_QWORD **)(v8 + v54 - 16);
                    v54 -= 16;
                    if (*v52 >> 1 >= v55 >> 1)
                    {
                      v56 = (_QWORD *)(v8 + v54 + 16);
                      goto LABEL_77;
                    }
                  }
                  v56 = (_QWORD *)v8;
LABEL_77:
                  *v56 = v52;
                  v56[1] = v53;
                }
                v46 = v51 + 1;
                v49 += 16;
                v50 = (unint64_t)v51;
              }
              while (&v51[1] != a2);
            }
          }
          else if (!v48)
          {
            do
            {
              v84 = v46;
              v85 = (_QWORD *)*((_QWORD *)a1 + 2);
              if (*v85 >> 1 < **(_QWORD **)a1 >> 1)
              {
                v86 = (_QWORD *)*((_QWORD *)a1 + 3);
                v87 = v84;
                do
                {
                  *v87 = v87[-1];
                  v88 = (_QWORD *)v87[-2].n128_u64[0];
                  --v87;
                }
                while (*v85 >> 1 < *v88 >> 1);
                v87->n128_u64[0] = (unint64_t)v85;
                v87->n128_u64[1] = (unint64_t)v86;
              }
              v46 = v84 + 1;
              a1 = (__int128 *)v84;
            }
            while (&v84[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v57 = (v10 - 2) >> 1;
            v58 = v57;
            do
            {
              v59 = v58;
              if (v57 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = (unint64_t **)(v8 + 16 * v60);
                if (2 * v59 + 2 >= (uint64_t)v10)
                {
                  v63 = **v61;
                }
                else
                {
                  v62 = **v61 >> 1;
                  v63 = *v61[2];
                  v64 = v62 >= v63 >> 1;
                  if (v62 < v63 >> 1)
                    v61 += 2;
                  else
                    v63 = **v61;
                  if (!v64)
                    v60 = 2 * v59 + 2;
                }
                v65 = (unint64_t **)(v8 + 16 * v59);
                v66 = *v65;
                if (v63 >> 1 >= **v65 >> 1)
                {
                  v67 = v65[1];
                  do
                  {
                    v68 = v65;
                    v65 = v61;
                    *(_OWORD *)v68 = *(_OWORD *)v61;
                    if (v57 < v60)
                      break;
                    v69 = (2 * v60) | 1;
                    v61 = (unint64_t **)(v8 + 16 * v69);
                    v60 = 2 * v60 + 2;
                    if (v60 >= (uint64_t)v10)
                    {
                      v70 = **v61;
                      v60 = v69;
                    }
                    else
                    {
                      v70 = **v61;
                      if (v70 >> 1 >= *v61[2] >> 1)
                      {
                        v60 = v69;
                      }
                      else
                      {
                        v70 = *v61[2];
                        v61 += 2;
                      }
                    }
                  }
                  while (v70 >> 1 >= *v66 >> 1);
                  *v65 = v66;
                  v65[1] = v67;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v71 = (unint64_t)v9 >> 4;
            do
            {
              v72 = 0;
              v94 = *(_OWORD *)v8;
              v73 = (_OWORD *)v8;
              do
              {
                v74 = (uint64_t)&v73[v72 + 1];
                v75 = (2 * v72) | 1;
                v76 = 2 * v72 + 2;
                if (v76 < v71 && **(_QWORD **)v74 >> 1 < **(_QWORD **)(v74 + 16) >> 1)
                {
                  v74 += 16;
                  v75 = v76;
                }
                *v73 = *(_OWORD *)v74;
                v73 = (_OWORD *)v74;
                v72 = v75;
              }
              while (v75 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if ((__n128 *)v74 == --a2)
              {
                *(_OWORD *)v74 = v94;
              }
              else
              {
                *(__n128 *)v74 = *a2;
                *a2 = (__n128)v94;
                v77 = v74 - v8 + 16;
                if (v77 >= 17)
                {
                  v78 = (((unint64_t)v77 >> 4) - 2) >> 1;
                  v79 = (_OWORD *)(v8 + 16 * v78);
                  v80 = *(_QWORD **)v74;
                  if (**(_QWORD **)v79 >> 1 < **(_QWORD **)v74 >> 1)
                  {
                    v81 = *(_QWORD *)(v74 + 8);
                    do
                    {
                      v82 = (_OWORD *)v74;
                      v74 = (uint64_t)v79;
                      *v82 = *v79;
                      if (!v78)
                        break;
                      v78 = (v78 - 1) >> 1;
                      v79 = (_OWORD *)(v8 + 16 * v78);
                    }
                    while (**(_QWORD **)v79 >> 1 < *v80 >> 1);
                    *(_QWORD *)v74 = v80;
                    *(_QWORD *)(v74 + 8) = v81;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (__int128 *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(&a1[v10 >> 1], (_QWORD **)a1, &a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, (_QWORD **)&a1[v10 >> 1], &a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1 + 1, (_QWORD **)v12 - 2, &a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1 + 2, (_QWORD **)&a1[v11 + 1], &a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v12 - 1, (_QWORD **)v12, (_QWORD **)&a1[v11 + 1]);
          v89 = *a1;
          *a1 = *v12;
          *v12 = v89;
        }
        --a3;
        v13 = *(unint64_t **)a1;
        v14 = **(_QWORD **)a1;
        if ((a4 & 1) == 0)
        {
          v15 = v14 >> 1;
          if (v15 > **((_QWORD **)a1 - 2) >> 1)
            goto LABEL_11;
          if (v15 >= *(_QWORD *)a2[-1].n128_u64[0] >> 1)
          {
            v29 = (_QWORD **)(a1 + 1);
            do
            {
              v8 = (unint64_t)v29;
              if (v29 >= (_QWORD **)a2)
                break;
              v29 += 2;
            }
            while (v15 >= **(_QWORD **)v8 >> 1);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v28 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v15 >= *v28 >> 1);
          }
          v30 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v30 = (__int128 *)a2;
            do
              v31 = (_QWORD *)*((_QWORD *)v30-- - 2);
            while (v15 < *v31 >> 1);
          }
          v32 = (_QWORD *)*((_QWORD *)a1 + 1);
          while (v8 < (unint64_t)v30)
          {
            v91 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v30;
            *v30 = v91;
            v33 = *v13 >> 1;
            do
            {
              v34 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v33 >= *v34 >> 1);
            do
              v35 = (_QWORD *)*((_QWORD *)v30-- - 2);
            while (v33 < *v35 >> 1);
          }
          if ((__int128 *)(v8 - 16) != a1)
            *a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v32;
          continue;
        }
        v15 = v14 >> 1;
LABEL_11:
        v16 = 0;
        v17 = (_QWORD *)*((_QWORD *)a1 + 1);
        do
          v18 = **(_QWORD **)&a1[++v16];
        while (v15 > v18 >> 1);
        v19 = &a1[v16];
        v20 = a2;
        if (v16 == 1)
        {
          v20 = a2;
          do
          {
            if (v19 >= (__int128 *)v20)
              break;
            v22 = (_QWORD *)v20[-1].n128_u64[0];
            --v20;
          }
          while (v15 <= *v22 >> 1);
        }
        else
        {
          do
          {
            v21 = (_QWORD *)v20[-1].n128_u64[0];
            --v20;
          }
          while (v15 <= *v21 >> 1);
        }
        v8 = (unint64_t)&a1[v16];
        if (v19 < (__int128 *)v20)
        {
          v23 = (__int128 *)v20;
          do
          {
            v90 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v23;
            *v23 = v90;
            v24 = *v13 >> 1;
            do
            {
              v25 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v24 > *v25 >> 1);
            do
              v26 = (_QWORD *)*((_QWORD *)v23-- - 2);
            while (v24 <= *v26 >> 1);
          }
          while (v8 < (unint64_t)v23);
        }
        if ((__int128 *)(v8 - 16) != a1)
          *a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v17;
        if (v19 < (__int128 *)v20)
        {
LABEL_30:
          a4 = 0;
          continue;
        }
        {
          if (v27)
            continue;
          goto LABEL_30;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v92 = a2 - 32;
  v94 = (uint64_t *)(a2 - 16);
  v90 = a2 - 48;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = (a2 - v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v37 = *((_QWORD *)a2 - 2);
        v36 = a2 - 16;
        if ((*a3)(v37, *(_QWORD *)a1))
        {
          v105 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v36;
          *(_OWORD *)v36 = v105;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, v94, a3);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, v94, a3);
        return;
      case 5:
        v38 = (uint64_t *)(a1 + 16);
        v39 = (uint64_t *)(a1 + 32);
        v40 = (uint64_t *)(a1 + 48);
        v41 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6, a3);
        v43 = *((_QWORD *)a2 - 2);
        v42 = a2 - 16;
        if (((unsigned int (*)(uint64_t, _QWORD, __n128))*a3)(v43, *((_QWORD *)a1 + 6), v41))
        {
          v44 = *(_OWORD *)v40;
          *(_OWORD *)v40 = *(_OWORD *)v42;
          *(_OWORD *)v42 = v44;
          if ((*a3)(*v40, *v39))
          {
            v45 = *(_OWORD *)v39;
            *(_OWORD *)v39 = *(_OWORD *)v40;
            *(_OWORD *)v40 = v45;
            if ((*a3)(*v39, *v38))
            {
              v46 = *(_OWORD *)v38;
              *(_OWORD *)v38 = *(_OWORD *)v39;
              *(_OWORD *)v39 = v46;
              if ((*a3)(*((_QWORD *)a1 + 2), *(_QWORD *)a1))
              {
                v106 = *(_OWORD *)a1;
                *(_OWORD *)a1 = *(_OWORD *)v38;
                *(_OWORD *)v38 = v106;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 383)
        {
          v47 = a1 + 16;
          v49 = a1 == a2 || v47 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v49)
            {
              v50 = 0;
              v51 = (uint64_t *)a1;
              do
              {
                v52 = v51[2];
                v53 = *v51;
                v51 = (uint64_t *)v47;
                if ((*a3)(v52, v53))
                {
                  v98 = *(_OWORD *)v51;
                  v54 = *v51;
                  v55 = v50;
                  while (1)
                  {
                    *(_OWORD *)&a1[v55 + 16] = *(_OWORD *)&a1[v55];
                    if (!v55)
                      break;
                    v56 = (*a3)(v54, *(_QWORD *)&a1[v55 - 16]);
                    v55 -= 16;
                    if ((v56 & 1) == 0)
                    {
                      v57 = &a1[v55 + 16];
                      goto LABEL_75;
                    }
                  }
                  v57 = a1;
LABEL_75:
                  *(_OWORD *)v57 = v98;
                }
                v47 = (char *)(v51 + 2);
                v50 += 16;
              }
              while (v51 + 2 != (uint64_t *)a2);
            }
          }
          else if (!v49)
          {
            do
            {
              v84 = *((_QWORD *)a1 + 2);
              v85 = *(_QWORD *)a1;
              a1 = v47;
              if ((*a3)(v84, v85))
              {
                v101 = *(_OWORD *)a1;
                v86 = *(_QWORD *)a1;
                v87 = a1;
                do
                {
                  v88 = v87 - 16;
                  *(_OWORD *)v87 = *((_OWORD *)v87 - 1);
                  v89 = (*a3)(v86, *((_QWORD *)v87 - 4));
                  v87 = v88;
                }
                while ((v89 & 1) != 0);
                *(_OWORD *)v88 = v101;
              }
              v47 = a1 + 16;
            }
            while (a1 + 16 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 == a2)
            return;
          v91 = v11;
          v93 = a2;
          v58 = (unint64_t)(v12 - 2) >> 1;
          v59 = v58;
          do
          {
            v60 = v59;
            if (v58 >= v59)
            {
              v61 = (2 * v59) | 1;
              v62 = (uint64_t *)&a1[16 * v61];
              if (2 * v59 + 2 < v12 && (*a3)(*v62, v62[2]))
              {
                v62 += 2;
                v61 = 2 * v60 + 2;
              }
              v63 = (uint64_t *)&a1[16 * v60];
              if (((*a3)(*v62, *v63) & 1) == 0)
              {
                v99 = v60;
                v95 = *(_OWORD *)v63;
                v64 = *v63;
                do
                {
                  v65 = v63;
                  v63 = v62;
                  *(_OWORD *)v65 = *(_OWORD *)v62;
                  if (v58 < v61)
                    break;
                  v66 = (2 * v61) | 1;
                  v62 = (uint64_t *)&a1[16 * v66];
                  v67 = 2 * v61 + 2;
                  if (v67 < v12 && (*a3)(*v62, v62[2]))
                  {
                    v62 += 2;
                    v66 = v67;
                  }
                  v61 = v66;
                }
                while (!(*a3)(*v62, v64));
                *(_OWORD *)v63 = v95;
                v60 = v99;
              }
            }
            v59 = v60 - 1;
          }
          while (v60);
          v68 = v93;
          v69 = v91 >> 4;
          while (2)
          {
            v70 = v68;
            v71 = 0;
            v107 = *(_OWORD *)a1;
            v72 = (uint64_t *)a1;
            do
            {
              v73 = &v72[2 * v71 + 2];
              v74 = (2 * v71) | 1;
              v75 = 2 * v71 + 2;
              if (v75 < v69 && (*a3)(*v73, v72[2 * v71 + 4]))
              {
                v73 += 2;
                v74 = v75;
              }
              *(_OWORD *)v72 = *(_OWORD *)v73;
              v72 = v73;
              v71 = v74;
            }
            while (v74 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
            v76 = (uint64_t *)(v70 - 16);
            if (v73 != v76)
            {
              *(_OWORD *)v73 = *(_OWORD *)v76;
              v68 = (char *)v76;
              *(_OWORD *)v76 = v107;
              v77 = (char *)v73 - a1 + 16;
              if (v77 >= 17)
              {
                v78 = (((unint64_t)v77 >> 4) - 2) >> 1;
                v79 = (uint64_t *)&a1[16 * v78];
                if ((*a3)(*v79, *v73))
                {
                  v100 = *(_OWORD *)v73;
                  v80 = *v73;
                  do
                  {
                    v81 = v73;
                    v73 = v79;
                    *(_OWORD *)v81 = *(_OWORD *)v79;
                    if (!v78)
                      break;
                    v78 = (v78 - 1) >> 1;
                    v79 = (uint64_t *)&a1[16 * v78];
                  }
                  while (((*a3)(*v79, v80) & 1) != 0);
                  v82 = v100;
LABEL_107:
                  *(_OWORD *)v73 = v82;
                }
              }
              if (v69-- <= 2)
                return;
              continue;
            }
            break;
          }
          v68 = (char *)v76;
          v82 = v107;
          goto LABEL_107;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &a1[16 * ((unint64_t)v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v14, a1, v94, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v14, v94, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)a1 + 2, (_QWORD *)v14 - 2, v92, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)a1 + 4, &a1[16 * v13 + 16], v90, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)v14 - 2, v14, &a1[16 * v13 + 16], a3);
          v102 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v102;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)(*((_QWORD *)a1 - 2), *(_QWORD *)a1) & 1) == 0)
        {
          v97 = *(_OWORD *)a1;
          v28 = *(_QWORD *)a1;
          if (((*a3)(*(_QWORD *)a1, *v94) & 1) != 0)
          {
            v10 = a1;
            do
            {
              v29 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (((*a3)(v28, v29) & 1) == 0);
          }
          else
          {
            v30 = a1 + 16;
            do
            {
              v10 = v30;
              if (v30 >= a2)
                break;
              v30 += 16;
            }
            while (!(*a3)(v28, *(_QWORD *)v10));
          }
          v31 = a2;
          if (v10 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *((_QWORD *)v31 - 2);
              v31 -= 16;
            }
            while (((*a3)(v28, v32) & 1) != 0);
          }
          while (v10 < v31)
          {
            v104 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v31;
            *(_OWORD *)v31 = v104;
            do
            {
              v33 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (!(*a3)(v28, v33));
            do
            {
              v34 = *((_QWORD *)v31 - 2);
              v31 -= 16;
            }
            while (((*a3)(v28, v34) & 1) != 0);
          }
          v35 = v10 - 16;
          if (v10 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)v35;
          a5 = 0;
          *(_OWORD *)v35 = v97;
          continue;
        }
        v15 = 0;
        v96 = *(_OWORD *)a1;
        v16 = *(_QWORD *)a1;
        do
        {
          v17 = (*a3)(*(_QWORD *)&a1[v15 + 16], v16);
          v15 += 16;
        }
        while ((v17 & 1) != 0);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 16)
        {
          do
          {
            if (v18 >= a2)
              break;
            v21 = *((_QWORD *)a2 - 2);
            a2 -= 16;
          }
          while (((*a3)(v21, v16) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *((_QWORD *)a2 - 2);
            a2 -= 16;
          }
          while (!(*a3)(v20, v16));
        }
        v10 = &a1[v15];
        if (v18 < a2)
        {
          v22 = a2;
          do
          {
            v103 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v103;
            do
            {
              v23 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (((*a3)(v23, v16) & 1) != 0);
            do
            {
              v24 = *((_QWORD *)v22 - 2);
              v22 -= 16;
            }
            while (!(*a3)(v24, v16));
          }
          while (v10 < v22);
        }
        v25 = v10 - 16;
        if (v10 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)v25;
        *(_OWORD *)v25 = v96;
        v26 = v18 >= a2;
        a2 = v19;
        if (!v26)
        {
LABEL_29:
          a5 = 0;
          continue;
        }
        {
          if (v27)
            continue;
          goto LABEL_29;
        }
        a2 = v10 - 16;
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unint64_t **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (*v36 < **(_QWORD **)v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), (unint64_t **)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), (unint64_t **)(v8 + 32), (__n128 *)(v8 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (unint64_t **)(v8 + 16);
          v39 = (unint64_t **)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(unint64_t **)(v41 + 16);
                if (*v43 < **(_QWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = v37;
              v78 = a1[2];
              if (*v78 < **a1)
              {
                v79 = a1[3];
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v81 = *(v80 - 4);
                  v80 -= 2;
                }
                while (*v78 < *v81);
                *v80 = v78;
                v80[1] = v79;
              }
              v37 = v77 + 2;
              a1 = v77;
            }
            while (v77 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unint64_t **)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (unint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v86 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_QWORD **)v67 < **(_QWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if ((unint64_t **)v67 == a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 < **(_QWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_QWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (unint64_t *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13;
            do
            {
              v33 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (unint64_t *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((unint64_t **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13;
            do
            {
              v24 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (unint64_t *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((unint64_t **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, (unint64_t **)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (unint64_t **)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unsigned int **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (*v36 < **(_DWORD **)v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), (unsigned int **)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), (unsigned int **)(v8 + 32), (__n128 *)(v8 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (unsigned int **)(v8 + 16);
          v39 = (unsigned int **)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(unsigned int **)(v41 + 16);
                if (*v43 < **(_DWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_DWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = v37;
              v78 = a1[2];
              if (*v78 < **a1)
              {
                v79 = a1[3];
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v81 = *(v80 - 4);
                  v80 -= 2;
                }
                while (*v78 < *v81);
                *v80 = v78;
                v80[1] = v79;
              }
              v37 = v77 + 2;
              a1 = v77;
            }
            while (v77 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unsigned int **)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unsigned int **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (unsigned int **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unsigned int **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v86 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_DWORD **)v67 < **(_DWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if ((unsigned int **)v67 == a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_DWORD **)v67;
                  if (**(_DWORD **)v72 < **(_DWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_DWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unsigned int **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_DWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (unsigned int *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13;
            do
            {
              v33 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (unsigned int *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((unsigned int **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13;
            do
            {
              v24 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (unsigned int *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((unsigned int **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, (unsigned int **)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (unsigned int **)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v86 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v86;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(unsigned __int16 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (unsigned __int16 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v78 = v37;
              v79 = a1[2];
              if (*v79 < **a1)
              {
                v80 = a1[3];
                v81 = v78;
                do
                {
                  *(_OWORD *)v81 = *((_OWORD *)v81 - 1);
                  v82 = *(v81 - 4);
                  v81 -= 2;
                }
                while (*v79 < *v82);
                *v81 = v79;
                v81[1] = v80;
              }
              v37 = v78 + 2;
              a1 = v78;
            }
            while (v78 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v64 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      v64 = v61 <= v62 ? *v52[2] : **v52;
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v64 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v65 = (unint64_t)v9 >> 4;
            do
            {
              v66 = 0;
              v87 = *(_OWORD *)v8;
              v67 = v8;
              do
              {
                v68 = &v67[2 * v66 + 2];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v65 && **v68 < *v68[2])
                {
                  v68 += 2;
                  v69 = v70;
                }
                *(_OWORD *)v67 = *(_OWORD *)v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_OWORD *)v68 = v87;
              }
              else
              {
                *(_OWORD *)v68 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v87;
                v71 = (char *)v68 - (char *)v8 + 16;
                if (v71 >= 17)
                {
                  v72 = (((unint64_t)v71 >> 4) - 2) >> 1;
                  v73 = &v8[2 * v72];
                  v74 = *v68;
                  if (**v73 < **v68)
                  {
                    v75 = v68[1];
                    do
                    {
                      v76 = v68;
                      v68 = v73;
                      *(_OWORD *)v76 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[2 * v72];
                    }
                    while (**v73 < *v74);
                    *v68 = v74;
                    v68[1] = v75;
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v83 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v83;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v85 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v85;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v84;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v86 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v86;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(unsigned __int8 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (unsigned __int8 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v78 = v37;
              v79 = a1[2];
              if (*v79 < **a1)
              {
                v80 = a1[3];
                v81 = v78;
                do
                {
                  *(_OWORD *)v81 = *((_OWORD *)v81 - 1);
                  v82 = *(v81 - 4);
                  v81 -= 2;
                }
                while (*v79 < *v82);
                *v81 = v79;
                v81[1] = v80;
              }
              v37 = v78 + 2;
              a1 = v78;
            }
            while (v78 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v64 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      v64 = v61 <= v62 ? *v52[2] : **v52;
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v64 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v65 = (unint64_t)v9 >> 4;
            do
            {
              v66 = 0;
              v87 = *(_OWORD *)v8;
              v67 = v8;
              do
              {
                v68 = &v67[2 * v66 + 2];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v65 && **v68 < *v68[2])
                {
                  v68 += 2;
                  v69 = v70;
                }
                *(_OWORD *)v67 = *(_OWORD *)v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_OWORD *)v68 = v87;
              }
              else
              {
                *(_OWORD *)v68 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v87;
                v71 = (char *)v68 - (char *)v8 + 16;
                if (v71 >= 17)
                {
                  v72 = (((unint64_t)v71 >> 4) - 2) >> 1;
                  v73 = &v8[2 * v72];
                  v74 = *v68;
                  if (**v73 < **v68)
                  {
                    v75 = v68[1];
                    do
                    {
                      v76 = v68;
                      v68 = v73;
                      *(_OWORD *)v76 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[2 * v72];
                    }
                    while (**v73 < *v74);
                    *v68 = v74;
                    v68[1] = v75;
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v83 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v83;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v85 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v85;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v84;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (uint64_t **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_QWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 < **(_QWORD **)v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)&a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (__n128 *)a2[-1].n128_u64);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_QWORD **)(v41 + 16);
                if (*v43 < **(_QWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *v79 = v79[-1];
                  v80 = (uint64_t *)v79[-2].n128_u64[0];
                  --v79;
                }
                while (*v77 < *v80);
                v79->n128_u64[0] = (unint64_t)v77;
                v79->n128_u64[1] = (unint64_t)v78;
              }
              v37 = v76 + 1;
              a1 = (uint64_t **)v76;
            }
            while (&v76[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (uint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (uint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (uint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_QWORD **)v67 < **(_QWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v85;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 < **(_QWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (uint64_t **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, (uint64_t **)&a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], (uint64_t **)&a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, (uint64_t **)&a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], (uint64_t **)&a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= *(_QWORD *)a2[-1].n128_u64[0])
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= (_QWORD **)a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_QWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v83;
            v32 = *v13;
            do
            {
              v33 = *(uint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (uint64_t *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((uint64_t **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= (uint64_t **)v19)
              break;
            v21 = (_QWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < (uint64_t **)v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v82;
            v23 = *v13;
            do
            {
              v24 = *(uint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (uint64_t *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((uint64_t **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (uint64_t **)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (int **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_DWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 < **(_DWORD **)v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)&a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)(v8 + 32), (__n128 *)a2[-1].n128_u64);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_DWORD **)(v41 + 16);
                if (*v43 < **(_DWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_DWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *v79 = v79[-1];
                  v80 = (int *)v79[-2].n128_u64[0];
                  --v79;
                }
                while (*v77 < *v80);
                v79->n128_u64[0] = (unint64_t)v77;
                v79->n128_u64[1] = (unint64_t)v78;
              }
              v37 = v76 + 1;
              a1 = (int **)v76;
            }
            while (&v76[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (int **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (int **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (int **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_DWORD **)v67 < **(_DWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v85;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_DWORD **)v67;
                  if (**(_DWORD **)v72 < **(_DWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_DWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (int **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, (int **)&a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], (int **)&a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, (int **)&a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], (int **)&a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= *(_DWORD *)a2[-1].n128_u64[0])
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= (_DWORD **)a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_DWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(_DWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_DWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v83;
            v32 = *v13;
            do
            {
              v33 = *(int **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (int *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((int **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= (int **)v19)
              break;
            v21 = (_DWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = (_DWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < (int **)v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v82;
            v23 = *v13;
            do
            {
              v24 = *(int **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (int *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((int **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (int **)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(__int16 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (__int16 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *(_OWORD *)v79 = *((_OWORD *)v79 - 1);
                  v80 = *(v79 - 4);
                  v79 -= 2;
                }
                while (*v77 < *v80);
                *v79 = v77;
                v79[1] = v78;
              }
              v37 = v76 + 2;
              a1 = v76;
            }
            while (v76 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  LOWORD(v54) = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    LOWORD(v54) = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (**v56 <= (__int16)v54)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      LOWORD(v61) = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        LOWORD(v61) = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (*v57 <= (__int16)v61);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = v8;
              do
              {
                v67 = &v66[2 * v65 + 2];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **v67 < *v67[2])
                {
                  v67 += 2;
                  v68 = v69;
                }
                *(_OWORD *)v66 = *(_OWORD *)v67;
                v66 = v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if (v67 == a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v85;
                v70 = (char *)v67 - (char *)v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = &v8[2 * v71];
                  v73 = *v67;
                  if (**v72 < **v67)
                  {
                    v74 = v67[1];
                    do
                    {
                      v75 = v67;
                      v67 = v72;
                      *(_OWORD *)v75 = *(_OWORD *)v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = &v8[2 * v71];
                    }
                    while (**v72 < *v73);
                    *v67 = v73;
                    v67[1] = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v83;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v82;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2 - 2;
  v93 = a2 - 4;
  v94 = a2;
  v91 = a2 - 6;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = v94;
    v10 = (char *)v94 - (char *)v8;
    v11 = ((char *)v94 - (char *)v8) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v33 = v94 - 2;
        if (re::DynamicString::operator<(*(v94 - 2), *v8))
        {
          v98 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v33;
          *(_OWORD *)v33 = v98;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v7);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v8 + 4, v7);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v8 + 4, v8 + 6, v7);
        return;
      default:
        if (v10 <= 383)
        {
          v34 = v8 + 2;
          v36 = v8 == v94 || v34 == v94;
          if ((a4 & 1) != 0)
          {
            if (!v36)
            {
              v37 = 0;
              v38 = v8;
              do
              {
                v39 = v34;
                v40 = v38[2];
                if (re::DynamicString::operator<(v40, *v38))
                {
                  v41 = v38[3];
                  v42 = v37;
                  while (1)
                  {
                    v43 = (char *)v8 + v42;
                    *(_OWORD *)((char *)v8 + v42 + 16) = *(_OWORD *)((char *)v8 + v42);
                    if (!v42)
                      break;
                    v42 -= 16;
                    if ((re::DynamicString::operator<(v40, *((_QWORD *)v43 - 2)) & 1) == 0)
                    {
                      v44 = (uint64_t *)((char *)v8 + v42 + 16);
                      goto LABEL_70;
                    }
                  }
                  v44 = v8;
LABEL_70:
                  *v44 = v40;
                  v44[1] = v41;
                }
                v34 = v39 + 2;
                v37 += 16;
                v38 = v39;
              }
              while (v39 + 2 != v94);
            }
          }
          else if (!v36)
          {
            do
            {
              v83 = v34;
              v84 = a1[2];
              if (re::DynamicString::operator<(v84, *a1))
              {
                v85 = a1[3];
                v86 = v83;
                do
                {
                  v87 = v86 - 2;
                  *(_OWORD *)v86 = *((_OWORD *)v86 - 1);
                  v88 = re::DynamicString::operator<(v84, *(v86 - 4));
                  v86 = v87;
                }
                while ((v88 & 1) != 0);
                *v87 = v84;
                v87[1] = v85;
              }
              v34 = v83 + 2;
              a1 = v83;
            }
            while (v83 + 2 != v94);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != v94)
          {
            v89 = (char *)v94 - (char *)v8;
            v45 = (unint64_t)(v11 - 2) >> 1;
            v46 = v45;
            do
            {
              v47 = v46;
              if (v45 >= v46)
              {
                v48 = (2 * v46) | 1;
                v49 = &a1[2 * v48];
                v50 = 2 * v46 + 2;
                if (v50 >= v11)
                {
                  v56 = *v49;
                }
                else
                {
                  v51 = *v49;
                  v52 = v46;
                  v53 = v49[2];
                  v54 = re::DynamicString::operator<(*v49, v53);
                  v55 = v54 == 0;
                  if (v54)
                    v56 = v53;
                  else
                    v56 = v51;
                  v47 = v52;
                  v45 = (unint64_t)(v11 - 2) >> 1;
                  if (!v55)
                  {
                    v49 += 2;
                    v48 = v50;
                  }
                }
                v57 = &a1[2 * v47];
                v58 = *v57;
                if ((re::DynamicString::operator<(v56, *v57) & 1) == 0)
                {
                  v90 = v57[1];
                  v92 = v47;
                  do
                  {
                    v59 = v57;
                    v57 = v49;
                    *(_OWORD *)v59 = *(_OWORD *)v49;
                    if (v45 < v48)
                      break;
                    v60 = (2 * v48) | 1;
                    v49 = &a1[2 * v60];
                    v61 = 2 * v48 + 2;
                    if (v61 >= v11)
                    {
                      v66 = *v49;
                      v48 = (2 * v48) | 1;
                    }
                    else
                    {
                      v62 = *v49;
                      v63 = v49[2];
                      v64 = re::DynamicString::operator<(*v49, v63);
                      v65 = v64 == 0;
                      if (v64)
                        v66 = v63;
                      else
                        v66 = v62;
                      if (!v65)
                        v49 += 2;
                      v45 = (unint64_t)(v11 - 2) >> 1;
                      v48 = v65 ? v60 : v61;
                    }
                  }
                  while (!re::DynamicString::operator<(v66, v58));
                  v47 = v92;
                  *v57 = v58;
                  v57[1] = v90;
                }
              }
              v46 = v47 - 1;
            }
            while (v47);
            v67 = v89 >> 4;
            v68 = v94;
            do
            {
              v69 = 0;
              v99 = *(_OWORD *)a1;
              v70 = v67 - 2;
              if (v67 < 2)
                v70 = v67 - 1;
              v71 = v70 >> 1;
              v72 = a1;
              do
              {
                v73 = &v72[2 * v69 + 2];
                v74 = (2 * v69) | 1;
                v75 = 2 * v69 + 2;
                if (v75 < v67 && re::DynamicString::operator<(*v73, v72[2 * v69 + 4]))
                {
                  v73 += 2;
                  v74 = v75;
                }
                *(_OWORD *)v72 = *(_OWORD *)v73;
                v72 = v73;
                v69 = v74;
              }
              while (v74 <= v71);
              v68 -= 2;
              if (v73 == v68)
              {
                *(_OWORD *)v73 = v99;
              }
              else
              {
                *(_OWORD *)v73 = *(_OWORD *)v68;
                *(_OWORD *)v68 = v99;
                v76 = (char *)v73 - (char *)a1 + 16;
                if (v76 >= 17)
                {
                  v77 = (((unint64_t)v76 >> 4) - 2) >> 1;
                  v78 = &a1[2 * v77];
                  v79 = *v73;
                  if (re::DynamicString::operator<(*v78, *v73))
                  {
                    v80 = v73[1];
                    do
                    {
                      v81 = v73;
                      v73 = v78;
                      *(_OWORD *)v81 = *(_OWORD *)v78;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = &a1[2 * v77];
                    }
                    while ((re::DynamicString::operator<(*v78, v79) & 1) != 0);
                    *v73 = v79;
                    v73[1] = v80;
                  }
                }
              }
            }
            while (v67-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v8[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v13, v8, v7);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v13, v7);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8 + 2, v13 - 2, v93);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8 + 4, &v8[2 * v12 + 2], v91);
          v9 = v94;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v13 - 2, v13, &v8[2 * v12 + 2]);
          v95 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v95;
        }
        --a3;
        v14 = *v8;
        if ((a4 & 1) == 0 && (re::DynamicString::operator<(*(v8 - 2), *v8) & 1) == 0)
        {
          v26 = v8[1];
          if ((re::DynamicString::operator<(v14, *v7) & 1) != 0)
          {
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while ((re::DynamicString::operator<(v14, v27) & 1) == 0);
          }
          else
          {
            v28 = v8 + 2;
            do
            {
              v8 = v28;
              if (v28 >= v94)
                break;
              v28 += 2;
            }
            while (!re::DynamicString::operator<(v14, *v8));
          }
          v29 = v94;
          if (v8 < v94)
          {
            v29 = v94;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while ((re::DynamicString::operator<(v14, v30) & 1) != 0);
          }
          while (v8 < v29)
          {
            v97 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v97;
            do
            {
              v31 = v8[2];
              v8 += 2;
            }
            while (!re::DynamicString::operator<(v14, v31));
            do
            {
              v32 = *(v29 - 2);
              v29 -= 2;
            }
            while ((re::DynamicString::operator<(v14, v32) & 1) != 0);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v14;
          *(v8 - 1) = v26;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = re::DynamicString::operator<(a1[v15 + 2], v14);
          v15 += 2;
        }
        while ((v17 & 1) != 0);
        v18 = &a1[v15];
        v19 = v9;
        if (v15 == 2)
        {
          v19 = v9;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while ((re::DynamicString::operator<(v21, v14) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (!re::DynamicString::operator<(v20, v14));
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v96 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v96;
            do
            {
              v23 = v8[2];
              v8 += 2;
            }
            while ((re::DynamicString::operator<(v23, v14) & 1) != 0);
            do
            {
              v24 = *(v22 - 2);
              v22 -= 2;
            }
            while (!re::DynamicString::operator<(v24, v14));
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v14;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v25 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v94))
        {
          if (v25)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v25)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_QWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 >> 1 < **(_QWORD **)v8 >> 1)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (_QWORD **)(v8 + 16), &a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (__n128 *)(v8 + 16), (__n128 *)(v8 + 32), a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (__n128 *)(v8 + 16), (__n128 *)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_QWORD **)(v41 + 16);
                if (*v43 >> 1 < **(_QWORD **)v41 >> 1)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >> 1 >= v46 >> 1)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = (uint64_t)v37;
              v78 = *(_QWORD **)(a1 + 16);
              if (*v78 >> 1 < **(_QWORD **)a1 >> 1)
              {
                v79 = *(_QWORD *)(a1 + 24);
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *(_OWORD *)(v80 - 16);
                  v81 = *(_QWORD **)(v80 - 32);
                  v80 -= 16;
                }
                while (*v78 >> 1 < *v81 >> 1);
                *(_QWORD *)v80 = v78;
                *(_QWORD *)(v80 + 8) = v79;
              }
              v37 = (__n128 *)(v77 + 16);
              a1 = v77;
            }
            while ((__n128 *)(v77 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52 >> 1;
                  v54 = *v52[2];
                  v55 = v53 >= v54 >> 1;
                  if (v53 < v54 >> 1)
                    v52 += 2;
                  else
                    v54 = **v52;
                  if (!v55)
                    v51 = 2 * v50 + 2;
                }
                v56 = (unint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >> 1 >= **v56 >> 1)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      if (v61 >> 1 >= *v52[2] >> 1)
                      {
                        v51 = v60;
                      }
                      else
                      {
                        v61 = *v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v61 >> 1 >= *v57 >> 1);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v62 = (unint64_t)v9 >> 4;
            do
            {
              v63 = 0;
              v86 = *(_OWORD *)v8;
              v64 = v62 - 2;
              if (v62 < 2)
                v64 = v62 - 1;
              v65 = v64 >> 1;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v63 + 1];
                v68 = (2 * v63) | 1;
                v69 = 2 * v63 + 2;
                if (v69 < v62 && **(_QWORD **)v67 >> 1 < **(_QWORD **)(v67 + 16) >> 1)
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v63 = v68;
              }
              while (v68 <= v65);
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 >> 1 < **(_QWORD **)v67 >> 1)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 >> 1 < *v73 >> 1);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v62-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (__int128 *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 16 * (v10 >> 1)), (_QWORD **)a1, &a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)a1, (_QWORD **)(a1 + 16 * (v10 >> 1)), &a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 16), (_QWORD **)v12 - 2, &a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 32), (_QWORD **)(a1 + 16 + 16 * v11), &a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v12 - 1, (_QWORD **)v12, (_QWORD **)(a1 + 16 + 16 * v11));
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v82;
        }
        --a3;
        v13 = *(_QWORD **)a1;
        v14 = **(_QWORD **)a1 >> 1;
        if ((a4 & 1) == 0 && v14 <= **(_QWORD **)(a1 - 16) >> 1)
        {
          if (v14 >= *(_QWORD *)a2[-1].n128_u64[0] >> 1)
          {
            v28 = a1 + 16;
            do
            {
              v8 = v28;
              if (v28 >= (unint64_t)a2)
                break;
              v28 += 16;
            }
            while (v14 >= **(_QWORD **)v8 >> 1);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27 >> 1);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30 >> 1);
          }
          v31 = *(_QWORD *)(a1 + 8);
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13 >> 1;
            do
            {
              v33 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33 >> 1);
            do
              v34 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34 >> 1);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 8);
        do
        {
          v17 = **(_QWORD **)(a1 + v15 + 16);
          v15 += 16;
        }
        while (v14 > v17 >> 1);
        v18 = a1 + v15;
        v19 = (__int128 *)a2;
        if (v15 == 16)
        {
          v19 = (__int128 *)a2;
          do
          {
            if (v18 >= (unint64_t)v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19-- - 2);
          }
          while (v14 <= *v21 >> 1);
        }
        else
        {
          do
            v20 = (_QWORD *)*((_QWORD *)v19-- - 2);
          while (v14 <= *v20 >> 1);
        }
        v8 = a1 + v15;
        if (v18 < (unint64_t)v19)
        {
          v22 = v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13 >> 1;
            do
            {
              v24 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v23 > *v24 >> 1);
            do
              v25 = (_QWORD *)*((_QWORD *)v22-- - 2);
            while (v23 <= *v25 >> 1);
          }
          while (v8 < (unint64_t)v22);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (unint64_t)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v85 = a2 - 32;
  v87 = a2 - 16;
  v83 = a2 - 48;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = (a2 - v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v37 = *((_QWORD *)a2 - 2);
        v36 = a2 - 16;
        if ((*a3)(v37, *(_QWORD *)a1))
        {
          v98 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v36;
          *(_OWORD *)v36 = v98;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, v87, a3);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, v87, a3);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6, v87, a3);
        return;
      default:
        if (v11 <= 383)
        {
          v38 = a1 + 16;
          v40 = a1 == a2 || v38 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = a1;
              do
              {
                v43 = *((_QWORD *)v42 + 2);
                v44 = *(_QWORD *)v42;
                v42 = v38;
                if ((*a3)(v43, v44))
                {
                  v92 = *(_OWORD *)v42;
                  v45 = *(_QWORD *)v42;
                  v46 = v41;
                  while (1)
                  {
                    *(_OWORD *)&a1[v46 + 16] = *(_OWORD *)&a1[v46];
                    if (!v46)
                      break;
                    v47 = (*a3)(v45, *(_QWORD *)&a1[v46 - 16]);
                    v46 -= 16;
                    if ((v47 & 1) == 0)
                    {
                      v48 = &a1[v46 + 16];
                      goto LABEL_71;
                    }
                  }
                  v48 = a1;
LABEL_71:
                  *(_OWORD *)v48 = v92;
                }
                v38 = v42 + 16;
                v41 += 16;
              }
              while (v42 + 16 != a2);
            }
          }
          else if (!v40)
          {
            do
            {
              v77 = *((_QWORD *)a1 + 2);
              v78 = *(_QWORD *)a1;
              a1 = v38;
              if ((*a3)(v77, v78))
              {
                v94 = *(_OWORD *)a1;
                v79 = *(_QWORD *)a1;
                v80 = a1;
                do
                {
                  v81 = v80 - 16;
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v82 = (*a3)(v79, *((_QWORD *)v80 - 4));
                  v80 = v81;
                }
                while ((v82 & 1) != 0);
                *(_OWORD *)v81 = v94;
              }
              v38 = a1 + 16;
            }
            while (a1 + 16 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v84 = v11;
            v86 = a2;
            v49 = (unint64_t)(v12 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &a1[16 * v52];
                if (2 * v50 + 2 < v12 && (*a3)(*(_QWORD *)v53, *((_QWORD *)v53 + 2)))
                {
                  v53 += 16;
                  v52 = 2 * v51 + 2;
                }
                v54 = &a1[16 * v51];
                if (((*a3)(*(_QWORD *)v53, *(_QWORD *)v54) & 1) == 0)
                {
                  v93 = v51;
                  v88 = *(_OWORD *)v54;
                  v55 = *(_QWORD *)v54;
                  do
                  {
                    v56 = v54;
                    v54 = v53;
                    *(_OWORD *)v56 = *(_OWORD *)v53;
                    if (v49 < v52)
                      break;
                    v57 = (2 * v52) | 1;
                    v53 = &a1[16 * v57];
                    v58 = 2 * v52 + 2;
                    if (v58 < v12 && (*a3)(*(_QWORD *)v53, *((_QWORD *)v53 + 2)))
                    {
                      v53 += 16;
                      v57 = v58;
                    }
                    v52 = v57;
                  }
                  while (!(*a3)(*(_QWORD *)v53, v55));
                  *(_OWORD *)v54 = v88;
                  v51 = v93;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            v59 = v86;
            v60 = v84 >> 4;
            do
            {
              v61 = 0;
              v99 = *(_OWORD *)a1;
              v62 = v60 - 2;
              if (v60 < 2)
                v62 = v60 - 1;
              v63 = v62 >> 1;
              v64 = a1;
              do
              {
                v65 = (uint64_t *)&v64[16 * v61 + 16];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v60 && (*a3)(*v65, *(_QWORD *)&v64[16 * v61 + 32]))
                {
                  v65 += 2;
                  v66 = v67;
                }
                *(_OWORD *)v64 = *(_OWORD *)v65;
                v64 = (char *)v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v68 = (uint64_t *)(v59 - 16);
              if (v65 == v68)
              {
                v69 = v68;
                *(_OWORD *)v65 = v99;
                v71 = v60 - 1;
              }
              else
              {
                *(_OWORD *)v65 = *(_OWORD *)v68;
                v69 = v68;
                *(_OWORD *)v68 = v99;
                v70 = (char *)v65 - a1 + 16;
                v71 = v60 - 1;
                if (v70 >= 17)
                {
                  v72 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v73 = &a1[16 * v72];
                  if ((*a3)(*(_QWORD *)v73, *v65))
                  {
                    v89 = *(_OWORD *)v65;
                    v74 = *v65;
                    do
                    {
                      v75 = v65;
                      v65 = (uint64_t *)v73;
                      *(_OWORD *)v75 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &a1[16 * v72];
                    }
                    while (((*a3)(*(_QWORD *)v73, v74) & 1) != 0);
                    *(_OWORD *)v65 = v89;
                  }
                }
              }
              v76 = v60 <= 2;
              v60 = v71;
              v59 = (char *)v69;
            }
            while (!v76);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &a1[16 * ((unint64_t)v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v14, a1, v87, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v14, v87, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)a1 + 2, (_QWORD *)v14 - 2, v85, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)a1 + 4, &a1[16 * v13 + 16], v83, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)v14 - 2, v14, &a1[16 * v13 + 16], a3);
          v95 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v95;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)(*((_QWORD *)a1 - 2), *(_QWORD *)a1) & 1) == 0)
        {
          v91 = *(_OWORD *)a1;
          v28 = *(_QWORD *)a1;
          if (((*a3)(*(_QWORD *)a1, *(_QWORD *)v87) & 1) != 0)
          {
            v10 = a1;
            do
            {
              v29 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (((*a3)(v28, v29) & 1) == 0);
          }
          else
          {
            v30 = a1 + 16;
            do
            {
              v10 = v30;
              if (v30 >= a2)
                break;
              v30 += 16;
            }
            while (!(*a3)(v28, *(_QWORD *)v10));
          }
          v31 = a2;
          if (v10 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *((_QWORD *)v31 - 2);
              v31 -= 16;
            }
            while (((*a3)(v28, v32) & 1) != 0);
          }
          while (v10 < v31)
          {
            v97 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v31;
            *(_OWORD *)v31 = v97;
            do
            {
              v33 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (!(*a3)(v28, v33));
            do
            {
              v34 = *((_QWORD *)v31 - 2);
              v31 -= 16;
            }
            while (((*a3)(v28, v34) & 1) != 0);
          }
          v35 = v10 - 16;
          if (v10 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)v35;
          a5 = 0;
          *(_OWORD *)v35 = v91;
          continue;
        }
        v15 = 0;
        v90 = *(_OWORD *)a1;
        v16 = *(_QWORD *)a1;
        do
        {
          v17 = (*a3)(*(_QWORD *)&a1[v15 + 16], v16);
          v15 += 16;
        }
        while ((v17 & 1) != 0);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 16)
        {
          do
          {
            if (v18 >= a2)
              break;
            v21 = *((_QWORD *)a2 - 2);
            a2 -= 16;
          }
          while (((*a3)(v21, v16) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *((_QWORD *)a2 - 2);
            a2 -= 16;
          }
          while (!(*a3)(v20, v16));
        }
        v10 = &a1[v15];
        if (v18 < a2)
        {
          v22 = a2;
          do
          {
            v96 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v96;
            do
            {
              v23 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (((*a3)(v23, v16) & 1) != 0);
            do
            {
              v24 = *((_QWORD *)v22 - 2);
              v22 -= 16;
            }
            while (!(*a3)(v24, v16));
          }
          while (v10 < v22);
        }
        v25 = v10 - 16;
        if (v10 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)v25;
        *(_OWORD *)v25 = v90;
        v26 = v18 >= a2;
        a2 = v19;
        if (!v26)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, v10 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v10 - 16, a3);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v19, a3))
        {
          if (v27)
            continue;
          goto LABEL_29;
        }
        a2 = v10 - 16;
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unint64_t **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (*v36 < **(_QWORD **)v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), (unint64_t **)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), (unint64_t **)(v8 + 32), (__n128 *)(v8 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (unint64_t **)(v8 + 16);
          v39 = (unint64_t **)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(unint64_t **)(v41 + 16);
                if (*v43 < **(_QWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = v37;
              v78 = a1[2];
              if (*v78 < **a1)
              {
                v79 = a1[3];
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v81 = *(v80 - 4);
                  v80 -= 2;
                }
                while (*v78 < *v81);
                *v80 = v78;
                v80[1] = v79;
              }
              v37 = v77 + 2;
              a1 = v77;
            }
            while (v77 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unint64_t **)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (unint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v86 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_QWORD **)v67 < **(_QWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if ((unint64_t **)v67 == a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 < **(_QWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_QWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (unint64_t *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13;
            do
            {
              v33 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (unint64_t *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((unint64_t **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13;
            do
            {
              v24 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (unint64_t *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((unint64_t **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, (unint64_t **)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (unint64_t **)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unsigned int **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (*v36 < **(_DWORD **)v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), (unsigned int **)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), (unsigned int **)(v8 + 32), (__n128 *)(v8 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (unsigned int **)(v8 + 16);
          v39 = (unsigned int **)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(unsigned int **)(v41 + 16);
                if (*v43 < **(_DWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_DWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = v37;
              v78 = a1[2];
              if (*v78 < **a1)
              {
                v79 = a1[3];
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v81 = *(v80 - 4);
                  v80 -= 2;
                }
                while (*v78 < *v81);
                *v80 = v78;
                v80[1] = v79;
              }
              v37 = v77 + 2;
              a1 = v77;
            }
            while (v77 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unsigned int **)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unsigned int **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (unsigned int **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unsigned int **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v86 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_DWORD **)v67 < **(_DWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if ((unsigned int **)v67 == a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_DWORD **)v67;
                  if (**(_DWORD **)v72 < **(_DWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_DWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unsigned int **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_DWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (unsigned int *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13;
            do
            {
              v33 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (unsigned int *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((unsigned int **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13;
            do
            {
              v24 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (unsigned int *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((unsigned int **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, (unsigned int **)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (unsigned int **)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v86 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v86;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(unsigned __int16 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (unsigned __int16 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v78 = v37;
              v79 = a1[2];
              if (*v79 < **a1)
              {
                v80 = a1[3];
                v81 = v78;
                do
                {
                  *(_OWORD *)v81 = *((_OWORD *)v81 - 1);
                  v82 = *(v81 - 4);
                  v81 -= 2;
                }
                while (*v79 < *v82);
                *v81 = v79;
                v81[1] = v80;
              }
              v37 = v78 + 2;
              a1 = v78;
            }
            while (v78 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v64 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      v64 = v61 <= v62 ? *v52[2] : **v52;
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v64 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v65 = (unint64_t)v9 >> 4;
            do
            {
              v66 = 0;
              v87 = *(_OWORD *)v8;
              v67 = v8;
              do
              {
                v68 = &v67[2 * v66 + 2];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v65 && **v68 < *v68[2])
                {
                  v68 += 2;
                  v69 = v70;
                }
                *(_OWORD *)v67 = *(_OWORD *)v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_OWORD *)v68 = v87;
              }
              else
              {
                *(_OWORD *)v68 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v87;
                v71 = (char *)v68 - (char *)v8 + 16;
                if (v71 >= 17)
                {
                  v72 = (((unint64_t)v71 >> 4) - 2) >> 1;
                  v73 = &v8[2 * v72];
                  v74 = *v68;
                  if (**v73 < **v68)
                  {
                    v75 = v68[1];
                    do
                    {
                      v76 = v68;
                      v68 = v73;
                      *(_OWORD *)v76 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[2 * v72];
                    }
                    while (**v73 < *v74);
                    *v68 = v74;
                    v68[1] = v75;
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v83 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v83;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v85 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v85;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v84;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v86 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v86;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(unsigned __int8 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (unsigned __int8 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v78 = v37;
              v79 = a1[2];
              if (*v79 < **a1)
              {
                v80 = a1[3];
                v81 = v78;
                do
                {
                  *(_OWORD *)v81 = *((_OWORD *)v81 - 1);
                  v82 = *(v81 - 4);
                  v81 -= 2;
                }
                while (*v79 < *v82);
                *v81 = v79;
                v81[1] = v80;
              }
              v37 = v78 + 2;
              a1 = v78;
            }
            while (v78 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v64 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      v64 = v61 <= v62 ? *v52[2] : **v52;
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v64 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v65 = (unint64_t)v9 >> 4;
            do
            {
              v66 = 0;
              v87 = *(_OWORD *)v8;
              v67 = v8;
              do
              {
                v68 = &v67[2 * v66 + 2];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v65 && **v68 < *v68[2])
                {
                  v68 += 2;
                  v69 = v70;
                }
                *(_OWORD *)v67 = *(_OWORD *)v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_OWORD *)v68 = v87;
              }
              else
              {
                *(_OWORD *)v68 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v87;
                v71 = (char *)v68 - (char *)v8 + 16;
                if (v71 >= 17)
                {
                  v72 = (((unint64_t)v71 >> 4) - 2) >> 1;
                  v73 = &v8[2 * v72];
                  v74 = *v68;
                  if (**v73 < **v68)
                  {
                    v75 = v68[1];
                    do
                    {
                      v76 = v68;
                      v68 = v73;
                      *(_OWORD *)v76 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[2 * v72];
                    }
                    while (**v73 < *v74);
                    *v68 = v74;
                    v68[1] = v75;
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v83 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v83;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v85 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v85;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v84;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (uint64_t **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_QWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 < **(_QWORD **)v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)&a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (__n128 *)a2[-1].n128_u64);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_QWORD **)(v41 + 16);
                if (*v43 < **(_QWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *v79 = v79[-1];
                  v80 = (uint64_t *)v79[-2].n128_u64[0];
                  --v79;
                }
                while (*v77 < *v80);
                v79->n128_u64[0] = (unint64_t)v77;
                v79->n128_u64[1] = (unint64_t)v78;
              }
              v37 = v76 + 1;
              a1 = (uint64_t **)v76;
            }
            while (&v76[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (uint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (uint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (uint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_QWORD **)v67 < **(_QWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v85;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 < **(_QWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (uint64_t **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, (uint64_t **)&a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], (uint64_t **)&a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, (uint64_t **)&a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], (uint64_t **)&a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= *(_QWORD *)a2[-1].n128_u64[0])
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= (_QWORD **)a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_QWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v83;
            v32 = *v13;
            do
            {
              v33 = *(uint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (uint64_t *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((uint64_t **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= (uint64_t **)v19)
              break;
            v21 = (_QWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < (uint64_t **)v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v82;
            v23 = *v13;
            do
            {
              v24 = *(uint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (uint64_t *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((uint64_t **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (uint64_t **)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (int **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_DWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 < **(_DWORD **)v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)&a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)(v8 + 32), (__n128 *)a2[-1].n128_u64);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_DWORD **)(v41 + 16);
                if (*v43 < **(_DWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_DWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *v79 = v79[-1];
                  v80 = (int *)v79[-2].n128_u64[0];
                  --v79;
                }
                while (*v77 < *v80);
                v79->n128_u64[0] = (unint64_t)v77;
                v79->n128_u64[1] = (unint64_t)v78;
              }
              v37 = v76 + 1;
              a1 = (int **)v76;
            }
            while (&v76[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (int **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (int **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (int **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_DWORD **)v67 < **(_DWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v85;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_DWORD **)v67;
                  if (**(_DWORD **)v72 < **(_DWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_DWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (int **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, (int **)&a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], (int **)&a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, (int **)&a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], (int **)&a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= *(_DWORD *)a2[-1].n128_u64[0])
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= (_DWORD **)a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_DWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(_DWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_DWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v83;
            v32 = *v13;
            do
            {
              v33 = *(int **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (int *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((int **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= (int **)v19)
              break;
            v21 = (_DWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = (_DWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < (int **)v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v82;
            v23 = *v13;
            do
            {
              v24 = *(int **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (int *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((int **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (int **)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(__int16 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (__int16 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *(_OWORD *)v79 = *((_OWORD *)v79 - 1);
                  v80 = *(v79 - 4);
                  v79 -= 2;
                }
                while (*v77 < *v80);
                *v79 = v77;
                v79[1] = v78;
              }
              v37 = v76 + 2;
              a1 = v76;
            }
            while (v76 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  LOWORD(v54) = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    LOWORD(v54) = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (**v56 <= (__int16)v54)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      LOWORD(v61) = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        LOWORD(v61) = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (*v57 <= (__int16)v61);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = v8;
              do
              {
                v67 = &v66[2 * v65 + 2];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **v67 < *v67[2])
                {
                  v67 += 2;
                  v68 = v69;
                }
                *(_OWORD *)v66 = *(_OWORD *)v67;
                v66 = v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if (v67 == a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v85;
                v70 = (char *)v67 - (char *)v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = &v8[2 * v71];
                  v73 = *v67;
                  if (**v72 < **v67)
                  {
                    v74 = v67[1];
                    do
                    {
                      v75 = v67;
                      v67 = v72;
                      *(_OWORD *)v75 = *(_OWORD *)v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = &v8[2 * v71];
                    }
                    while (**v72 < *v73);
                    *v67 = v73;
                    v67[1] = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v83;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v82;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2 - 2;
  v93 = a2 - 4;
  v94 = a2;
  v91 = a2 - 6;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = v94;
    v10 = (char *)v94 - (char *)v8;
    v11 = ((char *)v94 - (char *)v8) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v33 = v94 - 2;
        if (re::DynamicString::operator<(*(v94 - 2), *v8))
        {
          v98 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v33;
          *(_OWORD *)v33 = v98;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v7);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v8 + 4, v7);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v8 + 4, v8 + 6, v7);
        return;
      default:
        if (v10 <= 383)
        {
          v34 = v8 + 2;
          v36 = v8 == v94 || v34 == v94;
          if ((a4 & 1) != 0)
          {
            if (!v36)
            {
              v37 = 0;
              v38 = v8;
              do
              {
                v39 = v34;
                v40 = v38[2];
                if (re::DynamicString::operator<(v40, *v38))
                {
                  v41 = v38[3];
                  v42 = v37;
                  while (1)
                  {
                    v43 = (char *)v8 + v42;
                    *(_OWORD *)((char *)v8 + v42 + 16) = *(_OWORD *)((char *)v8 + v42);
                    if (!v42)
                      break;
                    v42 -= 16;
                    if ((re::DynamicString::operator<(v40, *((_QWORD *)v43 - 2)) & 1) == 0)
                    {
                      v44 = (uint64_t *)((char *)v8 + v42 + 16);
                      goto LABEL_70;
                    }
                  }
                  v44 = v8;
LABEL_70:
                  *v44 = v40;
                  v44[1] = v41;
                }
                v34 = v39 + 2;
                v37 += 16;
                v38 = v39;
              }
              while (v39 + 2 != v94);
            }
          }
          else if (!v36)
          {
            do
            {
              v83 = v34;
              v84 = a1[2];
              if (re::DynamicString::operator<(v84, *a1))
              {
                v85 = a1[3];
                v86 = v83;
                do
                {
                  v87 = v86 - 2;
                  *(_OWORD *)v86 = *((_OWORD *)v86 - 1);
                  v88 = re::DynamicString::operator<(v84, *(v86 - 4));
                  v86 = v87;
                }
                while ((v88 & 1) != 0);
                *v87 = v84;
                v87[1] = v85;
              }
              v34 = v83 + 2;
              a1 = v83;
            }
            while (v83 + 2 != v94);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != v94)
          {
            v89 = (char *)v94 - (char *)v8;
            v45 = (unint64_t)(v11 - 2) >> 1;
            v46 = v45;
            do
            {
              v47 = v46;
              if (v45 >= v46)
              {
                v48 = (2 * v46) | 1;
                v49 = &a1[2 * v48];
                v50 = 2 * v46 + 2;
                if (v50 >= v11)
                {
                  v56 = *v49;
                }
                else
                {
                  v51 = *v49;
                  v52 = v46;
                  v53 = v49[2];
                  v54 = re::DynamicString::operator<(*v49, v53);
                  v55 = v54 == 0;
                  if (v54)
                    v56 = v53;
                  else
                    v56 = v51;
                  v47 = v52;
                  v45 = (unint64_t)(v11 - 2) >> 1;
                  if (!v55)
                  {
                    v49 += 2;
                    v48 = v50;
                  }
                }
                v57 = &a1[2 * v47];
                v58 = *v57;
                if ((re::DynamicString::operator<(v56, *v57) & 1) == 0)
                {
                  v90 = v57[1];
                  v92 = v47;
                  do
                  {
                    v59 = v57;
                    v57 = v49;
                    *(_OWORD *)v59 = *(_OWORD *)v49;
                    if (v45 < v48)
                      break;
                    v60 = (2 * v48) | 1;
                    v49 = &a1[2 * v60];
                    v61 = 2 * v48 + 2;
                    if (v61 >= v11)
                    {
                      v66 = *v49;
                      v48 = (2 * v48) | 1;
                    }
                    else
                    {
                      v62 = *v49;
                      v63 = v49[2];
                      v64 = re::DynamicString::operator<(*v49, v63);
                      v65 = v64 == 0;
                      if (v64)
                        v66 = v63;
                      else
                        v66 = v62;
                      if (!v65)
                        v49 += 2;
                      v45 = (unint64_t)(v11 - 2) >> 1;
                      v48 = v65 ? v60 : v61;
                    }
                  }
                  while (!re::DynamicString::operator<(v66, v58));
                  v47 = v92;
                  *v57 = v58;
                  v57[1] = v90;
                }
              }
              v46 = v47 - 1;
            }
            while (v47);
            v67 = v89 >> 4;
            v68 = v94;
            do
            {
              v69 = 0;
              v99 = *(_OWORD *)a1;
              v70 = v67 - 2;
              if (v67 < 2)
                v70 = v67 - 1;
              v71 = v70 >> 1;
              v72 = a1;
              do
              {
                v73 = &v72[2 * v69 + 2];
                v74 = (2 * v69) | 1;
                v75 = 2 * v69 + 2;
                if (v75 < v67 && re::DynamicString::operator<(*v73, v72[2 * v69 + 4]))
                {
                  v73 += 2;
                  v74 = v75;
                }
                *(_OWORD *)v72 = *(_OWORD *)v73;
                v72 = v73;
                v69 = v74;
              }
              while (v74 <= v71);
              v68 -= 2;
              if (v73 == v68)
              {
                *(_OWORD *)v73 = v99;
              }
              else
              {
                *(_OWORD *)v73 = *(_OWORD *)v68;
                *(_OWORD *)v68 = v99;
                v76 = (char *)v73 - (char *)a1 + 16;
                if (v76 >= 17)
                {
                  v77 = (((unint64_t)v76 >> 4) - 2) >> 1;
                  v78 = &a1[2 * v77];
                  v79 = *v73;
                  if (re::DynamicString::operator<(*v78, *v73))
                  {
                    v80 = v73[1];
                    do
                    {
                      v81 = v73;
                      v73 = v78;
                      *(_OWORD *)v81 = *(_OWORD *)v78;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = &a1[2 * v77];
                    }
                    while ((re::DynamicString::operator<(*v78, v79) & 1) != 0);
                    *v73 = v79;
                    v73[1] = v80;
                  }
                }
              }
            }
            while (v67-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v8[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v13, v8, v7);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v13, v7);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8 + 2, v13 - 2, v93);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8 + 4, &v8[2 * v12 + 2], v91);
          v9 = v94;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v13 - 2, v13, &v8[2 * v12 + 2]);
          v95 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v95;
        }
        --a3;
        v14 = *v8;
        if ((a4 & 1) == 0 && (re::DynamicString::operator<(*(v8 - 2), *v8) & 1) == 0)
        {
          v26 = v8[1];
          if ((re::DynamicString::operator<(v14, *v7) & 1) != 0)
          {
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while ((re::DynamicString::operator<(v14, v27) & 1) == 0);
          }
          else
          {
            v28 = v8 + 2;
            do
            {
              v8 = v28;
              if (v28 >= v94)
                break;
              v28 += 2;
            }
            while (!re::DynamicString::operator<(v14, *v8));
          }
          v29 = v94;
          if (v8 < v94)
          {
            v29 = v94;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while ((re::DynamicString::operator<(v14, v30) & 1) != 0);
          }
          while (v8 < v29)
          {
            v97 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v97;
            do
            {
              v31 = v8[2];
              v8 += 2;
            }
            while (!re::DynamicString::operator<(v14, v31));
            do
            {
              v32 = *(v29 - 2);
              v29 -= 2;
            }
            while ((re::DynamicString::operator<(v14, v32) & 1) != 0);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v14;
          *(v8 - 1) = v26;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = re::DynamicString::operator<(a1[v15 + 2], v14);
          v15 += 2;
        }
        while ((v17 & 1) != 0);
        v18 = &a1[v15];
        v19 = v9;
        if (v15 == 2)
        {
          v19 = v9;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while ((re::DynamicString::operator<(v21, v14) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (!re::DynamicString::operator<(v20, v14));
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v96 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v96;
            do
            {
              v23 = v8[2];
              v8 += 2;
            }
            while ((re::DynamicString::operator<(v23, v14) & 1) != 0);
            do
            {
              v24 = *(v22 - 2);
              v22 -= 2;
            }
            while (!re::DynamicString::operator<(v24, v14));
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v14;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v25 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v94))
        {
          if (v25)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v25)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_QWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 >> 1 < **(_QWORD **)v8 >> 1)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (_QWORD **)(v8 + 16), &a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (__n128 *)(v8 + 16), (__n128 *)(v8 + 32), a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (__n128 *)(v8 + 16), (__n128 *)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_QWORD **)(v41 + 16);
                if (*v43 >> 1 < **(_QWORD **)v41 >> 1)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >> 1 >= v46 >> 1)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = (uint64_t)v37;
              v78 = *(_QWORD **)(a1 + 16);
              if (*v78 >> 1 < **(_QWORD **)a1 >> 1)
              {
                v79 = *(_QWORD *)(a1 + 24);
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *(_OWORD *)(v80 - 16);
                  v81 = *(_QWORD **)(v80 - 32);
                  v80 -= 16;
                }
                while (*v78 >> 1 < *v81 >> 1);
                *(_QWORD *)v80 = v78;
                *(_QWORD *)(v80 + 8) = v79;
              }
              v37 = (__n128 *)(v77 + 16);
              a1 = v77;
            }
            while ((__n128 *)(v77 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52 >> 1;
                  v54 = *v52[2];
                  v55 = v53 >= v54 >> 1;
                  if (v53 < v54 >> 1)
                    v52 += 2;
                  else
                    v54 = **v52;
                  if (!v55)
                    v51 = 2 * v50 + 2;
                }
                v56 = (unint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >> 1 >= **v56 >> 1)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      if (v61 >> 1 >= *v52[2] >> 1)
                      {
                        v51 = v60;
                      }
                      else
                      {
                        v61 = *v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v61 >> 1 >= *v57 >> 1);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v62 = (unint64_t)v9 >> 4;
            do
            {
              v63 = 0;
              v86 = *(_OWORD *)v8;
              v64 = v62 - 2;
              if (v62 < 2)
                v64 = v62 - 1;
              v65 = v64 >> 1;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v63 + 1];
                v68 = (2 * v63) | 1;
                v69 = 2 * v63 + 2;
                if (v69 < v62 && **(_QWORD **)v67 >> 1 < **(_QWORD **)(v67 + 16) >> 1)
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v63 = v68;
              }
              while (v68 <= v65);
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 >> 1 < **(_QWORD **)v67 >> 1)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 >> 1 < *v73 >> 1);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v62-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (__int128 *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 16 * (v10 >> 1)), (_QWORD **)a1, &a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)a1, (_QWORD **)(a1 + 16 * (v10 >> 1)), &a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 16), (_QWORD **)v12 - 2, &a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 32), (_QWORD **)(a1 + 16 + 16 * v11), &a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v12 - 1, (_QWORD **)v12, (_QWORD **)(a1 + 16 + 16 * v11));
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v82;
        }
        --a3;
        v13 = *(_QWORD **)a1;
        v14 = **(_QWORD **)a1 >> 1;
        if ((a4 & 1) == 0 && v14 <= **(_QWORD **)(a1 - 16) >> 1)
        {
          if (v14 >= *(_QWORD *)a2[-1].n128_u64[0] >> 1)
          {
            v28 = a1 + 16;
            do
            {
              v8 = v28;
              if (v28 >= (unint64_t)a2)
                break;
              v28 += 16;
            }
            while (v14 >= **(_QWORD **)v8 >> 1);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27 >> 1);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30 >> 1);
          }
          v31 = *(_QWORD *)(a1 + 8);
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13 >> 1;
            do
            {
              v33 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33 >> 1);
            do
              v34 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34 >> 1);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 8);
        do
        {
          v17 = **(_QWORD **)(a1 + v15 + 16);
          v15 += 16;
        }
        while (v14 > v17 >> 1);
        v18 = a1 + v15;
        v19 = (__int128 *)a2;
        if (v15 == 16)
        {
          v19 = (__int128 *)a2;
          do
          {
            if (v18 >= (unint64_t)v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19-- - 2);
          }
          while (v14 <= *v21 >> 1);
        }
        else
        {
          do
            v20 = (_QWORD *)*((_QWORD *)v19-- - 2);
          while (v14 <= *v20 >> 1);
        }
        v8 = a1 + v15;
        if (v18 < (unint64_t)v19)
        {
          v22 = v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13 >> 1;
            do
            {
              v24 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v23 > *v24 >> 1);
            do
              v25 = (_QWORD *)*((_QWORD *)v22-- - 2);
            while (v23 <= *v25 >> 1);
          }
          while (v8 < (unint64_t)v22);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (unint64_t)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v85 = a2 - 32;
  v87 = a2 - 16;
  v83 = a2 - 48;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = (a2 - v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v37 = *((_QWORD *)a2 - 2);
        v36 = a2 - 16;
        if ((*a3)(v37, *(_QWORD *)a1))
        {
          v98 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v36;
          *(_OWORD *)v36 = v98;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, v87, a3);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, v87, a3);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6, v87, a3);
        return;
      default:
        if (v11 <= 383)
        {
          v38 = a1 + 16;
          v40 = a1 == a2 || v38 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = a1;
              do
              {
                v43 = *((_QWORD *)v42 + 2);
                v44 = *(_QWORD *)v42;
                v42 = v38;
                if ((*a3)(v43, v44))
                {
                  v92 = *(_OWORD *)v42;
                  v45 = *(_QWORD *)v42;
                  v46 = v41;
                  while (1)
                  {
                    *(_OWORD *)&a1[v46 + 16] = *(_OWORD *)&a1[v46];
                    if (!v46)
                      break;
                    v47 = (*a3)(v45, *(_QWORD *)&a1[v46 - 16]);
                    v46 -= 16;
                    if ((v47 & 1) == 0)
                    {
                      v48 = &a1[v46 + 16];
                      goto LABEL_71;
                    }
                  }
                  v48 = a1;
LABEL_71:
                  *(_OWORD *)v48 = v92;
                }
                v38 = v42 + 16;
                v41 += 16;
              }
              while (v42 + 16 != a2);
            }
          }
          else if (!v40)
          {
            do
            {
              v77 = *((_QWORD *)a1 + 2);
              v78 = *(_QWORD *)a1;
              a1 = v38;
              if ((*a3)(v77, v78))
              {
                v94 = *(_OWORD *)a1;
                v79 = *(_QWORD *)a1;
                v80 = a1;
                do
                {
                  v81 = v80 - 16;
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v82 = (*a3)(v79, *((_QWORD *)v80 - 4));
                  v80 = v81;
                }
                while ((v82 & 1) != 0);
                *(_OWORD *)v81 = v94;
              }
              v38 = a1 + 16;
            }
            while (a1 + 16 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v84 = v11;
            v86 = a2;
            v49 = (unint64_t)(v12 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &a1[16 * v52];
                if (2 * v50 + 2 < v12 && (*a3)(*(_QWORD *)v53, *((_QWORD *)v53 + 2)))
                {
                  v53 += 16;
                  v52 = 2 * v51 + 2;
                }
                v54 = &a1[16 * v51];
                if (((*a3)(*(_QWORD *)v53, *(_QWORD *)v54) & 1) == 0)
                {
                  v93 = v51;
                  v88 = *(_OWORD *)v54;
                  v55 = *(_QWORD *)v54;
                  do
                  {
                    v56 = v54;
                    v54 = v53;
                    *(_OWORD *)v56 = *(_OWORD *)v53;
                    if (v49 < v52)
                      break;
                    v57 = (2 * v52) | 1;
                    v53 = &a1[16 * v57];
                    v58 = 2 * v52 + 2;
                    if (v58 < v12 && (*a3)(*(_QWORD *)v53, *((_QWORD *)v53 + 2)))
                    {
                      v53 += 16;
                      v57 = v58;
                    }
                    v52 = v57;
                  }
                  while (!(*a3)(*(_QWORD *)v53, v55));
                  *(_OWORD *)v54 = v88;
                  v51 = v93;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            v59 = v86;
            v60 = v84 >> 4;
            do
            {
              v61 = 0;
              v99 = *(_OWORD *)a1;
              v62 = v60 - 2;
              if (v60 < 2)
                v62 = v60 - 1;
              v63 = v62 >> 1;
              v64 = a1;
              do
              {
                v65 = (uint64_t *)&v64[16 * v61 + 16];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v60 && (*a3)(*v65, *(_QWORD *)&v64[16 * v61 + 32]))
                {
                  v65 += 2;
                  v66 = v67;
                }
                *(_OWORD *)v64 = *(_OWORD *)v65;
                v64 = (char *)v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v68 = (uint64_t *)(v59 - 16);
              if (v65 == v68)
              {
                v69 = v68;
                *(_OWORD *)v65 = v99;
                v71 = v60 - 1;
              }
              else
              {
                *(_OWORD *)v65 = *(_OWORD *)v68;
                v69 = v68;
                *(_OWORD *)v68 = v99;
                v70 = (char *)v65 - a1 + 16;
                v71 = v60 - 1;
                if (v70 >= 17)
                {
                  v72 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v73 = &a1[16 * v72];
                  if ((*a3)(*(_QWORD *)v73, *v65))
                  {
                    v89 = *(_OWORD *)v65;
                    v74 = *v65;
                    do
                    {
                      v75 = v65;
                      v65 = (uint64_t *)v73;
                      *(_OWORD *)v75 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &a1[16 * v72];
                    }
                    while (((*a3)(*(_QWORD *)v73, v74) & 1) != 0);
                    *(_OWORD *)v65 = v89;
                  }
                }
              }
              v76 = v60 <= 2;
              v60 = v71;
              v59 = (char *)v69;
            }
            while (!v76);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &a1[16 * ((unint64_t)v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v14, a1, v87, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v14, v87, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)a1 + 2, (_QWORD *)v14 - 2, v85, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)a1 + 4, &a1[16 * v13 + 16], v83, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)v14 - 2, v14, &a1[16 * v13 + 16], a3);
          v95 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v95;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)(*((_QWORD *)a1 - 2), *(_QWORD *)a1) & 1) == 0)
        {
          v91 = *(_OWORD *)a1;
          v28 = *(_QWORD *)a1;
          if (((*a3)(*(_QWORD *)a1, *(_QWORD *)v87) & 1) != 0)
          {
            v10 = a1;
            do
            {
              v29 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (((*a3)(v28, v29) & 1) == 0);
          }
          else
          {
            v30 = a1 + 16;
            do
            {
              v10 = v30;
              if (v30 >= a2)
                break;
              v30 += 16;
            }
            while (!(*a3)(v28, *(_QWORD *)v10));
          }
          v31 = a2;
          if (v10 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *((_QWORD *)v31 - 2);
              v31 -= 16;
            }
            while (((*a3)(v28, v32) & 1) != 0);
          }
          while (v10 < v31)
          {
            v97 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v31;
            *(_OWORD *)v31 = v97;
            do
            {
              v33 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (!(*a3)(v28, v33));
            do
            {
              v34 = *((_QWORD *)v31 - 2);
              v31 -= 16;
            }
            while (((*a3)(v28, v34) & 1) != 0);
          }
          v35 = v10 - 16;
          if (v10 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)v35;
          a5 = 0;
          *(_OWORD *)v35 = v91;
          continue;
        }
        v15 = 0;
        v90 = *(_OWORD *)a1;
        v16 = *(_QWORD *)a1;
        do
        {
          v17 = (*a3)(*(_QWORD *)&a1[v15 + 16], v16);
          v15 += 16;
        }
        while ((v17 & 1) != 0);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 16)
        {
          do
          {
            if (v18 >= a2)
              break;
            v21 = *((_QWORD *)a2 - 2);
            a2 -= 16;
          }
          while (((*a3)(v21, v16) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *((_QWORD *)a2 - 2);
            a2 -= 16;
          }
          while (!(*a3)(v20, v16));
        }
        v10 = &a1[v15];
        if (v18 < a2)
        {
          v22 = a2;
          do
          {
            v96 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v96;
            do
            {
              v23 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (((*a3)(v23, v16) & 1) != 0);
            do
            {
              v24 = *((_QWORD *)v22 - 2);
              v22 -= 16;
            }
            while (!(*a3)(v24, v16));
          }
          while (v10 < v22);
        }
        v25 = v10 - 16;
        if (v10 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)v25;
        *(_OWORD *)v25 = v90;
        v26 = v18 >= a2;
        a2 = v19;
        if (!v26)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, v10 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v10 - 16, a3);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v19, a3))
        {
          if (v27)
            continue;
          goto LABEL_29;
        }
        a2 = v10 - 16;
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unint64_t **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (*v36 < **(_QWORD **)v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), (unint64_t **)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v8, (unint64_t **)(v8 + 16), (unint64_t **)(v8 + 32), (__n128 *)(v8 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (unint64_t **)(v8 + 16);
          v39 = (unint64_t **)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(unint64_t **)(v41 + 16);
                if (*v43 < **(_QWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = v37;
              v78 = a1[2];
              if (*v78 < **a1)
              {
                v79 = a1[3];
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v81 = *(v80 - 4);
                  v80 -= 2;
                }
                while (*v78 < *v81);
                *v80 = v78;
                v80[1] = v79;
              }
              v37 = v77 + 2;
              a1 = v77;
            }
            while (v77 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unint64_t **)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (unint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v86 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_QWORD **)v67 < **(_QWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if ((unint64_t **)v67 == a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 < **(_QWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unint64_t **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_QWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (unint64_t *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13;
            do
            {
              v33 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (unint64_t *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((unint64_t **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13;
            do
            {
              v24 = *(unint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (unint64_t *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((unint64_t **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>((uint64_t)a1, (unint64_t **)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned long long const*,void *,true> const&,re::Pair<unsigned long long const*,void *,true> const&)#1} &,re::Pair<unsigned long long const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (unint64_t **)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (unsigned int **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = (__int128 *)(a2 - 2);
        if (*v36 < **(_DWORD **)v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), (unsigned int **)(v8 + 32), (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v8, (unsigned int **)(v8 + 16), (unsigned int **)(v8 + 32), (__n128 *)(v8 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (unsigned int **)(v8 + 16);
          v39 = (unsigned int **)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(unsigned int **)(v41 + 16);
                if (*v43 < **(_DWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_DWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = v37;
              v78 = a1[2];
              if (*v78 < **a1)
              {
                v79 = a1[3];
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v81 = *(v80 - 4);
                  v80 -= 2;
                }
                while (*v78 < *v81);
                *v80 = v78;
                v80[1] = v79;
              }
              v37 = v77 + 2;
              a1 = v77;
            }
            while (v77 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unsigned int **)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unsigned int **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (unsigned int **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unsigned int **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v86 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_DWORD **)v67 < **(_DWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if ((unsigned int **)v67 == a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_DWORD **)v67;
                  if (**(_DWORD **)v72 < **(_DWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_DWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (unsigned int **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, a2 - 2);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, a2 - 4);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_DWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = a2;
            do
              v30 = (unsigned int *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13;
            do
            {
              v33 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (unsigned int *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((unsigned int **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13;
            do
            {
              v24 = *(unsigned int **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (unsigned int *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((unsigned int **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>((uint64_t)a1, (unsigned int **)(v8 - 16));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned int const*,void *,true> const&,re::Pair<unsigned int const*,void *,true> const&)#1} &,re::Pair<unsigned int const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (unsigned int **)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v86 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v86;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(unsigned __int16 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (unsigned __int16 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v78 = v37;
              v79 = a1[2];
              if (*v79 < **a1)
              {
                v80 = a1[3];
                v81 = v78;
                do
                {
                  *(_OWORD *)v81 = *((_OWORD *)v81 - 1);
                  v82 = *(v81 - 4);
                  v81 -= 2;
                }
                while (*v79 < *v82);
                *v81 = v79;
                v81[1] = v80;
              }
              v37 = v78 + 2;
              a1 = v78;
            }
            while (v78 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v64 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      v64 = v61 <= v62 ? *v52[2] : **v52;
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v64 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v65 = (unint64_t)v9 >> 4;
            do
            {
              v66 = 0;
              v87 = *(_OWORD *)v8;
              v67 = v8;
              do
              {
                v68 = &v67[2 * v66 + 2];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v65 && **v68 < *v68[2])
                {
                  v68 += 2;
                  v69 = v70;
                }
                *(_OWORD *)v67 = *(_OWORD *)v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_OWORD *)v68 = v87;
              }
              else
              {
                *(_OWORD *)v68 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v87;
                v71 = (char *)v68 - (char *)v8 + 16;
                if (v71 >= 17)
                {
                  v72 = (((unint64_t)v71 >> 4) - 2) >> 1;
                  v73 = &v8[2 * v72];
                  v74 = *v68;
                  if (**v73 < **v68)
                  {
                    v75 = v68[1];
                    do
                    {
                      v76 = v68;
                      v68 = v73;
                      *(_OWORD *)v76 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[2 * v72];
                    }
                    while (**v73 < *v74);
                    *v68 = v74;
                    v68[1] = v75;
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v83 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v83;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v85 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v85;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v84;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned short const*,void *,true> const&,re::Pair<unsigned short const*,void *,true> const&)#1} &,re::Pair<unsigned short const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v86 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v86;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(unsigned __int8 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (unsigned __int8 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v78 = v37;
              v79 = a1[2];
              if (*v79 < **a1)
              {
                v80 = a1[3];
                v81 = v78;
                do
                {
                  *(_OWORD *)v81 = *((_OWORD *)v81 - 1);
                  v82 = *(v81 - 4);
                  v81 -= 2;
                }
                while (*v79 < *v82);
                *v81 = v79;
                v81[1] = v80;
              }
              v37 = v78 + 2;
              a1 = v78;
            }
            while (v78 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 >= v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (!v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v64 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 >= v62;
                      v64 = v61 <= v62 ? *v52[2] : **v52;
                      if (v63)
                        v51 = v60;
                      else
                        v52 += 2;
                    }
                  }
                  while (v64 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v65 = (unint64_t)v9 >> 4;
            do
            {
              v66 = 0;
              v87 = *(_OWORD *)v8;
              v67 = v8;
              do
              {
                v68 = &v67[2 * v66 + 2];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v65 && **v68 < *v68[2])
                {
                  v68 += 2;
                  v69 = v70;
                }
                *(_OWORD *)v67 = *(_OWORD *)v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v65 - 2) >> 1));
              a2 -= 2;
              if (v68 == a2)
              {
                *(_OWORD *)v68 = v87;
              }
              else
              {
                *(_OWORD *)v68 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v87;
                v71 = (char *)v68 - (char *)v8 + 16;
                if (v71 >= 17)
                {
                  v72 = (((unint64_t)v71 >> 4) - 2) >> 1;
                  v73 = &v8[2 * v72];
                  v74 = *v68;
                  if (**v73 < **v68)
                  {
                    v75 = v68[1];
                    do
                    {
                      v76 = v68;
                      v68 = v73;
                      *(_OWORD *)v76 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v8[2 * v72];
                    }
                    while (**v73 < *v74);
                    *v68 = v74;
                    v68[1] = v75;
                  }
                }
              }
            }
            while (v65-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v83 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v83;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v85 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v85;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v84;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,unsigned char>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<unsigned char const*,void *,true> const&,re::Pair<unsigned char const*,void *,true> const&)#1} &,re::Pair<unsigned char const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (uint64_t **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_QWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 < **(_QWORD **)v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)&a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (__n128 *)a2[-1].n128_u64);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v8, (uint64_t **)(v8 + 16), (uint64_t **)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_QWORD **)(v41 + 16);
                if (*v43 < **(_QWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *v79 = v79[-1];
                  v80 = (uint64_t *)v79[-2].n128_u64[0];
                  --v79;
                }
                while (*v77 < *v80);
                v79->n128_u64[0] = (unint64_t)v77;
                v79->n128_u64[1] = (unint64_t)v78;
              }
              v37 = v76 + 1;
              a1 = (uint64_t **)v76;
            }
            while (&v76[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (uint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (uint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (uint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_QWORD **)v67 < **(_QWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v85;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 < **(_QWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (uint64_t **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, (uint64_t **)&a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], (uint64_t **)&a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, (uint64_t **)&a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], (uint64_t **)&a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= *(_QWORD *)a2[-1].n128_u64[0])
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= (_QWORD **)a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_QWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v83;
            v32 = *v13;
            do
            {
              v33 = *(uint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (uint64_t *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((uint64_t **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= (uint64_t **)v19)
              break;
            v21 = (_QWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < (uint64_t **)v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v82;
            v23 = *v13;
            do
            {
              v24 = *(uint64_t **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (uint64_t *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((uint64_t **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (uint64_t **)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>((uint64_t)a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,long long>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<long long const*,void *,true> const&,re::Pair<long long const*,void *,true> const&)#1} &,re::Pair<long long const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (unint64_t)a1;
  while (2)
  {
    a1 = (int **)v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_DWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 < **(_DWORD **)v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)&a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)(v8 + 32), (__n128 *)a2[-1].n128_u64);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v8, (int **)(v8 + 16), (int **)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_DWORD **)(v41 + 16);
                if (*v43 < **(_DWORD **)v41)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_DWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *v79 = v79[-1];
                  v80 = (int *)v79[-2].n128_u64[0];
                  --v79;
                }
                while (*v77 < *v80);
                v79->n128_u64[0] = (unint64_t)v77;
                v79->n128_u64[1] = (unint64_t)v78;
              }
              v37 = v76 + 1;
              a1 = (int **)v76;
            }
            while (&v76[1] != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (int **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    v54 = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = (int **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >= **v56)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (int **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        v61 = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (v61 >= *v57);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v65 + 1];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **(_DWORD **)v67 < **(_DWORD **)(v67 + 16))
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v85;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_DWORD **)v67;
                  if (**(_DWORD **)v72 < **(_DWORD **)v67)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_DWORD **)v72 < *v73);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (int **)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)&a1[2 * (v10 >> 1)], a1, (int **)&a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1, &a1[2 * (v10 >> 1)], (int **)&a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1 + 1, v12 - 2, (int **)&a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)a1 + 2, &a1[2 * v11 + 2], (int **)&a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((__int128 *)v12 - 1, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= *(_DWORD *)a2[-1].n128_u64[0])
          {
            v28 = a1 + 2;
            do
            {
              v8 = (unint64_t)v28;
              if (v28 >= (_DWORD **)a2)
                break;
              v28 += 2;
            }
            while (v14 >= **(_DWORD **)v8);
          }
          else
          {
            v8 = (unint64_t)a1;
            do
            {
              v27 = *(_DWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_DWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < (unint64_t)v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v83;
            v32 = *v13;
            do
            {
              v33 = *(int **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33);
            do
              v34 = (int *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34);
          }
          if ((int **)(v8 - 16) != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= (int **)v19)
              break;
            v21 = (_DWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = (_DWORD *)v19[-1].n128_u64[0];
            --v19;
          }
          while (*v20 >= v14);
        }
        v8 = (unint64_t)&a1[v15];
        if (v18 < (int **)v19)
        {
          v22 = (__int128 *)v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v82;
            v23 = *v13;
            do
            {
              v24 = *(int **)(v8 + 16);
              v8 += 16;
            }
            while (*v24 < v23);
            do
              v25 = (int *)*((_QWORD *)v22-- - 2);
            while (*v25 >= v23);
          }
          while (v8 < (unint64_t)v22);
        }
        if ((int **)(v8 - 16) != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (int **)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>((uint64_t)a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,int>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<int const*,void *,true> const&,re::Pair<int const*,void *,true> const&)#1} &,re::Pair<int const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = *(a2 - 2);
        v35 = a2 - 2;
        if (*v36 < **v8)
        {
          v84 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v35;
          *(_OWORD *)v35 = v84;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (_OWORD *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, v8 + 2, (__n128 *)v8 + 2, (__n128 *)v8 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = v8 + 2;
          v39 = v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = v41[2];
                if (*v43 < **v41)
                {
                  v44 = v41[3];
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)((char *)v8 + v45 + 16) = *(_OWORD *)((char *)v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(__int16 **)((char *)v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >= v46)
                    {
                      v47 = (__int16 **)((char *)v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 2;
                v40 += 16;
                v41 = v42;
              }
              while (v42 + 2 != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v76 = v37;
              v77 = a1[2];
              if (*v77 < **a1)
              {
                v78 = a1[3];
                v79 = v76;
                do
                {
                  *(_OWORD *)v79 = *((_OWORD *)v79 - 1);
                  v80 = *(v79 - 4);
                  v79 -= 2;
                }
                while (*v77 < *v80);
                *v79 = v77;
                v79[1] = v78;
              }
              v37 = v76 + 2;
              a1 = v76;
            }
            while (v76 + 2 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = &v8[2 * v51];
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  LOWORD(v54) = **v52;
                }
                else
                {
                  v53 = **v52;
                  v54 = *v52[2];
                  v55 = v53 < v54;
                  if (v53 > v54)
                    LOWORD(v54) = **v52;
                  if (v55)
                  {
                    v52 += 2;
                    v51 = 2 * v50 + 2;
                  }
                }
                v56 = &v8[2 * v50];
                v57 = *v56;
                if (**v56 <= (__int16)v54)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = &v8[2 * v60];
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      LOWORD(v61) = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      v62 = *v52[2];
                      v63 = v61 < v62;
                      if (v61 <= v62)
                        LOWORD(v61) = *v52[2];
                      if (v63)
                        v52 += 2;
                      else
                        v51 = v60;
                    }
                  }
                  while (*v57 <= (__int16)v61);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v85 = *(_OWORD *)v8;
              v66 = v8;
              do
              {
                v67 = &v66[2 * v65 + 2];
                v68 = (2 * v65) | 1;
                v69 = 2 * v65 + 2;
                if (v69 < v64 && **v67 < *v67[2])
                {
                  v67 += 2;
                  v68 = v69;
                }
                *(_OWORD *)v66 = *(_OWORD *)v67;
                v66 = v67;
                v65 = v68;
              }
              while (v68 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if (v67 == a2)
              {
                *(_OWORD *)v67 = v85;
              }
              else
              {
                *(_OWORD *)v67 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v85;
                v70 = (char *)v67 - (char *)v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = &v8[2 * v71];
                  v73 = *v67;
                  if (**v72 < **v67)
                  {
                    v74 = v67[1];
                    do
                    {
                      v75 = v67;
                      v67 = v72;
                      *(_OWORD *)v75 = *(_OWORD *)v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = &v8[2 * v71];
                    }
                    while (**v72 < *v73);
                    *v67 = v73;
                    v67[1] = v74;
                  }
                }
              }
              v55 = v64-- <= 2;
            }
            while (!v55);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = &v8[2 * (v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(&a1[2 * (v10 >> 1)], a1, (_OWORD *)a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, &a1[2 * (v10 >> 1)], (_OWORD *)a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 2, v12 - 2, (_OWORD *)a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1 + 4, &a1[2 * v11 + 2], (_OWORD *)a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        v13 = *a1;
        v14 = **a1;
        if ((a4 & 1) == 0 && **(a1 - 2) >= v14)
        {
          if (v14 >= **(a2 - 2))
          {
            v28 = a1 + 2;
            do
            {
              v8 = v28;
              if (v28 >= a2)
                break;
              v28 += 2;
            }
            while (v14 >= **v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while (v14 >= *v27);
          }
          v29 = a2;
          if (v8 < a2)
          {
            v29 = a2;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while (v14 < *v30);
          }
          v31 = a1[1];
          while (v8 < v29)
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v83;
            v32 = *v13;
            do
            {
              v33 = v8[2];
              v8 += 2;
            }
            while (v32 >= *v33);
            do
            {
              v34 = *(v29 - 2);
              v29 -= 2;
            }
            while (v32 < *v34);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v13;
          *(v8 - 1) = v31;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = *a1[v15 + 2];
          v15 += 2;
        }
        while (v17 < v14);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 2)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v21 >= v14);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (*v20 >= v14);
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v82 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v82;
            v23 = *v13;
            do
            {
              v24 = v8[2];
              v8 += 2;
            }
            while (*v24 < v23);
            do
            {
              v25 = *(v22 - 2);
              v22 -= 2;
            }
            while (*v25 >= v23);
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v13;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithInteger<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>,short>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<short const*,void *,true> const&,re::Pair<short const*,void *,true> const&)#1} &,re::Pair<short const*,void *,true>*>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2 - 2;
  v93 = a2 - 4;
  v94 = a2;
  v91 = a2 - 6;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = v94;
    v10 = (char *)v94 - (char *)v8;
    v11 = ((char *)v94 - (char *)v8) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v33 = v94 - 2;
        if (re::DynamicString::operator<(*(v94 - 2), *v8))
        {
          v98 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v33;
          *(_OWORD *)v33 = v98;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v7);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v8 + 4, v7);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v8 + 2, v8 + 4, v8 + 6, v7);
        return;
      default:
        if (v10 <= 383)
        {
          v34 = v8 + 2;
          v36 = v8 == v94 || v34 == v94;
          if ((a4 & 1) != 0)
          {
            if (!v36)
            {
              v37 = 0;
              v38 = v8;
              do
              {
                v39 = v34;
                v40 = v38[2];
                if (re::DynamicString::operator<(v40, *v38))
                {
                  v41 = v38[3];
                  v42 = v37;
                  while (1)
                  {
                    v43 = (char *)v8 + v42;
                    *(_OWORD *)((char *)v8 + v42 + 16) = *(_OWORD *)((char *)v8 + v42);
                    if (!v42)
                      break;
                    v42 -= 16;
                    if ((re::DynamicString::operator<(v40, *((_QWORD *)v43 - 2)) & 1) == 0)
                    {
                      v44 = (uint64_t *)((char *)v8 + v42 + 16);
                      goto LABEL_70;
                    }
                  }
                  v44 = v8;
LABEL_70:
                  *v44 = v40;
                  v44[1] = v41;
                }
                v34 = v39 + 2;
                v37 += 16;
                v38 = v39;
              }
              while (v39 + 2 != v94);
            }
          }
          else if (!v36)
          {
            do
            {
              v83 = v34;
              v84 = a1[2];
              if (re::DynamicString::operator<(v84, *a1))
              {
                v85 = a1[3];
                v86 = v83;
                do
                {
                  v87 = v86 - 2;
                  *(_OWORD *)v86 = *((_OWORD *)v86 - 1);
                  v88 = re::DynamicString::operator<(v84, *(v86 - 4));
                  v86 = v87;
                }
                while ((v88 & 1) != 0);
                *v87 = v84;
                v87[1] = v85;
              }
              v34 = v83 + 2;
              a1 = v83;
            }
            while (v83 + 2 != v94);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != v94)
          {
            v89 = (char *)v94 - (char *)v8;
            v45 = (unint64_t)(v11 - 2) >> 1;
            v46 = v45;
            do
            {
              v47 = v46;
              if (v45 >= v46)
              {
                v48 = (2 * v46) | 1;
                v49 = &a1[2 * v48];
                v50 = 2 * v46 + 2;
                if (v50 >= v11)
                {
                  v56 = *v49;
                }
                else
                {
                  v51 = *v49;
                  v52 = v46;
                  v53 = v49[2];
                  v54 = re::DynamicString::operator<(*v49, v53);
                  v55 = v54 == 0;
                  if (v54)
                    v56 = v53;
                  else
                    v56 = v51;
                  v47 = v52;
                  v45 = (unint64_t)(v11 - 2) >> 1;
                  if (!v55)
                  {
                    v49 += 2;
                    v48 = v50;
                  }
                }
                v57 = &a1[2 * v47];
                v58 = *v57;
                if ((re::DynamicString::operator<(v56, *v57) & 1) == 0)
                {
                  v90 = v57[1];
                  v92 = v47;
                  do
                  {
                    v59 = v57;
                    v57 = v49;
                    *(_OWORD *)v59 = *(_OWORD *)v49;
                    if (v45 < v48)
                      break;
                    v60 = (2 * v48) | 1;
                    v49 = &a1[2 * v60];
                    v61 = 2 * v48 + 2;
                    if (v61 >= v11)
                    {
                      v66 = *v49;
                      v48 = (2 * v48) | 1;
                    }
                    else
                    {
                      v62 = *v49;
                      v63 = v49[2];
                      v64 = re::DynamicString::operator<(*v49, v63);
                      v65 = v64 == 0;
                      if (v64)
                        v66 = v63;
                      else
                        v66 = v62;
                      if (!v65)
                        v49 += 2;
                      v45 = (unint64_t)(v11 - 2) >> 1;
                      v48 = v65 ? v60 : v61;
                    }
                  }
                  while (!re::DynamicString::operator<(v66, v58));
                  v47 = v92;
                  *v57 = v58;
                  v57[1] = v90;
                }
              }
              v46 = v47 - 1;
            }
            while (v47);
            v67 = v89 >> 4;
            v68 = v94;
            do
            {
              v69 = 0;
              v99 = *(_OWORD *)a1;
              v70 = v67 - 2;
              if (v67 < 2)
                v70 = v67 - 1;
              v71 = v70 >> 1;
              v72 = a1;
              do
              {
                v73 = &v72[2 * v69 + 2];
                v74 = (2 * v69) | 1;
                v75 = 2 * v69 + 2;
                if (v75 < v67 && re::DynamicString::operator<(*v73, v72[2 * v69 + 4]))
                {
                  v73 += 2;
                  v74 = v75;
                }
                *(_OWORD *)v72 = *(_OWORD *)v73;
                v72 = v73;
                v69 = v74;
              }
              while (v74 <= v71);
              v68 -= 2;
              if (v73 == v68)
              {
                *(_OWORD *)v73 = v99;
              }
              else
              {
                *(_OWORD *)v73 = *(_OWORD *)v68;
                *(_OWORD *)v68 = v99;
                v76 = (char *)v73 - (char *)a1 + 16;
                if (v76 >= 17)
                {
                  v77 = (((unint64_t)v76 >> 4) - 2) >> 1;
                  v78 = &a1[2 * v77];
                  v79 = *v73;
                  if (re::DynamicString::operator<(*v78, *v73))
                  {
                    v80 = v73[1];
                    do
                    {
                      v81 = v73;
                      v73 = v78;
                      *(_OWORD *)v81 = *(_OWORD *)v78;
                      if (!v77)
                        break;
                      v77 = (v77 - 1) >> 1;
                      v78 = &a1[2 * v77];
                    }
                    while ((re::DynamicString::operator<(*v78, v79) & 1) != 0);
                    *v73 = v79;
                    v73[1] = v80;
                  }
                }
              }
            }
            while (v67-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v8[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v13, v8, v7);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v13, v7);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8 + 2, v13 - 2, v93);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8 + 4, &v8[2 * v12 + 2], v91);
          v9 = v94;
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v13 - 2, v13, &v8[2 * v12 + 2]);
          v95 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v95;
        }
        --a3;
        v14 = *v8;
        if ((a4 & 1) == 0 && (re::DynamicString::operator<(*(v8 - 2), *v8) & 1) == 0)
        {
          v26 = v8[1];
          if ((re::DynamicString::operator<(v14, *v7) & 1) != 0)
          {
            do
            {
              v27 = v8[2];
              v8 += 2;
            }
            while ((re::DynamicString::operator<(v14, v27) & 1) == 0);
          }
          else
          {
            v28 = v8 + 2;
            do
            {
              v8 = v28;
              if (v28 >= v94)
                break;
              v28 += 2;
            }
            while (!re::DynamicString::operator<(v14, *v8));
          }
          v29 = v94;
          if (v8 < v94)
          {
            v29 = v94;
            do
            {
              v30 = *(v29 - 2);
              v29 -= 2;
            }
            while ((re::DynamicString::operator<(v14, v30) & 1) != 0);
          }
          while (v8 < v29)
          {
            v97 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *(_OWORD *)v29 = v97;
            do
            {
              v31 = v8[2];
              v8 += 2;
            }
            while (!re::DynamicString::operator<(v14, v31));
            do
            {
              v32 = *(v29 - 2);
              v29 -= 2;
            }
            while ((re::DynamicString::operator<(v14, v32) & 1) != 0);
          }
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
          a4 = 0;
          *(v8 - 2) = v14;
          *(v8 - 1) = v26;
          continue;
        }
        v15 = 0;
        v16 = a1[1];
        do
        {
          v17 = re::DynamicString::operator<(a1[v15 + 2], v14);
          v15 += 2;
        }
        while ((v17 & 1) != 0);
        v18 = &a1[v15];
        v19 = v9;
        if (v15 == 2)
        {
          v19 = v9;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *(v19 - 2);
            v19 -= 2;
          }
          while ((re::DynamicString::operator<(v21, v14) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *(v19 - 2);
            v19 -= 2;
          }
          while (!re::DynamicString::operator<(v20, v14));
        }
        v8 = &a1[v15];
        if (v18 < v19)
        {
          v22 = v19;
          do
          {
            v96 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v96;
            do
            {
              v23 = v8[2];
              v8 += 2;
            }
            while ((re::DynamicString::operator<(v23, v14) & 1) != 0);
            do
            {
              v24 = *(v22 - 2);
              v22 -= 2;
            }
            while (!re::DynamicString::operator<(v24, v14));
          }
          while (v8 < v22);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v14;
        *(v8 - 1) = v16;
        if (v18 < v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v25 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithDynamicString<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::DynamicString const*,void *,true> const&,re::Pair<re::DynamicString const*,void *,true> const&)#1} &,re::Pair<re::DynamicString const*,void *,true>*>(v8, v94))
        {
          if (v25)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 2;
        if (!v25)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v36 = (_QWORD *)a2[-1].n128_u64[0];
        v35 = (__int128 *)&a2[-1];
        if (*v36 >> 1 < **(_QWORD **)v8 >> 1)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *v35;
          *v35 = v85;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (_QWORD **)(v8 + 16), &a2[-1]);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (__n128 *)(v8 + 16), (__n128 *)(v8 + 32), a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)v8, (__n128 *)(v8 + 16), (__n128 *)(v8 + 32), (__n128 *)(v8 + 48), a2 - 1);
        return;
      default:
        if (v9 <= 383)
        {
          v37 = (__n128 *)(v8 + 16);
          v39 = (__n128 *)v8 == a2 || v37 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v39)
            {
              v40 = 0;
              v41 = v8;
              do
              {
                v42 = v37;
                v43 = *(_QWORD **)(v41 + 16);
                if (*v43 >> 1 < **(_QWORD **)v41 >> 1)
                {
                  v44 = *(_QWORD *)(v41 + 24);
                  v45 = v40;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v45 + 16) = *(_OWORD *)(v8 + v45);
                    if (!v45)
                      break;
                    v46 = **(_QWORD **)(v8 + v45 - 16);
                    v45 -= 16;
                    if (*v43 >> 1 >= v46 >> 1)
                    {
                      v47 = (_QWORD *)(v8 + v45 + 16);
                      goto LABEL_72;
                    }
                  }
                  v47 = (_QWORD *)v8;
LABEL_72:
                  *v47 = v43;
                  v47[1] = v44;
                }
                v37 = v42 + 1;
                v40 += 16;
                v41 = (unint64_t)v42;
              }
              while (&v42[1] != a2);
            }
          }
          else if (!v39)
          {
            do
            {
              v77 = (uint64_t)v37;
              v78 = *(_QWORD **)(a1 + 16);
              if (*v78 >> 1 < **(_QWORD **)a1 >> 1)
              {
                v79 = *(_QWORD *)(a1 + 24);
                v80 = v77;
                do
                {
                  *(_OWORD *)v80 = *(_OWORD *)(v80 - 16);
                  v81 = *(_QWORD **)(v80 - 32);
                  v80 -= 16;
                }
                while (*v78 >> 1 < *v81 >> 1);
                *(_QWORD *)v80 = v78;
                *(_QWORD *)(v80 + 8) = v79;
              }
              v37 = (__n128 *)(v77 + 16);
              a1 = v77;
            }
            while ((__n128 *)(v77 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v48 = (v10 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = (unint64_t **)(v8 + 16 * v51);
                if (2 * v50 + 2 >= (uint64_t)v10)
                {
                  v54 = **v52;
                }
                else
                {
                  v53 = **v52 >> 1;
                  v54 = *v52[2];
                  v55 = v53 >= v54 >> 1;
                  if (v53 < v54 >> 1)
                    v52 += 2;
                  else
                    v54 = **v52;
                  if (!v55)
                    v51 = 2 * v50 + 2;
                }
                v56 = (unint64_t **)(v8 + 16 * v50);
                v57 = *v56;
                if (v54 >> 1 >= **v56 >> 1)
                {
                  v58 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v52;
                    *(_OWORD *)v59 = *(_OWORD *)v52;
                    if (v48 < v51)
                      break;
                    v60 = (2 * v51) | 1;
                    v52 = (unint64_t **)(v8 + 16 * v60);
                    v51 = 2 * v51 + 2;
                    if (v51 >= (uint64_t)v10)
                    {
                      v61 = **v52;
                      v51 = v60;
                    }
                    else
                    {
                      v61 = **v52;
                      if (v61 >> 1 >= *v52[2] >> 1)
                      {
                        v51 = v60;
                      }
                      else
                      {
                        v61 = *v52[2];
                        v52 += 2;
                      }
                    }
                  }
                  while (v61 >> 1 >= *v57 >> 1);
                  *v56 = v57;
                  v56[1] = v58;
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v62 = (unint64_t)v9 >> 4;
            do
            {
              v63 = 0;
              v86 = *(_OWORD *)v8;
              v64 = v62 - 2;
              if (v62 < 2)
                v64 = v62 - 1;
              v65 = v64 >> 1;
              v66 = (_OWORD *)v8;
              do
              {
                v67 = (uint64_t)&v66[v63 + 1];
                v68 = (2 * v63) | 1;
                v69 = 2 * v63 + 2;
                if (v69 < v62 && **(_QWORD **)v67 >> 1 < **(_QWORD **)(v67 + 16) >> 1)
                {
                  v67 += 16;
                  v68 = v69;
                }
                *v66 = *(_OWORD *)v67;
                v66 = (_OWORD *)v67;
                v63 = v68;
              }
              while (v68 <= v65);
              if ((__n128 *)v67 == --a2)
              {
                *(_OWORD *)v67 = v86;
              }
              else
              {
                *(__n128 *)v67 = *a2;
                *a2 = (__n128)v86;
                v70 = v67 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (_OWORD *)(v8 + 16 * v71);
                  v73 = *(_QWORD **)v67;
                  if (**(_QWORD **)v72 >> 1 < **(_QWORD **)v67 >> 1)
                  {
                    v74 = *(_QWORD *)(v67 + 8);
                    do
                    {
                      v75 = (_OWORD *)v67;
                      v67 = (uint64_t)v72;
                      *v75 = *v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (_OWORD *)(v8 + 16 * v71);
                    }
                    while (**(_QWORD **)v72 >> 1 < *v73 >> 1);
                    *(_QWORD *)v67 = v73;
                    *(_QWORD *)(v67 + 8) = v74;
                  }
                }
              }
            }
            while (v62-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (__int128 *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 16 * (v10 >> 1)), (_QWORD **)a1, &a2[-1]);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)a1, (_QWORD **)(a1 + 16 * (v10 >> 1)), &a2[-1]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 16), (_QWORD **)v12 - 2, &a2[-2]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>((__int128 *)(a1 + 32), (_QWORD **)(a1 + 16 + 16 * v11), &a2[-3]);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v12 - 1, (_QWORD **)v12, (_QWORD **)(a1 + 16 + 16 * v11));
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v12;
          *v12 = v82;
        }
        --a3;
        v13 = *(_QWORD **)a1;
        v14 = **(_QWORD **)a1 >> 1;
        if ((a4 & 1) == 0 && v14 <= **(_QWORD **)(a1 - 16) >> 1)
        {
          if (v14 >= *(_QWORD *)a2[-1].n128_u64[0] >> 1)
          {
            v28 = a1 + 16;
            do
            {
              v8 = v28;
              if (v28 >= (unint64_t)a2)
                break;
              v28 += 16;
            }
            while (v14 >= **(_QWORD **)v8 >> 1);
          }
          else
          {
            v8 = a1;
            do
            {
              v27 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v14 >= *v27 >> 1);
          }
          v29 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v29 = (__int128 *)a2;
            do
              v30 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v14 < *v30 >> 1);
          }
          v31 = *(_QWORD *)(a1 + 8);
          while (v8 < (unint64_t)v29)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v29;
            *v29 = v84;
            v32 = *v13 >> 1;
            do
            {
              v33 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v32 >= *v33 >> 1);
            do
              v34 = (_QWORD *)*((_QWORD *)v29-- - 2);
            while (v32 < *v34 >> 1);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v31;
          continue;
        }
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 8);
        do
        {
          v17 = **(_QWORD **)(a1 + v15 + 16);
          v15 += 16;
        }
        while (v14 > v17 >> 1);
        v18 = a1 + v15;
        v19 = (__int128 *)a2;
        if (v15 == 16)
        {
          v19 = (__int128 *)a2;
          do
          {
            if (v18 >= (unint64_t)v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19-- - 2);
          }
          while (v14 <= *v21 >> 1);
        }
        else
        {
          do
            v20 = (_QWORD *)*((_QWORD *)v19-- - 2);
          while (v14 <= *v20 >> 1);
        }
        v8 = a1 + v15;
        if (v18 < (unint64_t)v19)
        {
          v22 = v19;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *v22;
            *v22 = v83;
            v23 = *v13 >> 1;
            do
            {
              v24 = *(_QWORD **)(v8 + 16);
              v8 += 16;
            }
            while (v23 > *v24 >> 1);
            do
              v25 = (_QWORD *)*((_QWORD *)v22-- - 2);
            while (v23 <= *v25 >> 1);
          }
          while (v8 < (unint64_t)v22);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v16;
        if (v18 < (unint64_t)v19)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*,false>(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(a1, v8 - 16);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::internal::serializeDictionaryWithStringID<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<re::StringID const*,void *,true> const&,re::Pair<re::StringID const*,void *,true> const&)#1} &,re::Pair<re::StringID const*,void *,true>*>(v8, (uint64_t)a2))
        {
          if (v26)
            continue;
          goto LABEL_29;
        }
        a2 = (__n128 *)(v8 - 16);
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v85 = a2 - 32;
  v87 = a2 - 16;
  v83 = a2 - 48;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = (a2 - v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        v37 = *((_QWORD *)a2 - 2);
        v36 = a2 - 16;
        if ((*a3)(v37, *(_QWORD *)a1))
        {
          v98 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v36;
          *(_OWORD *)v36 = v98;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, v87, a3);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, v87, a3);
        return;
      case 5:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6, v87, a3);
        return;
      default:
        if (v11 <= 383)
        {
          v38 = a1 + 16;
          v40 = a1 == a2 || v38 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = a1;
              do
              {
                v43 = *((_QWORD *)v42 + 2);
                v44 = *(_QWORD *)v42;
                v42 = v38;
                if ((*a3)(v43, v44))
                {
                  v92 = *(_OWORD *)v42;
                  v45 = *(_QWORD *)v42;
                  v46 = v41;
                  while (1)
                  {
                    *(_OWORD *)&a1[v46 + 16] = *(_OWORD *)&a1[v46];
                    if (!v46)
                      break;
                    v47 = (*a3)(v45, *(_QWORD *)&a1[v46 - 16]);
                    v46 -= 16;
                    if ((v47 & 1) == 0)
                    {
                      v48 = &a1[v46 + 16];
                      goto LABEL_71;
                    }
                  }
                  v48 = a1;
LABEL_71:
                  *(_OWORD *)v48 = v92;
                }
                v38 = v42 + 16;
                v41 += 16;
              }
              while (v42 + 16 != a2);
            }
          }
          else if (!v40)
          {
            do
            {
              v77 = *((_QWORD *)a1 + 2);
              v78 = *(_QWORD *)a1;
              a1 = v38;
              if ((*a3)(v77, v78))
              {
                v94 = *(_OWORD *)a1;
                v79 = *(_QWORD *)a1;
                v80 = a1;
                do
                {
                  v81 = v80 - 16;
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v82 = (*a3)(v79, *((_QWORD *)v80 - 4));
                  v80 = v81;
                }
                while ((v82 & 1) != 0);
                *(_OWORD *)v81 = v94;
              }
              v38 = a1 + 16;
            }
            while (a1 + 16 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v84 = v11;
            v86 = a2;
            v49 = (unint64_t)(v12 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &a1[16 * v52];
                if (2 * v50 + 2 < v12 && (*a3)(*(_QWORD *)v53, *((_QWORD *)v53 + 2)))
                {
                  v53 += 16;
                  v52 = 2 * v51 + 2;
                }
                v54 = &a1[16 * v51];
                if (((*a3)(*(_QWORD *)v53, *(_QWORD *)v54) & 1) == 0)
                {
                  v93 = v51;
                  v88 = *(_OWORD *)v54;
                  v55 = *(_QWORD *)v54;
                  do
                  {
                    v56 = v54;
                    v54 = v53;
                    *(_OWORD *)v56 = *(_OWORD *)v53;
                    if (v49 < v52)
                      break;
                    v57 = (2 * v52) | 1;
                    v53 = &a1[16 * v57];
                    v58 = 2 * v52 + 2;
                    if (v58 < v12 && (*a3)(*(_QWORD *)v53, *((_QWORD *)v53 + 2)))
                    {
                      v53 += 16;
                      v57 = v58;
                    }
                    v52 = v57;
                  }
                  while (!(*a3)(*(_QWORD *)v53, v55));
                  *(_OWORD *)v54 = v88;
                  v51 = v93;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            v59 = v86;
            v60 = v84 >> 4;
            do
            {
              v61 = 0;
              v99 = *(_OWORD *)a1;
              v62 = v60 - 2;
              if (v60 < 2)
                v62 = v60 - 1;
              v63 = v62 >> 1;
              v64 = a1;
              do
              {
                v65 = (uint64_t *)&v64[16 * v61 + 16];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v60 && (*a3)(*v65, *(_QWORD *)&v64[16 * v61 + 32]))
                {
                  v65 += 2;
                  v66 = v67;
                }
                *(_OWORD *)v64 = *(_OWORD *)v65;
                v64 = (char *)v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v68 = (uint64_t *)(v59 - 16);
              if (v65 == v68)
              {
                v69 = v68;
                *(_OWORD *)v65 = v99;
                v71 = v60 - 1;
              }
              else
              {
                *(_OWORD *)v65 = *(_OWORD *)v68;
                v69 = v68;
                *(_OWORD *)v68 = v99;
                v70 = (char *)v65 - a1 + 16;
                v71 = v60 - 1;
                if (v70 >= 17)
                {
                  v72 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v73 = &a1[16 * v72];
                  if ((*a3)(*(_QWORD *)v73, *v65))
                  {
                    v89 = *(_OWORD *)v65;
                    v74 = *v65;
                    do
                    {
                      v75 = v65;
                      v65 = (uint64_t *)v73;
                      *(_OWORD *)v75 = *(_OWORD *)v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &a1[16 * v72];
                    }
                    while (((*a3)(*(_QWORD *)v73, v74) & 1) != 0);
                    *(_OWORD *)v65 = v89;
                  }
                }
              }
              v76 = v60 <= 2;
              v60 = v71;
              v59 = (char *)v69;
            }
            while (!v76);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &a1[16 * ((unint64_t)v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v14, a1, v87, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v14, v87, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)a1 + 2, (_QWORD *)v14 - 2, v85, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)a1 + 4, &a1[16 * v13 + 16], v83, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::DynamicArrayBufferedOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((_QWORD *)v14 - 2, v14, &a1[16 * v13 + 16], a3);
          v95 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v95;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)(*((_QWORD *)a1 - 2), *(_QWORD *)a1) & 1) == 0)
        {
          v91 = *(_OWORD *)a1;
          v28 = *(_QWORD *)a1;
          if (((*a3)(*(_QWORD *)a1, *(_QWORD *)v87) & 1) != 0)
          {
            v10 = a1;
            do
            {
              v29 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (((*a3)(v28, v29) & 1) == 0);
          }
          else
          {
            v30 = a1 + 16;
            do
            {
              v10 = v30;
              if (v30 >= a2)
                break;
              v30 += 16;
            }
            while (!(*a3)(v28, *(_QWORD *)v10));
          }
          v31 = a2;
          if (v10 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *((_QWORD *)v31 - 2);
              v31 -= 16;
            }
            while (((*a3)(v28, v32) & 1) != 0);
          }
          while (v10 < v31)
          {
            v97 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v31;
            *(_OWORD *)v31 = v97;
            do
            {
              v33 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (!(*a3)(v28, v33));
            do
            {
              v34 = *((_QWORD *)v31 - 2);
              v31 -= 16;
            }
            while (((*a3)(v28, v34) & 1) != 0);
          }
          v35 = v10 - 16;
          if (v10 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)v35;
          a5 = 0;
          *(_OWORD *)v35 = v91;
          continue;
        }
        v15 = 0;
        v90 = *(_OWORD *)a1;
        v16 = *(_QWORD *)a1;
        do
        {
          v17 = (*a3)(*(_QWORD *)&a1[v15 + 16], v16);
          v15 += 16;
        }
        while ((v17 & 1) != 0);
        v18 = &a1[v15];
        v19 = a2;
        if (v15 == 16)
        {
          do
          {
            if (v18 >= a2)
              break;
            v21 = *((_QWORD *)a2 - 2);
            a2 -= 16;
          }
          while (((*a3)(v21, v16) & 1) == 0);
        }
        else
        {
          do
          {
            v20 = *((_QWORD *)a2 - 2);
            a2 -= 16;
          }
          while (!(*a3)(v20, v16));
        }
        v10 = &a1[v15];
        if (v18 < a2)
        {
          v22 = a2;
          do
          {
            v96 = *(_OWORD *)v10;
            *(_OWORD *)v10 = *(_OWORD *)v22;
            *(_OWORD *)v22 = v96;
            do
            {
              v23 = *((_QWORD *)v10 + 2);
              v10 += 16;
            }
            while (((*a3)(v23, v16) & 1) != 0);
            do
            {
              v24 = *((_QWORD *)v22 - 2);
              v22 -= 16;
            }
            while (!(*a3)(v24, v16));
          }
          while (v10 < v22);
        }
        v25 = v10 - 16;
        if (v10 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)v25;
        *(_OWORD *)v25 = v90;
        v26 = v18 >= a2;
        a2 = v19;
        if (!v26)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(a1, v10 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v27 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, v10 - 16, a3);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>>(re::Serializer<re::EncoderRapidJSON<re::CFDataOutputStream,rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,re::internal::RapidJSONAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,re::internal::RapidJSONAllocator,0u>>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(v10, v19, a3))
        {
          if (v27)
            continue;
          goto LABEL_29;
        }
        a2 = v10 - 16;
        if (!v27)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 6;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 14) < *(float *)(v8 + 8))
        {
          v165 = *(_OWORD *)(v8 + 32);
          v174 = *(_OWORD *)(v8 + 48);
          v146 = *(_OWORD *)v8;
          v155 = *(_OWORD *)(v8 + 16);
          v52 = *((_OWORD *)a2 - 4);
          v53 = *((_OWORD *)a2 - 3);
          v54 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v8 + 32) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v8 + 48) = v54;
          *(_OWORD *)v8 = v52;
          *(_OWORD *)(v8 + 16) = v53;
          *((_OWORD *)a2 - 2) = v165;
          *((_OWORD *)a2 - 1) = v174;
          *((_OWORD *)a2 - 4) = v146;
          *((_OWORD *)a2 - 3) = v155;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v8, (float *)(v8 + 64), a2 - 16);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v8, (float *)(v8 + 64), (float *)(v8 + 128), (__int128 *)a2 - 4);
        return;
      case 5uLL:
        v55 = (__int128 *)(v8 + 64);
        v56 = (__int128 *)(v8 + 128);
        v57 = (__int128 *)(v8 + 192);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v8, (float *)(v8 + 64), (float *)(v8 + 128), (__int128 *)(v8 + 192));
        if (*(a2 - 14) < *(float *)(v8 + 200))
        {
          v58 = *v57;
          v156 = *(_OWORD *)(v8 + 208);
          v59 = *(_OWORD *)(v8 + 224);
          v175 = *(_OWORD *)(v8 + 240);
          v61 = *((_OWORD *)a2 - 2);
          v60 = *((_OWORD *)a2 - 1);
          v62 = *((_OWORD *)a2 - 3);
          *v57 = *((_OWORD *)a2 - 4);
          *(_OWORD *)(v8 + 208) = v62;
          *(_OWORD *)(v8 + 224) = v61;
          *(_OWORD *)(v8 + 240) = v60;
          *((_OWORD *)a2 - 2) = v59;
          *((_OWORD *)a2 - 1) = v175;
          *((_OWORD *)a2 - 4) = v58;
          *((_OWORD *)a2 - 3) = v156;
          if (*(float *)(v8 + 200) < *(float *)(v8 + 136))
          {
            v64 = *(_OWORD *)(v8 + 160);
            v63 = *(_OWORD *)(v8 + 176);
            v66 = *v56;
            v65 = *(_OWORD *)(v8 + 144);
            v67 = *(_OWORD *)(v8 + 208);
            *v56 = *v57;
            *(_OWORD *)(v8 + 144) = v67;
            v68 = *(_OWORD *)(v8 + 240);
            *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 224);
            *(_OWORD *)(v8 + 176) = v68;
            *v57 = v66;
            *(_OWORD *)(v8 + 208) = v65;
            *(_OWORD *)(v8 + 224) = v64;
            *(_OWORD *)(v8 + 240) = v63;
            if (*(float *)(v8 + 136) < *(float *)(v8 + 72))
            {
              v70 = *(_OWORD *)(v8 + 96);
              v69 = *(_OWORD *)(v8 + 112);
              v72 = *v55;
              v71 = *(_OWORD *)(v8 + 80);
              v73 = *(_OWORD *)(v8 + 144);
              *v55 = *v56;
              *(_OWORD *)(v8 + 80) = v73;
              v74 = *(_OWORD *)(v8 + 176);
              *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 160);
              *(_OWORD *)(v8 + 112) = v74;
              *v56 = v72;
              *(_OWORD *)(v8 + 144) = v71;
              *(_OWORD *)(v8 + 160) = v70;
              *(_OWORD *)(v8 + 176) = v69;
              if (*(float *)(v8 + 72) < *(float *)(v8 + 8))
              {
                v166 = *(_OWORD *)(v8 + 32);
                v176 = *(_OWORD *)(v8 + 48);
                v147 = *(_OWORD *)v8;
                v157 = *(_OWORD *)(v8 + 16);
                v75 = *(_OWORD *)(v8 + 80);
                *(_OWORD *)v8 = *v55;
                *(_OWORD *)(v8 + 16) = v75;
                v76 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 96);
                *(_OWORD *)(v8 + 48) = v76;
                *(_OWORD *)(v8 + 96) = v166;
                *(_OWORD *)(v8 + 112) = v176;
                *v55 = v147;
                *(_OWORD *)(v8 + 80) = v157;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 1535)
        {
          v77 = (float *)(v8 + 64);
          v79 = (float *)v8 == a2 || v77 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v79)
            {
              v80 = 0;
              v81 = v8;
              do
              {
                v82 = v77;
                v83 = *(float *)(v81 + 72);
                if (v83 < *(float *)(v81 + 8))
                {
                  v84 = *(_QWORD *)v77;
                  v148 = *(_OWORD *)(v81 + 76);
                  v158 = *(_OWORD *)(v81 + 92);
                  v167 = *(_OWORD *)(v81 + 108);
                  v177 = *(_DWORD *)(v81 + 124);
                  v85 = v80;
                  while (1)
                  {
                    v86 = (float *)(v8 + v85);
                    v87 = *(_OWORD *)(v8 + v85 + 16);
                    *((_OWORD *)v86 + 4) = *(_OWORD *)(v8 + v85);
                    *((_OWORD *)v86 + 5) = v87;
                    v88 = *(_OWORD *)(v8 + v85 + 48);
                    *((_OWORD *)v86 + 6) = *(_OWORD *)(v8 + v85 + 32);
                    *((_OWORD *)v86 + 7) = v88;
                    if (!v85)
                      break;
                    v85 -= 64;
                    if (v83 >= *(v86 - 14))
                    {
                      v89 = v8 + v85 + 64;
                      goto LABEL_78;
                    }
                  }
                  v89 = v8;
LABEL_78:
                  *(_QWORD *)v89 = v84;
                  *(float *)(v89 + 8) = v83;
                  *(_DWORD *)(v89 + 60) = v177;
                  *(_OWORD *)(v89 + 44) = v167;
                  *(_OWORD *)(v89 + 28) = v158;
                  *(_OWORD *)(v89 + 12) = v148;
                }
                v77 = v82 + 16;
                v80 += 64;
                v81 = (unint64_t)v82;
              }
              while (v82 + 16 != a2);
            }
          }
          else if (!v79)
          {
            do
            {
              v125 = (uint64_t)v77;
              v126 = *(float *)(a1 + 72);
              if (v126 < *(float *)(a1 + 8))
              {
                v127 = *(_QWORD *)v77;
                v151 = *(_OWORD *)(a1 + 76);
                v161 = *(_OWORD *)(a1 + 92);
                v170 = *(_OWORD *)(a1 + 108);
                v180 = *(_DWORD *)(a1 + 124);
                do
                {
                  v128 = *((_OWORD *)v77 - 3);
                  *(_OWORD *)v77 = *((_OWORD *)v77 - 4);
                  *((_OWORD *)v77 + 1) = v128;
                  v129 = *((_OWORD *)v77 - 1);
                  *((_OWORD *)v77 + 2) = *((_OWORD *)v77 - 2);
                  *((_OWORD *)v77 + 3) = v129;
                  v130 = *(v77 - 30);
                  v77 -= 16;
                }
                while (v126 < v130);
                *(_QWORD *)v77 = v127;
                v77[2] = v126;
                *((_DWORD *)v77 + 15) = v180;
                *(_OWORD *)(v77 + 11) = v170;
                *(_OWORD *)(v77 + 7) = v161;
                *(_OWORD *)(v77 + 3) = v151;
              }
              v77 = (float *)(v125 + 64);
              a1 = v125;
            }
            while ((float *)(v125 + 64) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v90 = (v10 - 2) >> 1;
            v91 = v90;
            do
            {
              v92 = v91;
              if (v90 >= v91)
              {
                v93 = (2 * v91) | 1;
                v94 = v8 + (v93 << 6);
                if (2 * v92 + 2 < (uint64_t)v10 && *(float *)(v94 + 8) < *(float *)(v94 + 72))
                {
                  v94 += 64;
                  v93 = 2 * v92 + 2;
                }
                v95 = *(float *)(v8 + (v92 << 6) + 8);
                if (*(float *)(v94 + 8) >= v95)
                {
                  v96 = v8 + (v92 << 6);
                  v97 = *(_QWORD *)v96;
                  v178 = *(_DWORD *)(v96 + 60);
                  v159 = *(_OWORD *)(v96 + 28);
                  v168 = *(_OWORD *)(v96 + 44);
                  v149 = *(_OWORD *)(v96 + 12);
                  do
                  {
                    v98 = (_OWORD *)v96;
                    v96 = v94;
                    v99 = *(_OWORD *)v94;
                    v100 = *(_OWORD *)(v94 + 16);
                    v101 = *(_OWORD *)(v94 + 48);
                    v98[2] = *(_OWORD *)(v94 + 32);
                    v98[3] = v101;
                    *v98 = v99;
                    v98[1] = v100;
                    if (v90 < v93)
                      break;
                    v102 = 2 * v93;
                    v93 = (2 * v93) | 1;
                    v94 = v8 + (v93 << 6);
                    v103 = v102 + 2;
                    if (v103 < (uint64_t)v10 && *(float *)(v94 + 8) < *(float *)(v94 + 72))
                    {
                      v94 += 64;
                      v93 = v103;
                    }
                  }
                  while (*(float *)(v94 + 8) >= v95);
                  *(_QWORD *)v96 = v97;
                  *(float *)(v96 + 8) = v95;
                  *(_DWORD *)(v96 + 60) = v178;
                  *(_OWORD *)(v96 + 44) = v168;
                  *(_OWORD *)(v96 + 28) = v159;
                  *(_OWORD *)(v96 + 12) = v149;
                }
              }
              v91 = v92 - 1;
            }
            while (v92);
            v104 = (unint64_t)v9 >> 6;
            do
            {
              v105 = 0;
              v169 = *(_OWORD *)(v8 + 32);
              v179 = *(_OWORD *)(v8 + 48);
              v150 = *(_OWORD *)v8;
              v160 = *(_OWORD *)(v8 + 16);
              v106 = v8;
              do
              {
                v107 = (_OWORD *)v106;
                v106 += (v105 + 1) << 6;
                v108 = 2 * v105;
                v105 = (2 * v105) | 1;
                v109 = v108 + 2;
                if (v109 < v104 && *(float *)(v106 + 8) < *(float *)(v106 + 72))
                {
                  v106 += 64;
                  v105 = v109;
                }
                v110 = *(_OWORD *)v106;
                v111 = *(_OWORD *)(v106 + 16);
                v112 = *(_OWORD *)(v106 + 48);
                v107[2] = *(_OWORD *)(v106 + 32);
                v107[3] = v112;
                *v107 = v110;
                v107[1] = v111;
              }
              while (v105 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
              a2 -= 16;
              if ((float *)v106 == a2)
              {
                *(_OWORD *)(v106 + 32) = v169;
                *(_OWORD *)(v106 + 48) = v179;
                *(_OWORD *)v106 = v150;
                *(_OWORD *)(v106 + 16) = v160;
              }
              else
              {
                v113 = *(_OWORD *)a2;
                v114 = *((_OWORD *)a2 + 1);
                v115 = *((_OWORD *)a2 + 3);
                *(_OWORD *)(v106 + 32) = *((_OWORD *)a2 + 2);
                *(_OWORD *)(v106 + 48) = v115;
                *(_OWORD *)v106 = v113;
                *(_OWORD *)(v106 + 16) = v114;
                *((_OWORD *)a2 + 2) = v169;
                *((_OWORD *)a2 + 3) = v179;
                *(_OWORD *)a2 = v150;
                *((_OWORD *)a2 + 1) = v160;
                v116 = v106 - v8 + 64;
                if (v116 >= 65)
                {
                  v117 = (((unint64_t)v116 >> 6) - 2) >> 1;
                  v118 = *(float *)(v106 + 8);
                  if (*(float *)(v8 + (v117 << 6) + 8) < v118)
                  {
                    v119 = *(_QWORD *)v106;
                    v142 = *(_DWORD *)(v106 + 60);
                    v136 = *(_OWORD *)(v106 + 28);
                    v139 = *(_OWORD *)(v106 + 44);
                    v133 = *(_OWORD *)(v106 + 12);
                    do
                    {
                      v120 = (_OWORD *)v106;
                      v106 = v8 + (v117 << 6);
                      v121 = *(_OWORD *)v106;
                      v122 = *(_OWORD *)(v106 + 16);
                      v123 = *(_OWORD *)(v106 + 48);
                      v120[2] = *(_OWORD *)(v106 + 32);
                      v120[3] = v123;
                      *v120 = v121;
                      v120[1] = v122;
                      if (!v117)
                        break;
                      v117 = (v117 - 1) >> 1;
                    }
                    while (*(float *)(v8 + (v117 << 6) + 8) < v118);
                    *(_QWORD *)v106 = v119;
                    *(float *)(v106 + 8) = v118;
                    *(_DWORD *)(v106 + 60) = v142;
                    *(_OWORD *)(v106 + 44) = v139;
                    *(_OWORD *)(v106 + 28) = v136;
                    *(_OWORD *)(v106 + 12) = v133;
                  }
                }
              }
            }
            while (v104-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + (v10 >> 1 << 6);
        if ((unint64_t)v9 <= 0x2000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + (v10 >> 1 << 6)), (float *)a1, a2 - 16);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + (v10 >> 1 << 6)), a2 - 16);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 64), (float *)(v12 - 64), a2 - 32);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 128), (float *)(a1 + 64 + (v11 << 6)), a2 - 48);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(v12 - 64), (float *)v12, (float *)(a1 + 64 + (v11 << 6)));
          v162 = *(_OWORD *)(a1 + 32);
          v171 = *(_OWORD *)(a1 + 48);
          v143 = *(_OWORD *)a1;
          v152 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)v12;
          v14 = *(_OWORD *)(v12 + 16);
          v15 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v12 + 32);
          *(_OWORD *)(a1 + 48) = v15;
          *(_OWORD *)a1 = v13;
          *(_OWORD *)(a1 + 16) = v14;
          *(_OWORD *)(v12 + 32) = v162;
          *(_OWORD *)(v12 + 48) = v171;
          *(_OWORD *)v12 = v143;
          *(_OWORD *)(v12 + 16) = v152;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = *(float *)(a1 + 8);
          if (*(float *)(a1 - 56) < v16)
            goto LABEL_11;
          v36 = *(_QWORD *)a1;
          v141 = *(_DWORD *)(a1 + 60);
          v135 = *(_OWORD *)(a1 + 28);
          v138 = *(_OWORD *)(a1 + 44);
          v132 = *(_OWORD *)(a1 + 12);
          if (v16 >= *(a2 - 14))
          {
            v39 = a1 + 64;
            do
            {
              v8 = v39;
              if (v39 >= (unint64_t)a2)
                break;
              v40 = *(float *)(v39 + 8);
              v39 += 64;
            }
            while (v16 >= v40);
          }
          else
          {
            v37 = a1;
            do
            {
              v8 = v37 + 64;
              v38 = *(float *)(v37 + 72);
              v37 += 64;
            }
            while (v16 >= v38);
          }
          v41 = a2;
          if (v8 < (unint64_t)a2)
          {
            v42 = a2;
            do
            {
              v41 = v42 - 16;
              v43 = *(v42 - 14);
              v42 -= 16;
            }
            while (v16 < v43);
          }
          while (v8 < (unint64_t)v41)
          {
            v164 = *(_OWORD *)(v8 + 32);
            v173 = *(_OWORD *)(v8 + 48);
            v145 = *(_OWORD *)v8;
            v154 = *(_OWORD *)(v8 + 16);
            v44 = *(_OWORD *)v41;
            v45 = *((_OWORD *)v41 + 1);
            v46 = *((_OWORD *)v41 + 3);
            *(_OWORD *)(v8 + 32) = *((_OWORD *)v41 + 2);
            *(_OWORD *)(v8 + 48) = v46;
            *(_OWORD *)v8 = v44;
            *(_OWORD *)(v8 + 16) = v45;
            *((_OWORD *)v41 + 2) = v164;
            *((_OWORD *)v41 + 3) = v173;
            *(_OWORD *)v41 = v145;
            *((_OWORD *)v41 + 1) = v154;
            do
            {
              v47 = *(float *)(v8 + 72);
              v8 += 64;
            }
            while (v16 >= v47);
            do
            {
              v48 = *(v41 - 14);
              v41 -= 16;
            }
            while (v16 < v48);
          }
          if (v8 - 64 != a1)
          {
            v49 = *(_OWORD *)(v8 - 64);
            v50 = *(_OWORD *)(v8 - 48);
            v51 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 48) = v51;
            *(_OWORD *)a1 = v49;
            *(_OWORD *)(a1 + 16) = v50;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 64) = v36;
          *(float *)(v8 - 56) = v16;
          *(_DWORD *)(v8 - 4) = v141;
          *(_OWORD *)(v8 - 20) = v138;
          *(_OWORD *)(v8 - 36) = v135;
          *(_OWORD *)(v8 - 52) = v132;
          continue;
        }
        v16 = *(float *)(a1 + 8);
LABEL_11:
        v17 = 0;
        v18 = *(_QWORD *)a1;
        v140 = *(_DWORD *)(a1 + 60);
        v134 = *(_OWORD *)(a1 + 28);
        v137 = *(_OWORD *)(a1 + 44);
        v131 = *(_OWORD *)(a1 + 12);
        do
        {
          v19 = *(float *)(a1 + v17 + 72);
          v17 += 64;
        }
        while (v19 < v16);
        v20 = a1 + v17;
        v21 = a2;
        if (v17 == 64)
        {
          v24 = a2;
          while (v20 < (unint64_t)v24)
          {
            v22 = v24 - 16;
            v25 = *(v24 - 14);
            v24 -= 16;
            if (v25 < v16)
              goto LABEL_21;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = v21 - 16;
            v23 = *(v21 - 14);
            v21 -= 16;
          }
          while (v23 >= v16);
        }
LABEL_21:
        v8 = v20;
        if (v20 < (unint64_t)v22)
        {
          v26 = v22;
          do
          {
            v163 = *(_OWORD *)(v8 + 32);
            v172 = *(_OWORD *)(v8 + 48);
            v144 = *(_OWORD *)v8;
            v153 = *(_OWORD *)(v8 + 16);
            v27 = *(_OWORD *)v26;
            v28 = *((_OWORD *)v26 + 1);
            v29 = *((_OWORD *)v26 + 3);
            *(_OWORD *)(v8 + 32) = *((_OWORD *)v26 + 2);
            *(_OWORD *)(v8 + 48) = v29;
            *(_OWORD *)v8 = v27;
            *(_OWORD *)(v8 + 16) = v28;
            *((_OWORD *)v26 + 2) = v163;
            *((_OWORD *)v26 + 3) = v172;
            *(_OWORD *)v26 = v144;
            *((_OWORD *)v26 + 1) = v153;
            do
            {
              v30 = *(float *)(v8 + 72);
              v8 += 64;
            }
            while (v30 < v16);
            do
            {
              v31 = *(v26 - 14);
              v26 -= 16;
            }
            while (v31 >= v16);
          }
          while (v8 < (unint64_t)v26);
        }
        if (v8 - 64 != a1)
        {
          v32 = *(_OWORD *)(v8 - 64);
          v33 = *(_OWORD *)(v8 - 48);
          v34 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 48) = v34;
          *(_OWORD *)a1 = v32;
          *(_OWORD *)(a1 + 16) = v33;
        }
        *(_QWORD *)(v8 - 64) = v18;
        *(float *)(v8 - 56) = v16;
        *(_DWORD *)(v8 - 4) = v140;
        *(_OWORD *)(v8 - 20) = v137;
        *(_OWORD *)(v8 - 36) = v134;
        *(_OWORD *)(v8 - 52) = v131;
        if (v20 < (unint64_t)v22)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(a1, v8 - 64, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v35 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(a1, v8 - 64);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_0 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(v8, (uint64_t)a2))
        {
          if (v35)
            continue;
          goto LABEL_32;
        }
        a2 = (float *)(v8 - 64);
        if (!v35)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 6;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v46 = *(a2 - 16);
        v45 = a2 - 16;
        if (v46 < *(float *)v8)
        {
          v157 = *(_OWORD *)(v8 + 32);
          v166 = *(_OWORD *)(v8 + 48);
          v138 = *(_OWORD *)v8;
          v147 = *(_OWORD *)(v8 + 16);
          v47 = *(_OWORD *)v45;
          v48 = *((_OWORD *)v45 + 1);
          v49 = *((_OWORD *)v45 + 3);
          *(_OWORD *)(v8 + 32) = *((_OWORD *)v45 + 2);
          *(_OWORD *)(v8 + 48) = v49;
          *(_OWORD *)v8 = v47;
          *(_OWORD *)(v8 + 16) = v48;
          *((_OWORD *)v45 + 2) = v157;
          *((_OWORD *)v45 + 3) = v166;
          *(_OWORD *)v45 = v138;
          *((_OWORD *)v45 + 1) = v147;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v8, (float *)(v8 + 64), a2 - 16);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v8, (float *)(v8 + 64), (float *)(v8 + 128), (__int128 *)a2 - 4);
        return;
      case 5uLL:
        v50 = (__int128 *)(v8 + 64);
        v51 = (__int128 *)(v8 + 128);
        v52 = (__int128 *)(v8 + 192);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v8, (float *)(v8 + 64), (float *)(v8 + 128), (__int128 *)(v8 + 192));
        v54 = *(a2 - 16);
        v53 = a2 - 16;
        if (v54 < *(float *)(v8 + 192))
        {
          v55 = *v52;
          v148 = *(_OWORD *)(v8 + 208);
          v56 = *(_OWORD *)(v8 + 224);
          v167 = *(_OWORD *)(v8 + 240);
          v58 = *((_OWORD *)v53 + 2);
          v57 = *((_OWORD *)v53 + 3);
          v59 = *((_OWORD *)v53 + 1);
          *v52 = *(_OWORD *)v53;
          *(_OWORD *)(v8 + 208) = v59;
          *(_OWORD *)(v8 + 224) = v58;
          *(_OWORD *)(v8 + 240) = v57;
          *((_OWORD *)v53 + 2) = v56;
          *((_OWORD *)v53 + 3) = v167;
          *(_OWORD *)v53 = v55;
          *((_OWORD *)v53 + 1) = v148;
          if (*(float *)v52 < *(float *)v51)
          {
            v61 = *(_OWORD *)(v8 + 160);
            v60 = *(_OWORD *)(v8 + 176);
            v63 = *v51;
            v62 = *(_OWORD *)(v8 + 144);
            v64 = *(_OWORD *)(v8 + 208);
            *v51 = *v52;
            *(_OWORD *)(v8 + 144) = v64;
            v65 = *(_OWORD *)(v8 + 240);
            *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 224);
            *(_OWORD *)(v8 + 176) = v65;
            *v52 = v63;
            *(_OWORD *)(v8 + 208) = v62;
            *(_OWORD *)(v8 + 224) = v61;
            *(_OWORD *)(v8 + 240) = v60;
            if (*(float *)v51 < *(float *)v50)
            {
              v67 = *(_OWORD *)(v8 + 96);
              v66 = *(_OWORD *)(v8 + 112);
              v69 = *v50;
              v68 = *(_OWORD *)(v8 + 80);
              v70 = *(_OWORD *)(v8 + 144);
              *v50 = *v51;
              *(_OWORD *)(v8 + 80) = v70;
              v71 = *(_OWORD *)(v8 + 176);
              *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 160);
              *(_OWORD *)(v8 + 112) = v71;
              *v51 = v69;
              *(_OWORD *)(v8 + 144) = v68;
              *(_OWORD *)(v8 + 160) = v67;
              *(_OWORD *)(v8 + 176) = v66;
              if (*(float *)(v8 + 64) < *(float *)v8)
              {
                v158 = *(_OWORD *)(v8 + 32);
                v168 = *(_OWORD *)(v8 + 48);
                v139 = *(_OWORD *)v8;
                v149 = *(_OWORD *)(v8 + 16);
                v72 = *(_OWORD *)(v8 + 80);
                *(_OWORD *)v8 = *v50;
                *(_OWORD *)(v8 + 16) = v72;
                v73 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 96);
                *(_OWORD *)(v8 + 48) = v73;
                *(_OWORD *)(v8 + 96) = v158;
                *(_OWORD *)(v8 + 112) = v168;
                *v50 = v139;
                *(_OWORD *)(v8 + 80) = v149;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 1535)
        {
          v74 = (float *)(v8 + 64);
          v76 = (float *)v8 == a2 || v74 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v76)
            {
              v77 = 0;
              v78 = v8;
              do
              {
                v79 = v74;
                v80 = *(float *)(v78 + 64);
                if (v80 < *(float *)v78)
                {
                  v140 = *(_OWORD *)(v78 + 68);
                  v150 = *(_OWORD *)(v78 + 84);
                  *(_OWORD *)v159 = *(_OWORD *)(v78 + 100);
                  *(_OWORD *)&v159[12] = *(_OWORD *)(v78 + 112);
                  v81 = v77;
                  while (1)
                  {
                    v82 = (float *)(v8 + v81);
                    v83 = *(_OWORD *)(v8 + v81 + 16);
                    *((_OWORD *)v82 + 4) = *(_OWORD *)(v8 + v81);
                    *((_OWORD *)v82 + 5) = v83;
                    v84 = *(_OWORD *)(v8 + v81 + 48);
                    *((_OWORD *)v82 + 6) = *(_OWORD *)(v8 + v81 + 32);
                    *((_OWORD *)v82 + 7) = v84;
                    if (!v81)
                      break;
                    v81 -= 64;
                    if (v80 >= *(v82 - 16))
                    {
                      v85 = v8 + v81 + 64;
                      goto LABEL_75;
                    }
                  }
                  v85 = v8;
LABEL_75:
                  *(float *)v85 = v80;
                  *(_OWORD *)(v85 + 48) = *(_OWORD *)&v159[12];
                  *(_OWORD *)(v85 + 36) = *(_OWORD *)v159;
                  *(_OWORD *)(v85 + 20) = v150;
                  *(_OWORD *)(v85 + 4) = v140;
                }
                v74 = v79 + 16;
                v77 += 64;
                v78 = (unint64_t)v79;
              }
              while (v79 + 16 != a2);
            }
          }
          else if (!v76)
          {
            do
            {
              v120 = (uint64_t)v74;
              v121 = *(float *)(a1 + 64);
              if (v121 < *(float *)a1)
              {
                v143 = *(_OWORD *)(a1 + 68);
                v153 = *(_OWORD *)(a1 + 84);
                *(_OWORD *)v162 = *(_OWORD *)(a1 + 100);
                *(_OWORD *)&v162[12] = *(_OWORD *)(a1 + 112);
                v122 = v74;
                do
                {
                  v123 = *((_OWORD *)v122 - 3);
                  *(_OWORD *)v122 = *((_OWORD *)v122 - 4);
                  *((_OWORD *)v122 + 1) = v123;
                  v124 = *((_OWORD *)v122 - 1);
                  *((_OWORD *)v122 + 2) = *((_OWORD *)v122 - 2);
                  *((_OWORD *)v122 + 3) = v124;
                  v125 = *(v122 - 32);
                  v122 -= 16;
                }
                while (v121 < v125);
                *v122 = v121;
                *((_OWORD *)v122 + 3) = *(_OWORD *)&v162[12];
                *(_OWORD *)(v122 + 9) = *(_OWORD *)v162;
                *(_OWORD *)(v122 + 5) = v153;
                *(_OWORD *)(v122 + 1) = v143;
              }
              v74 += 16;
              a1 = v120;
            }
            while ((float *)(v120 + 64) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v86 = (v10 - 2) >> 1;
            v87 = v86;
            do
            {
              v88 = v87;
              if (v86 >= v87)
              {
                v89 = (2 * v87) | 1;
                v90 = v8 + (v89 << 6);
                if (2 * v88 + 2 < (uint64_t)v10 && *(float *)v90 < *(float *)(v90 + 64))
                {
                  v90 += 64;
                  v89 = 2 * v88 + 2;
                }
                v91 = v8 + (v88 << 6);
                v92 = *(float *)v91;
                if (*(float *)v90 >= *(float *)v91)
                {
                  *(_OWORD *)&v160[12] = *(_OWORD *)(v91 + 48);
                  v151 = *(_OWORD *)(v91 + 20);
                  *(_OWORD *)v160 = *(_OWORD *)(v91 + 36);
                  v141 = *(_OWORD *)(v91 + 4);
                  do
                  {
                    v93 = (_OWORD *)v91;
                    v91 = v90;
                    v94 = *(_OWORD *)v90;
                    v95 = *(_OWORD *)(v90 + 16);
                    v96 = *(_OWORD *)(v90 + 48);
                    v93[2] = *(_OWORD *)(v90 + 32);
                    v93[3] = v96;
                    *v93 = v94;
                    v93[1] = v95;
                    if (v86 < v89)
                      break;
                    v97 = 2 * v89;
                    v89 = (2 * v89) | 1;
                    v90 = v8 + (v89 << 6);
                    v98 = v97 + 2;
                    if (v98 < (uint64_t)v10 && *(float *)v90 < *(float *)(v90 + 64))
                    {
                      v90 += 64;
                      v89 = v98;
                    }
                  }
                  while (*(float *)v90 >= v92);
                  *(float *)v91 = v92;
                  *(_OWORD *)(v91 + 48) = *(_OWORD *)&v160[12];
                  *(_OWORD *)(v91 + 36) = *(_OWORD *)v160;
                  *(_OWORD *)(v91 + 20) = v151;
                  *(_OWORD *)(v91 + 4) = v141;
                }
              }
              v87 = v88 - 1;
            }
            while (v88);
            v99 = (unint64_t)v9 >> 6;
            do
            {
              v100 = 0;
              v161 = *(_OWORD *)(v8 + 32);
              v169 = *(_OWORD *)(v8 + 48);
              v142 = *(_OWORD *)v8;
              v152 = *(_OWORD *)(v8 + 16);
              v101 = (float *)v8;
              do
              {
                v102 = v101;
                v101 += 16 * v100 + 16;
                v103 = 2 * v100;
                v100 = (2 * v100) | 1;
                v104 = v103 + 2;
                if (v104 < v99 && *v101 < v101[16])
                {
                  v101 += 16;
                  v100 = v104;
                }
                v105 = *(_OWORD *)v101;
                v106 = *((_OWORD *)v101 + 1);
                v107 = *((_OWORD *)v101 + 3);
                *((_OWORD *)v102 + 2) = *((_OWORD *)v101 + 2);
                *((_OWORD *)v102 + 3) = v107;
                *(_OWORD *)v102 = v105;
                *((_OWORD *)v102 + 1) = v106;
              }
              while (v100 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
              a2 -= 16;
              if (v101 == a2)
              {
                *((_OWORD *)v101 + 2) = v161;
                *((_OWORD *)v101 + 3) = v169;
                *(_OWORD *)v101 = v142;
                *((_OWORD *)v101 + 1) = v152;
              }
              else
              {
                v108 = *(_OWORD *)a2;
                v109 = *((_OWORD *)a2 + 1);
                v110 = *((_OWORD *)a2 + 3);
                *((_OWORD *)v101 + 2) = *((_OWORD *)a2 + 2);
                *((_OWORD *)v101 + 3) = v110;
                *(_OWORD *)v101 = v108;
                *((_OWORD *)v101 + 1) = v109;
                *((_OWORD *)a2 + 2) = v161;
                *((_OWORD *)a2 + 3) = v169;
                *(_OWORD *)a2 = v142;
                *((_OWORD *)a2 + 1) = v152;
                v111 = (uint64_t)v101 - v8 + 64;
                if (v111 >= 65)
                {
                  v112 = (((unint64_t)v111 >> 6) - 2) >> 1;
                  v113 = (float *)(v8 + (v112 << 6));
                  v114 = *v101;
                  if (*v113 < *v101)
                  {
                    *(_OWORD *)&v134[12] = *((_OWORD *)v101 + 3);
                    v131 = *(_OWORD *)(v101 + 5);
                    *(_OWORD *)v134 = *(_OWORD *)(v101 + 9);
                    v128 = *(_OWORD *)(v101 + 1);
                    do
                    {
                      v115 = v101;
                      v101 = v113;
                      v116 = *(_OWORD *)v113;
                      v117 = *((_OWORD *)v113 + 1);
                      v118 = *((_OWORD *)v113 + 3);
                      *((_OWORD *)v115 + 2) = *((_OWORD *)v113 + 2);
                      *((_OWORD *)v115 + 3) = v118;
                      *(_OWORD *)v115 = v116;
                      *((_OWORD *)v115 + 1) = v117;
                      if (!v112)
                        break;
                      v112 = (v112 - 1) >> 1;
                      v113 = (float *)(v8 + (v112 << 6));
                    }
                    while (*v113 < v114);
                    *v101 = v114;
                    *((_OWORD *)v101 + 3) = *(_OWORD *)&v134[12];
                    *(_OWORD *)(v101 + 9) = *(_OWORD *)v134;
                    *(_OWORD *)(v101 + 5) = v131;
                    *(_OWORD *)(v101 + 1) = v128;
                  }
                }
              }
            }
            while (v99-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + (v10 >> 1 << 6);
        if ((unint64_t)v9 <= 0x2000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + (v10 >> 1 << 6)), (float *)a1, a2 - 16);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + (v10 >> 1 << 6)), a2 - 16);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 64), (float *)(v12 - 64), a2 - 32);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 128), (float *)(a1 + 64 + (v11 << 6)), a2 - 48);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(v12 - 64), (float *)v12, (float *)(a1 + 64 + (v11 << 6)));
          v154 = *(_OWORD *)(a1 + 32);
          v163 = *(_OWORD *)(a1 + 48);
          v135 = *(_OWORD *)a1;
          v144 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)v12;
          v14 = *(_OWORD *)(v12 + 16);
          v15 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v12 + 32);
          *(_OWORD *)(a1 + 48) = v15;
          *(_OWORD *)a1 = v13;
          *(_OWORD *)(a1 + 16) = v14;
          *(_OWORD *)(v12 + 32) = v154;
          *(_OWORD *)(v12 + 48) = v163;
          *(_OWORD *)v12 = v135;
          *(_OWORD *)(v12 + 16) = v144;
        }
        --a3;
        v16 = *(float *)a1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 64) >= v16)
        {
          *(_OWORD *)&v133[12] = *(_OWORD *)(a1 + 48);
          v130 = *(_OWORD *)(a1 + 20);
          *(_OWORD *)v133 = *(_OWORD *)(a1 + 36);
          v127 = *(_OWORD *)(a1 + 4);
          if (v16 >= *(a2 - 16))
          {
            v34 = a1 + 64;
            do
            {
              v8 = v34;
              if (v34 >= (unint64_t)a2)
                break;
              v34 += 64;
            }
            while (v16 >= *(float *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v33 = *(float *)(v8 + 64);
              v8 += 64;
            }
            while (v16 >= v33);
          }
          v35 = a2;
          if (v8 < (unint64_t)a2)
          {
            v35 = a2;
            do
            {
              v36 = *(v35 - 16);
              v35 -= 16;
            }
            while (v16 < v36);
          }
          while (v8 < (unint64_t)v35)
          {
            v156 = *(_OWORD *)(v8 + 32);
            v165 = *(_OWORD *)(v8 + 48);
            v137 = *(_OWORD *)v8;
            v146 = *(_OWORD *)(v8 + 16);
            v37 = *(_OWORD *)v35;
            v38 = *((_OWORD *)v35 + 1);
            v39 = *((_OWORD *)v35 + 3);
            *(_OWORD *)(v8 + 32) = *((_OWORD *)v35 + 2);
            *(_OWORD *)(v8 + 48) = v39;
            *(_OWORD *)v8 = v37;
            *(_OWORD *)(v8 + 16) = v38;
            *((_OWORD *)v35 + 2) = v156;
            *((_OWORD *)v35 + 3) = v165;
            *(_OWORD *)v35 = v137;
            *((_OWORD *)v35 + 1) = v146;
            do
            {
              v40 = *(float *)(v8 + 64);
              v8 += 64;
            }
            while (v16 >= v40);
            do
            {
              v41 = *(v35 - 16);
              v35 -= 16;
            }
            while (v16 < v41);
          }
          if (v8 - 64 != a1)
          {
            v42 = *(_OWORD *)(v8 - 64);
            v43 = *(_OWORD *)(v8 - 48);
            v44 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 48) = v44;
            *(_OWORD *)a1 = v42;
            *(_OWORD *)(a1 + 16) = v43;
          }
          a4 = 0;
          *(float *)(v8 - 64) = v16;
          *(_OWORD *)(v8 - 16) = *(_OWORD *)&v133[12];
          *(_OWORD *)(v8 - 28) = *(_OWORD *)v133;
          *(_OWORD *)(v8 - 44) = v130;
          *(_OWORD *)(v8 - 60) = v127;
          continue;
        }
        v17 = 0;
        *(_OWORD *)&v132[12] = *(_OWORD *)(a1 + 48);
        v129 = *(_OWORD *)(a1 + 20);
        *(_OWORD *)v132 = *(_OWORD *)(a1 + 36);
        v126 = *(_OWORD *)(a1 + 4);
        do
        {
          v18 = *(float *)(a1 + v17 + 64);
          v17 += 64;
        }
        while (v18 < v16);
        v19 = a1 + v17;
        v20 = a2;
        if (v17 == 64)
        {
          v20 = a2;
          do
          {
            if (v19 >= (unint64_t)v20)
              break;
            v22 = *(v20 - 16);
            v20 -= 16;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 16);
            v20 -= 16;
          }
          while (v21 >= v16);
        }
        v8 = a1 + v17;
        if (v19 < (unint64_t)v20)
        {
          v23 = v20;
          do
          {
            v155 = *(_OWORD *)(v8 + 32);
            v164 = *(_OWORD *)(v8 + 48);
            v136 = *(_OWORD *)v8;
            v145 = *(_OWORD *)(v8 + 16);
            v24 = *(_OWORD *)v23;
            v25 = *((_OWORD *)v23 + 1);
            v26 = *((_OWORD *)v23 + 3);
            *(_OWORD *)(v8 + 32) = *((_OWORD *)v23 + 2);
            *(_OWORD *)(v8 + 48) = v26;
            *(_OWORD *)v8 = v24;
            *(_OWORD *)(v8 + 16) = v25;
            *((_OWORD *)v23 + 2) = v155;
            *((_OWORD *)v23 + 3) = v164;
            *(_OWORD *)v23 = v136;
            *((_OWORD *)v23 + 1) = v145;
            do
            {
              v27 = *(float *)(v8 + 64);
              v8 += 64;
            }
            while (v27 < v16);
            do
            {
              v28 = *(v23 - 16);
              v23 -= 16;
            }
            while (v28 >= v16);
          }
          while (v8 < (unint64_t)v23);
        }
        if (v8 - 64 != a1)
        {
          v29 = *(_OWORD *)(v8 - 64);
          v30 = *(_OWORD *)(v8 - 48);
          v31 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 48) = v31;
          *(_OWORD *)a1 = v29;
          *(_OWORD *)(a1 + 16) = v30;
        }
        *(float *)(v8 - 64) = v16;
        *(_OWORD *)(v8 - 16) = *(_OWORD *)&v132[12];
        *(_OWORD *)(v8 - 28) = *(_OWORD *)v132;
        *(_OWORD *)(v8 - 44) = v129;
        *(_OWORD *)(v8 - 60) = v126;
        if (v19 < (unint64_t)v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(a1, v8 - 64, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(a1, v8 - 64);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(v8, (uint64_t)a2))
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = (float *)(v8 - 64);
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 6;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v46 = *(a2 - 16);
        v45 = a2 - 16;
        if (v46 < *(float *)v8)
        {
          v157 = *(_OWORD *)(v8 + 32);
          v166 = *(_OWORD *)(v8 + 48);
          v138 = *(_OWORD *)v8;
          v147 = *(_OWORD *)(v8 + 16);
          v47 = *(_OWORD *)v45;
          v48 = *((_OWORD *)v45 + 1);
          v49 = *((_OWORD *)v45 + 3);
          *(_OWORD *)(v8 + 32) = *((_OWORD *)v45 + 2);
          *(_OWORD *)(v8 + 48) = v49;
          *(_OWORD *)v8 = v47;
          *(_OWORD *)(v8 + 16) = v48;
          *((_OWORD *)v45 + 2) = v157;
          *((_OWORD *)v45 + 3) = v166;
          *(_OWORD *)v45 = v138;
          *((_OWORD *)v45 + 1) = v147;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v8, (float *)(v8 + 64), a2 - 16);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v8, (float *)(v8 + 64), (float *)(v8 + 128), (__int128 *)a2 - 4);
        return;
      case 5uLL:
        v50 = (__int128 *)(v8 + 64);
        v51 = (__int128 *)(v8 + 128);
        v52 = (__int128 *)(v8 + 192);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)v8, (float *)(v8 + 64), (float *)(v8 + 128), (__int128 *)(v8 + 192));
        v54 = *(a2 - 16);
        v53 = a2 - 16;
        if (v54 < *(float *)(v8 + 192))
        {
          v55 = *v52;
          v148 = *(_OWORD *)(v8 + 208);
          v56 = *(_OWORD *)(v8 + 224);
          v167 = *(_OWORD *)(v8 + 240);
          v58 = *((_OWORD *)v53 + 2);
          v57 = *((_OWORD *)v53 + 3);
          v59 = *((_OWORD *)v53 + 1);
          *v52 = *(_OWORD *)v53;
          *(_OWORD *)(v8 + 208) = v59;
          *(_OWORD *)(v8 + 224) = v58;
          *(_OWORD *)(v8 + 240) = v57;
          *((_OWORD *)v53 + 2) = v56;
          *((_OWORD *)v53 + 3) = v167;
          *(_OWORD *)v53 = v55;
          *((_OWORD *)v53 + 1) = v148;
          if (*(float *)v52 < *(float *)v51)
          {
            v61 = *(_OWORD *)(v8 + 160);
            v60 = *(_OWORD *)(v8 + 176);
            v63 = *v51;
            v62 = *(_OWORD *)(v8 + 144);
            v64 = *(_OWORD *)(v8 + 208);
            *v51 = *v52;
            *(_OWORD *)(v8 + 144) = v64;
            v65 = *(_OWORD *)(v8 + 240);
            *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 224);
            *(_OWORD *)(v8 + 176) = v65;
            *v52 = v63;
            *(_OWORD *)(v8 + 208) = v62;
            *(_OWORD *)(v8 + 224) = v61;
            *(_OWORD *)(v8 + 240) = v60;
            if (*(float *)v51 < *(float *)v50)
            {
              v67 = *(_OWORD *)(v8 + 96);
              v66 = *(_OWORD *)(v8 + 112);
              v69 = *v50;
              v68 = *(_OWORD *)(v8 + 80);
              v70 = *(_OWORD *)(v8 + 144);
              *v50 = *v51;
              *(_OWORD *)(v8 + 80) = v70;
              v71 = *(_OWORD *)(v8 + 176);
              *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 160);
              *(_OWORD *)(v8 + 112) = v71;
              *v51 = v69;
              *(_OWORD *)(v8 + 144) = v68;
              *(_OWORD *)(v8 + 160) = v67;
              *(_OWORD *)(v8 + 176) = v66;
              if (*(float *)(v8 + 64) < *(float *)v8)
              {
                v158 = *(_OWORD *)(v8 + 32);
                v168 = *(_OWORD *)(v8 + 48);
                v139 = *(_OWORD *)v8;
                v149 = *(_OWORD *)(v8 + 16);
                v72 = *(_OWORD *)(v8 + 80);
                *(_OWORD *)v8 = *v50;
                *(_OWORD *)(v8 + 16) = v72;
                v73 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 96);
                *(_OWORD *)(v8 + 48) = v73;
                *(_OWORD *)(v8 + 96) = v158;
                *(_OWORD *)(v8 + 112) = v168;
                *v50 = v139;
                *(_OWORD *)(v8 + 80) = v149;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 1535)
        {
          v74 = (float *)(v8 + 64);
          v76 = (float *)v8 == a2 || v74 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v76)
            {
              v77 = 0;
              v78 = v8;
              do
              {
                v79 = v74;
                v80 = *(float *)(v78 + 64);
                if (v80 < *(float *)v78)
                {
                  v140 = *(_OWORD *)(v78 + 68);
                  v150 = *(_OWORD *)(v78 + 84);
                  *(_OWORD *)v159 = *(_OWORD *)(v78 + 100);
                  *(_OWORD *)&v159[12] = *(_OWORD *)(v78 + 112);
                  v81 = v77;
                  while (1)
                  {
                    v82 = (float *)(v8 + v81);
                    v83 = *(_OWORD *)(v8 + v81 + 16);
                    *((_OWORD *)v82 + 4) = *(_OWORD *)(v8 + v81);
                    *((_OWORD *)v82 + 5) = v83;
                    v84 = *(_OWORD *)(v8 + v81 + 48);
                    *((_OWORD *)v82 + 6) = *(_OWORD *)(v8 + v81 + 32);
                    *((_OWORD *)v82 + 7) = v84;
                    if (!v81)
                      break;
                    v81 -= 64;
                    if (v80 >= *(v82 - 16))
                    {
                      v85 = v8 + v81 + 64;
                      goto LABEL_75;
                    }
                  }
                  v85 = v8;
LABEL_75:
                  *(float *)v85 = v80;
                  *(_OWORD *)(v85 + 48) = *(_OWORD *)&v159[12];
                  *(_OWORD *)(v85 + 36) = *(_OWORD *)v159;
                  *(_OWORD *)(v85 + 20) = v150;
                  *(_OWORD *)(v85 + 4) = v140;
                }
                v74 = v79 + 16;
                v77 += 64;
                v78 = (unint64_t)v79;
              }
              while (v79 + 16 != a2);
            }
          }
          else if (!v76)
          {
            do
            {
              v120 = (uint64_t)v74;
              v121 = *(float *)(a1 + 64);
              if (v121 < *(float *)a1)
              {
                v143 = *(_OWORD *)(a1 + 68);
                v153 = *(_OWORD *)(a1 + 84);
                *(_OWORD *)v162 = *(_OWORD *)(a1 + 100);
                *(_OWORD *)&v162[12] = *(_OWORD *)(a1 + 112);
                v122 = v74;
                do
                {
                  v123 = *((_OWORD *)v122 - 3);
                  *(_OWORD *)v122 = *((_OWORD *)v122 - 4);
                  *((_OWORD *)v122 + 1) = v123;
                  v124 = *((_OWORD *)v122 - 1);
                  *((_OWORD *)v122 + 2) = *((_OWORD *)v122 - 2);
                  *((_OWORD *)v122 + 3) = v124;
                  v125 = *(v122 - 32);
                  v122 -= 16;
                }
                while (v121 < v125);
                *v122 = v121;
                *((_OWORD *)v122 + 3) = *(_OWORD *)&v162[12];
                *(_OWORD *)(v122 + 9) = *(_OWORD *)v162;
                *(_OWORD *)(v122 + 5) = v153;
                *(_OWORD *)(v122 + 1) = v143;
              }
              v74 += 16;
              a1 = v120;
            }
            while ((float *)(v120 + 64) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((float *)v8 != a2)
          {
            v86 = (v10 - 2) >> 1;
            v87 = v86;
            do
            {
              v88 = v87;
              if (v86 >= v87)
              {
                v89 = (2 * v87) | 1;
                v90 = v8 + (v89 << 6);
                if (2 * v88 + 2 < (uint64_t)v10 && *(float *)v90 < *(float *)(v90 + 64))
                {
                  v90 += 64;
                  v89 = 2 * v88 + 2;
                }
                v91 = v8 + (v88 << 6);
                v92 = *(float *)v91;
                if (*(float *)v90 >= *(float *)v91)
                {
                  *(_OWORD *)&v160[12] = *(_OWORD *)(v91 + 48);
                  v151 = *(_OWORD *)(v91 + 20);
                  *(_OWORD *)v160 = *(_OWORD *)(v91 + 36);
                  v141 = *(_OWORD *)(v91 + 4);
                  do
                  {
                    v93 = (_OWORD *)v91;
                    v91 = v90;
                    v94 = *(_OWORD *)v90;
                    v95 = *(_OWORD *)(v90 + 16);
                    v96 = *(_OWORD *)(v90 + 48);
                    v93[2] = *(_OWORD *)(v90 + 32);
                    v93[3] = v96;
                    *v93 = v94;
                    v93[1] = v95;
                    if (v86 < v89)
                      break;
                    v97 = 2 * v89;
                    v89 = (2 * v89) | 1;
                    v90 = v8 + (v89 << 6);
                    v98 = v97 + 2;
                    if (v98 < (uint64_t)v10 && *(float *)v90 < *(float *)(v90 + 64))
                    {
                      v90 += 64;
                      v89 = v98;
                    }
                  }
                  while (*(float *)v90 >= v92);
                  *(float *)v91 = v92;
                  *(_OWORD *)(v91 + 48) = *(_OWORD *)&v160[12];
                  *(_OWORD *)(v91 + 36) = *(_OWORD *)v160;
                  *(_OWORD *)(v91 + 20) = v151;
                  *(_OWORD *)(v91 + 4) = v141;
                }
              }
              v87 = v88 - 1;
            }
            while (v88);
            v99 = (unint64_t)v9 >> 6;
            do
            {
              v100 = 0;
              v161 = *(_OWORD *)(v8 + 32);
              v169 = *(_OWORD *)(v8 + 48);
              v142 = *(_OWORD *)v8;
              v152 = *(_OWORD *)(v8 + 16);
              v101 = (float *)v8;
              do
              {
                v102 = v101;
                v101 += 16 * v100 + 16;
                v103 = 2 * v100;
                v100 = (2 * v100) | 1;
                v104 = v103 + 2;
                if (v104 < v99 && *v101 < v101[16])
                {
                  v101 += 16;
                  v100 = v104;
                }
                v105 = *(_OWORD *)v101;
                v106 = *((_OWORD *)v101 + 1);
                v107 = *((_OWORD *)v101 + 3);
                *((_OWORD *)v102 + 2) = *((_OWORD *)v101 + 2);
                *((_OWORD *)v102 + 3) = v107;
                *(_OWORD *)v102 = v105;
                *((_OWORD *)v102 + 1) = v106;
              }
              while (v100 <= (uint64_t)((unint64_t)(v99 - 2) >> 1));
              a2 -= 16;
              if (v101 == a2)
              {
                *((_OWORD *)v101 + 2) = v161;
                *((_OWORD *)v101 + 3) = v169;
                *(_OWORD *)v101 = v142;
                *((_OWORD *)v101 + 1) = v152;
              }
              else
              {
                v108 = *(_OWORD *)a2;
                v109 = *((_OWORD *)a2 + 1);
                v110 = *((_OWORD *)a2 + 3);
                *((_OWORD *)v101 + 2) = *((_OWORD *)a2 + 2);
                *((_OWORD *)v101 + 3) = v110;
                *(_OWORD *)v101 = v108;
                *((_OWORD *)v101 + 1) = v109;
                *((_OWORD *)a2 + 2) = v161;
                *((_OWORD *)a2 + 3) = v169;
                *(_OWORD *)a2 = v142;
                *((_OWORD *)a2 + 1) = v152;
                v111 = (uint64_t)v101 - v8 + 64;
                if (v111 >= 65)
                {
                  v112 = (((unint64_t)v111 >> 6) - 2) >> 1;
                  v113 = (float *)(v8 + (v112 << 6));
                  v114 = *v101;
                  if (*v113 < *v101)
                  {
                    *(_OWORD *)&v134[12] = *((_OWORD *)v101 + 3);
                    v131 = *(_OWORD *)(v101 + 5);
                    *(_OWORD *)v134 = *(_OWORD *)(v101 + 9);
                    v128 = *(_OWORD *)(v101 + 1);
                    do
                    {
                      v115 = v101;
                      v101 = v113;
                      v116 = *(_OWORD *)v113;
                      v117 = *((_OWORD *)v113 + 1);
                      v118 = *((_OWORD *)v113 + 3);
                      *((_OWORD *)v115 + 2) = *((_OWORD *)v113 + 2);
                      *((_OWORD *)v115 + 3) = v118;
                      *(_OWORD *)v115 = v116;
                      *((_OWORD *)v115 + 1) = v117;
                      if (!v112)
                        break;
                      v112 = (v112 - 1) >> 1;
                      v113 = (float *)(v8 + (v112 << 6));
                    }
                    while (*v113 < v114);
                    *v101 = v114;
                    *((_OWORD *)v101 + 3) = *(_OWORD *)&v134[12];
                    *(_OWORD *)(v101 + 9) = *(_OWORD *)v134;
                    *(_OWORD *)(v101 + 5) = v131;
                    *(_OWORD *)(v101 + 1) = v128;
                  }
                }
              }
            }
            while (v99-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + (v10 >> 1 << 6);
        if ((unint64_t)v9 <= 0x2000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + (v10 >> 1 << 6)), (float *)a1, a2 - 16);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)a1, (float *)(a1 + (v10 >> 1 << 6)), a2 - 16);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 64), (float *)(v12 - 64), a2 - 32);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(a1 + 128), (float *)(a1 + 64 + (v11 << 6)), a2 - 48);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_2 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>((float *)(v12 - 64), (float *)v12, (float *)(a1 + 64 + (v11 << 6)));
          v154 = *(_OWORD *)(a1 + 32);
          v163 = *(_OWORD *)(a1 + 48);
          v135 = *(_OWORD *)a1;
          v144 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)v12;
          v14 = *(_OWORD *)(v12 + 16);
          v15 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v12 + 32);
          *(_OWORD *)(a1 + 48) = v15;
          *(_OWORD *)a1 = v13;
          *(_OWORD *)(a1 + 16) = v14;
          *(_OWORD *)(v12 + 32) = v154;
          *(_OWORD *)(v12 + 48) = v163;
          *(_OWORD *)v12 = v135;
          *(_OWORD *)(v12 + 16) = v144;
        }
        --a3;
        v16 = *(float *)a1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 64) >= v16)
        {
          *(_OWORD *)&v133[12] = *(_OWORD *)(a1 + 48);
          v130 = *(_OWORD *)(a1 + 20);
          *(_OWORD *)v133 = *(_OWORD *)(a1 + 36);
          v127 = *(_OWORD *)(a1 + 4);
          if (v16 >= *(a2 - 16))
          {
            v34 = a1 + 64;
            do
            {
              v8 = v34;
              if (v34 >= (unint64_t)a2)
                break;
              v34 += 64;
            }
            while (v16 >= *(float *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v33 = *(float *)(v8 + 64);
              v8 += 64;
            }
            while (v16 >= v33);
          }
          v35 = a2;
          if (v8 < (unint64_t)a2)
          {
            v35 = a2;
            do
            {
              v36 = *(v35 - 16);
              v35 -= 16;
            }
            while (v16 < v36);
          }
          while (v8 < (unint64_t)v35)
          {
            v156 = *(_OWORD *)(v8 + 32);
            v165 = *(_OWORD *)(v8 + 48);
            v137 = *(_OWORD *)v8;
            v146 = *(_OWORD *)(v8 + 16);
            v37 = *(_OWORD *)v35;
            v38 = *((_OWORD *)v35 + 1);
            v39 = *((_OWORD *)v35 + 3);
            *(_OWORD *)(v8 + 32) = *((_OWORD *)v35 + 2);
            *(_OWORD *)(v8 + 48) = v39;
            *(_OWORD *)v8 = v37;
            *(_OWORD *)(v8 + 16) = v38;
            *((_OWORD *)v35 + 2) = v156;
            *((_OWORD *)v35 + 3) = v165;
            *(_OWORD *)v35 = v137;
            *((_OWORD *)v35 + 1) = v146;
            do
            {
              v40 = *(float *)(v8 + 64);
              v8 += 64;
            }
            while (v16 >= v40);
            do
            {
              v41 = *(v35 - 16);
              v35 -= 16;
            }
            while (v16 < v41);
          }
          if (v8 - 64 != a1)
          {
            v42 = *(_OWORD *)(v8 - 64);
            v43 = *(_OWORD *)(v8 - 48);
            v44 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 48) = v44;
            *(_OWORD *)a1 = v42;
            *(_OWORD *)(a1 + 16) = v43;
          }
          a4 = 0;
          *(float *)(v8 - 64) = v16;
          *(_OWORD *)(v8 - 16) = *(_OWORD *)&v133[12];
          *(_OWORD *)(v8 - 28) = *(_OWORD *)v133;
          *(_OWORD *)(v8 - 44) = v130;
          *(_OWORD *)(v8 - 60) = v127;
          continue;
        }
        v17 = 0;
        *(_OWORD *)&v132[12] = *(_OWORD *)(a1 + 48);
        v129 = *(_OWORD *)(a1 + 20);
        *(_OWORD *)v132 = *(_OWORD *)(a1 + 36);
        v126 = *(_OWORD *)(a1 + 4);
        do
        {
          v18 = *(float *)(a1 + v17 + 64);
          v17 += 64;
        }
        while (v18 < v16);
        v19 = a1 + v17;
        v20 = a2;
        if (v17 == 64)
        {
          v20 = a2;
          do
          {
            if (v19 >= (unint64_t)v20)
              break;
            v22 = *(v20 - 16);
            v20 -= 16;
          }
          while (v22 >= v16);
        }
        else
        {
          do
          {
            v21 = *(v20 - 16);
            v20 -= 16;
          }
          while (v21 >= v16);
        }
        v8 = a1 + v17;
        if (v19 < (unint64_t)v20)
        {
          v23 = v20;
          do
          {
            v155 = *(_OWORD *)(v8 + 32);
            v164 = *(_OWORD *)(v8 + 48);
            v136 = *(_OWORD *)v8;
            v145 = *(_OWORD *)(v8 + 16);
            v24 = *(_OWORD *)v23;
            v25 = *((_OWORD *)v23 + 1);
            v26 = *((_OWORD *)v23 + 3);
            *(_OWORD *)(v8 + 32) = *((_OWORD *)v23 + 2);
            *(_OWORD *)(v8 + 48) = v26;
            *(_OWORD *)v8 = v24;
            *(_OWORD *)(v8 + 16) = v25;
            *((_OWORD *)v23 + 2) = v155;
            *((_OWORD *)v23 + 3) = v164;
            *(_OWORD *)v23 = v136;
            *((_OWORD *)v23 + 1) = v145;
            do
            {
              v27 = *(float *)(v8 + 64);
              v8 += 64;
            }
            while (v27 < v16);
            do
            {
              v28 = *(v23 - 16);
              v23 -= 16;
            }
            while (v28 >= v16);
          }
          while (v8 < (unint64_t)v23);
        }
        if (v8 - 64 != a1)
        {
          v29 = *(_OWORD *)(v8 - 64);
          v30 = *(_OWORD *)(v8 - 48);
          v31 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 48) = v31;
          *(_OWORD *)a1 = v29;
          *(_OWORD *)(a1 + 16) = v30;
        }
        *(float *)(v8 - 64) = v16;
        *(_OWORD *)(v8 - 16) = *(_OWORD *)&v132[12];
        *(_OWORD *)(v8 - 28) = *(_OWORD *)v132;
        *(_OWORD *)(v8 - 44) = v129;
        *(_OWORD *)(v8 - 60) = v126;
        if (v19 < (unint64_t)v20)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *,false>(a1, v8 - 64, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(a1, v8 - 64);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::$_3 &,re::pathprocessing::Bezier2::removeOverlaps(re::pathprocessing::Bezier2 const&,std::vector<float> &,std::vector<float> &)::SubBezier *>(v8, (uint64_t)a2))
        {
          if (v32)
            continue;
          goto LABEL_29;
        }
        a2 = (float *)(v8 - 64);
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - v8);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((float *)a2 - 4) < *((float *)v8 + 8))
        {
          *(_OWORD *)v132 = v8[1];
          *(_OWORD *)&v132[16] = v8[2];
          v123 = *v8;
          v52 = *(a2 - 3);
          v53 = *(a2 - 2);
          *(__int128 *)((char *)v8 + 28) = *(__int128 *)((char *)a2 - 20);
          *v8 = v52;
          v8[1] = v53;
          *(__int128 *)((char *)a2 - 20) = *(_OWORD *)&v132[12];
          *(a2 - 3) = v123;
          *(a2 - 2) = *(_OWORD *)v132;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(v8, v8 + 3, a2 - 3);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(v8, v8 + 3, v8 + 6, (uint64_t)(a2 - 3));
        return;
      case 5:
        v54 = v8 + 3;
        v55 = v8 + 6;
        v56 = v8 + 9;
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(v8, v8 + 3, v8 + 6, (uint64_t)(v8 + 9));
        if (*((float *)a2 - 4) < *((float *)v8 + 44))
        {
          *(_OWORD *)v133 = v8[10];
          *(_OWORD *)&v133[16] = v8[11];
          v57 = *v56;
          v59 = *(a2 - 3);
          v58 = *(a2 - 2);
          *(__int128 *)((char *)v8 + 172) = *(__int128 *)((char *)a2 - 20);
          *v56 = v59;
          v8[10] = v58;
          *(__int128 *)((char *)a2 - 20) = *(_OWORD *)&v133[12];
          *(a2 - 3) = v57;
          *(a2 - 2) = *(_OWORD *)v133;
          if (*((float *)v8 + 44) < *((float *)v8 + 32))
          {
            v60 = *v55;
            *(_OWORD *)v134 = v8[7];
            *(_OWORD *)&v134[16] = v8[8];
            v61 = v8[10];
            *v55 = *v56;
            v8[7] = v61;
            *(__int128 *)((char *)v8 + 124) = *(__int128 *)((char *)v8 + 172);
            *v56 = v60;
            v8[10] = *(_OWORD *)v134;
            *(__int128 *)((char *)v8 + 172) = *(_OWORD *)&v134[12];
            if (*((float *)v8 + 32) < *((float *)v8 + 20))
            {
              v62 = *v54;
              *(_OWORD *)v135 = v8[4];
              *(_OWORD *)&v135[16] = v8[5];
              v63 = v8[7];
              *v54 = *v55;
              v8[4] = v63;
              *(__int128 *)((char *)v8 + 76) = *(__int128 *)((char *)v8 + 124);
              *v55 = v62;
              v8[7] = *(_OWORD *)v135;
              *(__int128 *)((char *)v8 + 124) = *(_OWORD *)&v135[12];
              if (*((float *)v8 + 20) < *((float *)v8 + 8))
              {
                *(_OWORD *)v136 = v8[1];
                *(_OWORD *)&v136[16] = v8[2];
                v124 = *v8;
                v64 = v8[4];
                *v8 = *v54;
                v8[1] = v64;
                *(__int128 *)((char *)v8 + 28) = *(__int128 *)((char *)v8 + 76);
                *v54 = v124;
                v8[4] = *(_OWORD *)v136;
                *(__int128 *)((char *)v8 + 76) = *(_OWORD *)&v136[12];
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 1151)
        {
          v65 = v8 + 3;
          v67 = v8 == a2 || v65 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = v8;
              do
              {
                v70 = v65;
                v71 = *((float *)v69 + 20);
                if (v71 < *((float *)v69 + 8))
                {
                  v125 = *v65;
                  v137 = v65[1];
                  v72 = *(_QWORD *)((char *)v69 + 84);
                  v73 = v68;
                  while (1)
                  {
                    v74 = (__int128 *)((char *)v8 + v73);
                    v75 = *(__int128 *)((char *)v8 + v73 + 16);
                    v74[3] = *(__int128 *)((char *)v8 + v73);
                    v74[4] = v75;
                    *(_OWORD *)((char *)v74 + 76) = *(__int128 *)((char *)v8 + v73 + 28);
                    if (!v73)
                      break;
                    v73 -= 48;
                    if (v71 >= *((float *)v74 - 4))
                    {
                      v76 = (uint64_t)v8 + v73 + 48;
                      goto LABEL_79;
                    }
                  }
                  v76 = (uint64_t)v8;
LABEL_79:
                  *(_OWORD *)v76 = v125;
                  *(_OWORD *)(v76 + 16) = v137;
                  *(float *)(v76 + 32) = v71;
                  *(_QWORD *)(v76 + 36) = v72;
                }
                v65 = v70 + 3;
                v68 += 48;
                v69 = v70;
              }
              while (v70 + 3 != a2);
            }
          }
          else if (!v67)
          {
            do
            {
              v109 = v65;
              v110 = *((float *)a1 + 20);
              if (v110 < *((float *)a1 + 8))
              {
                v128 = *v65;
                v140 = v65[1];
                v111 = *(_QWORD *)((char *)a1 + 84);
                do
                {
                  v112 = *(v65 - 2);
                  *v65 = *(v65 - 3);
                  v65[1] = v112;
                  *(__int128 *)((char *)v65 + 28) = *(__int128 *)((char *)v65 - 20);
                  v113 = *((float *)v65 - 16);
                  v65 -= 3;
                }
                while (v110 < v113);
                *v65 = v128;
                v65[1] = v140;
                *((float *)v65 + 8) = v110;
                *(_QWORD *)((char *)v65 + 36) = v111;
              }
              v65 = v109 + 3;
              a1 = v109;
            }
            while (v109 + 3 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v77 = (unint64_t)(v10 - 2) >> 1;
            v78 = v77;
            do
            {
              v79 = v78;
              if (v77 >= v78)
              {
                v80 = (2 * v78) | 1;
                v81 = &v8[3 * v80];
                if (2 * v79 + 2 < v10 && *(float *)&v8[3 * v80 + 2] < *((float *)v81 + 20))
                {
                  v81 += 3;
                  v80 = 2 * v79 + 2;
                }
                v82 = *(float *)&v8[3 * v79 + 2];
                if (*((float *)v81 + 8) >= v82)
                {
                  v83 = &v8[3 * v79];
                  v126 = *v83;
                  v138 = v83[1];
                  v84 = *(_QWORD *)((char *)v83 + 36);
                  do
                  {
                    v85 = v83;
                    v83 = v81;
                    v86 = *v81;
                    v87 = v81[1];
                    *(__int128 *)((char *)v85 + 28) = *(__int128 *)((char *)v81 + 28);
                    *v85 = v86;
                    v85[1] = v87;
                    if (v77 < v80)
                      break;
                    v88 = (2 * v80) | 1;
                    v81 = &v8[3 * v88];
                    v89 = 2 * v80 + 2;
                    if (v89 < v10 && *(float *)&v8[3 * v88 + 2] < *((float *)v81 + 20))
                    {
                      v81 += 3;
                      v88 = v89;
                    }
                    v80 = v88;
                  }
                  while (*((float *)v81 + 8) >= v82);
                  *v83 = v126;
                  v83[1] = v138;
                  *((float *)v83 + 8) = v82;
                  *(_QWORD *)((char *)v83 + 36) = v84;
                }
              }
              v78 = v79 - 1;
            }
            while (v79);
            v90 = v9 / 0x30uLL;
            do
            {
              v91 = 0;
              *(_OWORD *)v139 = v8[1];
              *(_OWORD *)&v139[16] = v8[2];
              v127 = *v8;
              v92 = v8;
              do
              {
                v93 = v92;
                v94 = v91 + 1;
                v92 += 3 * v91 + 3;
                v95 = 2 * v91;
                v91 = (2 * v91) | 1;
                v96 = v95 + 2;
                if (v96 < v90 && *(float *)&v93[3 * v94 + 2] < *((float *)v92 + 20))
                {
                  v92 += 3;
                  v91 = v96;
                }
                v97 = *v92;
                v98 = v92[1];
                *(__int128 *)((char *)v93 + 28) = *(__int128 *)((char *)v92 + 28);
                *v93 = v97;
                v93[1] = v98;
              }
              while (v91 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
              a2 -= 3;
              if (v92 == a2)
              {
                *(__int128 *)((char *)v92 + 28) = *(_OWORD *)&v139[12];
                *v92 = v127;
                v92[1] = *(_OWORD *)v139;
              }
              else
              {
                v99 = *a2;
                v100 = a2[1];
                *(__int128 *)((char *)v92 + 28) = *(__int128 *)((char *)a2 + 28);
                *v92 = v99;
                v92[1] = v100;
                *(__int128 *)((char *)a2 + 28) = *(_OWORD *)&v139[12];
                *a2 = v127;
                a2[1] = *(_OWORD *)v139;
                v101 = (char *)v92 - (char *)v8 + 48;
                if (v101 >= 49)
                {
                  v102 = (v101 / 0x30uLL - 2) >> 1;
                  v103 = *((float *)v92 + 8);
                  if (*(float *)&v8[3 * v102 + 2] < v103)
                  {
                    v116 = *v92;
                    v119 = v92[1];
                    v104 = *(_QWORD *)((char *)v92 + 36);
                    do
                    {
                      v105 = v92;
                      v92 = &v8[3 * v102];
                      v106 = *v92;
                      v107 = v92[1];
                      *(__int128 *)((char *)v105 + 28) = *(__int128 *)((char *)v92 + 28);
                      *v105 = v106;
                      v105[1] = v107;
                      if (!v102)
                        break;
                      v102 = (v102 - 1) >> 1;
                    }
                    while (*(float *)&v8[3 * v102 + 2] < v103);
                    *v92 = v116;
                    v92[1] = v119;
                    *((float *)v92 + 8) = v103;
                    *(_QWORD *)((char *)v92 + 36) = v104;
                  }
                }
              }
            }
            while (v90-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[3 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x1801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(v12, a1, a2 - 3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, v12, a2 - 3);
          v13 = 3 * v11;
          v14 = &a1[3 * v11 - 3];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1 + 3, v14, a2 - 6);
          v15 = &a1[v13 + 3];
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1 + 6, v15, a2 - 9);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(v14, v12, v15);
          *(_OWORD *)v129 = a1[1];
          *(_OWORD *)&v129[16] = a1[2];
          v120 = *a1;
          v16 = *(__int128 *)((char *)v12 + 28);
          v17 = v12[1];
          *a1 = *v12;
          a1[1] = v17;
          *(__int128 *)((char *)a1 + 28) = v16;
          *(__int128 *)((char *)v12 + 28) = *(_OWORD *)&v129[12];
          *v12 = v120;
          v12[1] = *(_OWORD *)v129;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *((float *)a1 + 8);
          if (*((float *)a1 - 4) < v18)
            goto LABEL_11;
          v115 = *a1;
          v118 = a1[1];
          if (v18 >= *((float *)a2 - 4))
          {
            v39 = a1 + 3;
            do
            {
              v8 = v39;
              if (v39 >= a2)
                break;
              v40 = *((float *)v39 + 8);
              v39 += 3;
            }
            while (v18 >= v40);
          }
          else
          {
            v37 = a1;
            do
            {
              v8 = v37 + 3;
              v38 = *((float *)v37 + 20);
              v37 += 3;
            }
            while (v18 >= v38);
          }
          v41 = a2;
          if (v8 < a2)
          {
            v42 = (float *)a2;
            do
            {
              v41 = (__int128 *)(v42 - 12);
              v43 = *(v42 - 4);
              v42 -= 12;
            }
            while (v18 < v43);
          }
          v44 = *(_QWORD *)((char *)a1 + 36);
          while (v8 < v41)
          {
            *(_OWORD *)v131 = v8[1];
            *(_OWORD *)&v131[16] = v8[2];
            v122 = *v8;
            v45 = *v41;
            v46 = v41[1];
            *(__int128 *)((char *)v8 + 28) = *(__int128 *)((char *)v41 + 28);
            *v8 = v45;
            v8[1] = v46;
            *(__int128 *)((char *)v41 + 28) = *(_OWORD *)&v131[12];
            *v41 = v122;
            v41[1] = *(_OWORD *)v131;
            do
            {
              v47 = *((float *)v8 + 20);
              v8 += 3;
            }
            while (v18 >= v47);
            do
            {
              v48 = *((float *)v41 - 4);
              v41 -= 3;
            }
            while (v18 < v48);
          }
          v49 = v8 - 3;
          if (v8 - 3 != a1)
          {
            v50 = *v49;
            v51 = *(v8 - 2);
            *(__int128 *)((char *)a1 + 28) = *(__int128 *)((char *)v8 - 20);
            *a1 = v50;
            a1[1] = v51;
          }
          a4 = 0;
          *v49 = v115;
          *(v8 - 2) = v118;
          *((float *)v8 - 4) = v18;
          *(_QWORD *)((char *)v8 - 12) = v44;
          continue;
        }
        v18 = *((float *)a1 + 8);
LABEL_11:
        v19 = 0;
        v114 = *a1;
        v117 = a1[1];
        v20 = *(_QWORD *)((char *)a1 + 36);
        do
        {
          v21 = *(float *)&a1[v19 + 5];
          v19 += 3;
        }
        while (v21 < v18);
        v22 = &a1[v19];
        v23 = (float *)a2;
        if (v19 == 3)
        {
          v26 = (float *)a2;
          while (v22 < (__int128 *)v26)
          {
            v24 = v26 - 12;
            v27 = *(v26 - 4);
            v26 -= 12;
            if (v27 < v18)
              goto LABEL_21;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = v23 - 12;
            v25 = *(v23 - 4);
            v23 -= 12;
          }
          while (v25 >= v18);
        }
LABEL_21:
        v8 = v22;
        if (v22 < (__int128 *)v24)
        {
          v28 = (__int128 *)v24;
          do
          {
            *(_OWORD *)v130 = v8[1];
            *(_OWORD *)&v130[16] = v8[2];
            v121 = *v8;
            v29 = *v28;
            v30 = v28[1];
            *(__int128 *)((char *)v8 + 28) = *(__int128 *)((char *)v28 + 28);
            *v8 = v29;
            v8[1] = v30;
            *(__int128 *)((char *)v28 + 28) = *(_OWORD *)&v130[12];
            *v28 = v121;
            v28[1] = *(_OWORD *)v130;
            do
            {
              v31 = *((float *)v8 + 20);
              v8 += 3;
            }
            while (v31 < v18);
            do
            {
              v32 = *((float *)v28 - 4);
              v28 -= 3;
            }
            while (v32 >= v18);
          }
          while (v8 < v28);
        }
        v33 = v8 - 3;
        if (v8 - 3 != a1)
        {
          v34 = *v33;
          v35 = *(v8 - 2);
          *(__int128 *)((char *)a1 + 28) = *(__int128 *)((char *)v8 - 20);
          *a1 = v34;
          a1[1] = v35;
        }
        *v33 = v114;
        *(v8 - 2) = v117;
        *((float *)v8 - 4) = v18;
        *(_QWORD *)((char *)v8 - 12) = v20;
        if (v22 < (__int128 *)v24)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *,false>(a1, v8 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(a1, (float *)v8 - 12);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::$_0 &,re::pathprocessing::subdivideBezierOnSelfIntersection(std::vector<re::pathprocessing::Bezier2> const&,std::vector<unsigned long> const*,std::vector<unsigned long>*)::SubBezier *>(v8, (float *)a2))
        {
          if (v36)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 3;
        if (!v36)
          goto LABEL_1;
        return;
    }
  }
}

BOOL re::BlendSpaceBuilder::build(void)::$_0::operator()(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  if (!a1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (!a3)
    goto LABEL_5;
  return *a2 < *a4;
}

void std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1, a2, a3, a4);
  if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a5 + 40), *(float **)(a5 + 56), *(_QWORD *)(a4 + 40), *(float **)(a4 + 56)))
  {
    std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a4, (uint64_t *)a5);
    if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a4 + 40), *(float **)(a4 + 56), *(_QWORD *)(a3 + 40), *(float **)(a3 + 56)))
    {
      std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a3, (uint64_t *)a4);
      if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a3 + 40), *(float **)(a3 + 56), *(_QWORD *)(a2 + 40), *(float **)(a2 + 56)))
      {
        std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a2, (uint64_t *)a3);
        if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a2 + 40), *(float **)(a2 + 56), *(_QWORD *)(a1 + 40), *(float **)(a1 + 56)))
        {
          std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a1, (uint64_t *)a2);
        }
      }
    }
  }
}

void std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  _BOOL4 v7;
  uint64_t *v8;

  v6 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a2 + 40), *(float **)(a2 + 56), *(_QWORD *)(a1 + 40), *(float **)(a1 + 56));
  v7 = re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a3 + 40), *(float **)(a3 + 56), *(_QWORD *)(a2 + 40), *(float **)(a2 + 56));
  if (v6)
  {
    if (v7)
    {
      v8 = (uint64_t *)a1;
    }
    else
    {
      std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a1, (uint64_t *)a2);
      if (!re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a3 + 40), *(float **)(a3 + 56), *(_QWORD *)(a2 + 40), *(float **)(a2 + 56)))return;
      v8 = (uint64_t *)a2;
    }
    std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>(v8, (uint64_t *)a3);
  }
  else if (v7)
  {
    std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a2, (uint64_t *)a3);
    if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a2 + 40), *(float **)(a2 + 56), *(_QWORD *)(a1 + 40), *(float **)(a1 + 56)))
    {
      std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a1, (uint64_t *)a2);
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  float *v29;
  unint64_t v30;
  uint64_t v31;

  v4 = 1;
  switch((a2 - a1) >> 6)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a2 - 24), *(float **)(a2 - 8), *(_QWORD *)(a1 + 40), *(float **)(a1 + 56)))
      {
        std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a1, (uint64_t *)(a2 - 64));
      }
      break;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1, a1 + 64, a2 - 64);
      break;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1, a1 + 64, a1 + 128, a2 - 64);
      break;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *,0>(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      break;
    default:
      v5 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1, a1 + 64, a1 + 128);
      v6 = a1 + 192;
      v4 = 1;
      if (a1 + 192 != a2)
      {
        v7 = 0;
        v8 = 0;
        while (1)
        {
          if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(v6 + 40), *(float **)(v6 + 56), *(_QWORD *)(v5 + 40), *(float **)(v5 + 56)))
          {
            v9 = *(void **)(v6 + 8);
            v23 = *(_QWORD *)v6;
            v24 = v9;
            *(_QWORD *)v6 = 0;
            *(_QWORD *)(v6 + 8) = &str_110;
            v25 = *(_DWORD *)(v6 + 16);
            v26 = *(_QWORD *)(v6 + 24);
            v27 = *(_OWORD *)(v6 + 32);
            *(_QWORD *)(v6 + 24) = 0;
            *(_QWORD *)(v6 + 32) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            v29 = *(float **)(v6 + 56);
            *(_QWORD *)(v6 + 56) = 0;
            ++*(_DWORD *)(v6 + 48);
            v10 = v7;
            v28 = 1;
            while (1)
            {
              v11 = a1 + v10;
              v12 = *(_QWORD *)(a1 + v10 + 128);
              v13 = *(_QWORD *)(a1 + v10 + 136);
              *(_QWORD *)(v11 + 128) = 0;
              *(_QWORD *)(v11 + 136) = &str_110;
              v14 = *(_QWORD *)(a1 + v10 + 192);
              v15 = *(_QWORD *)(a1 + v10 + 200);
              *(_QWORD *)(v11 + 192) = v12;
              *(_QWORD *)(v11 + 200) = v13;
              v30 = v12 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
              v31 = v15;
              re::StringID::destroyString((re::StringID *)&v30);
              *(_DWORD *)(v11 + 208) = *(_DWORD *)(v11 + 144);
              v16 = a1 + v10 + 152;
              re::DynamicArray<re::RigComponentConstraint>::operator=(v11 + 216, v11 + 152);
              if (v10 == -128)
                break;
              v10 -= 64;
              if (!re::BlendSpaceBuilder::build(void)::$_0::operator()(*((uint64_t *)&v27 + 1), v29, *(_QWORD *)(v11 + 104), *(float **)(v11 + 120)))
              {
                v17 = a1 + v10 + 192;
                goto LABEL_12;
              }
            }
            v17 = a1;
LABEL_12:
            v18 = v23;
            v19 = v24;
            v23 = 0;
            v24 = &str_110;
            v20 = *(_QWORD *)v17;
            v21 = *(_QWORD *)(v17 + 8);
            *(_QWORD *)v17 = v18;
            *(_QWORD *)(v17 + 8) = v19;
            v30 = v18 & 0xFFFFFFFFFFFFFFFELL | v20 & 1;
            v31 = v21;
            re::StringID::destroyString((re::StringID *)&v30);
            *(_DWORD *)(v17 + 16) = v25;
            re::DynamicArray<re::RigComponentConstraint>::operator=(v16, (uint64_t)&v26);
            if (v26)
            {
              if (v29)
                (*(void (**)(void))(*(_QWORD *)v26 + 40))();
              v29 = 0;
              v27 = 0uLL;
              v26 = 0;
              ++v28;
            }
            ++v8;
            re::StringID::destroyString((re::StringID *)&v23);
            if (v8 == 8)
              break;
          }
          v5 = v6;
          v7 += 64;
          v6 += 64;
          if (v6 == a2)
            return 1;
        }
        v4 = v6 + 64 == a2;
      }
      break;
  }
  return v4;
}

void std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  int v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v4 = *a1;
  v5 = a1[1];
  *a1 = 0;
  a1[1] = (uint64_t)&str_110;
  v15 = *((_DWORD *)a1 + 4);
  v6 = v15;
  v7 = (uint64_t)(a1 + 3);
  v16 = a1[3];
  a1[3] = 0;
  v17 = *((_OWORD *)a1 + 2);
  a1[4] = 0;
  a1[5] = 0;
  v19 = a1[7];
  a1[7] = 0;
  ++*((_DWORD *)a1 + 12);
  v18 = 1;
  v8 = *a2;
  v9 = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v10 = *a1;
  v11 = a1[1];
  *a1 = v8;
  a1[1] = v9;
  v20 = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v21 = v11;
  re::StringID::destroyString((re::StringID *)&v20);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  re::DynamicArray<re::RigComponentConstraint>::operator=(v7, (uint64_t)(a2 + 3));
  v14[0] = 0;
  v14[1] = &str_110;
  v12 = a2[1];
  v20 = v4 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  v21 = v12;
  *a2 = v4;
  a2[1] = v5;
  re::StringID::destroyString((re::StringID *)&v20);
  *((_DWORD *)a2 + 4) = v6;
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(a2 + 3), (uint64_t)&v16);
  if (v16)
  {
    if (v19)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, v19, v13);
    v19 = 0;
    v17 = 0uLL;
    v16 = 0;
    ++v18;
  }
  re::StringID::destroyString((re::StringID *)v14);
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::BlendSpaceBuilder::build(void)::$_0 &,re::BlendSpaceSampleDefinition *>(a1, a2, a3);
  if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a4 + 40), *(float **)(a4 + 56), *(_QWORD *)(a3 + 40), *(float **)(a3 + 56)))
  {
    std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a3, (uint64_t *)a4);
    if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a3 + 40), *(float **)(a3 + 56), *(_QWORD *)(a2 + 40), *(float **)(a2 + 56)))
    {
      std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a2, (uint64_t *)a3);
      if (re::BlendSpaceBuilder::build(void)::$_0::operator()(*(_QWORD *)(a2 + 40), *(float **)(a2 + 56), *(_QWORD *)(a1 + 40), *(float **)(a1 + 56)))
      {
        std::swap[abi:nn180100]<re::BlendSpaceSampleDefinition>((uint64_t *)a1, (uint64_t *)a2);
      }
    }
  }
}

_OWORD *re::internal::penetrationCorrectionCallback(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5, uint64_t a6, re::RigDataValue *a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v23;
  unint64_t v24;
  re::RigDataValue *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  re::internal *v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  unint64_t v42;
  int v45;
  float32x4_t v47;
  float32x4_t v48;
  int v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  __int128 v53;
  __int128 v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  uint64_t v58;
  unint64_t v59[2];
  float32x4_t v60;
  float v61;
  _QWORD v62[2];
  __int128 v63;
  int32x4_t v64;
  int v65;
  const char *v66;
  __int16 v67;
  int v68;
  __int16 v69;
  unint64_t v70;
  __int16 v71;
  unint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_14;
  }
  v9 = a4;
  if (a4 == 1)
  {
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  if (a4 <= 2)
  {
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, v9);
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  if (a4 == 3)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3, 3);
    _os_crash();
    __break(1u);
    goto LABEL_17;
  }
  re::internal::getSRTFromRDV((re::internal *)(a3 + 108), &v55);
  if (v9 <= 4)
  {
LABEL_17:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 4, 4);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, 0, 0);
    _os_crash();
    __break(1u);
  }
  re::internal::getSRTFromRDV((re::internal *)(a3 + 144), &v53);
  if (!a8)
    goto LABEL_18;
  _Q7 = (int32x4_t)v56;
  _S3 = HIDWORD(v54);
  __asm { FMLA            S4, S3, V7.S[3] }
  v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q7, _Q7), v56, 0xCuLL);
  v52 = (float32x4_t)v56;
  v50 = vnegq_f32((float32x4_t)v56);
  v47 = v57;
  v48 = v55;
  __asm { FMOV            V1.4S, #-1.0 }
  CoreIKGenericSolverSetWorldToSolverTransform();
  v23 = a3[68];
  if (v23)
  {
    v24 = 0;
    v9 = (unint64_t)(a3 + 36);
    _S8 = v52.i32[3];
    while (1)
    {
      v26 = (re::RigDataValue *)re::RigDataValue::attributeValue((re::RigDataValue *)(a3 + 36), v24);
      v59[0] = 0;
      v59[1] = (unint64_t)&str_110;
      v60 = 0u;
      v27 = re::RigDataValue::attributeValue(v26, 0);
      re::StringID::operator=(v59, (uint64_t *)(v27 + 224));
      v28 = re::RigDataValue::attributeValue(v26, 1uLL);
      v60 = *(float32x4_t *)re::RigDataValue::getRuntimeValue<re::Vector3<float>>(v28, v29);
      v30 = re::RigDataValue::attributeValue(v26, 2uLL);
      v61 = *(float *)re::RigDataValue::getRuntimeValue<float>(v30, v31);
      v32 = (re::internal *)re::RigDataValue::attributeValue((re::RigDataValue *)(a3 + 72), v24);
      re::internal::getSRTFromRDV(v32, v62);
      v49 = HIDWORD(v63);
      v33 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v64, v64), (int8x16_t)v64, 0xCuLL), v50), (float32x4_t)v64, v51);
      v34 = (int32x4_t)vaddq_f32(v33, v33);
      v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
      v36 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL), v50), v35, v51);
      v37 = vaddq_f32(v47, vmulq_f32(v48, vaddq_f32(vaddq_f32((float32x4_t)v64, vmulq_laneq_f32(v35, v52, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL))));
      v38 = (int32x4_t)vmulq_f32(v60, v60);
      v38.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1))).u32[0];
      v39 = vrsqrte_f32((float32x2_t)v38.u32[0]);
      v40 = vmul_f32(v39, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v39, v39)));
      v41 = vmulq_n_f32(v60, vmul_f32(v40, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(v40, v40))).f32[0]);
      v73 = vsubq_f32(v37, vmulq_n_f32(v41, v61 * 0.5));
      v74 = v41;
      *(float *)&v75 = v61;
      re::internal::RayCaster::cast((_QWORD *)(a9 + 48), (uint64_t)&v73, (uint64_t)v62);
      v42 = *(_QWORD *)(a9 + 176);
      if (v42 <= v24)
        break;
      _V2.S[3] = v49;
      __asm { FMLA            S0, S8, V2.S[3] }
      MEMORY[0x22769154C](*(_QWORD *)a9, *(_QWORD *)(*(_QWORD *)(a9 + 192) + 8 * v24));
      CoreIKGenericConstraintSetTargetParameters();
      re::StringID::destroyString((re::StringID *)v59);
      if (v23 == ++v24)
        goto LABEL_11;
    }
    v58 = 0;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v73 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v65 = 136315906;
    v66 = "operator[]";
    v67 = 1024;
    v68 = 789;
    v69 = 2048;
    v70 = v24;
    v71 = 2048;
    v72 = v42;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
LABEL_11:
  re::internal::transferPose((re::RigDataValue *)a3, a9 + 16);
  v45 = CoreIKGenericSolverSolve();
  return re::internal::updateOutputBasedOnSolveResult(v45, (uint64_t)a3, (_OWORD *)(a9 + 16), a7);
}

uint64_t re::internal::penetrationCorrectionCompile(re::Allocator **a1, _QWORD *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  re::RigDataValue *v8;
  re::Allocator *v9;
  uint64_t v10;
  uint64_t v11;
  const re::RigDataValue *v12;
  uint64_t v13;
  unint64_t i;
  unint64_t v15;
  const char *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t JointCount;
  uint64_t v25;
  unint64_t j;
  unint64_t v27;
  const char *v28;
  re::Allocator *v30;
  uint64_t v31;
  _OWORD v32[2];
  int v33;
  _OWORD v34[2];
  int v35;
  uint64_t v36;
  _QWORD v37[2];
  _BYTE v38[288];
  _QWORD v39[36];
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  char v43;
  _BYTE v44[240];
  uint64_t v45;
  StringID v46;
  re::Allocator *v47;
  uint64_t v48;
  char **p_var1;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
    goto LABEL_25;
  }
  if (a3 == 1)
  {
LABEL_25:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 1, 1);
    _os_crash();
    __break(1u);
    goto LABEL_26;
  }
  if (a3 <= 2)
  {
LABEL_26:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2, 2);
    _os_crash();
    __break(1u);
    goto LABEL_27;
  }
  if (a3 == 3)
  {
LABEL_27:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3, 3);
    _os_crash();
    __break(1u);
    goto LABEL_28;
  }
  if (!a5)
  {
LABEL_28:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 0, 0);
    _os_crash();
    __break(1u);
LABEL_29:
    if (__cxa_guard_acquire(&qword_2540FB0A0))
    {
      _MergedGlobals_29 = re::introspect_CollisionWorld(0);
      __cxa_guard_release(&qword_2540FB0A0);
    }
    goto LABEL_15;
  }
  v5 = (uint64_t)a1;
  v11 = a2[1];
  v6 = *(_anonymous_namespace_ **)(*a2 + 184);
  v8 = (re::RigDataValue *)a2[2];
  v12 = (const re::RigDataValue *)a2[3];
  v31 = *a4;
  v40 = 158357486;
  v41 = "SRT[]";
  re::internal::makeRigDataValue(a1, (const char **)&v40, (uint64_t)v44);
  re::StringID::destroyString((re::StringID *)&v40);
  v13 = *((_QWORD *)v8 + 32);
  if (v13)
  {
    for (i = 0; i != v13; ++i)
    {
      v15 = re::RigDataValue::attributeValue(v8, i);
      v39[0] = "jointName";
      v39[1] = 9;
      re::RigDataValue::attributeValue(v15, (uint64_t)v39, (uint64_t)&v40);
      v16 = v41;
      if (!(_BYTE)v40 && v42 && (v43 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v42 + 40))();
      re::internal::makeModelSpaceJointPoseRDV((re::Allocator **)v5, v6, *((const char **)v16 + 29), (re::RigDataValue *)&v40);
      re::DynamicArray<re::RigDataValue>::add((uint64_t)&v45, (const re::RigDataValue *)&v40);
      re::RigDataValue::~RigDataValue((re::RigDataValue *)&v40);
    }
  }
  v17 = strlen(*(const char **)(v11 + 232));
  v7 = MEMORY[0x22769136C](*(_QWORD *)(v11 + 232), v17);
  re::internal::makePoseFromRig((re::Allocator **)v5, v6, v7, (uint64_t)&v40);
  v18 = MEMORY[0x2276916F0](v7);
  re::internal::makePose((re::Allocator **)v5, v18, (uint64_t)v39);
  v19 = re::RigHierarchy::jointName(v6, 0);
  re::internal::makeLocalSpaceJointPoseRDV((re::Allocator **)v5, v6, *(const re::RigHierarchy **)(v19 + 8), (re::RigDataValue *)v38);
  v36 = 0;
  memset(v32, 0, sizeof(v32));
  v33 = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  v9 = *(re::Allocator **)v5;
  re::RigGraphCallbackBuilder::init((re::RigGraphCallbackBuilder *)v32, *(re::Allocator **)v5);
  *(_QWORD *)&v46.var0 = 0x76F1BA5D1EB6;
  v46.var1 = "InputPose";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v32, &v46, (const re::RigDataValue *)&v40);
  re::StringID::destroyString((re::StringID *)&v46);
  *(_QWORD *)&v46.var0 = 0x3D8860E9FFCEA9D0;
  v46.var1 = "TaskSettings";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v32, &v46, v8);
  re::StringID::destroyString((re::StringID *)&v46);
  *(_QWORD *)&v46.var0 = 0xC55D73256F227AE8;
  v46.var1 = "ModelSpaceJointTransforms";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v32, &v46, (const re::RigDataValue *)v44);
  re::StringID::destroyString((re::StringID *)&v46);
  *(_QWORD *)&v46.var0 = 0xB88303615935B0FCLL;
  v46.var1 = "ModelToWorldTransform";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v32, &v46, v12);
  re::StringID::destroyString((re::StringID *)&v46);
  *(_QWORD *)&v46.var0 = 0xF2EC5C4DD6027FE2;
  v46.var1 = "SolverToModelTransform";
  re::RigGraphCallbackBuilder::addInputParam((re::RigGraphCallbackBuilder *)v32, &v46, (const re::RigDataValue *)v38);
  re::StringID::destroyString((re::StringID *)&v46);
  *(_QWORD *)&v46.var0 = 0x10498EC9357CACLL;
  v46.var1 = "SolvedPose";
  re::RigGraphCallbackBuilder::addOutputParam((re::RigGraphCallbackBuilder *)v32, &v46, (re::RigDataValue *)v39);
  re::StringID::destroyString((re::StringID *)&v46);
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 96);
  v20 = atomic_load((unsigned __int8 *)&qword_2540FB0A0);
  if ((v20 & 1) == 0)
    goto LABEL_29;
LABEL_15:
  v21 = _MergedGlobals_29;
  re::StringID::invalid((re::StringID *)&v46);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, StringID *))(*(_QWORD *)v10 + 16))(v10, v21, &v46);
  re::StringID::destroyString((re::StringID *)&v46);
  v23 = (*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 208, 16);
  *(_QWORD *)v23 = CoreIKGenericSolverCreate();
  *(_QWORD *)(v23 + 8) = v9;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 48) = v22;
  *(_QWORD *)(v23 + 64) = 0;
  *(_QWORD *)(v23 + 72) = 0;
  *(_QWORD *)(v23 + 68) = 0xFFFFFFFF00000001;
  *(_OWORD *)(v23 + 108) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(_OWORD *)(v23 + 124) = 0u;
  *(_OWORD *)(v23 + 92) = 0u;
  *(_OWORD *)(v23 + 76) = 0u;
  *(_DWORD *)(v23 + 112) = 1;
  *(_QWORD *)(v23 + 128) = 0;
  *(_QWORD *)(v23 + 136) = 0;
  *(_QWORD *)(v23 + 120) = 0;
  *(_DWORD *)(v23 + 144) = 0;
  *(_QWORD *)(v23 + 192) = 0;
  *(_QWORD *)(v23 + 160) = 0;
  *(_DWORD *)(v23 + 184) = 0;
  *(_QWORD *)(v23 + 168) = 0;
  *(_QWORD *)(v23 + 176) = 0;
  JointCount = CoreIKGenericSolverGetJointCount();
  v30 = v9;
  re::FixedArray<CoreIKTransform>::init<>((uint64_t *)(v23 + 16), (uint64_t)v9, JointCount);
  *(_QWORD *)(v23 + 176) = 0;
  ++*(_DWORD *)(v23 + 184);
  v25 = *((_QWORD *)v8 + 32);
  if (v25)
  {
    for (j = 0; j != v25; ++j)
    {
      v27 = re::RigDataValue::attributeValue(v8, j);
      v37[0] = "jointName";
      v37[1] = 9;
      re::RigDataValue::attributeValue(v27, (uint64_t)v37, (uint64_t)&v46);
      v28 = (const char *)*((_QWORD *)v46.var1 + 29);
      if (!*(_BYTE *)&v46.var0 && v48 && (p_var1 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v48 + 40))();
      *(_QWORD *)&v46.var0 = 0;
      strlen(v28);
      *(_QWORD *)&v46.var0 = CoreIKGenericSolverGetConstraintIndex();
      re::DynamicArray<unsigned long>::add((_QWORD *)(v23 + 160), &v46);
    }
  }
  *(_QWORD *)&v46.var0 = v23;
  v46.var1 = (char *)&off_24ED26CD0;
  p_var1 = &v46.var1;
  v47 = v30;
  re::RigGraphCallbackBuilder::buildCallbackData((unint64_t *)v32, v5, (uint64_t)re::internal::penetrationCorrectionCallback, (uint64_t *)&v46);
  re::internal::bindCallbackOutputToNodeOutputPose(v6, (re::RigDataValue *)v39, v7, v5, v31);
  MEMORY[0x2276913A8](v7);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v46);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v34 + 8);
  re::DynamicArray<re::Pair<re::StringID,re::RigDataValue *,true>>::deinit((uint64_t)v32 + 8);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v38);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v39);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)&v40);
  re::RigDataValue::~RigDataValue((re::RigDataValue *)v44);
  return 1;
}

void re::internal::registerPenetrationCorrectionSolverNode(re::internal *this, re::RigEnvironment *a2)
{
  uint64_t v3[2];
  unint64_t v4[2];
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6 = 0;
  v4[0] = 0;
  memset(v5, 0, sizeof(v5));
  v4[1] = (unint64_t)&str_110;
  v3[0] = 0;
  v3[1] = (uint64_t)&str_110;
  v7[2] = xmmword_24ED26C90;
  v7[3] = *(_OWORD *)&off_24ED26CA0;
  v7[4] = xmmword_24ED26CB0;
  v7[0] = constinit_9;
  v7[1] = *(_OWORD *)&off_24ED26C80;
  re::RigGraphOperatorDefinition::init(v4, (uint64_t *)this, v3, 4uLL, 1uLL, (unint64_t)re::internal::penetrationCorrectionCompile, (const char **)v7);
  re::StringID::destroyString((re::StringID *)v3);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit((_QWORD *)&v5[1] + 1);
  re::FixedArray<re::RigGraphOperatorParameterDefinition>::deinit(v5);
  re::StringID::destroyString((re::StringID *)v4);
}

void _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_43CoreIKPenetrationCorrectionSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperINS2_14CollisionWorldEEEPKNS2_12RigDataValueEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISL_EEFvSK_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_43CoreIKPenetrationCorrectionSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperINS2_14CollisionWorldEEEPKNS2_12RigDataValueEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED26CD0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_43CoreIKPenetrationCorrectionSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperINS2_14CollisionWorldEEEPKNS2_12RigDataValueEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED26CD0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_43CoreIKPenetrationCorrectionSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperINS2_14CollisionWorldEEEPKNS2_12RigDataValueEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISL_EEFvSK_EEclEOSK_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    CoreIKGenericSolverDestroy();
    v4 = *(_QWORD *)(v2 + 160);
    if (v4)
    {
      if (*(_QWORD *)(v2 + 192))
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      *(_QWORD *)(v2 + 192) = 0;
      *(_QWORD *)(v2 + 168) = 0;
      *(_QWORD *)(v2 + 176) = 0;
      *(_QWORD *)(v2 + 160) = 0;
      ++*(_DWORD *)(v2 + 184);
    }
    re::BucketArray<re::CollisionCastHit,10ul>::deinit(v2 + 96);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2 + 96);
    v5 = *(_QWORD *)(v2 + 16);
    if (v5)
    {
      if (*(_QWORD *)(v2 + 24))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v2 + 32));
        *(_QWORD *)(v2 + 24) = 0;
        *(_QWORD *)(v2 + 32) = 0;
      }
      *(_QWORD *)(v2 + 16) = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_43CoreIKPenetrationCorrectionSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperINS2_14CollisionWorldEEEPKNS2_12RigDataValueEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN2re8internal14makeNodeUniqueINS0_43CoreIKPenetrationCorrectionSolverNodeHelperENS_9AllocatorEJP9CoreIKRigNSt3__117reference_wrapperINS_14CollisionWorldEEEPKNS_12RigDataValueEEEEDaPT0_DpT1_EUlPvE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re8internal14makeNodeUniqueINS3_43CoreIKPenetrationCorrectionSolverNodeHelperENS2_9AllocatorEJP9CoreIKRigNS_17reference_wrapperINS2_14CollisionWorldEEEPKNS2_12RigDataValueEEEEDaPT0_DpT1_EUlPvE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN2re8internal14makeNodeUniqueINS0_43CoreIKPenetrationCorrectionSolverNodeHelperENS_9AllocatorEJP9CoreIKRigNSt3__117reference_wrapperINS_14CollisionWorldEEEPKNS_12RigDataValueEEEEDaPT0_DpT1_EUlPvE_;
}

uint64_t re::EvaluationModelSingleThread::init(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _anonymous_namespace_ *v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t j;
  __int128 *v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t k;
  __int128 *v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t m;
  unint64_t v53;
  uint64_t v54;
  unint64_t n;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t ii;
  _anonymous_namespace_ *v60;
  _OWORD *v61;
  _OWORD *v62;
  _anonymous_namespace_ *v63;
  _OWORD *v64;
  _OWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _anonymous_namespace_ *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _anonymous_namespace_ *v78;
  _OWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82;
  size_t v83;
  uint64_t v84;
  _anonymous_namespace_ *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t jj;
  _anonymous_namespace_ *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD **v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t kk;
  _QWORD *v129;
  uint64_t v130;
  uint64_t mm;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  re::FixedRegisterTable *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  re::FixedRegisterTable *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t nn;
  _QWORD *v156;
  uint64_t result;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t *v166;
  _QWORD *v167;
  unint64_t *v168;
  unint64_t *v169;
  unint64_t *v170;
  unint64_t v171;
  _QWORD *v172;
  char v173[8];
  __int128 v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  _QWORD v178[2];
  unint64_t v179;
  int v180;
  uint64_t v181;
  _QWORD v182[2];
  unint64_t v183;
  int v184;
  uint64_t v185;
  _QWORD v186[2];
  unint64_t v187;
  int v188;
  void *__src;
  _anonymous_namespace_ *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  _BYTE v207[8];
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  _BYTE v216[216];
  uint64_t v217;
  _QWORD v218[375];
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int v224;
  _QWORD v225[2];
  unint64_t v226;
  int v227;
  __int128 v228;
  __int128 v229;
  int v230;
  __int128 v231;
  __int128 v232;
  int v233;
  __int128 v234;
  __int128 v235;
  int v236;
  __int128 v237;
  __int128 v238;
  int v239;
  __int128 v240;
  __int128 v241;
  int v242;
  __int128 v243;
  __int128 v244;
  int v245;
  __int128 v246;
  __int128 v247;
  int v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  unint64_t v254;
  char v255[24];
  __int128 v256;
  __int128 v257;
  uint64_t v258[17];
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  _QWORD v280[6];
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  int v290;
  const char *v291;
  __int16 v292;
  int v293;
  __int16 v294;
  unint64_t v295;
  __int16 v296;
  unint64_t v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint64_t v303;

  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = v4;
  v7 = (uint64_t)v6;
  v9 = v8;
  v158 = v3;
  v303 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(v8 + 8);
  *(_QWORD *)&v259 = v6;
  v190 = v6;
  v191 = v11;
  bzero(&v192, 0x288uLL);
  for (i = 0; i != 3120; i += 40)
  {
    v13 = (char *)&v190 + i;
    *((_QWORD *)v13 + 87) = 0;
    *((_QWORD *)v13 + 83) = 0;
    *((_QWORD *)v13 + 85) = 0;
    *((_QWORD *)v13 + 84) = 0;
    *((_DWORD *)v13 + 172) = 0;
  }
  v14 = 0;
  v223 = 0;
  v220 = 0;
  v221 = 0;
  v219 = 0;
  v222 = 0;
  v224 = v10;
  v225[0] = 0;
  v226 = 0;
  v225[1] = 0;
  v227 = 0;
  v228 = 0u;
  v229 = 0u;
  v230 = 0;
  v231 = 0u;
  v232 = 0u;
  v233 = 0;
  v234 = 0u;
  v235 = 0u;
  v236 = 0;
  v239 = 0;
  v238 = 0u;
  v237 = 0u;
  v240 = 0u;
  v241 = 0u;
  v242 = 0;
  v245 = 0;
  v244 = 0u;
  v243 = 0u;
  v246 = 0u;
  v247 = 0u;
  v248 = 0;
  v254 = 0;
  v253 = 0u;
  v252 = 0u;
  v251 = 0u;
  v250 = 0u;
  v249 = 0u;
  do
  {
    v218[v14 + 2] = v7;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v218[v14 + 2], 0);
    ++LODWORD(v218[v14 + 5]);
    v14 += 5;
  }
  while (v14 != 390);
  v219 = v7;
  re::DynamicArray<re::EvaluationCommand>::setCapacity(&v219, 0);
  ++v222;
  re::DynamicRegisterTable::initArrays<re::Allocator *&>(v225, &v259);
  __src = 0;
  v186[1] = 0;
  v187 = 0;
  v188 = 0;
  v186[0] = v7;
  re::DynamicArray<re::EvaluationCommand>::setCapacity(v186, 0);
  ++v188;
  v185 = 0;
  v182[1] = 0;
  v183 = 0;
  v184 = 0;
  v182[0] = v7;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v182, 0);
  ++v184;
  v181 = 0;
  v178[1] = 0;
  v179 = 0;
  v180 = 0;
  v178[0] = v7;
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v178, 0);
  ++v180;
  if (!v173[0])
  {
    *(_BYTE *)v158 = 0;
    *(_OWORD *)(v158 + 8) = v174;
    *(_QWORD *)(v158 + 24) = v175;
    *(_QWORD *)(v158 + 48) = v177;
    *(_OWORD *)(v158 + 32) = v176;
    v177 = 0;
    v175 = 0;
    v176 = 0uLL;
LABEL_138:
    if (v175 && (v176 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v175 + 40))();
    goto LABEL_141;
  }
  v15 = v9 + 712;
  v16 = v187;
  re::FixedArray<re::EvaluationCommand>::init<>((uint64_t *)(v9 + 712), v7, v187);
  v19 = __src;
  if (!*(_QWORD *)(v9 + 712))
  {
    if (!v16)
      goto LABEL_12;
  }
  if (*(_QWORD *)(v9 + 720) != v16)
    goto LABEL_254;
  if (v16)
    memmove(*(void **)(v9 + 728), v19, 4 * v16);
LABEL_12:
  re::FixedArray<unsigned long>::init<>((uint64_t *)(v9 + 760), v7, v183);
  *(_QWORD *)&v259 = v185;
  *((_QWORD *)&v259 + 1) = v183;
  re::FixedArray<unsigned long>::operator=((_anonymous_namespace_ *)(v9 + 760), (uint64_t)&v259);
  re::FixedArray<unsigned long>::init<>((uint64_t *)(v9 + 736), v7, v179);
  *(_QWORD *)&v259 = v181;
  *((_QWORD *)&v259 + 1) = v179;
  re::FixedArray<unsigned long>::operator=((_anonymous_namespace_ *)(v9 + 736), (uint64_t)&v259);
  v20 = v9 + 496;
  re::FixedArray<int>::init<>((uint64_t *)(v9 + 16), (uint64_t)v190, *((unint64_t *)&v249 + 1));
  v21 = v193;
  if (v193)
  {
    v23 = *(_QWORD *)(v9 + 24);
    v22 = *(_QWORD *)(v9 + 32);
    v15 = v226;
    v24 = v228;
    v25 = (unint64_t *)(v194 + 56);
    do
    {
      if (*((_BYTE *)v25 - 16) == 3)
      {
        v26 = *v25;
        if (*v25 != -1)
        {
          v5 = *(v25 - 1);
          if (v15 <= v5)
            goto LABEL_234;
          if (v23 <= v26)
          {
LABEL_235:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 468;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v26;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v23;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_236:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 797;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v5;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_237:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 468;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v26;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v23;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_238:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 797;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v5;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_239:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 468;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v26;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v23;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_240:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 797;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v15;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_241:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 468;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v23;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_242:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 797;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v15;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_243:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 468;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v23;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_244:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 797;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v15;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_245:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 468;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v23;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_246:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 797;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v15;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_247:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 468;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v23;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_248:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 797;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v15;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_249:
            v258[0] = 0;
            v262 = 0u;
            v263 = 0u;
            v260 = 0u;
            v261 = 0u;
            v259 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v280[0]) = 136315906;
            *(_QWORD *)((char *)v280 + 4) = "operator[]";
            WORD2(v280[1]) = 1024;
            *(_DWORD *)((char *)&v280[1] + 6) = 468;
            WORD1(v280[2]) = 2048;
            *(_QWORD *)((char *)&v280[2] + 4) = v23;
            WORD2(v280[3]) = 2048;
            *(_QWORD *)((char *)&v280[3] + 6) = v26;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_250;
          }
          *(_DWORD *)(v22 + 4 * v26) = *(_DWORD *)(v24 + 4 * v5);
        }
      }
      v25 += 8;
      --v21;
    }
    while (v21);
  }
  re::FixedArray<int>::init<>((uint64_t *)(v9 + 40), (uint64_t)v190, v250);
  v27 = v195;
  if (v195)
  {
    v23 = *(_QWORD *)(v9 + 48);
    v28 = *(_QWORD *)(v9 + 56);
    v15 = *((_QWORD *)&v229 + 1);
    v29 = v231;
    v30 = (unint64_t *)(v196 + 56);
    do
    {
      if (*((_BYTE *)v30 - 16) == 3)
      {
        v26 = *v30;
        if (*v30 != -1)
        {
          v5 = *(v30 - 1);
          if (v15 <= v5)
            goto LABEL_236;
          if (v23 <= v26)
            goto LABEL_237;
          *(_DWORD *)(v28 + 4 * v26) = *(_DWORD *)(v29 + 4 * v5);
        }
      }
      v30 += 8;
      --v27;
    }
    while (v27);
  }
  re::FixedArray<int>::init<>((uint64_t *)(v9 + 64), (uint64_t)v190, *((unint64_t *)&v250 + 1));
  v31 = v197;
  if (v197)
  {
    v23 = *(_QWORD *)(v9 + 72);
    v32 = *(_QWORD *)(v9 + 80);
    v15 = *((_QWORD *)&v232 + 1);
    v33 = v234;
    v34 = (unint64_t *)(v198 + 56);
    do
    {
      if (*((_BYTE *)v34 - 16) == 3)
      {
        v26 = *v34;
        if (*v34 != -1)
        {
          v5 = *(v34 - 1);
          if (v15 <= v5)
            goto LABEL_238;
          if (v23 <= v26)
            goto LABEL_239;
          *(_DWORD *)(v32 + 4 * v26) = *(_DWORD *)(v33 + 4 * v5);
        }
      }
      v34 += 8;
      --v31;
    }
    while (v31);
  }
  re::FixedArray<re::Matrix3x3<float>>::init<>((uint64_t *)(v9 + 88), (uint64_t)v190, v251);
  v35 = v199;
  if (v199)
  {
    v36 = 0;
    for (j = 0; j < v35; ++j)
    {
      if (*(_BYTE *)(v200 + v36 + 40) == 3)
      {
        v23 = *(_QWORD *)(v200 + v36 + 56);
        if (v23 != -1)
        {
          v15 = *(_QWORD *)(v200 + v36 + 48);
          v26 = *((_QWORD *)&v235 + 1);
          if (*((_QWORD *)&v235 + 1) <= v15)
            goto LABEL_240;
          v26 = *(_QWORD *)(v9 + 96);
          if (v26 <= v23)
            goto LABEL_241;
          v38 = (__int128 *)(v237 + 48 * v15);
          v39 = (_OWORD *)(*(_QWORD *)(v9 + 104) + 48 * v23);
          v40 = *v38;
          v41 = v38[2];
          v39[1] = v38[1];
          v39[2] = v41;
          *v39 = v40;
          v35 = v199;
        }
      }
      v36 += 64;
    }
  }
  re::FixedArray<re::Matrix4x4<float>>::init<>((uint64_t *)(v9 + 112), (uint64_t)v190, *((unint64_t *)&v251 + 1));
  v42 = v201;
  if (v201)
  {
    v43 = 0;
    for (k = 0; k < v42; ++k)
    {
      if (*(_BYTE *)(v202 + v43 + 40) == 3)
      {
        v23 = *(_QWORD *)(v202 + v43 + 56);
        if (v23 != -1)
        {
          v15 = *(_QWORD *)(v202 + v43 + 48);
          v26 = *((_QWORD *)&v238 + 1);
          if (*((_QWORD *)&v238 + 1) <= v15)
            goto LABEL_242;
          v26 = *(_QWORD *)(v9 + 120);
          if (v26 <= v23)
            goto LABEL_243;
          v45 = (__int128 *)(v240 + (v15 << 6));
          v46 = (_OWORD *)(*(_QWORD *)(v9 + 128) + (v23 << 6));
          v47 = *v45;
          v48 = v45[1];
          v49 = v45[3];
          v46[2] = v45[2];
          v46[3] = v49;
          *v46 = v47;
          v46[1] = v48;
          v42 = v201;
        }
      }
      v43 += 64;
    }
  }
  re::FixedArray<re::Quaternion<float>>::init<>((uint64_t *)(v9 + 136), (uint64_t)v190, v252);
  v50 = v203;
  if (v203)
  {
    v51 = 0;
    for (m = 0; m < v50; ++m)
    {
      if (*(_BYTE *)(v204 + v51 + 40) == 3)
      {
        v23 = *(_QWORD *)(v204 + v51 + 56);
        if (v23 != -1)
        {
          v15 = *(_QWORD *)(v204 + v51 + 48);
          v26 = *((_QWORD *)&v241 + 1);
          if (*((_QWORD *)&v241 + 1) <= v15)
            goto LABEL_244;
          v26 = *(_QWORD *)(v9 + 144);
          if (v26 <= v23)
            goto LABEL_245;
          *(_OWORD *)(*(_QWORD *)(v9 + 152) + 16 * v23) = *(_OWORD *)(v243 + 16 * v15);
          v50 = v203;
        }
      }
      v51 += 64;
    }
  }
  re::FixedArray<re::Vector2<float>>::init<>((uint64_t *)(v9 + 160), (uint64_t)v190, *((unint64_t *)&v252 + 1));
  v53 = v205;
  if (v205)
  {
    v54 = 0;
    for (n = 0; n < v53; ++n)
    {
      if (*(_BYTE *)(v206 + v54 + 40) == 3)
      {
        v23 = *(_QWORD *)(v206 + v54 + 56);
        if (v23 != -1)
        {
          v15 = *(_QWORD *)(v206 + v54 + 48);
          v26 = *((_QWORD *)&v244 + 1);
          if (*((_QWORD *)&v244 + 1) <= v15)
            goto LABEL_246;
          v26 = *(_QWORD *)(v9 + 168);
          if (v26 <= v23)
            goto LABEL_247;
          *(_QWORD *)(*(_QWORD *)(v9 + 176) + 8 * v23) = *(_QWORD *)(v246 + 8 * v15);
          v53 = v205;
        }
      }
      v54 += 64;
    }
  }
  re::FixedArray<re::Vector3<float>>::init<>((uint64_t *)(v9 + 184), (uint64_t)v190, v253);
  v57 = v208;
  if (v208)
  {
    v58 = 0;
    for (ii = 0; ii < v57; ++ii)
    {
      if (*(_BYTE *)(v209 + v58 + 40) == 3)
      {
        v23 = *(_QWORD *)(v209 + v58 + 56);
        if (v23 != -1)
        {
          v15 = *(_QWORD *)(v209 + v58 + 48);
          v26 = *((_QWORD *)&v247 + 1);
          if (*((_QWORD *)&v247 + 1) <= v15)
            goto LABEL_248;
          v26 = *(_QWORD *)(v9 + 192);
          if (v26 <= v23)
            goto LABEL_249;
          *(_OWORD *)(*(_QWORD *)(v9 + 200) + 16 * v23) = *(_OWORD *)(v249 + 16 * v15);
          v57 = v208;
        }
      }
      v58 += 64;
    }
  }
  v60 = v190;
  v15 = *((_QWORD *)&v253 + 1);
  *(_QWORD *)(v9 + 208) = v190;
  *(_QWORD *)(v9 + 216) = v15;
  if (v15)
  {
    if (v15 >= 0x92492492492493)
      goto LABEL_255;
    v61 = (_OWORD *)(*(uint64_t (**)(_anonymous_namespace_ *, unint64_t, uint64_t))(*(_QWORD *)v60 + 32))(v60, 448 * v15, 8);
    *(_QWORD *)(v9 + 224) = v61;
    if (!v61)
    {
LABEL_256:
      re::internal::assertLog((re::internal *)4, v56, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_257;
    }
    v62 = v61;
    if (v15 != 1)
    {
      bzero(v61, 448 * v15 - 448);
      v62 += 28 * v15 - 28;
    }
    v62[26] = 0u;
    v62[27] = 0u;
    v62[24] = 0u;
    v62[25] = 0u;
    v62[22] = 0u;
    v62[23] = 0u;
    v62[20] = 0u;
    v62[21] = 0u;
    v62[18] = 0u;
    v62[19] = 0u;
    v62[16] = 0u;
    v62[17] = 0u;
    v62[14] = 0u;
    v62[15] = 0u;
    v62[12] = 0u;
    v62[13] = 0u;
    v62[10] = 0u;
    v62[11] = 0u;
    v62[8] = 0u;
    v62[9] = 0u;
    v62[6] = 0u;
    v62[7] = 0u;
    v62[4] = 0u;
    v62[5] = 0u;
    v62[2] = 0u;
    v62[3] = 0u;
    *v62 = 0u;
    v62[1] = 0u;
    v15 = *((_QWORD *)&v253 + 1);
    v63 = v190;
    *(_QWORD *)(v9 + 232) = v190;
    *(_QWORD *)(v9 + 240) = v15;
    if (v15)
    {
      if (v15 >= 0x97B425ED097B43)
      {
LABEL_259:
        re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 432, v15);
        _os_crash();
        __break(1u);
LABEL_260:
        re::internal::assertLog((re::internal *)4, v56, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
      }
      v64 = (_OWORD *)(*(uint64_t (**)(_anonymous_namespace_ *, unint64_t, uint64_t))(*(_QWORD *)v63 + 32))(v63, 432 * v15, 8);
      *(_QWORD *)(v9 + 248) = v64;
      if (!v64)
        goto LABEL_260;
      v65 = v64;
      if (v15 != 1)
      {
        bzero(v64, 432 * v15 - 432);
        v65 += 27 * v15 - 27;
      }
      v65[25] = 0u;
      v65[26] = 0u;
      v65[23] = 0u;
      v65[24] = 0u;
      v65[21] = 0u;
      v65[22] = 0u;
      v65[19] = 0u;
      v65[20] = 0u;
      v65[17] = 0u;
      v65[18] = 0u;
      v65[15] = 0u;
      v65[16] = 0u;
      v65[13] = 0u;
      v65[14] = 0u;
      v65[11] = 0u;
      v65[12] = 0u;
      v65[9] = 0u;
      v65[10] = 0u;
      v65[7] = 0u;
      v65[8] = 0u;
      v65[5] = 0u;
      v65[6] = 0u;
      v65[3] = 0u;
      v65[4] = 0u;
      v65[1] = 0u;
      v65[2] = 0u;
      *v65 = 0u;
    }
  }
  else
  {
    *(_QWORD *)(v9 + 232) = v60;
    *(_QWORD *)(v9 + 240) = 0;
  }
  v66 = v211;
  v164 = v9;
  if (v211)
  {
    v67 = 0;
    v26 = 0;
    v20 = 448;
    do
    {
      v1 = v212;
      v23 = *(_QWORD *)(v212 + v67 + 896);
      if (v23 != -1)
      {
        v15 = *(_QWORD *)(v9 + 216);
        if (v15 <= v23)
          goto LABEL_227;
        v68 = v212 + v67;
        v69 = (_QWORD *)(*(_QWORD *)(v9 + 224) + 448 * v23);
        *v69 = *(_QWORD *)(v212 + v67 + 448);
        v15 = v1 + v67 + 456;
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 1), v15);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 4), v68 + 480);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 7), v68 + 504);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 10), v68 + 528);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 13), v68 + 552);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 16), v68 + 576);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 19), v68 + 600);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 22), v68 + 624);
        re::FixedArray<re::EvaluationSRT>::operator=((uint64_t)(v69 + 25), v68 + 648);
        v5 = v68 + 672;
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 28), v68 + 672);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 31), v68 + 696);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 34), v68 + 720);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 37), v68 + 744);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 40), v68 + 768);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 43), v68 + 792);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 46), v68 + 816);
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=((uint64_t)(v69 + 49), v68 + 840);
        re::FixedArray<re::EvaluationSRT>::operator=((uint64_t)(v69 + 52), v68 + 864);
        v69[55] = *(_QWORD *)(v68 + 888);
        v9 = v164;
        v2 = *(uint64_t **)(v164 + 240);
        if ((unint64_t)v2 <= v23)
        {
LABEL_228:
          v258[0] = 0;
          v262 = 0u;
          v263 = 0u;
          v260 = 0u;
          v261 = 0u;
          v259 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v280[0]) = 136315906;
          *(_QWORD *)((char *)v280 + 4) = "operator[]";
          WORD2(v280[1]) = 1024;
          *(_DWORD *)((char *)&v280[1] + 6) = 468;
          WORD1(v280[2]) = 2048;
          *(_QWORD *)((char *)&v280[2] + 4) = v23;
          WORD2(v280[3]) = 2048;
          *(_QWORD *)((char *)&v280[3] + 6) = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_229:
          v258[0] = 0;
          v262 = 0u;
          v263 = 0u;
          v260 = 0u;
          v261 = 0u;
          v259 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v280[0]) = 136315906;
          *(_QWORD *)((char *)v280 + 4) = "operator[]";
          WORD2(v280[1]) = 1024;
          *(_DWORD *)((char *)&v280[1] + 6) = 468;
          WORD1(v280[2]) = 2048;
          *(_QWORD *)((char *)&v280[2] + 4) = v23;
          WORD2(v280[3]) = 2048;
          *(_QWORD *)((char *)&v280[3] + 6) = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_230:
          v258[0] = 0;
          v262 = 0u;
          v263 = 0u;
          v260 = 0u;
          v261 = 0u;
          v259 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v280[0]) = 136315906;
          *(_QWORD *)((char *)v280 + 4) = "operator[]";
          WORD2(v280[1]) = 1024;
          *(_DWORD *)((char *)&v280[1] + 6) = 468;
          WORD1(v280[2]) = 2048;
          *(_QWORD *)((char *)&v280[2] + 4) = v23;
          WORD2(v280[3]) = 2048;
          *(_QWORD *)((char *)&v280[3] + 6) = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_231:
          v258[0] = 0;
          v262 = 0u;
          v263 = 0u;
          v260 = 0u;
          v261 = 0u;
          v259 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v280[0]) = 136315906;
          *(_QWORD *)((char *)v280 + 4) = "operator[]";
          WORD2(v280[1]) = 1024;
          *(_DWORD *)((char *)&v280[1] + 6) = 468;
          WORD1(v280[2]) = 2048;
          *(_QWORD *)((char *)&v280[2] + 4) = v23;
          WORD2(v280[3]) = 2048;
          *(_QWORD *)((char *)&v280[3] + 6) = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_232:
          v258[0] = 0;
          v262 = 0u;
          v263 = 0u;
          v260 = 0u;
          v261 = 0u;
          v259 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v280[0]) = 136315906;
          *(_QWORD *)((char *)v280 + 4) = "operator[]";
          WORD2(v280[1]) = 1024;
          *(_DWORD *)((char *)&v280[1] + 6) = 476;
          WORD1(v280[2]) = 2048;
          *(_QWORD *)((char *)&v280[2] + 4) = v15;
          WORD2(v280[3]) = 2048;
          *(_QWORD *)((char *)&v280[3] + 6) = v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_233:
          v258[0] = 0;
          v262 = 0u;
          v263 = 0u;
          v260 = 0u;
          v261 = 0u;
          v259 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v280[0]) = 136315906;
          *(_QWORD *)((char *)v280 + 4) = "operator[]";
          WORD2(v280[1]) = 1024;
          *(_DWORD *)((char *)&v280[1] + 6) = 468;
          WORD1(v280[2]) = 2048;
          *(_QWORD *)((char *)&v280[2] + 4) = v1;
          WORD2(v280[3]) = 2048;
          *(_QWORD *)((char *)&v280[3] + 6) = v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_234:
          v258[0] = 0;
          v262 = 0u;
          v263 = 0u;
          v260 = 0u;
          v261 = 0u;
          v259 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v280[0]) = 136315906;
          *(_QWORD *)((char *)v280 + 4) = "operator[]";
          WORD2(v280[1]) = 1024;
          *(_DWORD *)((char *)&v280[1] + 6) = 797;
          WORD1(v280[2]) = 2048;
          *(_QWORD *)((char *)&v280[2] + 4) = v5;
          WORD2(v280[3]) = 2048;
          *(_QWORD *)((char *)&v280[3] + 6) = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_235;
        }
        re::FixedRegisterTable::initSize<re::FixedRegisterIdTable>((uint64_t *)(*(_QWORD *)(v164 + 248) + 432 * v23), (uint64_t)v190, (unint64_t *)(v1 + v67 + 456));
        v15 = *(_QWORD *)(v164 + 240);
        if (v15 <= v23)
          goto LABEL_229;
        re::FixedArray<re::GenericSRT<float>>::init<>((_QWORD *)(*(_QWORD *)(v164 + 248) + 432 * v23 + 192), (uint64_t)v190, *(_QWORD *)(v1 + v67 + 656));
        v15 = *(_QWORD *)(v164 + 240);
        if (v15 <= v23)
          goto LABEL_230;
        re::FixedRegisterTable::initSize<re::FixedRegisterIdTable>((uint64_t *)(*(_QWORD *)(v164 + 248) + 432 * v23 + 216), (uint64_t)v190, (unint64_t *)v5);
        v15 = *(_QWORD *)(v164 + 240);
        if (v15 <= v23)
          goto LABEL_231;
        re::FixedArray<re::GenericSRT<float>>::init<>((_QWORD *)(*(_QWORD *)(v164 + 248) + 432 * v23 + 408), (uint64_t)v190, *(_QWORD *)(v1 + v67 + 872));
        v66 = v211;
      }
      ++v26;
      v67 += 904;
    }
    while (v26 < v66);
  }
  v70 = v190;
  v15 = v254;
  *(_QWORD *)(v9 + 256) = v190;
  *(_QWORD *)(v9 + 264) = v15;
  if (v15)
  {
    if (v15 < 0x8FB823EE08FB83)
    {
      v71 = (char *)(*(uint64_t (**)(_anonymous_namespace_ *, unint64_t, uint64_t))(*(_QWORD *)v70 + 32))(v70, 456 * v15, 8);
      *(_QWORD *)(v9 + 272) = v71;
      if (v71)
      {
        v73 = v71;
        if (v15 != 1)
        {
          bzero(v71, 456 * v15 - 456);
          v73 += 456 * v15 - 456;
        }
        *((_QWORD *)v73 + 56) = 0;
        *((_OWORD *)v73 + 26) = 0u;
        *((_OWORD *)v73 + 27) = 0u;
        *((_OWORD *)v73 + 24) = 0u;
        *((_OWORD *)v73 + 25) = 0u;
        *((_OWORD *)v73 + 22) = 0u;
        *((_OWORD *)v73 + 23) = 0u;
        *((_OWORD *)v73 + 20) = 0u;
        *((_OWORD *)v73 + 21) = 0u;
        *((_OWORD *)v73 + 18) = 0u;
        *((_OWORD *)v73 + 19) = 0u;
        *((_OWORD *)v73 + 16) = 0u;
        *((_OWORD *)v73 + 17) = 0u;
        *((_OWORD *)v73 + 14) = 0u;
        *((_OWORD *)v73 + 15) = 0u;
        *((_OWORD *)v73 + 12) = 0u;
        *((_OWORD *)v73 + 13) = 0u;
        *((_OWORD *)v73 + 10) = 0u;
        *((_OWORD *)v73 + 11) = 0u;
        *((_OWORD *)v73 + 8) = 0u;
        *((_OWORD *)v73 + 9) = 0u;
        *((_OWORD *)v73 + 6) = 0u;
        *((_OWORD *)v73 + 7) = 0u;
        *((_OWORD *)v73 + 4) = 0u;
        *((_OWORD *)v73 + 5) = 0u;
        *((_OWORD *)v73 + 2) = 0u;
        *((_OWORD *)v73 + 3) = 0u;
        *(_OWORD *)v73 = 0u;
        *((_OWORD *)v73 + 1) = 0u;
        goto LABEL_105;
      }
      goto LABEL_258;
    }
LABEL_257:
    re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 456, v15);
    _os_crash();
    __break(1u);
LABEL_258:
    re::internal::assertLog((re::internal *)4, v72, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    goto LABEL_259;
  }
LABEL_105:
  v159 = v214;
  if (v214)
  {
    v15 = 0;
    v5 = (unint64_t)&v270;
    v20 = 248;
    v26 = 456;
    do
    {
      v23 = v214;
      if (v214 <= v15)
        goto LABEL_232;
      v74 = v215;
      v172 = (_QWORD *)re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](v191 + 1608, v15);
      v1 = v74[31 * v15 + 30];
      if (v1 != -1)
      {
        v23 = *(_QWORD *)(v9 + 264);
        if (v23 <= v1)
          goto LABEL_233;
        v75 = *(_QWORD *)(v9 + 272);
        v2 = (uint64_t *)(v75 + 456 * v1);
        v76 = &v74[31 * v15];
        v20 = v76[4];
        v170 = v76 + 4;
        re::FixedArray<unsigned long>::init<>(v2, (uint64_t)v190, v20);
        v78 = v190;
        v2[3] = (uint64_t)v190;
        v2[4] = v20;
        v169 = (unint64_t *)(v2 + 4);
        v161 = v1;
        v162 = v15;
        v163 = v74;
        v160 = v75;
        if (v20)
        {
          if (v20 < 0x155555555555556)
          {
            v23 = 192 * v20;
            v79 = (_OWORD *)(*(uint64_t (**)(_anonymous_namespace_ *, unint64_t, uint64_t))(*(_QWORD *)v78 + 32))(v78, 192 * v20, 8);
            v81 = v75 + 456 * v1;
            *(_QWORD *)(v81 + 40) = v79;
            v167 = (_QWORD *)(v81 + 40);
            if (v79)
            {
              v82 = v79;
              v171 = v20;
              if (v20 != 1)
              {
                v83 = v23 - 192;
                bzero(v79, v83);
                v82 = (_OWORD *)((char *)v82 + v83);
              }
              v20 = 248;
              v82[10] = 0u;
              v82[11] = 0u;
              v82[8] = 0u;
              v82[9] = 0u;
              v82[6] = 0u;
              v82[7] = 0u;
              v82[4] = 0u;
              v82[5] = 0u;
              v82[2] = 0u;
              v82[3] = 0u;
              *v82 = 0u;
              v82[1] = 0u;
              v84 = v75 + 456 * v1;
              v85 = v190;
              v23 = v171;
              *(_QWORD *)(v84 + 56) = v171;
              v166 = (unint64_t *)(v84 + 56);
              *(_QWORD *)(v84 + 48) = v85;
              if (v171 < 0x5397829CBC14E6)
              {
                v86 = (*(uint64_t (**)(_anonymous_namespace_ *, unint64_t, uint64_t))(*(_QWORD *)v85 + 32))(v85, 784 * v171, 8);
                v88 = v75 + 456 * v1;
                *(_QWORD *)(v88 + 64) = v86;
                v165 = (_QWORD *)(v88 + 64);
                if (v86)
                {
                  for (jj = v86; --v23; jj += 784)
                  {
                    *(_QWORD *)jj = &off_24ED26FC0;
                    *(_DWORD *)(jj + 8) = -1;
                    bzero((void *)(jj + 16), 0x300uLL);
                  }
                  *(_QWORD *)jj = &off_24ED26FC0;
                  *(_DWORD *)(jj + 8) = -1;
                  bzero((void *)(jj + 16), 0x300uLL);
                  v1 = 0;
                  v26 = 0;
                  v91 = 0;
                  v168 = &v74[31 * v15 + 5];
                  v92 = 104;
                  while (1)
                  {
                    v23 = *v170;
                    if (*v170 <= v91)
                      break;
                    v20 = *v168;
                    v93 = (_QWORD **)re::BucketArray<re::EvaluationBranchData,8ul>::operator[]((uint64_t)v172, v91);
                    v23 = v2[1];
                    if (v23 <= v91)
                      goto LABEL_224;
                    v94 = v93;
                    v95 = *v93;
                    v23 = v20 + v92;
                    *(_QWORD *)(v2[2] + 8 * v91) = *(_QWORD *)(v20 + v92 - 104);
                    v20 = *v169;
                    if (*v169 <= v91)
                      goto LABEL_225;
                    v20 = *v167 + v1;
                    re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v20, v23 - 96);
                    re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v20 + 24, v23 - 72);
                    re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v20 + 48, v23 - 48);
                    re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v20 + 72, v23 - 24);
                    re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v20 + 96, v23);
                    re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v20 + 120, v23 + 24);
                    re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v20 + 144, v23 + 48);
                    re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v20 + 168, v23 + 72);
                    v96 = v94[8];
                    v258[0] = v94[10];
                    v258[1] = v96;
                    v97 = v94[13];
                    v258[2] = v94[15];
                    v258[3] = v97;
                    v98 = v94[18];
                    v258[4] = v94[20];
                    v258[5] = v98;
                    v99 = v94[23];
                    v258[6] = v94[25];
                    v258[7] = v99;
                    v100 = v94[28];
                    v258[8] = v94[30];
                    v258[9] = v100;
                    v101 = v94[33];
                    v258[10] = v94[35];
                    v258[11] = v101;
                    v102 = v94[38];
                    v258[12] = v94[40];
                    v258[13] = v102;
                    v103 = v94[43];
                    v258[14] = v94[45];
                    v258[15] = v103;
                    v288 = 0u;
                    v289 = 0u;
                    v286 = 0u;
                    v287 = 0u;
                    v284 = 0u;
                    v285 = 0u;
                    v282 = 0u;
                    v283 = 0u;
                    v281 = 0u;
                    memset(v280, 0, sizeof(v280));
                    v104 = 0uLL;
                    v278 = 0u;
                    v279 = 0u;
                    v276 = 0u;
                    v277 = 0u;
                    v274 = 0u;
                    v275 = 0u;
                    v272 = 0u;
                    v273 = 0u;
                    v270 = 0u;
                    v271 = 0u;
                    v105 = v95[123];
                    *(_QWORD *)&v259 = v95[125];
                    *((_QWORD *)&v259 + 1) = v105;
                    v106 = v95[128];
                    *(_QWORD *)&v260 = v95[130];
                    *((_QWORD *)&v260 + 1) = v106;
                    v107 = v95[133];
                    *(_QWORD *)&v261 = v95[135];
                    *((_QWORD *)&v261 + 1) = v107;
                    v108 = v95[138];
                    *(_QWORD *)&v262 = v95[140];
                    *((_QWORD *)&v262 + 1) = v108;
                    v109 = v95[143];
                    *(_QWORD *)&v263 = v95[145];
                    *((_QWORD *)&v263 + 1) = v109;
                    v110 = v95[148];
                    v264 = v95[150];
                    v265 = v110;
                    v111 = v95[153];
                    v266 = v95[155];
                    v267 = v111;
                    v112 = v95[158];
                    v268 = v95[160];
                    v269 = v112;
                    *(_QWORD *)&v271 = v280[2];
                    *((_QWORD *)&v271 + 1) = v280[1];
                    *(_QWORD *)&v272 = v280[5];
                    *((_QWORD *)&v272 + 1) = v280[4];
                    *(_QWORD *)&v273 = v282;
                    *((_QWORD *)&v273 + 1) = *((_QWORD *)&v281 + 1);
                    *(_QWORD *)&v274 = *((_QWORD *)&v283 + 1);
                    *((_QWORD *)&v274 + 1) = v283;
                    *(_QWORD *)&v275 = v285;
                    *((_QWORD *)&v275 + 1) = *((_QWORD *)&v284 + 1);
                    *(_QWORD *)&v276 = *((_QWORD *)&v286 + 1);
                    *((_QWORD *)&v276 + 1) = v286;
                    *(_QWORD *)&v277 = v288;
                    *((_QWORD *)&v277 + 1) = *((_QWORD *)&v287 + 1);
                    *(_QWORD *)&v278 = *((_QWORD *)&v289 + 1);
                    *((_QWORD *)&v278 + 1) = v289;
                    v23 = *v166;
                    if (*v166 <= v91)
                      goto LABEL_226;
                    *(_DWORD *)(*v165 + v26 + 8) = v224;
                    re::EvaluationModelSingleThread::init(v255);
                    if (!v255[0] && (_QWORD)v256)
                    {
                      if ((BYTE8(v256) & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)v256 + 40))();
                      v256 = 0u;
                      v257 = 0u;
                    }
                    re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)v280);
                    ++v91;
                    v26 += 784;
                    v92 += 200;
                    v1 += 192;
                    if (v171 == v91)
                      goto LABEL_133;
                  }
                  v258[0] = 0;
                  v262 = 0u;
                  v263 = 0u;
                  v260 = 0u;
                  v261 = 0u;
                  v259 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  LODWORD(v280[0]) = 136315906;
                  *(_QWORD *)((char *)v280 + 4) = "operator[]";
                  WORD2(v280[1]) = 1024;
                  *(_DWORD *)((char *)&v280[1] + 6) = 476;
                  WORD1(v280[2]) = 2048;
                  *(_QWORD *)((char *)&v280[2] + 4) = v91;
                  WORD2(v280[3]) = 2048;
                  *(_QWORD *)((char *)&v280[3] + 6) = v23;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_224:
                  v258[0] = 0;
                  v262 = 0u;
                  v263 = 0u;
                  v260 = 0u;
                  v261 = 0u;
                  v259 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  LODWORD(v280[0]) = 136315906;
                  *(_QWORD *)((char *)v280 + 4) = "operator[]";
                  WORD2(v280[1]) = 1024;
                  *(_DWORD *)((char *)&v280[1] + 6) = 468;
                  WORD1(v280[2]) = 2048;
                  *(_QWORD *)((char *)&v280[2] + 4) = v91;
                  WORD2(v280[3]) = 2048;
                  *(_QWORD *)((char *)&v280[3] + 6) = v23;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_225:
                  v258[0] = 0;
                  v262 = 0u;
                  v263 = 0u;
                  v260 = 0u;
                  v261 = 0u;
                  v259 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  LODWORD(v280[0]) = 136315906;
                  *(_QWORD *)((char *)v280 + 4) = "operator[]";
                  WORD2(v280[1]) = 1024;
                  *(_DWORD *)((char *)&v280[1] + 6) = 468;
                  WORD1(v280[2]) = 2048;
                  *(_QWORD *)((char *)&v280[2] + 4) = v91;
                  WORD2(v280[3]) = 2048;
                  *(_QWORD *)((char *)&v280[3] + 6) = v20;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_226:
                  v258[16] = 0;
                  v15 = (unint64_t)v280;
                  v301 = v104;
                  v302 = v104;
                  v299 = v104;
                  v300 = v104;
                  v298 = v104;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v290 = 136315906;
                  v291 = "operator[]";
                  v292 = 1024;
                  v293 = 468;
                  v294 = 2048;
                  v295 = v91;
                  v296 = 2048;
                  v297 = v23;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_227:
                  v258[0] = 0;
                  v262 = 0u;
                  v263 = 0u;
                  v260 = 0u;
                  v261 = 0u;
                  v259 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  LODWORD(v280[0]) = 136315906;
                  *(_QWORD *)((char *)v280 + 4) = "operator[]";
                  WORD2(v280[1]) = 1024;
                  *(_DWORD *)((char *)&v280[1] + 6) = 468;
                  WORD1(v280[2]) = 2048;
                  *(_QWORD *)((char *)&v280[2] + 4) = v23;
                  WORD2(v280[3]) = 2048;
                  *(_QWORD *)((char *)&v280[3] + 6) = v15;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                  goto LABEL_228;
                }
LABEL_253:
                re::internal::assertLog((re::internal *)4, v87, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
                _os_crash();
                __break(1u);
LABEL_254:
                re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
                _os_crash();
                __break(1u);
LABEL_255:
                re::internal::assertLog((re::internal *)6, v56, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 448, v15);
                _os_crash();
                __break(1u);
                goto LABEL_256;
              }
LABEL_252:
              re::internal::assertLog((re::internal *)6, v80, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 784, v23);
              _os_crash();
              __break(1u);
              goto LABEL_253;
            }
LABEL_251:
            re::internal::assertLog((re::internal *)4, v80, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
            goto LABEL_252;
          }
LABEL_250:
          re::internal::assertLog((re::internal *)6, v77, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 192, v20);
          _os_crash();
          __break(1u);
          goto LABEL_251;
        }
        v113 = v75 + 456 * v1;
        *(_QWORD *)(v113 + 48) = v78;
        *(_QWORD *)(v113 + 56) = 0;
LABEL_133:
        v15 = v162;
        v20 = 248;
        v114 = &v163[31 * v162];
        v26 = 456;
        v115 = v160 + 456 * v161;
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v115 + 72, (uint64_t)(v114 + 6));
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v115 + 96, (uint64_t)(v114 + 9));
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v115 + 120, (uint64_t)(v114 + 12));
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v115 + 144, (uint64_t)(v114 + 15));
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v115 + 168, (uint64_t)(v114 + 18));
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v115 + 192, (uint64_t)(v114 + 21));
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v115 + 216, (uint64_t)(v114 + 24));
        re::FixedArray<re::EvaluationRegisterId<int>>::operator=(v115 + 240, (uint64_t)(v114 + 27));
        v116 = v172[49];
        *(_QWORD *)&v259 = v172[51];
        *((_QWORD *)&v259 + 1) = v116;
        re::FixedArray<int>::operator=((_anonymous_namespace_ *)(v115 + 264), (uint64_t)&v259);
        v117 = v172[54];
        *(_QWORD *)&v259 = v172[56];
        *((_QWORD *)&v259 + 1) = v117;
        re::FixedArray<int>::operator=((_anonymous_namespace_ *)(v115 + 288), (uint64_t)&v259);
        v118 = v172[59];
        *(_QWORD *)&v259 = v172[61];
        *((_QWORD *)&v259 + 1) = v118;
        re::FixedArray<int>::operator=((_anonymous_namespace_ *)(v115 + 312), (uint64_t)&v259);
        v119 = v172[64];
        *(_QWORD *)&v259 = v172[66];
        *((_QWORD *)&v259 + 1) = v119;
        re::FixedArray<re::Matrix3x3<float>>::operator=((_anonymous_namespace_ *)(v115 + 336), (uint64_t)&v259);
        v120 = v172[69];
        *(_QWORD *)&v259 = v172[71];
        *((_QWORD *)&v259 + 1) = v120;
        re::FixedArray<re::Matrix4x4<float>>::operator=((_anonymous_namespace_ *)(v115 + 360), (uint64_t)&v259);
        v121 = v172[74];
        *(_QWORD *)&v259 = v172[76];
        *((_QWORD *)&v259 + 1) = v121;
        re::FixedArray<re::Quaternion<float>>::operator=((_anonymous_namespace_ *)(v115 + 384), (uint64_t)&v259);
        v122 = v172[79];
        *(_QWORD *)&v259 = v172[81];
        *((_QWORD *)&v259 + 1) = v122;
        re::FixedArray<re::Vector2<float>>::operator=((_anonymous_namespace_ *)(v115 + 408), (uint64_t)&v259);
        v123 = v172[84];
        *(_QWORD *)&v259 = v172[86];
        *((_QWORD *)&v259 + 1) = v123;
        re::FixedArray<re::Vector3<float>>::operator=((_anonymous_namespace_ *)(v115 + 432), (uint64_t)&v259);
        v9 = v164;
      }
      ++v15;
    }
    while (v15 != v159);
    v124 = v173[0];
  }
  else
  {
    v124 = 1;
  }
  *(_BYTE *)v158 = 1;
  if (!v124)
    goto LABEL_138;
LABEL_141:
  if (v178[0] && v181)
    (*(void (**)(void))(*(_QWORD *)v178[0] + 40))();
  if (v182[0] && v185)
    (*(void (**)(void))(*(_QWORD *)v182[0] + 40))();
  if (v186[0] && __src)
    (*(void (**)(void))(*(_QWORD *)v186[0] + 40))();
  re::DynamicRegisterIdTable::~DynamicRegisterIdTable((re::DynamicRegisterIdTable *)v225);
  if (v219)
  {
    if (v223)
      (*(void (**)(void))(*(_QWORD *)v219 + 40))();
    v223 = 0;
    v220 = 0;
    v221 = 0;
    v219 = 0;
    ++v222;
  }
  v125 = 3120;
  do
  {
    v126 = (_anonymous_namespace_ **)((char *)&v190 + v125);
    v127 = *(_QWORD *)&v216[v125 + 200];
    if (v127)
    {
      if (v126[82])
        (*(void (**)(uint64_t))(*(_QWORD *)v127 + 40))(v127);
      v126[82] = 0;
      v126[79] = 0;
      v126[80] = 0;
      v126[78] = 0;
      ++LODWORD(v218[v125 / 8]);
    }
    v125 -= 40;
  }
  while (v125);
  if (v217)
  {
    if (v218[0])
    {
      (*(void (**)(void))(*(_QWORD *)v217 + 40))();
      v218[0] = 0;
      v218[1] = 0;
    }
    v217 = 0;
  }
  for (kk = 0; kk != -192; kk -= 24)
  {
    v129 = (_anonymous_namespace_ **)((char *)&v190 + kk);
    v130 = *(_QWORD *)&v216[kk + 192];
    if (v130)
    {
      if (v129[78])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 40))(v130, *(_QWORD *)&v216[kk + 208]);
        v129[78] = 0;
        v129[79] = 0;
      }
      v129[77] = 0;
    }
  }
  for (mm = 0; mm != -192; mm -= 24)
  {
    v132 = (_anonymous_namespace_ **)((char *)&v190 + mm);
    v133 = *(_QWORD *)&v216[mm];
    if (v133)
    {
      if (v132[54])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v133 + 40))(v133, *(_QWORD *)&v216[mm + 16]);
        v132[54] = 0;
        v132[55] = 0;
      }
      v132[53] = 0;
    }
  }
  if (v213)
  {
    if (v214)
    {
      v134 = v215;
      v135 = &v215[31 * v214];
      do
      {
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v134 + 6));
        if (v134[3])
        {
          v136 = v134[4];
          if (v136)
          {
            v137 = 200 * v136;
            v138 = (re::FixedRegisterTable *)(v134[5] + 8);
            do
            {
              re::FixedRegisterTable::~FixedRegisterTable(v138);
              v138 = (re::FixedRegisterTable *)(v139 + 200);
              v137 -= 200;
            }
            while (v137);
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v134[3] + 40))(v134[3], v134[5]);
            v134[4] = 0;
            v134[5] = 0;
          }
          v134[3] = 0;
        }
        if (*v134)
        {
          v140 = v134[1];
          if (v140)
          {
            v141 = 200 * v140;
            v142 = (re::FixedRegisterTable *)(v134[2] + 8);
            do
            {
              re::FixedRegisterTable::~FixedRegisterTable(v142);
              v142 = (re::FixedRegisterTable *)(v143 + 200);
              v141 -= 200;
            }
            while (v141);
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v134 + 40))(*v134, v134[2]);
            v134[1] = 0;
            v134[2] = 0;
          }
          *v134 = 0;
        }
        v134 += 31;
      }
      while (v134 != v135);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v213 + 40))(v213, v215);
      v214 = 0;
      v215 = 0;
    }
    v213 = 0;
  }
  if (v210)
  {
    if (v211)
    {
      v144 = 0;
      v145 = v212;
      v146 = 904 * v211;
      do
      {
        v147 = (_QWORD *)(v145 + v144);
        v148 = *(_QWORD *)(v145 + v144 + 864);
        if (v148)
        {
          if (v147[109])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v148 + 40))(v148, *(_QWORD *)(v145 + v144 + 880));
            v147[109] = 0;
            v147[110] = 0;
          }
          v147[108] = 0;
        }
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v147 + 84));
        v149 = v147[81];
        if (v149)
        {
          v150 = v145 + v144;
          if (*(_QWORD *)(v145 + v144 + 656))
          {
            v151 = (_QWORD *)(v150 + 656);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v149 + 40))(v149, *(_QWORD *)(v150 + 664));
            *v151 = 0;
            v151[1] = 0;
          }
          v147[81] = 0;
        }
        v152 = (_QWORD *)(v145 + v144);
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v145 + v144 + 456));
        v153 = *(_QWORD *)(v145 + v144 + 416);
        if (v153)
        {
          if (v152[53])
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v153 + 40))(v153, *(_QWORD *)(v145 + v144 + 432));
            v152[53] = 0;
            v152[54] = 0;
          }
          v152[52] = 0;
        }
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v152 + 28));
        v154 = v152[25];
        if (v154)
        {
          if (*(_QWORD *)(v145 + v144 + 208))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v154 + 40))(v154, *(_QWORD *)(v145 + v144 + 216));
            *(_QWORD *)(v145 + v144 + 208) = 0;
            *(_QWORD *)(v145 + v144 + 216) = 0;
          }
          v152[25] = 0;
        }
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)(v145 + v144 + 8));
        v144 += 904;
      }
      while (v146 != v144);
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v210 + 40))(v210, v212);
      v211 = 0;
      v212 = 0;
    }
    v210 = 0;
  }
  for (nn = 0; nn != -192; nn -= 24)
  {
    v156 = (_anonymous_namespace_ **)((char *)&v190 + nn);
    result = *(_QWORD *)&v207[nn];
    if (result)
    {
      if (v156[24])
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(uint64_t *)((char *)&v209 + nn));
        v156[24] = 0;
        v156[25] = 0;
      }
      v156[23] = 0;
    }
  }
  return result;
}

_BYTE *re::`anonymous namespace'::RegisterMapping::processEvaluationTree(uint64_t a1, uint64_t a2, _QWORD *a3, _anonymous_namespace_ *a4, _QWORD *a5, _QWORD *a6)
{
  unint64_t i;
  unint64_t v7;
  unint64_t v8;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *CallbackData;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  __int128 v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  __int128 v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  __int128 v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  __int128 v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  __int128 v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  __int128 v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  _BYTE *result;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  unint64_t v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  unint64_t v279;
  _OWORD *v280;
  unint64_t v281;
  _QWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  _QWORD *v316;
  _DWORD *v317;
  uint64_t v318;
  unint64_t v319;
  _DWORD *v320;
  uint64_t v321;
  unsigned __int8 *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _DWORD *v327;
  uint64_t v328;
  unint64_t v329;
  _DWORD *v330;
  uint64_t v331;
  unint64_t v332;
  _DWORD *v333;
  uint64_t v334;
  unint64_t v335;
  _DWORD *v336;
  uint64_t v337;
  unint64_t v338;
  _DWORD *v339;
  uint64_t v340;
  unint64_t v341;
  _DWORD *v342;
  uint64_t v343;
  unint64_t v344;
  _DWORD *v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  _BYTE *v372;
  _QWORD *v373;
  unint64_t v376;
  unint64_t v377;
  _BYTE v378[8];
  __int128 v379;
  _BYTE *v380;
  __int128 v381;
  uint64_t v382;
  uint64_t v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  const char *v396;
  __int16 v397;
  int v398;
  __int16 v399;
  unint64_t v400;
  __int16 v401;
  _QWORD *v402;
  uint64_t v403;

  v403 = *MEMORY[0x24BDAC8D0];
  v13 = a2 + 256;
  re::EvaluationDependencyMap::init((_QWORD *)(a2 + 256), *(_QWORD *)a2, *(re::EvaluationTree **)(a2 + 8), (uint64_t)a3, (*(_DWORD *)(a2 + 3824) & 3) == 0, (uint64_t)v378);
  if (!v378[0])
  {
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v379;
    *(_QWORD *)(a1 + 24) = v380;
    *(_QWORD *)(a1 + 48) = v382;
    *(_OWORD *)(a1 + 32) = v381;
    v382 = 0;
    v380 = 0;
    v381 = 0uLL;
LABEL_289:
    result = v380;
    if (v380)
    {
      if ((v381 & 1) != 0)
        return (_BYTE *)(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v380 + 40))(v380, *((_QWORD *)&v381 + 1));
    }
    return result;
  }
  v372 = (_BYTE *)a1;
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 1680);
  v373 = a6;
  if (v14)
  {
    v8 = 0;
    v7 = 0xFFFFFFFFLL;
    do
    {
      if (re::EvaluationDependencyMap::isRegisterUsed(v13, 0, v8))
      {
        v15 = *(_QWORD **)(a2 + 24);
        if ((unint64_t)v15 <= v8)
          goto LABEL_359;
        v16 = *(_QWORD *)(a2 + 32);
        v17 = *(_QWORD **)(a2 + 8);
        i = v16 + (v8 << 6);
        LODWORD(v384) = -1;
        v385 = 0uLL;
        *((_QWORD *)&v384 + 1) = 0;
        re::EvaluationTree::getRegister<int>(v17, v8, &v384);
        v18 = v385;
        *(_OWORD *)i = v384;
        *(_OWORD *)(i + 16) = v18;
        v19 = *(unsigned int *)i;
        if ((_DWORD)v19 == 77)
        {
          v31 = re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](*(_QWORD *)(a2 + 8) + 1608, *(_QWORD *)(i + 8));
          v32 = *(_QWORD *)(v31 + 40);
          v33 = (uint64_t *)(i + 32);
          if (v32)
          {
            v34 = v31;
            for (i = 0; i != v32; ++i)
            {
              v35 = (_QWORD *)re::BucketArray<re::EvaluationBranchData,8ul>::operator[](v34, i);
              v36 = *v33;
              if (v35[5] != -1)
                ++v36;
              v37 = (_QWORD *)*v35;
              v38 = v36 + *(_QWORD *)(*v35 + 984);
              *v33 = v38;
              v39 = v37[128] + v38;
              *v33 = v39;
              v40 = v37[133] + v39;
              *v33 = v40;
              v41 = v37[138] + v40;
              *v33 = v41;
              v42 = v37[143] + v41;
              *v33 = v42;
              v43 = v37[148] + v42;
              *v33 = v43;
              v44 = v37[153] + v43;
              *v33 = v44;
              v45 = v37[158] + v44;
              *v33 = v45;
            }
          }
          else
          {
            v45 = *v33;
          }
          v7 = 0xFFFFFFFFLL;
          if (v45)
            goto LABEL_18;
        }
        else
        {
          if ((_DWORD)v19 == 76)
          {
            CallbackData = (_QWORD *)re::EvaluationTree::getCallbackData(*(re::EvaluationTree **)(a2 + 8), *(_QWORD *)(i + 8));
            v21 = v16 + (v8 << 6);
            v22 = *(_QWORD *)(v21 + 32) + CallbackData[2];
            *(_QWORD *)(v21 + 32) = v22;
            v23 = CallbackData[5] + v22;
            *(_QWORD *)(v21 + 32) = v23;
            v24 = CallbackData[8] + v23;
            *(_QWORD *)(v21 + 32) = v24;
            v25 = CallbackData[11] + v24;
            *(_QWORD *)(v21 + 32) = v25;
            v26 = CallbackData[14] + v25;
            *(_QWORD *)(v21 + 32) = v26;
            v27 = CallbackData[17] + v26;
            *(_QWORD *)(v21 + 32) = v27;
            v28 = CallbackData[20] + v27;
            *(_QWORD *)(v21 + 32) = v28;
            v29 = CallbackData[23] + v28;
            *(_QWORD *)(v21 + 32) = v29;
            v30 = 3 * CallbackData[26] + v29;
          }
          else
          {
            v30 = *((unsigned __int8 *)&re::kEvaluationCommandDescriptions + 16 * v19 + 9);
            v21 = v16 + (v8 << 6);
          }
          *(_QWORD *)(v21 + 32) = v30;
          if (v30)
            goto LABEL_18;
        }
      }
LABEL_18:
      ++v8;
    }
    while (v8 != v14);
  }
  v46 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 1720);
  if (v46)
  {
    v8 = 0;
    v7 = 0xFFFFFFFFLL;
    do
    {
      if (re::EvaluationDependencyMap::isRegisterUsed(v13, 1u, v8))
      {
        v15 = *(_QWORD **)(a2 + 48);
        if ((unint64_t)v15 <= v8)
          goto LABEL_360;
        v47 = *(_QWORD *)(a2 + 56);
        v48 = *(_QWORD **)(a2 + 8);
        i = v47 + (v8 << 6);
        LODWORD(v384) = -1;
        v385 = 0uLL;
        *((_QWORD *)&v384 + 1) = 0;
        re::EvaluationTree::getRegister<unsigned int>(v48, v8, &v384);
        v49 = v385;
        *(_OWORD *)i = v384;
        *(_OWORD *)(i + 16) = v49;
        v50 = *(unsigned int *)i;
        if ((_DWORD)v50 == 77)
        {
          v62 = re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](*(_QWORD *)(a2 + 8) + 1608, *(_QWORD *)(i + 8));
          v63 = *(_QWORD *)(v62 + 40);
          v64 = (uint64_t *)(i + 32);
          if (v63)
          {
            v65 = v62;
            for (i = 0; i != v63; ++i)
            {
              v66 = (_QWORD *)re::BucketArray<re::EvaluationBranchData,8ul>::operator[](v65, i);
              v67 = *v64;
              if (v66[5] != -1)
                ++v67;
              v68 = (_QWORD *)*v66;
              v69 = v67 + *(_QWORD *)(*v66 + 984);
              *v64 = v69;
              v70 = v68[128] + v69;
              *v64 = v70;
              v71 = v68[133] + v70;
              *v64 = v71;
              v72 = v68[138] + v71;
              *v64 = v72;
              v73 = v68[143] + v72;
              *v64 = v73;
              v74 = v68[148] + v73;
              *v64 = v74;
              v75 = v68[153] + v74;
              *v64 = v75;
              v76 = v68[158] + v75;
              *v64 = v76;
            }
          }
          else
          {
            v76 = *v64;
          }
          v7 = 0xFFFFFFFFLL;
          if (v76)
            goto LABEL_39;
        }
        else
        {
          if ((_DWORD)v50 == 76)
          {
            v51 = (_QWORD *)re::EvaluationTree::getCallbackData(*(re::EvaluationTree **)(a2 + 8), *(_QWORD *)(i + 8));
            v52 = v47 + (v8 << 6);
            v53 = *(_QWORD *)(v52 + 32) + v51[2];
            *(_QWORD *)(v52 + 32) = v53;
            v54 = v51[5] + v53;
            *(_QWORD *)(v52 + 32) = v54;
            v55 = v51[8] + v54;
            *(_QWORD *)(v52 + 32) = v55;
            v56 = v51[11] + v55;
            *(_QWORD *)(v52 + 32) = v56;
            v57 = v51[14] + v56;
            *(_QWORD *)(v52 + 32) = v57;
            v58 = v51[17] + v57;
            *(_QWORD *)(v52 + 32) = v58;
            v59 = v51[20] + v58;
            *(_QWORD *)(v52 + 32) = v59;
            v60 = v51[23] + v59;
            *(_QWORD *)(v52 + 32) = v60;
            v61 = 3 * v51[26] + v60;
          }
          else
          {
            v61 = *((unsigned __int8 *)&re::kEvaluationCommandDescriptions + 16 * v50 + 9);
            v52 = v47 + (v8 << 6);
          }
          *(_QWORD *)(v52 + 32) = v61;
          if (v61)
            goto LABEL_39;
        }
      }
LABEL_39:
      ++v8;
    }
    while (v8 != v46);
  }
  v77 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 1760);
  if (v77)
  {
    v8 = 0;
    v7 = 0xFFFFFFFFLL;
    do
    {
      if (re::EvaluationDependencyMap::isRegisterUsed(v13, 2u, v8))
      {
        v15 = *(_QWORD **)(a2 + 72);
        if ((unint64_t)v15 <= v8)
          goto LABEL_361;
        v78 = *(_QWORD *)(a2 + 80);
        v79 = *(_QWORD **)(a2 + 8);
        i = v78 + (v8 << 6);
        LODWORD(v384) = -1;
        v385 = 0uLL;
        *((_QWORD *)&v384 + 1) = 0;
        re::EvaluationTree::getRegister<float>(v79, v8, &v384);
        v80 = v385;
        *(_OWORD *)i = v384;
        *(_OWORD *)(i + 16) = v80;
        v81 = *(unsigned int *)i;
        if ((_DWORD)v81 == 77)
        {
          v93 = re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](*(_QWORD *)(a2 + 8) + 1608, *(_QWORD *)(i + 8));
          v94 = *(_QWORD *)(v93 + 40);
          v95 = (uint64_t *)(i + 32);
          if (v94)
          {
            v96 = v93;
            for (i = 0; i != v94; ++i)
            {
              v97 = (_QWORD *)re::BucketArray<re::EvaluationBranchData,8ul>::operator[](v96, i);
              v98 = *v95;
              if (v97[5] != -1)
                ++v98;
              v99 = (_QWORD *)*v97;
              v100 = v98 + *(_QWORD *)(*v97 + 984);
              *v95 = v100;
              v101 = v99[128] + v100;
              *v95 = v101;
              v102 = v99[133] + v101;
              *v95 = v102;
              v103 = v99[138] + v102;
              *v95 = v103;
              v104 = v99[143] + v103;
              *v95 = v104;
              v105 = v99[148] + v104;
              *v95 = v105;
              v106 = v99[153] + v105;
              *v95 = v106;
              v107 = v99[158] + v106;
              *v95 = v107;
            }
          }
          else
          {
            v107 = *v95;
          }
          v7 = 0xFFFFFFFFLL;
          if (v107)
            goto LABEL_60;
        }
        else
        {
          if ((_DWORD)v81 == 76)
          {
            v82 = (_QWORD *)re::EvaluationTree::getCallbackData(*(re::EvaluationTree **)(a2 + 8), *(_QWORD *)(i + 8));
            v83 = v78 + (v8 << 6);
            v84 = *(_QWORD *)(v83 + 32) + v82[2];
            *(_QWORD *)(v83 + 32) = v84;
            v85 = v82[5] + v84;
            *(_QWORD *)(v83 + 32) = v85;
            v86 = v82[8] + v85;
            *(_QWORD *)(v83 + 32) = v86;
            v87 = v82[11] + v86;
            *(_QWORD *)(v83 + 32) = v87;
            v88 = v82[14] + v87;
            *(_QWORD *)(v83 + 32) = v88;
            v89 = v82[17] + v88;
            *(_QWORD *)(v83 + 32) = v89;
            v90 = v82[20] + v89;
            *(_QWORD *)(v83 + 32) = v90;
            v91 = v82[23] + v90;
            *(_QWORD *)(v83 + 32) = v91;
            v92 = 3 * v82[26] + v91;
          }
          else
          {
            v92 = *((unsigned __int8 *)&re::kEvaluationCommandDescriptions + 16 * v81 + 9);
            v83 = v78 + (v8 << 6);
          }
          *(_QWORD *)(v83 + 32) = v92;
          if (v92)
            goto LABEL_60;
        }
      }
LABEL_60:
      ++v8;
    }
    while (v8 != v77);
  }
  v108 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 1800);
  if (v108)
  {
    v8 = 0;
    v7 = 0xFFFFFFFFLL;
    do
    {
      if (re::EvaluationDependencyMap::isRegisterUsed(v13, 3u, v8))
      {
        v15 = *(_QWORD **)(a2 + 96);
        if ((unint64_t)v15 <= v8)
          goto LABEL_362;
        v109 = *(_QWORD *)(a2 + 104);
        v110 = *(_QWORD **)(a2 + 8);
        i = v109 + (v8 << 6);
        LODWORD(v384) = -1;
        v385 = 0uLL;
        *((_QWORD *)&v384 + 1) = 0;
        re::EvaluationTree::getRegister<re::Matrix3x3<float>>(v110, v8, &v384);
        v111 = v385;
        *(_OWORD *)i = v384;
        *(_OWORD *)(i + 16) = v111;
        v112 = *(unsigned int *)i;
        if ((_DWORD)v112 == 77)
        {
          v124 = re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](*(_QWORD *)(a2 + 8) + 1608, *(_QWORD *)(i + 8));
          v125 = *(_QWORD *)(v124 + 40);
          v126 = (uint64_t *)(i + 32);
          if (v125)
          {
            v127 = v124;
            for (i = 0; i != v125; ++i)
            {
              v128 = (_QWORD *)re::BucketArray<re::EvaluationBranchData,8ul>::operator[](v127, i);
              v129 = *v126;
              if (v128[5] != -1)
                ++v129;
              v130 = (_QWORD *)*v128;
              v131 = v129 + *(_QWORD *)(*v128 + 984);
              *v126 = v131;
              v132 = v130[128] + v131;
              *v126 = v132;
              v133 = v130[133] + v132;
              *v126 = v133;
              v134 = v130[138] + v133;
              *v126 = v134;
              v135 = v130[143] + v134;
              *v126 = v135;
              v136 = v130[148] + v135;
              *v126 = v136;
              v137 = v130[153] + v136;
              *v126 = v137;
              v138 = v130[158] + v137;
              *v126 = v138;
            }
          }
          else
          {
            v138 = *v126;
          }
          v7 = 0xFFFFFFFFLL;
          if (v138)
            goto LABEL_81;
        }
        else
        {
          if ((_DWORD)v112 == 76)
          {
            v113 = (_QWORD *)re::EvaluationTree::getCallbackData(*(re::EvaluationTree **)(a2 + 8), *(_QWORD *)(i + 8));
            v114 = v109 + (v8 << 6);
            v115 = *(_QWORD *)(v114 + 32) + v113[2];
            *(_QWORD *)(v114 + 32) = v115;
            v116 = v113[5] + v115;
            *(_QWORD *)(v114 + 32) = v116;
            v117 = v113[8] + v116;
            *(_QWORD *)(v114 + 32) = v117;
            v118 = v113[11] + v117;
            *(_QWORD *)(v114 + 32) = v118;
            v119 = v113[14] + v118;
            *(_QWORD *)(v114 + 32) = v119;
            v120 = v113[17] + v119;
            *(_QWORD *)(v114 + 32) = v120;
            v121 = v113[20] + v120;
            *(_QWORD *)(v114 + 32) = v121;
            v122 = v113[23] + v121;
            *(_QWORD *)(v114 + 32) = v122;
            v123 = 3 * v113[26] + v122;
          }
          else
          {
            v123 = *((unsigned __int8 *)&re::kEvaluationCommandDescriptions + 16 * v112 + 9);
            v114 = v109 + (v8 << 6);
          }
          *(_QWORD *)(v114 + 32) = v123;
          if (v123)
            goto LABEL_81;
        }
      }
LABEL_81:
      ++v8;
    }
    while (v8 != v108);
  }
  v139 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 1840);
  if (v139)
  {
    v8 = 0;
    v7 = 0xFFFFFFFFLL;
    do
    {
      if (re::EvaluationDependencyMap::isRegisterUsed(v13, 4u, v8))
      {
        v15 = *(_QWORD **)(a2 + 120);
        if ((unint64_t)v15 <= v8)
          goto LABEL_363;
        v140 = *(_QWORD *)(a2 + 128);
        v141 = *(_QWORD **)(a2 + 8);
        i = v140 + (v8 << 6);
        LODWORD(v384) = -1;
        v385 = 0uLL;
        *((_QWORD *)&v384 + 1) = 0;
        re::EvaluationTree::getRegister<re::Matrix4x4<float>>(v141, v8, &v384);
        v142 = v385;
        *(_OWORD *)i = v384;
        *(_OWORD *)(i + 16) = v142;
        v143 = *(unsigned int *)i;
        if ((_DWORD)v143 == 77)
        {
          v155 = re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](*(_QWORD *)(a2 + 8) + 1608, *(_QWORD *)(i + 8));
          v156 = *(_QWORD *)(v155 + 40);
          v157 = (uint64_t *)(i + 32);
          if (v156)
          {
            v158 = v155;
            for (i = 0; i != v156; ++i)
            {
              v159 = (_QWORD *)re::BucketArray<re::EvaluationBranchData,8ul>::operator[](v158, i);
              v160 = *v157;
              if (v159[5] != -1)
                ++v160;
              v161 = (_QWORD *)*v159;
              v162 = v160 + *(_QWORD *)(*v159 + 984);
              *v157 = v162;
              v163 = v161[128] + v162;
              *v157 = v163;
              v164 = v161[133] + v163;
              *v157 = v164;
              v165 = v161[138] + v164;
              *v157 = v165;
              v166 = v161[143] + v165;
              *v157 = v166;
              v167 = v161[148] + v166;
              *v157 = v167;
              v168 = v161[153] + v167;
              *v157 = v168;
              v169 = v161[158] + v168;
              *v157 = v169;
            }
          }
          else
          {
            v169 = *v157;
          }
          v7 = 0xFFFFFFFFLL;
          if (v169)
            goto LABEL_102;
        }
        else
        {
          if ((_DWORD)v143 == 76)
          {
            v144 = (_QWORD *)re::EvaluationTree::getCallbackData(*(re::EvaluationTree **)(a2 + 8), *(_QWORD *)(i + 8));
            v145 = v140 + (v8 << 6);
            v146 = *(_QWORD *)(v145 + 32) + v144[2];
            *(_QWORD *)(v145 + 32) = v146;
            v147 = v144[5] + v146;
            *(_QWORD *)(v145 + 32) = v147;
            v148 = v144[8] + v147;
            *(_QWORD *)(v145 + 32) = v148;
            v149 = v144[11] + v148;
            *(_QWORD *)(v145 + 32) = v149;
            v150 = v144[14] + v149;
            *(_QWORD *)(v145 + 32) = v150;
            v151 = v144[17] + v150;
            *(_QWORD *)(v145 + 32) = v151;
            v152 = v144[20] + v151;
            *(_QWORD *)(v145 + 32) = v152;
            v153 = v144[23] + v152;
            *(_QWORD *)(v145 + 32) = v153;
            v154 = 3 * v144[26] + v153;
          }
          else
          {
            v154 = *((unsigned __int8 *)&re::kEvaluationCommandDescriptions + 16 * v143 + 9);
            v145 = v140 + (v8 << 6);
          }
          *(_QWORD *)(v145 + 32) = v154;
          if (v154)
            goto LABEL_102;
        }
      }
LABEL_102:
      ++v8;
    }
    while (v8 != v139);
  }
  v170 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 1880);
  if (v170)
  {
    v8 = 0;
    v7 = 0xFFFFFFFFLL;
    do
    {
      if (re::EvaluationDependencyMap::isRegisterUsed(v13, 5u, v8))
      {
        v15 = *(_QWORD **)(a2 + 144);
        if ((unint64_t)v15 <= v8)
          goto LABEL_364;
        v171 = *(_QWORD *)(a2 + 152);
        v172 = *(_QWORD **)(a2 + 8);
        i = v171 + (v8 << 6);
        LODWORD(v384) = -1;
        v385 = 0uLL;
        *((_QWORD *)&v384 + 1) = 0;
        re::EvaluationTree::getRegister<re::Quaternion<float>>(v172, v8, &v384);
        v173 = v385;
        *(_OWORD *)i = v384;
        *(_OWORD *)(i + 16) = v173;
        v174 = *(unsigned int *)i;
        if ((_DWORD)v174 == 77)
        {
          v186 = re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](*(_QWORD *)(a2 + 8) + 1608, *(_QWORD *)(i + 8));
          v187 = *(_QWORD *)(v186 + 40);
          v188 = (uint64_t *)(i + 32);
          if (v187)
          {
            v189 = v186;
            for (i = 0; i != v187; ++i)
            {
              v190 = (_QWORD *)re::BucketArray<re::EvaluationBranchData,8ul>::operator[](v189, i);
              v191 = *v188;
              if (v190[5] != -1)
                ++v191;
              v192 = (_QWORD *)*v190;
              v193 = v191 + *(_QWORD *)(*v190 + 984);
              *v188 = v193;
              v194 = v192[128] + v193;
              *v188 = v194;
              v195 = v192[133] + v194;
              *v188 = v195;
              v196 = v192[138] + v195;
              *v188 = v196;
              v197 = v192[143] + v196;
              *v188 = v197;
              v198 = v192[148] + v197;
              *v188 = v198;
              v199 = v192[153] + v198;
              *v188 = v199;
              v200 = v192[158] + v199;
              *v188 = v200;
            }
          }
          else
          {
            v200 = *v188;
          }
          v7 = 0xFFFFFFFFLL;
          if (v200)
            goto LABEL_123;
        }
        else
        {
          if ((_DWORD)v174 == 76)
          {
            v175 = (_QWORD *)re::EvaluationTree::getCallbackData(*(re::EvaluationTree **)(a2 + 8), *(_QWORD *)(i + 8));
            v176 = v171 + (v8 << 6);
            v177 = *(_QWORD *)(v176 + 32) + v175[2];
            *(_QWORD *)(v176 + 32) = v177;
            v178 = v175[5] + v177;
            *(_QWORD *)(v176 + 32) = v178;
            v179 = v175[8] + v178;
            *(_QWORD *)(v176 + 32) = v179;
            v180 = v175[11] + v179;
            *(_QWORD *)(v176 + 32) = v180;
            v181 = v175[14] + v180;
            *(_QWORD *)(v176 + 32) = v181;
            v182 = v175[17] + v181;
            *(_QWORD *)(v176 + 32) = v182;
            v183 = v175[20] + v182;
            *(_QWORD *)(v176 + 32) = v183;
            v184 = v175[23] + v183;
            *(_QWORD *)(v176 + 32) = v184;
            v185 = 3 * v175[26] + v184;
          }
          else
          {
            v185 = *((unsigned __int8 *)&re::kEvaluationCommandDescriptions + 16 * v174 + 9);
            v176 = v171 + (v8 << 6);
          }
          *(_QWORD *)(v176 + 32) = v185;
          if (v185)
            goto LABEL_123;
        }
      }
LABEL_123:
      ++v8;
    }
    while (v8 != v170);
  }
  v201 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 1920);
  if (v201)
  {
    v8 = 0;
    v7 = 0xFFFFFFFFLL;
    do
    {
      if (re::EvaluationDependencyMap::isRegisterUsed(v13, 6u, v8))
      {
        v15 = *(_QWORD **)(a2 + 168);
        if ((unint64_t)v15 <= v8)
          goto LABEL_365;
        v202 = *(_QWORD *)(a2 + 176);
        v203 = *(_QWORD **)(a2 + 8);
        i = v202 + (v8 << 6);
        LODWORD(v384) = -1;
        v385 = 0uLL;
        *((_QWORD *)&v384 + 1) = 0;
        re::EvaluationTree::getRegister<re::Vector2<float>>(v203, v8, &v384);
        v204 = v385;
        *(_OWORD *)i = v384;
        *(_OWORD *)(i + 16) = v204;
        v205 = *(unsigned int *)i;
        if ((_DWORD)v205 == 77)
        {
          v217 = re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](*(_QWORD *)(a2 + 8) + 1608, *(_QWORD *)(i + 8));
          v218 = *(_QWORD *)(v217 + 40);
          v219 = (uint64_t *)(i + 32);
          if (v218)
          {
            v220 = v217;
            for (i = 0; i != v218; ++i)
            {
              v221 = (_QWORD *)re::BucketArray<re::EvaluationBranchData,8ul>::operator[](v220, i);
              v222 = *v219;
              if (v221[5] != -1)
                ++v222;
              v223 = (_QWORD *)*v221;
              v224 = v222 + *(_QWORD *)(*v221 + 984);
              *v219 = v224;
              v225 = v223[128] + v224;
              *v219 = v225;
              v226 = v223[133] + v225;
              *v219 = v226;
              v227 = v223[138] + v226;
              *v219 = v227;
              v228 = v223[143] + v227;
              *v219 = v228;
              v229 = v223[148] + v228;
              *v219 = v229;
              v230 = v223[153] + v229;
              *v219 = v230;
              v231 = v223[158] + v230;
              *v219 = v231;
            }
          }
          else
          {
            v231 = *v219;
          }
          v7 = 0xFFFFFFFFLL;
          if (v231)
            goto LABEL_144;
        }
        else
        {
          if ((_DWORD)v205 == 76)
          {
            v206 = (_QWORD *)re::EvaluationTree::getCallbackData(*(re::EvaluationTree **)(a2 + 8), *(_QWORD *)(i + 8));
            v207 = v202 + (v8 << 6);
            v208 = *(_QWORD *)(v207 + 32) + v206[2];
            *(_QWORD *)(v207 + 32) = v208;
            v209 = v206[5] + v208;
            *(_QWORD *)(v207 + 32) = v209;
            v210 = v206[8] + v209;
            *(_QWORD *)(v207 + 32) = v210;
            v211 = v206[11] + v210;
            *(_QWORD *)(v207 + 32) = v211;
            v212 = v206[14] + v211;
            *(_QWORD *)(v207 + 32) = v212;
            v213 = v206[17] + v212;
            *(_QWORD *)(v207 + 32) = v213;
            v214 = v206[20] + v213;
            *(_QWORD *)(v207 + 32) = v214;
            v215 = v206[23] + v214;
            *(_QWORD *)(v207 + 32) = v215;
            v216 = 3 * v206[26] + v215;
          }
          else
          {
            v216 = *((unsigned __int8 *)&re::kEvaluationCommandDescriptions + 16 * v205 + 9);
            v207 = v202 + (v8 << 6);
          }
          *(_QWORD *)(v207 + 32) = v216;
          if (v216)
            goto LABEL_144;
        }
      }
LABEL_144:
      ++v8;
    }
    while (v8 != v201);
  }
  v232 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 1960);
  if (v232)
  {
    v8 = 0;
    v7 = 0xFFFFFFFFLL;
    do
    {
      if (re::EvaluationDependencyMap::isRegisterUsed(v13, 7u, v8))
      {
        v15 = *(_QWORD **)(a2 + 192);
        if ((unint64_t)v15 <= v8)
          goto LABEL_366;
        v234 = *(_QWORD *)(a2 + 200);
        v235 = *(_QWORD **)(a2 + 8);
        i = v234 + (v8 << 6);
        LODWORD(v384) = -1;
        v385 = 0uLL;
        *((_QWORD *)&v384 + 1) = 0;
        re::EvaluationTree::getRegister<re::Vector3<float>>(v235, v8, &v384);
        v236 = v385;
        *(_OWORD *)i = v384;
        *(_OWORD *)(i + 16) = v236;
        v237 = *(unsigned int *)i;
        if ((_DWORD)v237 == 77)
        {
          v249 = re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](*(_QWORD *)(a2 + 8) + 1608, *(_QWORD *)(i + 8));
          v250 = *(_QWORD *)(v249 + 40);
          v251 = (uint64_t *)(i + 32);
          if (v250)
          {
            v252 = v249;
            for (i = 0; i != v250; ++i)
            {
              v253 = (_QWORD *)re::BucketArray<re::EvaluationBranchData,8ul>::operator[](v252, i);
              v254 = *v251;
              if (v253[5] != -1)
                ++v254;
              v255 = (_QWORD *)*v253;
              v256 = v254 + *(_QWORD *)(*v253 + 984);
              *v251 = v256;
              v257 = v255[128] + v256;
              *v251 = v257;
              v258 = v255[133] + v257;
              *v251 = v258;
              v259 = v255[138] + v258;
              *v251 = v259;
              v260 = v255[143] + v259;
              *v251 = v260;
              v261 = v255[148] + v260;
              *v251 = v261;
              v262 = v255[153] + v261;
              *v251 = v262;
              v263 = v255[158] + v262;
              *v251 = v263;
            }
          }
          else
          {
            v263 = *v251;
          }
          v7 = 0xFFFFFFFFLL;
          if (v263)
            goto LABEL_165;
        }
        else
        {
          if ((_DWORD)v237 == 76)
          {
            v238 = (_QWORD *)re::EvaluationTree::getCallbackData(*(re::EvaluationTree **)(a2 + 8), *(_QWORD *)(i + 8));
            v239 = v234 + (v8 << 6);
            v240 = *(_QWORD *)(v239 + 32) + v238[2];
            *(_QWORD *)(v239 + 32) = v240;
            v241 = v238[5] + v240;
            *(_QWORD *)(v239 + 32) = v241;
            v242 = v238[8] + v241;
            *(_QWORD *)(v239 + 32) = v242;
            v243 = v238[11] + v242;
            *(_QWORD *)(v239 + 32) = v243;
            v244 = v238[14] + v243;
            *(_QWORD *)(v239 + 32) = v244;
            v245 = v238[17] + v244;
            *(_QWORD *)(v239 + 32) = v245;
            v246 = v238[20] + v245;
            *(_QWORD *)(v239 + 32) = v246;
            v247 = v238[23] + v246;
            *(_QWORD *)(v239 + 32) = v247;
            v248 = 3 * v238[26] + v247;
          }
          else
          {
            v248 = *((unsigned __int8 *)&re::kEvaluationCommandDescriptions + 16 * v237 + 9);
            v239 = v234 + (v8 << 6);
          }
          *(_QWORD *)(v239 + 32) = v248;
          if (v248)
            goto LABEL_165;
        }
      }
LABEL_165:
      ++v8;
    }
    while (v8 != v232);
  }
  result = *(_BYTE **)a2;
  v265 = *(_QWORD *)(a2 + 8);
  v266 = *(_QWORD *)(v265 + 2000);
  *(_QWORD *)(a2 + 208) = *(_QWORD *)a2;
  *(_QWORD *)(a2 + 216) = v266;
  if (v266)
  {
    if (v266 >= 0x487EDE0487EDE1)
    {
LABEL_396:
      re::internal::assertLog((re::internal *)6, v233, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 904, v266);
      _os_crash();
      __break(1u);
      goto LABEL_397;
    }
    v267 = (*(uint64_t (**)(_BYTE *, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 904 * v266, 8);
    *(_QWORD *)(a2 + 224) = v267;
    if (!v267)
    {
LABEL_397:
      re::internal::assertLog((re::internal *)4, v268, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_398;
    }
    v269 = (_QWORD *)v267;
    v270 = v266 - 1;
    if (v266 != 1)
    {
      do
      {
        bzero(v269, 0x380uLL);
        v269[112] = -1;
        v269 += 113;
        --v270;
      }
      while (v270);
    }
    v271 = v269 + 112;
    bzero(v269, 0x380uLL);
    v15 = 0;
    v13 = 0;
    *v271 = -1;
    do
    {
      v272 = (_QWORD *)re::EvaluationTree::getCallbackData(*(re::EvaluationTree **)(a2 + 8), v13);
      i = *(_QWORD *)(a2 + 216);
      if (i <= v13)
        goto LABEL_358;
      re::EvaluationTree::resolveAliasRegisters(*(_QWORD **)(a2 + 8), *(_QWORD *)a2, v272, (_QWORD *)((char *)v15 + *(_QWORD *)(a2 + 224)));
      ++v13;
      v15 += 113;
    }
    while (v266 != v13);
    result = *(_BYTE **)a2;
    v265 = *(_QWORD *)(a2 + 8);
  }
  i = *(_QWORD *)(v265 + 1648);
  *(_QWORD *)(a2 + 232) = result;
  *(_QWORD *)(a2 + 240) = i;
  if (!i)
  {
LABEL_204:
    if (!a3[1])
    {
LABEL_208:
      if (!a3[3])
      {
LABEL_212:
        if (!a3[5])
        {
LABEL_216:
          if (!a3[7])
          {
LABEL_220:
            if (!a3[9])
            {
LABEL_224:
              if (!a3[11])
              {
LABEL_228:
                if (!a3[13])
                {
LABEL_232:
                  if (!a3[15])
                  {
LABEL_236:
                    if (!a3[17])
                    {
LABEL_244:
                      v309 = *(_QWORD *)(a2 + 3800);
                      if (v309)
                      {
                        i = 40;
                        do
                        {
                          v310 = v309 - 1;
                          v395 = *(_DWORD *)(*(_QWORD *)(a2 + 3816) + 4 * v310);
                          v311 = v395;
                          *(_QWORD *)(a2 + 3800) = v310;
                          ++*(_DWORD *)(a2 + 3808);
                          v312 = a2 + 40 * v311;
                          v313 = *(_QWORD *)(v312 + 680);
                          if (v313)
                          {
                            v314 = v373[2];
                            v315 = (uint64_t *)(v312 + 680);
                            v316 = (_QWORD *)(a2 + 40 * v311 + 696);
                            if (v311 - 78 >= 0xFFFFFFFE)
                            {
                              v320 = (_DWORD *)(a2 + 40 * v311 + 688);
                              while (2)
                              {
                                v321 = v313 - 1;
                                v322 = (unsigned __int8 *)(*v316 + 16 * (v313 - 1));
                                v323 = *v322;
                                v324 = *((_QWORD *)v322 + 1);
                                *v315 = v321;
                                ++*v320;
                                switch((int)v323)
                                {
                                  case 0:
                                    goto LABEL_262;
                                  case 1:
                                    goto LABEL_262;
                                  case 2:
                                    goto LABEL_262;
                                  case 3:
                                    goto LABEL_262;
                                  case 4:
                                    goto LABEL_262;
                                  case 5:
                                    goto LABEL_262;
                                  case 6:
                                    goto LABEL_262;
                                  case 7:
LABEL_262:
                                    v313 = *v315;
                                    if (!*v315)
                                      goto LABEL_263;
                                    continue;
                                  default:
                                    goto LABEL_400;
                                }
                              }
                            }
                            switch(*(_BYTE *)(*v316 + 16 * v313 - 16))
                            {
                              case 0:
                                v317 = (_DWORD *)(a2 + 40 * v311 + 688);
                                do
                                {
                                  v318 = v313 - 1;
                                  v319 = *(_QWORD *)(*v316 + 16 * v318 + 8);
                                  *v315 = v318;
                                  ++*v317;
                                  v313 = *v315;
                                }
                                while (*v315);
                                break;
                              case 1:
                                v327 = (_DWORD *)(a2 + 40 * v311 + 688);
                                do
                                {
                                  v328 = v313 - 1;
                                  v329 = *(_QWORD *)(*v316 + 16 * v328 + 8);
                                  *v315 = v328;
                                  ++*v327;
                                  v313 = *v315;
                                }
                                while (*v315);
                                break;
                              case 2:
                                v330 = (_DWORD *)(a2 + 40 * v311 + 688);
                                do
                                {
                                  v331 = v313 - 1;
                                  v332 = *(_QWORD *)(*v316 + 16 * v331 + 8);
                                  *v315 = v331;
                                  ++*v330;
                                  v313 = *v315;
                                }
                                while (*v315);
                                break;
                              case 3:
                                v333 = (_DWORD *)(a2 + 40 * v311 + 688);
                                do
                                {
                                  v334 = v313 - 1;
                                  v335 = *(_QWORD *)(*v316 + 16 * v334 + 8);
                                  *v315 = v334;
                                  ++*v333;
                                  v313 = *v315;
                                }
                                while (*v315);
                                break;
                              case 4:
                                v336 = (_DWORD *)(a2 + 40 * v311 + 688);
                                do
                                {
                                  v337 = v313 - 1;
                                  v338 = *(_QWORD *)(*v316 + 16 * v337 + 8);
                                  *v315 = v337;
                                  ++*v336;
                                  v313 = *v315;
                                }
                                while (*v315);
                                break;
                              case 5:
                                v339 = (_DWORD *)(a2 + 40 * v311 + 688);
                                do
                                {
                                  v340 = v313 - 1;
                                  v341 = *(_QWORD *)(*v316 + 16 * v340 + 8);
                                  *v315 = v340;
                                  ++*v339;
                                  v313 = *v315;
                                }
                                while (*v315);
                                break;
                              case 6:
                                v342 = (_DWORD *)(a2 + 40 * v311 + 688);
                                do
                                {
                                  v343 = v313 - 1;
                                  v344 = *(_QWORD *)(*v316 + 16 * v343 + 8);
                                  *v315 = v343;
                                  ++*v342;
                                  v313 = *v315;
                                }
                                while (*v315);
                                break;
                              case 7:
                                v345 = (_DWORD *)(a2 + 40 * v311 + 688);
                                do
                                {
                                  v346 = v313 - 1;
                                  v347 = *(_QWORD *)(*v316 + 16 * v346 + 8);
                                  *v315 = v346;
                                  ++*v345;
                                  v313 = *v315;
                                }
                                while (*v315);
                                break;
                              default:
                                re::internal::assertLog((re::internal *)5, v233, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processEvaluationTree", 1088, *(unsigned __int8 *)(*v316 + 16 * v313 - 16));
                                _os_crash();
                                __break(1u);
                                JUMPOUT(0x22513E5B4);
                            }
LABEL_263:
                            v325 = v373[2];
                            v326 = v325 - v314;
                            if (v325 != v314)
                            {
                              re::DynamicArray<re::EvaluationCommand>::add(a4, &v395);
                              *(_QWORD *)&v384 = v326;
                              result = re::DynamicArray<unsigned long>::add(a5, &v384);
                            }
                          }
                          v309 = *(_QWORD *)(a2 + 3800);
                        }
                        while (v309);
                      }
                      goto LABEL_293;
                    }
                    v15 = 0;
                    v304 = 0;
                    i = 1;
                    while (1)
                    {
                      v13 = *(_QWORD *)((char *)v15 + a3[16]);
                      v7 = *(_QWORD *)(a2 + 192);
                      if (v7 <= v13)
                        goto LABEL_375;
                      *(_BYTE *)(*(_QWORD *)(a2 + 200) + (v13 << 6) + 40) = 1;
                      v306 = a3[17];
                      if (v306 <= v304)
                        goto LABEL_376;
                      v13 = *(_QWORD *)((char *)v15 + a3[16] + 8);
                      v7 = *(_QWORD *)(a2 + 144);
                      if (v7 <= v13)
                        goto LABEL_377;
                      *(_BYTE *)(*(_QWORD *)(a2 + 152) + (v13 << 6) + 40) = 1;
                      v308 = a3[17];
                      if (v308 <= v304)
                        goto LABEL_378;
                      v13 = *(_QWORD *)((char *)v15 + a3[16] + 16);
                      v7 = *(_QWORD *)(a2 + 192);
                      if (v7 <= v13)
                        goto LABEL_379;
                      *(_BYTE *)(*(_QWORD *)(a2 + 200) + (v13 << 6) + 40) = 1;
                      ++v304;
                      v15 += 3;
                      if (v304 >= a3[17])
                        goto LABEL_244;
                    }
                  }
                  v303 = 0;
                  i = 1;
                  while (1)
                  {
                    v13 = *(_QWORD *)(a3[14] + 8 * v303);
                    v15 = *(_QWORD **)(a2 + 192);
                    if ((unint64_t)v15 <= v13)
                      break;
                    *(_BYTE *)(*(_QWORD *)(a2 + 200) + (v13 << 6) + 40) = 1;
                    if ((unint64_t)++v303 >= a3[15])
                      goto LABEL_236;
                  }
LABEL_374:
                  v383 = 0;
                  v387 = 0u;
                  v388 = 0u;
                  v385 = 0u;
                  v386 = 0u;
                  v384 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v395 = 136315906;
                  v396 = "operator[]";
                  v397 = 1024;
                  v398 = 468;
                  v399 = 2048;
                  v400 = v13;
                  v401 = 2048;
                  v402 = v15;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_375:
                  v383 = 0;
                  v387 = 0u;
                  v388 = 0u;
                  v385 = 0u;
                  v386 = 0u;
                  v384 = 0u;
                  v304 = MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v395 = 136315906;
                  v396 = "operator[]";
                  v397 = 1024;
                  v398 = 468;
                  v399 = 2048;
                  v400 = v13;
                  v401 = 2048;
                  v402 = (_QWORD *)v7;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_376:
                  re::internal::assertLog((re::internal *)6, v305, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v304, v306);
                  _os_crash();
                  __break(1u);
LABEL_377:
                  v383 = 0;
                  v387 = 0u;
                  v388 = 0u;
                  v385 = 0u;
                  v386 = 0u;
                  v384 = 0u;
                  v304 = MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v395 = 136315906;
                  v396 = "operator[]";
                  v397 = 1024;
                  v398 = 468;
                  v399 = 2048;
                  v400 = v13;
                  v401 = 2048;
                  v402 = (_QWORD *)v7;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_378:
                  re::internal::assertLog((re::internal *)6, v307, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v304, v308);
                  _os_crash();
                  __break(1u);
LABEL_379:
                  v383 = 0;
                  v387 = 0u;
                  v388 = 0u;
                  v385 = 0u;
                  v386 = 0u;
                  v384 = 0u;
                  v266 = MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v395 = 136315906;
                  v396 = "operator[]";
                  v397 = 1024;
                  v398 = 468;
                  v399 = 2048;
                  v400 = v13;
                  v401 = 2048;
                  v402 = (_QWORD *)v7;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_380:
                  re::internal::assertLog((re::internal *)6, v364, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v366);
                  _os_crash();
                  __break(1u);
LABEL_381:
                  re::internal::assertLog((re::internal *)6, v367, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v369);
                  _os_crash();
                  __break(1u);
LABEL_382:
                  v383 = 0;
                  v387 = 0u;
                  v388 = 0u;
                  v385 = 0u;
                  v386 = 0u;
                  v384 = 0u;
                  v266 = MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v395 = 136315906;
                  v396 = "operator[]";
                  v397 = 1024;
                  v398 = 468;
                  v399 = 2048;
                  v400 = v7;
                  v401 = 2048;
                  v402 = v15;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_383:
                  re::internal::assertLog((re::internal *)6, v348, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v349);
                  _os_crash();
                  __break(1u);
LABEL_384:
                  re::internal::assertLog((re::internal *)6, v350, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v351);
                  _os_crash();
                  __break(1u);
LABEL_385:
                  re::internal::assertLog((re::internal *)6, v352, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v353);
                  _os_crash();
                  __break(1u);
LABEL_386:
                  re::internal::assertLog((re::internal *)6, v354, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v355);
                  _os_crash();
                  __break(1u);
LABEL_387:
                  re::internal::assertLog((re::internal *)6, v356, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v357);
                  _os_crash();
                  __break(1u);
LABEL_388:
                  re::internal::assertLog((re::internal *)6, v358, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v359);
                  _os_crash();
                  __break(1u);
LABEL_389:
                  re::internal::assertLog((re::internal *)6, v360, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v361);
                  _os_crash();
                  __break(1u);
LABEL_390:
                  re::internal::assertLog((re::internal *)6, v362, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v363);
                  _os_crash();
                  __break(1u);
LABEL_391:
                  re::internal::assertLog((re::internal *)6, v364, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v365);
                  _os_crash();
                  __break(1u);
LABEL_392:
                  re::internal::assertLog((re::internal *)6, v367, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v368);
                  _os_crash();
                  __break(1u);
LABEL_393:
                  re::internal::assertLog((re::internal *)6, v370, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v266, v371);
                  _os_crash();
                  __break(1u);
LABEL_394:
                  re::internal::assertLog((re::internal *)6, v233, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 200, i);
                  _os_crash();
                  __break(1u);
                  goto LABEL_395;
                }
                v302 = 0;
                i = 1;
                while (1)
                {
                  v13 = *(_QWORD *)(a3[12] + 8 * v302);
                  v15 = *(_QWORD **)(a2 + 168);
                  if ((unint64_t)v15 <= v13)
                    break;
                  *(_BYTE *)(*(_QWORD *)(a2 + 176) + (v13 << 6) + 40) = 1;
                  if ((unint64_t)++v302 >= a3[13])
                    goto LABEL_232;
                }
LABEL_373:
                v383 = 0;
                v387 = 0u;
                v388 = 0u;
                v385 = 0u;
                v386 = 0u;
                v384 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v395 = 136315906;
                v396 = "operator[]";
                v397 = 1024;
                v398 = 468;
                v399 = 2048;
                v400 = v13;
                v401 = 2048;
                v402 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_374;
              }
              v301 = 0;
              i = 1;
              while (1)
              {
                v13 = *(_QWORD *)(a3[10] + 8 * v301);
                v15 = *(_QWORD **)(a2 + 144);
                if ((unint64_t)v15 <= v13)
                  break;
                *(_BYTE *)(*(_QWORD *)(a2 + 152) + (v13 << 6) + 40) = 1;
                if ((unint64_t)++v301 >= a3[11])
                  goto LABEL_228;
              }
LABEL_372:
              v383 = 0;
              v387 = 0u;
              v388 = 0u;
              v385 = 0u;
              v386 = 0u;
              v384 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v395 = 136315906;
              v396 = "operator[]";
              v397 = 1024;
              v398 = 468;
              v399 = 2048;
              v400 = v13;
              v401 = 2048;
              v402 = v15;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_373;
            }
            v300 = 0;
            i = 1;
            while (1)
            {
              v13 = *(_QWORD *)(a3[8] + 8 * v300);
              v15 = *(_QWORD **)(a2 + 120);
              if ((unint64_t)v15 <= v13)
                break;
              *(_BYTE *)(*(_QWORD *)(a2 + 128) + (v13 << 6) + 40) = 1;
              if ((unint64_t)++v300 >= a3[9])
                goto LABEL_224;
            }
LABEL_371:
            v383 = 0;
            v387 = 0u;
            v388 = 0u;
            v385 = 0u;
            v386 = 0u;
            v384 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v395 = 136315906;
            v396 = "operator[]";
            v397 = 1024;
            v398 = 468;
            v399 = 2048;
            v400 = v13;
            v401 = 2048;
            v402 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_372;
          }
          v299 = 0;
          i = 1;
          while (1)
          {
            v13 = *(_QWORD *)(a3[6] + 8 * v299);
            v15 = *(_QWORD **)(a2 + 96);
            if ((unint64_t)v15 <= v13)
              break;
            *(_BYTE *)(*(_QWORD *)(a2 + 104) + (v13 << 6) + 40) = 1;
            if ((unint64_t)++v299 >= a3[7])
              goto LABEL_220;
          }
LABEL_370:
          v383 = 0;
          v387 = 0u;
          v388 = 0u;
          v385 = 0u;
          v386 = 0u;
          v384 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v395 = 136315906;
          v396 = "operator[]";
          v397 = 1024;
          v398 = 468;
          v399 = 2048;
          v400 = v13;
          v401 = 2048;
          v402 = v15;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_371;
        }
        v298 = 0;
        i = 1;
        while (1)
        {
          v13 = *(_QWORD *)(a3[4] + 8 * v298);
          v15 = *(_QWORD **)(a2 + 72);
          if ((unint64_t)v15 <= v13)
            break;
          *(_BYTE *)(*(_QWORD *)(a2 + 80) + (v13 << 6) + 40) = 1;
          if ((unint64_t)++v298 >= a3[5])
            goto LABEL_216;
        }
LABEL_369:
        v383 = 0;
        v387 = 0u;
        v388 = 0u;
        v385 = 0u;
        v386 = 0u;
        v384 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v395 = 136315906;
        v396 = "operator[]";
        v397 = 1024;
        v398 = 468;
        v399 = 2048;
        v400 = v13;
        v401 = 2048;
        v402 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_370;
      }
      v297 = 0;
      i = 1;
      while (1)
      {
        v13 = *(_QWORD *)(a3[2] + 8 * v297);
        v15 = *(_QWORD **)(a2 + 48);
        if ((unint64_t)v15 <= v13)
          break;
        *(_BYTE *)(*(_QWORD *)(a2 + 56) + (v13 << 6) + 40) = 1;
        if ((unint64_t)++v297 >= a3[3])
          goto LABEL_212;
      }
LABEL_368:
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v13;
      v401 = 2048;
      v402 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_369;
    }
    v296 = 0;
    i = 1;
    while (1)
    {
      v13 = *(_QWORD *)(*a3 + 8 * v296);
      v15 = *(_QWORD **)(a2 + 24);
      if ((unint64_t)v15 <= v13)
        break;
      *(_BYTE *)(*(_QWORD *)(a2 + 32) + (v13 << 6) + 40) = 1;
      if ((unint64_t)++v296 >= a3[1])
        goto LABEL_208;
    }
LABEL_367:
    v383 = 0;
    v387 = 0u;
    v388 = 0u;
    v385 = 0u;
    v386 = 0u;
    v384 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v395 = 136315906;
    v396 = "operator[]";
    v397 = 1024;
    v398 = 468;
    v399 = 2048;
    v400 = v13;
    v401 = 2048;
    v402 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_368;
  }
  if (i >= 0x108421084210843)
  {
LABEL_398:
    re::internal::assertLog((re::internal *)6, v233, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 248, i);
    _os_crash();
    __break(1u);
    goto LABEL_399;
  }
  v273 = (*(uint64_t (**)(_BYTE *, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 248 * i, 8);
  *(_QWORD *)(a2 + 248) = v273;
  if (!v273)
  {
LABEL_399:
    re::internal::assertLog((re::internal *)4, v274, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_400:
    re::internal::assertLog((re::internal *)5, v324, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processEvaluationTree", 1097, v323);
    _os_crash();
    __break(1u);
  }
  v275 = i - 1;
  if (i != 1)
  {
    do
    {
      *(_OWORD *)(v273 + 208) = 0uLL;
      *(_OWORD *)(v273 + 224) = 0uLL;
      *(_OWORD *)(v273 + 176) = 0uLL;
      *(_OWORD *)(v273 + 192) = 0uLL;
      *(_OWORD *)(v273 + 144) = 0uLL;
      *(_OWORD *)(v273 + 160) = 0uLL;
      *(_OWORD *)(v273 + 112) = 0uLL;
      *(_OWORD *)(v273 + 128) = 0uLL;
      *(_OWORD *)(v273 + 80) = 0uLL;
      *(_OWORD *)(v273 + 96) = 0uLL;
      *(_OWORD *)(v273 + 48) = 0uLL;
      *(_OWORD *)(v273 + 64) = 0uLL;
      *(_OWORD *)(v273 + 16) = 0uLL;
      *(_OWORD *)(v273 + 32) = 0uLL;
      *(_OWORD *)v273 = 0uLL;
      *(_QWORD *)(v273 + 240) = -1;
      v273 += 248;
      --v275;
    }
    while (v275);
  }
  v7 = 0;
  *(_OWORD *)(v273 + 208) = 0u;
  *(_OWORD *)(v273 + 224) = 0u;
  *(_OWORD *)(v273 + 176) = 0u;
  *(_OWORD *)(v273 + 192) = 0u;
  *(_OWORD *)(v273 + 144) = 0u;
  *(_OWORD *)(v273 + 160) = 0u;
  *(_OWORD *)(v273 + 112) = 0u;
  *(_OWORD *)(v273 + 128) = 0u;
  *(_OWORD *)(v273 + 80) = 0u;
  *(_OWORD *)(v273 + 96) = 0u;
  *(_OWORD *)(v273 + 48) = 0u;
  *(_OWORD *)(v273 + 64) = 0u;
  *(_OWORD *)(v273 + 16) = 0u;
  *(_OWORD *)(v273 + 32) = 0u;
  *(_OWORD *)v273 = 0u;
  v266 = 200;
  *(_QWORD *)(v273 + 240) = -1;
  v376 = i;
  while (1)
  {
    v276 = re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](*(_QWORD *)(a2 + 8) + 1608, v7);
    v15 = *(_QWORD **)(a2 + 240);
    if ((unint64_t)v15 <= v7)
      goto LABEL_382;
    v8 = v276;
    v377 = v7;
    v15 = (_QWORD *)(*(_QWORD *)(a2 + 248) + 248 * v7);
    i = *(_QWORD *)(v276 + 40);
    result = *(_BYTE **)a2;
    *v15 = *(_QWORD *)a2;
    v15[1] = i;
    if (i)
      break;
LABEL_203:
    i = v376;
    v7 = v377 + 1;
    if (v377 + 1 == v376)
      goto LABEL_204;
  }
  if (i >= 0x147AE147AE147AFLL)
    goto LABEL_394;
  v277 = (_QWORD *)(*(uint64_t (**)(_BYTE *, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 200 * i, 8);
  v15[2] = v277;
  if (!v277)
  {
LABEL_395:
    re::internal::assertLog((re::internal *)4, v278, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    goto LABEL_396;
  }
  v279 = i - 1;
  if (i == 1)
  {
    *v277 = -1;
    v280 = v277 + 1;
  }
  else
  {
    v280 = v277 + 1;
    do
    {
      *((_QWORD *)v280 - 1) = -1;
      *v280 = 0uLL;
      v280[1] = 0uLL;
      v280[2] = 0uLL;
      v280[3] = 0uLL;
      v280[4] = 0uLL;
      v280[5] = 0uLL;
      v280[6] = 0uLL;
      v280[7] = 0uLL;
      v280[8] = 0uLL;
      v280[9] = 0uLL;
      v280[10] = 0uLL;
      v280[11] = 0uLL;
      v280 = (_OWORD *)((char *)v280 + 200);
      --v279;
    }
    while (v279);
    *((_QWORD *)v280 - 1) = -1;
  }
  v281 = 0;
  v280[10] = 0uLL;
  v280[11] = 0uLL;
  v280[8] = 0uLL;
  v280[9] = 0uLL;
  v280[6] = 0uLL;
  v280[7] = 0uLL;
  v280[4] = 0uLL;
  v280[5] = 0uLL;
  v280[2] = 0uLL;
  v280[3] = 0uLL;
  *v280 = 0uLL;
  v280[1] = 0uLL;
  while (1)
  {
    v282 = (_QWORD *)re::BucketArray<re::EvaluationBranchData,8ul>::operator[](v8, v281);
    v7 = v15[1];
    if (v7 <= v281)
    {
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v281;
      v401 = 2048;
      v402 = (_QWORD *)v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_358:
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v13;
      v401 = 2048;
      v402 = (_QWORD *)i;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_359:
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v8;
      v401 = 2048;
      v402 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_360:
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v8;
      v401 = 2048;
      v402 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_361:
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v8;
      v401 = 2048;
      v402 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_362:
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v8;
      v401 = 2048;
      v402 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_363:
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v8;
      v401 = 2048;
      v402 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_364:
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v8;
      v401 = 2048;
      v402 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_365:
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v8;
      v401 = 2048;
      v402 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_366:
      v383 = 0;
      v387 = 0u;
      v388 = 0u;
      v385 = 0u;
      v386 = 0u;
      v384 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v395 = 136315906;
      v396 = "operator[]";
      v397 = 1024;
      v398 = 468;
      v399 = 2048;
      v400 = v8;
      v401 = 2048;
      v402 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_367;
    }
    v283 = v15[2];
    v284 = v282[5];
    if (v284 != -1)
      break;
LABEL_202:
    v286 = (_QWORD *)*v282;
    v287 = *(_QWORD *)(*v282 + 1304);
    *(_QWORD *)&v384 = *(_QWORD *)(*v282 + 1320);
    *((_QWORD *)&v384 + 1) = v287;
    v288 = v286[168];
    *(_QWORD *)&v385 = v286[170];
    *((_QWORD *)&v385 + 1) = v288;
    v289 = v286[173];
    *(_QWORD *)&v386 = v286[175];
    *((_QWORD *)&v386 + 1) = v289;
    v290 = v286[178];
    *(_QWORD *)&v387 = v286[180];
    *((_QWORD *)&v387 + 1) = v290;
    v291 = v286[183];
    *(_QWORD *)&v388 = v286[185];
    *((_QWORD *)&v388 + 1) = v291;
    v292 = v286[188];
    v389 = v286[190];
    v390 = v292;
    v293 = v286[193];
    v391 = v286[195];
    v392 = v293;
    v294 = v286[200];
    v295 = v286[198];
    v393 = v294;
    v394 = v295;
    result = re::EvaluationTree::resolveAliasRegisters(*(_QWORD *)(a2 + 8), *(_QWORD *)a2, (uint64_t *)&v384, (_QWORD *)(v283 + 200 * v281++ + 8));
    if (v281 == i)
      goto LABEL_203;
  }
  v7 = v284 - 0x7FFFFFFFFFFFFFFFLL;
  if (v284 - 0x7FFFFFFFFFFFFFFFLL < 0)
  {
LABEL_201:
    *(_QWORD *)(v283 + 200 * v281) = v284;
    goto LABEL_202;
  }
  v285 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(v285 + 704);
  while (v13 > v7)
  {
    v284 = *(_QWORD *)(*(_QWORD *)(v285 + 720) + 8 * v7);
    v7 = v284 - 0x7FFFFFFFFFFFFFFFLL;
    if (v284 - 0x7FFFFFFFFFFFFFFFLL < 0)
      goto LABEL_201;
  }
  v383 = 0;
  v387 = 0u;
  v388 = 0u;
  v385 = 0u;
  v386 = 0u;
  v384 = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v395 = 136315906;
  v396 = "operator[]";
  v397 = 1024;
  v398 = 797;
  v399 = 2048;
  v400 = v7;
  v401 = 2048;
  v402 = (_QWORD *)v13;
  _os_log_send_and_compose_impl();
  result = (_BYTE *)_os_crash_msg();
  __break(1u);
LABEL_293:
  if (a3[19])
  {
    v266 = 0;
    do
    {
      if ((result[40] & 0xFE) == 2)
      {
        v349 = a3[19];
        if (v349 <= v266)
          goto LABEL_383;
      }
      ++v266;
    }
    while (v266 < a3[19]);
  }
  if (a3[21])
  {
    v266 = 0;
    do
    {
      if ((result[40] & 0xFE) == 2)
      {
        v351 = a3[21];
        if (v351 <= v266)
          goto LABEL_384;
      }
      ++v266;
    }
    while (v266 < a3[21]);
  }
  if (a3[23])
  {
    v266 = 0;
    do
    {
      if ((result[40] & 0xFE) == 2)
      {
        v353 = a3[23];
        if (v353 <= v266)
          goto LABEL_385;
      }
      ++v266;
    }
    while (v266 < a3[23]);
  }
  if (a3[25])
  {
    v266 = 0;
    do
    {
      if ((result[40] & 0xFE) == 2)
      {
        v355 = a3[25];
        if (v355 <= v266)
          goto LABEL_386;
      }
      ++v266;
    }
    while (v266 < a3[25]);
  }
  if (a3[27])
  {
    v266 = 0;
    do
    {
      if ((result[40] & 0xFE) == 2)
      {
        v357 = a3[27];
        if (v357 <= v266)
          goto LABEL_387;
      }
      ++v266;
    }
    while (v266 < a3[27]);
  }
  if (a3[29])
  {
    v266 = 0;
    do
    {
      if ((result[40] & 0xFE) == 2)
      {
        v359 = a3[29];
        if (v359 <= v266)
          goto LABEL_388;
      }
      ++v266;
    }
    while (v266 < a3[29]);
  }
  if (a3[31])
  {
    v266 = 0;
    do
    {
      if ((result[40] & 0xFE) == 2)
      {
        v361 = a3[31];
        if (v361 <= v266)
          goto LABEL_389;
      }
      ++v266;
    }
    while (v266 < a3[31]);
  }
  if (a3[33])
  {
    v266 = 0;
    do
    {
      if ((result[40] & 0xFE) == 2)
      {
        v363 = a3[33];
        if (v363 <= v266)
          goto LABEL_390;
      }
      ++v266;
    }
    while (v266 < a3[33]);
  }
  if (a3[35])
  {
    v15 = 0;
    v266 = 0;
    do
    {
      {
        v365 = a3[35];
        if (v365 <= v266)
          goto LABEL_391;
      }
      v366 = a3[35];
      if (v366 <= v266)
        goto LABEL_380;
      {
        v368 = a3[35];
        if (v368 <= v266)
          goto LABEL_392;
      }
      v369 = a3[35];
      if (v369 <= v266)
        goto LABEL_381;
      if ((result[40] & 0xFE) == 2)
      {
        v371 = a3[35];
        if (v371 <= v266)
          goto LABEL_393;
      }
      ++v266;
      v15 += 3;
    }
    while (v266 < a3[35]);
  }
  *v372 = 1;
  if (!v378[0])
    goto LABEL_289;
  return result;
}

void re::FixedArray<re::EvaluationCommand>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 62)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 4, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 4 * a3;
  v6 = (_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 4 * a3, 4);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 4);
    v8 = (_DWORD *)((char *)v8 + v5 - 4);
  }
  *v8 = 0;
}

_anonymous_namespace_ *re::FixedArray<unsigned long>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<unsigned long>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::EvaluationModelSingleThread::deinit(re::EvaluationModelSingleThread *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  re::FixedRegisterTable::deinit((re::EvaluationModelSingleThread *)((char *)this + 16));
  re::FixedArray<re::EvaluationCallbackData>::deinit((_QWORD *)this + 26);
  re::FixedArray<re::EvaluationContext>::deinit((_QWORD *)this + 29);
  re::FixedArray<re::EvaluationModelSingleThread::BranchGroupExecutionData>::deinit((_QWORD *)this + 32);
  re::FixedRegisterTable::deinit((re::EvaluationModelSingleThread *)((char *)this + 280));
  v2 = *((_QWORD *)this + 59);
  if (v2)
  {
    if (*((_QWORD *)this + 60))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 61));
      *((_QWORD *)this + 60) = 0;
      *((_QWORD *)this + 61) = 0;
    }
    *((_QWORD *)this + 59) = 0;
  }
  re::FixedRegisterTable::deinit((re::EvaluationModelSingleThread *)((char *)this + 496));
  v3 = *((_QWORD *)this + 86);
  if (v3)
  {
    if (*((_QWORD *)this + 87))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 88));
      *((_QWORD *)this + 87) = 0;
      *((_QWORD *)this + 88) = 0;
    }
    *((_QWORD *)this + 86) = 0;
  }
  v4 = *((_QWORD *)this + 89);
  if (v4)
  {
    if (*((_QWORD *)this + 90))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 91));
      *((_QWORD *)this + 90) = 0;
      *((_QWORD *)this + 91) = 0;
    }
    *((_QWORD *)this + 89) = 0;
  }
  v5 = *((_QWORD *)this + 95);
  if (v5)
  {
    if (*((_QWORD *)this + 96))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 97));
      *((_QWORD *)this + 96) = 0;
      *((_QWORD *)this + 97) = 0;
    }
    *((_QWORD *)this + 95) = 0;
  }
  result = *((_QWORD *)this + 92);
  if (result)
  {
    if (*((_QWORD *)this + 93))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *((_QWORD *)this + 94));
      *((_QWORD *)this + 93) = 0;
      *((_QWORD *)this + 94) = 0;
    }
    *((_QWORD *)this + 92) = 0;
  }
  return result;
}

uint64_t re::EvaluationModelSingleThread::evaluate(re::EvaluationModelSingleThread *this, re::EvaluationContextSlices *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 *v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __int128 *v81;
  _OWORD *v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __int128 *v88;
  _OWORD *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v5 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  v110 = v4;
  v111 = v5;
  v7 = *((_QWORD *)this + 6);
  v6 = *((_QWORD *)this + 7);
  v112 = v6;
  v113 = v7;
  i = *((_QWORD *)this + 9);
  v8 = *((_QWORD *)this + 10);
  v114 = v8;
  v115 = i;
  v116 = *((_QWORD *)this + 13);
  v117 = *((_QWORD *)this + 12);
  v118 = *((_QWORD *)this + 16);
  v119 = *((_QWORD *)this + 15);
  v120 = *((_QWORD *)this + 19);
  v121 = *((_QWORD *)this + 18);
  v122 = *((_QWORD *)this + 22);
  v123 = *((_QWORD *)this + 21);
  v124 = *((_QWORD *)this + 25);
  v125 = *((_QWORD *)this + 24);
  v126 = *((_QWORD *)this + 28);
  v127 = *((_QWORD *)this + 31);
  v128 = *((_QWORD *)this + 34);
  v10 = *((_QWORD *)a2 + 1);
  if (v10)
  {
    v11 = 0;
    v12 = *(_QWORD *)a2;
    v13 = *((_QWORD *)this + 36);
    while (v13 != v11)
    {
      v14 = *(_QWORD *)(*((_QWORD *)this + 37) + 8 * v11);
      if (v14 != -1)
      {
        if (v5 <= v14)
          goto LABEL_167;
        *(_DWORD *)(v4 + 4 * v14) = *(_DWORD *)(v12 + 4 * v11);
      }
      if (v10 == ++v11)
        goto LABEL_8;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_132;
  }
LABEL_8:
  v15 = *((_QWORD *)a2 + 3);
  if (v15)
  {
    v16 = 0;
    v17 = *((_QWORD *)a2 + 2);
    v18 = *((_QWORD *)this + 39);
    while (v18 != v16)
    {
      v19 = *(_QWORD *)(*((_QWORD *)this + 40) + 8 * v16);
      if (v19 != -1)
      {
        if (v7 <= v19)
          goto LABEL_168;
        *(_DWORD *)(v6 + 4 * v19) = *(_DWORD *)(v17 + 4 * v16);
      }
      if (v15 == ++v16)
        goto LABEL_15;
    }
LABEL_132:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_133:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_134:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_135:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_136:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_137:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_138:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_139:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_140:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_141:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_142:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_143;
  }
LABEL_15:
  v20 = *((_QWORD *)a2 + 5);
  if (v20)
  {
    v21 = 0;
    v22 = *((_QWORD *)a2 + 4);
    v23 = *((_QWORD *)this + 42);
    while (v23 != v21)
    {
      v24 = *(_QWORD *)(*((_QWORD *)this + 43) + 8 * v21);
      if (v24 != -1)
      {
        if (i <= v24)
          goto LABEL_169;
        *(_DWORD *)(v8 + 4 * v24) = *(_DWORD *)(v22 + 4 * v21);
      }
      if (v20 == ++v21)
        goto LABEL_22;
    }
    goto LABEL_133;
  }
LABEL_22:
  v25 = *((_QWORD *)a2 + 7);
  if (v25)
  {
    v26 = 0;
    i = 0;
    while (*((_QWORD *)this + 45) > i)
    {
      v27 = *(_QWORD *)(*((_QWORD *)this + 46) + 8 * i);
      if (v27 != -1)
      {
        if (*((_QWORD *)this + 12) <= v27)
          goto LABEL_170;
        v28 = (__int128 *)(*((_QWORD *)a2 + 6) + v26);
        v29 = (_OWORD *)(*((_QWORD *)this + 13) + 48 * v27);
        v30 = *v28;
        v31 = v28[2];
        v29[1] = v28[1];
        v29[2] = v31;
        *v29 = v30;
        v25 = *((_QWORD *)a2 + 7);
      }
      ++i;
      v26 += 48;
      if (i >= v25)
        goto LABEL_29;
    }
    goto LABEL_134;
  }
LABEL_29:
  v32 = *((_QWORD *)a2 + 9);
  if (v32)
  {
    v33 = 0;
    i = 0;
    while (*((_QWORD *)this + 48) > i)
    {
      v34 = *(_QWORD *)(*((_QWORD *)this + 49) + 8 * i);
      if (v34 != -1)
      {
        if (*((_QWORD *)this + 15) <= v34)
          goto LABEL_171;
        v35 = (__int128 *)(*((_QWORD *)a2 + 8) + v33);
        v36 = (_OWORD *)(*((_QWORD *)this + 16) + (v34 << 6));
        v37 = *v35;
        v38 = v35[1];
        v39 = v35[3];
        v36[2] = v35[2];
        v36[3] = v39;
        *v36 = v37;
        v36[1] = v38;
        v32 = *((_QWORD *)a2 + 9);
      }
      ++i;
      v33 += 64;
      if (i >= v32)
        goto LABEL_36;
    }
    goto LABEL_135;
  }
LABEL_36:
  v40 = *((_QWORD *)a2 + 11);
  if (v40)
  {
    v41 = 0;
    i = 0;
    while (*((_QWORD *)this + 51) > i)
    {
      v42 = *(_QWORD *)(*((_QWORD *)this + 52) + 8 * i);
      if (v42 != -1)
      {
        if (*((_QWORD *)this + 18) <= v42)
          goto LABEL_172;
        *(_OWORD *)(*((_QWORD *)this + 19) + 16 * v42) = *(_OWORD *)(*((_QWORD *)a2 + 10) + v41);
        v40 = *((_QWORD *)a2 + 11);
      }
      ++i;
      v41 += 16;
      if (i >= v40)
        goto LABEL_43;
    }
    goto LABEL_136;
  }
LABEL_43:
  v43 = *((_QWORD *)a2 + 13);
  if (v43)
  {
    i = 0;
    while (*((_QWORD *)this + 54) > i)
    {
      v44 = *(_QWORD *)(*((_QWORD *)this + 55) + 8 * i);
      if (v44 != -1)
      {
        if (*((_QWORD *)this + 21) <= v44)
          goto LABEL_173;
        *(_QWORD *)(*((_QWORD *)this + 22) + 8 * v44) = *(_QWORD *)(*((_QWORD *)a2 + 12) + 8 * i);
        v43 = *((_QWORD *)a2 + 13);
      }
      if (++i >= v43)
        goto LABEL_50;
    }
    goto LABEL_137;
  }
LABEL_50:
  v45 = *((_QWORD *)a2 + 15);
  if (v45)
  {
    v46 = 0;
    i = 0;
    while (*((_QWORD *)this + 57) > i)
    {
      v47 = *(_QWORD *)(*((_QWORD *)this + 58) + 8 * i);
      if (v47 != -1)
      {
        if (*((_QWORD *)this + 24) <= v47)
          goto LABEL_174;
        *(_OWORD *)(*((_QWORD *)this + 25) + 16 * v47) = *(_OWORD *)(*((_QWORD *)a2 + 14) + v46);
        v45 = *((_QWORD *)a2 + 15);
      }
      ++i;
      v46 += 16;
      if (i >= v45)
        goto LABEL_57;
    }
    goto LABEL_138;
  }
LABEL_57:
  v48 = *((_QWORD *)this + 60);
  if (v48)
  {
    v49 = 0;
    v50 = 0;
    for (i = 0; i < v48; ++i)
    {
      v51 = *(_QWORD *)(*((_QWORD *)this + 61) + v49);
      if (v51 != -1)
      {
        v52 = *((_QWORD *)a2 + 17);
        if (v52 <= i)
          goto LABEL_175;
        if (*((_QWORD *)this + 24) <= v51)
          goto LABEL_176;
        *(_OWORD *)(*((_QWORD *)this + 25) + 16 * v51) = *(_OWORD *)(*((_QWORD *)a2 + 16) + v50);
        v48 = *((_QWORD *)this + 60);
      }
      if (v48 <= i)
        goto LABEL_141;
      v53 = *(_QWORD *)(*((_QWORD *)this + 61) + v49 + 8);
      if (v53 != -1)
      {
        v54 = *((_QWORD *)a2 + 17);
        if (v54 <= i)
          goto LABEL_177;
        if (*((_QWORD *)this + 18) <= v53)
          goto LABEL_178;
        *(_OWORD *)(*((_QWORD *)this + 19) + 16 * v53) = *(_OWORD *)(*((_QWORD *)a2 + 16) + v50 + 16);
        v48 = *((_QWORD *)this + 60);
      }
      if (v48 <= i)
        goto LABEL_142;
      v55 = *(_QWORD *)(*((_QWORD *)this + 61) + v49 + 16);
      if (v55 != -1)
      {
        v56 = *((_QWORD *)a2 + 17);
        if (v56 <= i)
          goto LABEL_179;
        if (*((_QWORD *)this + 24) <= v55)
          goto LABEL_180;
        *(_OWORD *)(*((_QWORD *)this + 25) + 16 * v55) = *(_OWORD *)(*((_QWORD *)a2 + 16) + v50 + 32);
        v48 = *((_QWORD *)this + 60);
      }
      v50 += 48;
      v49 += 24;
    }
  }
  v57 = *((_QWORD *)this + 90);
  if (v57)
  {
    v58 = 0;
    i = 0;
    while (*((_QWORD *)this + 96) > i)
    {
      if (*((_QWORD *)this + 90) <= i)
        goto LABEL_140;
      v59 = *(_QWORD *)(*((_QWORD *)this + 97) + 8 * i) + v58;
                                                                                            + 4 * i++)])(*((_QWORD *)this + 94) + 8 * v58);
      v58 = v59;
      if (v57 == i)
        goto LABEL_79;
    }
    goto LABEL_139;
  }
LABEL_79:
  v60 = *((_QWORD *)this + 63);
  if (v60)
  {
    v61 = 0;
    v63 = *((_QWORD *)a2 + 18);
    v62 = *((_QWORD *)a2 + 19);
    v64 = *((_QWORD *)this + 64);
    i = *((_QWORD *)this + 3);
    while (1)
    {
      v65 = *(_QWORD *)(v64 + 8 * v61);
      if (i <= v65)
        break;
      if (v62 == v61)
        goto LABEL_144;
      *(_DWORD *)(v63 + 4 * v61++) = *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v65);
      if (v60 == v61)
        goto LABEL_84;
    }
LABEL_143:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_144:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v62, v62, v110, v111, v112, v113, v114, v115, v116, v117, v118, v119, v120,
      v121,
      v122,
      v123,
      v124,
      v125,
      v126,
      v127,
      v128);
    _os_crash();
    __break(1u);
    goto LABEL_145;
  }
LABEL_84:
  v66 = *((_QWORD *)this + 66);
  if (v66)
  {
    v67 = 0;
    v69 = *((_QWORD *)a2 + 20);
    v68 = *((_QWORD *)a2 + 21);
    v70 = *((_QWORD *)this + 67);
    i = *((_QWORD *)this + 6);
    while (1)
    {
      v71 = *(_QWORD *)(v70 + 8 * v67);
      if (i <= v71)
        break;
      if (v68 == v67)
        goto LABEL_146;
      *(_DWORD *)(v69 + 4 * v67++) = *(_DWORD *)(*((_QWORD *)this + 7) + 4 * v71);
      if (v66 == v67)
        goto LABEL_89;
    }
LABEL_145:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_146:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v68, v68);
    _os_crash();
    __break(1u);
    goto LABEL_147;
  }
LABEL_89:
  v72 = *((_QWORD *)this + 69);
  if (v72)
  {
    v73 = 0;
    v75 = *((_QWORD *)a2 + 22);
    v74 = *((_QWORD *)a2 + 23);
    v76 = *((_QWORD *)this + 70);
    i = *((_QWORD *)this + 9);
    while (1)
    {
      v77 = *(_QWORD *)(v76 + 8 * v73);
      if (i <= v77)
        break;
      if (v74 == v73)
        goto LABEL_148;
      *(_DWORD *)(v75 + 4 * v73++) = *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v77);
      if (v72 == v73)
        goto LABEL_94;
    }
LABEL_147:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_148:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v74, v74);
    _os_crash();
    __break(1u);
    goto LABEL_149;
  }
LABEL_94:
  if (*((_QWORD *)this + 72))
  {
    v78 = 0;
    v79 = 0;
    while (1)
    {
      i = *(_QWORD *)(*((_QWORD *)this + 73) + 8 * v79);
      if (*((_QWORD *)this + 12) <= i)
        break;
      v80 = *((_QWORD *)a2 + 25);
      if (v80 <= v79)
        goto LABEL_150;
      v81 = (__int128 *)(*((_QWORD *)this + 13) + 48 * i);
      v82 = (_OWORD *)(*((_QWORD *)a2 + 24) + v78);
      v83 = *v81;
      v84 = v81[2];
      v82[1] = v81[1];
      v82[2] = v84;
      *v82 = v83;
      ++v79;
      v78 += 48;
      if (v79 >= *((_QWORD *)this + 72))
        goto LABEL_99;
    }
LABEL_149:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_150:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v79, v80);
    _os_crash();
    __break(1u);
    goto LABEL_151;
  }
LABEL_99:
  if (*((_QWORD *)this + 75))
  {
    v85 = 0;
    v86 = 0;
    while (1)
    {
      i = *(_QWORD *)(*((_QWORD *)this + 76) + 8 * v86);
      if (*((_QWORD *)this + 15) <= i)
        break;
      v87 = *((_QWORD *)a2 + 27);
      if (v87 <= v86)
        goto LABEL_152;
      v88 = (__int128 *)(*((_QWORD *)this + 16) + (i << 6));
      v89 = (_OWORD *)(*((_QWORD *)a2 + 26) + v85);
      v90 = *v88;
      v91 = v88[1];
      v92 = v88[3];
      v89[2] = v88[2];
      v89[3] = v92;
      *v89 = v90;
      v89[1] = v91;
      ++v86;
      v85 += 64;
      if (v86 >= *((_QWORD *)this + 75))
        goto LABEL_104;
    }
LABEL_151:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_152:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v86, v87);
    _os_crash();
    __break(1u);
    goto LABEL_153;
  }
LABEL_104:
  if (*((_QWORD *)this + 78))
  {
    v93 = 0;
    v94 = 0;
    while (1)
    {
      i = *(_QWORD *)(*((_QWORD *)this + 79) + 8 * v94);
      if (*((_QWORD *)this + 18) <= i)
        break;
      v95 = *((_QWORD *)a2 + 29);
      if (v95 <= v94)
        goto LABEL_154;
      *(_OWORD *)(*((_QWORD *)a2 + 28) + v93) = *(_OWORD *)(*((_QWORD *)this + 19) + 16 * i);
      ++v94;
      v93 += 16;
      if (v94 >= *((_QWORD *)this + 78))
        goto LABEL_109;
    }
LABEL_153:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_154:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v94, v95);
    _os_crash();
    __break(1u);
    goto LABEL_155;
  }
LABEL_109:
  if (*((_QWORD *)this + 81))
  {
    v96 = 0;
    while (1)
    {
      i = *(_QWORD *)(*((_QWORD *)this + 82) + 8 * v96);
      if (*((_QWORD *)this + 21) <= i)
        break;
      v97 = *((_QWORD *)a2 + 31);
      if (v97 <= v96)
        goto LABEL_156;
      *(_QWORD *)(*((_QWORD *)a2 + 30) + 8 * v96++) = *(_QWORD *)(*((_QWORD *)this + 22) + 8 * i);
      if (v96 >= *((_QWORD *)this + 81))
        goto LABEL_114;
    }
LABEL_155:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_156:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v96, v97);
    _os_crash();
    __break(1u);
    goto LABEL_157;
  }
LABEL_114:
  if (*((_QWORD *)this + 84))
  {
    v98 = 0;
    v99 = 0;
    while (1)
    {
      i = *(_QWORD *)(*((_QWORD *)this + 85) + 8 * v99);
      if (*((_QWORD *)this + 24) <= i)
        break;
      v100 = *((_QWORD *)a2 + 33);
      if (v100 <= v99)
        goto LABEL_158;
      *(_OWORD *)(*((_QWORD *)a2 + 32) + v98) = *(_OWORD *)(*((_QWORD *)this + 25) + 16 * i);
      ++v99;
      v98 += 16;
      if (v99 >= *((_QWORD *)this + 84))
        goto LABEL_119;
    }
LABEL_157:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_158:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v99, v100);
    _os_crash();
    __break(1u);
    goto LABEL_159;
  }
LABEL_119:
  if (*((_QWORD *)this + 87))
  {
    v101 = 0;
    v102 = 0;
    i = 0;
    while (1)
    {
      v103 = *(_QWORD *)(*((_QWORD *)this + 88) + v101);
      if (*((_QWORD *)this + 24) <= v103)
        break;
      v104 = *((_QWORD *)a2 + 35);
      if (v104 <= i)
        goto LABEL_160;
      *(_OWORD *)(*((_QWORD *)a2 + 34) + v102) = *(_OWORD *)(*((_QWORD *)this + 25) + 16 * v103);
      if (*((_QWORD *)this + 87) <= i)
        goto LABEL_161;
      v105 = *(_QWORD *)(*((_QWORD *)this + 88) + v101 + 8);
      if (*((_QWORD *)this + 18) <= v105)
        goto LABEL_162;
      v106 = *((_QWORD *)a2 + 35);
      if (v106 <= i)
        goto LABEL_163;
      *(_OWORD *)(*((_QWORD *)a2 + 34) + v102 + 16) = *(_OWORD *)(*((_QWORD *)this + 19) + 16 * v105);
      if (*((_QWORD *)this + 87) <= i)
        goto LABEL_164;
      v107 = *(_QWORD *)(*((_QWORD *)this + 88) + v101 + 16);
      if (*((_QWORD *)this + 24) <= v107)
        goto LABEL_165;
      v108 = *((_QWORD *)a2 + 35);
      if (v108 <= i)
        goto LABEL_166;
      *(_OWORD *)(*((_QWORD *)a2 + 34) + v102 + 32) = *(_OWORD *)(*((_QWORD *)this + 25) + 16 * v107);
      ++i;
      v102 += 48;
      v101 += 24;
      if (i >= *((_QWORD *)this + 87))
        return 1;
    }
LABEL_159:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_160:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, i, v104);
    _os_crash();
    __break(1u);
LABEL_161:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_162:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_163:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, i, v106);
    _os_crash();
    __break(1u);
LABEL_164:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_165:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_166:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, i, v108);
    _os_crash();
    __break(1u);
LABEL_167:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_168:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_169:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_170:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_171:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_172:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_173:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_174:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_175:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v52);
    _os_crash();
    __break(1u);
LABEL_176:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_177:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v54);
    _os_crash();
    __break(1u);
LABEL_178:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_179:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v56);
    _os_crash();
    __break(1u);
LABEL_180:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return 1;
}

void re::EvaluationModelSingleThread::setupEvaluationModel(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _OWORD v7[18];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[12];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[12];

  memset(v15, 0, sizeof(v15));
  v13 = 0;
  v12 = 0;
  v14 = 0;
  memset(v11, 0, sizeof(v11));
  v8 = 0;
  v9 = 0;
  v10 = 0;
  memset(v7, 0, sizeof(v7));
  re::EvaluationTree::resolveAliasRegisters(a3, a2, a4, v15, &v12, v11, &v8, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  re::EvaluationModelSingleThread::init(a5);
  if (v8 && v9)
    (*(void (**)(void))(*(_QWORD *)v8 + 40))();
  re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)v11);
  if (v12 && v13)
    (*(void (**)(void))(*(_QWORD *)v12 + 40))();
  re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)v15);
}

_QWORD *re::DynamicArray<re::EvaluationCommand>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 62)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 4, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 4 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 4 * a2, 4);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 4 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::EvaluationCommand>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::finishRegisterProcessing(_QWORD *result, unsigned int a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *i;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (result[3 * a2 + 3] <= a3)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = result;
  v5 = &result[3 * a2];
  *(_BYTE *)(v5[4] + (a3 << 6) + 40) = a4;
  if (v5[57] <= a3)
    goto LABEL_12;
  v6 = (_QWORD *)(result[3 * a2 + 58] + 16 * a3);
  v7 = v6[1];
  if (v7)
  {
    for (i = (unint64_t *)(*v6 + 8); ; i += 2)
    {
      v9 = *((unsigned __int8 *)i - 8);
      v10 = *i;
      if (v4[3 * *((unsigned __int8 *)i - 8) + 3] <= *i)
        break;
      v11 = v4[3 * *((unsigned __int8 *)i - 8) + 4] + (v10 << 6);
      v12 = *(_QWORD *)(v11 + 32) - 1;
      *(_QWORD *)(v11 + 32) = v12;
      if (!v12)
      if (!--v7)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::processRegister<int>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *result;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t RegisterMap;
  char **v30;
  uint64_t v31;
  unint64_t *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t MappedRegister;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[8];

  v61[5] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)result + 40) == 2)
    return result;
  v9 = (int *)result;
  v10 = *(unsigned int *)result;
  if ((int)v10 > 7)
  {
    v23 = *(_DWORD *)result;
    if ((*(_BYTE *)(a1 + 3824) & 1) != 0)
    {
      memset(v61, 0, 32);
      v25 = &(&re::kEvaluationCommandDescriptions)[2 * v10];
      v26 = *((unsigned __int8 *)v25 + 9);
      if (!*((_BYTE *)v25 + 9))
      {
LABEL_59:
        LODWORD(v46) = 0;
        v61[v26] = *((_QWORD *)v9 + 6);
        v37 = *(_QWORD *)(a1 + 3848);
        *(_QWORD *)&v47 = *(_QWORD *)(a1 + 3864);
        *((_QWORD *)&v47 + 1) = v37;
        v38 = *(_QWORD *)(a1 + 3888);
        *(_QWORD *)&v48 = *(_QWORD *)(a1 + 3904);
        *((_QWORD *)&v48 + 1) = v38;
        v39 = *(_QWORD *)(a1 + 3928);
        *(_QWORD *)&v49 = *(_QWORD *)(a1 + 3944);
        *((_QWORD *)&v49 + 1) = v39;
        v40 = *(_QWORD *)(a1 + 3968);
        *(_QWORD *)&v50 = *(_QWORD *)(a1 + 3984);
        *((_QWORD *)&v50 + 1) = v40;
        v41 = *(_QWORD *)(a1 + 4008);
        *(_QWORD *)&v51 = *(_QWORD *)(a1 + 4024);
        *((_QWORD *)&v51 + 1) = v41;
        v42 = *(_QWORD *)(a1 + 4048);
        v52 = *(_QWORD *)(a1 + 4064);
        v53 = v42;
        v43 = *(_QWORD *)(a1 + 4088);
        v54 = *(_QWORD *)(a1 + 4104);
        v55 = v43;
        v44 = *(_QWORD *)(a1 + 4128);
        v56 = *(_QWORD *)(a1 + 4144);
        v57 = v44;
        v58 = 0;
        v59 = 0;
        v60 = 0;
      }
      v27 = 0;
      v28 = (char *)v25 + 10;
      while (2)
      {
        switch(v28[v27])
        {
          case 0:
            goto LABEL_35;
          case 1:
            goto LABEL_35;
          case 2:
            goto LABEL_35;
          case 3:
            goto LABEL_35;
          case 4:
            goto LABEL_35;
          case 5:
            goto LABEL_35;
          case 6:
            goto LABEL_35;
          case 7:
LABEL_35:
            if (*(_BYTE *)(RegisterMap + 40) != 3)
              goto LABEL_57;
            v61[v27++] = *(_QWORD *)(RegisterMap + 48);
            if (v26 == v27)
              goto LABEL_59;
            continue;
          default:
            if (v28[v27] - 253 >= 2)
            {
              re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1778, v28[v27]);
              _os_crash();
              __break(1u);
LABEL_66:
              re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1823, v34);
              _os_crash();
              __break(1u);
              JUMPOUT(0x225141C8CLL);
            }
LABEL_57:
            if (v26 == v27)
              goto LABEL_59;
            v23 = *v9;
            break;
        }
        break;
      }
    }
    if (v23 == 76)
    {
      {
        v14 = *((_QWORD *)v9 + 1);
        v3 = *(_QWORD *)(a1 + 216);
        if (v3 <= v14)
          goto LABEL_64;
        v24 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 904 * v14 + 896);
LABEL_41:
        re::DynamicArray<unsigned long>::add(a3, v24);
      }
    }
    else
    {
      if (v23 != 77)
      {
        v30 = &(&re::kEvaluationCommandDescriptions)[2 * v10];
        v31 = *((unsigned __int8 *)v30 + 9);
        if (*((_BYTE *)v30 + 9))
        {
          v32 = (unint64_t *)(v9 + 2);
          v33 = (unsigned __int8 *)v30 + 10;
          while (2)
          {
            v35 = *v33++;
            v34 = v35;
            switch(v35)
            {
              case 0u:
                goto LABEL_53;
              case 1u:
                goto LABEL_53;
              case 2u:
                goto LABEL_53;
              case 3u:
                goto LABEL_53;
              case 4u:
                goto LABEL_53;
              case 5u:
                goto LABEL_53;
              case 6u:
                goto LABEL_53;
              case 7u:
LABEL_53:
                *(_QWORD *)&v47 = MappedRegister;
                re::DynamicArray<unsigned long>::add(a3, &v47);
                ++v32;
                if (!--v31)
                  break;
                continue;
              default:
                goto LABEL_66;
            }
            break;
          }
        }
        re::DynamicArray<unsigned long>::add(a3, &v47);
      }
      {
        v14 = *((_QWORD *)v9 + 1);
        v3 = *(_QWORD *)(a1 + 240);
        if (v3 <= v14)
        {
LABEL_63:
          v46 = 0;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v61[0]) = 136315906;
          *(_QWORD *)((char *)v61 + 4) = "operator[]";
          WORD2(v61[1]) = 1024;
          *(_DWORD *)((char *)&v61[1] + 6) = 468;
          WORD1(v61[2]) = 2048;
          *(_QWORD *)((char *)&v61[2] + 4) = v14;
          WORD2(v61[3]) = 2048;
          *(_QWORD *)((char *)&v61[3] + 6) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_64:
          v46 = 0;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v61[0]) = 136315906;
          *(_QWORD *)((char *)v61 + 4) = "operator[]";
          WORD2(v61[1]) = 1024;
          *(_DWORD *)((char *)&v61[1] + 6) = 468;
          WORD1(v61[2]) = 2048;
          *(_QWORD *)((char *)&v61[2] + 4) = v14;
          WORD2(v61[3]) = 2048;
          *(_QWORD *)((char *)&v61[3] + 6) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v24 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 248 * v14 + 240);
        goto LABEL_41;
      }
    }
  }
  v45 = 0;
  v11 = *(_QWORD **)(a1 + 8);
  v12 = a2;
  v13 = a2 - 0x7FFFFFFFFFFFFFFFLL;
  if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 0)
  {
    v14 = v11[83];
    while (v14 > v13)
    {
      v12 = *(_QWORD *)(v11[85] + 8 * v13);
      v13 = v12 - 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)(v12 - 0x7FFFFFFFFFFFFFFFLL) < 0)
        goto LABEL_7;
    }
    v46 = 0;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v61[0]) = 136315906;
    *(_QWORD *)((char *)v61 + 4) = "operator[]";
    WORD2(v61[1]) = 1024;
    *(_DWORD *)((char *)&v61[1] + 6) = 797;
    WORD1(v61[2]) = 2048;
    *(_QWORD *)((char *)&v61[2] + 4) = v13;
    WORD2(v61[3]) = 2048;
    *(_QWORD *)((char *)&v61[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_62;
  }
LABEL_7:
  v15 = v11[3];
  if (v15)
  {
    v16 = (_QWORD *)v11[5];
    v17 = &v16[v15];
    v18 = v16;
    do
    {
      v19 = v15 >> 1;
      v20 = &v18[v15 >> 1];
      v22 = *v20;
      v21 = v20 + 1;
      v15 += ~(v15 >> 1);
      if (v22 < v12)
        v18 = v21;
      else
        v15 = v19;
    }
    while (v15);
    if (v18 != v17 && *v18 == v12)
    {
      v13 = v18 - v16;
      v14 = v11[43];
      if (v14 <= v13)
      {
LABEL_62:
        v46 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v61[0]) = 136315906;
        *(_QWORD *)((char *)v61 + 4) = "operator[]";
        WORD2(v61[1]) = 1024;
        *(_DWORD *)((char *)&v61[1] + 6) = 797;
        WORD1(v61[2]) = 2048;
        *(_QWORD *)((char *)&v61[2] + 4) = v13;
        WORD2(v61[3]) = 2048;
        *(_QWORD *)((char *)&v61[3] + 6) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_63;
      }
      v45 = *(_DWORD *)(v11[45] + 4 * v13);
    }
  }
}

_QWORD *re::`anonymous namespace'::RegisterMapping::processRegister<unsigned int>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *result;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t RegisterMap;
  char **v30;
  uint64_t v31;
  unint64_t *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t MappedRegister;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[8];

  v61[5] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)result + 40) == 2)
    return result;
  v9 = (int *)result;
  v10 = *(unsigned int *)result;
  if ((int)v10 > 7)
  {
    v23 = *(_DWORD *)result;
    if ((*(_BYTE *)(a1 + 3824) & 1) != 0)
    {
      memset(v61, 0, 32);
      v25 = &(&re::kEvaluationCommandDescriptions)[2 * v10];
      v26 = *((unsigned __int8 *)v25 + 9);
      if (!*((_BYTE *)v25 + 9))
      {
LABEL_59:
        LODWORD(v46) = 0;
        v61[v26] = *((_QWORD *)v9 + 6);
        v37 = *(_QWORD *)(a1 + 3848);
        *(_QWORD *)&v47 = *(_QWORD *)(a1 + 3864);
        *((_QWORD *)&v47 + 1) = v37;
        v38 = *(_QWORD *)(a1 + 3888);
        *(_QWORD *)&v48 = *(_QWORD *)(a1 + 3904);
        *((_QWORD *)&v48 + 1) = v38;
        v39 = *(_QWORD *)(a1 + 3928);
        *(_QWORD *)&v49 = *(_QWORD *)(a1 + 3944);
        *((_QWORD *)&v49 + 1) = v39;
        v40 = *(_QWORD *)(a1 + 3968);
        *(_QWORD *)&v50 = *(_QWORD *)(a1 + 3984);
        *((_QWORD *)&v50 + 1) = v40;
        v41 = *(_QWORD *)(a1 + 4008);
        *(_QWORD *)&v51 = *(_QWORD *)(a1 + 4024);
        *((_QWORD *)&v51 + 1) = v41;
        v42 = *(_QWORD *)(a1 + 4048);
        v52 = *(_QWORD *)(a1 + 4064);
        v53 = v42;
        v43 = *(_QWORD *)(a1 + 4088);
        v54 = *(_QWORD *)(a1 + 4104);
        v55 = v43;
        v44 = *(_QWORD *)(a1 + 4128);
        v56 = *(_QWORD *)(a1 + 4144);
        v57 = v44;
        v58 = 0;
        v59 = 0;
        v60 = 0;
      }
      v27 = 0;
      v28 = (char *)v25 + 10;
      while (2)
      {
        switch(v28[v27])
        {
          case 0:
            goto LABEL_35;
          case 1:
            goto LABEL_35;
          case 2:
            goto LABEL_35;
          case 3:
            goto LABEL_35;
          case 4:
            goto LABEL_35;
          case 5:
            goto LABEL_35;
          case 6:
            goto LABEL_35;
          case 7:
LABEL_35:
            if (*(_BYTE *)(RegisterMap + 40) != 3)
              goto LABEL_57;
            v61[v27++] = *(_QWORD *)(RegisterMap + 48);
            if (v26 == v27)
              goto LABEL_59;
            continue;
          default:
            if (v28[v27] - 253 >= 2)
            {
              re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1778, v28[v27]);
              _os_crash();
              __break(1u);
LABEL_66:
              re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1823, v34);
              _os_crash();
              __break(1u);
              JUMPOUT(0x2251424F4);
            }
LABEL_57:
            if (v26 == v27)
              goto LABEL_59;
            v23 = *v9;
            break;
        }
        break;
      }
    }
    if (v23 == 76)
    {
      {
        v14 = *((_QWORD *)v9 + 1);
        v3 = *(_QWORD *)(a1 + 216);
        if (v3 <= v14)
          goto LABEL_64;
        v24 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 904 * v14 + 896);
LABEL_41:
        re::DynamicArray<unsigned long>::add(a3, v24);
      }
    }
    else
    {
      if (v23 != 77)
      {
        v30 = &(&re::kEvaluationCommandDescriptions)[2 * v10];
        v31 = *((unsigned __int8 *)v30 + 9);
        if (*((_BYTE *)v30 + 9))
        {
          v32 = (unint64_t *)(v9 + 2);
          v33 = (unsigned __int8 *)v30 + 10;
          while (2)
          {
            v35 = *v33++;
            v34 = v35;
            switch(v35)
            {
              case 0u:
                goto LABEL_53;
              case 1u:
                goto LABEL_53;
              case 2u:
                goto LABEL_53;
              case 3u:
                goto LABEL_53;
              case 4u:
                goto LABEL_53;
              case 5u:
                goto LABEL_53;
              case 6u:
                goto LABEL_53;
              case 7u:
LABEL_53:
                *(_QWORD *)&v47 = MappedRegister;
                re::DynamicArray<unsigned long>::add(a3, &v47);
                ++v32;
                if (!--v31)
                  break;
                continue;
              default:
                goto LABEL_66;
            }
            break;
          }
        }
        re::DynamicArray<unsigned long>::add(a3, &v47);
      }
      {
        v14 = *((_QWORD *)v9 + 1);
        v3 = *(_QWORD *)(a1 + 240);
        if (v3 <= v14)
        {
LABEL_63:
          v46 = 0;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v61[0]) = 136315906;
          *(_QWORD *)((char *)v61 + 4) = "operator[]";
          WORD2(v61[1]) = 1024;
          *(_DWORD *)((char *)&v61[1] + 6) = 468;
          WORD1(v61[2]) = 2048;
          *(_QWORD *)((char *)&v61[2] + 4) = v14;
          WORD2(v61[3]) = 2048;
          *(_QWORD *)((char *)&v61[3] + 6) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_64:
          v46 = 0;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v61[0]) = 136315906;
          *(_QWORD *)((char *)v61 + 4) = "operator[]";
          WORD2(v61[1]) = 1024;
          *(_DWORD *)((char *)&v61[1] + 6) = 468;
          WORD1(v61[2]) = 2048;
          *(_QWORD *)((char *)&v61[2] + 4) = v14;
          WORD2(v61[3]) = 2048;
          *(_QWORD *)((char *)&v61[3] + 6) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v24 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 248 * v14 + 240);
        goto LABEL_41;
      }
    }
  }
  v45 = 0;
  v11 = *(_QWORD **)(a1 + 8);
  v12 = a2;
  v13 = a2 - 0x7FFFFFFFFFFFFFFFLL;
  if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 0)
  {
    v14 = v11[88];
    while (v14 > v13)
    {
      v12 = *(_QWORD *)(v11[90] + 8 * v13);
      v13 = v12 - 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)(v12 - 0x7FFFFFFFFFFFFFFFLL) < 0)
        goto LABEL_7;
    }
    v46 = 0;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v61[0]) = 136315906;
    *(_QWORD *)((char *)v61 + 4) = "operator[]";
    WORD2(v61[1]) = 1024;
    *(_DWORD *)((char *)&v61[1] + 6) = 797;
    WORD1(v61[2]) = 2048;
    *(_QWORD *)((char *)&v61[2] + 4) = v13;
    WORD2(v61[3]) = 2048;
    *(_QWORD *)((char *)&v61[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_62;
  }
LABEL_7:
  v15 = v11[8];
  if (v15)
  {
    v16 = (_QWORD *)v11[10];
    v17 = &v16[v15];
    v18 = v16;
    do
    {
      v19 = v15 >> 1;
      v20 = &v18[v15 >> 1];
      v22 = *v20;
      v21 = v20 + 1;
      v15 += ~(v15 >> 1);
      if (v22 < v12)
        v18 = v21;
      else
        v15 = v19;
    }
    while (v15);
    if (v18 != v17 && *v18 == v12)
    {
      v13 = v18 - v16;
      v14 = v11[48];
      if (v14 <= v13)
      {
LABEL_62:
        v46 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v61[0]) = 136315906;
        *(_QWORD *)((char *)v61 + 4) = "operator[]";
        WORD2(v61[1]) = 1024;
        *(_DWORD *)((char *)&v61[1] + 6) = 797;
        WORD1(v61[2]) = 2048;
        *(_QWORD *)((char *)&v61[2] + 4) = v13;
        WORD2(v61[3]) = 2048;
        *(_QWORD *)((char *)&v61[3] + 6) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_63;
      }
      v45 = *(_DWORD *)(v11[50] + 4 * v13);
    }
  }
}

_QWORD *re::`anonymous namespace'::RegisterMapping::processRegister<float>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *result;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t RegisterMap;
  char **v30;
  uint64_t v31;
  unint64_t *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t MappedRegister;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[8];

  v61[5] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)result + 40) == 2)
    return result;
  v9 = (int *)result;
  v10 = *(unsigned int *)result;
  if ((int)v10 > 7)
  {
    v23 = *(_DWORD *)result;
    if ((*(_BYTE *)(a1 + 3824) & 1) != 0)
    {
      memset(v61, 0, 32);
      v25 = &(&re::kEvaluationCommandDescriptions)[2 * v10];
      v26 = *((unsigned __int8 *)v25 + 9);
      if (!*((_BYTE *)v25 + 9))
      {
LABEL_59:
        LODWORD(v46) = 0;
        v61[v26] = *((_QWORD *)v9 + 6);
        v37 = *(_QWORD *)(a1 + 3848);
        *(_QWORD *)&v47 = *(_QWORD *)(a1 + 3864);
        *((_QWORD *)&v47 + 1) = v37;
        v38 = *(_QWORD *)(a1 + 3888);
        *(_QWORD *)&v48 = *(_QWORD *)(a1 + 3904);
        *((_QWORD *)&v48 + 1) = v38;
        v39 = *(_QWORD *)(a1 + 3928);
        *(_QWORD *)&v49 = *(_QWORD *)(a1 + 3944);
        *((_QWORD *)&v49 + 1) = v39;
        v40 = *(_QWORD *)(a1 + 3968);
        *(_QWORD *)&v50 = *(_QWORD *)(a1 + 3984);
        *((_QWORD *)&v50 + 1) = v40;
        v41 = *(_QWORD *)(a1 + 4008);
        *(_QWORD *)&v51 = *(_QWORD *)(a1 + 4024);
        *((_QWORD *)&v51 + 1) = v41;
        v42 = *(_QWORD *)(a1 + 4048);
        v52 = *(_QWORD *)(a1 + 4064);
        v53 = v42;
        v43 = *(_QWORD *)(a1 + 4088);
        v54 = *(_QWORD *)(a1 + 4104);
        v55 = v43;
        v44 = *(_QWORD *)(a1 + 4128);
        v56 = *(_QWORD *)(a1 + 4144);
        v57 = v44;
        v58 = 0;
        v59 = 0;
        v60 = 0;
      }
      v27 = 0;
      v28 = (char *)v25 + 10;
      while (2)
      {
        switch(v28[v27])
        {
          case 0:
            goto LABEL_35;
          case 1:
            goto LABEL_35;
          case 2:
            goto LABEL_35;
          case 3:
            goto LABEL_35;
          case 4:
            goto LABEL_35;
          case 5:
            goto LABEL_35;
          case 6:
            goto LABEL_35;
          case 7:
LABEL_35:
            if (*(_BYTE *)(RegisterMap + 40) != 3)
              goto LABEL_57;
            v61[v27++] = *(_QWORD *)(RegisterMap + 48);
            if (v26 == v27)
              goto LABEL_59;
            continue;
          default:
            if (v28[v27] - 253 >= 2)
            {
              re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1778, v28[v27]);
              _os_crash();
              __break(1u);
LABEL_66:
              re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1823, v34);
              _os_crash();
              __break(1u);
              JUMPOUT(0x225142D5CLL);
            }
LABEL_57:
            if (v26 == v27)
              goto LABEL_59;
            v23 = *v9;
            break;
        }
        break;
      }
    }
    if (v23 == 76)
    {
      {
        v14 = *((_QWORD *)v9 + 1);
        v3 = *(_QWORD *)(a1 + 216);
        if (v3 <= v14)
          goto LABEL_64;
        v24 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 904 * v14 + 896);
LABEL_41:
        re::DynamicArray<unsigned long>::add(a3, v24);
      }
    }
    else
    {
      if (v23 != 77)
      {
        v30 = &(&re::kEvaluationCommandDescriptions)[2 * v10];
        v31 = *((unsigned __int8 *)v30 + 9);
        if (*((_BYTE *)v30 + 9))
        {
          v32 = (unint64_t *)(v9 + 2);
          v33 = (unsigned __int8 *)v30 + 10;
          while (2)
          {
            v35 = *v33++;
            v34 = v35;
            switch(v35)
            {
              case 0u:
                goto LABEL_53;
              case 1u:
                goto LABEL_53;
              case 2u:
                goto LABEL_53;
              case 3u:
                goto LABEL_53;
              case 4u:
                goto LABEL_53;
              case 5u:
                goto LABEL_53;
              case 6u:
                goto LABEL_53;
              case 7u:
LABEL_53:
                *(_QWORD *)&v47 = MappedRegister;
                re::DynamicArray<unsigned long>::add(a3, &v47);
                ++v32;
                if (!--v31)
                  break;
                continue;
              default:
                goto LABEL_66;
            }
            break;
          }
        }
        re::DynamicArray<unsigned long>::add(a3, &v47);
      }
      {
        v14 = *((_QWORD *)v9 + 1);
        v3 = *(_QWORD *)(a1 + 240);
        if (v3 <= v14)
        {
LABEL_63:
          v46 = 0;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v61[0]) = 136315906;
          *(_QWORD *)((char *)v61 + 4) = "operator[]";
          WORD2(v61[1]) = 1024;
          *(_DWORD *)((char *)&v61[1] + 6) = 468;
          WORD1(v61[2]) = 2048;
          *(_QWORD *)((char *)&v61[2] + 4) = v14;
          WORD2(v61[3]) = 2048;
          *(_QWORD *)((char *)&v61[3] + 6) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_64:
          v46 = 0;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v61[0]) = 136315906;
          *(_QWORD *)((char *)v61 + 4) = "operator[]";
          WORD2(v61[1]) = 1024;
          *(_DWORD *)((char *)&v61[1] + 6) = 468;
          WORD1(v61[2]) = 2048;
          *(_QWORD *)((char *)&v61[2] + 4) = v14;
          WORD2(v61[3]) = 2048;
          *(_QWORD *)((char *)&v61[3] + 6) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v24 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 248 * v14 + 240);
        goto LABEL_41;
      }
    }
  }
  v45 = 0;
  v11 = *(_QWORD **)(a1 + 8);
  v12 = a2;
  v13 = a2 - 0x7FFFFFFFFFFFFFFFLL;
  if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 0)
  {
    v14 = v11[93];
    while (v14 > v13)
    {
      v12 = *(_QWORD *)(v11[95] + 8 * v13);
      v13 = v12 - 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)(v12 - 0x7FFFFFFFFFFFFFFFLL) < 0)
        goto LABEL_7;
    }
    v46 = 0;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v61[0]) = 136315906;
    *(_QWORD *)((char *)v61 + 4) = "operator[]";
    WORD2(v61[1]) = 1024;
    *(_DWORD *)((char *)&v61[1] + 6) = 797;
    WORD1(v61[2]) = 2048;
    *(_QWORD *)((char *)&v61[2] + 4) = v13;
    WORD2(v61[3]) = 2048;
    *(_QWORD *)((char *)&v61[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_62;
  }
LABEL_7:
  v15 = v11[13];
  if (v15)
  {
    v16 = (_QWORD *)v11[15];
    v17 = &v16[v15];
    v18 = v16;
    do
    {
      v19 = v15 >> 1;
      v20 = &v18[v15 >> 1];
      v22 = *v20;
      v21 = v20 + 1;
      v15 += ~(v15 >> 1);
      if (v22 < v12)
        v18 = v21;
      else
        v15 = v19;
    }
    while (v15);
    if (v18 != v17 && *v18 == v12)
    {
      v13 = v18 - v16;
      v14 = v11[53];
      if (v14 <= v13)
      {
LABEL_62:
        v46 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v61[0]) = 136315906;
        *(_QWORD *)((char *)v61 + 4) = "operator[]";
        WORD2(v61[1]) = 1024;
        *(_DWORD *)((char *)&v61[1] + 6) = 797;
        WORD1(v61[2]) = 2048;
        *(_QWORD *)((char *)&v61[2] + 4) = v13;
        WORD2(v61[3]) = 2048;
        *(_QWORD *)((char *)&v61[3] + 6) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_63;
      }
      v45 = *(_DWORD *)(v11[55] + 4 * v13);
    }
  }
}

_QWORD *re::`anonymous namespace'::RegisterMapping::processRegister<re::Matrix3x3<float>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *result;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  int v26;
  _QWORD *v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t RegisterMap;
  char **v33;
  uint64_t v34;
  unint64_t *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t MappedRegister;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[3];
  _QWORD v63[8];

  v63[5] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)result + 40) == 2)
    return result;
  v9 = (int *)result;
  v10 = *(unsigned int *)result;
  if ((int)v10 > 7)
  {
    v26 = *(_DWORD *)result;
    if ((*(_BYTE *)(a1 + 3824) & 1) != 0)
    {
      memset(v63, 0, 32);
      v28 = &(&re::kEvaluationCommandDescriptions)[2 * v10];
      v29 = *((unsigned __int8 *)v28 + 9);
      if (!*((_BYTE *)v28 + 9))
      {
LABEL_59:
        memset(v62, 0, sizeof(v62));
        v63[v29] = *((_QWORD *)v9 + 6);
        v40 = *(_QWORD *)(a1 + 3848);
        *(_QWORD *)&v48 = *(_QWORD *)(a1 + 3864);
        *((_QWORD *)&v48 + 1) = v40;
        v41 = *(_QWORD *)(a1 + 3888);
        *(_QWORD *)&v49 = *(_QWORD *)(a1 + 3904);
        *((_QWORD *)&v49 + 1) = v41;
        v42 = *(_QWORD *)(a1 + 3928);
        *(_QWORD *)&v50 = *(_QWORD *)(a1 + 3944);
        *((_QWORD *)&v50 + 1) = v42;
        v43 = *(_QWORD *)(a1 + 3968);
        *(_QWORD *)&v51 = *(_QWORD *)(a1 + 3984);
        *((_QWORD *)&v51 + 1) = v43;
        v44 = *(_QWORD *)(a1 + 4008);
        *(_QWORD *)&v52 = *(_QWORD *)(a1 + 4024);
        *((_QWORD *)&v52 + 1) = v44;
        v45 = *(_QWORD *)(a1 + 4048);
        v53 = *(_QWORD *)(a1 + 4064);
        v54 = v45;
        v46 = *(_QWORD *)(a1 + 4088);
        v55 = *(_QWORD *)(a1 + 4104);
        v56 = v46;
        v47 = *(_QWORD *)(a1 + 4128);
        v57 = *(_QWORD *)(a1 + 4144);
        v58 = v47;
        v60 = 0;
        v61 = 0;
        v59 = 0;
      }
      v30 = 0;
      v31 = (char *)v28 + 10;
      while (2)
      {
        switch(v31[v30])
        {
          case 0:
            goto LABEL_35;
          case 1:
            goto LABEL_35;
          case 2:
            goto LABEL_35;
          case 3:
            goto LABEL_35;
          case 4:
            goto LABEL_35;
          case 5:
            goto LABEL_35;
          case 6:
            goto LABEL_35;
          case 7:
LABEL_35:
            if (*(_BYTE *)(RegisterMap + 40) != 3)
              goto LABEL_57;
            v63[v30++] = *(_QWORD *)(RegisterMap + 48);
            if (v29 == v30)
              goto LABEL_59;
            continue;
          default:
            if (v31[v30] - 253 >= 2)
            {
              re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1778, v31[v30]);
              _os_crash();
              __break(1u);
LABEL_66:
              re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1823, v37);
              _os_crash();
              __break(1u);
              JUMPOUT(0x2251435E4);
            }
LABEL_57:
            if (v29 == v30)
              goto LABEL_59;
            v26 = *v9;
            break;
        }
        break;
      }
    }
    if (v26 == 76)
    {
      {
        v14 = *((_QWORD *)v9 + 1);
        v3 = *(_QWORD *)(a1 + 216);
        if (v3 <= v14)
          goto LABEL_64;
        v27 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 904 * v14 + 896);
LABEL_41:
        re::DynamicArray<unsigned long>::add(a3, v27);
      }
    }
    else
    {
      if (v26 != 77)
      {
        v33 = &(&re::kEvaluationCommandDescriptions)[2 * v10];
        v34 = *((unsigned __int8 *)v33 + 9);
        if (*((_BYTE *)v33 + 9))
        {
          v35 = (unint64_t *)(v9 + 2);
          v36 = (unsigned __int8 *)v33 + 10;
          while (2)
          {
            v38 = *v36++;
            v37 = v38;
            switch(v38)
            {
              case 0u:
                goto LABEL_53;
              case 1u:
                goto LABEL_53;
              case 2u:
                goto LABEL_53;
              case 3u:
                goto LABEL_53;
              case 4u:
                goto LABEL_53;
              case 5u:
                goto LABEL_53;
              case 6u:
                goto LABEL_53;
              case 7u:
LABEL_53:
                *(_QWORD *)&v48 = MappedRegister;
                re::DynamicArray<unsigned long>::add(a3, &v48);
                ++v35;
                if (!--v34)
                  break;
                continue;
              default:
                goto LABEL_66;
            }
            break;
          }
        }
        re::DynamicArray<unsigned long>::add(a3, &v48);
      }
      {
        v14 = *((_QWORD *)v9 + 1);
        v3 = *(_QWORD *)(a1 + 240);
        if (v3 <= v14)
        {
LABEL_63:
          v63[0] = 0;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v48 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v62[0]) = 136315906;
          *(_QWORD *)((char *)v62 + 4) = "operator[]";
          WORD6(v62[0]) = 1024;
          *(_DWORD *)((char *)v62 + 14) = 468;
          WORD1(v62[1]) = 2048;
          *(_QWORD *)((char *)&v62[1] + 4) = v14;
          WORD6(v62[1]) = 2048;
          *(_QWORD *)((char *)&v62[1] + 14) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_64:
          v63[0] = 0;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v48 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v62[0]) = 136315906;
          *(_QWORD *)((char *)v62 + 4) = "operator[]";
          WORD6(v62[0]) = 1024;
          *(_DWORD *)((char *)v62 + 14) = 468;
          WORD1(v62[1]) = 2048;
          *(_QWORD *)((char *)&v62[1] + 4) = v14;
          WORD6(v62[1]) = 2048;
          *(_QWORD *)((char *)&v62[1] + 14) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v27 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 248 * v14 + 240);
        goto LABEL_41;
      }
    }
  }
  memset(v62, 0, sizeof(v62));
  v11 = *(_QWORD **)(a1 + 8);
  v12 = a2;
  v13 = a2 - 0x7FFFFFFFFFFFFFFFLL;
  if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 0)
  {
    v14 = v11[98];
    while (v14 > v13)
    {
      v12 = *(_QWORD *)(v11[100] + 8 * v13);
      v13 = v12 - 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)(v12 - 0x7FFFFFFFFFFFFFFFLL) < 0)
        goto LABEL_7;
    }
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v63[0]) = 136315906;
    *(_QWORD *)((char *)v63 + 4) = "operator[]";
    WORD2(v63[1]) = 1024;
    *(_DWORD *)((char *)&v63[1] + 6) = 797;
    WORD1(v63[2]) = 2048;
    *(_QWORD *)((char *)&v63[2] + 4) = v13;
    WORD2(v63[3]) = 2048;
    *(_QWORD *)((char *)&v63[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_62;
  }
LABEL_7:
  v15 = v11[18];
  if (v15)
  {
    v16 = (_QWORD *)v11[20];
    v17 = &v16[v15];
    v18 = v16;
    do
    {
      v19 = v15 >> 1;
      v20 = &v18[v15 >> 1];
      v22 = *v20;
      v21 = v20 + 1;
      v15 += ~(v15 >> 1);
      if (v22 < v12)
        v18 = v21;
      else
        v15 = v19;
    }
    while (v15);
    if (v18 != v17 && *v18 == v12)
    {
      v13 = v18 - v16;
      v14 = v11[58];
      if (v14 <= v13)
      {
LABEL_62:
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v63[0]) = 136315906;
        *(_QWORD *)((char *)v63 + 4) = "operator[]";
        WORD2(v63[1]) = 1024;
        *(_DWORD *)((char *)&v63[1] + 6) = 797;
        WORD1(v63[2]) = 2048;
        *(_QWORD *)((char *)&v63[2] + 4) = v13;
        WORD2(v63[3]) = 2048;
        *(_QWORD *)((char *)&v63[3] + 6) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_63;
      }
      v23 = (_OWORD *)(v11[60] + 48 * v13);
      v25 = v23[1];
      v24 = v23[2];
      v62[0] = *v23;
      v62[1] = v25;
      v62[2] = v24;
    }
  }
}

int *re::`anonymous namespace'::RegisterMapping::processRegister<re::Matrix4x4<float>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  int *result;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t RegisterMap;
  char **v19;
  uint64_t v20;
  unint64_t *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t MappedRegister;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[4];
  _OWORD v49[2];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)result + 40) != 2)
  {
    v8 = result;
    v9 = *result;
    if ((int)v9 <= 7)
    {
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      re::EvaluationTree::getInputValue<re::Matrix4x4<float>>(*(_QWORD **)(a1 + 8), a2, &v34);
    }
    v10 = *result;
    if ((*(_BYTE *)(a1 + 3824) & 1) == 0)
    {
LABEL_5:
      if (v10 == 76)
      {
        {
          v11 = *((_QWORD *)v8 + 1);
          v12 = *(_QWORD *)(a1 + 216);
          if (v12 > v11)
          {
            v13 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 904 * v11 + 896);
            goto LABEL_27;
          }
LABEL_48:
          *(_QWORD *)&v49[0] = 0;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v34 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v48[0]) = 136315906;
          *(_QWORD *)((char *)v48 + 4) = "operator[]";
          WORD6(v48[0]) = 1024;
          *(_DWORD *)((char *)v48 + 14) = 468;
          WORD1(v48[1]) = 2048;
          *(_QWORD *)((char *)&v48[1] + 4) = v11;
          WORD6(v48[1]) = 2048;
          *(_QWORD *)((char *)&v48[1] + 14) = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
      else
      {
        if (v10 != 77)
        {
          v19 = &(&re::kEvaluationCommandDescriptions)[2 * v9];
          v20 = *((unsigned __int8 *)v19 + 9);
          if (*((_BYTE *)v19 + 9))
          {
            v21 = (unint64_t *)(v8 + 2);
            v22 = (unsigned __int8 *)v19 + 10;
            while (2)
            {
              v24 = *v22++;
              v23 = v24;
              switch(v24)
              {
                case 0u:
                  goto LABEL_39;
                case 1u:
                  goto LABEL_39;
                case 2u:
                  goto LABEL_39;
                case 3u:
                  goto LABEL_39;
                case 4u:
                  goto LABEL_39;
                case 5u:
                  goto LABEL_39;
                case 6u:
                  goto LABEL_39;
                case 7u:
LABEL_39:
                  *(_QWORD *)&v34 = MappedRegister;
                  re::DynamicArray<unsigned long>::add(a3, &v34);
                  ++v21;
                  if (!--v20)
                    break;
                  continue;
                default:
                  goto LABEL_50;
              }
              break;
            }
          }
          re::DynamicArray<unsigned long>::add(a3, &v34);
        }
        {
          v11 = *((_QWORD *)v8 + 1);
          v12 = *(_QWORD *)(a1 + 240);
          if (v12 > v11)
          {
            v13 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 248 * v11 + 240);
LABEL_27:
            re::DynamicArray<unsigned long>::add(a3, v13);
          }
          *(_QWORD *)&v49[0] = 0;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v34 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v48[0]) = 136315906;
          *(_QWORD *)((char *)v48 + 4) = "operator[]";
          WORD6(v48[0]) = 1024;
          *(_DWORD *)((char *)v48 + 14) = 468;
          WORD1(v48[1]) = 2048;
          *(_QWORD *)((char *)&v48[1] + 4) = v11;
          WORD6(v48[1]) = 2048;
          *(_QWORD *)((char *)&v48[1] + 14) = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_48;
        }
      }
    }
    memset(v49, 0, sizeof(v49));
    v14 = &(&re::kEvaluationCommandDescriptions)[2 * v9];
    v15 = *((unsigned __int8 *)v14 + 9);
    if (*((_BYTE *)v14 + 9))
    {
      v16 = 0;
      v17 = (char *)v14 + 10;
      while (2)
      {
        switch(v17[v16])
        {
          case 0:
            goto LABEL_21;
          case 1:
            goto LABEL_21;
          case 2:
            goto LABEL_21;
          case 3:
            goto LABEL_21;
          case 4:
            goto LABEL_21;
          case 5:
            goto LABEL_21;
          case 6:
            goto LABEL_21;
          case 7:
LABEL_21:
            if (*(_BYTE *)(RegisterMap + 40) != 3)
              goto LABEL_43;
            *((_QWORD *)v49 + v16++) = *(_QWORD *)(RegisterMap + 48);
            if (v15 == v16)
              goto LABEL_44;
            continue;
          default:
            if (v17[v16] - 253 >= 2)
            {
              re::internal::assertLog((re::internal *)5, v7, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1778, v17[v16]);
              _os_crash();
              __break(1u);
LABEL_50:
              re::internal::assertLog((re::internal *)5, v7, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1823, v23);
              _os_crash();
              __break(1u);
              JUMPOUT(0x225143C54);
            }
LABEL_43:
            if (v15 == v16)
              goto LABEL_44;
            v10 = *v8;
            break;
        }
        goto LABEL_5;
      }
    }
LABEL_44:
    memset(v48, 0, sizeof(v48));
    *((_QWORD *)v49 + v15) = *((_QWORD *)v8 + 6);
    v26 = *(_QWORD *)(a1 + 3848);
    *(_QWORD *)&v34 = *(_QWORD *)(a1 + 3864);
    *((_QWORD *)&v34 + 1) = v26;
    v27 = *(_QWORD *)(a1 + 3888);
    *(_QWORD *)&v35 = *(_QWORD *)(a1 + 3904);
    *((_QWORD *)&v35 + 1) = v27;
    v28 = *(_QWORD *)(a1 + 3928);
    *(_QWORD *)&v36 = *(_QWORD *)(a1 + 3944);
    *((_QWORD *)&v36 + 1) = v28;
    v29 = *(_QWORD *)(a1 + 3968);
    *(_QWORD *)&v37 = *(_QWORD *)(a1 + 3984);
    *((_QWORD *)&v37 + 1) = v29;
    v30 = *(_QWORD *)(a1 + 4008);
    *(_QWORD *)&v38 = *(_QWORD *)(a1 + 4024);
    *((_QWORD *)&v38 + 1) = v30;
    v31 = *(_QWORD *)(a1 + 4048);
    v39 = *(_QWORD *)(a1 + 4064);
    v40 = v31;
    v32 = *(_QWORD *)(a1 + 4088);
    v41 = *(_QWORD *)(a1 + 4104);
    v42 = v32;
    v33 = *(_QWORD *)(a1 + 4128);
    v43 = *(_QWORD *)(a1 + 4144);
    v44 = v33;
    v46 = 0;
    v47 = 0;
    v45 = 0;
  }
  return result;
}

int *re::`anonymous namespace'::RegisterMapping::processRegister<re::Quaternion<float>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  int *result;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t RegisterMap;
  char **v19;
  uint64_t v20;
  unint64_t *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t MappedRegister;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[8];

  v49[5] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)result + 40) != 2)
  {
    v8 = result;
    v9 = *result;
    if ((int)v9 <= 7)
    {
      v35 = xmmword_2260E5D70;
      re::EvaluationTree::getInputValue<re::Quaternion<float>>(*(_QWORD **)(a1 + 8), a2, &v35);
    }
    v10 = *result;
    if ((*(_BYTE *)(a1 + 3824) & 1) == 0)
    {
LABEL_5:
      if (v10 == 76)
      {
        {
          v11 = *((_QWORD *)v8 + 1);
          v12 = *(_QWORD *)(a1 + 216);
          if (v12 > v11)
          {
            v13 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 904 * v11 + 896);
            goto LABEL_27;
          }
LABEL_48:
          *(_QWORD *)&v34 = 0;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v35 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v49[0]) = 136315906;
          *(_QWORD *)((char *)v49 + 4) = "operator[]";
          WORD2(v49[1]) = 1024;
          *(_DWORD *)((char *)&v49[1] + 6) = 468;
          WORD1(v49[2]) = 2048;
          *(_QWORD *)((char *)&v49[2] + 4) = v11;
          WORD2(v49[3]) = 2048;
          *(_QWORD *)((char *)&v49[3] + 6) = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
      else
      {
        if (v10 != 77)
        {
          v19 = &(&re::kEvaluationCommandDescriptions)[2 * v9];
          v20 = *((unsigned __int8 *)v19 + 9);
          if (*((_BYTE *)v19 + 9))
          {
            v21 = (unint64_t *)(v8 + 2);
            v22 = (unsigned __int8 *)v19 + 10;
            while (2)
            {
              v24 = *v22++;
              v23 = v24;
              switch(v24)
              {
                case 0u:
                  goto LABEL_39;
                case 1u:
                  goto LABEL_39;
                case 2u:
                  goto LABEL_39;
                case 3u:
                  goto LABEL_39;
                case 4u:
                  goto LABEL_39;
                case 5u:
                  goto LABEL_39;
                case 6u:
                  goto LABEL_39;
                case 7u:
LABEL_39:
                  *(_QWORD *)&v35 = MappedRegister;
                  re::DynamicArray<unsigned long>::add(a3, &v35);
                  ++v21;
                  if (!--v20)
                    break;
                  continue;
                default:
                  goto LABEL_50;
              }
              break;
            }
          }
          re::DynamicArray<unsigned long>::add(a3, &v35);
        }
        {
          v11 = *((_QWORD *)v8 + 1);
          v12 = *(_QWORD *)(a1 + 240);
          if (v12 > v11)
          {
            v13 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 248 * v11 + 240);
LABEL_27:
            re::DynamicArray<unsigned long>::add(a3, v13);
          }
          *(_QWORD *)&v34 = 0;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v35 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v49[0]) = 136315906;
          *(_QWORD *)((char *)v49 + 4) = "operator[]";
          WORD2(v49[1]) = 1024;
          *(_DWORD *)((char *)&v49[1] + 6) = 468;
          WORD1(v49[2]) = 2048;
          *(_QWORD *)((char *)&v49[2] + 4) = v11;
          WORD2(v49[3]) = 2048;
          *(_QWORD *)((char *)&v49[3] + 6) = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_48;
        }
      }
    }
    memset(v49, 0, 32);
    v14 = &(&re::kEvaluationCommandDescriptions)[2 * v9];
    v15 = *((unsigned __int8 *)v14 + 9);
    if (*((_BYTE *)v14 + 9))
    {
      v16 = 0;
      v17 = (char *)v14 + 10;
      while (2)
      {
        switch(v17[v16])
        {
          case 0:
            goto LABEL_21;
          case 1:
            goto LABEL_21;
          case 2:
            goto LABEL_21;
          case 3:
            goto LABEL_21;
          case 4:
            goto LABEL_21;
          case 5:
            goto LABEL_21;
          case 6:
            goto LABEL_21;
          case 7:
LABEL_21:
            if (*(_BYTE *)(RegisterMap + 40) != 3)
              goto LABEL_43;
            v49[v16++] = *(_QWORD *)(RegisterMap + 48);
            if (v15 == v16)
              goto LABEL_44;
            continue;
          default:
            if (v17[v16] - 253 >= 2)
            {
              re::internal::assertLog((re::internal *)5, v7, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1778, v17[v16]);
              _os_crash();
              __break(1u);
LABEL_50:
              re::internal::assertLog((re::internal *)5, v7, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1823, v23);
              _os_crash();
              __break(1u);
              JUMPOUT(0x2251442C4);
            }
LABEL_43:
            if (v15 == v16)
              goto LABEL_44;
            v10 = *v8;
            break;
        }
        goto LABEL_5;
      }
    }
LABEL_44:
    v34 = xmmword_2260E5D70;
    v49[v15] = *((_QWORD *)v8 + 6);
    v26 = *(_QWORD *)(a1 + 3848);
    *(_QWORD *)&v35 = *(_QWORD *)(a1 + 3864);
    *((_QWORD *)&v35 + 1) = v26;
    v27 = *(_QWORD *)(a1 + 3888);
    *(_QWORD *)&v36 = *(_QWORD *)(a1 + 3904);
    *((_QWORD *)&v36 + 1) = v27;
    v28 = *(_QWORD *)(a1 + 3928);
    *(_QWORD *)&v37 = *(_QWORD *)(a1 + 3944);
    *((_QWORD *)&v37 + 1) = v28;
    v29 = *(_QWORD *)(a1 + 3968);
    *(_QWORD *)&v38 = *(_QWORD *)(a1 + 3984);
    *((_QWORD *)&v38 + 1) = v29;
    v30 = *(_QWORD *)(a1 + 4008);
    *(_QWORD *)&v39 = *(_QWORD *)(a1 + 4024);
    *((_QWORD *)&v39 + 1) = v30;
    v31 = *(_QWORD *)(a1 + 4048);
    v40 = *(_QWORD *)(a1 + 4064);
    v41 = v31;
    v32 = *(_QWORD *)(a1 + 4088);
    v42 = *(_QWORD *)(a1 + 4104);
    v43 = v32;
    v33 = *(_QWORD *)(a1 + 4128);
    v44 = *(_QWORD *)(a1 + 4144);
    v45 = v33;
    v47 = 0;
    v48 = 0;
    v46 = 0;
  }
  return result;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::processRegister<re::Vector2<float>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *result;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;
  char **v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t RegisterMap;
  char **v30;
  uint64_t v31;
  unint64_t *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t MappedRegister;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[8];

  v61[5] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)result + 40) == 2)
    return result;
  v9 = (int *)result;
  v10 = *(unsigned int *)result;
  if ((int)v10 > 7)
  {
    v23 = *(_DWORD *)result;
    if ((*(_BYTE *)(a1 + 3824) & 1) != 0)
    {
      memset(v61, 0, 32);
      v25 = &(&re::kEvaluationCommandDescriptions)[2 * v10];
      v26 = *((unsigned __int8 *)v25 + 9);
      if (!*((_BYTE *)v25 + 9))
      {
LABEL_58:
        v46 = 0;
        v61[v26] = *((_QWORD *)v9 + 6);
        v37 = *(_QWORD *)(a1 + 3848);
        *(_QWORD *)&v47 = *(_QWORD *)(a1 + 3864);
        *((_QWORD *)&v47 + 1) = v37;
        v38 = *(_QWORD *)(a1 + 3888);
        *(_QWORD *)&v48 = *(_QWORD *)(a1 + 3904);
        *((_QWORD *)&v48 + 1) = v38;
        v39 = *(_QWORD *)(a1 + 3928);
        *(_QWORD *)&v49 = *(_QWORD *)(a1 + 3944);
        *((_QWORD *)&v49 + 1) = v39;
        v40 = *(_QWORD *)(a1 + 3968);
        *(_QWORD *)&v50 = *(_QWORD *)(a1 + 3984);
        *((_QWORD *)&v50 + 1) = v40;
        v41 = *(_QWORD *)(a1 + 4008);
        *(_QWORD *)&v51 = *(_QWORD *)(a1 + 4024);
        *((_QWORD *)&v51 + 1) = v41;
        v42 = *(_QWORD *)(a1 + 4048);
        v52 = *(_QWORD *)(a1 + 4064);
        v53 = v42;
        v43 = *(_QWORD *)(a1 + 4088);
        v54 = *(_QWORD *)(a1 + 4104);
        v55 = v43;
        v44 = *(_QWORD *)(a1 + 4128);
        v56 = *(_QWORD *)(a1 + 4144);
        v57 = v44;
        v59 = 0;
        v60 = 0;
        v58 = 0;
      }
      v27 = 0;
      v28 = (char *)v25 + 10;
      while (2)
      {
        switch(v28[v27])
        {
          case 0:
            goto LABEL_35;
          case 1:
            goto LABEL_35;
          case 2:
            goto LABEL_35;
          case 3:
            goto LABEL_35;
          case 4:
            goto LABEL_35;
          case 5:
            goto LABEL_35;
          case 6:
            goto LABEL_35;
          case 7:
LABEL_35:
            if (*(_BYTE *)(RegisterMap + 40) != 3)
              goto LABEL_57;
            v61[v27++] = *(_QWORD *)(RegisterMap + 48);
            if (v26 == v27)
              goto LABEL_58;
            continue;
          default:
            if (v28[v27] - 253 >= 2)
            {
              re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1778, v28[v27]);
              _os_crash();
              __break(1u);
LABEL_66:
              re::internal::assertLog((re::internal *)5, v8, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1823, v34);
              _os_crash();
              __break(1u);
              JUMPOUT(0x225144B28);
            }
LABEL_57:
            if (v26 == v27)
              goto LABEL_58;
            v23 = *v9;
            break;
        }
        break;
      }
    }
    if (v23 == 76)
    {
      {
        v14 = *((_QWORD *)v9 + 1);
        v3 = *(_QWORD *)(a1 + 216);
        if (v3 <= v14)
          goto LABEL_64;
        v24 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 904 * v14 + 896);
LABEL_41:
        re::DynamicArray<unsigned long>::add(a3, v24);
      }
    }
    else
    {
      if (v23 != 77)
      {
        v30 = &(&re::kEvaluationCommandDescriptions)[2 * v10];
        v31 = *((unsigned __int8 *)v30 + 9);
        if (*((_BYTE *)v30 + 9))
        {
          v32 = (unint64_t *)(v9 + 2);
          v33 = (unsigned __int8 *)v30 + 10;
          while (2)
          {
            v35 = *v33++;
            v34 = v35;
            switch(v35)
            {
              case 0u:
                goto LABEL_53;
              case 1u:
                goto LABEL_53;
              case 2u:
                goto LABEL_53;
              case 3u:
                goto LABEL_53;
              case 4u:
                goto LABEL_53;
              case 5u:
                goto LABEL_53;
              case 6u:
                goto LABEL_53;
              case 7u:
LABEL_53:
                *(_QWORD *)&v47 = MappedRegister;
                re::DynamicArray<unsigned long>::add(a3, &v47);
                ++v32;
                if (!--v31)
                  break;
                continue;
              default:
                goto LABEL_66;
            }
            break;
          }
        }
        re::DynamicArray<unsigned long>::add(a3, &v47);
      }
      {
        v14 = *((_QWORD *)v9 + 1);
        v3 = *(_QWORD *)(a1 + 240);
        if (v3 <= v14)
        {
LABEL_63:
          v46 = 0;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v61[0]) = 136315906;
          *(_QWORD *)((char *)v61 + 4) = "operator[]";
          WORD2(v61[1]) = 1024;
          *(_DWORD *)((char *)&v61[1] + 6) = 468;
          WORD1(v61[2]) = 2048;
          *(_QWORD *)((char *)&v61[2] + 4) = v14;
          WORD2(v61[3]) = 2048;
          *(_QWORD *)((char *)&v61[3] + 6) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_64:
          v46 = 0;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v47 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v61[0]) = 136315906;
          *(_QWORD *)((char *)v61 + 4) = "operator[]";
          WORD2(v61[1]) = 1024;
          *(_DWORD *)((char *)&v61[1] + 6) = 468;
          WORD1(v61[2]) = 2048;
          *(_QWORD *)((char *)&v61[2] + 4) = v14;
          WORD2(v61[3]) = 2048;
          *(_QWORD *)((char *)&v61[3] + 6) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v24 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 248 * v14 + 240);
        goto LABEL_41;
      }
    }
  }
  v45 = 0;
  v11 = *(_QWORD **)(a1 + 8);
  v12 = a2;
  v13 = a2 - 0x7FFFFFFFFFFFFFFFLL;
  if ((uint64_t)(a2 - 0x7FFFFFFFFFFFFFFFLL) >= 0)
  {
    v14 = v11[113];
    while (v14 > v13)
    {
      v12 = *(_QWORD *)(v11[115] + 8 * v13);
      v13 = v12 - 0x7FFFFFFFFFFFFFFFLL;
      if ((uint64_t)(v12 - 0x7FFFFFFFFFFFFFFFLL) < 0)
        goto LABEL_7;
    }
    v46 = 0;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v47 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v61[0]) = 136315906;
    *(_QWORD *)((char *)v61 + 4) = "operator[]";
    WORD2(v61[1]) = 1024;
    *(_DWORD *)((char *)&v61[1] + 6) = 797;
    WORD1(v61[2]) = 2048;
    *(_QWORD *)((char *)&v61[2] + 4) = v13;
    WORD2(v61[3]) = 2048;
    *(_QWORD *)((char *)&v61[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_62;
  }
LABEL_7:
  v15 = v11[33];
  if (v15)
  {
    v16 = (_QWORD *)v11[35];
    v17 = &v16[v15];
    v18 = v16;
    do
    {
      v19 = v15 >> 1;
      v20 = &v18[v15 >> 1];
      v22 = *v20;
      v21 = v20 + 1;
      v15 += ~(v15 >> 1);
      if (v22 < v12)
        v18 = v21;
      else
        v15 = v19;
    }
    while (v15);
    if (v18 != v17 && *v18 == v12)
    {
      v13 = v18 - v16;
      v14 = v11[73];
      if (v14 <= v13)
      {
LABEL_62:
        v46 = 0;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v61[0]) = 136315906;
        *(_QWORD *)((char *)v61 + 4) = "operator[]";
        WORD2(v61[1]) = 1024;
        *(_DWORD *)((char *)&v61[1] + 6) = 797;
        WORD1(v61[2]) = 2048;
        *(_QWORD *)((char *)&v61[2] + 4) = v13;
        WORD2(v61[3]) = 2048;
        *(_QWORD *)((char *)&v61[3] + 6) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_63;
      }
      v45 = *(_QWORD *)(v11[75] + 8 * v13);
    }
  }
}

int *re::`anonymous namespace'::RegisterMapping::processRegister<re::Vector3<float>>(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  int *result;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t RegisterMap;
  char **v19;
  uint64_t v20;
  unint64_t *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t MappedRegister;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[8];

  v49[5] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)result + 40) != 2)
  {
    v8 = result;
    v9 = *result;
    if ((int)v9 <= 7)
    {
      v35 = 0u;
      re::EvaluationTree::getInputValue<re::Vector3<float>>(*(_QWORD **)(a1 + 8), a2, &v35);
    }
    v10 = *result;
    if ((*(_BYTE *)(a1 + 3824) & 1) == 0)
    {
LABEL_5:
      if (v10 == 76)
      {
        {
          v11 = *((_QWORD *)v8 + 1);
          v12 = *(_QWORD *)(a1 + 216);
          if (v12 > v11)
          {
            v13 = (_QWORD *)(*(_QWORD *)(a1 + 224) + 904 * v11 + 896);
            goto LABEL_27;
          }
LABEL_48:
          v34.n128_u64[0] = 0;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v35 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v49[0]) = 136315906;
          *(_QWORD *)((char *)v49 + 4) = "operator[]";
          WORD2(v49[1]) = 1024;
          *(_DWORD *)((char *)&v49[1] + 6) = 468;
          WORD1(v49[2]) = 2048;
          *(_QWORD *)((char *)&v49[2] + 4) = v11;
          WORD2(v49[3]) = 2048;
          *(_QWORD *)((char *)&v49[3] + 6) = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
      else
      {
        if (v10 != 77)
        {
          v19 = &(&re::kEvaluationCommandDescriptions)[2 * v9];
          v20 = *((unsigned __int8 *)v19 + 9);
          if (*((_BYTE *)v19 + 9))
          {
            v21 = (unint64_t *)(v8 + 2);
            v22 = (unsigned __int8 *)v19 + 10;
            while (2)
            {
              v24 = *v22++;
              v23 = v24;
              switch(v24)
              {
                case 0u:
                  goto LABEL_39;
                case 1u:
                  goto LABEL_39;
                case 2u:
                  goto LABEL_39;
                case 3u:
                  goto LABEL_39;
                case 4u:
                  goto LABEL_39;
                case 5u:
                  goto LABEL_39;
                case 6u:
                  goto LABEL_39;
                case 7u:
LABEL_39:
                  v35.n128_u64[0] = MappedRegister;
                  re::DynamicArray<unsigned long>::add(a3, &v35);
                  ++v21;
                  if (!--v20)
                    break;
                  continue;
                default:
                  goto LABEL_50;
              }
              break;
            }
          }
          re::DynamicArray<unsigned long>::add(a3, &v35);
        }
        {
          v11 = *((_QWORD *)v8 + 1);
          v12 = *(_QWORD *)(a1 + 240);
          if (v12 > v11)
          {
            v13 = (_QWORD *)(*(_QWORD *)(a1 + 248) + 248 * v11 + 240);
LABEL_27:
            re::DynamicArray<unsigned long>::add(a3, v13);
          }
          v34.n128_u64[0] = 0;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v35 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v49[0]) = 136315906;
          *(_QWORD *)((char *)v49 + 4) = "operator[]";
          WORD2(v49[1]) = 1024;
          *(_DWORD *)((char *)&v49[1] + 6) = 468;
          WORD1(v49[2]) = 2048;
          *(_QWORD *)((char *)&v49[2] + 4) = v11;
          WORD2(v49[3]) = 2048;
          *(_QWORD *)((char *)&v49[3] + 6) = v12;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_48;
        }
      }
    }
    memset(v49, 0, 32);
    v14 = &(&re::kEvaluationCommandDescriptions)[2 * v9];
    v15 = *((unsigned __int8 *)v14 + 9);
    if (*((_BYTE *)v14 + 9))
    {
      v16 = 0;
      v17 = (char *)v14 + 10;
      while (2)
      {
        switch(v17[v16])
        {
          case 0:
            goto LABEL_21;
          case 1:
            goto LABEL_21;
          case 2:
            goto LABEL_21;
          case 3:
            goto LABEL_21;
          case 4:
            goto LABEL_21;
          case 5:
            goto LABEL_21;
          case 6:
            goto LABEL_21;
          case 7:
LABEL_21:
            if (*(_BYTE *)(RegisterMap + 40) != 3)
              goto LABEL_43;
            v49[v16++] = *(_QWORD *)(RegisterMap + 48);
            if (v15 == v16)
              goto LABEL_44;
            continue;
          default:
            if (v17[v16] - 253 >= 2)
            {
              re::internal::assertLog((re::internal *)5, v7, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1778, v17[v16]);
              _os_crash();
              __break(1u);
LABEL_50:
              re::internal::assertLog((re::internal *)5, v7, "assertion failure: '%s' (%s:line %i) Invalid Register Type: %u", "!\"Unreachable code\"", "processRegister", 1823, v23);
              _os_crash();
              __break(1u);
              JUMPOUT(0x225145190);
            }
LABEL_43:
            if (v15 == v16)
              goto LABEL_44;
            v10 = *v8;
            break;
        }
        goto LABEL_5;
      }
    }
LABEL_44:
    v34 = 0u;
    v49[v15] = *((_QWORD *)v8 + 6);
    v26 = *(_QWORD *)(a1 + 3848);
    v35.n128_u64[0] = *(_QWORD *)(a1 + 3864);
    v35.n128_u64[1] = v26;
    v27 = *(_QWORD *)(a1 + 3888);
    *(_QWORD *)&v36 = *(_QWORD *)(a1 + 3904);
    *((_QWORD *)&v36 + 1) = v27;
    v28 = *(_QWORD *)(a1 + 3928);
    *(_QWORD *)&v37 = *(_QWORD *)(a1 + 3944);
    *((_QWORD *)&v37 + 1) = v28;
    v29 = *(_QWORD *)(a1 + 3968);
    *(_QWORD *)&v38 = *(_QWORD *)(a1 + 3984);
    *((_QWORD *)&v38 + 1) = v29;
    v30 = *(_QWORD *)(a1 + 4008);
    *(_QWORD *)&v39 = *(_QWORD *)(a1 + 4024);
    *((_QWORD *)&v39 + 1) = v30;
    v31 = *(_QWORD *)(a1 + 4048);
    v40 = *(_QWORD *)(a1 + 4064);
    v41 = v31;
    v32 = *(_QWORD *)(a1 + 4088);
    v42 = *(_QWORD *)(a1 + 4104);
    v43 = v32;
    v33 = *(_QWORD *)(a1 + 4128);
    v44 = *(_QWORD *)(a1 + 4144);
    v45 = v33;
    v47 = 0;
    v48 = 0;
    v46 = 0;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::EvaluationCommand>::add(_anonymous_namespace_ *result, _DWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationCommand>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationCommand>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  *(_DWORD *)(*((_QWORD *)v3 + 4) + 4 * v5) = *a2;
  *((_QWORD *)v3 + 2) = v5 + 1;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getRegisterMapData<re::Vector3<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 192) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 200) + (a2 << 6);
}

uint64_t re::`anonymous namespace'::RegisterMapping::getMappedRegisterValue<re::Vector3<float>>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[24] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = a1[25] + (a2 << 6);
  v5 = *(_QWORD *)(v2 + 56);
  v4 = (_QWORD *)(v2 + 56);
  v3 = v5;
  if (v5 == -1)
  {
    v3 = a1[526];
    a1[526] = v3 + 1;
    *v4 = v3;
  }
  return v3;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getRegisterMapData<re::Quaternion<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 144) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 152) + (a2 << 6);
}

uint64_t re::`anonymous namespace'::RegisterMapping::getMappedRegisterValue<re::Quaternion<float>>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[18] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = a1[19] + (a2 << 6);
  v5 = *(_QWORD *)(v2 + 56);
  v4 = (_QWORD *)(v2 + 56);
  v3 = v5;
  if (v5 == -1)
  {
    v3 = a1[524];
    a1[524] = v3 + 1;
    *v4 = v3;
  }
  return v3;
}

uint64_t re::FixedArray<re::`anonymous namespace'::RegisterMapping::RegisterMapData>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >> 58)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 << 6, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)result = 0xFFFFFFFFLL;
      *(_OWORD *)(result + 8) = 0uLL;
      *(_OWORD *)(result + 24) = 0uLL;
      *(_BYTE *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = -1;
      *(_QWORD *)(result + 56) = -1;
      result += 64;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)result = 0xFFFFFFFFLL;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = -1;
  *(_QWORD *)(result + 56) = -1;
  return result;
}

uint64_t re::EvaluationDependencyMap::isRegisterUsed(uint64_t a1, unsigned int a2, unint64_t a3)
{
  if (*(_QWORD *)(a1 + 24 * a2 + 8) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 24 * a2 + 16) + a3);
}

_QWORD *re::`anonymous namespace'::RegisterMapping::enqueueRegisterForProcessing(_QWORD *result, unsigned int a2, unint64_t a3)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  if (result[3 * a2 + 3] <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = a2;
  v5 = result;
  v6 = result[3 * a2 + 4];
  v7 = (unsigned int *)(v6 + (a3 << 6));
  v8 = *v7;
  v9 = &result[5 * *v7 + 85];
  v10 = *v9;
  if (!*v9)
  {
    result = re::DynamicArray<re::EvaluationCommand>::add((_anonymous_namespace_ *)(result + 473), v7);
    v10 = *v9;
  }
  v11 = &v5[5 * v8];
  v12 = v11[84];
  if (v10 >= v12)
  {
    v13 = v10 + 1;
    if (v12 < v10 + 1)
    {
      v14 = v11 + 83;
      if (v11[83])
      {
        v15 = 2 * v12;
        if (!v12)
          v15 = 8;
        if (v15 <= v13)
          v16 = v13;
        else
          v16 = v15;
        result = re::DynamicArray<re::RigNodeConstraint>::setCapacity(v11 + 83, v16);
      }
      else
      {
        result = re::DynamicArray<re::RigNodeConstraint>::setCapacity(v14, v13);
        ++LODWORD(v5[5 * v8 + 86]);
      }
    }
    v10 = *v9;
  }
  v17 = &v5[5 * v8];
  v18 = v17[87] + 16 * v10;
  *(_BYTE *)v18 = v4;
  *(_QWORD *)(v18 + 8) = a3;
  ++*v9;
  ++*((_DWORD *)v17 + 172);
  *(_BYTE *)(v6 + (a3 << 6) + 40) = 1;
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getRegisterMapData<int>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 24) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 6);
}

_QWORD *re::`anonymous namespace'::RegisterMapping::allocateConstRegister<int>(_QWORD *a1, _DWORD *a2, unint64_t a3)
{
  re::DynamicArray<int>::add(a1 + 479, a2);
  if (a1[3] <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(a1[4] + (a3 << 6) + 48) = a1[481] - 1;
}

BOOL re::`anonymous namespace'::RegisterMapping::mapCallbackData(re::_anonymous_namespace_::RegisterMapping *this, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (*((_QWORD *)this + 27) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *((_QWORD *)this + 28);
  v4 = v3 + 904 * a2;
  v5 = *(_QWORD *)(v4 + 896);
  if (v5 == -1)
  {
    v6 = (_QWORD *)(v3 + 904 * a2);
    v7 = *((_QWORD *)this + 527);
    *((_QWORD *)this + 527) = v7 + 1;
    *(_QWORD *)(v4 + 896) = v7;
    v6[56] = *v6;
    v6[111] = v6[55];
  }
  return v5 == -1;
}

BOOL re::`anonymous namespace'::RegisterMapping::mapBranchGroup(re::_anonymous_namespace_::RegisterMapping *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t MappedRegister;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v63;
  uint64_t v64;

  v3 = a2;
  if (*((_QWORD *)this + 30) <= a2)
  {
LABEL_61:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 200, v2);
    _os_crash();
    __break(1u);
LABEL_63:
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
  v5 = *((_QWORD *)this + 31);
  v6 = (_QWORD *)(v5 + 248 * a2);
  v2 = v6[30];
  if (v2 != -1)
    return v2 == -1;
  v7 = *((_QWORD *)this + 528);
  *((_QWORD *)this + 528) = v7 + 1;
  v6[30] = v7;
  v8 = (_QWORD *)re::BucketArray<re::EvaluationBranchGroupData,8ul>::operator[](*((_QWORD *)this + 1) + 1608, a2);
  v2 = v8[5];
  v64 = v5;
  v9 = v5 + 248 * v3;
  v10 = *(_QWORD *)this;
  *(_QWORD *)(v9 + 32) = v2;
  v11 = (unint64_t *)(v9 + 32);
  *(v11 - 1) = v10;
  if (!v2)
    goto LABEL_18;
  if (v2 >= 0x147AE147AE147AFLL)
    goto LABEL_62;
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, 200 * v2, 8);
  v63 = v3;
  v14 = v5 + 248 * v3;
  *(_QWORD *)(v14 + 40) = v12;
  v15 = (uint64_t *)(v14 + 40);
  if (!v12)
    goto LABEL_63;
  v16 = v2 - 1;
  if (v2 == 1)
  {
    *v12 = -1;
    v17 = v12 + 1;
  }
  else
  {
    v17 = v12 + 1;
    do
    {
      *((_QWORD *)v17 - 1) = -1;
      *v17 = 0uLL;
      v17[1] = 0uLL;
      v17[2] = 0uLL;
      v17[3] = 0uLL;
      v17[4] = 0uLL;
      v17[5] = 0uLL;
      v17[6] = 0uLL;
      v17[7] = 0uLL;
      v17[8] = 0uLL;
      v17[9] = 0uLL;
      v17[10] = 0uLL;
      v17[11] = 0uLL;
      v17 = (_OWORD *)((char *)v17 + 200);
      --v16;
    }
    while (v16);
    *((_QWORD *)v17 - 1) = -1;
  }
  v18 = 0;
  v19 = 0;
  v17[10] = 0u;
  v17[11] = 0u;
  v17[8] = 0u;
  v17[9] = 0u;
  v17[6] = 0u;
  v17[7] = 0u;
  v17[4] = 0u;
  v17[5] = 0u;
  v17[2] = 0u;
  v17[3] = 0u;
  *v17 = 0u;
  v17[1] = 0u;
  do
  {
    if (v6[1] <= v19)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_52:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_53:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_54:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_55:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_56:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_57:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_58:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_59:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_60:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_61;
    }
    if (*v11 <= v19)
      goto LABEL_52;
    v20 = v6[2];
    v21 = *v15;
    v22 = *(_QWORD *)(v20 + v18);
    if (v22 != -1)
    v23 = v20 + v18 + 8;
    v24 = (_QWORD *)(v21 + v18 + 8);
    ++v19;
    v18 += 200;
  }
  while (v2 != v19);
  v10 = *(_QWORD *)this;
  v3 = v63;
LABEL_18:
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 248 * v3 + 48), v10, v8[9]);
  v2 = -1;
  if (v8[9])
  {
    v25 = 0;
    do
    {
      if (*(_QWORD *)(v64 + 248 * v3 + 56) <= v25)
        goto LABEL_53;
      *(_QWORD *)(*(_QWORD *)(v64 + 248 * v3 + 64) + 8 * v25++) = MappedRegister;
    }
    while (v25 < v8[9]);
  }
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 248 * v3 + 72), *(_QWORD *)this, v8[14]);
  if (v8[14])
  {
    v27 = 0;
    v28 = v64 + 248 * v3;
    v29 = (unint64_t *)(v28 + 80);
    v30 = (_QWORD *)(v28 + 88);
    do
    {
      if (*v29 <= v27)
        goto LABEL_54;
      *(_QWORD *)(*v30 + 8 * v27++) = v31;
    }
    while (v27 < v8[14]);
  }
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 248 * v3 + 96), *(_QWORD *)this, v8[19]);
  if (v8[19])
  {
    v32 = 0;
    v33 = v64 + 248 * v3;
    v34 = (unint64_t *)(v33 + 104);
    v35 = (_QWORD *)(v33 + 112);
    do
    {
      if (*v34 <= v32)
        goto LABEL_55;
      *(_QWORD *)(*v35 + 8 * v32++) = v36;
    }
    while (v32 < v8[19]);
  }
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 248 * v3 + 120), *(_QWORD *)this, v8[24]);
  if (v8[24])
  {
    v37 = 0;
    v38 = v64 + 248 * v3;
    v39 = (unint64_t *)(v38 + 128);
    v40 = (_QWORD *)(v38 + 136);
    do
    {
      if (*v39 <= v37)
        goto LABEL_56;
      *(_QWORD *)(*v40 + 8 * v37++) = v41;
    }
    while (v37 < v8[24]);
  }
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 248 * v3 + 144), *(_QWORD *)this, v8[29]);
  if (v8[29])
  {
    v42 = 0;
    v43 = v64 + 248 * v3;
    v44 = (unint64_t *)(v43 + 152);
    v45 = (_QWORD *)(v43 + 160);
    do
    {
      if (*v44 <= v42)
        goto LABEL_57;
      *(_QWORD *)(*v45 + 8 * v42++) = v46;
    }
    while (v42 < v8[29]);
  }
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 248 * v3 + 168), *(_QWORD *)this, v8[34]);
  if (v8[34])
  {
    v47 = 0;
    v48 = v64 + 248 * v3;
    v49 = (unint64_t *)(v48 + 176);
    v50 = (_QWORD *)(v48 + 184);
    do
    {
      if (*v49 <= v47)
        goto LABEL_58;
      *(_QWORD *)(*v50 + 8 * v47++) = v51;
    }
    while (v47 < v8[34]);
  }
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 248 * v3 + 192), *(_QWORD *)this, v8[39]);
  if (v8[39])
  {
    v52 = 0;
    v53 = v64 + 248 * v3;
    v54 = (unint64_t *)(v53 + 200);
    v55 = (_QWORD *)(v53 + 208);
    do
    {
      if (*v54 <= v52)
        goto LABEL_59;
      *(_QWORD *)(*v55 + 8 * v52++) = v56;
    }
    while (v52 < v8[39]);
  }
  re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)(v64 + 248 * v3 + 216), *(_QWORD *)this, v8[44]);
  if (v8[44])
  {
    v57 = 0;
    v58 = v64 + 248 * v3;
    v59 = (unint64_t *)(v58 + 224);
    v60 = (_QWORD *)(v58 + 232);
    while (1)
    {
      if (*v59 <= v57)
        break;
      *(_QWORD *)(*v60 + 8 * v57++) = v61;
      if (v57 >= v8[44])
        return v2 == -1;
    }
    goto LABEL_60;
  }
  return v2 == -1;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getMappedRegisterValue<int>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[3] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = a1[4] + (a2 << 6);
  v5 = *(_QWORD *)(v2 + 56);
  v4 = (_QWORD *)(v2 + 56);
  v3 = v5;
  if (v5 == -1)
  {
    v3 = a1[519];
    a1[519] = v3 + 1;
    *v4 = v3;
  }
  return v3;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getRegisterMapData<unsigned int>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 48) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + (a2 << 6);
}

uint64_t re::`anonymous namespace'::RegisterMapping::getRegisterMapData<float>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 72) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 80) + (a2 << 6);
}

uint64_t re::`anonymous namespace'::RegisterMapping::getRegisterMapData<re::Matrix3x3<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 96) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 104) + (a2 << 6);
}

uint64_t re::`anonymous namespace'::RegisterMapping::getRegisterMapData<re::Matrix4x4<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 120) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 128) + (a2 << 6);
}

uint64_t re::`anonymous namespace'::RegisterMapping::getRegisterMapData<re::Vector2<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 168) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 176) + (a2 << 6);
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisters<int,re::FixedRegisterIdTable>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  result = (uint64_t)re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3, *a1, *(_QWORD *)(a2 + 8));
  if (*(_QWORD *)(a2 + 8))
  {
    v7 = 0;
    do
    {
      if (a3[1] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[2] + 8 * v7++) = result;
    }
    while (v7 < *(_QWORD *)(a2 + 8));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisters<unsigned int,re::FixedRegisterIdTable>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  result = (uint64_t)re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 3, *a1, *(_QWORD *)(a2 + 32));
  if (*(_QWORD *)(a2 + 32))
  {
    v7 = 0;
    do
    {
      if (a3[4] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[5] + 8 * v7++) = result;
    }
    while (v7 < *(_QWORD *)(a2 + 32));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisters<float,re::FixedRegisterIdTable>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  result = (uint64_t)re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 6, *a1, *(_QWORD *)(a2 + 56));
  if (*(_QWORD *)(a2 + 56))
  {
    v7 = 0;
    do
    {
      if (a3[7] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[8] + 8 * v7++) = result;
    }
    while (v7 < *(_QWORD *)(a2 + 56));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisters<re::Matrix3x3<float>,re::FixedRegisterIdTable>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  result = (uint64_t)re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 9, *a1, *(_QWORD *)(a2 + 80));
  if (*(_QWORD *)(a2 + 80))
  {
    v7 = 0;
    do
    {
      if (a3[10] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[11] + 8 * v7++) = result;
    }
    while (v7 < *(_QWORD *)(a2 + 80));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisters<re::Matrix4x4<float>,re::FixedRegisterIdTable>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  result = (uint64_t)re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 12, *a1, *(_QWORD *)(a2 + 104));
  if (*(_QWORD *)(a2 + 104))
  {
    v7 = 0;
    do
    {
      if (a3[13] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[14] + 8 * v7++) = result;
    }
    while (v7 < *(_QWORD *)(a2 + 104));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisters<re::Quaternion<float>,re::FixedRegisterIdTable>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  result = (uint64_t)re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 15, *a1, *(_QWORD *)(a2 + 128));
  if (*(_QWORD *)(a2 + 128))
  {
    v7 = 0;
    do
    {
      if (a3[16] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[17] + 8 * v7++) = result;
    }
    while (v7 < *(_QWORD *)(a2 + 128));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisters<re::Vector2<float>,re::FixedRegisterIdTable>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  result = (uint64_t)re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 18, *a1, *(_QWORD *)(a2 + 152));
  if (*(_QWORD *)(a2 + 152))
  {
    v7 = 0;
    do
    {
      if (a3[19] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[20] + 8 * v7++) = result;
    }
    while (v7 < *(_QWORD *)(a2 + 152));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisters<re::Vector3<float>,re::FixedRegisterIdTable>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  result = (uint64_t)re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 21, *a1, *(_QWORD *)(a2 + 176));
  if (*(_QWORD *)(a2 + 176))
  {
    v7 = 0;
    do
    {
      if (a3[22] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[23] + 8 * v7++) = result;
    }
    while (v7 < *(_QWORD *)(a2 + 176));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisterArray(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = (uint64_t)re::FixedArray<re::EvaluationSRT>::init<>(a3, *a1, *(_QWORD *)(a2 + 8));
  if (*(_QWORD *)(a2 + 8))
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      if (a3[1] <= v8)
        break;
      *(_QWORD *)(a3[2] + v7) = v9;
      if (*(_QWORD *)(a2 + 8) <= v8)
        goto LABEL_11;
      if (a3[1] <= v8)
        goto LABEL_12;
      *(_QWORD *)(a3[2] + v7 + 8) = v10;
      if (*(_QWORD *)(a2 + 8) <= v8)
        goto LABEL_13;
      if (a3[1] <= v8)
        goto LABEL_14;
      *(_QWORD *)(a3[2] + v7 + 16) = result;
      ++v8;
      v7 += 24;
      if (v8 >= *(_QWORD *)(a2 + 8))
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_14:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getMappedRegisterValue<unsigned int>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[6] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = a1[7] + (a2 << 6);
  v5 = *(_QWORD *)(v2 + 56);
  v4 = (_QWORD *)(v2 + 56);
  v3 = v5;
  if (v5 == -1)
  {
    v3 = a1[520];
    a1[520] = v3 + 1;
    *v4 = v3;
  }
  return v3;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getMappedRegisterValue<float>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[9] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = a1[10] + (a2 << 6);
  v5 = *(_QWORD *)(v2 + 56);
  v4 = (_QWORD *)(v2 + 56);
  v3 = v5;
  if (v5 == -1)
  {
    v3 = a1[521];
    a1[521] = v3 + 1;
    *v4 = v3;
  }
  return v3;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getMappedRegisterValue<re::Matrix3x3<float>>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[12] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = a1[13] + (a2 << 6);
  v5 = *(_QWORD *)(v2 + 56);
  v4 = (_QWORD *)(v2 + 56);
  v3 = v5;
  if (v5 == -1)
  {
    v3 = a1[522];
    a1[522] = v3 + 1;
    *v4 = v3;
  }
  return v3;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getMappedRegisterValue<re::Matrix4x4<float>>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[15] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = a1[16] + (a2 << 6);
  v5 = *(_QWORD *)(v2 + 56);
  v4 = (_QWORD *)(v2 + 56);
  v3 = v5;
  if (v5 == -1)
  {
    v3 = a1[523];
    a1[523] = v3 + 1;
    *v4 = v3;
  }
  return v3;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getMappedRegisterValue<re::Vector2<float>>(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[21] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = a1[22] + (a2 << 6);
  v5 = *(_QWORD *)(v2 + 56);
  v4 = (_QWORD *)(v2 + 56);
  v3 = v5;
  if (v5 == -1)
  {
    v3 = a1[525];
    a1[525] = v3 + 1;
    *v4 = v3;
  }
  return v3;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::allocateConstRegister<unsigned int>(_QWORD *a1, _DWORD *a2, unint64_t a3)
{
  re::DynamicArray<int>::add(a1 + 484, a2);
  if (a1[6] <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(a1[7] + (a3 << 6) + 48) = a1[486] - 1;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::allocateConstRegister<float>(_QWORD *a1, float *a2, unint64_t a3)
{
  re::DynamicArray<float>::add((_anonymous_namespace_ *)(a1 + 489), a2);
  if (a1[9] <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(a1[10] + (a3 << 6) + 48) = a1[491] - 1;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::allocateConstRegister<re::Matrix3x3<float>>(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  re::DynamicArray<re::Matrix3x3<float>>::add((_anonymous_namespace_ *)(a1 + 494), a2);
  if (a1[12] <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(a1[13] + (a3 << 6) + 48) = a1[496] - 1;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::allocateConstRegister<re::Matrix4x4<float>>(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  re::DynamicArray<re::Matrix4x4<float>>::add((_anonymous_namespace_ *)(a1 + 499), a2);
  if (a1[15] <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(a1[16] + (a3 << 6) + 48) = a1[501] - 1;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::allocateConstRegister<re::Quaternion<float>>(_QWORD *a1, __n128 *a2, unint64_t a3)
{
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(a1 + 504), a2);
  if (a1[18] <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(a1[19] + (a3 << 6) + 48) = a1[506] - 1;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::allocateConstRegister<re::Vector2<float>>(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  re::DynamicArray<unsigned long>::add(a1 + 509, a2);
  if (a1[21] <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(a1[22] + (a3 << 6) + 48) = a1[511] - 1;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::allocateConstRegister<re::Vector3<float>>(_QWORD *a1, __n128 *a2, unint64_t a3)
{
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)(a1 + 514), a2);
  if (a1[24] <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(a1[25] + (a3 << 6) + 48) = a1[516] - 1;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::initMappedRegisters<int>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3, *a1, a2[1]);
  if (a2[1])
  {
    v7 = 0;
    v8 = *a2;
    v9 = a3[2];
    do
    {
      v10 = *(_QWORD *)(v8 + 8 * v7);
      if (a1[3] <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (a3[1] <= v7)
        goto LABEL_8;
      *(_QWORD *)(v9 + 8 * v7++) = *(_QWORD *)(a1[4] + (v10 << 6) + 56);
    }
    while (v7 < a2[1]);
  }
  return result;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::initMappedRegisters<unsigned int>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 3, *a1, *(_QWORD *)(a2 + 24));
  if (*(_QWORD *)(a2 + 24))
  {
    v7 = 0;
    v8 = *(_QWORD *)(a2 + 16);
    v9 = a3[5];
    do
    {
      v10 = *(_QWORD *)(v8 + 8 * v7);
      if (a1[6] <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (a3[4] <= v7)
        goto LABEL_8;
      *(_QWORD *)(v9 + 8 * v7++) = *(_QWORD *)(a1[7] + (v10 << 6) + 56);
    }
    while (v7 < *(_QWORD *)(a2 + 24));
  }
  return result;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::initMappedRegisters<float>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 6, *a1, *(_QWORD *)(a2 + 40));
  if (*(_QWORD *)(a2 + 40))
  {
    v7 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = a3[8];
    do
    {
      v10 = *(_QWORD *)(v8 + 8 * v7);
      if (a1[9] <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (a3[7] <= v7)
        goto LABEL_8;
      *(_QWORD *)(v9 + 8 * v7++) = *(_QWORD *)(a1[10] + (v10 << 6) + 56);
    }
    while (v7 < *(_QWORD *)(a2 + 40));
  }
  return result;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::initMappedRegisters<re::Matrix3x3<float>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 9, *a1, *(_QWORD *)(a2 + 56));
  if (*(_QWORD *)(a2 + 56))
  {
    v7 = 0;
    v8 = *(_QWORD *)(a2 + 48);
    v9 = a3[11];
    do
    {
      v10 = *(_QWORD *)(v8 + 8 * v7);
      if (a1[12] <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (a3[10] <= v7)
        goto LABEL_8;
      *(_QWORD *)(v9 + 8 * v7++) = *(_QWORD *)(a1[13] + (v10 << 6) + 56);
    }
    while (v7 < *(_QWORD *)(a2 + 56));
  }
  return result;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::initMappedRegisters<re::Matrix4x4<float>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 12, *a1, *(_QWORD *)(a2 + 72));
  if (*(_QWORD *)(a2 + 72))
  {
    v7 = 0;
    v8 = *(_QWORD *)(a2 + 64);
    v9 = a3[14];
    do
    {
      v10 = *(_QWORD *)(v8 + 8 * v7);
      if (a1[15] <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (a3[13] <= v7)
        goto LABEL_8;
      *(_QWORD *)(v9 + 8 * v7++) = *(_QWORD *)(a1[16] + (v10 << 6) + 56);
    }
    while (v7 < *(_QWORD *)(a2 + 72));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisters<re::Quaternion<float>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  result = (uint64_t)re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 15, *a1, *(_QWORD *)(a2 + 88));
  if (*(_QWORD *)(a2 + 88))
  {
    v7 = 0;
    do
    {
      if (a3[16] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[17] + 8 * v7++) = result;
    }
    while (v7 < *(_QWORD *)(a2 + 88));
  }
  return result;
}

_QWORD *re::`anonymous namespace'::RegisterMapping::initMappedRegisters<re::Vector2<float>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  result = re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 18, *a1, *(_QWORD *)(a2 + 104));
  if (*(_QWORD *)(a2 + 104))
  {
    v7 = 0;
    v8 = *(_QWORD *)(a2 + 96);
    v9 = a3[20];
    do
    {
      v10 = *(_QWORD *)(v8 + 8 * v7);
      if (a1[21] <= v10)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (a3[19] <= v7)
        goto LABEL_8;
      *(_QWORD *)(v9 + 8 * v7++) = *(_QWORD *)(a1[22] + (v10 << 6) + 56);
    }
    while (v7 < *(_QWORD *)(a2 + 104));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisters<re::Vector3<float>>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;

  result = (uint64_t)re::FixedArray<re::EvaluationRegisterId<int>>::init<>(a3 + 21, *a1, *(_QWORD *)(a2 + 120));
  if (*(_QWORD *)(a2 + 120))
  {
    v7 = 0;
    do
    {
      if (a3[22] <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a3[23] + 8 * v7++) = result;
    }
    while (v7 < *(_QWORD *)(a2 + 120));
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::initMappedRegisterArray(uint64_t *a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = (uint64_t)re::FixedArray<re::EvaluationSRT>::init<>(a4, *a1, a3);
  if (a3)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      if (a4[1] <= v10)
        break;
      *(_QWORD *)(a4[2] + v9) = v11;
      if (a4[1] <= v10)
        goto LABEL_9;
      *(_QWORD *)(a4[2] + v9 + 8) = v12;
      if (a4[1] <= v10)
        goto LABEL_10;
      *(_QWORD *)(a4[2] + v9 + 16) = result;
      ++v10;
      v9 += 24;
      if (a3 == v10)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::RegisterMapping::getMappedRegisterValue<re::Quaternion<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 144) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 152) + (a2 << 6) + 56);
}

uint64_t re::`anonymous namespace'::RegisterMapping::getMappedRegisterValue<re::Vector3<float>>(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 192) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 200) + (a2 << 6) + 56);
}

void re::FixedRegisterTable::initSize<re::FixedRegisterIdTable>(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  re::FixedArray<int>::init<>(a1, a2, a3[1]);
  re::FixedArray<int>::init<>(a1 + 3, a2, a3[4]);
  re::FixedArray<int>::init<>(a1 + 6, a2, a3[7]);
  re::FixedArray<re::Matrix3x3<float>>::init<>(a1 + 9, a2, a3[10]);
  re::FixedArray<re::Matrix4x4<float>>::init<>(a1 + 12, a2, a3[13]);
  re::FixedArray<re::Quaternion<float>>::init<>(a1 + 15, a2, a3[16]);
  re::FixedArray<re::Vector2<float>>::init<>(a1 + 18, a2, a3[19]);
  re::FixedArray<re::Vector3<float>>::init<>(a1 + 21, a2, a3[22]);
}

uint64_t re::FixedArray<re::EvaluationSRT>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (a1 == a2)
    return a1;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a1)
  {
    if (!v4)
      return a1;
  }
  else
  {
    if (!v4)
      return a1;
    re::FixedArray<re::EvaluationSRT>::init<>((_QWORD *)a1, v4, *(_QWORD *)(a2 + 8));
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) == v5)
  {
    if (v5)
      memmove(*(void **)(a1 + 16), *(const void **)(a2 + 16), 24 * v5);
    return a1;
  }
  re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<re::EvaluationRegisterId<int>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (a1 == a2)
    return a1;
  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a1)
  {
    if (!v4)
      return a1;
  }
  else
  {
    if (!v4)
      return a1;
    re::FixedArray<re::EvaluationRegisterId<int>>::init<>((_QWORD *)a1, v4, *(_QWORD *)(a2 + 8));
  }
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) == v5)
  {
    if (v5)
      memmove(*(void **)(a1 + 16), *(const void **)(a2 + 16), 8 * v5);
    return a1;
  }
  re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::`anonymous namespace'::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected input command during evaluation.", "!\"Unreachable code\"", "operator()", 236);
  _os_crash();
  __break(1u);
}

void re::`anonymous namespace'::$_1::__invoke(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected input command during evaluation.", "!\"Unreachable code\"", "operator()", 241);
  _os_crash();
  __break(1u);
}

void re::`anonymous namespace'::$_2::__invoke(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected input command during evaluation.", "!\"Unreachable code\"", "operator()", 246);
  _os_crash();
  __break(1u);
}

void re::`anonymous namespace'::$_3::__invoke(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected input command during evaluation.", "!\"Unreachable code\"", "operator()", 251);
  _os_crash();
  __break(1u);
}

void re::`anonymous namespace'::$_4::__invoke(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected input command during evaluation.", "!\"Unreachable code\"", "operator()", 256);
  _os_crash();
  __break(1u);
}

void re::`anonymous namespace'::$_5::__invoke(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected input command during evaluation.", "!\"Unreachable code\"", "operator()", 261);
  _os_crash();
  __break(1u);
}

void re::`anonymous namespace'::$_6::__invoke(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected input command during evaluation.", "!\"Unreachable code\"", "operator()", 266);
  _os_crash();
  __break(1u);
}

void re::`anonymous namespace'::$_7::__invoke(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected input command during evaluation.", "!\"Unreachable code\"", "operator()", 271);
  _os_crash();
  __break(1u);
}

__n128 re::`anonymous namespace'::$_8::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  _OWORD *v7;
  __n128 result;
  float32x4_t v9;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      result = (__n128)v9;
      *v7 = v9;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

_QWORD *re::`anonymous namespace'::$_9::__invoke(_QWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x2_t *v6;
  float32x2_t v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_10::__invoke(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (a2 >= 4)
  {
    v3 = 0;
    v4 = a2 >> 2;
    v5 = (uint64_t *)(result + 16);
    while (a2 > v3)
    {
      v6 = *(v5 - 2);
      v7 = *(_QWORD *)(a3 + 120);
      if (v7 <= v6)
        goto LABEL_14;
      v8 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_15;
      v9 = *(v5 - 1);
      if (v7 <= v9)
        goto LABEL_16;
      v10 = v3 + 2;
      if (a2 <= v3 + 2)
        goto LABEL_17;
      v11 = *v5;
      if (v7 <= *v5)
        goto LABEL_18;
      v12 = v3 + 3;
      if (a2 <= v3 + 3)
        goto LABEL_19;
      v13 = v5[1];
      if (v7 <= v13)
        goto LABEL_20;
      v14 = *(_QWORD *)(a3 + 112);
      *(float32x4_t *)(v14 + 16 * v13) = vmlaq_f32(*(float32x4_t *)(v14 + 16 * v6), *(float32x4_t *)(v14 + 16 * v11), vsubq_f32(*(float32x4_t *)(v14 + 16 * v9), *(float32x4_t *)(v14 + 16 * v6)));
      v3 += 4;
      v5 += 4;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v6, v7);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9, v7);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v7);
    _os_crash();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v12, a2);
    _os_crash();
    __break(1u);
LABEL_20:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v13, v7);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_11::__invoke(uint64_t result, unint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float v16;

  if (a2 >= 4)
  {
    v4 = 0;
    v5 = a2 >> 2;
    v6 = (uint64_t *)(result + 16);
    LODWORD(a4) = 1.0;
    while (a2 > v4)
    {
      v7 = *(v6 - 2);
      v8 = a3[15];
      if (v8 <= v7)
        goto LABEL_14;
      v9 = v4 + 1;
      if (a2 <= v4 + 1)
        goto LABEL_15;
      v10 = *(v6 - 1);
      if (v8 <= v10)
        goto LABEL_16;
      v11 = v4 + 2;
      if (a2 <= v4 + 2)
        goto LABEL_17;
      v12 = *v6;
      v13 = a3[5];
      if (v13 <= *v6)
        goto LABEL_18;
      v14 = v4 + 3;
      if (a2 <= v4 + 3)
        goto LABEL_19;
      v15 = v6[1];
      if (v8 <= v15)
        goto LABEL_20;
      v16 = *(float *)(a3[4] + 4 * v12);
      *(float32x4_t *)(a3[14] + 16 * v15) = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(a3[14] + 16 * v10), v16), *(float32x4_t *)(a3[14] + 16 * v7), 1.0 - v16);
      v4 += 4;
      v6 += 4;
      if (!--v5)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, a4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v7, v8);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v10, v8);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, a2);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v13);
    _os_crash();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, a2);
    _os_crash();
    __break(1u);
LABEL_20:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v15, v8);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::`anonymous namespace'::$_12::__invoke(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float32x2_t v36;
  float32x2_t v37;
  float v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int32 v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  float v51;
  float v52;
  float32x4_t v53;
  float32x4_t v54;

  if (a2 >= 4)
  {
    v6 = 0;
    v7 = a2 >> 2;
    v8 = (uint64_t *)(a1 + 16);
    while (a2 > v6)
    {
      v9 = *(v8 - 2);
      v3 = a3[11];
      if (v3 <= v9)
        goto LABEL_23;
      v10 = v6 + 1;
      if (a2 <= v6 + 1)
        goto LABEL_24;
      v11 = *(v8 - 1);
      if (v3 <= v11)
        goto LABEL_25;
      v12 = v6 + 2;
      if (a2 <= v6 + 2)
        goto LABEL_26;
      v13 = *v8;
      v14 = a3[5];
      if (v14 <= *v8)
        goto LABEL_27;
      v15 = a3[10];
      v16 = *(float *)(a3[4] + 4 * v13);
      v17 = *(float32x4_t *)(v15 + 16 * v9);
      v18 = *(float32x4_t *)(v15 + 16 * v11);
      v19 = vmulq_f32(v17, v18);
      v20 = (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL);
      *(float32x2_t *)v19.f32 = vadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v20.f32);
      v19.f32[0] = vaddv_f32(*(float32x2_t *)v19.f32);
      v20.i32[0] = 0;
      v21 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v19, v20)), 0), (int8x16_t)vnegq_f32(v18), (int8x16_t)v18);
      v22 = 1.0;
      v23 = vsubq_f32(v17, v21);
      v24 = (int8x16_t)vmulq_f32(v23, v23);
      v53 = v21;
      v54 = v17;
      v25 = vaddq_f32(v17, v21);
      v26 = (int8x16_t)vmulq_f32(v25, v25);
      v27 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)))));
      v28 = v27 + v27;
      v29 = 1.0;
      if ((float)(v27 + v27) != 0.0)
        v29 = sinf(v27 + v27) / v28;
      v30 = (float)(1.0 - v16) * v28;
      if (v30 != 0.0)
      {
        v51 = v29;
        v31 = sinf((float)(1.0 - v16) * v28);
        v29 = v51;
        v22 = v31 / v30;
      }
      v32 = v16 * v28;
      v33 = 1.0;
      if (v32 != 0.0)
      {
        v52 = v29;
        v34 = sinf(v32);
        v29 = v52;
        v33 = v34 / v32;
      }
      v35 = v29;
      v36 = vrecpe_f32((float32x2_t)LODWORD(v29));
      v37 = vmul_f32(v36, vrecps_f32((float32x2_t)LODWORD(v35), v36));
      v38 = vmul_f32(v37, vrecps_f32((float32x2_t)LODWORD(v35), v37)).f32[0];
      v37.f32[0] = (float)(1.0 - v16) * (float)(v38 * v22);
      v39 = vmlaq_f32(vmulq_n_f32(v53, v16 * (float)(v38 * v33)), v54, (float32x4_t)vdupq_lane_s32((int32x2_t)v37, 0));
      v40 = (int8x16_t)vmulq_f32(v39, v39);
      v41 = vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
      if (vaddv_f32(v41) == 0.0)
      {
        v42 = 0;
        v43 = 0x3F80000000000000;
      }
      else
      {
        v44 = vadd_f32(v41, (float32x2_t)vdup_lane_s32((int32x2_t)v41, 1)).u32[0];
        v45 = vrsqrte_f32((float32x2_t)v44);
        v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44, vmul_f32(v45, v45)));
        v47 = vmulq_n_f32(v39, vmul_f32(v46, vrsqrts_f32((float32x2_t)v44, vmul_f32(v46, v46))).f32[0]);
        v43 = v47.i64[1];
        v42 = v47.i64[0];
      }
      v48 = v6 + 3;
      if (a2 <= v6 + 3)
        goto LABEL_28;
      v49 = v8[1];
      if (v3 <= v49)
        goto LABEL_29;
      v50 = (uint64_t *)(v15 + 16 * v49);
      *v50 = v42;
      v50[1] = v43;
      v6 += 4;
      v8 += 4;
      if (!--v7)
        return;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
    _os_crash();
    __break(1u);
LABEL_23:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9, v3);
    _os_crash();
    __break(1u);
LABEL_24:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_25:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v3);
    _os_crash();
    __break(1u);
LABEL_26:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v12, a2);
    _os_crash();
    __break(1u);
LABEL_27:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v13, v14);
    _os_crash();
    __break(1u);
LABEL_28:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v48, a2);
    _os_crash();
    __break(1u);
LABEL_29:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v49, v3);
    _os_crash();
    __break(1u);
  }
}

void re::`anonymous namespace'::$_13::__invoke(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;

  if (a2 >= 3)
  {
    v6 = 0;
    v7 = a2 / 3;
    while (a2 > v6)
    {
      v8 = *(_QWORD *)(a1 + 8 * v6);
      v9 = a3[15];
      if (v9 <= v8)
        goto LABEL_12;
      v10 = v6 + 1;
      if (a2 <= v6 + 1)
        goto LABEL_13;
      v11 = *(_QWORD *)(a1 + 8 * v6 + 8);
      v12 = a3[3];
      if (v12 <= v11)
        goto LABEL_14;
      v13 = a3[14] + 16 * v8;
      v14 = *(unsigned __int8 *)(a3[2] + 4 * v11);
      v20 = xmmword_2260E5D70;
      re::convertIntrinsicEulersToQuaternions<float>(v13, 1, v14, (uint64_t)&v20, 1);
      v15 = v6 + 2;
      if (a2 <= v6 + 2)
        goto LABEL_15;
      v16 = *(_QWORD *)(a1 + 8 * v6 + 16);
      v17 = a3[11];
      if (v17 <= v16)
        goto LABEL_16;
      v18 = *((_QWORD *)&v20 + 1);
      v19 = (_QWORD *)(a3[10] + 16 * v16);
      *v19 = v20;
      v19[1] = v18;
      v6 += 3;
      if (!--v7)
        return;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v9);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v12);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v16, v17);
    _os_crash();
    __break(1u);
  }
}

void re::`anonymous namespace'::$_14::__invoke(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;

  if (a2 >= 3)
  {
    v6 = 0;
    v7 = a2 / 3;
    while (a2 > v6)
    {
      v8 = *(_QWORD *)(a1 + 8 * v6);
      v9 = a3[11];
      if (v9 <= v8)
        goto LABEL_12;
      v10 = v6 + 1;
      if (a2 <= v6 + 1)
        goto LABEL_13;
      v11 = *(_QWORD *)(a1 + 8 * v6 + 8);
      v12 = a3[3];
      if (v12 <= v11)
        goto LABEL_14;
      v13 = a3[10] + 16 * v8;
      v14 = *(unsigned __int8 *)(a3[2] + 4 * v11);
      v20 = 0u;
      re::convertQuaternionsToIntrinsicEulers<float>(v13, 1, v14, (uint64_t)&v20, 1);
      v15 = v6 + 2;
      if (a2 <= v6 + 2)
        goto LABEL_15;
      v16 = *(_QWORD *)(a1 + 8 * v6 + 16);
      v17 = a3[15];
      if (v17 <= v16)
        goto LABEL_16;
      v18 = *((_QWORD *)&v20 + 1);
      v19 = (_QWORD *)(a3[14] + 16 * v16);
      *v19 = v20;
      v19[1] = v18;
      v6 += 3;
      if (!--v7)
        return;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v9);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v12);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v15, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v16, v17);
    _os_crash();
    __break(1u);
  }
}

__n128 re::`anonymous namespace'::$_15::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  int32x4_t *v7;
  int32x4_t v8;
  _OWORD *v9;
  __n128 result;
  int8x16_t v11;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v8 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v7, *v7), *(int8x16_t *)v7, 0xCuLL), vnegq_f32(*v6)), *(float32x4_t *)v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v6, *(int32x4_t *)v6), *(int8x16_t *)v6, 0xCuLL));
      v11 = vextq_s8((int8x16_t)vuzp1q_s32(v8, v8), (int8x16_t)v8, 0xCuLL);
      result = (__n128)v11;
      *v9 = v11;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

_OWORD *re::`anonymous namespace'::$_16::__invoke(_OWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  float32x4_t *v7;
  int8x16_t v8;
  int32x4_t v12;
  float32x4_t v13;
  float32x4_t v18;
  _QWORD v19[2];

  v19[0] = result;
  v19[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v8 = (int8x16_t)vmulq_f32(*v7, *v7);
      *(float *)v8.i32 = 1.0
                       / vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
      _S2 = vmuls_lane_f32(*(float *)v8.i32, *v7, 3);
      _Q0 = vmulq_n_f32(vnegq_f32(*v7), *(float *)v8.i32);
      _Q1 = *(int32x4_t *)v6;
      v12 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL), vnegq_f32(*v6)), _Q0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q1, _Q1), *(int8x16_t *)v6, 0xCuLL));
      v13 = vmlaq_n_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL), _Q0, *v6, 3), *v6, _S2);
      __asm { FMLA            S0, S2, V1.S[3] }
      v13.i32[3] = _Q0.i32[0];
      v18 = v13;
      *result = v18;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

__n128 re::`anonymous namespace'::$_17::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  _OWORD *v7;
  __n128 result;
  float32x4_t v9;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      result = (__n128)v9;
      *v7 = v9;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

__n128 re::`anonymous namespace'::$_18::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  _OWORD *v8;
  __n128 result;
  __n128 v10;
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  if (a2 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    do
    {
      v7 = vnegq_f32(*v6);
      v7.i32[3] = HIDWORD(*(unsigned __int128 *)v6);
      v10 = (__n128)v7;
      result = v10;
      *v8 = v10;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

__n128 re::`anonymous namespace'::$_19::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __n128 result;
  simd_float3x3 v8;
  _QWORD v9[2];
  simd_float3x3 v10;

  v9[0] = a1;
  v9[1] = a2;
  if (a2 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    do
    {
      v8 = __invert_f3(v10);
      *(_QWORD *)v6 = v8.columns[0].i64[0];
      *(_DWORD *)(v6 + 8) = v8.columns[0].i32[2];
      *(_QWORD *)(v6 + 16) = v8.columns[1].i64[0];
      *(_DWORD *)(v6 + 24) = v8.columns[1].i32[2];
      result = (__n128)v8.columns[2];
      *(_QWORD *)(v6 + 32) = v8.columns[2].i64[0];
      *(_DWORD *)(v6 + 40) = v8.columns[2].i32[2];
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

void re::`anonymous namespace'::$_20::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  simd_float4x4 v13;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = a2 >> 1;
    while (a2 > v6)
    {
      v8 = *(_QWORD *)(a1 + 8 * v6);
      v9 = *(_QWORD *)(a3 + 72);
      if (v9 <= v8)
        goto LABEL_10;
      v13 = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a3 + 64) + (v8 << 6)));
      v10 = v6 + 1;
      if (a2 <= v6 + 1)
        goto LABEL_11;
      v11 = *(_QWORD *)(a1 + 8 * v6 + 8);
      v12 = *(_QWORD *)(a3 + 72);
      if (v12 <= v11)
        goto LABEL_12;
      *(simd_float4x4 *)(*(_QWORD *)(a3 + 64) + (v11 << 6)) = v13;
      v6 += 2;
      if (!--v7)
        return;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
    _os_crash();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v9);
    _os_crash();
    __break(1u);
LABEL_11:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v12);
    _os_crash();
    __break(1u);
  }
}

_OWORD *re::`anonymous namespace'::$_21::__invoke(_OWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  _QWORD v10[2];

  v10[0] = result;
  v10[1] = a2;
  if (a2 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    do
    {
      v7 = (int8x16_t)vmulq_f32(*v6, *v6);
      *(float *)v7.i32 = 1.0
                       / vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
      v8 = vmulq_n_f32(vnegq_f32(*v6), *(float *)v7.i32);
      v8.i32[3] = vmuls_lane_f32(*(float *)v7.i32, *v6, 3);
      v9 = v8;
      *result = v9;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_22::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float32x4_t v14;

  if (a2 >= 3)
  {
    v3 = 0;
    v4 = a2 / 3;
    v6 = a3[14];
    v5 = a3[15];
    v8 = a3[4];
    v7 = a3[5];
    while (a2 > v3)
    {
      v9 = *(_QWORD *)(result + 8 * v3);
      if (v5 <= v9)
        goto LABEL_12;
      v10 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_13;
      v11 = *(_QWORD *)(result + 8 * v3 + 8);
      if (v5 <= v11)
        goto LABEL_14;
      v12 = v3 + 2;
      if (a2 <= v3 + 2)
        goto LABEL_15;
      v13 = *(_QWORD *)(result + 8 * v3 + 16);
      if (v7 <= v13)
        goto LABEL_16;
      v14 = vmulq_f32(*(float32x4_t *)(v6 + 16 * v9), *(float32x4_t *)(v6 + 16 * v11));
      *(_DWORD *)(v8 + 4 * v13) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).u32[0];
      v3 += 3;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9, v5);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v5);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v12, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v13, v7);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_23::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (a2 >= 3)
  {
    v3 = 0;
    v4 = a2 / 3;
    v6 = a3[12];
    v5 = a3[13];
    v8 = a3[4];
    v7 = a3[5];
    while (a2 > v3)
    {
      v9 = *(_QWORD *)(result + 8 * v3);
      if (v5 <= v9)
        goto LABEL_12;
      v10 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_13;
      v11 = *(_QWORD *)(result + 8 * v3 + 8);
      if (v5 <= v11)
        goto LABEL_14;
      v12 = v3 + 2;
      if (a2 <= v3 + 2)
        goto LABEL_15;
      v13 = *(_QWORD *)(result + 8 * v3 + 16);
      if (v7 <= v13)
        goto LABEL_16;
      *(float *)(v8 + 4 * v13) = vaddv_f32(vmul_f32(*(float32x2_t *)(v6 + 8 * v9), *(float32x2_t *)(v6 + 8 * v11)));
      v3 += 3;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9, v5);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v5);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v12, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v13, v7);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

__n128 re::`anonymous namespace'::$_24::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  int32x4_t *v7;
  int32x4_t v9;
  float32x4_t v10;
  _OWORD *v17;
  __n128 result;
  __n128 v19;
  _QWORD v20[2];

  v20[0] = a1;
  v20[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      _Q0 = *(int32x4_t *)v6;
      v9 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*v7, *v7), *(int8x16_t *)v7, 0xCuLL), vnegq_f32(*v6)), *(float32x4_t *)v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q0, _Q0), *(int8x16_t *)v6, 0xCuLL));
      v10 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v9, v9), (int8x16_t)v9, 0xCuLL), *(float32x4_t *)v7, *v6, 3), *v6, *(float32x4_t *)v7, 3);
      _S1 = HIDWORD(*(unsigned __int128 *)v7);
      __asm { FMLA            S2, S1, V0.S[3] }
      v10.i32[3] = _S2;
      v19 = (__n128)v10;
      result = v19;
      *v17 = v19;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

__n128 re::`anonymous namespace'::$_25::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  _OWORD *v7;
  __n128 result;
  float32x4_t v9;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      result = (__n128)v9;
      *v7 = v9;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_26::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (a2 >= 3)
  {
    v3 = 0;
    v4 = a2 / 3;
    while (a2 > v3)
    {
      v5 = *(_QWORD *)(result + 8 * v3);
      v6 = a3[15];
      if (v6 <= v5)
        goto LABEL_12;
      v7 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_13;
      v8 = *(_QWORD *)(result + 8 * v3 + 8);
      v9 = a3[5];
      if (v9 <= v8)
        goto LABEL_14;
      v10 = v3 + 2;
      if (a2 <= v3 + 2)
        goto LABEL_15;
      v11 = *(_QWORD *)(result + 8 * v3 + 16);
      if (v6 <= v11)
        goto LABEL_16;
      *(float32x4_t *)(a3[14] + 16 * v11) = vmulq_n_f32(*(float32x4_t *)(a3[14] + 16 * v5), *(float *)(a3[4] + 4 * v8));
      v3 += 3;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v9);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v6);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_27::__invoke(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t *v11;
  __int128 *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;

  if (a2 >= 3)
  {
    v3 = 0;
    while (1)
    {
      v4 = 3 * v3;
      if (a2 <= 3 * v3)
        break;
      v5 = *(_QWORD *)(result + 24 * v3);
      v6 = *(_QWORD *)(a3 + 56);
      if (v6 <= v5)
        goto LABEL_14;
      v7 = v4 + 1;
      if (a2 <= v4 + 1)
        goto LABEL_15;
      v8 = *(_QWORD *)(result + 8 * v7);
      if (v6 <= v8)
        goto LABEL_16;
      v9 = 0;
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (float32x4_t *)(v10 + 48 * v5);
      v12 = (__int128 *)(v10 + 48 * v8);
      v13 = *v11;
      v14 = v11[1];
      v15 = v11[2];
      v16 = v12[1];
      v17 = v12[2];
      v24 = *v12;
      v25 = v16;
      v26 = v17;
      do
      {
        *(float32x4_t *)((char *)&v27 + v9) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(__int128 *)((char *)&v24 + v9))), v14, *(float32x2_t *)((char *)&v24 + v9), 1), v15, *(float32x4_t *)((char *)&v24 + v9), 2);
        v9 += 16;
      }
      while (v9 != 48);
      v18 = v4 + 2;
      if (a2 <= v18)
        goto LABEL_17;
      v19 = *(_QWORD *)(result + 8 * v18);
      if (v6 <= v19)
        goto LABEL_18;
      v20 = v28;
      v21 = v29;
      v22 = v30;
      v23 = v10 + 48 * v19;
      *(_QWORD *)v23 = v27;
      *(_DWORD *)(v23 + 8) = v20;
      *(_QWORD *)(v23 + 16) = v21;
      *(_DWORD *)(v23 + 24) = DWORD2(v21);
      *(_QWORD *)(v23 + 32) = v22;
      *(_DWORD *)(v23 + 40) = DWORD2(v22);
      if (++v3 == a2 / 3)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * v3, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6, v24, v25, v26);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v6);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v18, a2);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v19, v6);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_28::__invoke(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[4];

  if (a2 >= 3)
  {
    v3 = 0;
    while (1)
    {
      v4 = 3 * v3;
      if (a2 <= 3 * v3)
        break;
      v5 = *(_QWORD *)(result + 24 * v3);
      v6 = *(_QWORD *)(a3 + 72);
      if (v6 <= v5)
        goto LABEL_14;
      v7 = v4 + 1;
      if (a2 <= v4 + 1)
        goto LABEL_15;
      v8 = *(_QWORD *)(result + 8 * v7);
      if (v6 <= v8)
        goto LABEL_16;
      v9 = 0;
      v10 = *(_QWORD *)(a3 + 64);
      v11 = (float32x4_t *)(v10 + (v5 << 6));
      v12 = *v11;
      v13 = v11[1];
      v14 = v11[2];
      v15 = v11[3];
      v16 = (__int128 *)(v10 + (v8 << 6));
      v17 = v16[1];
      v18 = v16[2];
      v19 = v16[3];
      v26 = *v16;
      v27 = v17;
      v28 = v18;
      v29 = v19;
      do
      {
        v30[v9 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(__int128 *)((char *)&v26 + v9))), v13, *(float32x2_t *)((char *)&v26 + v9), 1), v14, *(float32x4_t *)((char *)&v26 + v9), 2), v15, *(float32x4_t *)((char *)&v26 + v9), 3);
        v9 += 16;
      }
      while (v9 != 64);
      v20 = v4 + 2;
      if (a2 <= v20)
        goto LABEL_17;
      v21 = *(_QWORD *)(result + 8 * v20);
      if (v6 <= v21)
        goto LABEL_18;
      v22 = v30[1];
      v23 = v30[2];
      v24 = v30[3];
      v25 = (_OWORD *)(v10 + (v21 << 6));
      *v25 = v30[0];
      v25[1] = v22;
      v25[2] = v23;
      v25[3] = v24;
      if (++v3 == a2 / 3)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * v3, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6, v26, v27, v28, v29);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v6);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, a2);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v21, v6);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_29::__invoke(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;

  if (a2 >= 2)
  {
    v3 = 0;
    v4 = a2 >> 1;
    while (a2 > v3)
    {
      v5 = *(_QWORD *)(result + 8 * v3);
      v6 = *(_QWORD *)(a3 + 120);
      if (v6 <= v5)
        goto LABEL_10;
      v7 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_11;
      v8 = *(_QWORD *)(result + 8 * v3 + 8);
      if (v6 <= v8)
        goto LABEL_12;
      v9 = *(_QWORD *)(a3 + 112);
      v10 = *(float32x4_t *)(v9 + 16 * v5);
      v11 = (int32x4_t)vmulq_f32(v10, v10);
      v11.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
      v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
      v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
      *(float32x4_t *)(v9 + 16 * v8) = vmulq_n_f32(v10, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
      v3 += 2;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
    _os_crash();
    __break(1u);
LABEL_11:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v6);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_30::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;

  if (a2 >= 3)
  {
    v3 = 0;
    v4 = a2 / 3;
    while (a2 > v3)
    {
      v5 = *(_QWORD *)(result + 8 * v3);
      v6 = a3[11];
      if (v6 <= v5)
        goto LABEL_12;
      v7 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_13;
      v8 = *(_QWORD *)(result + 8 * v3 + 8);
      v9 = a3[15];
      if (v9 <= v8)
        goto LABEL_14;
      v10 = v3 + 2;
      if (a2 <= v3 + 2)
        goto LABEL_15;
      v11 = *(_QWORD *)(result + 8 * v3 + 16);
      if (v9 <= v11)
        goto LABEL_16;
      v12 = a3[14];
      v13 = *(float32x4_t *)(a3[10] + 16 * v5);
      v14 = *(float32x4_t *)(v12 + 16 * v8);
      v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
      v16 = vnegq_f32(v13);
      v17 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL), v16), v14, v15);
      v18 = (int32x4_t)vaddq_f32(v17, v17);
      v19 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL);
      v20 = vaddq_f32(v14, vmulq_laneq_f32(v19, v13, 3));
      v21 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), v16), v19, v15);
      *(float32x4_t *)(v12 + 16 * v11) = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL));
      v3 += 3;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v9);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v9);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

__n128 re::`anonymous namespace'::$_31::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  _OWORD *v7;
  __n128 result;
  float32x4_t v9;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      result = (__n128)v9;
      *v7 = v9;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

_QWORD *re::`anonymous namespace'::$_32::__invoke(_QWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x2_t *v6;
  float32x2_t v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

__n128 re::`anonymous namespace'::$_33::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  int32x4_t v13;
  _QWORD v14[2];

  v14[0] = a1;
  v14[1] = a2;
  if (a2 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    do
    {
      v7 = *(int32x4_t *)(v6 + 16);
      v10 = *(_OWORD *)(v6 + 32);
      v11 = vzip1q_s32(*(int32x4_t *)v6, v7).u64[0];
      v12 = vtrn2q_s32(*(int32x4_t *)v6, v7).u64[0];
      v13 = vzip1q_s32(vdupq_laneq_s32(*(int32x4_t *)v6, 2), vdupq_laneq_s32(v7, 2));
      *(_DWORD *)(v8 + 8) = v10;
      *(_QWORD *)v8 = v11;
      *(_QWORD *)(v8 + 16) = v12;
      *(_DWORD *)(v8 + 24) = DWORD1(v10);
      *(_DWORD *)(v8 + 40) = DWORD2(v10);
      result = (__n128)v13;
      *(_QWORD *)(v8 + 32) = v13.i64[0];
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_34::__invoke(uint64_t result, unint64_t a2, _QWORD *a3, __n128 a4, __n128 a5, __n128 a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __n128 *v14;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = a2 >> 1;
    while (a2 > v6)
    {
      v8 = *(_QWORD *)(result + 8 * v6);
      v9 = a3[9];
      if (v9 <= v8)
        goto LABEL_10;
      v10 = v6 + 1;
      if (a2 <= v6 + 1)
        goto LABEL_11;
      v11 = *(_QWORD *)(result + 8 * v6 + 8);
      v12 = a3[7];
      if (v12 <= v11)
        goto LABEL_12;
      v13 = a3[8] + (v8 << 6);
      a4.n128_u64[0] = *(_QWORD *)v13;
      a5.n128_u64[0] = *(_QWORD *)(v13 + 16);
      a6.n128_u64[0] = *(_QWORD *)(v13 + 32);
      a4.n128_u32[2] = *(_DWORD *)(v13 + 8);
      a5.n128_u32[2] = *(_DWORD *)(v13 + 24);
      a6.n128_u32[2] = *(_DWORD *)(v13 + 40);
      v14 = (__n128 *)(a3[6] + 48 * v11);
      *v14 = a4;
      v14[1] = a5;
      v14[2] = a6;
      v6 += 2;
      if (!--v7)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
    _os_crash();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v9);
    _os_crash();
    __break(1u);
LABEL_11:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v12);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_35::__invoke(uint64_t result, unint64_t a2, _QWORD *a3, double a4, double a5, double a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  float v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float v36;
  __int128 v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float v46;
  float32_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float v58;
  unsigned int v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;

  if (a2 >= 2)
  {
    v6 = 0;
    v7 = a2 >> 1;
    LODWORD(a4) = 1.0;
    LODWORD(a5) = 2.0;
    LODWORD(a6) = 0.25;
    while (a2 > v6)
    {
      v8 = *(_QWORD *)(result + 8 * v6);
      v9 = a3[7];
      if (v9 <= v8)
        goto LABEL_18;
      v10 = a3[6] + 48 * v8;
      v11 = *(float32x4_t *)(v10 + 16);
      v12 = (int32x4_t)vmulq_f32(*(float32x4_t *)v10, *(float32x4_t *)v10);
      v12.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
      v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
      v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
      v15 = vmulq_n_f32(*(float32x4_t *)v10, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]);
      v16 = vmulq_f32(v11, v15);
      v17 = vmulq_f32(v15, v15);
      v18 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0];
      v19 = vsubq_f32(v11, vmulq_n_f32(v15, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]/ v18));
      v20 = (int32x4_t)vmulq_f32(v19, v19);
      v20.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v20, 2), vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1))).u32[0];
      *(float32x2_t *)v17.f32 = vrsqrte_f32((float32x2_t)v20.u32[0]);
      *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32)));
      v21 = vmulq_n_f32(v19, vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32))).f32[0]);
      v22 = *(float32x4_t *)(v10 + 32);
      v23 = vmulq_f32(v15, v22);
      v24 = vmulq_n_f32(v15, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]/ v18);
      v25 = vmulq_f32(v22, v21);
      v26 = vsubq_f32(v22, v24);
      v24.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0];
      v27 = vmulq_f32(v21, v21);
      v28 = vsubq_f32(v26, vmulq_n_f32(v21, v24.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]));
      v29 = (int32x4_t)vmulq_f32(v28, v28);
      v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
      *(float32x2_t *)v27.f32 = vrsqrte_f32((float32x2_t)v29.u32[0]);
      *(float32x2_t *)v27.f32 = vmul_f32(*(float32x2_t *)v27.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32)));
      v30 = (int32x4_t)vmulq_n_f32(v28, vmul_f32(*(float32x2_t *)v27.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v27.f32, *(float32x2_t *)v27.f32))).f32[0]);
      v31 = (float)(v15.f32[0] + v21.f32[1]) + *(float *)&v30.i32[2];
      if (v31 >= 0.0)
      {
        v46 = sqrtf(v31 + 1.0);
        v47 = v46 + v46;
        v48 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v46 + v46));
        v49 = vmul_f32(v48, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v46 + v46), v48));
        v49.i32[0] = vmul_f32(v49, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v46 + v46), v49)).u32[0];
        *(float32x2_t *)&v42 = vmul_n_f32(vsub_f32((float32x2_t)*(_OWORD *)&vzip2q_s32((int32x4_t)v21, vuzp1q_s32((int32x4_t)v21, v30)), (float32x2_t)*(_OWORD *)&vtrn2q_s32(v30, vzip2q_s32(v30, (int32x4_t)v15))), v49.f32[0]);
        v50.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v15.f32, 1), *(float32x2_t *)v21.f32).u32[0];
        v50.f32[1] = v47;
        v49.i32[1] = 0.25;
        v45 = vmul_f32(v50, v49);
      }
      else if (v15.f32[0] < v21.f32[1] || v15.f32[0] < *(float *)&v30.i32[2])
      {
        v51 = 1.0 - v15.f32[0];
        if (v21.f32[1] >= *(float *)&v30.i32[2])
        {
          v58 = sqrtf(v21.f32[1] + (float)(v51 - *(float *)&v30.i32[2]));
          *(float *)&v59 = v58 + v58;
          v60 = vrecpe_f32((float32x2_t)v59);
          v61 = vmul_f32(v60, vrecps_f32((float32x2_t)v59, v60));
          v62.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v15.f32, 1), *(float32x2_t *)v21.f32).u32[0];
          v62.i32[1] = v59;
          v63 = (float32x2_t)vrev64_s32(*(int32x2_t *)v30.i8);
          v64 = (float32x2_t)vzip2q_s32((int32x4_t)v21, (int32x4_t)v15).u64[0];
          v65.i32[0] = vadd_f32(v63, v64).u32[0];
          v65.i32[1] = vsub_f32(v63, v64).i32[1];
          v63.i32[0] = vmul_f32(v61, vrecps_f32((float32x2_t)v59, v61)).u32[0];
          v45 = vmul_n_f32(v65, v63.f32[0]);
          v63.i32[1] = 0.25;
          *(float32x2_t *)&v42 = vmul_f32(v62, v63);
        }
        else
        {
          *(float32x2_t *)v30.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32((int32x4_t)v15, (int32x4_t)v21), *(float32x2_t *)v30.i8);
          v52 = (float32x2_t)__PAIR64__(v15.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)(v51 - v21.f32[1]) + *(float *)&v30.i32[2])));
          v53 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.f32, 0);
          v54 = vsub_f32(*(float32x2_t *)v15.f32, v53);
          v53.i32[0] = 2.0;
          v53.i32[0] = vmul_f32(v52, v53).u32[0];
          v53.i32[1] = v54.i32[1];
          v55 = vrecpe_f32((float32x2_t)v53.u32[0]);
          v56 = vmul_f32(v55, vrecps_f32((float32x2_t)v53.u32[0], v55));
          v54.i32[0] = vmul_f32(v56, vrecps_f32((float32x2_t)v53.u32[0], v56)).u32[0];
          *(float32x2_t *)&v42 = vmul_n_f32(*(float32x2_t *)v30.i8, v54.f32[0]);
          __asm { FMOV            V5.2S, #0.25 }
          _D5.i32[1] = v54.i32[0];
          v45 = vmul_f32(v53, _D5);
        }
      }
      else
      {
        v32 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.f32, 0);
        v33 = vadd_f32(*(float32x2_t *)v15.f32, v32);
        v32.i32[0] = 2.0;
        v32.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v15.u32[1], COERCE_UNSIGNED_INT(sqrtf(v15.f32[0] + (float)((float)(1.0 - v21.f32[1])- *(float *)&v30.i32[2])))), v32).u32[0];
        v32.i32[1] = v33.i32[1];
        v34 = vrecpe_f32((float32x2_t)v32.u32[0]);
        v35 = vmul_f32(v34, vrecps_f32((float32x2_t)v32.u32[0], v34));
        LODWORD(v36) = vmul_f32(v35, vrecps_f32((float32x2_t)v32.u32[0], v35)).u32[0];
        __asm { FMOV            V16.2S, #0.25 }
        _D16.f32[1] = v36;
        *(float32x2_t *)&v42 = vmul_f32(v32, _D16);
        v43 = (float32x2_t)vzip2q_s32((int32x4_t)v15, (int32x4_t)v21).u64[0];
        v44.i32[0] = vadd_f32(v43, *(float32x2_t *)v30.i8).u32[0];
        v44.i32[1] = vsub_f32(v43, *(float32x2_t *)&v30).i32[1];
        v45 = vmul_n_f32(v44, v36);
      }
      v66 = v6 + 1;
      if (a2 <= v6 + 1)
        goto LABEL_19;
      v67 = *(_QWORD *)(result + 8 * v6 + 8);
      v68 = a3[11];
      if (v68 <= v67)
        goto LABEL_20;
      *((float32x2_t *)&v42 + 1) = v45;
      *(_OWORD *)(a3[10] + 16 * v67) = v42;
      v6 += 2;
      if (!--v7)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, a4, a5, a6, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v9);
    _os_crash();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v66, a2);
    _os_crash();
    __break(1u);
LABEL_20:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v67, v68);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_36::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;

  if (a2 >= 2)
  {
    v3 = 0;
    v4 = a2 >> 1;
    while (a2 > v3)
    {
      v5 = *(_QWORD *)(result + 8 * v3);
      v6 = a3[7];
      if (v6 <= v5)
        goto LABEL_10;
      v7 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_11;
      v8 = *(_QWORD *)(result + 8 * v3 + 8);
      v9 = a3[15];
      if (v9 <= v8)
        goto LABEL_12;
      v10 = (float32x4_t *)(a3[6] + 48 * v5);
      v11 = vmulq_f32(*v10, *v10);
      v12 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)));
      v12.f32[0] = sqrtf(v12.f32[0]);
      v13 = vmulq_f32(v10[1], v10[1]);
      v14 = vmulq_f32(v10[2], v10[2]);
      v12.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
      v12.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
      *(float32x4_t *)(a3[14] + 16 * v8) = v12;
      v3 += 2;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
    _os_crash();
    __break(1u);
LABEL_11:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v9);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_37::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (a2 >= 2)
  {
    v3 = 0;
    v4 = a2 >> 1;
    while (a2 > v3)
    {
      v5 = *(_QWORD *)(result + 8 * v3);
      v6 = a3[9];
      if (v6 <= v5)
        goto LABEL_10;
      v7 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_11;
      v8 = *(_QWORD *)(result + 8 * v3 + 8);
      v9 = a3[15];
      if (v9 <= v8)
        goto LABEL_12;
      *(_OWORD *)(a3[14] + 16 * v8) = *(_OWORD *)(a3[8] + (v5 << 6) + 48);
      v3 += 2;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
    _os_crash();
    __break(1u);
LABEL_11:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v9);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_38::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _OWORD *v19;

  if (a2 >= 4)
  {
    v3 = 0;
    v4 = a2 >> 2;
    v5 = (uint64_t *)(result + 16);
    while (a2 > v3)
    {
      v6 = *(v5 - 2);
      v7 = a3[15];
      if (v7 <= v6)
        goto LABEL_14;
      v8 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_15;
      v9 = *(v5 - 1);
      if (v7 <= v9)
        goto LABEL_16;
      v10 = v3 + 2;
      if (a2 <= v3 + 2)
        goto LABEL_17;
      v11 = *v5;
      if (v7 <= *v5)
        goto LABEL_18;
      v12 = v3 + 3;
      if (a2 <= v3 + 3)
        goto LABEL_19;
      v13 = v5[1];
      v14 = a3[7];
      if (v14 <= v13)
        goto LABEL_20;
      v15 = a3[14];
      v16 = *(_OWORD *)(v15 + 16 * v6);
      v17 = *(_OWORD *)(v15 + 16 * v9);
      v18 = *(_OWORD *)(v15 + 16 * v11);
      v19 = (_OWORD *)(a3[6] + 48 * v13);
      *v19 = v16;
      v19[1] = v17;
      v19[2] = v18;
      v3 += 4;
      v5 += 4;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v6, v7);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9, v7);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v7);
    _os_crash();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v12, a2);
    _os_crash();
    __break(1u);
LABEL_20:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v13, v14);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_39::__invoke(uint64_t result, unint64_t a2, _QWORD *a3, double a4, double a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  float *v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  float32x4_t v44;
  float32x4_t v45;

  if (a2 >= 3)
  {
    v8 = 0;
    LODWORD(a4) = 1.0;
    while (1)
    {
      v9 = 3 * v8;
      if (a2 <= 3 * v8)
        break;
      v10 = *(_QWORD *)(result + 24 * v8);
      v11 = a3[15];
      if (v11 <= v10)
        goto LABEL_14;
      v12 = (unsigned int *)(a3[14] + 16 * v10);
      v13 = *v12;
      v14 = v9 + 1;
      if (a2 <= v9 + 1)
        goto LABEL_15;
      v15 = *(_QWORD *)(result + 8 * v14);
      v16 = a3[11];
      if (v16 <= v15)
        goto LABEL_16;
      v17 = 0;
      LODWORD(v18) = 0;
      HIDWORD(v18) = v12[1];
      *(_QWORD *)&v19 = 0;
      *((_QWORD *)&v19 + 1) = v12[2];
      v20 = (float *)(a3[10] + 16 * v15);
      v21 = *v20;
      v22 = v20[1];
      v23 = v22 + v22;
      v24 = v20[2];
      v25 = v20[3];
      v26 = v24 + v24;
      v27 = v21 * (float)(v21 + v21);
      v28 = v22 * (float)(v22 + v22);
      v29 = v24 * (float)(v24 + v24);
      v30 = (float)(v21 + v21) * v22;
      v31 = (float)(v21 + v21) * v24;
      v32 = v23 * v24;
      v33 = (float)(v21 + v21) * v25;
      a6.f32[0] = 1.0 - (float)(v28 + v29);
      a6.f32[1] = v30 + (float)(v26 * v25);
      a7.f32[0] = v30 - (float)(v26 * v25);
      v39 = v13;
      v40 = v18;
      v41 = v19;
      do
      {
        a7.f32[2] = v32 + v33;
        a8.f32[2] = 1.0 - (float)(v27 + v28);
        a7.f32[1] = 1.0 - (float)(v27 + v29);
        a8.f32[1] = v32 - v33;
        a6.f32[2] = v31 - (float)(v23 * v25);
        a8.f32[0] = v31 + (float)(v23 * v25);
        *(float32x4_t *)((char *)&v42 + v17) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a6, COERCE_FLOAT(*(__int128 *)((char *)&v39 + v17))), a7, *(float32x2_t *)((char *)&v39 + v17), 1), a8, *(float32x4_t *)((char *)&v39 + v17), 2);
        v17 += 16;
      }
      while (v17 != 48);
      v34 = v9 + 2;
      if (a2 <= v34)
        goto LABEL_17;
      v35 = *(_QWORD *)(result + 8 * v34);
      v36 = a3[7];
      if (v36 <= v35)
        goto LABEL_18;
      v37 = v43;
      a6 = v44;
      a7 = v45;
      v38 = a3[6] + 48 * v35;
      *(_QWORD *)v38 = v42;
      *(_DWORD *)(v38 + 8) = v37;
      *(_QWORD *)(v38 + 16) = a6.i64[0];
      *(_DWORD *)(v38 + 24) = a6.i32[2];
      *(_QWORD *)(v38 + 32) = a7.i64[0];
      *(_DWORD *)(v38 + 40) = a7.i32[2];
      if (++v8 == a2 / 3)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, a4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * v8, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v10, v11, v39, v40, v41);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v15, v16);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v34, a2);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v35, v36);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_40::__invoke(uint64_t result, unint64_t a2, _QWORD *a3, double a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;
  _QWORD *v21;
  __int128 v22;
  _OWORD *v23;

  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    LODWORD(a4) = 1.0;
    while (a2 > v4)
    {
      v6 = *(_QWORD *)(result + 8 * v4);
      v7 = a3[7];
      if (v7 <= v6)
        goto LABEL_12;
      v8 = v4 + 1;
      if (a2 <= v4 + 1)
        goto LABEL_13;
      v9 = *(_QWORD *)(result + 8 * v4 + 8);
      v10 = a3[15];
      if (v10 <= v9)
        goto LABEL_14;
      v11 = v4 + 2;
      if (a2 <= v4 + 2)
        goto LABEL_15;
      v12 = *(_QWORD *)(result + 8 * v4 + 16);
      v13 = a3[9];
      if (v13 <= v12)
        goto LABEL_16;
      v14 = a3[6] + 48 * v6;
      *(_QWORD *)&v15 = *(_QWORD *)v14;
      v16 = *(_DWORD *)(v14 + 8);
      *(_QWORD *)&v17 = *(_QWORD *)(v14 + 16);
      v18 = *(_DWORD *)(v14 + 24);
      *(_QWORD *)&v19 = *(_QWORD *)(v14 + 32);
      v20 = *(_DWORD *)(v14 + 40);
      v21 = (_QWORD *)(a3[14] + 16 * v9);
      *(_QWORD *)&v22 = *v21;
      *((_QWORD *)&v15 + 1) = v16;
      *((_QWORD *)&v17 + 1) = v18;
      *((_QWORD *)&v19 + 1) = v20;
      DWORD2(v22) = v21[1];
      HIDWORD(v22) = 1.0;
      v23 = (_OWORD *)(a3[8] + (v12 << 6));
      *v23 = v15;
      v23[1] = v17;
      v23[2] = v19;
      v23[3] = v22;
      v4 += 3;
      if (!--v5)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, a4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v6, v7);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9, v10);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v13);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_41::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a2 >= 3)
  {
    v3 = 0;
    v4 = a2 / 3;
    while (a2 > v3)
    {
      v5 = *(_QWORD *)(result + 8 * v3);
      v6 = a3[7];
      if (v6 <= v5)
        goto LABEL_12;
      v7 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_13;
      v8 = *(_QWORD *)(result + 8 * v3 + 8);
      v9 = a3[15];
      if (v9 <= v8)
        goto LABEL_14;
      v10 = v3 + 2;
      if (a2 <= v3 + 2)
        goto LABEL_15;
      v11 = *(_QWORD *)(result + 8 * v3 + 16);
      if (v9 <= v11)
        goto LABEL_16;
      v12 = a3[14];
      *(float32x4_t *)(v12 + 16 * v11) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(a3[6] + 48 * v5), COERCE_FLOAT(*(_OWORD *)(v12 + 16 * v8))), *(float32x4_t *)(a3[6] + 48 * v5 + 16), *(float32x2_t *)(v12 + 16 * v8), 1), *(float32x4_t *)(a3[6] + 48 * v5 + 32), *(float32x4_t *)(v12 + 16 * v8), 2);
      v3 += 3;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v9);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v9);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

__n128 re::`anonymous namespace'::$_42::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  float32x2_t *v7;
  _OWORD *v8;
  __n128 result;
  float32x4_t v10;
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v10 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v6, COERCE_FLOAT(*(_OWORD *)v7->f32)), v6[1], *v7, 1), v6[2], *(float32x4_t *)v7->f32, 2);
      result = (__n128)v10;
      *v8 = v10;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

__n128 re::`anonymous namespace'::$_43::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float32x4_t *v6;
  float32x2_t *v7;
  float32x4_t v8;
  _OWORD *v9;
  __n128 result;
  float32x4_t v11;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v8 = vaddq_f32(v6[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v6, COERCE_FLOAT(*(_OWORD *)v7->f32)), v6[1], *v7, 1), v6[2], *(float32x4_t *)v7->f32, 2));
      v11 = vdivq_f32(v8, (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 3));
      result = (__n128)v11;
      *v9 = v11;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_44::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int8x16_t v14;

  if (a2 >= 3)
  {
    v3 = 0;
    v4 = a2 / 3;
    v6 = a3[10];
    v5 = a3[11];
    v8 = a3[4];
    v7 = a3[5];
    while (a2 > v3)
    {
      v9 = *(_QWORD *)(result + 8 * v3);
      if (v5 <= v9)
        goto LABEL_12;
      v10 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_13;
      v11 = *(_QWORD *)(result + 8 * v3 + 8);
      if (v5 <= v11)
        goto LABEL_14;
      v12 = v3 + 2;
      if (a2 <= v3 + 2)
        goto LABEL_15;
      v13 = *(_QWORD *)(result + 8 * v3 + 16);
      if (v7 <= v13)
        goto LABEL_16;
      v14 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v6 + 16 * v9), *(float32x4_t *)(v6 + 16 * v11));
      *(float *)(v8 + 4 * v13) = vaddv_f32(vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)));
      v3 += 3;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v9, v5);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v5);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v12, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v13, v7);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

_OWORD *re::`anonymous namespace'::$_45::__invoke(_OWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  __float2 v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  _QWORD v11[2];

  v11[0] = result;
  v11[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v7 = __sincosf_stret(v6 * 0.5);
      v8 = vmulq_n_f32(v9, v7.__sinval);
      v8.i32[3] = LODWORD(v7.__cosval);
      v10 = v8;
      *result = v10;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

__n128 re::`anonymous namespace'::$_46::__invoke(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  unsigned __int32 *v7;
  __n128 v8;
  _OWORD *v9;
  __n128 result;
  __n128 v11;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v8 = *v6;
      v8.n128_u32[3] = *v7;
      v11 = v8;
      result = v11;
      *v9 = v11;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_47::__invoke(uint64_t result, unint64_t a2, _QWORD *a3, __n128 a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  if (a2 >= 4)
  {
    v4 = 0;
    v5 = a2 >> 2;
    v6 = (uint64_t *)(result + 16);
    while (a2 > v4)
    {
      v7 = *(v6 - 2);
      v8 = a3[5];
      if (v8 <= v7)
        goto LABEL_14;
      v9 = v4 + 1;
      if (a2 <= v4 + 1)
        goto LABEL_15;
      v10 = *(v6 - 1);
      if (v8 <= v10)
        goto LABEL_16;
      v11 = v4 + 2;
      if (a2 <= v4 + 2)
        goto LABEL_17;
      v12 = *v6;
      if (v8 <= *v6)
        goto LABEL_18;
      v13 = v4 + 3;
      if (a2 <= v4 + 3)
        goto LABEL_19;
      v14 = v6[1];
      v15 = a3[15];
      if (v15 <= v14)
        goto LABEL_20;
      v16 = a3[4];
      a4.n128_u32[0] = *(_DWORD *)(v16 + 4 * v7);
      a4.n128_u32[1] = *(_DWORD *)(v16 + 4 * v10);
      a4.n128_u32[2] = *(_DWORD *)(v16 + 4 * v12);
      *(__n128 *)(a3[14] + 16 * v14) = a4;
      v4 += 4;
      v6 += 4;
      if (!--v5)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v7, v8);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v10, v8);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, a2);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v8);
    _os_crash();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, a2);
    _os_crash();
    __break(1u);
LABEL_20:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v14, v15);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_48::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2 >= 3)
  {
    v3 = 0;
    v4 = a2 / 3;
    while (a2 > v3)
    {
      v5 = *(_QWORD *)(result + 8 * v3);
      v6 = a3[5];
      if (v6 <= v5)
        goto LABEL_12;
      v7 = v3 + 1;
      if (a2 <= v3 + 1)
        goto LABEL_13;
      v8 = *(_QWORD *)(result + 8 * v3 + 8);
      if (v6 <= v8)
        goto LABEL_14;
      v9 = v3 + 2;
      if (a2 <= v3 + 2)
        goto LABEL_15;
      v10 = *(_QWORD *)(result + 8 * v3 + 16);
      v11 = a3[13];
      if (v11 <= v10)
        goto LABEL_16;
      v12 = a3[4];
      LODWORD(v13) = *(_DWORD *)(v12 + 4 * v5);
      HIDWORD(v13) = *(_DWORD *)(v12 + 4 * v8);
      *(_QWORD *)(a3[12] + 8 * v10) = v13;
      v3 += 3;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
    _os_crash();
    __break(1u);
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, a2);
    _os_crash();
    __break(1u);
LABEL_14:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v8, v6);
    _os_crash();
    __break(1u);
LABEL_15:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v10, v11);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

float *re::`anonymous namespace'::$_49::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v7 = v6
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

float *re::`anonymous namespace'::$_50::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v7 = v6
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

float *re::`anonymous namespace'::$_51::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v7 = v6
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

float *re::`anonymous namespace'::$_52::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v7 = v6
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

float *re::`anonymous namespace'::$_53::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    do
    {
      v7 = sinf(*v6);
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

float *re::`anonymous namespace'::$_54::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    do
    {
      v7 = cosf(*v6);
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

float *re::`anonymous namespace'::$_55::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    do
    {
      v7 = tanf(*v6);
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

float *re::`anonymous namespace'::$_56::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    do
    {
      v7 = asinf(*v6);
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

float *re::`anonymous namespace'::$_57::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    do
    {
      v7 = acosf(*v6);
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

float *re::`anonymous namespace'::$_58::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 2)
  {
    v4 = 0;
    v5 = a2 >> 1;
    do
    {
      v7 = atanf(*v6);
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

float *re::`anonymous namespace'::$_59::__invoke(float *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  float *v7;
  float v8;
  _QWORD v9[2];

  v9[0] = result;
  v9[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v8 = atan2f(v6, *v7);
      *result = v8;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

uint64_t re::`anonymous namespace'::$_60::__invoke(uint64_t result, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (a2 >= 4)
  {
    v3 = 0;
    v4 = a2 >> 2;
    v6 = a3[2];
    v5 = a3[3];
    v7 = (unint64_t *)(result + 16);
    v9 = a3[4];
    v8 = a3[5];
    while (a2 > v3)
    {
      v10 = *(v7 - 2);
      if (v5 <= v10)
        goto LABEL_16;
      if (*(_DWORD *)(v6 + 4 * v10))
      {
        v11 = v3 + 1;
        if (a2 <= v3 + 1)
          goto LABEL_19;
        v12 = *(v7 - 1);
        if (v8 <= v12)
          goto LABEL_20;
      }
      else
      {
        v13 = v3 + 2;
        if (a2 <= v3 + 2)
          goto LABEL_21;
        v12 = *v7;
        if (v8 <= *v7)
          goto LABEL_22;
      }
      v14 = v3 + 3;
      if (a2 <= v3 + 3)
        goto LABEL_17;
      v15 = v7[1];
      if (v8 <= v15)
        goto LABEL_18;
      *(_DWORD *)(v9 + 4 * v15) = *(_DWORD *)(v9 + 4 * v12);
      v3 += 4;
      v7 += 4;
      if (!--v4)
        return result;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v3, a2);
    _os_crash();
    __break(1u);
LABEL_16:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v10, v5);
    _os_crash();
    __break(1u);
LABEL_17:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v14, a2);
    _os_crash();
    __break(1u);
LABEL_18:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v15, v8);
    _os_crash();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, a2);
    _os_crash();
    __break(1u);
LABEL_20:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v8);
    _os_crash();
    __break(1u);
LABEL_21:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v13, a2);
    _os_crash();
    __break(1u);
LABEL_22:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v8);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

_DWORD *re::`anonymous namespace'::$_61::__invoke(_DWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  _BOOL4 v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

_DWORD *re::`anonymous namespace'::$_62::__invoke(_DWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  _BOOL4 v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

_DWORD *re::`anonymous namespace'::$_63::__invoke(_DWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  _BOOL4 v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

_DWORD *re::`anonymous namespace'::$_64::__invoke(_DWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  _BOOL4 v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

_DWORD *re::`anonymous namespace'::$_65::__invoke(_DWORD *result, unint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  _BOOL4 v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

_DWORD *re::`anonymous namespace'::$_66::__invoke(_DWORD *result, unint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  _BOOL4 v7;
  _QWORD v8[2];

  v8[0] = result;
  v8[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      *result = v7;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

_DWORD *re::`anonymous namespace'::$_67::__invoke(_DWORD *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL4 v8;
  _QWORD v9[2];

  v9[0] = result;
  v9[1] = a2;
  if (a2 >= 3)
  {
    v4 = 0;
    v5 = a2 / 3;
    do
    {
      v8 = v6 == v7 || vabds_f32(v6, v7) < (float)((float)((float)(fabsf(v6) + fabsf(v7)) + 1.0) * 0.00001);
      *result = v8;
      ++v4;
    }
    while (v5 != v4);
  }
  return result;
}

void re::`anonymous namespace'::$_68::__invoke(_BOOL8 a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint8_t buf[4];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v5 = a1;
    v6 = 0;
    for (i = a2 / 3; i; --i)
    {
      v8 = *re::animationLogObjects((re *)a1);
      v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (v9)
      {
        if (a2 <= v6)
        {
          re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
          _os_crash();
          __break(1u);
LABEL_14:
          re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, a2);
          _os_crash();
          __break(1u);
LABEL_15:
          re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v12);
          _os_crash();
          __break(1u);
LABEL_16:
          re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v17, v18);
          _os_crash();
          __break(1u);
        }
        v11 = *(_QWORD *)(v5 + 8 * v6);
        v12 = a3[3];
        if (v12 <= v11)
          goto LABEL_15;
        v13 = *(_DWORD *)(a3[2] + 4 * v11);
        *(_DWORD *)buf = 67109120;
        v21 = v13;
        _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_INFO, "Int32 %u:", buf, 8u);
      }
      v14 = *re::animationLogObjects((re *)v9);
      a1 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
      if (a1)
      {
        v16 = v6 + 1;
        if (a2 <= v6 + 1)
          goto LABEL_14;
        v17 = *(_QWORD *)(v5 + 8 * v6 + 8);
        v18 = a3[1];
        if (v18 <= v17)
          goto LABEL_16;
        v19 = *(_DWORD *)(*a3 + 4 * v17);
        *(_DWORD *)buf = 67109120;
        v21 = v19;
        _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_INFO, "%i", buf, 8u);
      }
      v6 += 3;
    }
  }
}

void re::`anonymous namespace'::$_69::__invoke(_BOOL8 a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint8_t buf[4];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v5 = a1;
    v6 = 0;
    for (i = a2 / 3; i; --i)
    {
      v8 = *re::animationLogObjects((re *)a1);
      v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (v9)
      {
        if (a2 <= v6)
        {
          re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
          _os_crash();
          __break(1u);
LABEL_14:
          re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, a2);
          _os_crash();
          __break(1u);
LABEL_15:
          re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v12);
          _os_crash();
          __break(1u);
LABEL_16:
          re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v17, v18);
          _os_crash();
          __break(1u);
        }
        v11 = *(_QWORD *)(v5 + 8 * v6);
        v12 = *(_QWORD *)(a3 + 24);
        if (v12 <= v11)
          goto LABEL_15;
        v13 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v11);
        *(_DWORD *)buf = 67109120;
        v21 = v13;
        _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_INFO, "UInt32 %u:", buf, 8u);
      }
      v14 = *re::animationLogObjects((re *)v9);
      a1 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
      if (a1)
      {
        v16 = v6 + 1;
        if (a2 <= v6 + 1)
          goto LABEL_14;
        v17 = *(_QWORD *)(v5 + 8 * v6 + 8);
        v18 = *(_QWORD *)(a3 + 24);
        if (v18 <= v17)
          goto LABEL_16;
        v19 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v17);
        *(_DWORD *)buf = 67109120;
        v21 = v19;
        _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_INFO, "%u", buf, 8u);
      }
      v6 += 3;
    }
  }
}

void re::`anonymous namespace'::$_70::__invoke(_BOOL8 a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  NSObject *v8;
  _BOOL8 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  uint8_t buf[4];
  double v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 3)
  {
    v5 = a1;
    v6 = 0;
    for (i = a2 / 3; i; --i)
    {
      v8 = *re::animationLogObjects((re *)a1);
      v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (v9)
      {
        if (a2 <= v6)
        {
          re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
          _os_crash();
          __break(1u);
LABEL_14:
          re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, a2);
          _os_crash();
          __break(1u);
LABEL_15:
          re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v11, v12);
          _os_crash();
          __break(1u);
LABEL_16:
          re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v17, v18);
          _os_crash();
          __break(1u);
        }
        v11 = *(_QWORD *)(v5 + 8 * v6);
        v12 = a3[3];
        if (v12 <= v11)
          goto LABEL_15;
        v13 = *(_DWORD *)(a3[2] + 4 * v11);
        *(_DWORD *)buf = 67109120;
        LODWORD(v21) = v13;
        _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_INFO, "Float %u:", buf, 8u);
      }
      v14 = *re::animationLogObjects((re *)v9);
      a1 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
      if (a1)
      {
        v16 = v6 + 1;
        if (a2 <= v6 + 1)
          goto LABEL_14;
        v17 = *(_QWORD *)(v5 + 8 * v6 + 8);
        v18 = a3[5];
        if (v18 <= v17)
          goto LABEL_16;
        v19 = *(float *)(a3[4] + 4 * v17);
        *(_DWORD *)buf = 134217984;
        v21 = v19;
        _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_INFO, "%f", buf, 0xCu);
      }
      v6 += 3;
    }
  }
}

void re::`anonymous namespace'::$_71::__invoke(_BOOL8 a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  NSObject *v15;
  _BOOL8 v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  _BOOL8 v21;
  double v22;
  double v23;
  double v24;
  NSObject *v25;
  double v26;
  double v27;
  double v28;
  _QWORD v29[2];
  uint8_t buf[4];
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v29[0] = a1;
  v29[1] = a2;
  if (a2 >= 3)
  {
    v5 = a1;
    v6 = 0;
    v7 = 0;
    v8 = a2 / 3;
    do
    {
      v9 = *re::animationLogObjects((re *)a1);
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (v10)
      {
        if (a2 <= v6)
        {
          re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
          _os_crash();
          __break(1u);
LABEL_16:
          re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v13);
          _os_crash();
          __break(1u);
        }
        v12 = *(_QWORD *)(v5 + 8 * v6);
        v13 = *(_QWORD *)(a3 + 24);
        if (v13 <= v12)
          goto LABEL_16;
        v14 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v12);
        *(_DWORD *)buf = 67109120;
        LODWORD(v31) = v14;
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_INFO, "Matrix3x3 %u:", buf, 8u);
      }
      v15 = *re::animationLogObjects((re *)v10);
      v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
      if (v16)
      {
        *(_DWORD *)buf = 134218496;
        v31 = v17;
        v32 = 2048;
        v33 = v18;
        v34 = 2048;
        v35 = v19;
        _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_INFO, "Columns[0]: %f %f %f", buf, 0x20u);
      }
      v20 = *re::animationLogObjects((re *)v16);
      v21 = os_log_type_enabled(v20, OS_LOG_TYPE_INFO);
      if (v21)
      {
        *(_DWORD *)buf = 134218496;
        v31 = v22;
        v32 = 2048;
        v33 = v23;
        v34 = 2048;
        v35 = v24;
        _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_INFO, "Columns[1]: %f %f %f", buf, 0x20u);
      }
      v25 = *re::animationLogObjects((re *)v21);
      a1 = os_log_type_enabled(v25, OS_LOG_TYPE_INFO);
      if (a1)
      {
        *(_DWORD *)buf = 134218496;
        v31 = v26;
        v32 = 2048;
        v33 = v27;
        v34 = 2048;
        v35 = v28;
        _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_INFO, "Columns[2]: %f %f %f", buf, 0x20u);
      }
      ++v7;
      v6 += 3;
    }
    while (v8 != v7);
  }
}

void re::`anonymous namespace'::$_72::__invoke(_BOOL8 a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  NSObject *v15;
  _BOOL8 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  NSObject *v21;
  _BOOL8 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  _BOOL8 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  NSObject *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  _QWORD v38[2];
  uint8_t buf[4];
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v38[0] = a1;
  v38[1] = a2;
  if (a2 >= 3)
  {
    v5 = a1;
    v6 = 0;
    v7 = 0;
    v8 = a2 / 3;
    do
    {
      v9 = *re::animationLogObjects((re *)a1);
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (v10)
      {
        if (a2 <= v6)
        {
          re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
          _os_crash();
          __break(1u);
LABEL_18:
          re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v13);
          _os_crash();
          __break(1u);
        }
        v12 = *(_QWORD *)(v5 + 8 * v6);
        v13 = *(_QWORD *)(a3 + 24);
        if (v13 <= v12)
          goto LABEL_18;
        v14 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v12);
        *(_DWORD *)buf = 67109120;
        LODWORD(v40) = v14;
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_INFO, "Matrix4x4 %u:", buf, 8u);
      }
      v15 = *re::animationLogObjects((re *)v10);
      v16 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
      if (v16)
      {
        *(_DWORD *)buf = 134218752;
        v40 = v17;
        v41 = 2048;
        v42 = v18;
        v43 = 2048;
        v44 = v19;
        v45 = 2048;
        v46 = v20;
        _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_INFO, "Columns[0]: %f %f %f %f", buf, 0x2Au);
      }
      v21 = *re::animationLogObjects((re *)v16);
      v22 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
      if (v22)
      {
        *(_DWORD *)buf = 134218752;
        v40 = v23;
        v41 = 2048;
        v42 = v24;
        v43 = 2048;
        v44 = v25;
        v45 = 2048;
        v46 = v26;
        _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_INFO, "Columns[1]: %f %f %f %f", buf, 0x2Au);
      }
      v27 = *re::animationLogObjects((re *)v22);
      v28 = os_log_type_enabled(v27, OS_LOG_TYPE_INFO);
      if (v28)
      {
        *(_DWORD *)buf = 134218752;
        v40 = v29;
        v41 = 2048;
        v42 = v30;
        v43 = 2048;
        v44 = v31;
        v45 = 2048;
        v46 = v32;
        _os_log_impl(&dword_224FE9000, v27, OS_LOG_TYPE_INFO, "Columns[2]: %f %f %f %f", buf, 0x2Au);
      }
      v33 = *re::animationLogObjects((re *)v28);
      a1 = os_log_type_enabled(v33, OS_LOG_TYPE_INFO);
      if (a1)
      {
        *(_DWORD *)buf = 134218752;
        v40 = v34;
        v41 = 2048;
        v42 = v35;
        v43 = 2048;
        v44 = v36;
        v45 = 2048;
        v46 = v37;
        _os_log_impl(&dword_224FE9000, v33, OS_LOG_TYPE_INFO, "Columns[3]: %f %f %f %f", buf, 0x2Au);
      }
      ++v7;
      v6 += 3;
    }
    while (v8 != v7);
  }
}

void re::`anonymous namespace'::$_73::__invoke(_BOOL8 a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  _QWORD v20[2];
  uint8_t buf[4];
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v20[0] = a1;
  v20[1] = a2;
  if (a2 >= 3)
  {
    v5 = a1;
    v6 = 0;
    v7 = 0;
    v8 = a2 / 3;
    do
    {
      v9 = *re::animationLogObjects((re *)a1);
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (v10)
      {
        if (a2 <= v6)
        {
          re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
          _os_crash();
          __break(1u);
LABEL_12:
          re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v13);
          _os_crash();
          __break(1u);
        }
        v12 = *(_QWORD *)(v5 + 8 * v6);
        v13 = *(_QWORD *)(a3 + 24);
        if (v13 <= v12)
          goto LABEL_12;
        v14 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v12);
        *(_DWORD *)buf = 67109120;
        LODWORD(v22) = v14;
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_INFO, "Quaternion %u:", buf, 8u);
      }
      v15 = *re::animationLogObjects((re *)v10);
      a1 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
      if (a1)
      {
        *(_DWORD *)buf = 134218752;
        v22 = v16;
        v23 = 2048;
        v24 = v17;
        v25 = 2048;
        v26 = v18;
        v27 = 2048;
        v28 = v19;
        _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_INFO, "%f %f %f %f", buf, 0x2Au);
      }
      ++v7;
      v6 += 3;
    }
    while (v8 != v7);
  }
}

void re::`anonymous namespace'::$_74::__invoke(_BOOL8 a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  NSObject *v15;
  double v16;
  double v17;
  _QWORD v18[2];
  uint8_t buf[4];
  double v20;
  __int16 v21;
  double v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v18[0] = a1;
  v18[1] = a2;
  if (a2 >= 3)
  {
    v5 = a1;
    v6 = 0;
    v7 = 0;
    v8 = a2 / 3;
    do
    {
      v9 = *re::animationLogObjects((re *)a1);
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (v10)
      {
        if (a2 <= v6)
        {
          re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
          _os_crash();
          __break(1u);
LABEL_12:
          re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v13);
          _os_crash();
          __break(1u);
        }
        v12 = *(_QWORD *)(v5 + 8 * v6);
        v13 = *(_QWORD *)(a3 + 24);
        if (v13 <= v12)
          goto LABEL_12;
        v14 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v12);
        *(_DWORD *)buf = 67109120;
        LODWORD(v20) = v14;
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_INFO, "Vector2 %u:", buf, 8u);
      }
      v15 = *re::animationLogObjects((re *)v10);
      a1 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
      if (a1)
      {
        *(_DWORD *)buf = 134218240;
        v20 = v16;
        v21 = 2048;
        v22 = v17;
        _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_INFO, "%f %f", buf, 0x16u);
      }
      ++v7;
      v6 += 3;
    }
    while (v8 != v7);
  }
}

void re::`anonymous namespace'::$_75::__invoke(_BOOL8 a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  _QWORD v19[2];
  uint8_t buf[4];
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v19[0] = a1;
  v19[1] = a2;
  if (a2 >= 3)
  {
    v5 = a1;
    v6 = 0;
    v7 = 0;
    v8 = a2 / 3;
    do
    {
      v9 = *re::animationLogObjects((re *)a1);
      v10 = os_log_type_enabled(v9, OS_LOG_TYPE_INFO);
      if (v10)
      {
        if (a2 <= v6)
        {
          re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, a2);
          _os_crash();
          __break(1u);
LABEL_12:
          re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v12, v13);
          _os_crash();
          __break(1u);
        }
        v12 = *(_QWORD *)(v5 + 8 * v6);
        v13 = *(_QWORD *)(a3 + 24);
        if (v13 <= v12)
          goto LABEL_12;
        v14 = *(_DWORD *)(*(_QWORD *)(a3 + 16) + 4 * v12);
        *(_DWORD *)buf = 67109120;
        LODWORD(v21) = v14;
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_INFO, "Vector3 %u:", buf, 8u);
      }
      v15 = *re::animationLogObjects((re *)v10);
      a1 = os_log_type_enabled(v15, OS_LOG_TYPE_INFO);
      if (a1)
      {
        *(_DWORD *)buf = 134218496;
        v21 = v16;
        v22 = 2048;
        v23 = v17;
        v24 = 2048;
        v25 = v18;
        _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_INFO, "%f %f %f", buf, 0x20u);
      }
      ++v7;
      v6 += 3;
    }
    while (v8 != v7);
  }
}

uint64_t re::`anonymous namespace'::$_76::__invoke(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __int128 *v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t *v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  unint64_t *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  __int128 *v131;
  _OWORD *v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  unint64_t *v140;
  _QWORD *v141;
  unint64_t v142;
  unint64_t v143;
  __int128 *v144;
  _OWORD *v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  uint64_t v153;
  unint64_t *v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t *v160;
  uint64_t v161;
  unint64_t *v162;
  _QWORD *v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t *v169;
  uint64_t v170;
  unint64_t *v171;
  _QWORD *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t *v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t *v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;

  if (a2)
  {
    v4 = result;
    v5 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 8 * v5);
      v8 = a3[16];
      v7 = a3[17];
      v9 = v8 + 448 * v6;
      v10 = (_QWORD *)(v7 + 432 * v6);
      v11 = *(_QWORD *)(v9 + 16);
      if (v11)
        break;
LABEL_8:
      v19 = *(_QWORD *)(v8 + 448 * v6 + 40);
      if (v19)
      {
        v20 = 0;
        v21 = *(_QWORD *)(v8 + 448 * v6 + 48);
        v23 = a3[2];
        v22 = a3[3];
        v25 = v10[4];
        v24 = v10[5];
        while (1)
        {
          v26 = *(_QWORD *)(v21 + 8 * v20);
          if (v22 <= v26)
            break;
          if (v25 == v20)
            goto LABEL_110;
          *(_DWORD *)(v24 + 4 * v20++) = *(_DWORD *)(v23 + 4 * v26);
          if (v19 == v20)
            goto LABEL_13;
        }
LABEL_109:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v26, v22);
        _os_crash();
        __break(1u);
LABEL_110:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_111;
      }
LABEL_13:
      v27 = *(_QWORD *)(v8 + 448 * v6 + 64);
      if (v27)
      {
        v28 = 0;
        v29 = *(_QWORD *)(v8 + 448 * v6 + 72);
        v31 = a3[4];
        v30 = a3[5];
        v33 = v10[7];
        v32 = v10[8];
        while (1)
        {
          v34 = *(_QWORD *)(v29 + 8 * v28);
          if (v30 <= v34)
            break;
          if (v33 == v28)
            goto LABEL_112;
          *(_DWORD *)(v32 + 4 * v28++) = *(_DWORD *)(v31 + 4 * v34);
          if (v27 == v28)
            goto LABEL_18;
        }
LABEL_111:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v34, v30);
        _os_crash();
        __break(1u);
LABEL_112:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_113;
      }
LABEL_18:
      v35 = v8 + 448 * v6;
      v37 = *(_QWORD *)(v35 + 88);
      v36 = (unint64_t *)(v35 + 88);
      if (v37)
      {
        v38 = 0;
        v39 = 0;
        while (1)
        {
          v40 = *(_QWORD *)(*(_QWORD *)(v8 + 448 * v6 + 96) + 8 * v39);
          v41 = a3[7];
          if (v41 <= v40)
            break;
          if (v10[10] <= v39)
            goto LABEL_114;
          v42 = (__int128 *)(a3[6] + 48 * v40);
          v43 = (_OWORD *)(v10[11] + v38);
          v44 = *v42;
          v45 = v42[2];
          v43[1] = v42[1];
          v43[2] = v45;
          *v43 = v44;
          ++v39;
          v38 += 48;
          if (v39 >= *v36)
            goto LABEL_23;
        }
LABEL_113:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v40, v41);
        _os_crash();
        __break(1u);
LABEL_114:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_115;
      }
LABEL_23:
      v46 = v8 + 448 * v6;
      v48 = *(_QWORD *)(v46 + 112);
      v47 = (unint64_t *)(v46 + 112);
      if (v48)
      {
        v49 = 0;
        v50 = 0;
        while (1)
        {
          v51 = *(_QWORD *)(*(_QWORD *)(v8 + 448 * v6 + 120) + 8 * v50);
          v52 = a3[9];
          if (v52 <= v51)
            break;
          if (v10[13] <= v50)
            goto LABEL_116;
          v53 = (__int128 *)(a3[8] + (v51 << 6));
          v54 = (_OWORD *)(v10[14] + v49);
          v55 = *v53;
          v56 = v53[1];
          v57 = v53[3];
          v54[2] = v53[2];
          v54[3] = v57;
          *v54 = v55;
          v54[1] = v56;
          ++v50;
          v49 += 64;
          if (v50 >= *v47)
            goto LABEL_28;
        }
LABEL_115:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v51, v52);
        _os_crash();
        __break(1u);
LABEL_116:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_117;
      }
LABEL_28:
      v58 = v8 + 448 * v6;
      v60 = *(_QWORD *)(v58 + 136);
      v59 = (unint64_t *)(v58 + 136);
      if (v60)
      {
        v61 = 0;
        v62 = 0;
        while (1)
        {
          v63 = *(_QWORD *)(*(_QWORD *)(v8 + 448 * v6 + 144) + 8 * v62);
          v64 = a3[11];
          if (v64 <= v63)
            break;
          if (v10[16] <= v62)
            goto LABEL_118;
          *(_OWORD *)(v10[17] + v61) = *(_OWORD *)(a3[10] + 16 * v63);
          ++v62;
          v61 += 16;
          if (v62 >= *v59)
            goto LABEL_33;
        }
LABEL_117:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v63, v64);
        _os_crash();
        __break(1u);
LABEL_118:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_119;
      }
LABEL_33:
      v65 = v8 + 448 * v6;
      v67 = *(_QWORD *)(v65 + 160);
      v66 = (unint64_t *)(v65 + 160);
      if (v67)
      {
        v68 = 0;
        while (1)
        {
          v69 = *(_QWORD *)(*(_QWORD *)(v8 + 448 * v6 + 168) + 8 * v68);
          v70 = a3[13];
          if (v70 <= v69)
            break;
          if (v10[19] <= v68)
            goto LABEL_120;
          *(_QWORD *)(v10[20] + 8 * v68++) = *(_QWORD *)(a3[12] + 8 * v69);
          if (v68 >= *v66)
            goto LABEL_38;
        }
LABEL_119:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v69, v70);
        _os_crash();
        __break(1u);
LABEL_120:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_121:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v76, v77);
        _os_crash();
        __break(1u);
LABEL_122:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_123:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_124:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v103, v101);
        _os_crash();
        __break(1u);
LABEL_125:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v88, v89);
        _os_crash();
        __break(1u);
LABEL_126:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_127:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_128:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v90, v91);
        _os_crash();
        __break(1u);
LABEL_129:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_130:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_131:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v92, v93);
        _os_crash();
        __break(1u);
LABEL_132:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_133;
      }
LABEL_38:
      v71 = v8 + 448 * v6;
      v73 = *(_QWORD *)(v71 + 184);
      v72 = (unint64_t *)(v71 + 184);
      if (v73)
      {
        v74 = 0;
        v75 = 0;
        do
        {
          v76 = *(_QWORD *)(*(_QWORD *)(v8 + 448 * v6 + 192) + 8 * v75);
          v77 = a3[15];
          if (v77 <= v76)
            goto LABEL_121;
          if (v10[22] <= v75)
            goto LABEL_122;
          *(_OWORD *)(v10[23] + v74) = *(_OWORD *)(a3[14] + 16 * v76);
          ++v75;
          v74 += 16;
        }
        while (v75 < *v72);
      }
      v78 = v8 + 448 * v6;
      v80 = *(_QWORD *)(v78 + 208);
      v79 = (unint64_t *)(v78 + 208);
      if (v80)
      {
        v81 = 0;
        v82 = 0;
        v83 = 0;
        v84 = (_QWORD *)(v8 + 448 * v6 + 216);
        v85 = v7 + 432 * v6;
        v86 = (unint64_t *)(v85 + 200);
        v87 = (_QWORD *)(v85 + 208);
        do
        {
          v88 = *(_QWORD *)(*v84 + v81);
          v89 = a3[15];
          if (v89 <= v88)
            goto LABEL_125;
          if (*v86 <= v83)
            goto LABEL_126;
          *(_OWORD *)(*v87 + v82) = *(_OWORD *)(a3[14] + 16 * v88);
          if (*v79 <= v83)
            goto LABEL_127;
          v90 = *(_QWORD *)(*v84 + v81 + 8);
          v91 = a3[11];
          if (v91 <= v90)
            goto LABEL_128;
          if (*v86 <= v83)
            goto LABEL_129;
          *(_OWORD *)(*v87 + v82 + 16) = *(_OWORD *)(a3[10] + 16 * v90);
          if (*v79 <= v83)
            goto LABEL_130;
          v92 = *(_QWORD *)(*v84 + v81 + 16);
          v93 = a3[15];
          if (v93 <= v92)
            goto LABEL_131;
          if (*v86 <= v83)
            goto LABEL_132;
          *(_OWORD *)(*v87 + v82 + 32) = *(_OWORD *)(a3[14] + 16 * v92);
          ++v83;
          v82 += 48;
          v81 += 24;
        }
        while (v83 < *v79);
      }
      v94 = v8 + 448 * v6;
      result = (*(uint64_t (**)(_QWORD *, _QWORD))v9)(v10, *(_QWORD *)(v94 + 440));
      v95 = *(_QWORD *)(v94 + 232);
      if (v95)
      {
        v96 = 0;
        v97 = *(_QWORD *)(v8 + 448 * v6 + 240);
        v98 = v7 + 432 * v6;
        v100 = *(_QWORD *)(v98 + 224);
        v99 = *(_QWORD *)(v98 + 232);
        v102 = *a3;
        v101 = a3[1];
        while (v100 != v96)
        {
          v103 = *(_QWORD *)(v97 + 8 * v96);
          if (v101 <= v103)
            goto LABEL_124;
          *(_DWORD *)(v102 + 4 * v103) = *(_DWORD *)(v99 + 4 * v96++);
          if (v95 == v96)
            goto LABEL_59;
        }
        goto LABEL_123;
      }
LABEL_59:
      v104 = *(_QWORD *)(v8 + 448 * v6 + 256);
      if (v104)
      {
        v105 = 0;
        v106 = *(_QWORD *)(v8 + 448 * v6 + 264);
        v107 = v7 + 432 * v6;
        v109 = *(_QWORD *)(v107 + 248);
        v108 = *(_QWORD *)(v107 + 256);
        v111 = a3[2];
        v110 = a3[3];
        while (v109 != v105)
        {
          v112 = *(_QWORD *)(v106 + 8 * v105);
          if (v110 <= v112)
            goto LABEL_134;
          *(_DWORD *)(v111 + 4 * v112) = *(_DWORD *)(v108 + 4 * v105++);
          if (v104 == v105)
            goto LABEL_64;
        }
LABEL_133:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_134:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v112, v110);
        _os_crash();
        __break(1u);
        goto LABEL_135;
      }
LABEL_64:
      v113 = *(_QWORD *)(v8 + 448 * v6 + 280);
      if (v113)
      {
        v114 = 0;
        v115 = *(_QWORD *)(v8 + 448 * v6 + 288);
        v116 = v7 + 432 * v6;
        v118 = *(_QWORD *)(v116 + 272);
        v117 = *(_QWORD *)(v116 + 280);
        v120 = a3[4];
        v119 = a3[5];
        while (v118 != v114)
        {
          v121 = *(_QWORD *)(v115 + 8 * v114);
          if (v119 <= v121)
            goto LABEL_136;
          *(_DWORD *)(v120 + 4 * v121) = *(_DWORD *)(v117 + 4 * v114++);
          if (v113 == v114)
            goto LABEL_69;
        }
LABEL_135:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_136:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v121, v119);
        _os_crash();
        __break(1u);
        goto LABEL_137;
      }
LABEL_69:
      v122 = v8 + 448 * v6;
      if (*(_QWORD *)(v122 + 304))
      {
        v123 = 0;
        v124 = 0;
        v125 = (unint64_t *)(v122 + 304);
        v126 = v7 + 432 * v6;
        v127 = (unint64_t *)(v126 + 296);
        v128 = (_QWORD *)(v126 + 304);
        while (*v127 > v124)
        {
          v129 = *(_QWORD *)(*(_QWORD *)(v8 + 448 * v6 + 312) + 8 * v124);
          v130 = a3[7];
          if (v130 <= v129)
            goto LABEL_138;
          v131 = (__int128 *)(*v128 + v123);
          v132 = (_OWORD *)(a3[6] + 48 * v129);
          v133 = *v131;
          v134 = v131[2];
          v132[1] = v131[1];
          v132[2] = v134;
          *v132 = v133;
          ++v124;
          v123 += 48;
          if (v124 >= *v125)
            goto LABEL_74;
        }
LABEL_137:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_138:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v129, v130);
        _os_crash();
        __break(1u);
        goto LABEL_139;
      }
LABEL_74:
      v135 = v8 + 448 * v6;
      if (*(_QWORD *)(v135 + 328))
      {
        v136 = 0;
        v137 = 0;
        v138 = (unint64_t *)(v135 + 328);
        v139 = v7 + 432 * v6;
        v140 = (unint64_t *)(v139 + 320);
        v141 = (_QWORD *)(v139 + 328);
        while (*v140 > v137)
        {
          v142 = *(_QWORD *)(*(_QWORD *)(v8 + 448 * v6 + 336) + 8 * v137);
          v143 = a3[9];
          if (v143 <= v142)
            goto LABEL_140;
          v144 = (__int128 *)(*v141 + v136);
          v145 = (_OWORD *)(a3[8] + (v142 << 6));
          v146 = *v144;
          v147 = v144[1];
          v148 = v144[3];
          v145[2] = v144[2];
          v145[3] = v148;
          *v145 = v146;
          v145[1] = v147;
          ++v137;
          v136 += 64;
          if (v137 >= *v138)
            goto LABEL_79;
        }
LABEL_139:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_140:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v142, v143);
        _os_crash();
        __break(1u);
        goto LABEL_141;
      }
LABEL_79:
      v149 = v8 + 448 * v6;
      if (*(_QWORD *)(v149 + 352))
      {
        v150 = 0;
        v151 = 0;
        v152 = (unint64_t *)(v149 + 352);
        v153 = v7 + 432 * v6;
        v154 = (unint64_t *)(v153 + 344);
        v155 = (_QWORD *)(v153 + 352);
        while (*v154 > v151)
        {
          v156 = *(_QWORD *)(*(_QWORD *)(v8 + 448 * v6 + 360) + 8 * v151);
          v157 = a3[11];
          if (v157 <= v156)
            goto LABEL_142;
          *(_OWORD *)(a3[10] + 16 * v156) = *(_OWORD *)(*v155 + v150);
          ++v151;
          v150 += 16;
          if (v151 >= *v152)
            goto LABEL_84;
        }
LABEL_141:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_142:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v156, v157);
        _os_crash();
        __break(1u);
        goto LABEL_143;
      }
LABEL_84:
      v158 = v8 + 448 * v6;
      if (*(_QWORD *)(v158 + 376))
      {
        v159 = 0;
        v160 = (unint64_t *)(v158 + 376);
        v161 = v7 + 432 * v6;
        v162 = (unint64_t *)(v161 + 368);
        v163 = (_QWORD *)(v161 + 376);
        while (*v162 > v159)
        {
          v164 = *(_QWORD *)(*(_QWORD *)(v8 + 448 * v6 + 384) + 8 * v159);
          v165 = a3[13];
          if (v165 <= v164)
            goto LABEL_144;
          *(_QWORD *)(a3[12] + 8 * v164) = *(_QWORD *)(*v163 + 8 * v159++);
          if (v159 >= *v160)
            goto LABEL_89;
        }
LABEL_143:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_144:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v164, v165);
        _os_crash();
        __break(1u);
        goto LABEL_145;
      }
LABEL_89:
      v166 = v8 + 448 * v6;
      if (*(_QWORD *)(v166 + 400))
      {
        v167 = 0;
        v168 = 0;
        v169 = (unint64_t *)(v166 + 400);
        v170 = v7 + 432 * v6;
        v171 = (unint64_t *)(v170 + 392);
        v172 = (_QWORD *)(v170 + 400);
        while (*v171 > v168)
        {
          v173 = *(_QWORD *)(*(_QWORD *)(v8 + 448 * v6 + 408) + 8 * v168);
          v174 = a3[15];
          if (v174 <= v173)
            goto LABEL_146;
          *(_OWORD *)(a3[14] + 16 * v173) = *(_OWORD *)(*v172 + v167);
          ++v168;
          v167 += 16;
          if (v168 >= *v169)
            goto LABEL_94;
        }
LABEL_145:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_146:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v173, v174);
        _os_crash();
        __break(1u);
LABEL_147:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_148:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v184, v185);
        _os_crash();
        __break(1u);
LABEL_149:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_150:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_151:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v186, v187);
        _os_crash();
        __break(1u);
LABEL_152:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_153:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_154:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v188, v189);
        _os_crash();
        __break(1u);
      }
LABEL_94:
      v175 = v8 + 448 * v6;
      if (*(_QWORD *)(v175 + 424))
      {
        v176 = 0;
        v177 = 0;
        v178 = 0;
        v179 = (unint64_t *)(v175 + 424);
        v180 = (_QWORD *)(v8 + 448 * v6 + 432);
        v181 = v7 + 432 * v6;
        v182 = (unint64_t *)(v181 + 416);
        v183 = (_QWORD *)(v181 + 424);
        while (*v182 > v178)
        {
          v184 = *(_QWORD *)(*v180 + v176);
          v185 = a3[15];
          if (v185 <= v184)
            goto LABEL_148;
          *(_OWORD *)(a3[14] + 16 * v184) = *(_OWORD *)(*v183 + v177);
          if (*v179 <= v178)
            goto LABEL_149;
          if (*v182 <= v178)
            goto LABEL_150;
          v186 = *(_QWORD *)(*v180 + v176 + 8);
          v187 = a3[11];
          if (v187 <= v186)
            goto LABEL_151;
          *(_OWORD *)(a3[10] + 16 * v186) = *(_OWORD *)(*v183 + v177 + 16);
          if (*v179 <= v178)
            goto LABEL_152;
          if (*v182 <= v178)
            goto LABEL_153;
          v188 = *(_QWORD *)(*v180 + v176 + 16);
          v189 = a3[15];
          if (v189 <= v188)
            goto LABEL_154;
          *(_OWORD *)(a3[14] + 16 * v188) = *(_OWORD *)(*v183 + v177 + 32);
          ++v178;
          v177 += 48;
          v176 += 24;
          if (v178 >= *v179)
            goto LABEL_105;
        }
        goto LABEL_147;
      }
LABEL_105:
      if (++v5 == a2)
        return result;
    }
    v12 = 0;
    v13 = *(_QWORD *)(v8 + 448 * v6 + 24);
    v15 = *a3;
    v14 = a3[1];
    v17 = v10[1];
    v16 = v10[2];
    while (1)
    {
      v18 = *(_QWORD *)(v13 + 8 * v12);
      if (v14 <= v18)
        break;
      if (v17 == v12)
        goto LABEL_108;
      *(_DWORD *)(v16 + 4 * v12++) = *(_DWORD *)(v15 + 4 * v18);
      if (v11 == v12)
        goto LABEL_8;
    }
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, *(_QWORD *)(v13 + 8 * v12), v14);
    _os_crash();
    __break(1u);
LABEL_108:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_109;
  }
  return result;
}

void re::`anonymous namespace'::$_77::__invoke(_anonymous_namespace_ *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t j;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _anonymous_namespace_ *v39;
  _anonymous_namespace_ *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _anonymous_namespace_ *v51;
  _anonymous_namespace_ *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _anonymous_namespace_ *v62;
  _anonymous_namespace_ *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int128 *v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  _anonymous_namespace_ *v74;
  _anonymous_namespace_ *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  __int128 *v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  unint64_t v86;
  _anonymous_namespace_ *v87;
  _anonymous_namespace_ *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _anonymous_namespace_ *v95;
  _anonymous_namespace_ *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _anonymous_namespace_ *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  __n128 v109;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _OWORD v133[3];
  _OWORD v134[3];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  int v139;
  const char *v140;
  __int16 v141;
  int v142;
  __int16 v143;
  unint64_t v144;
  __int16 v145;
  unint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;

  v165 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v5 = a2;
    j = (unint64_t)a1;
    v7 = 0;
    i = 456;
    do
    {
      v9 = a3[18];
      v10 = *(_QWORD *)(j + 8 * v7);
      v11 = v9 + 456 * v10;
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = 0;
        v14 = 0;
        v15 = *(_QWORD *)(v11 + 16);
        v16 = 184;
        v17 = a3[3];
        while (1)
        {
          v18 = *(_QWORD *)(v15 + 8 * v14);
          if (v18 == -1)
            break;
          if (v17 <= v18)
            goto LABEL_101;
          if (*(_DWORD *)(a3[2] + 4 * v18))
            break;
          ++v14;
          v13 += 784;
          v16 += 192;
          if (v12 == v14)
            goto LABEL_9;
        }
        v19 = 0uLL;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        memset(v134, 0, sizeof(v134));
        v132 = 0u;
        memset(v133, 0, sizeof(v133));
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v20 = v9 + 456 * v10;
        v115 = 0u;
        v21 = *(uint64_t **)(v20 + 32);
        j = v20 + 32;
        v3 = v21;
        if ((unint64_t)v21 <= v14)
          goto LABEL_105;
        v112 = v7;
        v22 = v9 + 456 * v10;
        v23 = *(_QWORD *)(v22 + 40) + v16;
        v24 = *(_QWORD *)(v23 - 176);
        v113 = (uint64_t *)(v22 + 40);
        v114 = v9;
        v25 = *(_QWORD *)(v22 + 80);
        if (v24)
        {
          v30 = 0;
          i = *(_QWORD *)(v23 - 176);
          v31 = *(_QWORD *)(v23 - 168);
          v33 = *a3;
          v32 = a3[1];
          v3 = (uint64_t *)*((_QWORD *)&v115 + 1);
          v34 = v116;
          while ((uint64_t *)i != v30)
          {
            v35 = *(_QWORD *)(v31 + 8 * (_QWORD)v30);
            if (v32 <= v35)
              goto LABEL_81;
            if (v3 == v30)
              goto LABEL_82;
            *(_DWORD *)(v34 + 4 * (_QWORD)v30) = *(_DWORD *)(v33 + 4 * v35);
            v30 = (uint64_t *)((char *)v30 + 1);
            if ((uint64_t *)v24 == v30)
              goto LABEL_17;
          }
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 476;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = i;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_81:
          re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v35, v32);
          _os_crash();
          __break(1u);
LABEL_82:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = (unint64_t)v3;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_83:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 476;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = i;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_84:
          re::internal::assertLog((re::internal *)6, v41, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v47, v44);
          _os_crash();
          __break(1u);
LABEL_85:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = (unint64_t)v3;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_86:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 476;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = i;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_87:
          re::internal::assertLog((re::internal *)6, v53, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v59, v56);
          _os_crash();
          __break(1u);
LABEL_88:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = (unint64_t)v3;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_89:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 476;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_90:
          re::internal::assertLog((re::internal *)6, v64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v66, v67);
          _os_crash();
          __break(1u);
LABEL_91:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_92:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 476;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_93:
          re::internal::assertLog((re::internal *)6, v76, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v78, v79);
          _os_crash();
          __break(1u);
LABEL_94:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_95:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 476;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = (unint64_t)v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_96:
          re::internal::assertLog((re::internal *)6, v89, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v91, v92);
          _os_crash();
          __break(1u);
LABEL_97:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = (unint64_t)v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_98:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 476;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = (unint64_t)v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_99:
          re::internal::assertLog((re::internal *)6, v97, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v98, v99);
          _os_crash();
          __break(1u);
LABEL_100:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = i;
          v145 = 2048;
          v146 = (unint64_t)v26;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_101:
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v18, v17);
          _os_crash();
          __break(1u);
LABEL_102:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 476;
          v143 = 2048;
          v144 = j;
          v145 = 2048;
          v146 = i;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_103:
          re::internal::assertLog((re::internal *)6, v104, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v106, v107);
          _os_crash();
          __break(1u);
LABEL_104:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = j;
          v145 = 2048;
          v146 = i;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_105:
          v138 = 0;
          v150 = v19;
          v151 = v19;
          v148 = v19;
          v149 = v19;
          v147 = v19;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = v14;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_106:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = v14;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_107:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = v14;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_108:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = v14;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_109:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = v14;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_110:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = v14;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_111:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = v14;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_112:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = v14;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_113:
          v138 = 0;
          v150 = 0u;
          v151 = 0u;
          v148 = 0u;
          v149 = 0u;
          v147 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v139 = 136315906;
          v140 = "operator[]";
          v141 = 1024;
          v142 = 468;
          v143 = 2048;
          v144 = v14;
          v145 = 2048;
          v146 = (unint64_t)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_17:
        v3 = *(uint64_t **)j;
        if (*(_QWORD *)j <= v14)
          goto LABEL_106;
        v36 = *v113 + v16;
        v37 = *(_QWORD *)(v36 - 152);
        v38 = *(_QWORD *)(v114 + 456 * v10 + 104);
        if (v37)
        {
          v42 = 0;
          i = *(_QWORD *)(v36 - 152);
          v43 = *(_QWORD *)(v36 - 144);
          v45 = a3[2];
          v44 = a3[3];
          v46 = *((_QWORD *)&v117 + 1);
          v3 = (uint64_t *)v117;
          while ((uint64_t *)i != v42)
          {
            v47 = *(_QWORD *)(v43 + 8 * (_QWORD)v42);
            if (v44 <= v47)
              goto LABEL_84;
            if (v3 == v42)
              goto LABEL_85;
            *(_DWORD *)(v46 + 4 * (_QWORD)v42) = *(_DWORD *)(v45 + 4 * v47);
            v42 = (uint64_t *)((char *)v42 + 1);
            if ((uint64_t *)v37 == v42)
              goto LABEL_24;
          }
          goto LABEL_83;
        }
LABEL_24:
        v3 = *(uint64_t **)j;
        if (*(_QWORD *)j <= v14)
          goto LABEL_107;
        v48 = *v113 + v16;
        v49 = *(_QWORD *)(v48 - 128);
        v50 = *(_QWORD *)(v114 + 456 * v10 + 128);
        if (v49)
        {
          v54 = 0;
          i = *(_QWORD *)(v48 - 128);
          v55 = *(_QWORD *)(v48 - 120);
          v57 = a3[4];
          v56 = a3[5];
          v3 = (uint64_t *)*((_QWORD *)&v118 + 1);
          v58 = v119;
          while ((uint64_t *)i != v54)
          {
            v59 = *(_QWORD *)(v55 + 8 * (_QWORD)v54);
            if (v56 <= v59)
              goto LABEL_87;
            if (v3 == v54)
              goto LABEL_88;
            *(_DWORD *)(v58 + 4 * (_QWORD)v54) = *(_DWORD *)(v57 + 4 * v59);
            v54 = (uint64_t *)((char *)v54 + 1);
            if ((uint64_t *)v49 == v54)
              goto LABEL_31;
          }
          goto LABEL_86;
        }
LABEL_31:
        v3 = *(uint64_t **)j;
        if (*(_QWORD *)j <= v14)
          goto LABEL_108;
        v26 = (uint64_t *)(*v113 + v16);
        v60 = *(v26 - 13);
        v61 = *(_QWORD *)(v114 + 456 * v10 + 152);
        if (v60)
        {
          v65 = 0;
          for (i = 0; i != v60; ++i)
          {
            v3 = (uint64_t *)*(v26 - 13);
            if ((unint64_t)v3 <= i)
              goto LABEL_89;
            v66 = *(_QWORD *)(*(v26 - 12) + 8 * i);
            v67 = a3[7];
            if (v67 <= v66)
              goto LABEL_90;
            v3 = (uint64_t *)v120;
            if ((unint64_t)v120 <= i)
              goto LABEL_91;
            v68 = (__int128 *)(a3[6] + 48 * v66);
            v69 = (_OWORD *)(*((_QWORD *)&v120 + 1) + v65);
            v70 = *v68;
            v71 = v68[2];
            v69[1] = v68[1];
            v69[2] = v71;
            *v69 = v70;
            v65 += 48;
          }
        }
        v3 = *(uint64_t **)j;
        if (*(_QWORD *)j <= v14)
          goto LABEL_109;
        v26 = (uint64_t *)(*v113 + v16);
        v72 = *(v26 - 10);
        v73 = *(_QWORD *)(v114 + 456 * v10 + 176);
        if (v72)
        {
          v77 = 0;
          for (i = 0; i != v72; ++i)
          {
            v3 = (uint64_t *)*(v26 - 10);
            if ((unint64_t)v3 <= i)
              goto LABEL_92;
            v78 = *(_QWORD *)(*(v26 - 9) + 8 * i);
            v79 = a3[9];
            if (v79 <= v78)
              goto LABEL_93;
            v3 = (uint64_t *)*((_QWORD *)&v121 + 1);
            if (*((_QWORD *)&v121 + 1) <= i)
              goto LABEL_94;
            v80 = (__int128 *)(a3[8] + (v78 << 6));
            v81 = (_OWORD *)(v122 + v77);
            v82 = *v80;
            v83 = v80[1];
            v84 = v80[3];
            v81[2] = v80[2];
            v81[3] = v84;
            *v81 = v82;
            v81[1] = v83;
            v77 += 64;
          }
        }
        v3 = *(uint64_t **)j;
        if (*(_QWORD *)j <= v14)
          goto LABEL_110;
        v3 = (uint64_t *)(*v113 + v16);
        v85 = *(v3 - 7);
        v86 = *(_QWORD *)(v114 + 456 * v10 + 200);
        if (v85)
        {
          v90 = 0;
          for (i = 0; i != v85; ++i)
          {
            v26 = (uint64_t *)*(v3 - 7);
            if ((unint64_t)v26 <= i)
              goto LABEL_95;
            v91 = *(_QWORD *)(*(v3 - 6) + 8 * i);
            v92 = a3[11];
            if (v92 <= v91)
              goto LABEL_96;
            v26 = (uint64_t *)v123;
            if ((unint64_t)v123 <= i)
              goto LABEL_97;
            *(_OWORD *)(*((_QWORD *)&v123 + 1) + v90) = *(_OWORD *)(a3[10] + 16 * v91);
            v90 += 16;
          }
        }
        v3 = *(uint64_t **)j;
        if (*(_QWORD *)j <= v14)
          goto LABEL_111;
        v3 = (uint64_t *)(*v113 + v16);
        v93 = *(v3 - 4);
        v94 = *(_QWORD *)(v114 + 456 * v10 + 224);
        if (v93)
        {
          for (i = 0; i != v93; *(_QWORD *)(v125 + 8 * i++) = *(_QWORD *)(a3[12] + 8 * v98))
          {
            v26 = (uint64_t *)*(v3 - 4);
            if ((unint64_t)v26 <= i)
              goto LABEL_98;
            v98 = *(_QWORD *)(*(v3 - 3) + 8 * i);
            v99 = a3[13];
            if (v99 <= v98)
              goto LABEL_99;
            v26 = (uint64_t *)*((_QWORD *)&v124 + 1);
            if (*((_QWORD *)&v124 + 1) <= i)
              goto LABEL_100;
          }
        }
        v3 = *(uint64_t **)j;
        if (*(_QWORD *)j <= v14)
          goto LABEL_112;
        v100 = *v113;
        v3 = (uint64_t *)(*v113 + v16);
        v101 = *(v3 - 1);
        v102 = *(_QWORD *)(v114 + 456 * v10 + 248);
        if (v101)
        {
          v105 = 0;
          for (j = 0; j != v101; ++j)
          {
            i = *(v3 - 1);
            if (i <= j)
              goto LABEL_102;
            v106 = *(_QWORD *)(*(_QWORD *)(v100 + v16) + 8 * j);
            v107 = a3[15];
            if (v107 <= v106)
              goto LABEL_103;
            i = v126;
            if ((unint64_t)v126 <= j)
              goto LABEL_104;
            *(_OWORD *)(*((_QWORD *)&v126 + 1) + v105) = *(_OWORD *)(a3[14] + 16 * v106);
            v105 += 16;
          }
        }
        i = 456;
        v3 = *(uint64_t **)(v114 + 456 * v10 + 56);
        if ((unint64_t)v3 <= v14)
          goto LABEL_113;
        v108 = *(_QWORD *)(v114 + 456 * v10 + 64) + v13;
        v163 = 0u;
        v164 = 0u;
        v161 = 0u;
        v162 = 0u;
        v159 = 0u;
        v160 = 0u;
        v157 = 0u;
        v158 = 0u;
        v155 = 0u;
        v156 = 0u;
        v153 = 0u;
        v154 = 0u;
        v151 = 0u;
        v152 = 0u;
        v149 = 0u;
        v150 = 0u;
        v147 = 0u;
        v148 = 0u;
        re::EvaluationContextSlices::init((re::EvaluationContextSlices *)&v147, (re::EvaluationContext *)&v115);
        if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v108 + 16))(v108, &v147))
        {
          v3 = (uint64_t *)&v128 + 1;
          i = 456;
        }
        j = (unint64_t)a1;
        v5 = a2;
        v7 = v112;
        if (*((_QWORD *)&v136 + 1))
        {
          if ((_QWORD)v137)
          {
            (*(void (**)(__n128))(**((_QWORD **)&v136 + 1) + 40))(v109);
            v137 = 0uLL;
          }
          *((_QWORD *)&v136 + 1) = 0;
        }
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)((char *)&v128 + 8));
        if ((_QWORD)v127)
        {
          if (*((_QWORD *)&v127 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            *((_QWORD *)&v127 + 1) = 0;
            *(_QWORD *)&v128 = 0;
          }
          *(_QWORD *)&v127 = 0;
        }
        re::FixedRegisterTable::~FixedRegisterTable((re::FixedRegisterTable *)&v115);
      }
      else
      {
LABEL_9:
        v3 = (uint64_t *)(v9 + 456 * v10);
        i = 456;
      }
      ++v7;
    }
    while (v7 != v5);
  }
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Vector3<float>,re::Vector3<float>,re::Vector3<float>,void,void>::input1(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1[1];
  if (v3 <= 3 * a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(*a1 + 24 * a3);
    v5 = *(_QWORD *)(a2 + 120);
    if (v5 > v4)
      return *(_QWORD *)(a2 + 112) + 16 * v4;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Vector3<float>,re::Vector3<float>,re::Vector3<float>,void,void>::input2<re::Vector3<float>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 1;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 1, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 120);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 112) + 16 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Vector3<float>,re::Vector3<float>,re::Vector3<float>,void,void>::output(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 2;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 2, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 120);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 112) + 16 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Vector2<float>,re::Vector2<float>,re::Vector2<float>,void,void>::input1(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1[1];
  if (v3 <= 3 * a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(*a1 + 24 * a3);
    v5 = *(_QWORD *)(a2 + 104);
    if (v5 > v4)
      return *(_QWORD *)(a2 + 96) + 8 * v4;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Vector2<float>,re::Vector2<float>,re::Vector2<float>,void,void>::input2<re::Vector2<float>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 1;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 1, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 104);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 96) + 8 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Vector2<float>,re::Vector2<float>,re::Vector2<float>,void,void>::output(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 2;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 2, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 104);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 96) + 8 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Quaternion<float>,re::Quaternion<float>,re::Quaternion<float>,void,void>::input1(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1[1];
  if (v3 <= 3 * a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(*a1 + 24 * a3);
    v5 = *(_QWORD *)(a2 + 88);
    if (v5 > v4)
      return *(_QWORD *)(a2 + 80) + 16 * v4;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Quaternion<float>,re::Quaternion<float>,re::Quaternion<float>,void,void>::input2<re::Quaternion<float>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 1;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 1, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 88);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 80) + 16 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Quaternion<float>,re::Quaternion<float>,re::Quaternion<float>,void,void>::output(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 2;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 2, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 88);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 80) + 16 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Quaternion<float>,re::Quaternion<float>,void,void,void>::input1(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1[1];
  if (v3 <= 2 * a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2 * a3, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(*a1 + 16 * a3);
    v5 = *(_QWORD *)(a2 + 88);
    if (v5 > v4)
      return *(_QWORD *)(a2 + 80) + 16 * v4;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Quaternion<float>,re::Quaternion<float>,void,void,void>::output(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = (2 * a3) | 1;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (2 * a3) | 1, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 88);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 80) + 16 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Matrix3x3<float>,re::Matrix3x3<float>,void,void,void>::input1(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1[1];
  if (v3 <= 2 * a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2 * a3, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(*a1 + 16 * a3);
    v5 = *(_QWORD *)(a2 + 56);
    if (v5 > v4)
      return *(_QWORD *)(a2 + 48) + 48 * v4;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Matrix3x3<float>,re::Matrix3x3<float>,void,void,void>::output(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = (2 * a3) | 1;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (2 * a3) | 1, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 56);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 48) + 48 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Vector3<float>,re::Matrix4x4<float>,re::Vector3<float>,void,void>::input1(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1[1];
  if (v3 <= 3 * a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(*a1 + 24 * a3);
    v5 = *(_QWORD *)(a2 + 72);
    if (v5 > v4)
      return *(_QWORD *)(a2 + 64) + (v4 << 6);
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<re::Quaternion<float>,re::Vector3<float>,float,void,void>::input2<float>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 1;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 1, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 40);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 32) + 4 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<float,float,float,void,void>::input1(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1[1];
  if (v3 <= 3 * a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(*a1 + 24 * a3);
    v5 = *(_QWORD *)(a2 + 40);
    if (v5 > v4)
      return *(_QWORD *)(a2 + 32) + 4 * v4;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<float,float,float,void,void>::output(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 2;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 2, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 40);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 32) + 4 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<float,float,void,void,void>::input1(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1[1];
  if (v3 <= 2 * a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 2 * a3, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(*a1 + 16 * a3);
    v5 = *(_QWORD *)(a2 + 40);
    if (v5 > v4)
      return *(_QWORD *)(a2 + 32) + 4 * v4;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<float,float,void,void,void>::output(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = (2 * a3) | 1;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, (2 * a3) | 1, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 40);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 32) + 4 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<unsigned int,float,float,void,void>::output(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 2;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 2, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 24);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 16) + 4 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<unsigned int,int,int,void,void>::input1(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v3 = a1[1];
  if (v3 <= 3 * a3)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3, v3);
    _os_crash();
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(*a1 + 24 * a3);
    v5 = a2[1];
    if (v5 > v4)
      return *a2 + 4 * v4;
  }
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<unsigned int,int,int,void,void>::input2<int>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 1;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 1, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = a2[1];
    if (v6 > v5)
      return *a2 + 4 * v5;
  }
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<unsigned int,unsigned int,re::Matrix3x3<float>,void,void>::input2<re::Matrix3x3<float>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 1;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 1, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 56);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 48) + 48 * v5;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::RegisterTableReader<unsigned int,unsigned int,re::Matrix4x4<float>,void,void>::input2<re::Matrix4x4<float>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = 3 * a3 + 1;
  v4 = a1[1];
  if (v4 <= v3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, 3 * a3 + 1, v4);
    _os_crash();
    __break(1u);
  }
  else
  {
    v5 = *(_QWORD *)(*a1 + 8 * v3);
    v6 = *(_QWORD *)(a2 + 72);
    if (v6 > v5)
      return *(_QWORD *)(a2 + 64) + (v5 << 6);
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::`anonymous namespace'::mapBranchOutputs<int>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t i;
  unint64_t v7;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (result == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v7, a6);
        _os_crash();
        __break(1u);
      }
      v7 = *(_QWORD *)(a4 + 8 * i);
      if (v7 >= a6)
        goto LABEL_8;
      *(_DWORD *)(a5 + 4 * v7) = *(_DWORD *)(a2 + 4 * i);
    }
  }
  return result;
}

float re::`anonymous namespace'::mapBranchOutputs<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t i;
  unint64_t v7;
  float result;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      if (a1 == i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v7, a6);
        _os_crash();
        __break(1u);
      }
      v7 = *(_QWORD *)(a4 + 8 * i);
      if (v7 >= a6)
        goto LABEL_8;
      result = *(float *)(a2 + 4 * i);
      *(float *)(a5 + 4 * v7) = result;
    }
  }
  return result;
}

__n128 re::`anonymous namespace'::mapBranchOutputs<re::Matrix3x3<float>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;

  v3 = *(_QWORD *)(a2 + 80);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    while (*(_QWORD *)(a2 + 80) > v5)
    {
      if (*(_QWORD *)(a1 + 80) <= v5)
        goto LABEL_9;
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v5);
      v7 = *(_QWORD *)(a3 + 56);
      if (v7 <= v6)
        goto LABEL_10;
      v8 = *(_QWORD *)(a1 + 88) + v4;
      v9 = *(_QWORD *)(a3 + 48) + 48 * v6;
      result = *(__n128 *)v8;
      v11 = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v9 + 16) = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(v9 + 32) = v11;
      *(__n128 *)v9 = result;
      ++v5;
      v4 += 48;
      if (v3 == v5)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v6, v7);
    _os_crash();
    __break(1u);
  }
  return result;
}

__n128 re::`anonymous namespace'::mapBranchOutputs<re::Matrix4x4<float>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v3 = *(_QWORD *)(a2 + 104);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    while (*(_QWORD *)(a2 + 104) > v5)
    {
      if (*(_QWORD *)(a1 + 104) <= v5)
        goto LABEL_9;
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v5);
      v7 = *(_QWORD *)(a3 + 72);
      if (v7 <= v6)
        goto LABEL_10;
      v8 = *(_QWORD *)(a1 + 112) + v4;
      v9 = *(_QWORD *)(a3 + 64) + (v6 << 6);
      result = *(__n128 *)v8;
      v11 = *(_OWORD *)(v8 + 16);
      v12 = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(v9 + 48) = v12;
      *(__n128 *)v9 = result;
      *(_OWORD *)(v9 + 16) = v11;
      ++v5;
      v4 += 64;
      if (v3 == v5)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v6, v7);
    _os_crash();
    __break(1u);
  }
  return result;
}

__n128 re::`anonymous namespace'::mapBranchOutputs<re::Quaternion<float>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 result;

  v3 = *(_QWORD *)(a2 + 128);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    while (*(_QWORD *)(a2 + 128) > v5)
    {
      if (*(_QWORD *)(a1 + 128) <= v5)
        goto LABEL_9;
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * v5);
      v7 = *(_QWORD *)(a3 + 88);
      if (v7 <= v6)
        goto LABEL_10;
      result = *(__n128 *)(*(_QWORD *)(a1 + 136) + v4);
      *(__n128 *)(*(_QWORD *)(a3 + 80) + 16 * v6) = result;
      ++v5;
      v4 += 16;
      if (v3 == v5)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v6, v7);
    _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::`anonymous namespace'::mapBranchOutputs<re::Vector2<float>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a2 + 152);
  if (v3)
  {
    v4 = 0;
    while (*(_QWORD *)(a2 + 152) > v4)
    {
      if (*(_QWORD *)(result + 152) <= v4)
        goto LABEL_9;
      v5 = *(_QWORD *)(*(_QWORD *)(a2 + 160) + 8 * v4);
      v6 = *(_QWORD *)(a3 + 104);
      if (v6 <= v5)
        goto LABEL_10;
      *(_QWORD *)(*(_QWORD *)(a3 + 96) + 8 * v5) = *(_QWORD *)(*(_QWORD *)(result + 160) + 8 * v4++);
      if (v3 == v4)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v5, v6);
    _os_crash();
    __break(1u);
  }
  return result;
}

__n128 re::`anonymous namespace'::mapBranchOutputs<re::Vector3<float>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 result;

  v3 = *(_QWORD *)(a2 + 176);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    while (*(_QWORD *)(a2 + 176) > v5)
    {
      if (*(_QWORD *)(a1 + 176) <= v5)
        goto LABEL_9;
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 184) + 8 * v5);
      v7 = *(_QWORD *)(a3 + 120);
      if (v7 <= v6)
        goto LABEL_10;
      result = *(__n128 *)(*(_QWORD *)(a1 + 184) + v4);
      *(__n128 *)(*(_QWORD *)(a3 + 112) + 16 * v6) = result;
      ++v5;
      v4 += 16;
      if (v3 == v5)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v6, v7);
    _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t *re::animationLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::animationLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Animation");
  }
  return &re::animationLogObjects(void)::logObjects;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::ECSService>(void)::info = re::ecs2::introspect_ECSService(0);
  }
  v3 = re::introspect<re::ecs2::ECSService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::EventBus>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::EventBus>(void)::info = re::introspect_EventBus(0);
  }
  v3 = re::introspect<re::EventBus>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::EventBus::subscribe<re::ecs2::Scene,RESceneDidAddEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __objc2_class_ro *Type;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<RESceneDidAddEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)Type);
  re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

uint64_t re::EventBus::subscribe<re::ecs2::Scene,RESceneWillRemoveEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __objc2_class_ro *v10;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v10 = re::EventBus::getTypeId<RESceneWillRemoveEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)v10);
  re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

uint64_t re::PeerAttributionService::getOrCreateContextForPeerId(re::PeerAttributionService *this, uint64_t a2)
{
  char *v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;

  v11 = a2;
  v3 = (char *)this + 96;
  v4 = (_QWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 96, &v11);
  if (v4)
    return *v4;
  v5 = re::globalAllocators(0);
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 24, 8);
  v6[1] = 0;
  v6[2] = 0;
  *((_WORD *)v6 + 8) = -1;
  v10 = v6;
  *v6 = v11;
  v6[1] = *((_QWORD *)this + 56);
  v7 = re::PeerAttributionService::acquireAttributionIndex(this);
  if (v7 == 0xFFFF)
  {
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 400, &v11);
    LOWORD(v7) = 0;
    goto LABEL_6;
  }
  if (v7 < 0x20)
  {
    *((_QWORD *)this + v7 + 18) = v6;
LABEL_6:
    *((_WORD *)v6 + 8) = v7;
    v4 = &v10;
    re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::PeerAttributionContext *&>((uint64_t)v3, &v11, &v10);
    return *v4;
  }
  re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v7, 32, v10);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 32 * v4 + 16) != v2)
  {
    while (1)
    {
      v4 = *(_DWORD *)(v6 + 32 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 32 * v4 + 16) == v2)
        return v6 + 32 * v4 + 24;
    }
    return 0;
  }
  return v6 + 32 * v4 + 24;
}

uint64_t re::PeerAttributionService::acquireAttributionIndex(re::PeerAttributionService *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned __int16 v7;

  v1 = *((_QWORD *)this + 9);
  if (v1)
  {
    v2 = v1 - 1;
    v7 = *(_WORD *)(*((_QWORD *)this + 11) + 2 * v2);
    v3 = v7;
    *((_QWORD *)this + 9) = v2;
    ++*((_DWORD *)this + 20);
    v4 = 0xFFFFLL;
    if (v3 == 0xFFFF)
      return v4;
  }
  else
  {
    v5 = *(unsigned __int16 *)this;
    if (v5 > 0x1F)
      return 0xFFFFLL;
    *(_WORD *)this = v5 + 1;
    v7 = v5;
  }
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addNew((uint64_t)this + 8, &v7);
  return v7;
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 24 * v9;
  return v11 + 16;
}

uint64_t re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::PeerAttributionContext *&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::PeerAttributionContext *&>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

re::PeerAttributionService *re::PeerAttributionService::destroyContext(re::PeerAttributionService *this, uint64_t a2)
{
  re::PeerAttributionService *v3;
  uint64_t v4;
  re *v5;
  uint64_t *v6;

  if (a2)
  {
    v3 = this;
    v4 = *(unsigned __int16 *)(a2 + 16);
    if (!v4)
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)this + 400, (uint64_t *)a2);
      goto LABEL_7;
    }
    if (v4 < 0x20)
    {
      *((_QWORD *)this + v4 + 18) = 0;
      re::PeerAttributionService::releaseAttributionIndex(this, v4);
LABEL_7:
      v5 = (re *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove((uint64_t)v3 + 96, (uint64_t *)a2);
      v6 = re::globalAllocators(v5);
      return (re::PeerAttributionService *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6[2] + 40))(v6[2], a2);
    }
    re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < N", "operator[]", 234, v4, 32);
    this = (re::PeerAttributionService *)_os_crash();
    __break(1u);
  }
  return this;
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31)) % v2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v9 + 24 * v7 + 16) != v3)
  {
    while (1)
    {
      v10 = v7;
      LODWORD(v7) = *(_DWORD *)(v9 + 24 * v7 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v7 == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v9 + 24 * v7 + 16) == v3)
      {
        *(_DWORD *)(v9 + 24 * v10 + 8) = *(_DWORD *)(v9 + 24 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 24 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 24 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v11 + 24 * v7;
  v15 = *(_DWORD *)(v12 + 8);
  v14 = (int *)(v12 + 8);
  v13 = v15;
  if (v15 < 0)
  {
    *v14 = v13 & 0x7FFFFFFF;
    v11 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v11 + 24 * v7 + 8);
  }
  v16 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v11 + 24 * v7 + 8) = *(_DWORD *)(a1 + 36) | v13 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v16 + 1;
  return 1;
}

_QWORD *re::PeerAttributionService::releaseAttributionIndex(re::PeerAttributionService *this, unsigned __int16 a2)
{
  _QWORD *result;
  unsigned __int16 v4;

  v4 = a2;
  result = (_QWORD *)re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove((uint64_t)this + 8, &v4);
  if ((_DWORD)result)
    return re::DynamicArray<unsigned short>::add((_QWORD *)this + 7, &v4);
  return result;
}

uint64_t re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(v5 + 4 * v4);
  if ((_DWORD)v6 == 0x7FFFFFFF)
    return 0;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = v8 + 32 * v6;
  if (*(_QWORD *)(v9 + 16) != v2)
  {
    while (1)
    {
      v10 = v6;
      v6 = *(_DWORD *)(v8 + 32 * v6 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v6 == 0x7FFFFFFF)
        return 0;
      v11 = v8 + 32 * v6;
      if (*(_QWORD *)(v11 + 16) == v2)
      {
        *(_DWORD *)(v8 + 32 * v10 + 8) = *(_DWORD *)(v8 + 32 * v10 + 8) & 0x80000000 | *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v9 + 8) & 0x7FFFFFFF;
LABEL_9:
  v12 = *(_QWORD *)(a1 + 16);
  v13 = v12 + 32 * v6;
  v16 = *(_DWORD *)(v13 + 8);
  v15 = (int *)(v13 + 8);
  v14 = v16;
  if (v16 < 0)
  {
    *v15 = v14 & 0x7FFFFFFF;
    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v12 + 32 * v6 + 8);
  }
  v17 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v12 + 32 * v6 + 8) = *(_DWORD *)(a1 + 36) | v14 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v6;
  *(_DWORD *)(a1 + 40) = v17 + 1;
  return 1;
}

uint64_t re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addNew(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = (unsigned __int16)*a2;
  v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
  v6 = v5 ^ (v5 >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 16 * v12;
    return v11 + 12;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(unsigned __int16 *)(v10 + 16 * v9 + 12) != (_DWORD)v4)
  {
    v9 = *(_DWORD *)(v10 + 16 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 16 * v9;
  return v11 + 12;
}

uint64_t re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int v18;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v3 = *a2;
  v4 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v3) ^ ((0xBF58476D1CE4E5B9 * v3) >> 27));
  v5 = (v4 ^ (v4 >> 31)) % v2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = v9 + 16 * v7;
  if (*(unsigned __int16 *)(v10 + 12) != (_DWORD)v3)
  {
    while (1)
    {
      v11 = v7;
      v7 = *(_DWORD *)(v9 + 16 * v7 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v7 == 0x7FFFFFFF)
        return 0;
      v12 = v9 + 16 * v7;
      if (*(unsigned __int16 *)(v12 + 12) == (_DWORD)v3)
      {
        *(_DWORD *)(v9 + 16 * v11 + 8) = *(_DWORD *)(v9 + 16 * v11 + 8) & 0x80000000 | *(_DWORD *)(v12 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v10 + 8) & 0x7FFFFFFF;
LABEL_9:
  v13 = *(_QWORD *)(a1 + 16);
  v14 = v13 + 16 * v7;
  v17 = *(_DWORD *)(v14 + 8);
  v16 = (int *)(v14 + 8);
  v15 = v17;
  if (v17 < 0)
  {
    *v16 = v15 & 0x7FFFFFFF;
    v13 = *(_QWORD *)(a1 + 16);
    v15 = *(_DWORD *)(v13 + 16 * v7 + 8);
  }
  v18 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v13 + 16 * v7 + 8) = *(_DWORD *)(a1 + 36) | v15 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v18 + 1;
  return 1;
}

_QWORD *re::DynamicArray<unsigned short>::add(_QWORD *this, _WORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<unsigned short>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_WORD *)(v3[4] + 2 * v4) = *a2;
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __objc2_class_ro *Type;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<RESceneEntityDidActivateEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)Type);
  re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __objc2_class_ro *Type;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<REComponentDidActivateEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)Type);
  re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

uint64_t *re::allocInfo_PeerAttributionService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_30);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_30))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FB0B0, 0);
    *(uint64_t *)((char *)&qword_2540FB0C0 + 6) = 0;
    qword_2540FB0C0 = 0;
    qword_2540FB0D0 = 0;
    qword_2540FB0D8 = 0xFFFFFFFFLL;
    qword_2540FB0B0 = (uint64_t)&off_24ED7DAA8;
    qword_2540FB0E0 = (uint64_t)"PeerAttributionService";
    dword_2540FB0E8 = 0;
    unk_2540FB0F0 = 0u;
    unk_2540FB100 = 0u;
    unk_2540FB110 = 0u;
    qword_2540FB120 = 0;
    __cxa_guard_release(&_MergedGlobals_30);
  }
  return &qword_2540FB0B0;
}

void re::initInfo_PeerAttributionService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xA3B5877921502CB0;
  v5[1] = "PeerAttributionService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x21800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_PeerAttributionService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_PeerAttributionService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PeerAttributionService", (uint64_t (*)(re::internal *))re::allocInfo_PeerAttributionService, (re::IntrospectionBase *(*)(void))re::initInfo_PeerAttributionService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::PeerAttributionService>, this);
}

double re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 16 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 16;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t (***re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(uint64_t a1))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = *(uint64_t (****)(_QWORD))(a1 + 32);
  if (result)
  {
    result = (uint64_t (***)(_QWORD))(**result)(result);
    if (*(_QWORD *)(a1 + 32) != a1)
      result = (uint64_t (***)(_QWORD))(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
    *(_QWORD *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t re::EventBus::EventInfo::addSubscription(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re *v12;
  uint64_t *v13;
  __int128 v14;
  _QWORD v15[2];
  unint64_t v16;
  _BYTE v17[48];
  uint64_t v18;
  _BYTE *v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[24];
  uint64_t v23;
  _BYTE *v24;
  __n128 v25;
  uint64_t v26;
  __n128 *v27;
  _BYTE v28[24];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 8) + 1;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)&v14 = a3;
  *((_QWORD *)&v14 + 1) = a4;
  v8 = *(_QWORD *)(a2 + 48);
  v25.n128_u64[0] = a1;
  v26 = v8;
  v27 = 0;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::operator=<48ul>((uint64_t)&v25.n128_i64[1], a2);
  *(_QWORD *)v28 = v7;
  *(_OWORD *)&v28[8] = v14;
  v15[0] = *(_QWORD *)a1;
  v15[1] = v7;
  if (!(a3 | a4))
  {
    v10 = a1 + 88;
    goto LABEL_5;
  }
  v9 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(a1 + 216), &v14);
  if (v9 != -1)
  {
    v10 = *(_QWORD *)(a1 + 224) + 144 * v9 + 16;
LABEL_5:
    if (!*(_DWORD *)(a1 + 16) || *(_QWORD *)(v10 + 96))
      goto LABEL_7;
    goto LABEL_13;
  }
  if (!*(_DWORD *)(a1 + 16))
  {
    v10 = 0;
LABEL_7:
    re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(re::EventBus::Subscriptions *)#1}::operator()(&v25, v10);
    goto LABEL_8;
  }
LABEL_13:
  v16 = v25.n128_u64[0];
  v18 = v26;
  v19 = 0;
  v12 = (re *)re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::operator=<48ul>((uint64_t)v17, (uint64_t)&v25.n128_i64[1]);
  v20 = *(_OWORD *)v28;
  v21 = *(_QWORD *)&v28[16];
  v13 = re::globalAllocators(v12);
  re::FunctionBase<24ul,void ()(void)>::FunctionBase<re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(void)#1},void,void>((uint64_t)v22, (uint64_t *)&v16, v13[2]);
  re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::addNew((uint64_t *)(a1 + 280), v15, (uint64_t)v22);
  if (v24)
  {
    (**(void (***)(_BYTE *))v24)(v24);
    if (v24 != v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
    v24 = 0;
  }
  if (v19)
  {
    (**(void (***)(_BYTE *))v19)(v19);
    if (v19 != v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
  }
LABEL_8:
  if (v27)
  {
    (*(void (**)(__n128 *))v27->n128_u64[0])(v27);
    if (v27 != (__n128 *)&v25.n128_i8[8])
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  }
  return v15[0];
}

uint64_t re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED27638;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED276A0;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

__objc2_class_ro *re::EventBus::getTypeId<RESceneDidAddEvent>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;
  const char *v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::EventBus::getTypeId<RESceneDidAddEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"18RESceneDidAddEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[303];
}

uint64_t re::EventBus::addOrGetEventInfo(re::EventBus *this, uint64_t a2)
{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v11 = a2;
  v4 = (re::EventBus *)((char *)this + 24);
  v5 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)this + 3, &v11);
  if (v5 == -1 || (v6 = *(_QWORD *)(*((_QWORD *)this + 4) + 48 * v5 + 8)) == 0)
  {
    v7 = re::globalAllocators((re *)v5);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 344, 8);
    *(_QWORD *)v8 = a2;
    *(_OWORD *)(v8 + 120) = 0u;
    *(_OWORD *)(v8 + 136) = 0u;
    *(_DWORD *)(v8 + 152) = 0;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_OWORD *)(v8 + 176) = 0u;
    *(_DWORD *)(v8 + 192) = 0;
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    *(_OWORD *)(v8 + 100) = 0u;
    *(_OWORD *)(v8 + 88) = 0u;
    *(_OWORD *)(v8 + 72) = 0u;
    *(_OWORD *)(v8 + 200) = 0u;
    *(_OWORD *)(v8 + 232) = 0u;
    *(_OWORD *)(v8 + 248) = 0u;
    *(_OWORD *)(v8 + 264) = 0u;
    *(_OWORD *)(v8 + 280) = 0u;
    *(_OWORD *)(v8 + 296) = 0u;
    *(_OWORD *)(v8 + 312) = 0u;
    *(_OWORD *)(v8 + 328) = 0u;
    *(_OWORD *)(v8 + 216) = 0u;
    v12[3] = v12;
    v11 = v8;
    v12[0] = &off_24ED27540;
    v6 = *re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addNew(v4, &v10, &v11);
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v11);
  }
  return v6;
}

unint64_t re::EventBus::typeStringToId(re::EventBus *this, const char *a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  char v8;

  std::string::basic_string[abi:nn180100]<0>(__p, (char *)this);
  if ((v7 & 0x80u) == 0)
    v2 = (uint64_t *)__p;
  else
    v2 = (uint64_t *)__p[0];
  if ((v7 & 0x80u) == 0)
    v3 = v7;
  else
    v3 = (unint64_t)__p[1];
  v4 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t)&v8, v2, v3);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  return v4;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v4 + v7 + v8 + a3;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v8 + a3 + v5 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v6 + v9 + v17;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v30 + v28 + v39 + v29;
        v21 = __ROR8__(v30 + v28 + v39, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:nn180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * ((v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)) ^ v5);
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

_QWORD *re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addNew(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(a1, a2, a3);
  else
    return (_QWORD *)(*((_QWORD *)a1 + 1) + 48 * v6 + 8);
}

uint64_t re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = v6 % v3;
  v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = v6 % v3;
  while (1)
  {
    v11 = *(int8x16_t *)(*a1 + 16 * v10);
    v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3)
      v10 = 0;
    else
      ++v10;
    v15 = -1;
    if (v10 == v7)
      return v15;
  }
  v14 = 16 * v10;
  while (1)
  {
    v15 = v13 + v14;
    if (v4 == *(_QWORD *)(a1[1] + 48 * (v13 + v14)))
      return v15;
    if (v13 <= 0x3E)
    {
      v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

_QWORD *re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL8 v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  _QWORD *result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v15 == 255;
  v17 = v13 + 16 * v11;
  v25 = *a2;
  std::unique_ptr<void,std::function<void ()(void *)>>::unique_ptr[abi:nn180100](&v26, a3);
  v17 *= 3;
  v18 = (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v17);
  *v18 = v25;
  v19 = v26;
  v26 = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](v18 + 1, v19);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](v18 + 2, (uint64_t)v27);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v26);
  v20 = *((_QWORD *)a1 + 4) - v16;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v20;
  v21 = (unint64_t *)(*((_QWORD *)a1 + 1) + 16 * v17);
  v23 = *v21;
  result = v21 + 1;
  v24 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v24 >> 31) ^ v24;
  return result;
}

double re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::doResize(a1, v3);
}

_QWORD *re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t i;
  _QWORD *v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v7 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 49 * v6, 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v8 = 0;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v7];
    v6 = v3[2];
    if (v6)
    {
      v10 = 0;
      for (i = 0; i < v6; ++i)
      {
        v12 = (_QWORD *)(v3[1] + v10);
        v12[5] = 0;
        *v12 = 0;
        v12[1] = 0;
        v6 = v3[2];
        v10 += 48;
      }
    }
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

double re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  v6 = a1[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a1;
    v9 = v6 >> 4;
    v10 = (__n128)xmmword_2260EE390;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        goto LABEL_9;
    }
    v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    v21 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(v22, *(_QWORD *)(v20[0] + 8) + 48 * v12, *(_QWORD *)(v20[0] + 8) + 48 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v12 = v21;
      }
      while (v21 != -1);
      v6 = a1[2];
    }
  }
LABEL_9:
  v13 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  v14 = v22[0];
  v15 = v22[1];
  v22[0] = *(_OWORD *)a1;
  *(_QWORD *)&v22[1] = v6;
  v16 = v22[2];
  v17 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v13;
  *(_OWORD *)((char *)&v22[2] + 8) = v17;
  v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v14;
  *((_OWORD *)a1 + 1) = v15;
  *((_OWORD *)a1 + 2) = v16;
  *(_OWORD *)((char *)&v22[1] + 8) = v18;
  return re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)v22);
}

_QWORD *re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = result[2];
  v2 = v1 >> 4;
  v3 = (_QWORD *)*result;
  v4 = *(_QWORD *)(*result + 16);
  if (v1 >> 4 >= v4 >> 4)
  {
LABEL_8:
    v6 = -1;
    goto LABEL_9;
  }
  v5 = __clz(__rbit64(result[1] & (-2 << (v1 & 0xF))));
  if (v5 >= 0x40)
  {
    v7 = ~v2 + (v4 >> 4);
    v8 = 16 * v2;
    while (v7)
    {
      v9 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*v3 + v8 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
      result[1] = v9;
      v10 = __clz(__rbit64(v9));
      --v7;
      v8 += 16;
      if (v10 <= 0x3F)
      {
        v6 = v10 + v8;
        goto LABEL_9;
      }
    }
    goto LABEL_8;
  }
  v6 = v5 + (v1 & 0xFFFFFFFFFFFFFFF0);
LABEL_9:
  result[2] = v6;
  return result;
}

double re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = 48 * v3;
        v5 = (uint64_t *)(v2 + 8);
        do
        {
          v5 = std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v5)
             + 6;
          v4 -= 48;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

_QWORD *re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 145 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = (_OWORD *)(v3[1] + v9);
        v11[7] = 0uLL;
        v11[8] = 0uLL;
        v11[5] = 0uLL;
        v11[6] = 0uLL;
        v11[3] = 0uLL;
        v11[4] = 0uLL;
        v11[1] = 0uLL;
        v11[2] = 0uLL;
        *v11 = 0uLL;
        ++v10;
        v12 = v3[2];
        v9 += 144;
      }
      while (v10 < v12);
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

void std::__function::__func<std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1},std::allocator<std::allocator>,void ()(std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1})>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1},std::allocator<std::allocator>,void ()(std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1})>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED27540;
  return result;
}

void std::__function::__func<std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1},std::allocator<std::allocator>,void ()(std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1})>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27540;
}

re *std::__function::__func<std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1},std::allocator<std::allocator>,void ()(std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1})>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::EventBus::EventInfo>((re *)"operator()", 36, *a2);
}

uint64_t std::__function::__func<std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1},std::allocator<std::allocator>,void ()(std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1},std::allocator<std::allocator>,void ()(std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>> re::makeDefaultUniquePtr<re::EventBus::EventInfo,unsigned long long &>(unsigned long long &)::{lambda(re::EventBus::EventInfo*)#1})>::target_type()
{
}

re *re::internal::destroyPersistent<re::EventBus::EventInfo>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  double v8;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::deinit(a3 + 280);
    v5.n128_f64[0] = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::deinit(a3 + 216);
    v6 = *(_QWORD *)(a3 + 168);
    if (v6)
    {
      if (*(_QWORD *)(a3 + 200))
        (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 40))(v6, v5.n128_f64[0]);
      *(_QWORD *)(a3 + 200) = 0;
      *(_QWORD *)(a3 + 176) = 0;
      *(_QWORD *)(a3 + 184) = 0;
      *(_QWORD *)(a3 + 168) = 0;
      ++*(_DWORD *)(a3 + 192);
    }
    v7 = *(_QWORD *)(a3 + 128);
    if (v7)
    {
      if (*(_QWORD *)(a3 + 160))
        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v7 + 40))(v7, v5);
      *(_QWORD *)(a3 + 160) = 0;
      *(_QWORD *)(a3 + 136) = 0;
      *(_QWORD *)(a3 + 144) = 0;
      *(_QWORD *)(a3 + 128) = 0;
      ++*(_DWORD *)(a3 + 152);
    }
    re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::deinit(a3 + 88);
    v8 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a3 + 24);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v4 + 40))(v4, a3, v8);
  }
  return result;
}

double re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = 56 * v3;
        v5 = v2 + 16;
        do
        {
          re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v5);
          v5 += 56;
          v4 -= 56;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = 144 * v3;
        v5 = v2 + 80;
        do
        {
          v6 = *(_QWORD *)(v5 + 16);
          if (v6)
          {
            if (*(_QWORD *)(v5 + 48))
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
            *(_QWORD *)(v5 + 48) = 0;
            *(_QWORD *)(v5 + 24) = 0;
            *(_QWORD *)(v5 + 32) = 0;
            *(_QWORD *)(v5 + 16) = 0;
            ++*(_DWORD *)(v5 + 40);
          }
          v7 = *(_QWORD *)(v5 - 24);
          if (v7)
          {
            if (*(_QWORD *)(v5 + 8))
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *(_QWORD *)(v5 + 8) = 0;
            *(_QWORD *)(v5 - 16) = 0;
            *(_QWORD *)(v5 - 8) = 0;
            *(_QWORD *)(v5 - 24) = 0;
            ++*(_DWORD *)v5;
          }
          re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::deinit(v5 - 64);
          v5 += 144;
          v4 -= 144;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v4 << 6;
        do
        {
          re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable(v3);
          v3 += 64;
          v5 -= 64;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 8))
      *(_QWORD *)(a1 + 8) = 0;
    if (*(_QWORD *)a1)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::addNew(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
  else
    return a1[1] + 56 * v6 + 16;
}

uint64_t re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(re::EventBus::Subscriptions *)#1}::operator()(__n128 *a1, uint64_t a2)
{
  __n128 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  _OWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[48];
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 5;
  v5 = a1->n128_u64[0];
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addNew((_anonymous_namespace_ *)(a1->n128_u64[0] + 24), &a1[4].n128_i64[1], (__int128 *)&a1[5]);
  if (!a2)
  {
    if (v4->n128_u64[0] || a1[5].n128_u64[1])
    {
      v6 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find((uint64_t *)(v5 + 216), v4);
      if (v6 == -1)
      {
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        v14 = 0u;
        v15 = 0u;
        memset(v13, 0, sizeof(v13));
        a2 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::addNew((uint64_t *)(v5 + 216), v4, (uint64_t)v13);
        if ((_QWORD)v17)
        {
          if ((_QWORD)v19)
            (*(void (**)(void))(*(_QWORD *)v17 + 40))();
          *(_QWORD *)&v19 = 0;
          *(_QWORD *)&v18 = 0;
          v17 = 0uLL;
          ++DWORD2(v18);
        }
        if (*((_QWORD *)&v14 + 1))
        {
          if (*((_QWORD *)&v16 + 1))
            (*(void (**)(void))(**((_QWORD **)&v14 + 1) + 40))();
          *((_QWORD *)&v16 + 1) = 0;
          v15 = 0uLL;
          *((_QWORD *)&v14 + 1) = 0;
          LODWORD(v16) = v16 + 1;
        }
        re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::deinit((uint64_t)v13);
      }
      else
      {
        a2 = *(_QWORD *)(v5 + 224) + 144 * v6 + 16;
      }
    }
    else
    {
      a2 = v5 + 88;
    }
  }
  v7 = a1[4].n128_i64[1];
  v21 = a1[3].n128_u64[1];
  v22 = 0;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::operator=<48ul>((uint64_t)v20, (uint64_t)&a1->n128_i64[1]);
  re::EventBus::Subscriptions::add(a2, v7, (uint64_t)v20);
  result = (uint64_t)v22;
  if (v22)
  {
    result = (**(uint64_t (***)(_BYTE *))v22)(v22);
    if (v22 != v20)
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v21 + 40))(v21);
  }
  if (*(_BYTE *)(v5 + 20))
  {
    v9 = 1;
  }
  else if (v4->n128_u64[0])
  {
    v9 = 0;
  }
  else
  {
    v9 = a1[5].n128_u64[1] == 0;
  }
  *(_BYTE *)(v5 + 20) = v9;
  if (*(_BYTE *)(v5 + 21))
    v10 = 1;
  else
    v10 = v4->n128_u64[0] != 0;
  *(_BYTE *)(v5 + 21) = v10;
  if (*(_BYTE *)(v5 + 22))
    v11 = 1;
  else
    v11 = a1[5].n128_u64[1] != 0;
  *(_BYTE *)(v5 + 22) = v11;
  if (*(_BYTE *)(v5 + 23))
  {
    LOBYTE(v12) = 1;
  }
  else
  {
    v12 = v4->n128_u64[0];
    if (v4->n128_u64[0])
      LOBYTE(v12) = a1[5].n128_u64[1] != 0;
  }
  *(_BYTE *)(v5 + 23) = v12;
  return result;
}

uint64_t re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::operator=<48ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable(a1);
    v4 = *(_QWORD *)(a2 + 56);
    if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48))
    {
      v5 = a2;
      if (v4 != a2)
      {
        *(_QWORD *)(a1 + 56) = v4;
        *(_QWORD *)(a2 + 56) = 0;
        return a1;
      }
    }
    else
    {
      v5 = *(_QWORD *)(a2 + 56);
      if (!v4)
        return a1;
    }
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v7 = a1;
    if (v6 >= 0x31)
    {
      v8 = v6;
      v9 = *(_QWORD *)(a1 + 48);
      if (v9)
        v7 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, v8, 0);
      else
        v7 = 0;
    }
    *(_QWORD *)(a1 + 56) = v7;
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 32))(*(_QWORD *)(a2 + 56));
    re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable(a2);
  }
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable(a1);
    v4 = *(_QWORD *)(a2 + 56);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      v6 = a1;
      if (v5 >= 0x31)
      {
        v7 = v5;
        v8 = *(_QWORD *)(a1 + 48);
        if (v8)
          v6 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, v7, 0);
        else
          v6 = 0;
      }
      *(_QWORD *)(a1 + 56) = v6;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
    }
  }
  return a1;
}

uint64_t (***re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable(uint64_t a1))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = *(uint64_t (****)(_QWORD))(a1 + 56);
  if (result)
  {
    result = (uint64_t (***)(_QWORD))(**result)(result);
    if (*(_QWORD *)(a1 + 56) != a1)
      result = (uint64_t (***)(_QWORD))(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
    *(_QWORD *)(a1 + 56) = 0;
  }
  return result;
}

uint64_t re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  int8x16_t v7;
  unint64_t v8;
  unint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  char v18;
  char v19;
  char v20;

  if (!a1[7] || (unint64_t)a1[2] < 0x10 || !a1[3])
    return -1;
  v4 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v18, a2) % ((unint64_t)a1[2] >> 4);
  while (1)
  {
    v5 = *a1;
    v6 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v19, a2);
    v7 = *(int8x16_t *)(v5 + 16 * v4);
    v8 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(vdupq_n_s8(v6 & 0x7F), v7), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v9 = __clz(__rbit64(v8));
    v10.i64[0] = -1;
    v10.i64[1] = -1;
    if (v9 <= 0x3F)
      break;
LABEL_13:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (++v4 == (unint64_t)a1[2] >> 4)
      v4 = 0;
    v17 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v20, a2)
        % ((unint64_t)a1[2] >> 4);
    result = -1;
    if (v4 == v17)
      return result;
  }
  v11 = 16 * v4;
  while (1)
  {
    result = v9 + v11;
    v13 = (uint64_t *)(a1[1] + 144 * (v9 + v11));
    v15 = *v13;
    v14 = v13[1];
    if (*a2 == v15 && a2[1] == v14)
      return result;
    if (v9 <= 0x3E)
    {
      v9 = __clz(__rbit64((-2 << v9) & v8));
      if (v9 < 0x40)
        continue;
    }
    goto LABEL_13;
  }
}

unint64_t re::Hash<re::Pair<void const*,void const*,true>>::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = 0xBF58476D1CE4E5B9 * (a2[1] ^ (a2[1] >> 30));
  return (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
        + (v3 << 6)
        + (v3 >> 2)
        - 0x61C8864680B583E9) ^ v3;
}

uint64_t re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::find(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  int8x16_t v7;
  unint64_t v8;
  unint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  char v18;
  char v19;
  char v20;

  if (!a1[7] || (unint64_t)a1[2] < 0x10 || !a1[3])
    return -1;
  v4 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v18, a2) % ((unint64_t)a1[2] >> 4);
  while (1)
  {
    v5 = *a1;
    v6 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v19, a2);
    v7 = *(int8x16_t *)(v5 + 16 * v4);
    v8 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(vdupq_n_s8(v6 & 0x7F), v7), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v9 = __clz(__rbit64(v8));
    v10.i64[0] = -1;
    v10.i64[1] = -1;
    if (v9 <= 0x3F)
      break;
LABEL_13:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (++v4 == (unint64_t)a1[2] >> 4)
      v4 = 0;
    v17 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v20, a2)
        % ((unint64_t)a1[2] >> 4);
    result = -1;
    if (v4 == v17)
      return result;
  }
  v11 = 16 * v4;
  while (1)
  {
    result = v9 + v11;
    v13 = (uint64_t *)(a1[1] + 56 * (v9 + v11));
    v15 = *v13;
    v14 = v13[1];
    if (*a2 == v15 && a2[1] == v14)
      return result;
    if (v9 <= 0x3E)
    {
      v9 = __clz(__rbit64((-2 << v9) & v8));
      if (v9 < 0x40)
        continue;
    }
    goto LABEL_13;
  }
}

uint64_t re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v17;
  _BYTE v18[24];
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || *((_QWORD *)a1 + 2) > (unint64_t)(8 * v6))
    re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::resize(a1, 1);
  v7 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v17, a2) % (*((_QWORD *)a1 + 2) >> 4);
  while (1)
  {
    v8 = *(_QWORD *)a1;
    v9 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v17, a2);
    v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v10 <= 0x3F)
      break;
    if (v7 + 1 == *((_QWORD *)a1 + 2) >> 4)
      v7 = 0;
    else
      ++v7;
  }
  v11 = v8 + 16 * v7;
  v12 = *(unsigned __int8 *)(v11 + v10);
  *(_BYTE *)(v11 + v10) = v9 & 0x7F;
  v13 = v10 + 16 * v7;
  v17 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a3 + 24);
  v20 = 0;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)v18, a3);
  v14 = (_OWORD *)(*((_QWORD *)a1 + 1) + 56 * v13);
  *v14 = v17;
  re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(v14 + 1), (uint64_t)v18);
  if (v20)
  {
    (**(void (***)(_BYTE *))v20)(v20);
    if (v20 != v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  }
  v15 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v15 - (v12 == 255);
  *((_QWORD *)a1 + 5) ^= re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v17, (_QWORD *)(*((_QWORD *)a1 + 1) + 56 * v13));
  return *((_QWORD *)a1 + 1) + 56 * v13 + 16;
}

double re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::doResize(a1, v3);
}

uint64_t *re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::init(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t i;
  uint64_t *v12;

  v3 = (uint64_t **)result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v7 = v5 >> 4;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 57 * v6, 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v8 = 0;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      do
        *(_OWORD *)&(*v3)[2 * v8++] = v9;
      while (v7 != v8);
      result = *v3;
    }
    v3[1] = &result[2 * v7];
    v6 = (unint64_t)v3[2];
    if (v6)
    {
      v10 = 0;
      for (i = 0; i < v6; ++i)
      {
        v12 = &v3[1][v10];
        v12[6] = 0;
        *((_OWORD *)v12 + 1) = 0u;
        *((_OWORD *)v12 + 2) = 0u;
        *(_OWORD *)v12 = 0u;
        result = re::globalAllocators((re *)result);
        v12[5] = result[2];
        v12[6] = 0;
        v6 = (unint64_t)v3[2];
        v10 += 7;
      }
    }
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = (uint64_t *)v6;
  return result;
}

double re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v18[2];
  uint64_t v19;
  _OWORD v20[4];

  v4 = a1[7];
  memset(v20, 0, sizeof(v20));
  re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::init((uint64_t *)v20, v4, a2);
  v18[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v18[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v19 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::internalAdd((_anonymous_namespace_ *)v20, (_QWORD *)(*(_QWORD *)(v18[0] + 8) + 56 * v10), *(_QWORD *)(v18[0] + 8) + 56 * v10 + 16);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v18);
        v10 = v19;
      }
      while (v19 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v11 = *((_QWORD *)&v20[3] + 1);
  *((_QWORD *)&v20[3] + 1) = a1[7];
  v12 = v20[0];
  v13 = v20[1];
  v20[0] = *(_OWORD *)a1;
  *(_QWORD *)&v20[1] = v5;
  v14 = v20[2];
  v15 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v20[3];
  a1[7] = v11;
  *(_OWORD *)((char *)&v20[2] + 8) = v15;
  v16 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v12;
  *((_OWORD *)a1 + 1) = v13;
  *((_OWORD *)a1 + 2) = v14;
  *(_OWORD *)((char *)&v20[1] + 8) = v16;
  return re::HashBrown<RESubscriptionHandle,re::Function<void ()(void)>,re::Hash<RESubscriptionHandle>,re::EqualTo<RESubscriptionHandle>,void,false>::deinit((uint64_t)v20);
}

uint64_t re::FunctionBase<24ul,void ()(void)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1);
    v4 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
    {
      v5 = a2;
      if (v4 != a2)
      {
        *(_QWORD *)(a1 + 32) = v4;
        *(_QWORD *)(a2 + 32) = 0;
        return a1;
      }
    }
    else
    {
      v5 = *(_QWORD *)(a2 + 32);
      if (!v4)
        return a1;
    }
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    v7 = a1;
    if (v6 >= 0x19)
    {
      v8 = v6;
      v9 = *(_QWORD *)(a1 + 24);
      if (v9)
        v7 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v9 + 32))(v9, v8, 0);
      else
        v7 = 0;
    }
    *(_QWORD *)(a1 + 32) = v7;
    (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 32))(*(_QWORD *)(a2 + 32));
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a2);
  }
  return a1;
}

uint64_t re::FunctionBase<24ul,void ()(void)>::FunctionBase<re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(void)#1},void,void>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  if (a3)
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(a3, 104, 0);
  else
    v5 = 0;
  v6 = *a2;
  *(_QWORD *)v5 = &off_24ED275D0;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 64) = a2[7];
  *(_QWORD *)(v5 + 72) = 0;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::operator=<48ul>(v5 + 16, (uint64_t)(a2 + 1));
  v7 = a2[11];
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a2 + 9);
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(a1 + 32) = v5;
  return a1;
}

_QWORD *re::internal::Callable<re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(void)#1},void ()(void)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED275D0;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)(a1 + 2));
  return a1;
}

void re::internal::Callable<re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(void)#1},void ()(void)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED275D0;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable((uint64_t)(a1 + 2));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(void)#1},void ()(void)>::operator()(uint64_t a1)
{
  return re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(re::EventBus::Subscriptions *)#1}::operator()((__n128 *)(a1 + 8), 0);
}

uint64_t re::internal::Callable<re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(void)#1},void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED275D0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 72) = 0;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::operator=<48ul>(a2 + 16, a1 + 16);
  v5 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = v5;
  return a2;
}

uint64_t re::internal::Callable<re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(void)#1},void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED275D0;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 72) = 0;
  re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::operator=<48ul>(a2 + 16, a1 + 16);
  v5 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = v5;
  return a2;
}

uint64_t re::internal::Callable<re::EventBus::EventInfo::addSubscription(re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> &&,void const*,void const*)::{lambda(void)#1},void ()(void)>::size()
{
  return 104;
}

_QWORD *re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addNew(_anonymous_namespace_ *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(a1, a2, a3);
  else
    return (_QWORD *)(*((_QWORD *)a1 + 1) + 24 * v6 + 8);
}

uint64_t re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::addNew(uint64_t *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
  else
    return a1[1] + 144 * v6 + 16;
}

uint64_t re::EventBus::Subscriptions::add(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v5 = *(_QWORD *)(a1 + 96);
  if (!v5)
  {
    re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)(a1 + 40), &v10);
    result = re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::add((_anonymous_namespace_ *)a1, a3);
    goto LABEL_6;
  }
  v6 = v5 - 1;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v6);
  *(_QWORD *)(a1 + 96) = v6;
  ++*(_DWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 56);
  if (v8 <= v7)
  {
    v11 = 0;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v12 = 136315906;
    v13 = "operator[]";
    v14 = 1024;
    v15 = 789;
    v16 = 2048;
    v17 = v7;
    v18 = 2048;
    v19 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    v11 = 0;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v12 = 136315906;
    v13 = "operator[]";
    v14 = 1024;
    v15 = 789;
    v16 = 2048;
    v17 = v7;
    v18 = 2048;
    v19 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v7) = a2;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 <= v7)
    goto LABEL_8;
  result = re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::operator=<48ul>(*(_QWORD *)(a1 + 32) + (v7 << 6), a3);
LABEL_6:
  ++*(_QWORD *)(a1 + 120);
  return result;
}

uint64_t re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = v6 % v3;
  v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = v6 % v3;
  while (1)
  {
    v11 = *(int8x16_t *)(*a1 + 16 * v10);
    v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3)
      v10 = 0;
    else
      ++v10;
    v15 = -1;
    if (v10 == v7)
      return v15;
  }
  v14 = 16 * v10;
  while (1)
  {
    v15 = v13 + v14;
    if (v4 == *(_QWORD *)(a1[1] + 24 * (v13 + v14)))
      return v15;
    if (v13 <= 0x3E)
    {
      v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

_QWORD *re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  _QWORD *result;
  unint64_t v24;
  unint64_t v25;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9;
  v9 = 0x94D049BB133111EBLL;
  v10 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  v12 = v7 >> 4;
  v13 = *(_QWORD *)a1;
  v14 = v11 % v12;
  while (1)
  {
    v15 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v15 < 0x40)
      break;
    if (v14 + 1 == v12)
      v14 = 0;
    else
      ++v14;
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v16 = v13 + 16 * v14;
  v17 = *(unsigned __int8 *)(v16 + v15) == 255;
  *(_BYTE *)(v16 + v15) = v11 & 0x7F;
  v18 = *a3;
  v19 = 3 * (v15 + 16 * v14);
  v20 = *((_QWORD *)a1 + 1) + 24 * (v15 + 16 * v14);
  *(_QWORD *)v20 = *a2;
  *(_OWORD *)(v20 + 8) = v18;
  v21 = *((_QWORD *)a1 + 4) - v17;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v21;
  v22 = (unint64_t *)(*((_QWORD *)a1 + 1) + 8 * v19);
  v24 = *v22;
  result = v22 + 1;
  v25 = (((v24 ^ (v24 >> 30)) * v8) ^ (((v24 ^ (v24 >> 30)) * v8) >> 27)) * v9;
  *((_QWORD *)a1 + 5) ^= (v25 >> 31) ^ v25;
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  _QWORD *result;
  unint64_t v22;
  unint64_t v23;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = *a3;
  v17 = 3 * (v13 + 16 * v11);
  v18 = *((_QWORD *)a1 + 1) + 8 * v17;
  *(_QWORD *)v18 = *a2;
  *(_OWORD *)(v18 + 8) = v16;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  v20 = (unint64_t *)(*((_QWORD *)a1 + 1) + 8 * v17);
  v22 = *v20;
  result = v20 + 1;
  v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v23 >> 31) ^ v23;
  return result;
}

uint64_t re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::doResize(a1, v3);
}

_QWORD *re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t i;
  _QWORD *v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v7 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 25 * v6, 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v8 = 0;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v7];
    v6 = v3[2];
    if (v6)
    {
      v10 = 0;
      for (i = 0; i < v6; ++i)
      {
        v12 = (_QWORD *)(v3[1] + v10);
        *v12 = 0;
        v12[1] = 0;
        v12[2] = 0;
        v6 = v3[2];
        v10 += 24;
      }
    }
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

uint64_t re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd((_anonymous_namespace_ *)v22, (_QWORD *)(*(_QWORD *)(v20[0] + 8) + 24 * v10), (__int128 *)(*(_QWORD *)(v20[0] + 8) + 24 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v10 = v21;
      }
      while (v21 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v12 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  result = *((_QWORD *)&v22[3] + 1);
  v13 = v22[0];
  v14 = v22[1];
  *(_QWORD *)&v22[1] = v5;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)&v22[0] = *a1;
  *((_QWORD *)&v22[0] + 1) = v16;
  v17 = v22[2];
  v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16)
      *((_QWORD *)&v22[0] + 1) = 0;
    if (v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::internalAdd(_anonymous_namespace_ *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  __n128 *v14;
  uint64_t v15;
  __n128 v17;
  _BYTE v18[40];
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  uint64_t v24;
  unint64_t v25;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || *((_QWORD *)a1 + 2) > (unint64_t)(8 * v6))
    re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::resize((uint64_t *)a1, 1);
  v7 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v17, a2) % (*((_QWORD *)a1 + 2) >> 4);
  while (1)
  {
    v8 = *(_QWORD *)a1;
    v9 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v17, a2);
    v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v10 <= 0x3F)
      break;
    if (v7 + 1 == *((_QWORD *)a1 + 2) >> 4)
      v7 = 0;
    else
      ++v7;
  }
  v11 = v8 + 16 * v7;
  v12 = *(unsigned __int8 *)(v11 + v10);
  *(_BYTE *)(v11 + v10) = v9 & 0x7F;
  v13 = v10 + 16 * v7;
  re::KeyValuePair<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions>::KeyValuePair<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions>(&v17, a2, a3);
  v14 = (__n128 *)(*((_QWORD *)a1 + 1) + 144 * v13);
  *v14 = v17;
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v14[1], (uint64_t)v18);
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v14[3].n128_i64[1], (uint64_t)v19);
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v14[6], (uint64_t)v22);
  v14[8].n128_u64[1] = v25;
  if (v22[0])
  {
    if (v24)
      (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
    v24 = 0;
    memset(v22, 0, sizeof(v22));
    ++v23;
  }
  if (v19[0])
  {
    if (v21)
      (*(void (**)(void))(*(_QWORD *)v19[0] + 40))();
    v21 = 0;
    memset(v19, 0, sizeof(v19));
    ++v20;
  }
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::deinit((uint64_t)v18);
  v15 = *((_QWORD *)a1 + 4) - (v12 == 255);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v15;
  *((_QWORD *)a1 + 5) ^= re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v17, (_QWORD *)(*((_QWORD *)a1 + 1) + 144 * v13));
  return *((_QWORD *)a1 + 1) + 144 * v13 + 16;
}

double re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::doResize(a1, v3);
}

double re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  v6 = a1[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a1;
    v9 = v6 >> 4;
    v10 = (__n128)xmmword_2260EE390;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        goto LABEL_9;
    }
    v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    v21 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::internalAdd(v22, *(_QWORD *)(v20[0] + 8) + 144 * v12, *(_QWORD *)(v20[0] + 8) + 144 * v12 + 16, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v12 = v21;
      }
      while (v21 != -1);
      v6 = a1[2];
    }
  }
LABEL_9:
  v13 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  v14 = v22[0];
  v15 = v22[1];
  v22[0] = *(_OWORD *)a1;
  *(_QWORD *)&v22[1] = v6;
  v16 = v22[2];
  v17 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v13;
  *(_OWORD *)((char *)&v22[2] + 8) = v17;
  v18 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v14;
  *((_OWORD *)a1 + 1) = v15;
  *((_OWORD *)a1 + 2) = v16;
  *(_OWORD *)((char *)&v22[1] + 8) = v18;
  return re::HashBrown<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions,re::Hash<re::Pair<void const*,void const*,true>>,re::EqualTo<re::Pair<void const*,void const*,true>>,void,false>::deinit((uint64_t)v22);
}

__n128 re::KeyValuePair<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions>::KeyValuePair<re::Pair<void const*,void const*,true>,re::EventBus::Subscriptions>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 result;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  result = *a2;
  *a1 = *a2;
  a1[3].n128_u64[0] = 0;
  a1[2].n128_u32[2] = 0;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = 0;
  v4 = *(_QWORD *)(a3 + 8);
  a1[1].n128_u64[0] = *(_QWORD *)a3;
  a1[1].n128_u64[1] = v4;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = a1[2].n128_u64[0];
  a1[2].n128_u64[0] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v5;
  v6 = a1[3].n128_u64[0];
  a1[3].n128_u64[0] = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v6;
  ++*(_DWORD *)(a3 + 24);
  ++a1[2].n128_u32[2];
  a1[5].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  a1[4].n128_u64[1] = 0;
  a1[3].n128_u64[1] = 0;
  a1[5].n128_u32[0] = 0;
  v7 = *(_QWORD *)(a3 + 48);
  a1[3].n128_u64[1] = *(_QWORD *)(a3 + 40);
  a1[4].n128_u64[0] = v7;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v8 = a1[4].n128_u64[1];
  a1[4].n128_u64[1] = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = v8;
  v9 = a1[5].n128_u64[1];
  a1[5].n128_u64[1] = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 72) = v9;
  ++*(_DWORD *)(a3 + 64);
  ++a1[5].n128_u32[0];
  a1[8].n128_u64[0] = 0;
  a1[6].n128_u64[1] = 0;
  a1[7].n128_u64[0] = 0;
  a1[6].n128_u64[0] = 0;
  a1[7].n128_u32[2] = 0;
  v10 = *(_QWORD *)(a3 + 88);
  a1[6].n128_u64[0] = *(_QWORD *)(a3 + 80);
  a1[6].n128_u64[1] = v10;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v11 = a1[7].n128_u64[0];
  a1[7].n128_u64[0] = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 96) = v11;
  v12 = a1[8].n128_u64[0];
  v13 = *(_QWORD *)(a3 + 120);
  a1[8].n128_u64[0] = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 112) = v12;
  ++*(_DWORD *)(a3 + 104);
  ++a1[7].n128_u32[2];
  a1[8].n128_u64[1] = v13;
  return result;
}

uint64_t re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + (v4 << 6);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 56) = 0;
  result = re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::operator=<48ul>(v5, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 6;
        v11 = (uint64_t)v7;
        do
        {
          *(_QWORD *)(v11 + 48) = *(_QWORD *)(v8 + 48);
          *(_QWORD *)(v11 + 56) = 0;
          re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::operator=<48ul>(v11, v8);
          re::FunctionBase<48ul,REEventHandlerResult ()(void *,void const*)>::destroyCallable(v8);
          v8 += 64;
          v11 += 64;
          v10 -= 64;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1);
    v4 = *(_QWORD *)(a2 + 32);
    if (v4)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      v6 = a1;
      if (v5 >= 0x19)
      {
        v7 = v5;
        v8 = *(_QWORD *)(a1 + 24);
        if (v8)
          v6 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, v7, 0);
        else
          v6 = 0;
      }
      *(_QWORD *)(a1 + 32) = v6;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 24))(*(_QWORD *)(a2 + 32));
    }
  }
  return a1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED27638;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED27638;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27638;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27638;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED276A0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED276A0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED276A0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED276A0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneDidAddEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED276F8;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED27750;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

__objc2_class_ro *re::EventBus::getTypeId<RESceneWillRemoveEvent>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;
  const char *v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::EventBus::getTypeId<RESceneWillRemoveEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"22RESceneWillRemoveEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[305];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED276F8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED276F8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED276F8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED276F8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED27750;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED27750;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27750;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27750;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Scene,RESceneWillRemoveEvent>(re::ecs2::Scene *,re::Function<REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  v12 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(v12 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 16);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_34, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<re::PeerAttributionContext *&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_QWORD *)a1;
      v6 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *(_OWORD *)&v25[8];
      *(_QWORD *)&v25[16] = v7;
      *(_OWORD *)(a1 + 8) = v8;
      v10 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v9 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v10;
      v11 = v9;
      if (!v9)
      {
        if (!v5)
          return;
        goto LABEL_26;
      }
      v12 = DWORD1(v10);
      v13 = v8;
      v14 = (_QWORD *)(v7 + 16);
      v15 = v9;
      do
      {
        if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
        {
          v16 = *(v14 - 2);
          v17 = *(unsigned int *)(a1 + 24);
          v18 = v16 % v17;
          v19 = *(unsigned int *)(a1 + 36);
          if ((_DWORD)v19 == 0x7FFFFFFF)
          {
            v19 = *(unsigned int *)(a1 + 32);
            v20 = v19;
            if ((_DWORD)v19 == (_DWORD)v17)
            {
              re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v12));
              v18 = v16 % *(unsigned int *)(a1 + 24);
              v20 = *(_DWORD *)(a1 + 32);
              v13 = *(_QWORD *)(a1 + 8);
            }
            *(_DWORD *)(a1 + 32) = v20 + 1;
            v21 = *(_QWORD *)(a1 + 16);
            v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
          }
          else
          {
            v21 = *(_QWORD *)(a1 + 16);
            v22 = *(_DWORD *)(v21 + 32 * v19 + 8);
            *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v21 + 32 * v19 + 8) = v22 | 0x80000000;
          *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
          *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19) = v16;
          *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 16) = *v14;
          *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v19 + 24) = v14[1];
          v13 = *(_QWORD *)(a1 + 8);
          *(_DWORD *)(v13 + 4 * v18) = v19;
          v12 = *(_DWORD *)(a1 + 28) + 1;
          *(_DWORD *)(a1 + 28) = v12;
        }
        v14 += 4;
        --v15;
      }
      while (v15);
      if (v5)
      {
        v23 = (_DWORD *)(v7 + 8);
        do
        {
          if ((*v23 & 0x80000000) != 0)
            *v23 &= ~0x80000000;
          v23 += 8;
          --v11;
        }
        while (v11);
LABEL_26:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v6);
      }
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

void re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_34, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _WORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 16 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 16 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 16 * v8 + 8) = v11 | 0x80000000;
  v12 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * v8 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v8) = a3;
  *(_WORD *)(*(_QWORD *)(a1 + 16) + 16 * v8 + 12) = *a5;
  *(_DWORD *)(v12 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 12, *(_QWORD *)&v13[16] + v10 + 12);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 16;
        }
        while (v11 < v9);
      }
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 16 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_34, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::DynamicArray<unsigned short>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<unsigned short>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<unsigned short>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<unsigned short>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if ((a2 & 0x8000000000000000) != 0)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 2, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 2 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 2 * a2, 2);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 2 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<unsigned short>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED277A8;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED27800;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

__objc2_class_ro *re::EventBus::getTypeId<RESceneEntityDidActivateEvent>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;
  const char *v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::EventBus::getTypeId<RESceneEntityDidActivateEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"29RESceneEntityDidActivateEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[307];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED277A8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED277A8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED277A8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED277A8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED27800;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED27800;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27800;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27800;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED27858;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED278B0;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

__objc2_class_ro *re::EventBus::getTypeId<REComponentDidActivateEvent>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;
  const char *v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::EventBus::getTypeId<REComponentDidActivateEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"27REComponentDidActivateEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[309];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED27858;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED27858;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27858;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27858;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED278B0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED278B0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED278B0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED278B0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidActivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

__objc2_class_ro *re::EventBus::getTypeId<REOwnershipChangedEvent>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;
  const char *v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::EventBus::getTypeId<REOwnershipChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"23REOwnershipChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[311];
}

uint64_t *re::allocInfo_FrameAnalysisService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_31);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_31))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FB130, 0);
    *(uint64_t *)((char *)&qword_2540FB140 + 6) = 0;
    qword_2540FB140 = 0;
    qword_2540FB150 = 0;
    qword_2540FB158 = 0xFFFFFFFFLL;
    qword_2540FB130 = (uint64_t)&off_24ED7DAA8;
    qword_2540FB160 = (uint64_t)"FrameAnalysisService";
    dword_2540FB168 = 0;
    unk_2540FB170 = 0u;
    unk_2540FB180 = 0u;
    unk_2540FB190 = 0u;
    qword_2540FB1A0 = 0;
    __cxa_guard_release(&_MergedGlobals_31);
  }
  return &qword_2540FB130;
}

void re::initInfo_FrameAnalysisService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x8825A5C357582E58;
  v5[1] = "FrameAnalysisService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::FrameAnalysisService>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::FrameAnalysisService>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_FrameAnalysisService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_FrameAnalysisService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrameAnalysisService", (uint64_t (*)(re::internal *))re::allocInfo_FrameAnalysisService, (re::IntrospectionBase *(*)(void))re::initInfo_FrameAnalysisService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::FrameAnalysisService>, this);
}

id re::internal::defaultRetain<re::FrameAnalysisService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::FrameAnalysisService>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void `anonymous namespace'::SharedEngineContext::instance(_anonymous_namespace_::SharedEngineContext *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      qword_255827170 = 0;
      dword_255827178 = 0;
    }
  }
}

void `anonymous namespace'::SharedEngineContext::retainOrInit(_anonymous_namespace_::SharedEngineContext *this, unsigned int a2, int a3)
{
  int v5;
  re *v6;
  re::CollisionFactory *v7;
  re::RenderGraphNodeRegistry *v8;
  re::RenderGraphEmitterRegistry *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  unsigned int v13;
  const char *v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL4 v20;
  const char *v21;
  const char *v22;
  int v23;
  unint64_t v24;
  const char *v25;
  _anonymous_namespace_ *v26;
  unint64_t v27;
  re *v28;
  uint64_t *v29;
  _BYTE v30[4];
  unsigned int v31;

  v5 = (int)this;
  os_unfair_lock_lock((os_unfair_lock_t)&dword_255827178);
  if ((unint64_t)++qword_255827170 <= 1)
  {
    dword_25582717C = v5;
    unk_255827180 = a2;
    dword_255827184 = a3;
    if (re::ecs2::dispatchOnceInitECSComponents(void)::onceToken != -1)
      dispatch_once(&re::ecs2::dispatchOnceInitECSComponents(void)::onceToken, &__block_literal_global_13);
    re::initCollision(v6);
    re::RenderGraphNodeRegistry::init(v8);
    re::RenderGraphEmitterRegistry::init(v9);
    v10 = re::RenderGraphNodeRegistry::m_instance;
    re::RenderGraphNodeRegistry::registerNode(re::RenderGraphNodeRegistry::m_instance, (uint64_t)&_MergedGlobals_7);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7AC8);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7AD0);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7AD8);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7AE0);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7AE8);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7AF0);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7AF8);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B00);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B08);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B10);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B18);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B20);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B28);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B30);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B38);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B40);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B48);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B50);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B58);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B60);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B68);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B70);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>(void)::item);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>(void)::item);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&re::renderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>(void)::item);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B78);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B80);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B88);
    re::RenderGraphNodeRegistry::registerNode(v10, (uint64_t)&off_2540F7B90);
    v11 = re::RenderGraphEmitterRegistry::m_instance;
    re::RenderGraphEmitterRegistry::registerEmitter(re::RenderGraphEmitterRegistry::m_instance, (uint64_t)&off_2540F7B98);
    re::RenderGraphEmitterRegistry::registerEmitter(v11, (uint64_t)&off_2540F7BA0);
    re::RenderGraphEmitterRegistry::registerEmitter(v11, (uint64_t)&off_2540F7BA8);
    if ((v5 & 8) == 0)
    {
      v12 = (re *)objc_msgSend(MEMORY[0x24BDD17F0], "isMainThread");
      if ((_DWORD)v12)
        re::initInputManagement(v12);
      else
        dispatch_async(MEMORY[0x24BDAC9B8], &__block_literal_global);
    }
    v13 = std::thread::hardware_concurrency();
    if ((v5 & 2) != 0)
    {
      LODWORD(v15) = 2;
    }
    else if ((v5 & 4) != 0)
    {
      LODWORD(v15) = 3;
    }
    else if ((v5 & 0x20) != 0)
    {
      LODWORD(v15) = 1;
    }
    else
    {
      LODWORD(v15) = 2;
    }
    if (a2 <= 1)
      v16 = 1;
    else
      v16 = a2;
    if ((v5 & 1) != 0)
      v17 = 16;
    else
      v17 = a3;
    if ((v5 & 1) != 0)
      v16 = 1;
    if (v13 >= v16)
      LODWORD(v18) = v16;
    else
      LODWORD(v18) = v13;
    if ((int)v18 + 1 > v17)
      v19 = v18 + 1;
    else
      v19 = v17;
    v20 = (v5 & 0x10) == 0;
    re::Defaults::intValue((re::Defaults *)"threading.threads", v14, (uint64_t)v30);
    if (v30[0])
      v18 = v31;
    else
      v18 = v18;
    re::Defaults::intValue((re::Defaults *)"threading.fibers", v21, (uint64_t)v30);
    if (v30[0])
      v19 = v31;
    re::Defaults::intValue((re::Defaults *)"threading.fiberStackSize", v22, (uint64_t)v30);
    v23 = v30[0];
    v24 = v31;
    re::Defaults::intValue((re::Defaults *)"threading.jobSystem", v25, (uint64_t)v30);
    if (v30[0])
      v15 = v31;
    else
      v15 = v15;
    if (v23)
      v27 = v24;
    else
      v27 = 0x80000;
    v29 = re::globalAllocators(v28);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&dword_255827178);
}

void RESharedEngineContextRelease(_anonymous_namespace_::SharedEngineContext *a1)
{
  re *v1;
  re *v2;
  re *v3;
  re *v4;

  os_unfair_lock_lock((os_unfair_lock_t)&dword_255827178);
  if (!--qword_255827170)
  {
    re::sharedJobServiceDeinit(v1);
    if ((dword_25582717C & 8) == 0)
    {
      v2 = (re *)objc_msgSend(MEMORY[0x24BDD17F0], "isMainThread");
      if ((_DWORD)v2)
        re::deinitInputManagement(v2);
      else
        dispatch_async(MEMORY[0x24BDAC9B8], &__block_literal_global_50);
    }
    re::internal::destroyPersistent<re::RenderGraphNodeRegistry>((re *)"deinit", 62, (re::RenderGraphNodeRegistry *)re::RenderGraphNodeRegistry::m_instance);
    re::RenderGraphNodeRegistry::m_instance = 0;
    v3 = re::internal::destroyPersistent<re::RenderGraphEmitterRegistry>((re *)"deinit", 42, (re::RenderGraphEmitterRegistry *)re::RenderGraphEmitterRegistry::m_instance);
    re::RenderGraphEmitterRegistry::m_instance = 0;
    v4 = re::PhysicsFactory::deinit(v3);
    re::deinitCollision(v4);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&dword_255827178);
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830558);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830558))
  {
    _MergedGlobals_231 = re::introspect_RenderGraphCameraSetupNode(0);
    __cxa_guard_release(&qword_255830558);
  }
  return _MergedGlobals_231;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::typeName()
{
  return "CameraSetup";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED27970;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED27970;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27970;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphCameraSetupNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphCameraSetupNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 280, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED86988;
  *((_WORD *)v6 + 128) = 0;
  *((_QWORD *)v6 + 33) = 0;
  *((_QWORD *)v6 + 34) = -1;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830568);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830568))
  {
    qword_255830560 = re::introspect_RenderGraphMultiViewCameraSetupNode(0);
    __cxa_guard_release(&qword_255830568);
  }
  return qword_255830560;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::typeName()
{
  return "MultiViewCameraSetup";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED27A38;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED27A38;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27A38;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 280, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *((_WORD *)v7 + 128) = 0;
  *((_QWORD *)v7 + 33) = 0;
  *((_QWORD *)v7 + 34) = -1;
  *(_QWORD *)v7 = &off_24ED86A18;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewCameraSetupNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830578);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830578))
  {
    qword_255830570 = re::introspect_RenderGraphComputeNode(0);
    __cxa_guard_release(&qword_255830578);
  }
  return qword_255830570;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::typeName()
{
  return "Compute";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED27B00;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED27B00;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27B00;
}

re::RenderGraphComputeNodeBase *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphComputeNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphComputeNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphComputeNodeBase *re::RenderGraph::addNode<re::RenderGraphComputeNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphComputeNodeBase *v5;
  re::RenderGraphComputeNodeBase *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphComputeNodeBase *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphComputeNodeBase *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 480, 16);
  v6 = re::RenderGraphComputeNodeBase::RenderGraphComputeNodeBase(v5, a2);
  *(_QWORD *)v6 = &off_24ED80A30;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830588);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830588))
  {
    qword_255830580 = re::introspect_RenderGraphDebugNode(0);
    __cxa_guard_release(&qword_255830588);
  }
  return qword_255830580;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::typeName()
{
  return "Debug";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED27BC8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED27BC8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27BC8;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphDebugNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphDebugNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 264, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *((_DWORD *)v6 + 64) = 1;
  *(_QWORD *)v6 = &off_24ED87900;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830598);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830598))
  {
    qword_255830590 = re::introspect_RenderGraphDebugMaterialsNode(0);
    __cxa_guard_release(&qword_255830598);
  }
  return qword_255830590;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::typeName()
{
  return "DebugMaterials";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED27C90;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED27C90;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27C90;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphDebugMaterialsNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDebugMaterialsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphDebugMaterialsNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 264, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *((_DWORD *)v6 + 64) = 1;
  *(_QWORD *)v6 = &off_24ED29458;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

void re::RenderGraphDebugMaterialsNode::~RenderGraphDebugMaterialsNode(re::RenderGraphDebugMaterialsNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphMeshNodeBase::getPerFrameValidationCode(re::RenderGraphMeshNodeBase *this)
{
  return 0x118068043200229;
}

uint64_t re::RenderGraphNodeBase::getGraphBuildValidationCode(re::RenderGraphNodeBase *this)
{
  return 0;
}

uint64_t re::RenderGraphNode::bufferReads(re::RenderGraphNode *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t re::RenderGraphNode::bufferWrites(re::RenderGraphNode *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t re::RenderGraphNode::targetReads(re::RenderGraphNode *this)
{
  return *((_QWORD *)this + 26);
}

uint64_t re::RenderGraphNode::targetWrites(re::RenderGraphNode *this)
{
  return *((_QWORD *)this + 31);
}

uint64_t re::RenderGraphNode::typeInfo(re::RenderGraphNode *this)
{
  return re::introspect_RenderGraphNode(0);
}

void re::RenderGraphNode::~RenderGraphNode(re::RenderGraphNode *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24ED82230;
  v3 = (_QWORD *)((char *)this + 216);
  v2 = *((_QWORD *)this + 27);
  if (v2)
  {
    if (*((_QWORD *)this + 31))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 31) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 60);
  }
  v4 = *((_QWORD *)this + 22);
  if (v4)
  {
    if (*((_QWORD *)this + 26))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
    *((_QWORD *)this + 22) = 0;
    ++*((_DWORD *)this + 50);
  }
  v5 = *((_QWORD *)this + 17);
  if (v5)
  {
    if (*((_QWORD *)this + 21))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    *((_QWORD *)this + 17) = 0;
    ++*((_DWORD *)this + 40);
  }
  v6 = *((_QWORD *)this + 12);
  if (v6)
  {
    if (*((_QWORD *)this + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 12) = 0;
    ++*((_DWORD *)this + 30);
  }
  *(_QWORD *)this = off_24ED293C0;

  re::StringID::destroyString((re::RenderGraphNode *)((char *)this + 8));
}

{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphNodeBase::getPerFrameValidationCode(re::RenderGraphNodeBase *this)
{
  return 0;
}

uint64_t re::RenderGraphNodeBase::bufferReads(re::RenderGraphNodeBase *this)
{
  return 0;
}

uint64_t re::RenderGraphNodeBase::bufferWrites(re::RenderGraphNodeBase *this)
{
  return 0;
}

uint64_t re::RenderGraphNodeBase::targetReads(re::RenderGraphNodeBase *this)
{
  return 0;
}

uint64_t re::RenderGraphNodeBase::targetWrites(re::RenderGraphNodeBase *this)
{
  return 0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558305A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558305A8))
  {
    qword_2558305A0 = re::introspect_RenderGraphGenerateMipmapsNode(0);
    __cxa_guard_release(&qword_2558305A8);
  }
  return qword_2558305A0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::typeName()
{
  return "GenerateMipmaps";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED27D58;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED27D58;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27D58;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphGenerateMipmapsNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphGenerateMipmapsNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphGenerateMipmapsNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 256, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED87228;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558305B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558305B8))
  {
    qword_2558305B0 = re::introspect_RenderGraphMaterialReplaceNode(0);
    __cxa_guard_release(&qword_2558305B8);
  }
  return qword_2558305B0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::typeName()
{
  return "MaterialReplace";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED27E20;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED27E20;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27E20;
}

re::RenderGraphMaterialReplaceNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphMaterialReplaceNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMaterialReplaceNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphMaterialReplaceNode *re::RenderGraph::addNode<re::RenderGraphMaterialReplaceNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphMaterialReplaceNode *v5;
  uint64_t v6;
  uint64_t v7;
  re::RenderGraphMaterialReplaceNode *v9;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphMaterialReplaceNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2]
                                                                                                  + 32))(v4[2], 368, 8);
  v9 = re::RenderGraphMaterialReplaceNode::RenderGraphMaterialReplaceNode(v5, a2);
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v9);
  v6 = *((_QWORD *)a1 + 12);
  v7 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v6;
  *((_QWORD *)v5 + 6) = v7;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558305C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558305C8))
  {
    qword_2558305C0 = re::introspect_RenderGraphMeshNode(0);
    __cxa_guard_release(&qword_2558305C8);
  }
  return qword_2558305C0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::typeName()
{
  return "Mesh";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED27EE8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED27EE8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27EE8;
}

re::RenderGraphMeshNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphMeshNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphMeshNode *re::RenderGraph::addNode<re::RenderGraphMeshNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphMeshNode *v5;
  uint64_t v6;
  uint64_t v7;
  re::RenderGraphMeshNode *v9;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphMeshNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 344, 8);
  v9 = re::RenderGraphMeshNode::RenderGraphMeshNode(v5, a2);
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v9);
  v6 = *((_QWORD *)a1 + 12);
  v7 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v6;
  *((_QWORD *)v5 + 6) = v7;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558305D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558305D8))
  {
    qword_2558305D0 = re::introspect_RenderGraphMultiPassMeshNode(0);
    __cxa_guard_release(&qword_2558305D8);
  }
  return qword_2558305D0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::typeName()
{
  return "MultiPassMesh";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED27FB0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED27FB0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED27FB0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 440, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *((_DWORD *)v7 + 64) = 1;
  *(_QWORD *)v7 = &off_24ED87750;
  *(_OWORD *)((char *)v7 + 264) = 0u;
  *(_OWORD *)((char *)v7 + 280) = 0u;
  *((_DWORD *)v7 + 74) = 0;
  *(_QWORD *)((char *)v7 + 300) = 0x7FFFFFFFLL;
  *((_QWORD *)v7 + 40) = 0;
  *((_QWORD *)v7 + 41) = 0;
  *((_QWORD *)v7 + 39) = 0;
  *((_DWORD *)v7 + 84) = 0;
  *((_QWORD *)v7 + 53) = 0;
  *(_OWORD *)((char *)v7 + 344) = 0u;
  *(_OWORD *)((char *)v7 + 360) = 0u;
  *((_DWORD *)v7 + 94) = 0;
  *((_OWORD *)v7 + 24) = 0u;
  *((_OWORD *)v7 + 25) = 0u;
  *((_DWORD *)v7 + 104) = 0;
  *((_BYTE *)v7 + 432) = 2;
  *((_BYTE *)v7 + 437) = 0;
  *(_DWORD *)((char *)v7 + 433) = 0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiPassMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558305E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558305E8))
  {
    qword_2558305E0 = re::introspect_RenderGraphMultiViewMeshNode(0);
    __cxa_guard_release(&qword_2558305E8);
  }
  return qword_2558305E0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::typeName()
{
  return "MultiViewMesh";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28078;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28078;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28078;
}

re::RenderGraphMultiViewMeshNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphMultiViewMeshNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphMultiViewMeshNode *v10;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphMultiViewMeshNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 344, 8);
  v10 = re::RenderGraphMultiViewMeshNode::RenderGraphMultiViewMeshNode(v6, v4);
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v10);
  v7 = a2[12];
  v8 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v7;
  *((_QWORD *)v6 + 6) = v8;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMultiViewMeshNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558305F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558305F8))
  {
    qword_2558305F0 = re::introspect_RenderGraphMRCNode(0);
    __cxa_guard_release(&qword_2558305F8);
  }
  return qword_2558305F0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::typeName()
{
  return "MidRenderCompute";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28140;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28140;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28140;
}

re::RenderGraphMRCNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphMRCNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphMRCNode *v10;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphMRCNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 448, 16);
  v10 = re::RenderGraphMRCNode::RenderGraphMRCNode(v6, v4);
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v10);
  v7 = a2[12];
  v8 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v7;
  *((_QWORD *)v6 + 6) = v8;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMRCNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830608);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830608))
  {
    qword_255830600 = re::introspect_RenderGraphSynchronizeBufferNode(0);
    __cxa_guard_release(&qword_255830608);
  }
  return qword_255830600;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::typeName()
{
  return "SynchronizeBuffer";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28208;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28208;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28208;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 256, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED87468;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830618);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830618))
  {
    qword_255830610 = re::introspect_RenderGraphSynchronizeTargetNode(0);
    __cxa_guard_release(&qword_255830618);
  }
  return qword_255830610;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::typeName()
{
  return "SynchronizeTarget";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED282D0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED282D0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED282D0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphSynchronizeTargetNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphSynchronizeTargetNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphSynchronizeTargetNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 272, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED873D8;
  *((_QWORD *)v6 + 32) = 0;
  *((_QWORD *)v6 + 33) = 0;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830628);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830628))
  {
    qword_255830620 = re::introspect_RenderGraphFillBufferNode(0);
    __cxa_guard_release(&qword_255830628);
  }
  return qword_255830620;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::typeName()
{
  return "FillBuffer";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28398;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28398;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28398;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 264, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED874F8;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFillBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830638);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830638))
  {
    qword_255830630 = re::introspect_RenderGraphTargetCopyNode(0);
    __cxa_guard_release(&qword_255830638);
  }
  return qword_255830630;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::typeName()
{
  return "TargetCopy";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28460;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28460;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28460;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTargetCopyNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphTargetCopyNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 368, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED872B8;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_QWORD *)v6 + 36) = 0;
  *((_QWORD *)v6 + 37) = -1;
  *((_QWORD *)v6 + 38) = -1;
  *((_QWORD *)v6 + 39) = -1;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *(_OWORD *)((char *)v6 + 345) = 0u;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830648);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830648))
  {
    qword_255830640 = re::introspect_RenderGraphCopyEntityAttributeBufferNode(0);
    __cxa_guard_release(&qword_255830648);
  }
  return qword_255830640;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::typeName()
{
  return "CopyEntityAttributeBuffer";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28528;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28528;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28528;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphCopyEntityAttributeBufferNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCopyEntityAttributeBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphCopyEntityAttributeBufferNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 280, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED87348;
  *((_QWORD *)v6 + 32) = 0;
  *((_QWORD *)v6 + 33) = 0;
  *((_QWORD *)v6 + 34) = &str_110;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830658);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830658))
  {
    qword_255830650 = re::introspect_RenderGraphTextNode(0);
    __cxa_guard_release(&qword_255830658);
  }
  return qword_255830650;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::typeName()
{
  return "Text";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED285F0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED285F0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED285F0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphTextNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphTextNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphTextNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 264, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *((_DWORD *)v6 + 64) = 1;
  *(_QWORD *)v6 = &off_24ED87870;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

__objc2_class_ro *re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::introspectionInfo()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::RenderGraphFullscreenNode>(void)::info = re::introspect_RenderGraphFullscreenNode(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[314];
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::typeName()
{
  return "Fullscreen";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED286B8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED286B8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED286B8;
}

re::RenderGraphFullscreenNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphFullscreenNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphFullscreenNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphFullscreenNode *re::RenderGraph::addNode<re::RenderGraphFullscreenNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphFullscreenNode *v5;
  uint64_t v6;
  uint64_t v7;
  re::RenderGraphFullscreenNode *v9;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphFullscreenNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 456, 8);
  v9 = re::RenderGraphFullscreenNode::RenderGraphFullscreenNode(v5, a2);
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v9);
  v6 = *((_QWORD *)a1 + 12);
  v7 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v6;
  *((_QWORD *)v5 + 6) = v7;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830668);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830668))
  {
    qword_255830660 = re::introspect_RenderGraphResolveNode(0);
    __cxa_guard_release(&qword_255830668);
  }
  return qword_255830660;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::typeName()
{
  return "Resolve";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28780;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28780;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28780;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphResolveNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphResolveNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphResolveNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 256, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED86D98;
  *((_BYTE *)v6 + 66) = 1;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830678);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830678))
  {
    qword_255830670 = re::introspect_RenderGraphProfilerOverlayNode(0);
    __cxa_guard_release(&qword_255830678);
  }
  return qword_255830670;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::typeName()
{
  return "ProfilerOverlay";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28848;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28848;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28848;
}

re::RenderGraphProfilerOverlayNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphProfilerOverlayNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphProfilerOverlayNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphProfilerOverlayNode *re::RenderGraph::addNode<re::RenderGraphProfilerOverlayNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphProfilerOverlayNode *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphProfilerOverlayNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2]
                                                                                                  + 32))(v4[2], 416, 16);
  re::RenderGraphProfilerOverlayNode::RenderGraphProfilerOverlayNode(v5, a2);
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830688);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830688))
  {
    qword_255830680 = re::introspect_RenderGraphCommitCommandBufferNode(0);
    __cxa_guard_release(&qword_255830688);
  }
  return qword_255830680;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::typeName()
{
  return "CommitCommandBuffer";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28910;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28910;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28910;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 256, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED85C38;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphCommitCommandBufferNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830698);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830698))
  {
    qword_255830690 = re::introspect_RenderGraphVFXNode(0);
    __cxa_guard_release(&qword_255830698);
  }
  return qword_255830690;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::typeName()
{
  return "VFX";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED289D8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED289D8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED289D8;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphVFXNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVFXNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphVFXNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 264, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED83038;
  *((_BYTE *)v6 + 256) = 0;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558306A8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558306A8))
  {
    qword_2558306A0 = re::introspect_RenderGraphDummyNigiriNode(0);
    __cxa_guard_release(&qword_2558306A8);
  }
  return qword_2558306A0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::typeName()
{
  return "Nigiri";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28AA0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28AA0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28AA0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 256, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED29270;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphDummyNigiriNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraphNode::RenderGraphNode(re::RenderGraphNode *this, const char *a2)
{
  re::StringID *v4;

  *(_QWORD *)this = off_24ED293C0;
  *((_QWORD *)this + 1) = 0;
  v4 = (re::RenderGraphNode *)((char *)this + 8);
  *((_QWORD *)this + 2) = &str_110;
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 16) = 1;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)this = &off_24ED82230;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  return this;
}

void re::RenderGraphDummyNigiriNode::~RenderGraphDummyNigiriNode(re::RenderGraphDummyNigiriNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

__objc2_class_ro *re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::introspectionInfo()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::RenderGraphVRRUnwarpNode>(void)::info = re::introspect_RenderGraphVRRUnwarpNode(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[323];
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::typeName()
{
  return "VRRUnwarp";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED291F0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED291F0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED291F0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphVRRUnwarpNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphVRRUnwarpNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphVRRUnwarpNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 336, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED82F90;
  *((_QWORD *)v6 + 32) = 0;
  *((_QWORD *)v6 + 33) = -1;
  *((_QWORD *)v6 + 34) = 0;
  *((_QWORD *)v6 + 35) = -1;
  *((_QWORD *)v6 + 36) = 0;
  *((_QWORD *)v6 + 37) = -1;
  *((_BYTE *)v6 + 67) = 0;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

__objc2_class_ro *re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::introspectionInfo()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::RenderGraphMPSImageAreaMaxNode>(void)::info = re::introspect_RenderGraphMPSImageAreaMaxNode(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[317];
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::typeName()
{
  return "RenderGraphMPSImageAreaMax";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED29060;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED29060;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED29060;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphMPSImageAreaMaxNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageAreaMaxNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphMPSImageAreaMaxNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 272, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED85CE0;
  *((_BYTE *)v6 + 260) = 0;
  *((_QWORD *)v6 + 33) = 0;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

__objc2_class_ro *re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::introspectionInfo()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::RenderGraphMPSImageGaussianBlurNode>(void)::info = re::introspect_RenderGraphMPSImageGaussianBlurNode(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[320];
}

uint64_t re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::typeName()
{
  return "RenderGraphMPSImageGaussianBlur";
}

void re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED29128;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED29128;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED29128;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(uint64_t a1, re *a2, const char **a3)
{
  return re::RenderGraph::addNode<re::RenderGraphMPSImageGaussianBlurNode>(a2, *a3);
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::RenderGraphMPSImageGaussianBlurNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

re::RenderGraphNode *re::RenderGraph::addNode<re::RenderGraphMPSImageGaussianBlurNode>(re *a1, const char *a2)
{
  uint64_t *v4;
  re::RenderGraphNode *v5;
  re::RenderGraphNode *v6;
  uint64_t v7;
  uint64_t v8;
  re::RenderGraphNode *v10;

  v4 = re::globalAllocators(a1);
  v5 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 280, 8);
  v6 = re::RenderGraphNode::RenderGraphNode(v5, a2);
  *(_QWORD *)v6 = &off_24ED80288;
  *((_WORD *)v6 + 130) = 0;
  *((_QWORD *)v6 + 33) = 0;
  *((_QWORD *)v6 + 34) = 0;
  v10 = v6;
  re::DynamicArray<re::TransitionCondition *>::add(a1, &v10);
  v7 = *((_QWORD *)a1 + 12);
  v8 = *((_QWORD *)a1 + 13);
  *((_QWORD *)v5 + 3) = *((_QWORD *)a1 + 10);
  *((_QWORD *)v5 + 4) = v7;
  *((_QWORD *)v5 + 6) = v8;
  return v5;
}

uint64_t re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558306B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558306B8))
  {
    qword_2558306B0 = re::introspect_StencilPtInjectionNode(0);
    __cxa_guard_release(&qword_2558306B8);
  }
  return qword_2558306B0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::typeName()
{
  return "StencilPtInjection";
}

void re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28B68;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28B68;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28B68;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 312, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED867A8;
  *((_BYTE *)v7 + 256) = 1;
  *((_QWORD *)v7 + 37) = 0;
  *((_QWORD *)v7 + 34) = 0;
  *((_QWORD *)v7 + 35) = 0;
  *((_QWORD *)v7 + 33) = 0;
  *((_DWORD *)v7 + 72) = 0;
  *((_WORD *)v7 + 152) = 0;
  *((_BYTE *)v7 + 306) = 1;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::StencilPtInjectionNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558306C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558306C8))
  {
    qword_2558306C0 = re::introspect_DummyEnvironmentNode(0);
    __cxa_guard_release(&qword_2558306C8);
  }
  return qword_2558306C0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::typeName()
{
  return "ImportEnvironment";
}

void re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28C30;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28C30;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28C30;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 256, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED29318;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DummyEnvironmentNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

void re::DummyEnvironmentNode::~DummyEnvironmentNode(re::DummyEnvironmentNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558306D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558306D8))
  {
    qword_2558306D0 = re::introspect_BtStencilPrepassNode(0);
    __cxa_guard_release(&qword_2558306D8);
  }
  return qword_2558306D0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::typeName()
{
  return "BtStencilPrepass";
}

void re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28CF8;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28CF8;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28CF8;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 264, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *(_QWORD *)v7 = &off_24ED28F50;
  *((_BYTE *)v7 + 256) = 0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::BtStencilPrepassNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

void re::BtStencilPrepassNode::~BtStencilPrepassNode(re::BtStencilPrepassNode *this)
{
  re::RenderGraphNode::~RenderGraphNode(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558306E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558306E8))
  {
    qword_2558306E0 = re::introspect_DepthPatchNode(0);
    __cxa_guard_release(&qword_2558306E8);
  }
  return qword_2558306E0;
}

uint64_t re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::typeName()
{
  return "DepthPatch";
}

void re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(_QWORD *a1@<X8>)
{
  *a1 = &off_24ED28DC0;
  a1[3] = a1;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED28DC0;
  return result;
}

void std::__function::__func<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED28DC0;
}

re::RenderGraphNode *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::operator()(re *a1, _QWORD *a2, const char **a3)
{
  const char *v4;
  uint64_t *v5;
  re::RenderGraphNode *v6;
  re::RenderGraphNode *v7;
  uint64_t v8;
  uint64_t v9;
  re::RenderGraphNode *v11;

  v4 = *a3;
  v5 = re::globalAllocators(a1);
  v6 = (re::RenderGraphNode *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 288, 8);
  v7 = re::RenderGraphNode::RenderGraphNode(v6, v4);
  *((_DWORD *)v7 + 64) = 1;
  *(_QWORD *)v7 = &off_24ED86BD8;
  *((_BYTE *)v7 + 260) = 0;
  *((_QWORD *)v7 + 34) = 0;
  *((_QWORD *)v7 + 35) = 0;
  *((_QWORD *)v7 + 33) = 0;
  v11 = v7;
  re::DynamicArray<re::TransitionCondition *>::add(a2, &v11);
  v8 = a2[12];
  v9 = a2[13];
  *((_QWORD *)v6 + 3) = a2[10];
  *((_QWORD *)v6 + 4) = v8;
  *((_QWORD *)v6 + 6) = v9;
  return v6;
}

uint64_t std::__function::__func<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1},std::allocator<re::RenderGraphNodeRegistryItem<re::DepthPatchNode>::makeCreateFunction(void)::{lambda(re::RenderGraph &,char const*)#1}>,re::RenderGraphNode & ()(re::RenderGraph &,char const*)>::target_type()
{
}

uint64_t re::RenderGraphEmitterRegistryItem<re::RenderGraphSimpleForwardEmitter>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2558306F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2558306F8))
  {
    qword_2558306F0 = re::introspect_RenderGraphSimpleForwardEmitter(0);
    __cxa_guard_release(&qword_2558306F8);
  }
  return qword_2558306F0;
}

uint64_t re::RenderGraphEmitterRegistryItem<re::RenderGraphSimpleForwardEmitter>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphEmitterRegistryItem<re::RenderGraphSimpleForwardEmitter>::typeName()
{
  return "SimpleForwardEmitter";
}

uint64_t re::RenderGraphEmitterRegistryItem<re::RenderGraphAREmitter>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830708);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830708))
  {
    qword_255830700 = re::introspect_RenderGraphAREmitter(0);
    __cxa_guard_release(&qword_255830708);
  }
  return qword_255830700;
}

uint64_t re::RenderGraphEmitterRegistryItem<re::RenderGraphAREmitter>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphEmitterRegistryItem<re::RenderGraphAREmitter>::typeName()
{
  return "AREmitter";
}

uint64_t re::RenderGraphEmitterRegistryItem<re::RenderGraphSelectionEmitter>::introspectionInfo()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_255830718);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_255830718))
  {
    qword_255830710 = re::introspect_RenderGraphSelectionEmitter(0);
    __cxa_guard_release(&qword_255830718);
  }
  return qword_255830710;
}

uint64_t re::RenderGraphEmitterRegistryItem<re::RenderGraphSelectionEmitter>::dataOffset()
{
  return 0;
}

const char *re::RenderGraphEmitterRegistryItem<re::RenderGraphSelectionEmitter>::typeName()
{
  return "SelectionEmitter";
}

uint64_t *re::appLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::appLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "App");
  }
  return &re::appLogObjects(void)::logObjects;
}

void REStartup(_anonymous_namespace_::SharedEngineContext *a1, uint64_t a2)
{
  int v2;
  re *v4;
  re::ecs2 *v5;
  re::ecs2::AnchorComponent *inited;
  _anonymous_namespace_::SharedEngineContext *v7;

  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) REStartup called too many times", "false", "REStartup", 25);
    _os_crash();
    __break(1u);
  }
  else
  {
    if (v2 <= 0)
    {
      std::thread::hardware_concurrency();
      v4 = (re *)std::thread::hardware_concurrency();
      re::initGlobalAllocators(v4);
      inited = re::ecs2::initECSCore(v5);
      v7 = (_anonymous_namespace_::SharedEngineContext *)re::ecs2::initECSComponents(inited);
    }
  }
}

void REStartupPrivate(re *a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;
  re::ecs2 *v5;
  re::ecs2::AnchorComponent *inited;
  _anonymous_namespace_::SharedEngineContext *v7;

  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) REStartup called too many times", "false", "REStartupPrivate", 54);
    _os_crash();
    __break(1u);
  }
  else
  {
    if (v2 <= 0)
    {
      v3 = a2;
      v4 = a1;
      re::initGlobalAllocators(a1);
      inited = re::ecs2::initECSCore(v5);
      v7 = (_anonymous_namespace_::SharedEngineContext *)re::ecs2::initECSComponents(inited);
    }
  }
}

void REShutdown(_anonymous_namespace_::SharedEngineContext *a1, uint64_t a2)
{
  int v2;
  re::ecs2 *v3;
  re::ecs2 *v4;
  re *v5;

  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) REShutdown called before REStartup", "false", "REShutdown", 75);
    _os_crash();
    __break(1u);
  }
  else
  {
    if (v2 == 1)
    {
      RESharedEngineContextRelease(a1);
      re::ecs2::deinitECSComponents(v3);
      re::ecs2::deinitECSCore(v4);
      re::deinitGlobalAllocators(v5);
    }
  }
}

_QWORD *re::FrameAnalysisProfilerProcessor::process(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD **)a4;
  v5 = *(_QWORD **)(a4 + 8);
  if (*(_QWORD **)a4 != v5)
  {
    v6 = result[2];
    v7 = result[3];
    v8 = result[4];
    do
    {
      v9 = (_QWORD *)*v4++;
      v6 += v9[266];
      v7 += v9[250];
      v8 += v9[242];
    }
    while (v4 != v5);
    result[2] = v6;
    result[3] = v7;
    result[4] = v8;
  }
  return result;
}

void re::FrameAnalysisManager::init(uint64_t a1, uint64_t a2)
{
  uint64_t (***v3)(re::DrawableQueueManager *__hidden, re::TextureAsset *);
  uint64_t (***v4)(re::DrawableQueueManager *__hidden, re::TextureAsset *);
  _anonymous_namespace_ *v5;
  re *v6;
  re::EventBus *v7;
  uint64_t v8;
  re *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  re *v14;
  re *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _BYTE v20[24];
  uint64_t v21;
  re *v22;
  _BYTE v23[24];
  uint64_t v24;
  re *v25;
  _BYTE v26[24];
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 1;
  *(_BYTE *)(a1 + 130) = 0;
  *(_WORD *)(a1 + 132) = 0;
  v3 = (uint64_t (***)(re::DrawableQueueManager *__hidden, re::TextureAsset *))re::ServiceLocator::serviceOrNull<re::DrawableQueueService>(a2);
  if (v3)
  {
    if (*v3 == off_24ED30E90)
      v4 = v3;
    else
      v4 = 0;
    *(_QWORD *)(a1 + 40) = v4;
  }
  v5 = (_anonymous_namespace_ *)re::ServiceLocator::serviceOrNull<re::VideoService>(*(_QWORD *)(a1 + 24));
  if (v5)
    *(_QWORD *)(a1 + 48) = v5;
  v6 = (re *)re::ServiceLocator::serviceOrNull<re::EventBus>(*(_QWORD *)(a1 + 24));
  if (v6)
  {
    v7 = v6;
    v8 = re::globalAllocators(v6)[2];
    v24 = v8;
    v9 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, 32, 0);
    *(_QWORD *)v9 = &off_24ED29638;
    *((_QWORD *)v9 + 1) = a1;
    *((_QWORD *)v9 + 2) = re::FrameAnalysisManager::processSceneDidAdd;
    *((_QWORD *)v9 + 3) = 0;
    v25 = v9;
    v27 = v8;
    v28 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v26, (uint64_t)v23);
    v10 = re::EventBus::subscribe<re::ecs2::Scene,RESceneDidAddEvent>(v7, 0, (uint64_t)v26, 0, 0);
    v12 = v11;
    if (v28)
    {
      (**(void (***)(_BYTE *))v28)(v28);
      if (v28 != v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    }
    v13 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 136);
    *v13 = v10;
    v13[1] = v12;
    v14 = v25;
    if (v25)
    {
      v14 = (re *)(**(uint64_t (***)(re *))v25)(v25);
      if (v25 != (re *)v23)
        v14 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      v25 = 0;
    }
    v21 = re::globalAllocators(v14)[2];
    v15 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 32, 0);
    *(_QWORD *)v15 = &off_24ED29690;
    *((_QWORD *)v15 + 1) = a1;
    *((_QWORD *)v15 + 2) = re::FrameAnalysisManager::processSceneWillRemove;
    *((_QWORD *)v15 + 3) = 0;
    v22 = v15;
    v16 = re::EventBus::subscribe<re::ecs2::Scene,RESceneWillRemoveEvent>(v7, (uint64_t)v20, 0, 0);
    v18 = v17;
    v19 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 136);
    *v19 = v16;
    v19[1] = v18;
    v6 = v22;
    if (v22)
    {
      v6 = (re *)(**(uint64_t (***)(re *))v22)(v22);
      if (v22 != (re *)v20)
        v6 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      v22 = 0;
    }
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::DrawableQueueService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::DrawableQueueService>(void)::info = re::introspect_DrawableQueueService(0);
  }
  v3 = re::introspect<re::DrawableQueueService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::VideoService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::VideoService>(void)::info = re::introspect_VideoService(0);
  }
  v3 = re::introspect<re::VideoService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t *re::BucketArray<RESubscriptionHandle,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<RESubscriptionHandle,8ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::FrameAnalysisManager::processSceneDidAdd(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  re::EventBus *v6;
  unsigned __int8 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  re *v13;
  uint64_t v14;
  re *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  re *v20;
  re *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  re *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  uint64_t v39;
  _BYTE *v40;
  _BYTE v41[24];
  uint64_t v42;
  re *v43;
  _BYTE v44[24];
  uint64_t v45;
  re *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v37 = a2;
  v36 = 0;
  v33 = 0u;
  v34 = 1uLL;
  v35 = 0uLL;
  v3 = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(a1 + 192, &v37, (uint64_t)&v33);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v33);
  v4 = (_anonymous_namespace_ *)v33;
  if ((_QWORD)v33 && (v34 & 1) == 0)
    v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v33 + 40))();
  v6 = *(re::EventBus **)(v37 + 288);
  if (v6)
  {
    v7 = atomic_load((unsigned __int8 *)_MergedGlobals_32);
    if ((v7 & 1) == 0)
    {
      v5 = (uint64_t *)__cxa_guard_acquire(_MergedGlobals_32);
      if ((_DWORD)v5)
      {
        qword_2540FB1B0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AccessibilityComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB1B8 = re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB1C0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB1C8 = re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB1D0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB1D8 = re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        qword_2540FB1E0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB1E8 = re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
        qword_2540FB1F0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioGeneratorComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB1F8 = re::ecs2::ComponentImpl<re::ecs2::AudioMixGroupsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB200 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioMixerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB208 = re::ecs2::ComponentImpl<re::ecs2::ReverbComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB210 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        unk_2540FB218 = re::ecs2::ComponentImpl<re::ecs2::AudioSessionComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        qword_2540FB220 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AudioTransientComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
        unk_2540FB228 = re::ecs2::ComponentImpl<re::ecs2::BodyTrackingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB230 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB238 = re::ecs2::ComponentImpl<re::ecs2::CharacterControllerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB240 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::CharacterControllerStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB248 = re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB250 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ConstraintListComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB258 = re::ecs2::ComponentImpl<re::ecs2::DeferredActivationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        qword_2540FB260 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB268 = re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        qword_2540FB270 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MotionStateComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB278 = re::ecs2::ComponentImpl<re::ecs2::NetworkAssetComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        qword_2540FB280 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB288 = re::ecs2::ComponentImpl<re::ecs2::PhysicsConstraintsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB290 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        unk_2540FB298 = re::ecs2::ComponentImpl<re::ecs2::PinComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB2A0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        unk_2540FB2A8 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxWithRoundedCornersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        qword_2540FB2B0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        unk_2540FB2B8 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        qword_2540FB2C0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        unk_2540FB2C8 = re::ecs2::ComponentImpl<re::ecs2::PrimitivePlaneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        qword_2540FB2D0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitivePyramidComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        unk_2540FB2D8 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        qword_2540FB2E0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PrimitiveTetrahedronComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        unk_2540FB2E8 = re::ecs2::ComponentImpl<re::ecs2::PrimitiveTubeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        qword_2540FB2F0 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
        unk_2540FB2F8 = re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType;
        qword_2540FB300 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB308 = re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB310 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        unk_2540FB318 = re::ecs2::ComponentImpl<re::ecs2::StateMachineComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
        qword_2540FB320 = (uint64_t)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
        __cxa_guard_release(_MergedGlobals_32);
      }
    }
    v8 = re::ecs2::ComponentTypeRegistry::instance((re::ecs2::ComponentTypeRegistry *)v5);
    v9 = *((_QWORD *)v8 + 3);
    if (v9)
    {
      v10 = (uint64_t)v8;
      for (i = 0; i != v9; ++i)
      {
        v12 = re::ecs2::ComponentTypeRegistry::operator[](v10, i);
        v13 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if ((v13 & 1) == 0)
        {
          v14 = 1u;
          while (_MergedGlobals_32[v14] != v12)
          {
            if (++v14 == 48)
            {
              v45 = re::globalAllocators(v13)[2];
              v46 = 0;
              v15 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v45 + 32))(v45, 32, 0);
              *(_QWORD *)v15 = &off_24ED296E8;
              *((_QWORD *)v15 + 1) = a1;
              *((_QWORD *)v15 + 2) = re::FrameAnalysisManager::processFrameComponentModified<REComponentDidChangeEvent>;
              *((_QWORD *)v15 + 3) = 0;
              v46 = v15;
              v16 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v6, (uint64_t)v44, v12, 0);
              v18 = v17;
              v19 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v3);
              *v19 = v16;
              v19[1] = v18;
              v20 = v46;
              if (v46)
              {
                v20 = (re *)(**(uint64_t (***)(re *))v46)(v46);
                if (v46 != (re *)v44)
                  v20 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
                v46 = 0;
              }
              v42 = re::globalAllocators(v20)[2];
              v43 = 0;
              v21 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v42 + 32))(v42, 32, 0);
              *(_QWORD *)v21 = &off_24ED29750;
              *((_QWORD *)v21 + 1) = a1;
              *((_QWORD *)v21 + 2) = re::FrameAnalysisManager::processFrameComponentModified<REComponentDidActivateEvent>;
              *((_QWORD *)v21 + 3) = 0;
              v43 = v21;
              v22 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v6, (uint64_t)v41, v12, 0);
              v24 = v23;
              v25 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v3);
              *v25 = v22;
              v25[1] = v24;
              v26 = v43;
              if (v43)
              {
                v26 = (re *)(**(uint64_t (***)(re *))v43)(v43);
                if (v43 != (re *)v41)
                  v26 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
                v43 = 0;
              }
              v39 = re::globalAllocators(v26)[2];
              v40 = 0;
              v27 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v39 + 32))(v39, 32, 0);
              *v27 = &off_24ED297A8;
              v27[1] = a1;
              v27[2] = re::FrameAnalysisManager::processFrameComponentModified<REComponentWillDeactivateEvent>;
              v27[3] = 0;
              v40 = v27;
              v28 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v6, (uint64_t)v38, v12, 0);
              v30 = v29;
              v31 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v3);
              *v31 = v28;
              v31[1] = v30;
              if (v40)
              {
                (**(void (***)(_BYTE *))v40)(v40);
                if (v40 != v38)
                  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
                v40 = 0;
              }
              break;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Scene,RESceneWillRemoveEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 24);
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  v7 = re::EventBus::subscribe<re::ecs2::Scene,RESceneWillRemoveEvent>(a1, 0, (uint64_t)v9, a3, a4);
  if (v11)
  {
    (**(void (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return v7;
}

uint64_t re::FrameAnalysisManager::processSceneWillRemove(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v14 = a2;
  v3 = *(_QWORD *)(a2 + 288);
  if (v3)
  {
    LODWORD(v4) = 0x7FFFFFFF;
    if (*(_QWORD *)(a1 + 192))
    {
      v5 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      v6 = *(unsigned int *)(*(_QWORD *)(a1 + 200) + 4 * ((v5 ^ (v5 >> 31)) % *(unsigned int *)(a1 + 216)));
      if ((_DWORD)v6 != 0x7FFFFFFF)
      {
        v7 = *(_QWORD *)(a1 + 208);
        if (*(_QWORD *)(v7 + 80 * v6 + 16) == a2)
        {
          LODWORD(v4) = v6;
        }
        else
        {
          v4 = v6;
          while (1)
          {
            LODWORD(v4) = *(_DWORD *)(v7 + 80 * v4 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v4 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v7 + 80 * v4 + 16) == a2)
              goto LABEL_11;
          }
          LODWORD(v4) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    v8 = *(_QWORD *)(a1 + 208) + 80 * v4;
    v9 = *(_QWORD *)(v8 + 64);
    if (v9)
    {
      v10 = 0;
      v11 = v8 + 24;
      do
      {
        v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v11, v10);
        re::EventBus::unsubscribe(v3, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
        ++v10;
      }
      while (v9 != v10);
    }
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(a1 + 192, (uint64_t *)&v14);
  return 0;
}

void re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 80 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::BucketArray<RESubscriptionHandle,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<RESubscriptionHandle,8ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::FrameAnalysisManager::beginNewFrame(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  size_t v29;
  unint64_t v30;
  size_t *p_len;
  char v32;
  size_t __len;
  int v34;
  char v35[4];

  this[15] = this[14];
  *((_WORD *)this + 64) = 1;
  *((_BYTE *)this + 130) = 0;
  *((_WORD *)this + 66) = 0;
  this[48] = 0;
  ++*((_DWORD *)this + 98);
  v1 = (_QWORD *)this[4];
  if (v1)
  {
    v2 = this;
    v3 = this + 46;
    v4 = this[30];
    v5 = v1[2] - this[43];
    v6 = v1[3] - this[44];
    v7 = v1[4] - this[45];
    this[30] = v4 + 1;
    v8 = (unint64_t)&this[v4 % 6 + 30];
    *(_QWORD *)(v8 + 8) = v5;
    *(_QWORD *)(v8 + 56) = v6 + v5 + v7;
    v9 = v1[4];
    *(_OWORD *)(this + 43) = *((_OWORD *)v1 + 1);
    this[45] = v9;
    if (v4 + 1 < 6)
      v10 = v4 + 1;
    else
      v10 = 6;
    if (v10)
    {
      v11 = 0;
      v12 = 0;
      v13 = this + 37;
      v14 = v10;
      do
      {
        v12 += *(v13 - 6);
        v15 = *v13++;
        v11 += v15;
        --v14;
      }
      while (v14);
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    v16 = (float)v6;
    v17 = (float)v7 + (float)v7;
    if ((float)((float)(v11 / v10) * 0.7) >= (float)(v12 / v10))
    {
      if (v17 >= v16)
        return this;
      LOBYTE(__len) = 1;
      p_len = &__len;
    }
    else
    {
      v18 = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(this[3]);
      if ((!v18 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 120))(v18))
        && (v20 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(v2[3])) != 0
        && (v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 104))(v20), (v22 = *(_QWORD *)(v21 + 24)) != 0))
      {
        v23 = *(_QWORD *)(v21 + 40);
        v24 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        v25 = 8 * v22;
        while (1)
        {
          if (*(_QWORD *)(*(_QWORD *)v23 + 224) > v24)
          {
            v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v23 + 240) + 8 * v24);
            if (v26)
            {
              if (*(_QWORD *)(v26 + 24))
                break;
            }
          }
          v23 += 8;
          v25 -= 8;
          if (!v25)
            goto LABEL_20;
        }
        re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(0, v19);
        v35[0] = 3;
        v28 = 2;
        v27 = 1;
      }
      else
      {
LABEL_20:
        v27 = 0;
        v28 = 1;
      }
      re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(v27, v19);
      *(_BYTE *)((unint64_t)v35 | v27) = 2;
      v29 = v27 + 1;
      __len = v27 + 1;
      v34 = v28;
      if (v17 >= v16)
      {
        v30 = v2[48];
        return re::DynamicArray<REFrameAnalysisBottleneck>::copy(v3, v30, v35, v29);
      }
      if (v5 <= v6)
      {
        v32 = 1;
        re::DynamicArray<BOOL>::add(v3, &v32);
        v30 = v2[48];
        v29 = __len;
        return re::DynamicArray<REFrameAnalysisBottleneck>::copy(v3, v30, v35, v29);
      }
      re::DynamicArray<REFrameAnalysisBottleneck>::copy(v3, v2[48], v35, v29);
      v32 = 1;
      p_len = (size_t *)&v32;
    }
    return re::DynamicArray<BOOL>::add(v3, p_len);
  }
  return this;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::ThrottleService>(void)::info = re::ecs2::introspect_ThrottleService(0);
  }
  v3 = re::introspect<re::ecs2::ThrottleService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

_QWORD *re::DynamicArray<REFrameAnalysisBottleneck>::copy(_QWORD *this, unint64_t a2, char *__src, size_t __len)
{
  size_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  size_t v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  if (!__len)
    return this;
  v5 = a2;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v12 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(_QWORD *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  v4 = __len;
  v8 = a2 + __len;
  if (__CFADD__(a2, __len))
    goto LABEL_12;
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + a2), __src, __len);
  }
  else
  {
    re::DynamicArray<BOOL>::growCapacity(this, a2 + __len);
    v10 = v6[2];
    v11 = &__src[v10 - v5];
    if (v10 != v5)
    {
      memmove((void *)(v6[4] + v5), __src, v10 - v5);
      v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + v5), v11, &__src[v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

uint64_t re::FrameAnalysisManager::afterFrameUpdate(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 40);
  if (v1)
    *(_BYTE *)(this + 131) = *(_BYTE *)(v1 + 72);
  v2 = *(_QWORD *)(this + 48);
  if (v2)
    *(_WORD *)(this + 129) = *(_WORD *)(v2 + 144);
  return this;
}

uint64_t re::FrameAnalysisManager::hierarchyHasComponentThatRenders(re::FrameAnalysisManager *this, re::ecs2::Entity *a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  re::ecs2::Entity *v6;
  uint64_t v7;
  const __int16 *v8;
  int16x8_t v9;
  int16x8_t *v10;
  int v11;
  int16x8_t *v12;
  uint64_t v13;
  uint16x8_t v14;
  const __int16 *v15;
  int16x8_t v16;
  int v17;
  int16x8_t *v18;
  uint64_t v19;
  uint16x8_t v20;
  const __int16 *v21;
  int16x8_t v22;
  int v23;
  uint16x8_t v24;
  uint64_t result;
  uint64_t v26;
  re::FrameAnalysisManager **v27;
  uint64_t v28;
  re::FrameAnalysisManager *v29;
  uint64_t v30;
  BOOL v31[2];

  *(_WORD *)v31 = 0;
  re::ecs2::RenderOptionsComponent::mixVisibility(this, (const re::ecs2::Entity *)1, &v31[1], v31, a5);
  if (!v31[1])
    return 0;
  v7 = *((unsigned __int16 *)this + 41);
  if (*((_WORD *)this + 41))
  {
    v8 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                         + 16);
    v9 = vld1q_dup_s16(v8);
    v10 = (int16x8_t *)*((_QWORD *)this + 11);
    v11 = 1;
    v12 = v10;
    v13 = *((unsigned __int16 *)this + 41);
    while (1)
    {
      v14 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v9, *v12), (int8x16_t)xmmword_2260F1E80);
      v14.i16[0] = vmaxvq_u16(v14);
      if (v14.i32[0])
        break;
      v11 -= 8;
      ++v12;
      if (!--v13)
        goto LABEL_8;
    }
    if (v14.u16[0] - v11 < *((unsigned __int16 *)this + 40))
      return 1;
LABEL_8:
    v15 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                          + 16);
    v16 = vld1q_dup_s16(v15);
    v17 = 1;
    v18 = (int16x8_t *)*((_QWORD *)this + 11);
    v19 = *((unsigned __int16 *)this + 41);
    while (1)
    {
      v20 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v16, *v18), (int8x16_t)xmmword_2260F1E80);
      v20.i16[0] = vmaxvq_u16(v20);
      if (v20.i32[0])
        break;
      v17 -= 8;
      ++v18;
      if (!--v19)
        goto LABEL_13;
    }
    if (v20.u16[0] - v17 < *((unsigned __int16 *)this + 40))
      return 1;
LABEL_13:
    v21 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                          + 16);
    v22 = vld1q_dup_s16(v21);
    v23 = 1;
    while (1)
    {
      v24 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v22, *v10), (int8x16_t)xmmword_2260F1E80);
      v24.i16[0] = vmaxvq_u16(v24);
      if (v24.i32[0])
        break;
      v23 -= 8;
      ++v10;
      if (!--v7)
        goto LABEL_19;
    }
    if (v24.u16[0] - v23 < *((unsigned __int16 *)this + 40))
      return 1;
  }
LABEL_19:
  if (!v31[0])
    return 0;
  v26 = *((_QWORD *)this + 41);
  if (!v26)
    return 0;
  v27 = (re::FrameAnalysisManager **)*((_QWORD *)this + 43);
  v28 = 8 * v26 - 8;
  do
  {
    v29 = *v27++;
    result = re::FrameAnalysisManager::hierarchyHasComponentThatRenders(v29, v6);
    if ((result & 1) != 0)
      break;
    v30 = v28;
    v28 -= 8;
  }
  while (v30);
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 80 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 80 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 80 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 80 * v10;
  return v12 + 24;
}

uint64_t re::ecs2::ComponentTypeRegistry::operator[](uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 24) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2);
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 24);
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  v7 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(a1, 0, (uint64_t)v9, a3, a4);
  if (v11)
  {
    (**(void (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return v7;
}

uint64_t re::FrameAnalysisManager::processFrameComponentModified<REComponentDidChangeEvent>(_QWORD *a1, re::FrameAnalysisManager *a2)
{
  re::ecs2::Entity *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL *v6;
  re::FrameAnalysisManager *v8;

  v8 = a2;
  if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)(a1 + 7), (uint64_t *)&v8))
  {
    if (a1[15] == a1[14]
      && re::FrameAnalysisManager::hierarchyHasComponentThatRenders(v8, v3, v4, v5, v6))
    {
      ++a1[14];
    }
    if (a1[13])
    {
      re::FrameAnalysisManager::hierarchyHasComponentThatRenders(v8, v3, v4, v5, v6);
      (*(void (**)(void))(a1[13] + 16))();
    }
  }
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 24);
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  v7 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(a1, 0, (uint64_t)v9, a3, a4);
  if (v11)
  {
    (**(void (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return v7;
}

uint64_t re::FrameAnalysisManager::processFrameComponentModified<REComponentDidActivateEvent>(_QWORD *a1, re::FrameAnalysisManager *a2)
{
  re::ecs2::Entity *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL *v6;
  re::FrameAnalysisManager *v8;

  v8 = a2;
  if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)(a1 + 7), (uint64_t *)&v8))
  {
    if (a1[15] == a1[14]
      && re::FrameAnalysisManager::hierarchyHasComponentThatRenders(v8, v3, v4, v5, v6))
    {
      ++a1[14];
    }
    if (a1[13])
    {
      re::FrameAnalysisManager::hierarchyHasComponentThatRenders(v8, v3, v4, v5, v6);
      (*(void (**)(void))(a1[13] + 16))();
    }
  }
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 24);
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  v7 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(a1, 0, (uint64_t)v9, a3, a4);
  if (v11)
  {
    (**(void (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return v7;
}

uint64_t re::FrameAnalysisManager::processFrameComponentModified<REComponentWillDeactivateEvent>(_QWORD *a1, re::FrameAnalysisManager *a2)
{
  re::ecs2::Entity *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL *v6;
  re::FrameAnalysisManager *v8;

  v8 = a2;
  if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)(a1 + 7), (uint64_t *)&v8))
  {
    if (a1[15] == a1[14]
      && re::FrameAnalysisManager::hierarchyHasComponentThatRenders(v8, v3, v4, v5, v6))
    {
      ++a1[14];
    }
    if (a1[13])
    {
      re::FrameAnalysisManager::hierarchyHasComponentThatRenders(v8, v3, v4, v5, v6);
      (*(void (**)(void))(a1[13] + 16))();
    }
  }
  return 0;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v9 + 80 * v7 + 16) != v3)
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 80 * v7 + 8);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v9 + 80 * v7 + 16) == v3)
      {
        *(_DWORD *)(v9 + 80 * v10 + 8) = *(_DWORD *)(v9 + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 80 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 80 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + 80 * v7);
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v7 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

void *re::FrameAnalysisManager::modifiedRenderFrameDataSetDebugBlock(uint64_t a1, void *aBlock)
{
  const void *v4;
  void *result;

  v4 = *(const void **)(a1 + 104);
  if (v4)
    _Block_release(v4);
  if (aBlock)
    result = _Block_copy(aBlock);
  else
    result = 0;
  *(_QWORD *)(a1 + 104) = result;
  return result;
}

void re::FrameAnalysisManager::~FrameAnalysisManager(re::FrameAnalysisManager *this)
{
  re::FrameAnalysisManager::~FrameAnalysisManager(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  const void *v23;
  uint64_t v24;

  *(_QWORD *)this = &off_24ED29500;
  v2 = (uint64_t *)((char *)this + 192);
  v3 = *((unsigned int *)this + 56);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*((_QWORD *)this + 26) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 20;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 56);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    v8 = *((_DWORD *)this + 56);
    do
    {
      v9 = *((_QWORD *)this + 26);
      v10 = v9 + 80 * v7;
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 288);
      if (v11)
      {
        v12 = *(_QWORD *)(v9 + 80 * v7 + 64);
        if (v12)
        {
          v13 = 0;
          v14 = v10 + 24;
          do
          {
            v15 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v14, v13);
            re::EventBus::unsubscribe(v11, *(_QWORD *)v15, *(_QWORD *)(v15 + 8));
            ++v13;
          }
          while (v12 != v13);
          v8 = *((_DWORD *)this + 56);
        }
      }
      if (v8 <= (int)v4 + 1)
        v16 = v4 + 1;
      else
        v16 = v8;
      while (1)
      {
        v7 = (v4 + 1);
        if (v16 - 1 == (_DWORD)v4)
          break;
        LODWORD(v4) = v4 + 1;
        v17 = v7;
        if ((*(_DWORD *)(*((_QWORD *)this + 26) + 80 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_21;
      }
      v17 = v16;
LABEL_21:
      LODWORD(v4) = v17;
    }
    while ((_DWORD)v3 != v17);
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(v2);
  v18 = re::ServiceLocator::serviceOrNull<re::EventBus>(*((_QWORD *)this + 3));
  if (v18)
  {
    v19 = *((_QWORD *)this + 22);
    if (v19)
    {
      v20 = v18;
      for (i = 0; i != v19; ++i)
      {
        v22 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)this + 136, i);
        re::EventBus::unsubscribe(v20, *(_QWORD *)v22, *(_QWORD *)(v22 + 8));
      }
    }
  }
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)this + 136);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_WORD *)this + 64) = 1;
  *((_BYTE *)this + 130) = 0;
  *((_WORD *)this + 66) = 0;
  v23 = (const void *)*((_QWORD *)this + 13);
  if (v23)
  {
    _Block_release(v23);
    *((_QWORD *)this + 13) = 0;
  }
  *((_QWORD *)this + 3) = 0;
  v24 = *((_QWORD *)this + 46);
  if (v24)
  {
    if (*((_QWORD *)this + 50))
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 48) = 0;
    *((_QWORD *)this + 46) = 0;
    ++*((_DWORD *)this + 98);
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(v2);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)this + 136);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 136);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::FrameAnalysisManager::services(re::FrameAnalysisManager *this)
{
  return *((_QWORD *)this + 3);
}

BOOL re::FrameAnalysisManager::hasModifiedRenderFrameData(re::FrameAnalysisManager *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v4 = 1;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    LOBYTE(v5) = (*((_QWORD *)this + 15) != *((_QWORD *)this + 14)) | (2 * *((_BYTE *)this + 128)) | (4 * *((_BYTE *)this + 129)) | (8 * *((_BYTE *)this + 131)) | (16 * *((_BYTE *)this + 132)) | (32 * *((_BYTE *)this + 133));
    (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v4);
  }
  return *((_QWORD *)this + 15) != *((_QWORD *)this + 14)
      || *((_BYTE *)this + 128)
      || *((_BYTE *)this + 129)
      || *((_BYTE *)this + 131)
      || *((_BYTE *)this + 132)
      || *((_BYTE *)this + 133) != 0;
}

uint64_t re::FrameAnalysisManager::hasModifiedEnvironmentLayerRenderFrameData(re::FrameAnalysisManager *this)
{
  return *((unsigned __int8 *)this + 130);
}

uint64_t re::FrameAnalysisManager::overrideRenderFrameDataModified(uint64_t this)
{
  ++*(_QWORD *)(this + 112);
  return this;
}

uint64_t re::FrameAnalysisManager::currentBottlenecks(re::FrameAnalysisManager *this)
{
  return *((_QWORD *)this + 50);
}

uint64_t re::FrameAnalysisManager::modifiedRenderFrameDataAddIgnoredEntity(re::FrameAnalysisManager *this, re::ecs2::Entity *a2)
{
  re::ecs2::Entity *v3;

  v3 = a2;
  return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)this + 56, (uint64_t *)&v3);
}

uint64_t re::FrameAnalysisManager::modifiedRenderFrameDataRemoveIgnoredEntity(re::FrameAnalysisManager *this, re::ecs2::Entity *a2)
{
  re::ecs2::Entity *v3;

  v3 = a2;
  return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 56, (uint64_t *)&v3);
}

void re::FrameAnalysisManager::modifiedRenderFrameDataClearIgnoredEntities(re::FrameAnalysisManager *this)
{
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear((uint64_t)this + 56);
}

void re::FrameAnalysisProfilerProcessor::~FrameAnalysisProfilerProcessor(re::FrameAnalysisProfilerProcessor *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::FrameAnalysisProfilerProcessor::willNeedEvents(re::FrameAnalysisProfilerProcessor *this)
{
  return 0;
}

uint64_t re::FrameAnalysisProfilerProcessor::willNeedStatistics(re::FrameAnalysisProfilerProcessor *this)
{
  return 1;
}

uint64_t re::FrameAnalysisProfilerProcessor::willNeedAttributions(re::FrameAnalysisProfilerProcessor *this)
{
  return 0;
}

uint64_t re::FrameAnalysisProfilerProcessor::willNeedMemoryStatistics(re::FrameAnalysisProfilerProcessor *this)
{
  return 0;
}

uint64_t re::ProfilerProcessor::updateInterval(re::ProfilerProcessor *this)
{
  return 1;
}

void re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Scene *,RESceneDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Scene *,RESceneDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Scene *,RESceneDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED29638;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Scene *,RESceneDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED29638;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Scene *,RESceneDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED29690;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED29690;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Scene *,RESceneWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Scene *,RESceneWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED296E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED296E8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED29750;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED29750;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED297A8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED297A8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::FrameAnalysisManager,REEventHandlerResult (re::FrameAnalysisManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

uint64_t re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 24 * v9;
  return v11 + 16;
}

uint64_t re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 16);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31)) % v2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v9 + 24 * v7 + 16) != v3)
  {
    while (1)
    {
      v10 = v7;
      LODWORD(v7) = *(_DWORD *)(v9 + 24 * v7 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v7 == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v9 + 24 * v7 + 16) == v3)
      {
        *(_DWORD *)(v9 + 24 * v10 + 8) = *(_DWORD *)(v9 + 24 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 24 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 24 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  v11 = *(_QWORD *)(a1 + 16);
  v12 = v11 + 24 * v7;
  v15 = *(_DWORD *)(v12 + 8);
  v14 = (int *)(v12 + 8);
  v13 = v15;
  if (v15 < 0)
  {
    *v14 = v13 & 0x7FFFFFFF;
    v11 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v11 + 24 * v7 + 8);
  }
  v16 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v11 + 24 * v7 + 8) = *(_DWORD *)(a1 + 36) | v13 & 0x80000000;
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v16 + 1;
  return 1;
}

void re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t *re::BucketArray<RESubscriptionHandle,8ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 128, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add(uint64_t a1, _QWORD *a2)
{
  _anonymous_namespace_ *result;
  uint64_t v5;
  uint64_t v6;

  result = re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::ensureCapacity((_anonymous_namespace_ *)a1);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v5 = a1 + 24;
  else
    v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v5 + 8 * v6) = *a2;
  *(_QWORD *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::ensureCapacity(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = result;
  if (*(_QWORD *)result)
  {
    v2 = *((_QWORD *)result + 1);
    if ((*((_BYTE *)result + 16) & 1) != 0)
      v3 = 2;
    else
      v3 = *((_QWORD *)result + 3);
    if (v2 >= v3)
      return re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::growCapacity(result, v2 + 1);
  }
  else
  {
    v4 = *((_QWORD *)v1 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v1, v4);
    *((_DWORD *)v1 + 4) += 2;
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::growCapacity(_anonymous_namespace_ *result, unint64_t a2)
{
  unint64_t v2;
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;

  v2 = a2;
  v3 = result;
  if (!*(_QWORD *)result)
  {
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v2);
    *((_DWORD *)v3 + 4) += 2;
    return result;
  }
  if ((*((_BYTE *)result + 16) & 1) != 0)
  {
    if (a2 <= 2)
      return result;
    v5 = 4;
  }
  else
  {
    v4 = *((_QWORD *)result + 3);
    if (v4 >= a2)
      return result;
    v5 = 2 * v4;
  }
  if (v5 > a2)
    a2 = v5;
  return (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(result, a2);
}

uint64_t re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<RESubscriptionHandle,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 16 * (v2 & 7);
}

uint64_t re::BucketArray<RESubscriptionHandle,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 16 * (a2 & 7);
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    v2 = result + 24;
    re::BucketArray<RESubscriptionHandle,8ul>::deinit(result + 24);
    return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  }
  return result;
}

unint64_t re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(unint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result > 1)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277, v2, v3);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 80 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 16) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 80 * v10;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  v14 += 24;
  *(_DWORD *)(v14 + 16) = 1;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_DWORD *)(v14 + 48) = 0;
  re::BucketArray<RESubscriptionHandle,8ul>::swap(v14, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::BucketArray<RESubscriptionHandle,8ul>::swap(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::DynamicOverflowArray((uint64_t)v6, a1);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a1, a2);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a2, (uint64_t)v6);
  result = v6[0];
  if (v6[0] && (v7 & 1) == 0)
    result = (*(uint64_t (**)(void))(*(_QWORD *)v6[0] + 40))();
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v5;
  ++*(_DWORD *)(a1 + 48);
  ++*(_DWORD *)(a2 + 48);
  return result;
}

uint64_t re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 != a2)
  {
    if (*(_QWORD *)a1)
    {
      if (*(_QWORD *)a2 && *(_QWORD *)a1 != *(_QWORD *)a2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        result = _os_crash();
        __break(1u);
        return result;
      }
    }
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      if (*(_QWORD *)(a2 + 8))
      {
        re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move(a1, a2);
      }
      else
      {
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a2 + 16) += 2;
        *(_DWORD *)(a1 + 16) += 2;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return a1;
}

void re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 80;
        }
        while (v11 < v9);
      }
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

BOOL re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                        % v2));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v7 + 24 * v5 + 16) == v3)
    return 1;
  do
  {
    LODWORD(v5) = *(_DWORD *)(v7 + 24 * v5 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v5 != 0x7FFFFFFF;
  }
  while ((_DWORD)v5 != 0x7FFFFFFF && *(_QWORD *)(v7 + 24 * v5 + 16) != v3);
  return result;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __objc2_class_ro *v10;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v10 = re::EventBus::getTypeId<REComponentDidChangeEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)v10);
  re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

{
  __objc2_class_ro *v10;
  re *EventInfo;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  _QWORD *v17;
  uint64_t (**v18[6])();
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v10 = re::EventBus::getTypeId<REComponentDidChangeEvent>();
  EventInfo = (re *)re::EventBus::addOrGetEventInfo(a1, (uint64_t)v10);
  v12 = re::globalAllocators(EventInfo)[2];
  v15[0] = &off_24ED5DC58;
  v15[1] = a3;
  v16 = v12;
  v17 = v15;
  re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>((uint64_t)v15, a5, v18);
  v13 = re::EventBus::EventInfo::addSubscription((unint64_t)EventInfo, (uint64_t)v18, a2, a4);
  if (v20)
  {
    ((void (*)(uint64_t (***)()))**v20)(v20);
    if (v20 != v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v20 = 0;
  }
  if (v17)
  {
    (*(void (**)(_QWORD *))*v17)(v17);
    if (v17 != v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  }
  return v13;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED29810;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED29868;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

__objc2_class_ro *re::EventBus::getTypeId<REComponentDidChangeEvent>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;
  const char *v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::EventBus::getTypeId<REComponentDidChangeEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"25REComponentDidChangeEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[384];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED29810;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED29810;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED29810;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED29810;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED29868;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED29868;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED29868;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED29868;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidChangeEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __objc2_class_ro *Type;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<REComponentWillDeactivateEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, (uint64_t)Type);
  re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

{
  __objc2_class_ro *Type;
  re *EventInfo;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  _QWORD *v17;
  uint64_t (**v18[6])();
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<REComponentWillDeactivateEvent>();
  EventInfo = (re *)re::EventBus::addOrGetEventInfo(a1, (uint64_t)Type);
  v12 = re::globalAllocators(EventInfo)[2];
  v15[0] = &off_24ED68028;
  v15[1] = a3;
  v16 = v12;
  v17 = v15;
  re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>((uint64_t)v15, a5, v18);
  v13 = re::EventBus::EventInfo::addSubscription((unint64_t)EventInfo, (uint64_t)v18, a2, a4);
  if (v20)
  {
    ((void (*)(uint64_t (***)()))**v20)(v20);
    if (v20 != v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v20 = 0;
  }
  if (v17)
  {
    (*(void (**)(_QWORD *))*v17)(v17);
    if (v17 != v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  }
  return v13;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED298C0;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED29918;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

__objc2_class_ro *re::EventBus::getTypeId<REComponentWillDeactivateEvent>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;
  const char *v4;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::EventBus::getTypeId<REComponentWillDeactivateEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"30REComponentWillDeactivateEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[382];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED298C0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED298C0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED298C0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED298C0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED29918;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED29918;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED29918;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED29918;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillDeactivateEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::internal::engineExecutePhase(int *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[298] < 1)
    return re::Engine::executePhase((re::Engine *)a1, a2);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid nested engine tick", "!engine->isInsideTick()", "engineExecutePhase", 189);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::Engine::executePhase(re::Engine *this, unsigned int a2)
{
  re::ecs2::ECSManager *v4;
  re::Scheduler *v5;
  double v6;
  uint64_t result;

  ++*((_DWORD *)this + 298);
  v4 = (re::ecs2::ECSManager *)*((_QWORD *)this + 83);
  if (v4)
    re::ecs2::ECSManager::setActiveRealityRendererSceneGroup(v4, 0);
  if (*((unsigned __int8 *)this + 688) >= a2)
  {
    re::Engine::checkForConfigureSystemChanges(this, 0);
    v5 = (re::Scheduler *)*((_QWORD *)this + 85);
    v6 = 0.0;
    if (a2 == 1)
      v6 = (*(float (**)(_QWORD, double))(**((_QWORD **)this + 115) + 56))(*((_QWORD *)this + 115), 0.0);
    re::Scheduler::beginPhaseExecution(v5, v6, 0.00277777785);
  }
  result = re::Scheduler::executePhase(*((re::Scheduler **)this + 85), *((_QWORD *)this + a2 + 4));
  *((_BYTE *)this + 688) = a2;
  if (a2 == 5)
  {
    if (*((_BYTE *)this + 409))
    {
      if (*((_BYTE *)this + 408))
      {
        *((_BYTE *)this + 408) = 0;
        result = *((_QWORD *)this + 85);
        if (result)
          result = re::Scheduler::setEnabled(result, (uint64_t)this + 336, 0);
      }
    }
  }
  --*((_DWORD *)this + 298);
  return result;
}

uint64_t re::internal::engineEnterFrameWithTimeDelta(re::internal *this, re::Engine *a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  __int128 v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD *);
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*((int *)this + 298) >= 1)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid nested engine tick", "!engine->isInsideTick()", "engineEnterFrameWithTimeDelta", 195);
    _os_crash();
    __break(1u);
  }
  v5 = (*(uint64_t (**)(_QWORD, re::Engine *))(**((_QWORD **)this + 115) + 120))(*((_QWORD *)this + 115), a2);
  *(_QWORD *)&v9 = this;
  *((_QWORD *)&v9 + 1) = re::Engine::timeDidChange;
  v10 = 0;
  v11 = re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::createSubscription<re::Engine>(re::Engine *,REEventHandlerResult (re::Engine::*)(re::SimulationTimer*,re::SimulationTimerEventArgs const&))::{lambda(re::SimulationTimer*,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription const&,re::SimulationTimerEventArgs const&)#1}::__invoke;
  re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::removeSubscription(v5, &v9);
  re::ManualClock::update(*((_QWORD *)this + 114), a3, v6);
  v7 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 115) + 120))(*((_QWORD *)this + 115));
  *(_QWORD *)&v9 = this;
  *((_QWORD *)&v9 + 1) = re::Engine::timeDidChange;
  v10 = 0;
  v11 = re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::createSubscription<re::Engine>(re::Engine *,REEventHandlerResult (re::Engine::*)(re::SimulationTimer*,re::SimulationTimerEventArgs const&))::{lambda(re::SimulationTimer*,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription const&,re::SimulationTimerEventArgs const&)#1}::__invoke;
  re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::addSubscription(v7, (uint64_t)&v9);
  return re::Engine::executePhase(this, 1u);
}

id re::internal::coreREBundleVersionString(re::internal *this)
{
  id v1;
  void *v2;
  id v4;

  re::Bundle::coreREFramework(&v4);
  v1 = objc_retainAutorelease(v4);

  objc_msgSend(v1, "objectForInfoDictionaryKey:", *MEMORY[0x24BDBD2A0]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t *re::allocInfo_RealityRendererSystemArrayManager(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_33);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_33))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FB390, 0);
    *(uint64_t *)((char *)&qword_2540FB3A0 + 6) = 0;
    qword_2540FB3A0 = 0;
    qword_2540FB3B0 = 0;
    qword_2540FB3B8 = 0xFFFFFFFFLL;
    qword_2540FB390 = (uint64_t)&off_24ED7DAA8;
    qword_2540FB3C0 = (uint64_t)"RealityRendererSystemArrayManager";
    dword_2540FB3C8 = 0;
    *(_OWORD *)&algn_2540FB3CC[4] = 0u;
    *(_OWORD *)&algn_2540FB3CC[20] = 0u;
    *(_OWORD *)&algn_2540FB3CC[36] = 0u;
    qword_2540FB400 = 0;
    __cxa_guard_release(&_MergedGlobals_33);
  }
  return &qword_2540FB390;
}

void re::initInfo_RealityRendererSystemArrayManager(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x52D0909F144886ACLL;
  v5[1] = "RealityRendererSystemArrayManager";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x100000008;
  *((_DWORD *)this + 6) = 1;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_RealityRendererSystemArrayManager(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RealityRendererSystemArrayManager>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RealityRendererSystemArrayManager>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RealityRendererSystemArrayManager>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RealityRendererSystemArrayManager>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::Engine *re::Engine::Engine(re::Engine *this)
{
  uint64_t v2;
  re::internal *v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  re *v10;
  NSObject *v11;
  void *v12;
  int v13;
  BOOL v14;
  const char *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t i;
  __int128 v24;
  re::internal *v26;
  uint64_t v27;
  const char *v28;
  re::internal *log;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  _BYTE v36[18];
  __int16 v37;
  re::internal *v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(this)[2];
  ArcSharedObject::ArcSharedObject(this, 0);
  *((_QWORD *)this + 2) = v2;
  *(_QWORD *)this = &off_24ED29970;
  *((_BYTE *)this + 24) = 0;
  *((_WORD *)this + 160) = 259;
  *((_DWORD *)this + 81) = 1023969417;
  *((_BYTE *)this + 328) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 88) = 1;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 50) = 0;
  *((_WORD *)this + 204) = 1;
  v3 = re::EngineConfiguration::EngineConfiguration((re::Engine *)((char *)this + 416));
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_BYTE *)this + 688) = 8;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *((_DWORD *)this + 226) = 0;
  *(_OWORD *)((char *)this + 1148) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_QWORD *)this + 147) = 0xBFF0000000000000;
  *((_QWORD *)this + 148) = 0;
  *((_DWORD *)this + 298) = 0;
  *((_DWORD *)this + 306) = 0;
  *((_QWORD *)this + 152) = 0;
  *((_OWORD *)this + 75) = 0u;
  *((_QWORD *)this + 159) = 0;
  *((_DWORD *)this + 320) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_DWORD *)this + 316) = 0;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *((_DWORD *)this + 328) = 0;
  *((_QWORD *)this + 163) = 0;
  *((_QWORD *)this + 170) = 0;
  *((_DWORD *)this + 342) = 0;
  *(_OWORD *)((char *)this + 1320) = 0u;
  *(_OWORD *)((char *)this + 1336) = 0u;
  *((_DWORD *)this + 338) = 0;
  *((_BYTE *)this + 1408) = 0;
  *((_OWORD *)this + 87) = 0u;
  *((_OWORD *)this + 86) = 0u;
  do
    v5 = __ldxr((unsigned int *)&re::Engine::s_instanceCount);
  while (__stxr(v5 + 1, (unsigned int *)&re::Engine::s_instanceCount));
  if (v5 >= 8)
  {
    re::internal::assertLog((re::internal *)5, v4, "assertion failure: '%s' (%s:line %i) Exceeded max Engine count (%d)", "oldCount < kMaxInstanceCount", "Engine", 255, 8);
    _os_crash();
    __break(1u);
  }
  re::internal::coreREBundleVersionString(v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  re::Bundle::realityKitFramework((uint64_t)buf);
  if (buf[0])
    v7 = *(void **)&v36[4];
  else
    v7 = 0;
  v8 = objc_retainAutorelease(v7);
  if (buf[0])

  objc_msgSend(v8, "objectForInfoDictionaryKey:", *MEMORY[0x24BDBD2A0]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = *re::appLogObjects(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    log = v11;
    re::internal::coreREBundleVersionString(log);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "intValue");

    if (v13)
      v14 = v13 == 0xFFFF;
    else
      v14 = 1;
    v15 = "Localbuild";
    if (!v14)
      v15 = "Official Tag";
    v28 = v15;
    v30 = v6;
    v27 = objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
    v26 = (re::internal *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String");
    re::internal::coreREBundleVersionString(v26);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "componentsSeparatedByString:", CFSTR("."));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v31, buf, 16);
    if (v18)
    {
      v19 = v18;
      v20 = 0;
      v21 = *(_QWORD *)v32;
      v22 = 1000000000000;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v32 != v21)
            objc_enumerationMutation(v17);
          v22 /= 0x3E8uLL;
          v20 += v22 * (int)objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * i), "intValue");
        }
        v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v31, buf, 16);
      }
      while (v19);
    }
    else
    {
      v20 = 0;
    }

    *(_DWORD *)buf = 136315906;
    *(_QWORD *)v36 = v28;
    *(_WORD *)&v36[8] = 2080;
    *(_QWORD *)&v36[10] = v27;
    v37 = 2080;
    v38 = v26;
    v39 = 2048;
    v40 = v20;
    _os_log_impl(&dword_224FE9000, (os_log_t)log, OS_LOG_TYPE_DEFAULT, "Booting the engine (%s) with CoreVersion : %s RealityKit %s, ver = %llu", buf, 0x2Au);

    v6 = v30;
  }
  *(_QWORD *)&v24 = -1;
  *((_QWORD *)&v24 + 1) = -1;
  *((_OWORD *)this + 18) = v24;
  *((_OWORD *)this + 19) = v24;
  *((_OWORD *)this + 16) = v24;
  *((_OWORD *)this + 17) = v24;
  *((_OWORD *)this + 14) = v24;
  *((_OWORD *)this + 15) = v24;
  *((_OWORD *)this + 12) = v24;
  *((_OWORD *)this + 13) = v24;
  *((_OWORD *)this + 10) = v24;
  *((_OWORD *)this + 11) = v24;
  *((_OWORD *)this + 8) = v24;
  *((_OWORD *)this + 9) = v24;
  *((_OWORD *)this + 6) = v24;
  *((_OWORD *)this + 7) = v24;
  *((_OWORD *)this + 4) = v24;
  *((_OWORD *)this + 5) = v24;
  *((_OWORD *)this + 2) = v24;
  *((_OWORD *)this + 3) = v24;

  return this;
}

void re::Engine::~Engine(re::Engine *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_24ED29970;
  re::Engine::deinit((uint64_t)this);
  do
    v3 = __ldxr((unsigned int *)&re::Engine::s_instanceCount);
  while (__stxr(v3 - 1, (unsigned int *)&re::Engine::s_instanceCount));
  if (v3 <= 0)
  {
    re::internal::assertLog((re::internal *)4, v2, "assertion failure: '%s' (%s:line %i) Engine count is 0", "oldCount > 0", "~Engine", 271);
    _os_crash();
    __break(1u);
  }
  else
  {

    v4 = *((_QWORD *)this + 172);
    if (v4)
    {

      *((_QWORD *)this + 172) = 0;
    }
    re::Event<re::Engine>::~Event((uint64_t *)this + 161);
    re::Event<re::Engine>::~Event((uint64_t *)this + 150);
    v5 = *((_QWORD *)this + 143);
    if (v5)
    {

      *((_QWORD *)this + 143) = 0;
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 142);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *((_QWORD *)this + 140);
    if (v9)
    {

      *((_QWORD *)this + 140) = 0;
    }
    v10 = *((_QWORD *)this + 116);
    if (v10)
    {

      *((_QWORD *)this + 116) = 0;
    }
    v11 = *((_QWORD *)this + 110);
    if (v11)
    {

      *((_QWORD *)this + 110) = 0;
    }
    v12 = *((_QWORD *)this + 106);
    if (v12)
    {

      *((_QWORD *)this + 106) = 0;
    }

    v13 = *((_QWORD *)this + 83);
    if (v13)
    {

      *((_QWORD *)this + 83) = 0;
    }

    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 488);
    v14 = *((_QWORD *)this + 55);
    if (v14)
    {
      if ((*((_BYTE *)this + 448) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 40))(v14, *((_QWORD *)this + 57));
      *(_OWORD *)((char *)this + 440) = 0u;
      *(_OWORD *)((char *)this + 456) = 0u;
    }

    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 336);
    *(_QWORD *)this = &off_24ED426B8;
    objc_destructInstance((char *)this + 8);
  }
}

{
  re::Engine::~Engine(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::Engine::deinit(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  re::DrawingManager *v3;
  uint64_t v4;
  uint64_t v5;
  re::TextureAsset *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  re *v15;
  uint64_t v16;
  uint64_t *v17;
  re::FrameProfiler *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  re::DrawableQueueManager *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  re::AssetManager *v29;
  re::AssetManager *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  re::NetworkAssetManager *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  re *v49;
  re::DirectResourceAssetTracker *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  void *v55;
  re *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  re *v65;
  void (***v66)(_QWORD);
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  re *v71;
  uint64_t v72;
  uint64_t v73;
  re *v74;
  void (***v75)(_QWORD);
  uint64_t v76;
  uint64_t v77;
  re::SharedClockManager *v78;
  uint64_t v79;
  void (***v80)(_QWORD);
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  re::NetworkSystem *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 v88;
  uint64_t v89;
  re::VideoManager *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  re::MaterialParametersManager *v95;
  uint64_t v96;
  void (***v97)(_QWORD);
  uint64_t v98;
  uint64_t v99;
  void (***v100)(_QWORD);
  uint64_t v101;
  re::InputManager *v102;
  uint64_t v103;
  re::InputManager *v104;
  re::BackgroundTaskManager *v105;
  uint64_t v106;
  void (***v107)(_QWORD);
  uint64_t v108;
  void (***v109)(_QWORD);
  uint64_t v110;
  void (***v111)(_QWORD);
  uint64_t v112;
  void (***v113)(_QWORD);
  uint64_t v114;
  void (***v115)(_QWORD);
  uint64_t v116;
  void (***v117)(_QWORD);
  uint64_t v118;
  void (***v119)(_QWORD);
  uint64_t v120;
  void (***v121)(_QWORD);
  uint64_t v122;
  void (***v123)(_QWORD);
  uint64_t v124;
  void (***v125)(_QWORD);
  uint64_t v126;
  void (***v127)(_QWORD);
  uint64_t v128;
  re::ColorManager *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (***v136)(_QWORD);
  uint64_t v137;
  void (***v138)(_QWORD);
  uint64_t v139;
  re::ImportGraphicsResources *v140;
  void **v141;
  re::ImportGraphicsResources *v142;
  uint64_t v143;
  re *v144;
  re::RenderManager *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  re *v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  CFTypeRef *v153;
  void (***v154)(_QWORD);
  uint64_t v155;
  void (***v156)(_QWORD);
  uint64_t v157;
  void (***v158)(_QWORD);
  uint64_t v159;
  void (***v160)(_QWORD);
  uint64_t v161;
  void (***v162)(_QWORD);
  uint64_t v163;
  void (***v164)(_QWORD);
  uint64_t v165;
  re::EntitlementManager *v166;
  re::EntitlementManager *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  double v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  StringID v185;
  StringID v186;
  StringID v187;
  StringID v188;
  StringID v189;
  StringID v190;
  StringID v191;
  uint64_t v192;
  StringID v193;
  StringID v194;
  __int128 v195;
  uint64_t v196;
  uint64_t (*v197)(uint64_t, _QWORD *);
  uint64_t v198;

  v198 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(this + 24))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 840);
    if (v2)
    {
      v3 = *(re::DrawingManager **)(v2 + 104);
      if (v3)
        re::DrawingManager::prepareForDeinit(v3);
    }
    dispatch_block_cancel(*(dispatch_block_t *)(v1 + 1400));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 912) + 72))(*(_QWORD *)(v1 + 912));
    (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 920) + 136))(*(_QWORD *)(v1 + 920));
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 920) + 120))(*(_QWORD *)(v1 + 920));
    *(_QWORD *)&v195 = v1;
    *((_QWORD *)&v195 + 1) = re::Engine::timeDidChange;
    v196 = 0;
    v197 = re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::createSubscription<re::Engine>(re::Engine *,REEventHandlerResult (re::Engine::*)(re::SimulationTimer*,re::SimulationTimerEventArgs const&))::{lambda(re::SimulationTimer*,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription const&,re::SimulationTimerEventArgs const&)#1}::__invoke;
    re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::removeSubscription(v4, &v195);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
    v5 = *(_QWORD *)(v1 + 1200);
    if (v5)
    {
      if (*(_QWORD *)(v1 + 1232))
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      *(_QWORD *)(v1 + 1232) = 0;
      *(_QWORD *)(v1 + 1208) = 0;
      *(_QWORD *)(v1 + 1216) = 0;
      *(_QWORD *)(v1 + 1200) = 0;
      ++*(_DWORD *)(v1 + 1224);
    }
    v6 = *(re::TextureAsset **)(v1 + 1288);
    if (v6)
    {
      if (*(_QWORD *)(v1 + 1320))
        v6 = (re::TextureAsset *)(*(uint64_t (**)(re::TextureAsset *))(*(_QWORD *)v6 + 40))(v6);
      *(_QWORD *)(v1 + 1320) = 0;
      *(_QWORD *)(v1 + 1296) = 0;
      *(_QWORD *)(v1 + 1304) = 0;
      *(_QWORD *)(v1 + 1288) = 0;
      ++*(_DWORD *)(v1 + 1312);
    }
    v7 = *(_QWORD *)(v1 + 880);
    if (v7)
    {

      *(_QWORD *)(v1 + 880) = 0;
    }
    v8 = *(_QWORD *)(v1 + 928);
    if (v8)
    {

      *(_QWORD *)(v1 + 928) = 0;
    }
    v9 = *(_QWORD *)(v1 + 744);
    if (v9)
    {
      v10 = re::TextureAsset::assetType(v6);
      v11 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)(v9 + 1104), (unint64_t)v10);
      *(_QWORD *)(v11 + 72) = 0;
      *(_OWORD *)(v11 + 8) = 0u;
      *(_OWORD *)(v11 + 24) = 0u;
    }
    if (*(_QWORD *)(v1 + 792))
    {
      v12 = *(_QWORD *)(v1 + 648);
      re::StringID::invalid((re::StringID *)&v193);
      if ((v13 & 1) == 0
      {
        re::introspect<re::RealityRendererSystemArrayManager>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RealityRendererSystemArrayManager", (uint64_t (*)(re::internal *))re::allocInfo_RealityRendererSystemArrayManager, (re::IntrospectionBase *(*)(void))re::initInfo_RealityRendererSystemArrayManager, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RealityRendererSystemArrayManager>, 0);
      }
      v14 = re::introspect<re::RealityRendererSystemArrayManager>(void)::info;
      re::StringID::StringID((re::StringID *)&v194, &v193);
      *(_QWORD *)&v195 = v14;
      re::StringID::StringID((re::StringID *)((char *)&v195 + 8), &v194);
      re::StringID::destroyString((re::StringID *)&v194);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v12 + 16, (uint64_t *)&v195);
      re::StringID::destroyString((re::StringID *)((char *)&v195 + 8));
      re::StringID::destroyString((re::StringID *)&v193);
      v16 = *(_QWORD *)(v1 + 792);
      if (v16)
      {
        v17 = re::globalAllocators(v15);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17[2] + 40))(v17[2], v16);
      }
      *(_QWORD *)(v1 + 792) = 0;
    }
    v18 = *(re::FrameProfiler **)(v1 + 936);
    if (v18 && *((_BYTE *)v18 + 204) && !*((_BYTE *)v18 + 17))
    {
      re::FrameProfiler::setOverlayEnabled(v18, 0);
      v19 = *(_QWORD *)(v1 + 664);
      if (v19)
      {
        v20 = *(_QWORD *)(v1 + 1120);
        v192 = v20;
        if (v20)
          v21 = (id)(v20 + 8);
        re::ecs2::ECSManager::removeSystem(v19, &v192, 0);
        if (v192)
        {

          v192 = 0;
        }
      }
      v22 = *(_QWORD *)(v1 + 1120);
      if (v22)
      {

        *(_QWORD *)(v1 + 1120) = 0;
      }
    }
    v23 = *(_QWORD *)(v1 + 664);
    if (v23)
    {

      *(_QWORD *)(v1 + 664) = 0;
    }
    v24 = *(re::DrawableQueueManager **)(v1 + 768);
    if (v24)
    {
      v25 = re::globalAllocators(v18)[2];
      re::DrawableQueueManager::~DrawableQueueManager(v24);
      v18 = (re::FrameProfiler *)(*(uint64_t (**)(uint64_t, re::DrawableQueueManager *))(*(_QWORD *)v25 + 40))(v25, v24);
    }
    *(_QWORD *)(v1 + 768) = 0;
    v26 = *(void ***)(v1 + 824);
    if (v26)
    {
      v27 = re::globalAllocators(v18)[2];
      re::ResourceSharingManager::~ResourceSharingManager(v26);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 40))(v27, v26);
    }
    *(_QWORD *)(v1 + 824) = 0;
    v28 = *(_QWORD *)(v1 + 752);
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    v29 = *(re::AssetManager **)(v1 + 744);
    if (v29)
    {
      re::AssetManager::deinit(v29);
      v30 = *(re::AssetManager **)(v1 + 744);
      if (v30)
      {
        v31 = re::globalAllocators(v29)[2];
        re::AssetManager::~AssetManager(v30);
        v29 = (re::AssetManager *)(*(uint64_t (**)(uint64_t, re::AssetManager *))(*(_QWORD *)v31 + 40))(v31, v30);
      }
      *(_QWORD *)(v1 + 744) = 0;
    }
    v32 = *(_QWORD *)(v1 + 760);
    if (v32)
    {
      v33 = re::globalAllocators(v29);
      v29 = (re::AssetManager *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33[2] + 40))(v33[2], v32);
      *(_QWORD *)(v1 + 760) = 0;
    }
    v34 = *(_QWORD *)(v1 + 808);
    if (v34)
    {
      *(_OWORD *)(v34 + 24) = 0u;
      *(_OWORD *)(v34 + 8) = 0u;
      v35 = *(_QWORD *)(v1 + 808);
      if (v35)
      {
        v36 = re::globalAllocators(v29)[2];
        (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 40))(v36, v35);
      }
      *(_QWORD *)(v1 + 808) = 0;
    }
    v37 = *(re::NetworkAssetManager **)(v1 + 816);
    if (v37)
    {
      re::NetworkAssetManager::deinit(v37);
      v38 = *(uint64_t **)(v1 + 816);
      if (v38)
      {
        v39 = re::globalAllocators(v37)[2];
        *v38 = (uint64_t)&off_24ED2BA58;
        re::StringID::destroyString((re::StringID *)(v38 + 25));
        v40 = v38[23];
        if (v40)
        {

          v38[23] = 0;
        }
        re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v38 + 16);
        re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v38 + 10);
        v41.n128_f64[0] = re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v38 + 4);
        v42 = v38[3];
        if (v42)
        {

          v38[3] = 0;
        }
        v37 = (re::NetworkAssetManager *)(*(uint64_t (**)(uint64_t, uint64_t *, __n128))(*(_QWORD *)v39 + 40))(v39, v38, v41);
      }
      *(_QWORD *)(v1 + 816) = 0;
    }
    v43 = *(_QWORD **)(v1 + 752);
    if (v43)
    {
      v44 = re::globalAllocators(v37)[2];
      *v43 = &off_24ED2CA90;
      v45 = re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit(v43 + 9);
      (*(void (**)(uint64_t, _QWORD *, double))(*(_QWORD *)v44 + 40))(v44, v43, v45);
      *(_QWORD *)(v1 + 752) = 0;
    }
    if (*(_QWORD *)(v1 + 784))
    {
      v46 = *(_QWORD *)(v1 + 648);
      re::StringID::invalid((re::StringID *)&v191);
      if ((v47 & 1) == 0
      {
        re::introspect<re::DirectResourceAssetTracker>(void)::info = re::introspect_DirectResourceAssetTracker(0);
      }
      v48 = re::introspect<re::DirectResourceAssetTracker>(void)::info;
      re::StringID::StringID((re::StringID *)&v194, &v191);
      *(_QWORD *)&v195 = v48;
      re::StringID::StringID((re::StringID *)((char *)&v195 + 8), &v194);
      re::StringID::destroyString((re::StringID *)&v194);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v46 + 16, (uint64_t *)&v195);
      re::StringID::destroyString((re::StringID *)((char *)&v195 + 8));
      re::StringID::destroyString((re::StringID *)&v191);
      v50 = *(re::DirectResourceAssetTracker **)(v1 + 784);
      if (v50)
      {
        v51 = re::globalAllocators(v49)[2];
        re::DirectResourceAssetTracker::~DirectResourceAssetTracker(v50);
        (*(void (**)(uint64_t, re::DirectResourceAssetTracker *))(*(_QWORD *)v51 + 40))(v51, v50);
      }
      *(_QWORD *)(v1 + 784) = 0;
    }
    if (*(_QWORD *)(v1 + 776))
    {
      v52 = *(_QWORD *)(v1 + 648);
      re::StringID::invalid((re::StringID *)&v190);
      if ((v53 & 1) == 0
      {
        re::introspect<re::DRContextService>(void)::info = re::introspect_DRContextService(0);
      }
      v54 = re::introspect<re::DRContextService>(void)::info;
      re::StringID::StringID((re::StringID *)&v194, &v190);
      *(_QWORD *)&v195 = v54;
      re::StringID::StringID((re::StringID *)((char *)&v195 + 8), &v194);
      re::StringID::destroyString((re::StringID *)&v194);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v52 + 16, (uint64_t *)&v195);
      re::StringID::destroyString((re::StringID *)((char *)&v195 + 8));
      re::StringID::destroyString((re::StringID *)&v190);
      v55 = *(void **)(v1 + 776);
      *(_QWORD *)(v1 + 776) = 0;

    }
    v56 = *(re **)(v1 + 1128);
    if (v56)
      v56 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v56 + 144))(v56);
    v57 = *(std::__shared_weak_count **)(v1 + 1136);
    *(_QWORD *)(v1 + 1128) = 0;
    *(_QWORD *)(v1 + 1136) = 0;
    if (v57)
    {
      p_shared_owners = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(p_shared_owners);
      while (__stlxr(v59 - 1, p_shared_owners));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = *(void ***)(v1 + 832);
    if (v60)
    {
      v61 = re::globalAllocators(v56)[2];
      re::ResourceFetchManager::~ResourceFetchManager(v60);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, v60);
    }
    *(_QWORD *)(v1 + 832) = 0;
    if (*(_QWORD *)(v1 + 1056))
    {
      v62 = *(_QWORD *)(v1 + 648);
      re::StringID::invalid((re::StringID *)&v189);
      v63 = atomic_load((unsigned __int8 *)&qword_2540FB358);
      if ((v63 & 1) == 0 && __cxa_guard_acquire(&qword_2540FB358))
      {
        qword_2540FB350 = re::ecs2::introspect_CARESortingService(0);
        __cxa_guard_release(&qword_2540FB358);
      }
      v64 = qword_2540FB350;
      re::StringID::StringID((re::StringID *)&v194, &v189);
      *(_QWORD *)&v195 = v64;
      re::StringID::StringID((re::StringID *)((char *)&v195 + 8), &v194);
      re::StringID::destroyString((re::StringID *)&v194);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v62 + 16, (uint64_t *)&v195);
      re::StringID::destroyString((re::StringID *)((char *)&v195 + 8));
      re::StringID::destroyString((re::StringID *)&v189);
      v66 = *(void (****)(_QWORD))(v1 + 1056);
      if (v66)
      {
        v67 = re::globalAllocators(v65)[2];
        (**v66)(v66);
        (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v67 + 40))(v67, v66);
      }
      *(_QWORD *)(v1 + 1056) = 0;
    }
    if (*(_QWORD *)(v1 + 1064))
    {
      v68 = *(_QWORD *)(v1 + 648);
      re::StringID::invalid((re::StringID *)&v188);
      if ((v69 & 1) == 0
      {
        re::introspect<re::ecs2::RemoteEffectsService>(void)::info = re::ecs2::introspect_RemoteEffectsService(0);
      }
      v70 = re::introspect<re::ecs2::RemoteEffectsService>(void)::info;
      re::StringID::StringID((re::StringID *)&v194, &v188);
      *(_QWORD *)&v195 = v70;
      re::StringID::StringID((re::StringID *)((char *)&v195 + 8), &v194);
      re::StringID::destroyString((re::StringID *)&v194);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v68 + 16, (uint64_t *)&v195);
      re::StringID::destroyString((re::StringID *)((char *)&v195 + 8));
      re::StringID::destroyString((re::StringID *)&v188);
      v72 = *(_QWORD *)(v1 + 1064);
      if (v72)
      {
        v73 = re::globalAllocators(v71)[2];
        re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)(v72 + 128));
        re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)(v72 + 80));
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v72 + 40);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v72);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 40))(v73, v72);
      }
      *(_QWORD *)(v1 + 1064) = 0;
    }
    v74 = *(re **)(v1 + 944);
    if (v74)
    {
      v74 = (re *)(*(uint64_t (**)(re *))(*(_QWORD *)v74 + 24))(v74);
      v75 = *(void (****)(_QWORD))(v1 + 944);
      if (v75)
      {
        v76 = re::globalAllocators(v74)[2];
        (**v75)(v75);
        v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v76 + 40))(v76, v75);
      }
      *(_QWORD *)(v1 + 944) = 0;
    }
    v77 = *(_QWORD *)(v1 + 1144);
    if (v77)
    {

      *(_QWORD *)(v1 + 1144) = 0;
    }
    v78 = *(re::SharedClockManager **)(v1 + 1152);
    if (v78)
    {
      v79 = re::globalAllocators(v74)[2];
      re::SharedClockManager::~SharedClockManager(v78);
      v74 = (re *)(*(uint64_t (**)(uint64_t, re::SharedClockManager *))(*(_QWORD *)v79 + 40))(v79, v78);
      *(_QWORD *)(v1 + 1152) = 0;
    }
    v80 = *(void (****)(_QWORD))(v1 + 960);
    if (v80)
    {
      v81 = re::globalAllocators(v74)[2];
      (**v80)(v80);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v81 + 40))(v81, v80);
    }
    *(_QWORD *)(v1 + 960) = 0;
    if (*(_QWORD *)(v1 + 856))
    {
      v82 = *(_QWORD *)(v1 + 648);
      re::StringID::invalid((re::StringID *)&v187);
      if ((v83 & 1) == 0
      {
        re::introspect<re::NetworkSystem>(void)::info = re::introspect_NetworkSystem(0);
      }
      v84 = re::introspect<re::NetworkSystem>(void)::info;
      re::StringID::StringID((re::StringID *)&v194, &v187);
      *(_QWORD *)&v195 = v84;
      re::StringID::StringID((re::StringID *)((char *)&v195 + 8), &v194);
      re::StringID::destroyString((re::StringID *)&v194);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v82 + 16, (uint64_t *)&v195);
      re::StringID::destroyString((re::StringID *)((char *)&v195 + 8));
      re::StringID::destroyString((re::StringID *)&v187);
      v85 = *(re::NetworkSystem **)(v1 + 856);
      if (v85)
      {
        v86 = re::globalAllocators(v74)[2];
        re::NetworkSystem::~NetworkSystem(v85);
        v74 = (re *)(*(uint64_t (**)(uint64_t, re::NetworkSystem *))(*(_QWORD *)v86 + 40))(v86, v85);
      }
      *(_QWORD *)(v1 + 856) = 0;
    }
    if (*(_QWORD *)(v1 + 864))
    {
      v87 = *(_QWORD *)(v1 + 648);
      re::StringID::invalid((re::StringID *)&v186);
      if ((v88 & 1) == 0
      {
        re::introspect<re::VideoService>(void)::info = re::introspect_VideoService(0);
      }
      v89 = re::introspect<re::VideoService>(void)::info;
      re::StringID::StringID((re::StringID *)&v194, &v186);
      *(_QWORD *)&v195 = v89;
      re::StringID::StringID((re::StringID *)((char *)&v195 + 8), &v194);
      re::StringID::destroyString((re::StringID *)&v194);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v87 + 16, (uint64_t *)&v195);
      re::StringID::destroyString((re::StringID *)((char *)&v195 + 8));
      re::StringID::destroyString((re::StringID *)&v186);
      v90 = *(re::VideoManager **)(v1 + 864);
      if (v90)
      {
        v91 = re::globalAllocators(v74)[2];
        re::VideoManager::~VideoManager(v90);
        v74 = (re *)(*(uint64_t (**)(uint64_t, re::VideoManager *))(*(_QWORD *)v91 + 40))(v91, v90);
      }
      *(_QWORD *)(v1 + 864) = 0;
    }
    if (*(_QWORD *)(v1 + 872))
    {
      v92 = *(_QWORD *)(v1 + 648);
      re::StringID::invalid((re::StringID *)&v185);
      if ((v93 & 1) == 0
      {
        re::introspect<re::MaterialParametersService>(void)::info = re::introspect_MaterialParametersService(0);
      }
      v94 = re::introspect<re::MaterialParametersService>(void)::info;
      re::StringID::StringID((re::StringID *)&v194, &v185);
      *(_QWORD *)&v195 = v94;
      re::StringID::StringID((re::StringID *)((char *)&v195 + 8), &v194);
      re::StringID::destroyString((re::StringID *)&v194);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::remove(v92 + 16, (uint64_t *)&v195);
      re::StringID::destroyString((re::StringID *)((char *)&v195 + 8));
      re::StringID::destroyString((re::StringID *)&v185);
      v95 = *(re::MaterialParametersManager **)(v1 + 872);
      if (v95)
      {
        v96 = re::globalAllocators(v74)[2];
        re::MaterialParametersManager::~MaterialParametersManager(v95);
        v74 = (re *)(*(uint64_t (**)(uint64_t, re::MaterialParametersManager *))(*(_QWORD *)v96 + 40))(v96, v95);
      }
      *(_QWORD *)(v1 + 872) = 0;
    }
    v97 = *(void (****)(_QWORD))(v1 + 920);
    if (v97)
    {
      v98 = re::globalAllocators(v74)[2];
      (**v97)(v97);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v98 + 40))(v98, v97);
    }
    *(_QWORD *)(v1 + 920) = 0;
    v99 = *(_QWORD *)(v1 + 1376);
    if (v99)
    {

      *(_QWORD *)(v1 + 1376) = 0;
    }
    v100 = *(void (****)(_QWORD))(v1 + 912);
    if (v100)
    {
      v101 = re::globalAllocators(v74)[2];
      (**v100)(v100);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v101 + 40))(v101, v100);
    }
    *(_QWORD *)(v1 + 912) = 0;
    v102 = *(re::InputManager **)(v1 + 896);
    if (v102)
    {
      v103 = re::globalAllocators(v74)[2];
      re::InputManager::unsubscribe(v102, v104);
      v74 = (re *)(*(uint64_t (**)(uint64_t, re::InputManager *))(*(_QWORD *)v103 + 40))(v103, v102);
    }
    *(_QWORD *)(v1 + 896) = 0;
    v105 = *(re::BackgroundTaskManager **)(v1 + 672);
    if (v105)
    {
      v106 = re::globalAllocators(v74)[2];
      re::BackgroundTaskManager::~BackgroundTaskManager(v105);
      v74 = (re *)(*(uint64_t (**)(uint64_t, re::BackgroundTaskManager *))(*(_QWORD *)v106 + 40))(v106, v105);
    }
    *(_QWORD *)(v1 + 672) = 0;
    v107 = *(void (****)(_QWORD))(v1 + 968);
    if (v107)
    {
      v108 = re::globalAllocators(v74)[2];
      (**v107)(v107);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v108 + 40))(v108, v107);
      *(_QWORD *)(v1 + 968) = 0;
    }
    v109 = *(void (****)(_QWORD))(v1 + 984);
    if (v109)
    {
      v110 = re::globalAllocators(v74)[2];
      (**v109)(v109);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v110 + 40))(v110, v109);
      *(_QWORD *)(v1 + 984) = 0;
    }
    v111 = *(void (****)(_QWORD))(v1 + 992);
    if (v111)
    {
      v112 = re::globalAllocators(v74)[2];
      (**v111)(v111);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v112 + 40))(v112, v111);
      *(_QWORD *)(v1 + 992) = 0;
    }
    v113 = *(void (****)(_QWORD))(v1 + 1000);
    if (v113)
    {
      v114 = re::globalAllocators(v74)[2];
      (**v113)(v113);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v114 + 40))(v114, v113);
      *(_QWORD *)(v1 + 1000) = 0;
    }
    v115 = *(void (****)(_QWORD))(v1 + 1080);
    if (v115)
    {
      v116 = re::globalAllocators(v74)[2];
      (**v115)(v115);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v116 + 40))(v116, v115);
      *(_QWORD *)(v1 + 1080) = 0;
    }
    v117 = *(void (****)(_QWORD))(v1 + 1072);
    if (v117)
    {
      v118 = re::globalAllocators(v74)[2];
      (**v117)(v117);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v118 + 40))(v118, v117);
      *(_QWORD *)(v1 + 1072) = 0;
    }
    v119 = *(void (****)(_QWORD))(v1 + 1016);
    if (v119)
    {
      v120 = re::globalAllocators(v74)[2];
      (**v119)(v119);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v120 + 40))(v120, v119);
      *(_QWORD *)(v1 + 1016) = 0;
    }
    v121 = *(void (****)(_QWORD))(v1 + 1008);
    if (v121)
    {
      v122 = re::globalAllocators(v74)[2];
      (**v121)(v121);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v122 + 40))(v122, v121);
      *(_QWORD *)(v1 + 1008) = 0;
    }
    v123 = *(void (****)(_QWORD))(v1 + 1024);
    if (v123)
    {
      v124 = re::globalAllocators(v74)[2];
      (**v123)(v123);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v124 + 40))(v124, v123);
      *(_QWORD *)(v1 + 1024) = 0;
    }
    v125 = *(void (****)(_QWORD))(v1 + 1032);
    if (v125)
    {
      v126 = re::globalAllocators(v74)[2];
      (**v125)(v125);
      v74 = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v126 + 40))(v126, v125);
      *(_QWORD *)(v1 + 1032) = 0;
    }
    v127 = *(void (****)(_QWORD))(v1 + 1040);
    if (v127)
    {
      v128 = re::globalAllocators(v74)[2];
      (**v127)(v127);
      (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v128 + 40))(v128, v127);
      *(_QWORD *)(v1 + 1040) = 0;
    }
    v129 = *(re::ColorManager **)(v1 + 1088);
    if (v129)
    {
      v129 = (re::ColorManager *)re::ColorManager::deinit(v129);
      v130 = *(_QWORD *)(v1 + 1088);
      if (v130)
      {
        v131 = re::globalAllocators(v129);
        v129 = (re::ColorManager *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v131[2] + 40))(v131[2], v130);
      }
      *(_QWORD *)(v1 + 1088) = 0;
    }
    v132 = *(_QWORD *)(v1 + 1096);
    if (v132)
    {
      v133 = re::globalAllocators(v129)[2];
      v134 = *(_QWORD *)(v132 + 80);
      if (v134)
      {
        if (*(_QWORD *)(v132 + 112))
          (*(void (**)(uint64_t))(*(_QWORD *)v134 + 40))(v134);
        *(_QWORD *)(v132 + 112) = 0;
        *(_QWORD *)(v132 + 88) = 0;
        *(_QWORD *)(v132 + 96) = 0;
        *(_QWORD *)(v132 + 80) = 0;
        ++*(_DWORD *)(v132 + 104);
      }
      v135 = *(_QWORD *)(v132 + 40);
      if (v135)
      {
        if (*(_QWORD *)(v132 + 72))
          (*(void (**)(uint64_t))(*(_QWORD *)v135 + 40))(v135);
        *(_QWORD *)(v132 + 72) = 0;
        *(_QWORD *)(v132 + 48) = 0;
        *(_QWORD *)(v132 + 56) = 0;
        *(_QWORD *)(v132 + 40) = 0;
        ++*(_DWORD *)(v132 + 64);
      }

      v129 = (re::ColorManager *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v133 + 40))(v133, v132);
      *(_QWORD *)(v1 + 1096) = 0;
    }
    v136 = *(void (****)(_QWORD))(v1 + 976);
    if (v136)
    {
      v137 = re::globalAllocators(v129)[2];
      (**v136)(v136);
      v129 = (re::ColorManager *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v137 + 40))(v137, v136);
      *(_QWORD *)(v1 + 976) = 0;
    }
    v138 = *(void (****)(_QWORD))(v1 + 1048);
    if (v138)
    {
      v139 = re::globalAllocators(v129)[2];
      (**v138)(v138);
      (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v139 + 40))(v139, v138);
      *(_QWORD *)(v1 + 1048) = 0;
    }
    v140 = *(re::ImportGraphicsResources **)(v1 + 800);
    if (v140)
    {
      v141 = re::ImportGraphicsResources::deinit(v140);
      v142 = *(re::ImportGraphicsResources **)(v1 + 800);
      if (v142)
      {
        v143 = re::globalAllocators((re *)v141)[2];
        re::ImportGraphicsResources::~ImportGraphicsResources(v142);
        (*(void (**)(uint64_t, re::ImportGraphicsResources *))(*(_QWORD *)v143 + 40))(v143, v142);
      }
      *(_QWORD *)(v1 + 800) = 0;
    }
    v144 = *(re **)(v1 + 840);
    if (v144)
    {
      v144 = re::RenderManager::deinit(v144);
      v145 = *(re::RenderManager **)(v1 + 840);
      if (v145)
      {
        v146 = re::globalAllocators(v144)[2];
        re::RenderManager::~RenderManager(v145);
        v144 = (re *)(*(uint64_t (**)(uint64_t, re::RenderManager *))(*(_QWORD *)v146 + 40))(v146, v145);
      }
      *(_QWORD *)(v1 + 840) = 0;
    }
    v147 = *(_QWORD *)(v1 + 952);
    if (v147)
    {
      v148 = re::globalAllocators(v144)[2];
      re::ProfilerManager::~ProfilerManager(v147);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v148 + 40))(v148, v147);
    }
    *(_QWORD *)(v1 + 952) = 0;
    *(_QWORD *)(v1 + 936) = 0;
    re::FrameManager::deinit(*(re::FrameManager **)(v1 + 848));
    v150 = *(_QWORD *)(v1 + 848);
    if (v150)
    {

      *(_QWORD *)(v1 + 848) = 0;
    }
    v151 = *(_QWORD **)(v1 + 888);
    if (v151)
    {
      v152 = re::globalAllocators(v149)[2];
      re::ecs2::PhysicsSimulationManager::deinit(v151);
      re::ecs2::PhysicsSimulationTracking::~PhysicsSimulationTracking((re::ecs2::PhysicsSimulationTracking *)(v151 + 2));
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v152 + 40))(v152, v151);
    }
    *(_QWORD *)(v1 + 888) = 0;
    v153 = *(CFTypeRef **)(v1 + 728);
    if (v153)
    {
      re::AnimationManager::deinit(v153);
      v153 = (CFTypeRef *)re::internal::destroyPersistent<re::AnimationManager>((re *)"deinit", 1522, *(re::AnimationManager **)(v1 + 728));
      *(_QWORD *)(v1 + 728) = 0;
    }
    v154 = *(void (****)(_QWORD))(v1 + 736);
    if (v154)
    {
      v155 = re::globalAllocators((re *)v153)[2];
      (**v154)(v154);
      v153 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v155 + 40))(v155, v154);
      *(_QWORD *)(v1 + 736) = 0;
    }
    v156 = *(void (****)(_QWORD))(v1 + 696);
    if (v156)
    {
      v157 = re::globalAllocators((re *)v153)[2];
      (**v156)(v156);
      v153 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v157 + 40))(v157, v156);
      *(_QWORD *)(v1 + 696) = 0;
    }
    v158 = *(void (****)(_QWORD))(v1 + 704);
    if (v158)
    {
      v159 = re::globalAllocators((re *)v153)[2];
      (**v158)(v158);
      v153 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v159 + 40))(v159, v158);
      *(_QWORD *)(v1 + 704) = 0;
    }
    v160 = *(void (****)(_QWORD))(v1 + 712);
    if (v160)
    {
      v161 = re::globalAllocators((re *)v153)[2];
      (**v160)(v160);
      v153 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v161 + 40))(v161, v160);
      *(_QWORD *)(v1 + 712) = 0;
    }
    v162 = *(void (****)(_QWORD))(v1 + 720);
    if (v162)
    {
      v163 = re::globalAllocators((re *)v153)[2];
      (**v162)(v162);
      v153 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v163 + 40))(v163, v162);
      *(_QWORD *)(v1 + 720) = 0;
    }
    v164 = *(void (****)(_QWORD))(v1 + 1104);
    if (v164)
    {
      v165 = re::globalAllocators((re *)v153)[2];
      (**v164)(v164);
      (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v165 + 40))(v165, v164);
      *(_QWORD *)(v1 + 1104) = 0;
    }
    *(_QWORD *)(v1 + 656) = 0;
    v166 = *(re::EntitlementManager **)(v1 + 1112);
    if (v166)
    {
      re::EntitlementManager::deinit(v166);
      v167 = *(re::EntitlementManager **)(v1 + 1112);
      if (v167)
      {
        v168 = re::globalAllocators(v166)[2];
        re::EntitlementManager::~EntitlementManager(v167);
        v166 = (re::EntitlementManager *)(*(uint64_t (**)(uint64_t, re::EntitlementManager *))(*(_QWORD *)v168 + 40))(v168, v167);
      }
      *(_QWORD *)(v1 + 1112) = 0;
    }
    v169 = *(_QWORD *)(v1 + 648);
    if (v169)
    {
      v170 = re::globalAllocators(v166)[2];
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::deinit((uint64_t *)(v169 + 16));
      v171 = re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::deinit((uint64_t *)(v169 + 16));
      v166 = (re::EntitlementManager *)(*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)v170 + 40))(v170, v169, v171);
    }
    *(_QWORD *)(v1 + 648) = 0;
    v172 = *(_QWORD *)(v1 + 680);
    if (v172)
    {
      v173 = re::globalAllocators(v166)[2];
      v174 = *(_QWORD *)(v172 + 808);
      if (v174)
      {
        if (*(_QWORD *)(v172 + 816))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v174 + 40))(v174, *(_QWORD *)(v172 + 824));
          *(_QWORD *)(v172 + 816) = 0;
          *(_QWORD *)(v172 + 824) = 0;
        }
        *(_QWORD *)(v172 + 808) = 0;
      }
      re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit((_QWORD *)(v172 + 784));
      re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit((_QWORD *)(v172 + 760));
      v175 = *(_QWORD *)(v172 + 704);
      if (v175)
      {
        if (*(_QWORD *)(v172 + 736))
          (*(void (**)(uint64_t))(*(_QWORD *)v175 + 40))(v175);
        *(_QWORD *)(v172 + 736) = 0;
        *(_QWORD *)(v172 + 712) = 0;
        *(_QWORD *)(v172 + 720) = 0;
        *(_QWORD *)(v172 + 704) = 0;
        ++*(_DWORD *)(v172 + 728);
      }
      re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit((_QWORD *)(v172 + 680));
      v176 = *(_QWORD *)(v172 + 656);
      if (v176)
      {
        if (*(_QWORD *)(v172 + 664))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v176 + 40))(v176, *(_QWORD *)(v172 + 672));
          *(_QWORD *)(v172 + 664) = 0;
          *(_QWORD *)(v172 + 672) = 0;
        }
        *(_QWORD *)(v172 + 656) = 0;
      }
      re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit((_QWORD *)(v172 + 632));
      v177 = *(_QWORD *)(v172 + 608);
      if (v177)
      {
        if (*(_QWORD *)(v172 + 616))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v177 + 40))(v177, *(_QWORD *)(v172 + 624));
          *(_QWORD *)(v172 + 616) = 0;
          *(_QWORD *)(v172 + 624) = 0;
        }
        *(_QWORD *)(v172 + 608) = 0;
      }
      v178 = *(_QWORD *)(v172 + 584);
      if (v178)
      {
        if (*(_QWORD *)(v172 + 592))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v178 + 40))(v178, *(_QWORD *)(v172 + 600));
          *(_QWORD *)(v172 + 592) = 0;
          *(_QWORD *)(v172 + 600) = 0;
        }
        *(_QWORD *)(v172 + 584) = 0;
      }
      v179 = *(_QWORD *)(v172 + 560);
      if (v179)
      {
        if (*(_QWORD *)(v172 + 568))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v179 + 40))(v179, *(_QWORD *)(v172 + 576));
          *(_QWORD *)(v172 + 568) = 0;
          *(_QWORD *)(v172 + 576) = 0;
        }
        *(_QWORD *)(v172 + 560) = 0;
      }
      v180 = *(_QWORD *)(v172 + 536);
      if (v180)
      {
        if (*(_QWORD *)(v172 + 544))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v180 + 40))(v180, *(_QWORD *)(v172 + 552));
          *(_QWORD *)(v172 + 544) = 0;
          *(_QWORD *)(v172 + 552) = 0;
        }
        *(_QWORD *)(v172 + 536) = 0;
      }
      re::FixedArray<re::Function<void ()(float)>>::deinit((_QWORD *)(v172 + 512));
      v181 = *(_QWORD *)(v172 + 488);
      if (v181)
      {
        if (*(_QWORD *)(v172 + 496))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v181 + 40))(v181, *(_QWORD *)(v172 + 504));
          *(_QWORD *)(v172 + 496) = 0;
          *(_QWORD *)(v172 + 504) = 0;
        }
        *(_QWORD *)(v172 + 488) = 0;
      }
      v182 = *(_QWORD *)(v172 + 464);
      if (v182)
      {
        if (*(_QWORD *)(v172 + 472))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v182 + 40))(v182, *(_QWORD *)(v172 + 480));
          *(_QWORD *)(v172 + 472) = 0;
          *(_QWORD *)(v172 + 480) = 0;
        }
        *(_QWORD *)(v172 + 464) = 0;
      }
      v183 = *(_QWORD *)(v172 + 440);
      if (v183)
      {
        if (*(_QWORD *)(v172 + 448))
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v183 + 40))(v183, *(_QWORD *)(v172 + 456));
          *(_QWORD *)(v172 + 448) = 0;
          *(_QWORD *)(v172 + 456) = 0;
        }
        *(_QWORD *)(v172 + 440) = 0;
      }
      re::FixedArray<re::DynamicBitset<unsigned long long,256ul>>::deinit((_QWORD *)(v172 + 416));
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v172 + 344);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v172 + 272);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v172 + 200);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v172 + 128);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v172 + 56);
      re::FixedArray<re::StringID>::deinit((_QWORD *)(v172 + 32));
      re::FixedArray<re::StringID>::deinit((_QWORD *)(v172 + 8));
      v166 = (re::EntitlementManager *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v173 + 40))(v173, v172);
    }
    *(_QWORD *)(v1 + 680) = 0;
    *(_QWORD *)&v184 = -1;
    *((_QWORD *)&v184 + 1) = -1;
    *(_OWORD *)(v1 + 32) = v184;
    *(_OWORD *)(v1 + 48) = v184;
    *(_OWORD *)(v1 + 64) = v184;
    *(_OWORD *)(v1 + 80) = v184;
    *(_OWORD *)(v1 + 96) = v184;
    *(_OWORD *)(v1 + 112) = v184;
    *(_OWORD *)(v1 + 128) = v184;
    *(_OWORD *)(v1 + 144) = v184;
    *(_OWORD *)(v1 + 160) = v184;
    *(_OWORD *)(v1 + 176) = v184;
    *(_OWORD *)(v1 + 192) = v184;
    *(_OWORD *)(v1 + 208) = v184;
    *(_OWORD *)(v1 + 224) = v184;
    *(_OWORD *)(v1 + 240) = v184;
    *(_OWORD *)(v1 + 256) = v184;
    *(_OWORD *)(v1 + 272) = v184;
    *(_OWORD *)(v1 + 288) = v184;
    *(_OWORD *)(v1 + 304) = v184;
    *(_BYTE *)(v1 + 24) = 0;
    RESharedEngineContextRelease(v166);
    if (re::Engine::s_sharedEngine == v1)
      re::Engine::s_sharedEngine = 0;
    this = re::internal::enableSignposts(0, 0);
    if ((_DWORD)this)
      return kdebug_trace();
  }
  return this;
}

uint64_t re::Engine::init(re::Engine *this, const re::EngineConfiguration *a2)
{
  uint64_t v4;
  _anonymous_namespace_::SharedEngineContext *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  id *v9;
  __int128 v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned __int8 v16;
  __objc2_class_ro **p_info;
  uint64_t v18;
  unsigned __int8 v19;
  re *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 v25;
  void *v26;
  uint64_t v27;
  unsigned __int8 v28;
  re *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  re *v34;
  uint64_t *v35;
  uint64_t **v36;
  _anonymous_namespace_ *v37;
  re *v38;
  uint64_t *v39;
  re::NetworkOPACKSerializer *v40;
  uint64_t v41;
  unsigned __int8 v42;
  re *v43;
  uint64_t *v44;
  re::NetworkOPACKDeserializer *v45;
  uint64_t v46;
  unsigned __int8 v47;
  re *v48;
  uint64_t *v49;
  re::NetworkCompatSerializer *v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  re *v54;
  uint64_t *v55;
  re::NetworkCompatDeserializer *v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  re *v63;
  int v64;
  uint64_t *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  uint64_t *v71;
  re::AnimationManager *v72;
  re::AnimationManager *v73;
  uint64_t v74;
  void *v75;
  unsigned __int8 v76;
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  unsigned __int8 v85;
  uint64_t *v86;
  re::FrameManager *v87;
  re::FrameManager *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  unsigned __int8 v92;
  unsigned int v93;
  unint64_t v94;
  re *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  void *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unsigned __int8 v104;
  uint64_t v105;
  unint64_t v106;
  re::FrameProfiler *v107;
  uint64_t *v108;
  unint64_t v109;
  uint8x8_t v110;
  _QWORD *v111;
  _QWORD *i;
  unint64_t v113;
  _QWORD *v114;
  float v115;
  float v116;
  _BOOL8 v117;
  unint64_t v118;
  unint64_t v119;
  size_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  re::ProfilerFlameChartProcessor *v127;
  uint64_t *v128;
  unint64_t v129;
  uint8x8_t v130;
  _QWORD *v131;
  _QWORD *j;
  unint64_t v133;
  _QWORD *v134;
  float v135;
  float v136;
  _BOOL8 v137;
  unint64_t v138;
  unint64_t v139;
  size_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  re::ProfilerMiniHUDProcessor *v147;
  uint64_t *v148;
  unint64_t v149;
  uint8x8_t v150;
  _QWORD *v151;
  _QWORD *k;
  unint64_t v153;
  _QWORD *v154;
  float v155;
  float v156;
  _BOOL8 v157;
  unint64_t v158;
  unint64_t v159;
  size_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  re::ProfilerDetailedHUDProcessor *v166;
  uint64_t *v167;
  unint64_t v168;
  uint8x8_t v169;
  _QWORD *v170;
  _QWORD *m;
  unint64_t v172;
  _QWORD *v173;
  float v174;
  float v175;
  _BOOL8 v176;
  unint64_t v177;
  unint64_t v178;
  size_t v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  const char *v185;
  const char *v186;
  const char *v187;
  const char *v188;
  const char *v189;
  const char *v190;
  const char *v191;
  const char *v192;
  char *v193;
  unsigned __int32 v194;
  float32x4_t *v195;
  uint32x4_t v196;
  unsigned __int32 v197;
  int8x16_t v198;
  uint32x4_t v199;
  float32x4_t *v200;
  char *v201;
  unsigned __int32 v202;
  uint32x4_t v203;
  unsigned __int32 v204;
  int8x16_t v205;
  uint32x4_t v206;
  uint64_t *v207;
  StringID *v208;
  char v209;
  int v210;
  uint64_t v211;
  void *v212;
  unsigned __int8 v213;
  re *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  unsigned __int8 v219;
  re *v220;
  uint64_t *v221;
  _OWORD *v222;
  uint64_t v223;
  unsigned __int8 v224;
  re *v225;
  unsigned __int8 v226;
  _BYTE *v227;
  uint64_t *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  void *v232;
  unsigned __int8 v233;
  uint64_t v234;
  const char *v235;
  re *v236;
  uint64_t *v237;
  re::RenderManager *v238;
  re::RenderManager *v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  unsigned __int8 v243;
  re *v244;
  _QWORD *v245;
  char *v246;
  uint64_t v247;
  re *v248;
  uint64_t *v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  id *v253;
  int v254;
  uint64_t *v255;
  re::ShadowManager *v256;
  uint64_t v257;
  uint64_t v258;
  unsigned __int8 v259;
  uint64_t *v260;
  _QWORD *v261;
  uint64_t v262;
  unsigned __int8 v263;
  uint64_t *v264;
  char *v265;
  uint64_t v266;
  unsigned __int8 v267;
  int v268;
  uint64_t *v269;
  _QWORD *v270;
  uint64_t v271;
  unsigned __int8 v272;
  re *v273;
  uint64_t *v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  unsigned __int8 v278;
  re *v279;
  uint64_t *v280;
  char *v281;
  uint64_t v282;
  unsigned __int8 v283;
  re *v284;
  uint64_t *v285;
  uint64_t v286;
  _anonymous_namespace_ *v287;
  _anonymous_namespace_ *v288;
  _anonymous_namespace_ *v289;
  uint64_t v290;
  unsigned __int8 v291;
  re *v292;
  uint64_t *v293;
  _QWORD *v294;
  uint64_t v295;
  unsigned __int8 v296;
  re *v297;
  uint64_t *v298;
  _QWORD *v299;
  uint64_t v300;
  unsigned __int8 v301;
  re *v302;
  uint64_t *v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  unsigned __int8 v307;
  re *v308;
  uint64_t *v309;
  _QWORD *v310;
  uint64_t v311;
  unsigned __int8 v312;
  re *v313;
  uint64_t *v314;
  char *v315;
  uint64_t v316;
  unsigned __int8 v317;
  re *v318;
  uint64_t *v319;
  char *v320;
  re::EntitlementManager *v321;
  uint64_t v322;
  unsigned __int8 v323;
  uint64_t *v324;
  re *v325;
  uint64_t v326;
  unsigned __int8 v327;
  uint64_t *v328;
  re::BackgroundTaskManager *v329;
  uint64_t v330;
  unsigned __int8 v331;
  uint64_t v332;
  uint64_t *v333;
  re::NetworkSystem *v334;
  uint64_t v335;
  void *v336;
  unsigned __int8 v337;
  unsigned __int8 v338;
  unsigned __int8 v339;
  unsigned __int8 v340;
  int v341;
  uint64_t *v342;
  re::TraceServer *v343;
  uint64_t v344;
  unsigned __int8 v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  void *v349;
  unsigned __int8 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  re *v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  uint64_t *v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  unsigned __int8 v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  void *v368;
  unsigned __int8 v369;
  re *v370;
  uint64_t *v371;
  _OWORD *v372;
  uint64_t v373;
  unsigned __int8 v374;
  uint64_t *v375;
  re *v376;
  BOOL v377;
  char v378;
  uint64_t *v379;
  uint64_t v380;
  char v381;
  uint64_t v382;
  void *v383;
  unsigned __int8 v384;
  re *v385;
  uint64_t *v386;
  re::AssetManager *v387;
  uint64_t v388;
  id v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  const char *v393;
  _BYTE *v394;
  uint64_t v395;
  unsigned __int8 v396;
  uint64_t v397;
  uint64_t v398;
  void *v399;
  unsigned __int8 v400;
  re *LocalPeerId;
  uint64_t *v402;
  uint64_t v403;
  uint64_t v404;
  void *v405;
  unsigned __int8 v406;
  void *v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  void *v412;
  uint64_t v413;
  uint64_t *v414;
  re::ecs2::DrawableQueueSyncSystem *v415;
  void *v416;
  id v417;
  id v418;
  uint64_t v419;
  void *v420;
  uint64_t v421;
  void *v422;
  unsigned __int8 v423;
  re *Mode;
  uint64_t v425;
  id v426;
  id v427;
  id v428;
  uint64_t *v429;
  void *v430;
  uint64_t v431;
  unsigned __int8 v432;
  _QWORD *v433;
  re *v434;
  std::__shared_weak_count *v435;
  unint64_t *p_shared_owners;
  unint64_t v437;
  NSObject *v438;
  const char *v439;
  _QWORD *v440;
  re *v441;
  std::__shared_weak_count *v442;
  unint64_t *v443;
  unint64_t v444;
  uint64_t v445;
  id v446;
  uint64_t v447;
  void *v448;
  unsigned __int8 v449;
  uint64_t *v450;
  uint64_t v451;
  uint64_t v452;
  void *v453;
  unsigned __int8 v454;
  uint64_t *v455;
  char *v456;
  uint64_t v457;
  unsigned __int8 v458;
  unsigned int v459;
  uint64_t *v460;
  char *v461;
  uint64_t v462;
  unsigned __int8 v463;
  uint64_t *v464;
  re::SceneUnderstandingManager *v465;
  double v466;
  uint64_t v467;
  uint64_t v468;
  void *v469;
  unsigned __int8 v470;
  re *v471;
  uint64_t *v472;
  char *v473;
  uint64_t v474;
  uint64_t v475;
  unsigned __int8 v476;
  re *v477;
  uint64_t *v478;
  void *v479;
  uint64_t v480;
  unsigned __int8 v481;
  int v482;
  re *v483;
  uint64_t (*v484)(void);
  re::ManualClock *v485;
  id *v486;
  re *v487;
  double v488;
  float v489;
  NSObject *v490;
  _BOOL4 v491;
  uint64_t v492;
  void *v493;
  unsigned __int8 v494;
  re *v495;
  uint64_t *v496;
  re::VariableStepTimer *v497;
  re::VariableStepTimer *v498;
  _anonymous_namespace_ *v499;
  uint64_t v500;
  void *v501;
  unsigned __int8 v502;
  re *v503;
  uint64_t v504;
  unint64_t v505;
  id v506;
  uint64_t v507;
  unsigned __int8 v508;
  int v509;
  uint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  void *v515;
  unsigned __int8 v516;
  uint64_t v517;
  uint64_t *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unsigned __int8 v523;
  uint64_t v524;
  unint64_t v525;
  _QWORD *v526;
  uint64_t *v527;
  unint64_t v528;
  uint8x8_t v529;
  _QWORD *v530;
  _QWORD *n;
  unint64_t v532;
  _QWORD *v533;
  float v534;
  float v535;
  _BOOL8 v536;
  unint64_t v537;
  unint64_t v538;
  size_t v539;
  uint64_t v540;
  _QWORD *v541;
  uint64_t v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t isStatisticCollectionEnabled;
  _QWORD *v546;
  uint64_t v547;
  _BYTE *v548;
  char v549;
  char v550;
  char v551;
  NSObject *v552;
  NSObject *v553;
  NSObject *v554;
  NSObject *v555;
  uint64_t v556;
  uint64_t v557;
  os_unfair_lock_s *v558;
  _QWORD *v559;
  uint64_t v560;
  _anonymous_namespace_ *v561;
  _anonymous_namespace_ *v562;
  dispatch_block_t v563;
  void *v564;
  const char *v565;
  re::ecs2::ComponentTypeRegistry *v566;
  char *v567;
  uint64_t v568;
  const StringID *v569;
  uint64_t v570;
  __CFString *v571;
  void *v572;
  __CFString *v573;
  void *v574;
  void *v575;
  re *v576;
  NSObject *v577;
  re *v578;
  NSObject *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t result;
  __int128 v584;
  re::dispatch::Queue *v585[2];
  id *v586;
  _BYTE *v587;
  _QWORD block[5];
  unint64_t v589;
  id v590;
  _QWORD v591[4];
  id v592;
  id v593;
  id v594[6];
  re::ecs2::DrawableQueueSyncSystem *v595;
  char v596[4];
  int v597;
  char v598[8];
  uint64_t v599;
  char v600;
  _BYTE v601[23];
  StringID v602;
  char v603;
  _BYTE v604[23];
  char v605[4];
  int v606;
  char v607[4];
  int v608;
  char v609[4];
  int v610;
  char v611[4];
  int v612;
  char v613[4];
  int v614;
  char v615[4];
  int v616;
  StringID __str;
  StringID __str_16;
  StringID v619;
  __int128 v620;
  char v621;
  BOOL v622;
  char v623;
  char v624;
  char v625;
  _QWORD v626[3];
  uint64_t v627;
  _QWORD *v628;
  _QWORD v629[3];
  uint64_t v630;
  re *v631;
  uint8_t buf[4];
  _BYTE v633[18];
  __int16 v634;
  uint64_t v635;
  uint64_t v636;

  v636 = *MEMORY[0x24BDAC8D0];
  v4 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v4)
    v4 = kdebug_trace();
  v5 = (_anonymous_namespace_::SharedEngineContext *)*((unsigned int *)a2 + 15);
  v6 = *(_QWORD *)a2;
  *((_DWORD *)this + 106) = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 52) = v6;
  v586 = (id *)((char *)a2 + 16);
  re::ObjCObject::operator=((id *)this + 54, (id *)a2 + 2);
  re::DynamicString::operator=((re::Engine *)((char *)this + 440), (const re::EngineConfiguration *)((char *)a2 + 24));
  *((_QWORD *)this + 59) = *((_QWORD *)a2 + 7);
  re::ObjCObject::operator=((id *)this + 60, (id *)a2 + 8);
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)this + 488, (uint64_t)a2 + 72);
  v8 = *((_OWORD *)a2 + 7);
  v7 = *((_OWORD *)a2 + 8);
  *(_OWORD *)((char *)this + 556) = *(_OWORD *)((char *)a2 + 140);
  *((_OWORD *)this + 33) = v8;
  *((_OWORD *)this + 34) = v7;
  *((_OWORD *)this + 36) = *((_OWORD *)a2 + 10);
  v9 = re::ObjCObject::operator=((id *)this + 74, (id *)a2 + 22);
  v10 = *(_OWORD *)((char *)a2 + 184);
  v11 = *(_OWORD *)((char *)a2 + 200);
  *((_BYTE *)this + 632) = *((_BYTE *)a2 + 216);
  *(_OWORD *)((char *)this + 616) = v11;
  *(_OWORD *)((char *)this + 600) = v10;
  *((_BYTE *)this + 24) = 1;
  v12 = re::globalAllocators((re *)v9);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 64, 8);
  *(_OWORD *)(v13 + 16) = 0u;
  v14 = v13 + 16;
  *(_QWORD *)v13 = &off_24ED88E68;
  *(_QWORD *)(v13 + 8) = 0;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_DWORD *)(v13 + 48) = 0;
  *(_QWORD *)(v13 + 52) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 81) = v13;
  re::StringID::invalid((re::StringID *)&v602);
  p_info = VideoSpillMapMetalSession.info;
  if ((v16 & 1) == 0)
    goto LABEL_521;
  while (1)
  {
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)p_info[511], &v602, (void *)v13);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v14, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)&v602);
    v18 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)&v602);
    if ((v19 & 1) == 0
    {
      re::introspect<re::Engine>(void)::info = re::internal::getOrCreateInfo((re::internal *)"Engine", (uint64_t (*)(re::internal *))re::allocInfo_Engine, (re::IntrospectionBase *(*)(void))re::initInfo_Engine, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Engine>, 0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::Engine>(void)::info, &v602, this);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v18 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)&v602);
    v21 = re::globalAllocators(v20);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[2] + 32))(v21[2], 216, 8);
    *(_QWORD *)v22 = &off_24ED2BD30;
    *(_BYTE *)(v22 + 8) = 0;
    *(_OWORD *)(v22 + 16) = 0u;
    *(_OWORD *)(v22 + 32) = 0u;
    *(_DWORD *)(v22 + 48) = 0;
    *(_QWORD *)(v22 + 52) = 0x7FFFFFFFLL;
    *(_OWORD *)(v22 + 64) = 0u;
    *(_OWORD *)(v22 + 80) = 0u;
    *(_DWORD *)(v22 + 96) = 0;
    *(_QWORD *)(v22 + 100) = 0x7FFFFFFFLL;
    *(_DWORD *)(v22 + 144) = 0;
    *(_OWORD *)(v22 + 112) = 0u;
    *(_OWORD *)(v22 + 128) = 0u;
    *(_QWORD *)(v22 + 148) = 0x7FFFFFFFLL;
    *(_OWORD *)(v22 + 160) = 0u;
    *(_OWORD *)(v22 + 176) = 0u;
    *(_DWORD *)(v22 + 192) = 0;
    *(_QWORD *)(v22 + 196) = 0x7FFFFFFFLL;
    *(_QWORD *)(v22 + 208) = 0;
    *((_QWORD *)this + 139) = v22;
    *(_QWORD *)&__str.var0 = *((_QWORD *)this + 81);
    re::EntitlementManager::init(v22, &__str);
    v23 = *((_QWORD *)this + 81);
    v24 = (void *)*((_QWORD *)this + 139);
    re::StringID::invalid((re::StringID *)&v602);
    if ((v25 & 1) == 0
    {
      re::introspect<re::EntitlementService>(void)::info = re::introspect_EntitlementService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::EntitlementService>(void)::info, &v602, v24);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v23 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)&v602);
    v26 = (void *)g_jobService;
    *((_QWORD *)this + 82) = g_jobService;
    v27 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)&v602);
    if ((v28 & 1) == 0
    {
      re::introspect<re::JobService>(void)::info = re::introspect_JobService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::JobService>(void)::info, &v602, v26);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v27 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)&v602);
    v30 = re::globalAllocators(v29);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30[2] + 32))(v30[2], 200, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v31, 0);
    *(_QWORD *)(v31 + 16) = v15;
    *(_QWORD *)v31 = &off_24ED420D0;
    *(_OWORD *)(v31 + 24) = 0u;
    *(_OWORD *)(v31 + 40) = 0u;
    *(_OWORD *)(v31 + 56) = 0u;
    *(_OWORD *)(v31 + 72) = 0u;
    *(_OWORD *)(v31 + 88) = 0u;
    *(_OWORD *)(v31 + 104) = 0u;
    *(_OWORD *)(v31 + 120) = 0u;
    *(_DWORD *)(v31 + 136) = 0;
    *(_OWORD *)(v31 + 144) = 0u;
    *(_OWORD *)(v31 + 160) = 0u;
    *(_OWORD *)(v31 + 172) = 0u;
    *(_QWORD *)(v31 + 188) = 0x7FFFFFFFLL;
    v32 = *((_QWORD *)this + 172);
    *((_QWORD *)this + 172) = v31;
    if (v32)
    {

      v31 = *((_QWORD *)this + 172);
    }
    v33 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)&__str);
    re::ServiceRegistry::add<re::EventBus>(v33, (void *)v31, &__str);
    re::StringID::destroyString((re::StringID *)&__str);
    v35 = re::globalAllocators(v34);
    v36 = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35[2] + 32))(v35[2], 864, 8);
    bzero(v36, 0x350uLL);
    *((_DWORD *)v36 + 18) = 1;
    v36[10] = 0;
    v36[11] = 0;
    v36[16] = 0;
    v36[17] = 0;
    v36[15] = 0;
    *((_DWORD *)v36 + 36) = 1;
    v36[19] = 0;
    v36[20] = 0;
    v36[25] = 0;
    v36[26] = 0;
    v36[24] = 0;
    *((_DWORD *)v36 + 54) = 1;
    v36[28] = 0;
    v36[29] = 0;
    v36[33] = 0;
    v36[34] = 0;
    v36[35] = 0;
    *((_DWORD *)v36 + 72) = 1;
    v36[37] = 0;
    v36[38] = 0;
    v36[43] = 0;
    v36[44] = 0;
    v36[42] = 0;
    *((_DWORD *)v36 + 90) = 1;
    v36[46] = 0;
    v36[47] = 0;
    *(_OWORD *)(v36 + 51) = 0u;
    *(_OWORD *)(v36 + 53) = 0u;
    *(_OWORD *)(v36 + 55) = 0u;
    *(_OWORD *)(v36 + 57) = 0u;
    *(_OWORD *)(v36 + 59) = 0u;
    *(_OWORD *)(v36 + 61) = 0u;
    *(_OWORD *)(v36 + 63) = 0u;
    *(_OWORD *)(v36 + 65) = 0u;
    *(_OWORD *)(v36 + 67) = 0u;
    *(_OWORD *)(v36 + 69) = 0u;
    *(_OWORD *)(v36 + 71) = 0u;
    *(_OWORD *)(v36 + 73) = 0u;
    *(_OWORD *)(v36 + 75) = 0u;
    *(_OWORD *)(v36 + 77) = 0u;
    *(_OWORD *)(v36 + 79) = 0u;
    *(_OWORD *)(v36 + 81) = 0u;
    *(_OWORD *)(v36 + 83) = 0u;
    *(_OWORD *)(v36 + 85) = 0u;
    *(_OWORD *)(v36 + 87) = 0u;
    *(_OWORD *)(v36 + 89) = 0u;
    *((_DWORD *)v36 + 182) = 0;
    v36[93] = 0;
    v36[92] = 0;
    v36[94] = (uint64_t *)0x7F7FFFFF00000000;
    *(_OWORD *)(v36 + 95) = 0u;
    *(_OWORD *)(v36 + 97) = 0u;
    *(_OWORD *)(v36 + 99) = 0u;
    *(_OWORD *)(v36 + 101) = 0u;
    *(_OWORD *)(v36 + 103) = 0u;
    *(uint64_t **)((char *)v36 + 837) = 0;
    v36[106] = (uint64_t *)-1;
    v36[107] = (uint64_t *)-1;
    *((_QWORD *)this + 85) = v36;
    *v36 = v15;
    v39 = re::globalAllocators(v38);
    v40 = (re::NetworkOPACKSerializer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[2] + 32))(v39[2], 480, 8);
    *((_QWORD *)this + 87) = re::NetworkOPACKSerializer::NetworkOPACKSerializer(v40);
    v41 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)&v602);
    if ((v42 & 1) == 0
    {
      re::introspect<re::NetworkOPACKSerializer>(void)::info = re::introspect_NetworkOPACKSerializer(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::NetworkOPACKSerializer>(void)::info, &v602, v40);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v41 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)&v602);
    v44 = re::globalAllocators(v43);
    v45 = (re::NetworkOPACKDeserializer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v44[2] + 32))(v44[2], 480, 8);
    *((_QWORD *)this + 88) = re::NetworkOPACKDeserializer::NetworkOPACKDeserializer(v45);
    v46 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)&v602);
    if ((v47 & 1) == 0
    {
      re::introspect<re::NetworkOPACKDeserializer>(void)::info = re::introspect_NetworkOPACKDeserializer(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::NetworkOPACKDeserializer>(void)::info, &v602, v45);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v46 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)&v602);
    v49 = re::globalAllocators(v48);
    v50 = (re::NetworkCompatSerializer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49[2] + 32))(v49[2], 464, 8);
    *((_QWORD *)this + 89) = re::NetworkCompatSerializer::NetworkCompatSerializer(v50);
    v51 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)&v602);
    v53 = (uint64_t)VideoSpillMapMetalSession.info;
    if ((v52 & 1) == 0
    {
      re::introspect<re::NetworkCompatSerializer>(void)::info = re::introspect_NetworkCompatSerializer(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::NetworkCompatSerializer>(void)::info, &v602, v50);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v51 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)&v602);
    v55 = re::globalAllocators(v54);
    v56 = (re::NetworkCompatDeserializer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55[2]
                                                                                                + 32))(v55[2], 464, 8);
    *((_QWORD *)this + 90) = re::NetworkCompatDeserializer::NetworkCompatDeserializer(v56);
    v57 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)&v602);
    if ((v58 & 1) == 0
    {
      re::introspect<re::NetworkCompatDeserializer>(void)::info = re::introspect_NetworkCompatDeserializer(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::NetworkCompatDeserializer>(void)::info, &v602, v56);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v57 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)&v602);
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&__str);
    v59 = *((_QWORD *)this + 87);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v59 + 224);
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFuncs((_QWORD *)v59);
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 32))(v59);
    *(_DWORD *)(v59 + 216) = *(_DWORD *)(*(_QWORD *)(v59 + 208) + 24);
    v60 = *((_QWORD *)this + 88);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v60 + 224);
    re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFuncs((_QWORD *)v60);
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
    *(_DWORD *)(v60 + 216) = *(_DWORD *)(*(_QWORD *)(v60 + 208) + 24);
    v61 = *((_QWORD *)this + 89);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v61 + 208);
    re::Serializer<re::EncoderBinary<re::DynamicArrayBufferedOutputStream>>::registerSerializeFuncs((_QWORD *)v61);
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 32))(v61);
    *(_DWORD *)(v61 + 200) = *(_DWORD *)(*(_QWORD *)(v61 + 192) + 24);
    v62 = *((_QWORD *)this + 90);
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(v62 + 208);
    re::Serializer<re::EncoderBinary<re::FixedArrayInputStream>>::registerSerializeFuncs((_QWORD *)v62);
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 32))(v62);
    *(_DWORD *)(v62 + 200) = *(_DWORD *)(*(_QWORD *)(v62 + 192) + 24);
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&__str);
    v64 = *((_DWORD *)this + 105);
    if ((v64 & 0x104) != 0)
    {
      *((_QWORD *)this + 144) = 0;
      v65 = re::globalAllocators(v63);
      v66 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v65[2] + 32))(v65[2], 352, 8);
      v67 = re::TimebaseManager::TimebaseManager((uint64_t)v66, *((_QWORD *)this + 144));
      v68 = *((_QWORD *)this + 143);
      *((_QWORD *)this + 143) = v67;
      if (v68)
      {

        v66 = (void *)*((_QWORD *)this + 143);
      }
      v69 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)&v602);
      if ((v70 & 1) == 0
      {
        re::introspect<re::TimebaseService>(void)::info = re::introspect_TimebaseService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::TimebaseService>(void)::info, &v602, v66);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v69 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)&v602);
      v64 = *((_DWORD *)this + 105);
    }
    if ((v64 & 4) != 0)
    {
      v71 = re::globalAllocators(v63);
      v72 = (re::AnimationManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71[2] + 32))(v71[2], 512, 8);
      re::AnimationManager::AnimationManager(v72);
      *((_QWORD *)this + 91) = v73;
      re::AnimationManager::init(v73, *(CFTypeRef *)(*((_QWORD *)this + 143) + 232), 0);
      v74 = *((_QWORD *)this + 81);
      v75 = (void *)*((_QWORD *)this + 91);
      re::StringID::invalid((re::StringID *)&v602);
      if ((v76 & 1) == 0
      {
        re::introspect<re::AnimationService>(void)::info = re::introspect_AnimationService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::AnimationService>(void)::info, &v602, v75);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v74 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)&v602);
      v64 = *((_DWORD *)this + 105);
    }
    if ((v64 & 2) != 0)
    {
      v77 = re::globalAllocators(v63);
      v78 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v77[2] + 32))(v77[2], 464, 8);
      *(_QWORD *)v78 = &off_24ED5D700;
      *((_QWORD *)v78 + 1) = &off_24ED5D6B0;
      *((_QWORD *)v78 + 3) = 0;
      *((_QWORD *)v78 + 4) = 0;
      *((_QWORD *)v78 + 2) = v78;
      *((_DWORD *)v78 + 10) = 1;
      *((_OWORD *)v78 + 3) = 0u;
      *((_OWORD *)v78 + 4) = 0u;
      *((_OWORD *)v78 + 5) = 0u;
      *(_OWORD *)(v78 + 92) = 0u;
      *(_QWORD *)(v78 + 108) = 0x7FFFFFFFLL;
      *((_QWORD *)v78 + 16) = 0;
      *((_QWORD *)v78 + 17) = 0;
      *((_QWORD *)v78 + 15) = 0;
      *((_DWORD *)v78 + 36) = 0;
      *(_OWORD *)(v78 + 152) = 0u;
      *(_OWORD *)(v78 + 168) = 0u;
      *(_OWORD *)(v78 + 180) = 0u;
      *(_QWORD *)(v78 + 196) = 0x7FFFFFFFLL;
      *((_QWORD *)v78 + 26) = 0;
      *((_QWORD *)v78 + 27) = 0;
      *((_DWORD *)v78 + 56) = 1;
      *((_QWORD *)v78 + 30) = 0;
      *((_QWORD *)v78 + 31) = 0;
      *((_DWORD *)v78 + 64) = 0;
      *((_QWORD *)v78 + 29) = 0;
      *((_WORD *)v78 + 132) = 259;
      *((_DWORD *)v78 + 67) = 1023969417;
      v78[272] = 0;
      *((_QWORD *)v78 + 35) = 0;
      *((_QWORD *)v78 + 36) = 0;
      *((_DWORD *)v78 + 74) = 1;
      *((_QWORD *)v78 + 38) = 0;
      *((_QWORD *)v78 + 39) = 0;
      *((_QWORD *)this + 92) = v78;
      v79 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)&v602);
      if ((v80 & 1) == 0
      {
        re::introspect<re::ecs2::AnimationSceneService>(void)::info = re::ecs2::introspect_AnimationSceneService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::AnimationSceneService>(void)::info, &v602, v78);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v79 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)&v602);
    }
    if (!*((_BYTE *)a2 + 210) && (physx::shdfnd::g_alwaysUseLocking & 1) == 0)
      physx::shdfnd::g_alwaysUseLocking = 1;
    if ((*((_BYTE *)this + 420) & 0x20) != 0)
    {
      v81 = re::globalAllocators(v63);
      v82 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v81[2] + 32))(v81[2], 624, 16);
      bzero(v82, 0x270uLL);
      *v82 = &off_24ED29AA8;
      re::ecs2::PhysicsSimulationTracking::PhysicsSimulationTracking((re::ecs2::PhysicsSimulationTracking *)(v82 + 2));
      *((_BYTE *)v82 + 616) = 0;
      v82[76] = 0;
      *((_OWORD *)v82 + 37) = 0u;
      *((_QWORD *)this + 111) = v82;
      re::ecs2::PhysicsSimulationManager::init((uint64_t)v82, *((_QWORD *)this + 81), *((_BYTE *)a2 + 209));
      v83 = *((_QWORD *)this + 81);
      v84 = (void *)*((_QWORD *)this + 111);
      re::StringID::invalid((re::StringID *)&v602);
      if ((v85 & 1) == 0
      {
        re::introspect<re::ecs2::PhysicsSimulationService>(void)::info = re::ecs2::introspect_PhysicsSimulationService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::PhysicsSimulationService>(void)::info, &v602, v84);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v83 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)&v602);
    }
    v86 = re::globalAllocators(v63);
    v87 = (re::FrameManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v86[2] + 32))(v86[2], 320, 8);
    v88 = re::FrameManager::FrameManager(v87);
    v89 = *((_QWORD *)this + 106);
    *((_QWORD *)this + 106) = v88;
    if (v89)
    {

      v88 = (re::FrameManager *)*((_QWORD *)this + 106);
    }
    re::FrameManager::init(v88);
    v90 = *((_QWORD *)this + 81);
    v91 = (void *)*((_QWORD *)this + 106);
    re::StringID::invalid((re::StringID *)&v602);
    if ((v92 & 1) == 0
    {
      re::introspect<re::FrameManager>(void)::info = re::introspect_FrameManager(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::FrameManager>(void)::info, &v602, v91);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v90 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)&v602);
    v93 = g_jobService;
    if (g_jobService)
      v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)g_jobService + 16))(g_jobService);
    v94 = v93 + 14;
    v95 = (re *)std::thread::hardware_concurrency();
    v96 = v95;
    if (v94 > v95)
      v96 = v94;
    if (v96 >= 0x20)
      v97 = 32;
    else
      v97 = v96;
    v98 = re::globalAllocators(v95);
    v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v98[2] + 32))(v98[2], 536, 8);
    v100 = (void *)v99;
    do
    {
      v101 = __ldaxr(&qword_2540FB338);
      v102 = v101 + 1;
    }
    while (__stlxr(v102, &qword_2540FB338));
    v587 = (char *)this + 576;
    *(_QWORD *)v99 = v102;
    *(_QWORD *)(v99 + 8) = 0;
    *(_DWORD *)(v99 + 16) = 0;
    *(_QWORD *)(v99 + 24) = v97;
    *(_OWORD *)(v99 + 32) = 0u;
    *(_OWORD *)(v99 + 48) = 0u;
    *(_OWORD *)(v99 + 64) = 0u;
    *(_OWORD *)(v99 + 80) = 0u;
    *(_QWORD *)(v99 + 96) = 0;
    *(_DWORD *)(v99 + 104) = 1065353216;
    *(_OWORD *)(v99 + 112) = 0u;
    *(_OWORD *)(v99 + 128) = 0u;
    *(_OWORD *)(v99 + 144) = 0u;
    *(_OWORD *)(v99 + 160) = 0u;
    *(_OWORD *)(v99 + 176) = 0u;
    *(_DWORD *)(v99 + 192) = 1065353216;
    *(_OWORD *)(v99 + 216) = 0u;
    *(_OWORD *)(v99 + 232) = 0u;
    *(_OWORD *)(v99 + 248) = 0u;
    *(_OWORD *)(v99 + 200) = 0u;
    *(_OWORD *)(v99 + 264) = 0u;
    *(_DWORD *)(v99 + 280) = 1065353216;
    *(_OWORD *)(v99 + 288) = 0u;
    *(_OWORD *)(v99 + 304) = 0u;
    *(_OWORD *)(v99 + 320) = 0u;
    *(_OWORD *)(v99 + 336) = 0u;
    *(_OWORD *)(v99 + 352) = 0u;
    *(_OWORD *)(v99 + 368) = 0u;
    *(_OWORD *)(v99 + 384) = 0u;
    *(_OWORD *)(v99 + 400) = 0u;
    *(_OWORD *)(v99 + 416) = 0u;
    *(_OWORD *)(v99 + 432) = 0u;
    *(_OWORD *)(v99 + 448) = 0u;
    *(_OWORD *)(v99 + 464) = 0u;
    *(_OWORD *)(v99 + 480) = 0u;
    *(_OWORD *)(v99 + 496) = 0u;
    *(_DWORD *)(v99 + 512) = 1065353216;
    *(_OWORD *)(v99 + 520) = 0u;
    *(_QWORD *)(v99 + 520) = mach_absolute_time();
    *((_QWORD *)this + 119) = v100;
    v103 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)&v602);
    if ((v104 & 1) == 0
    {
      re::introspect<re::ProfilerManager>(void)::info = re::introspect_ProfilerManager(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ProfilerManager>(void)::info, &v602, v100);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v103 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)&v602);
    v105 = *((_QWORD *)this + 119);
    os_unfair_lock_lock((os_unfair_lock_t)(v105 + 16));
    v106 = re::ProfilerManager::getProcessorId<re::FrameProfiler>();
    v107 = (re::FrameProfiler *)operator new();
    re::FrameProfiler::FrameProfiler(v107);
    v108 = (uint64_t *)(v105 + 480);
    v109 = *(_QWORD *)(v105 + 488);
    if (v109)
    {
      v110 = (uint8x8_t)vcnt_s8((int8x8_t)v109);
      v110.i16[0] = vaddlv_u8(v110);
      if (v110.u32[0] > 1uLL)
      {
        v53 = v106;
        if (v109 <= v106)
          v53 = v106 % v109;
      }
      else
      {
        v53 = (v109 - 1) & v106;
      }
      v111 = *(_QWORD **)(*v108 + 8 * v53);
      if (v111)
      {
        for (i = (_QWORD *)*v111; i; i = (_QWORD *)*i)
        {
          v113 = i[1];
          if (v113 == v106)
          {
            if (i[2] == v106)
              goto LABEL_82;
          }
          else
          {
            if (v110.u32[0] > 1uLL)
            {
              if (v113 >= v109)
                v113 %= v109;
            }
            else
            {
              v113 &= v109 - 1;
            }
            if (v113 != v53)
              break;
          }
        }
      }
    }
    v114 = operator new(0x20uLL);
    v114[1] = v106;
    v114[2] = v106;
    v114[3] = v107;
    v115 = (float)(unint64_t)(*(_QWORD *)(v105 + 504) + 1);
    v116 = *(float *)(v105 + 512);
    if (!v109 || (float)(v116 * (float)v109) < v115)
    {
      v117 = 1;
      if (v109 >= 3)
        v117 = (v109 & (v109 - 1)) != 0;
      v118 = v117 | (2 * v109);
      v119 = vcvtps_u32_f32(v115 / v116);
      if (v118 <= v119)
        v120 = v119;
      else
        v120 = v118;
      std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(v105 + 480, v120);
      v109 = *(_QWORD *)(v105 + 488);
      if ((v109 & (v109 - 1)) != 0)
      {
        if (v109 <= v106)
          v53 = v106 % v109;
        else
          v53 = v106;
      }
      else
      {
        v53 = (v109 - 1) & v106;
      }
    }
    v121 = *v108;
    v122 = *(_QWORD **)(*v108 + 8 * v53);
    if (v122)
    {
      *v114 = *v122;
LABEL_80:
      *v122 = v114;
      goto LABEL_81;
    }
    v123 = *(_QWORD *)(v105 + 496);
    *v114 = v123;
    *(_QWORD *)(v105 + 496) = v114;
    *(_QWORD *)(v121 + 8 * v53) = v105 + 496;
    if (v123)
    {
      v124 = *(_QWORD *)(v123 + 8);
      if ((v109 & (v109 - 1)) != 0)
      {
        if (v124 >= v109)
          v124 %= v109;
      }
      else
      {
        v124 &= v109 - 1;
      }
      v122 = (_QWORD *)(*v108 + 8 * v124);
      goto LABEL_80;
    }
LABEL_81:
    ++*(_QWORD *)(v105 + 504);
LABEL_82:
    os_unfair_lock_unlock((os_unfair_lock_t)(v105 + 16));
    v125 = *((_QWORD *)this + 119);
    os_unfair_lock_lock((os_unfair_lock_t)(v125 + 16));
    v126 = re::ProfilerManager::getProcessorId<re::ProfilerFlameChartProcessor>();
    v127 = (re::ProfilerFlameChartProcessor *)operator new();
    re::ProfilerFlameChartProcessor::ProfilerFlameChartProcessor(v127);
    v128 = (uint64_t *)(v125 + 480);
    v129 = *(_QWORD *)(v125 + 488);
    if (v129)
    {
      v130 = (uint8x8_t)vcnt_s8((int8x8_t)v129);
      v130.i16[0] = vaddlv_u8(v130);
      if (v130.u32[0] > 1uLL)
      {
        v53 = v126;
        if (v129 <= v126)
          v53 = v126 % v129;
      }
      else
      {
        v53 = (v129 - 1) & v126;
      }
      v131 = *(_QWORD **)(*v128 + 8 * v53);
      if (v131)
      {
        for (j = (_QWORD *)*v131; j; j = (_QWORD *)*j)
        {
          v133 = j[1];
          if (v133 == v126)
          {
            if (j[2] == v126)
              goto LABEL_121;
          }
          else
          {
            if (v130.u32[0] > 1uLL)
            {
              if (v133 >= v129)
                v133 %= v129;
            }
            else
            {
              v133 &= v129 - 1;
            }
            if (v133 != v53)
              break;
          }
        }
      }
    }
    v134 = operator new(0x20uLL);
    v134[1] = v126;
    v134[2] = v126;
    v134[3] = v127;
    v135 = (float)(unint64_t)(*(_QWORD *)(v125 + 504) + 1);
    v136 = *(float *)(v125 + 512);
    if (!v129 || (float)(v136 * (float)v129) < v135)
    {
      v137 = 1;
      if (v129 >= 3)
        v137 = (v129 & (v129 - 1)) != 0;
      v138 = v137 | (2 * v129);
      v139 = vcvtps_u32_f32(v135 / v136);
      if (v138 <= v139)
        v140 = v139;
      else
        v140 = v138;
      std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(v125 + 480, v140);
      v129 = *(_QWORD *)(v125 + 488);
      if ((v129 & (v129 - 1)) != 0)
      {
        if (v129 <= v126)
          v53 = v126 % v129;
        else
          v53 = v126;
      }
      else
      {
        v53 = (v129 - 1) & v126;
      }
    }
    v141 = *v128;
    v142 = *(_QWORD **)(*v128 + 8 * v53);
    if (v142)
    {
      *v134 = *v142;
LABEL_119:
      *v142 = v134;
      goto LABEL_120;
    }
    v143 = *(_QWORD *)(v125 + 496);
    *v134 = v143;
    *(_QWORD *)(v125 + 496) = v134;
    *(_QWORD *)(v141 + 8 * v53) = v125 + 496;
    if (v143)
    {
      v144 = *(_QWORD *)(v143 + 8);
      if ((v129 & (v129 - 1)) != 0)
      {
        if (v144 >= v129)
          v144 %= v129;
      }
      else
      {
        v144 &= v129 - 1;
      }
      v142 = (_QWORD *)(*v128 + 8 * v144);
      goto LABEL_119;
    }
LABEL_120:
    ++*(_QWORD *)(v125 + 504);
LABEL_121:
    os_unfair_lock_unlock((os_unfair_lock_t)(v125 + 16));
    v145 = *((_QWORD *)this + 119);
    os_unfair_lock_lock((os_unfair_lock_t)(v145 + 16));
    v146 = re::ProfilerManager::getProcessorId<re::ProfilerMiniHUDProcessor>();
    v147 = (re::ProfilerMiniHUDProcessor *)operator new();
    re::ProfilerMiniHUDProcessor::ProfilerMiniHUDProcessor(v147);
    v148 = (uint64_t *)(v145 + 480);
    v149 = *(_QWORD *)(v145 + 488);
    if (v149)
    {
      v150 = (uint8x8_t)vcnt_s8((int8x8_t)v149);
      v150.i16[0] = vaddlv_u8(v150);
      if (v150.u32[0] > 1uLL)
      {
        v53 = v146;
        if (v149 <= v146)
          v53 = v146 % v149;
      }
      else
      {
        v53 = (v149 - 1) & v146;
      }
      v151 = *(_QWORD **)(*v148 + 8 * v53);
      if (v151)
      {
        for (k = (_QWORD *)*v151; k; k = (_QWORD *)*k)
        {
          v153 = k[1];
          if (v153 == v146)
          {
            if (k[2] == v146)
              goto LABEL_160;
          }
          else
          {
            if (v150.u32[0] > 1uLL)
            {
              if (v153 >= v149)
                v153 %= v149;
            }
            else
            {
              v153 &= v149 - 1;
            }
            if (v153 != v53)
              break;
          }
        }
      }
    }
    v154 = operator new(0x20uLL);
    v154[1] = v146;
    v154[2] = v146;
    v154[3] = v147;
    v155 = (float)(unint64_t)(*(_QWORD *)(v145 + 504) + 1);
    v156 = *(float *)(v145 + 512);
    if (!v149 || (float)(v156 * (float)v149) < v155)
    {
      v157 = 1;
      if (v149 >= 3)
        v157 = (v149 & (v149 - 1)) != 0;
      v158 = v157 | (2 * v149);
      v159 = vcvtps_u32_f32(v155 / v156);
      if (v158 <= v159)
        v160 = v159;
      else
        v160 = v158;
      std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(v145 + 480, v160);
      v149 = *(_QWORD *)(v145 + 488);
      if ((v149 & (v149 - 1)) != 0)
      {
        if (v149 <= v146)
          v53 = v146 % v149;
        else
          v53 = v146;
      }
      else
      {
        v53 = (v149 - 1) & v146;
      }
    }
    v161 = *v148;
    v162 = *(_QWORD **)(*v148 + 8 * v53);
    if (v162)
    {
      *v154 = *v162;
LABEL_158:
      *v162 = v154;
      goto LABEL_159;
    }
    v163 = *(_QWORD *)(v145 + 496);
    *v154 = v163;
    *(_QWORD *)(v145 + 496) = v154;
    *(_QWORD *)(v161 + 8 * v53) = v145 + 496;
    if (v163)
    {
      v164 = *(_QWORD *)(v163 + 8);
      if ((v149 & (v149 - 1)) != 0)
      {
        if (v164 >= v149)
          v164 %= v149;
      }
      else
      {
        v164 &= v149 - 1;
      }
      v162 = (_QWORD *)(*v148 + 8 * v164);
      goto LABEL_158;
    }
LABEL_159:
    ++*(_QWORD *)(v145 + 504);
LABEL_160:
    os_unfair_lock_unlock((os_unfair_lock_t)(v145 + 16));
    v15 = (uint64_t *)*((_QWORD *)this + 119);
    os_unfair_lock_lock((os_unfair_lock_t)v15 + 4);
    v165 = re::ProfilerManager::getProcessorId<re::ProfilerDetailedHUDProcessor>();
    v166 = (re::ProfilerDetailedHUDProcessor *)operator new();
    re::ProfilerDetailedHUDProcessor::ProfilerDetailedHUDProcessor(v166);
    v167 = v15 + 60;
    v168 = v15[61];
    if (v168)
    {
      v169 = (uint8x8_t)vcnt_s8((int8x8_t)v168);
      v169.i16[0] = vaddlv_u8(v169);
      if (v169.u32[0] > 1uLL)
      {
        v53 = v165;
        if (v168 <= v165)
          v53 = v165 % v168;
      }
      else
      {
        v53 = (v168 - 1) & v165;
      }
      v170 = *(_QWORD **)(*v167 + 8 * v53);
      if (v170)
      {
        for (m = (_QWORD *)*v170; m; m = (_QWORD *)*m)
        {
          v172 = m[1];
          if (v172 == v165)
          {
            if (m[2] == v165)
              goto LABEL_199;
          }
          else
          {
            if (v169.u32[0] > 1uLL)
            {
              if (v172 >= v168)
                v172 %= v168;
            }
            else
            {
              v172 &= v168 - 1;
            }
            if (v172 != v53)
              break;
          }
        }
      }
    }
    v173 = operator new(0x20uLL);
    v173[1] = v165;
    v173[2] = v165;
    v173[3] = v166;
    v174 = (float)(unint64_t)(v15[63] + 1);
    v175 = *((float *)v15 + 128);
    if (!v168 || (float)(v175 * (float)v168) < v174)
    {
      v176 = 1;
      if (v168 >= 3)
        v176 = (v168 & (v168 - 1)) != 0;
      v177 = v176 | (2 * v168);
      v178 = vcvtps_u32_f32(v174 / v175);
      if (v177 <= v178)
        v179 = v178;
      else
        v179 = v177;
      std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)(v15 + 60), v179);
      v168 = v15[61];
      if ((v168 & (v168 - 1)) != 0)
      {
        if (v168 <= v165)
          v53 = v165 % v168;
        else
          v53 = v165;
      }
      else
      {
        v53 = (v168 - 1) & v165;
      }
    }
    v180 = *v167;
    v181 = *(_QWORD **)(*v167 + 8 * v53);
    if (v181)
    {
      *v173 = *v181;
LABEL_197:
      *v181 = v173;
      goto LABEL_198;
    }
    v182 = v15[62];
    *v173 = v182;
    v15[62] = (uint64_t)v173;
    *(_QWORD *)(v180 + 8 * v53) = v15 + 62;
    if (v182)
    {
      v183 = *(_QWORD *)(v182 + 8);
      if ((v168 & (v168 - 1)) != 0)
      {
        if (v183 >= v168)
          v183 %= v168;
      }
      else
      {
        v183 &= v168 - 1;
      }
      v181 = (_QWORD *)(*v167 + 8 * v183);
      goto LABEL_197;
    }
LABEL_198:
    ++v15[63];
LABEL_199:
    os_unfair_lock_unlock((os_unfair_lock_t)v15 + 4);
    v184 = re::ProfilerManager::getProcessor<re::FrameProfiler,void>(*((_QWORD *)this + 119));
    *((_QWORD *)this + 117) = v184;
    *(_QWORD *)(v184 + 184) = *((_QWORD *)this + 119);
    re::Defaults::intValue((re::Defaults *)"statisticsOverlayEnabled", v185, (uint64_t)v615);
    if (v615[0] && v616)
      re::ProfilerManager::setProcessorEnabled<re::FrameProfiler,void>(*((_QWORD *)this + 119), 1);
    re::Defaults::intValue((re::Defaults *)"profiler.logprocessor.enable", v186, (uint64_t)v613);
    if (v613[0] && v614)
      re::ProfilerManager::setProcessorEnabled<re::ProfilerLogProcessor,void>(*((_QWORD *)this + 119), 1);
    re::Defaults::intValue((re::Defaults *)"profiler.flamechartprocessor.enable", v187, (uint64_t)v611);
    if (v611[0] && v612)
      re::ProfilerManager::setProcessorEnabled<re::ProfilerFlameChartProcessor,void>(*((_QWORD *)this + 119), 1);
    re::Defaults::intValue((re::Defaults *)"profiler.detailedhudprocessor.enable", v188, (uint64_t)v609);
    if (v609[0] && v610)
      re::ProfilerManager::setProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(*((_QWORD *)this + 119), 1);
    re::Defaults::intValue((re::Defaults *)"profiler.minihudprocessor.enable", v189, (uint64_t)v607);
    if (v607[0] && v608)
      re::ProfilerManager::setProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(*((_QWORD *)this + 119), 1);
    re::Defaults::intValue((re::Defaults *)"profiler.csvprocessor.enable", v190, (uint64_t)v605);
    if (v605[0] && v606)
      re::ProfilerManager::setProcessorEnabled<re::ProfilerCsvProcessor,void>(*((_QWORD *)this + 119), 1);
    re::Defaults::stringValue((re::Defaults *)"profiler.minihudprocessor.lowcolor", v191, (uint64_t)&v602);
    if (v602.var0)
    {
      if ((v603 & 1) != 0)
        v193 = *(char **)&v604[7];
      else
        v193 = v604;
      std::string::basic_string[abi:nn180100]<0>(&__str, v193);
      v194 = std::stoul((const std::string *)&__str, 0, 16);
      if (*((char *)&__str_16.var0 + 7) < 0)
        operator delete(*(void **)&__str.var0);
      v195 = (float32x4_t *)re::ProfilerManager::getProcessor<re::ProfilerMiniHUDProcessor,void>(*((_QWORD *)this + 119));
      v196.i32[0] = v194;
      v197 = vshrq_n_u32(v196, 0x18uLL).u32[0];
      v196.i32[1] = HIWORD(v194);
      v196.i32[2] = v194 >> 8;
      v196.i32[3] = v194;
      v198.i64[0] = 0xFF000000FFLL;
      v198.i64[1] = 0xFF000000FFLL;
      v199 = (uint32x4_t)vandq_s8((int8x16_t)v196, v198);
      v199.i32[0] = v197;
      v195[54] = vdivq_f32(vcvtq_f32_u32(v199), (float32x4_t)vdupq_n_s32(0x437F0000u));
    }
    re::Defaults::stringValue((re::Defaults *)"profiler.minihudprocessor.highcolor", v192, (uint64_t)v598);
    if (v598[0])
    {
      if ((v600 & 1) != 0)
        v201 = *(char **)&v601[7];
      else
        v201 = v601;
      std::string::basic_string[abi:nn180100]<0>(&__str, v201);
      v202 = std::stoul((const std::string *)&__str, 0, 16);
      if (*((char *)&__str_16.var0 + 7) < 0)
        operator delete(*(void **)&__str.var0);
      v200 = (float32x4_t *)re::ProfilerManager::getProcessor<re::ProfilerMiniHUDProcessor,void>(*((_QWORD *)this + 119));
      v203.i32[0] = v202;
      v204 = vshrq_n_u32(v203, 0x18uLL).u32[0];
      v203.i32[1] = HIWORD(v202);
      v203.i32[2] = v202 >> 8;
      v203.i32[3] = v202;
      v205.i64[0] = 0xFF000000FFLL;
      v205.i64[1] = 0xFF000000FFLL;
      v206 = (uint32x4_t)vandq_s8((int8x16_t)v203, v205);
      v206.i32[0] = v204;
      v200[53] = vdivq_f32(vcvtq_f32_u32(v206), (float32x4_t)vdupq_n_s32(0x437F0000u));
    }
    v207 = re::globalAllocators((re *)v200);
    v208 = (StringID *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v207[2] + 32))(v207[2], 12496, 16);
    bzero(v208, 0x30D0uLL);
    re::ColorManager::ColorManager((re::ColorManager *)v208);
    *((_QWORD *)this + 136) = v208;
    v209 = *((_BYTE *)a2 + 134);
    if (*((_BYTE *)a2 + 133))
    {
      *(_WORD *)&v208->var0 = 1;
      *(_BYTE *)&v208[4].var0 = 1;
      *((_BYTE *)&v208[4].var0 + 1) = v209;
      v210 = 1;
    }
    else
    {
      *(_WORD *)&v208->var0 = 0;
      *(_BYTE *)&v208[4].var0 = 0;
      *((_BYTE *)&v208[4].var0 + 1) = v209;
      v210 = 0;
    }
    re::ColorHelpers::computeGamutTransformMatrix(v210, 0, (uint64_t)&__str);
    v208[1] = __str;
    v208[2] = __str_16;
    v208[3] = v619;
    v211 = *((_QWORD *)this + 81);
    v212 = (void *)*((_QWORD *)this + 136);
    re::StringID::invalid((re::StringID *)buf);
    if ((v213 & 1) == 0
    {
      re::introspect<re::ColorManager>(void)::info = re::introspect_ColorManager(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ColorManager>(void)::info, (StringID *)buf, v212);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v211 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v215 = re::globalAllocators(v214);
    v216 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v215[2] + 32))(v215[2], 120, 8);
    *(_QWORD *)v216 = 0;
    *(_QWORD *)(v216 + 8) = 0;
    *(_BYTE *)(v216 + 16) = 0;
    *(_WORD *)(v216 + 17) = 1;
    *(_QWORD *)(v216 + 112) = 0;
    *(_OWORD *)(v216 + 24) = 0u;
    *(_OWORD *)(v216 + 40) = 0u;
    *(_OWORD *)(v216 + 52) = 0u;
    *(_OWORD *)(v216 + 72) = 0u;
    *(_OWORD *)(v216 + 88) = 0u;
    *(_DWORD *)(v216 + 104) = 0;
    *((_QWORD *)this + 137) = v216;
    re::VFXManager::init((id *)v216, (id *)this + 54);
    v217 = *((_QWORD *)this + 81);
    v218 = (void *)*((_QWORD *)this + 137);
    re::StringID::invalid((re::StringID *)buf);
    if ((v219 & 1) == 0
    {
      re::introspect<re::VFXManager>(void)::info = re::introspect_VFXManager(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::VFXManager>(void)::info, (StringID *)buf, v218);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v217 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v221 = re::globalAllocators(v220);
    v222 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v221[2] + 32))(v221[2], 192, 64);
    v222[4] = 0u;
    v222[5] = 0u;
    v222[10] = 0u;
    v222[11] = 0u;
    v222[8] = 0u;
    v222[9] = 0u;
    v222[6] = 0u;
    v222[7] = 0u;
    v222[2] = 0u;
    v222[3] = 0u;
    *v222 = 0u;
    v222[1] = 0u;
    *((_WORD *)v222 + 8) = 257;
    *((_BYTE *)v222 + 18) = 1;
    *(_OWORD *)((char *)v222 + 88) = 0u;
    *(_OWORD *)((char *)v222 + 72) = 0u;
    *((_DWORD *)v222 + 26) = 0;
    *((_DWORD *)v222 + 27) = 0x7FFFFFFF;
    *((_DWORD *)v222 + 32) = 0;
    *((_QWORD *)this + 100) = v222;
    v223 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)buf);
    if ((v224 & 1) == 0
    {
      re::introspect<re::ImportGraphicsResources>(void)::info = re::introspect_ImportGraphicsResources(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ImportGraphicsResources>(void)::info, (StringID *)buf, v222);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v223 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v226 = atomic_load((unsigned __int8 *)&qword_2540FB348);
    v227 = (char *)this + 576;
    if ((v226 & 1) == 0)
    {
      v225 = (re *)__cxa_guard_acquire(&qword_2540FB348);
      if ((_DWORD)v225)
      {
        qword_2540FB340 = re::ecs2::introspect_FrameProfilingSystem(0);
        __cxa_guard_release(&qword_2540FB348);
      }
    }
    if (!*v587 || (*((_BYTE *)this + 420) & 0x10) == 0)
      goto LABEL_255;
    v228 = re::globalAllocators(v225);
    v229 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v228[2] + 32))(v228[2], 184, 8);
    *(_OWORD *)v229 = 0u;
    *(_OWORD *)(v229 + 16) = 0u;
    *(_OWORD *)(v229 + 32) = 0u;
    *(_OWORD *)(v229 + 48) = 0u;
    *(_OWORD *)(v229 + 64) = 0u;
    *(_OWORD *)(v229 + 80) = 0u;
    *(_OWORD *)(v229 + 96) = 0u;
    *(_OWORD *)(v229 + 112) = 0u;
    *(_OWORD *)(v229 + 144) = 0u;
    *(_OWORD *)(v229 + 160) = 0u;
    *(_QWORD *)(v229 + 176) = 0;
    *(_OWORD *)(v229 + 128) = 0u;
    re::ecs2::System::System(v229, 1);
    *v230 = &off_24ED5E630;
    v230[14] = 0;
    v230[15] = 0;
    v230[13] = 0;
    re::StringID::invalid((re::StringID *)(v229 + 128));
    *(_BYTE *)(v229 + 152) = 0;
    *(_QWORD *)(v229 + 144) = 0;
    *(_QWORD *)(v229 + 168) = 0;
    *(_QWORD *)(v229 + 176) = 0;
    *(_QWORD *)(v229 + 160) = 0;
    v231 = *((_QWORD *)this + 140);
    *((_QWORD *)this + 140) = v229;
    if (v231)

    v14 = *((_QWORD *)this + 81);
    v232 = (void *)*((_QWORD *)this + 117);
    re::StringID::invalid((re::StringID *)buf);
    if ((v233 & 1) == 0
    {
      re::introspect<re::FrameProfiler>(void)::info = re::introspect_FrameProfiler(0);
    }
    p_info = (__objc2_class_ro **)&__str;
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::FrameProfiler>(void)::info, (StringID *)buf, v232);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v14 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v13 = *((_QWORD *)this + 117);
    v234 = mach_absolute_time();
    re::FrameProfiler::setEngineInitializedTimestamp((re::FrameProfiler *)v13, v234);
    re::FrameProfiler::checkUserDefaults(*((re::FrameProfiler **)this + 117), v235);
    v237 = re::globalAllocators(v236);
    v238 = (re::RenderManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v237[2] + 32))(v237[2], 320, 8);
    v239 = re::RenderManager::RenderManager(v238);
    *((_QWORD *)this + 105) = v239;
    if (re::RenderManager::init((uint64_t)v239, *((_QWORD *)this + 106), (uint64_t)a2 + 64, *((_QWORD *)this + 82), 0, *((re::ColorManager **)this + 136), *((_QWORD *)this + 137), *((_QWORD *)this + 100), (*((_DWORD *)this + 106) & 0x10) != 0))
    {
      break;
    }
    re::internal::assertLog((re::internal *)4, v240, "assertion failure: '%s' (%s:line %i) Render manager was requested but failed to initialize.", "renderManagerInitSuccessful", "init", 654);
    _os_crash();
    __break(1u);
LABEL_521:
    {
      p_info[511] = (__objc2_class_ro *)re::introspect_ServiceRegistry(0);
    }
  }
  v241 = *((_QWORD *)this + 81);
  v242 = (void *)*((_QWORD *)this + 105);
  re::StringID::invalid((re::StringID *)buf);
  if ((v243 & 1) == 0
  {
    re::introspect<re::RenderManager>(void)::info = re::introspect_RenderManager(0);
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::RenderManager>(void)::info, (StringID *)buf, v242);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v241 + 16, (uint64_t *)&__str);
  re::StringID::destroyString((re::StringID *)&__str.var1);
  re::StringID::destroyString((re::StringID *)buf);
  v244 = *(re **)(*(_QWORD *)(*((_QWORD *)this + 105) + 288) + 832);
  if (v244)
  {
    v245 = (_QWORD *)*((_QWORD *)this + 136);
    *(_QWORD *)&__str.var0 = (*(uint64_t (**)(re *))(*(_QWORD *)v244 + 16))(v244);
    __str.var1 = v246;
    v244 = (re *)re::ColorManager::setTargetDisplayTonemapLUTDomain(v245, (uint64_t *)&__str);
  }
  if ((*((_BYTE *)this + 424) & 0x10) != 0)
  {
    v247 = *(_QWORD *)(*((_QWORD *)this + 105) + 104);
    v248 = v247 ? *(re **)(v247 + 296) : 0;
    v249 = re::globalAllocators(v244);
    v250 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v249[2] + 32))(v249[2], 8, 8);
    *v250 = &off_24ED29BA8;
    re::RenderGraphManager::setDataPipeFactory(v248, (uint64_t)v250);
    if ((*((_BYTE *)this + 424) & 0x10) != 0)
    {
      v251 = *(_QWORD *)(*((_QWORD *)this + 105) + 104);
      if (v251)
      {
        v252 = *((_QWORD *)this + 119);
        *(_QWORD *)(v251 + 1664) = v252;
        if (v252)
          *(_QWORD *)(v251 + 1648) = re::ProfilerManager::getProcessor<re::FrameProfiler,void>(v252);
      }
    }
  }
LABEL_255:
  v253 = re::ImportGraphicsResources::init(*((id **)this + 100), *((const re::ColorManager **)this + 136), *((id **)this + 105));
  v254 = *((_DWORD *)this + 105);
  if (*((_BYTE *)this + 576) && (v254 & 0x10) != 0)
  {
    v255 = re::globalAllocators((re *)v253);
    v256 = (re::ShadowManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v255[2] + 32))(v255[2], 480, 16);
    re::ShadowManager::ShadowManager(v256);
    *((_QWORD *)this + 121) = v257;
    v258 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)buf);
    if ((v259 & 1) == 0
    {
      re::introspect<re::ShadowService>(void)::info = re::introspect_ShadowService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ShadowService>(void)::info, (StringID *)buf, v256);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v258 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v254 = *((_DWORD *)this + 105);
    if (*((_BYTE *)this + 576) && (v254 & 0x10) != 0)
    {
      v260 = re::globalAllocators((re *)v253);
      v261 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v260[2] + 32))(v260[2], 704, 8);
      bzero(v261 + 1, 0x2B8uLL);
      *v261 = &off_24ED5C3D0;
      re::ecs2::PortalManagerStateTracking::PortalManagerStateTracking((re::ecs2::PortalManagerStateTracking *)(v261 + 1));
      v261[86] = &off_24ED5C370;
      v261[87] = 0;
      *((_QWORD *)this + 122) = v261;
      v262 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v263 & 1) == 0
      {
        re::introspect<re::ecs2::PortalService>(void)::info = re::ecs2::introspect_PortalService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::PortalService>(void)::info, (StringID *)buf, v261);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v262 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      v254 = *((_DWORD *)this + 105);
    }
  }
  if ((v254 & 2) != 0)
  {
    v264 = re::globalAllocators((re *)v253);
    v265 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v264[2] + 32))(v264[2], 280, 8);
    *(_OWORD *)(v265 + 24) = 0u;
    *(_OWORD *)(v265 + 40) = 0u;
    *(_OWORD *)(v265 + 56) = 0u;
    *(_OWORD *)(v265 + 72) = 0u;
    *(_OWORD *)(v265 + 88) = 0u;
    *(_OWORD *)(v265 + 104) = 0u;
    *(_OWORD *)(v265 + 120) = 0u;
    *(_OWORD *)(v265 + 136) = 0u;
    *(_OWORD *)(v265 + 152) = 0u;
    *(_OWORD *)(v265 + 168) = 0u;
    *(_OWORD *)(v265 + 184) = 0u;
    *(_OWORD *)(v265 + 200) = 0u;
    *(_OWORD *)(v265 + 216) = 0u;
    *(_OWORD *)(v265 + 232) = 0u;
    *(_OWORD *)(v265 + 248) = 0u;
    *(_OWORD *)(v265 + 8) = 0u;
    *(_OWORD *)(v265 + 264) = 0u;
    *(_QWORD *)v265 = &off_24ED29BF8;
    re::ecs2::RenderOptionsManagerStateTracking::RenderOptionsManagerStateTracking((re::ecs2::RenderOptionsManagerStateTracking *)(v265 + 8));
    *((_QWORD *)this + 134) = v265;
    v266 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)buf);
    if ((v267 & 1) == 0
    {
      re::introspect<re::ecs2::RenderOptionsService>(void)::info = re::ecs2::introspect_RenderOptionsService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::RenderOptionsService>(void)::info, (StringID *)buf, v265);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v266 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
  }
  if (*v587)
  {
    v268 = *((_DWORD *)this + 105);
    if ((~v268 & 0x12) != 0)
    {
LABEL_279:
      if ((v268 & 0x10) != 0)
      {
        v324 = re::globalAllocators((re *)v253);
        v325 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v324[2] + 32))(v324[2], 24, 8);
        *(_QWORD *)v325 = &off_24ED739B8;
        *((_QWORD *)v325 + 1) = re::protectionOptions(v325);
        *((_QWORD *)v325 + 2) = 0;
        *((_QWORD *)this + 131) = v325;
        v326 = *((_QWORD *)this + 81);
        re::StringID::invalid((re::StringID *)buf);
        if ((v327 & 1) == 0
        {
          re::introspect<re::ProtectionOptionsService>(void)::info = re::introspect_ProtectionOptionsService(0);
        }
        re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ProtectionOptionsService>(void)::info, (StringID *)buf, v325);
        re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v326 + 16, (uint64_t *)&__str);
        re::StringID::destroyString((re::StringID *)&__str.var1);
        re::StringID::destroyString((re::StringID *)buf);
      }
    }
    else
    {
      v269 = re::globalAllocators((re *)v253);
      v270 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v269[2] + 32))(v269[2], 888, 8);
      *v270 = &off_24ED70D88;
      re::ecs2::ClippingParameterDataStateTracking::ClippingParameterDataStateTracking((re::ecs2::ClippingParameterDataStateTracking *)(v270 + 1));
      v270[110] = 0;
      *((_QWORD *)this + 123) = v270;
      v271 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v272 & 1) == 0
      {
        re::introspect<re::ecs2::ClippingService>(void)::info = re::ecs2::introspect_ClippingService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::ClippingService>(void)::info, (StringID *)buf, v270);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v271 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      v274 = re::globalAllocators(v273);
      v275 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v274[2] + 32))(v274[2], 320, 8);
      v276 = *((_QWORD *)this + 81);
      *v275 = &off_24ED69E50;
      re::ecs2::OpacityManagerStateTracking::OpacityManagerStateTracking((re::ecs2::OpacityManagerStateTracking *)(v275 + 1));
      v275[39] = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(v276);
      *((_QWORD *)this + 124) = v275;
      v277 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v278 & 1) == 0
      {
        re::introspect<re::ecs2::OpacityService>(void)::info = re::ecs2::introspect_OpacityService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::OpacityService>(void)::info, (StringID *)buf, v275);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v277 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      v280 = re::globalAllocators(v279);
      v281 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v280[2] + 32))(v280[2], 528, 16);
      *((_OWORD *)v281 + 2) = 0u;
      *((_OWORD *)v281 + 3) = 0u;
      *((_OWORD *)v281 + 4) = 0u;
      *((_OWORD *)v281 + 5) = 0u;
      *((_OWORD *)v281 + 6) = 0u;
      *((_OWORD *)v281 + 7) = 0u;
      *((_OWORD *)v281 + 8) = 0u;
      *((_OWORD *)v281 + 9) = 0u;
      *((_OWORD *)v281 + 10) = 0u;
      *((_OWORD *)v281 + 11) = 0u;
      *((_OWORD *)v281 + 12) = 0u;
      *((_OWORD *)v281 + 13) = 0u;
      *((_OWORD *)v281 + 14) = 0u;
      *((_OWORD *)v281 + 15) = 0u;
      *((_OWORD *)v281 + 16) = 0u;
      *((_OWORD *)v281 + 17) = 0u;
      *((_OWORD *)v281 + 18) = 0u;
      *((_OWORD *)v281 + 19) = 0u;
      *((_OWORD *)v281 + 20) = 0u;
      *((_OWORD *)v281 + 21) = 0u;
      *((_OWORD *)v281 + 22) = 0u;
      *((_OWORD *)v281 + 23) = 0u;
      *((_OWORD *)v281 + 24) = 0u;
      *((_OWORD *)v281 + 25) = 0u;
      *((_OWORD *)v281 + 26) = 0u;
      *((_OWORD *)v281 + 27) = 0u;
      *((_OWORD *)v281 + 28) = 0u;
      *((_OWORD *)v281 + 29) = 0u;
      *((_OWORD *)v281 + 30) = 0u;
      *((_OWORD *)v281 + 31) = 0u;
      *((_OWORD *)v281 + 32) = 0u;
      *((_OWORD *)v281 + 1) = 0u;
      *(_QWORD *)v281 = &off_24ED5B708;
      *((_QWORD *)v281 + 1) = 0;
      re::ecs2::BillboardManagerStateTracking::BillboardManagerStateTracking((re::ecs2::BillboardManagerStateTracking *)(v281 + 16));
      v281[400] = 0;
      *((_OWORD *)v281 + 27) = 0u;
      *((_OWORD *)v281 + 28) = 0u;
      *((_DWORD *)v281 + 116) = 0;
      *(_QWORD *)(v281 + 468) = 0x7FFFFFFFLL;
      *((_OWORD *)v281 + 30) = 0u;
      *((_OWORD *)v281 + 31) = 0u;
      *((_DWORD *)v281 + 128) = 0;
      *(_QWORD *)(v281 + 516) = 0x7FFFFFFFLL;
      *((_QWORD *)this + 125) = v281;
      v282 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v283 & 1) == 0
      {
        re::introspect<re::ecs2::BillboardService>(void)::info = re::ecs2::introspect_BillboardService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::BillboardService>(void)::info, (StringID *)buf, v281);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v282 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      v285 = re::globalAllocators(v284);
      v286 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v285[2] + 32))(v285[2], 200, 8);
      *(_QWORD *)v286 = &off_24ED64C88;
      *(_OWORD *)(v286 + 24) = 0u;
      *(_DWORD *)(v286 + 40) = 0;
      *(_OWORD *)(v286 + 8) = 0u;
      *(_QWORD *)(v286 + 44) = 0x7FFFFFFFLL;
      *(_OWORD *)(v286 + 72) = 0u;
      *(_DWORD *)(v286 + 88) = 0;
      *(_OWORD *)(v286 + 56) = 0u;
      *(_QWORD *)(v286 + 92) = 0x7FFFFFFFLL;
      *(_OWORD *)(v286 + 120) = 0u;
      *(_DWORD *)(v286 + 136) = 0;
      *(_OWORD *)(v286 + 104) = 0u;
      *(_QWORD *)(v286 + 140) = 0x7FFFFFFFLL;
      *(_OWORD *)(v286 + 168) = 0u;
      *(_DWORD *)(v286 + 184) = 0;
      *(_OWORD *)(v286 + 152) = 0u;
      *(_QWORD *)(v286 + 188) = 0x7FFFFFFFLL;
      *((_QWORD *)this + 127) = v286;
      v290 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v291 & 1) == 0
      {
        re::introspect<re::ecs2::TintService>(void)::info = re::ecs2::introspect_TintService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::TintService>(void)::info, (StringID *)buf, (void *)v286);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v290 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      v293 = re::globalAllocators(v292);
      v294 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v293[2] + 32))(v293[2], 312, 8);
      *v294 = &off_24ED6B7D8;
      re::ecs2::EnvironmentLightingManagerStateTracking::EnvironmentLightingManagerStateTracking((re::ecs2::EnvironmentLightingManagerStateTracking *)(v294 + 1));
      *((_QWORD *)this + 130) = v294;
      v295 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v296 & 1) == 0
      {
        re::introspect<re::ecs2::EnvironmentLightingService>(void)::info = re::ecs2::introspect_EnvironmentLightingService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::EnvironmentLightingService>(void)::info, (StringID *)buf, v294);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v295 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      v298 = re::globalAllocators(v297);
      v299 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v298[2] + 32))(v298[2], 280, 8);
      *v299 = &off_24ED29E70;
      re::ecs2::VisualProxyScopeManagerStateTracking::VisualProxyScopeManagerStateTracking((re::ecs2::VisualProxyScopeManagerStateTracking *)(v299 + 1));
      *((_QWORD *)this + 126) = v299;
      v300 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      v227 = (char *)this + 576;
      if ((v301 & 1) == 0
      {
        re::introspect<re::ecs2::VisualProxyScopeService>(void)::info = re::ecs2::introspect_VisualProxyScopeService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::VisualProxyScopeService>(void)::info, (StringID *)buf, v299);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v300 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      v303 = re::globalAllocators(v302);
      v304 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v303[2] + 32))(v303[2], 600, 8);
      bzero(v304 + 8, 0x250uLL);
      *(_QWORD *)v304 = &off_24ED67858;
      re::ecs2::ShadowPlaneTracking::ShadowPlaneTracking((re::ecs2::ShadowPlaneTracking *)(v304 + 8));
      v305 = re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::DataArray((uint64_t)(v304 + 200), 8);
      *(_OWORD *)(v305 + 64) = 0u;
      *(_OWORD *)(v305 + 80) = 0u;
      *((_QWORD *)v304 + 37) = 0x7FFFFFFF00000000;
      *((_DWORD *)v304 + 76) = 0;
      *(_OWORD *)(v305 + 112) = 0u;
      *(_OWORD *)(v305 + 128) = 0u;
      *((_DWORD *)v304 + 86) = 0;
      *(_QWORD *)(v305 + 148) = 0x7FFFFFFFLL;
      *(_OWORD *)(v305 + 160) = 0u;
      *(_OWORD *)(v305 + 176) = 0u;
      *((_DWORD *)v304 + 98) = 0;
      *(_QWORD *)(v305 + 196) = 0x7FFFFFFFLL;
      *(_OWORD *)(v304 + 408) = 0u;
      *(_OWORD *)(v304 + 424) = 0u;
      *((_DWORD *)v304 + 110) = 0;
      *(_QWORD *)(v304 + 444) = 0x7FFFFFFFLL;
      *((_DWORD *)v304 + 122) = 0;
      *(_OWORD *)(v304 + 456) = 0u;
      *(_OWORD *)(v304 + 472) = 0u;
      *(_QWORD *)(v304 + 492) = 0x7FFFFFFFLL;
      *(_OWORD *)(v304 + 504) = 0u;
      *(_OWORD *)(v304 + 520) = 0u;
      *((_DWORD *)v304 + 134) = 0;
      *(_QWORD *)(v304 + 540) = 0x7FFFFFFFLL;
      *(_OWORD *)(v304 + 552) = 0u;
      *(_OWORD *)(v304 + 568) = 0u;
      *((_DWORD *)v304 + 146) = 0;
      *(_QWORD *)(v304 + 588) = 0x7FFFFFFFLL;
      *((_QWORD *)this + 138) = v304;
      v306 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v307 & 1) == 0
      {
        re::introspect<re::ecs2::ProjectiveShadowReceiverService>(void)::info = re::ecs2::introspect_ProjectiveShadowReceiverService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::ProjectiveShadowReceiverService>(void)::info, (StringID *)buf, v304);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v306 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      v309 = re::globalAllocators(v308);
      v310 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v309[2] + 32))(v309[2], 624, 8);
      bzero(v310 + 1, 0x268uLL);
      *v310 = &off_24ED6A920;
      re::ecs2::LightGroupStateTracking::LightGroupStateTracking((re::ecs2::LightGroupStateTracking *)(v310 + 1));
      v310[36] = 0;
      *((_DWORD *)v310 + 74) = 0;
      v310[38] = 0;
      *((_DWORD *)v310 + 78) = 0;
      *((_OWORD *)v310 + 36) = 0u;
      *((_OWORD *)v310 + 37) = 0u;
      *((_DWORD *)v310 + 152) = 0;
      *(_QWORD *)((char *)v310 + 612) = 0x7FFFFFFFLL;
      *((_QWORD *)this + 128) = v310;
      v311 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v312 & 1) == 0
      {
        re::introspect<re::ecs2::LightService>(void)::info = re::ecs2::introspect_LightService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::LightService>(void)::info, (StringID *)buf, v310);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v311 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      v314 = re::globalAllocators(v313);
      v315 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v314[2] + 32))(v314[2], 152, 8);
      *(_QWORD *)v315 = &off_24ED67540;
      *(_OWORD *)(v315 + 8) = 0u;
      *(_OWORD *)(v315 + 24) = 0u;
      *((_DWORD *)v315 + 10) = 0;
      *(_QWORD *)(v315 + 44) = 0x7FFFFFFFLL;
      *(_OWORD *)(v315 + 56) = 0u;
      *(_OWORD *)(v315 + 72) = 0u;
      *((_DWORD *)v315 + 22) = 0;
      *(_QWORD *)(v315 + 92) = 0x7FFFFFFFLL;
      *(_OWORD *)(v315 + 104) = 0u;
      *(_OWORD *)(v315 + 120) = 0u;
      *((_DWORD *)v315 + 34) = 0;
      *(_QWORD *)(v315 + 140) = 0x7FFFFFFFLL;
      *((_QWORD *)this + 129) = v315;
      v316 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v317 & 1) == 0
      {
        re::introspect<re::ecs2::ImageBasedLightService>(void)::info = re::ecs2::introspect_ImageBasedLightService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::ImageBasedLightService>(void)::info, (StringID *)buf, v315);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v316 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      v319 = re::globalAllocators(v318);
      v320 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v319[2] + 32))(v319[2], 440, 8);
      v321 = (re::EntitlementManager *)*((_QWORD *)this + 139);
      *(_QWORD *)v320 = &off_24ED5E100;
      re::ecs2::RenderPassGroupManagerStateTracking::RenderPassGroupManagerStateTracking((re::ecs2::RenderPassGroupManagerStateTracking *)(v320 + 8), v321);
      *((_QWORD *)v320 + 45) = 0x7FFFFFFF00000000;
      *(_OWORD *)(v320 + 328) = 0u;
      *(_OWORD *)(v320 + 344) = 0u;
      *((_DWORD *)v320 + 92) = 0;
      *(_OWORD *)(v320 + 376) = 0u;
      *(_OWORD *)(v320 + 392) = 0u;
      *(_OWORD *)(v320 + 404) = 0u;
      *(_QWORD *)(v320 + 420) = 0x7FFFFFFFLL;
      *((_QWORD *)v320 + 54) = 0;
      *((_QWORD *)this + 135) = v320;
      v322 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v323 & 1) == 0
      {
        re::introspect<re::ecs2::RenderPassGroupService>(void)::info = re::ecs2::introspect_RenderPassGroupService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::RenderPassGroupService>(void)::info, (StringID *)buf, v320);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v322 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      if (*v587)
      {
        v268 = *((_DWORD *)this + 105);
        goto LABEL_279;
      }
    }
  }
  v328 = re::globalAllocators((re *)v253);
  v329 = (re::BackgroundTaskManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v328[2] + 32))(v328[2], 208, 8);
  *((_QWORD *)this + 84) = re::BackgroundTaskManager::BackgroundTaskManager(v329);
  v330 = *((_QWORD *)this + 81);
  re::StringID::invalid((re::StringID *)buf);
  if ((v331 & 1) == 0
  {
    re::introspect<re::BackgroundTaskService>(void)::info = re::introspect_BackgroundTaskService(0);
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::BackgroundTaskService>(void)::info, (StringID *)buf, v329);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v330 + 16, (uint64_t *)&__str);
  re::StringID::destroyString((re::StringID *)&__str.var1);
  re::StringID::destroyString((re::StringID *)buf);
  if ((*((_BYTE *)this + 420) & 0x80) != 0)
  {
    v333 = re::globalAllocators((re *)v332);
    v334 = (re::NetworkSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v333[2] + 32))(v333[2], 3000, 8);
    *((_QWORD *)this + 107) = re::NetworkSystem::NetworkSystem(v334);
    *(_QWORD *)&__str.var0 = *((_QWORD *)this + 81);
    __str.var1 = (char *)objc_retainAutorelease(*v586);
    *(_BYTE *)&__str_16.var0 = 0;
    re::NetworkSystem::init((uint64_t)v334, (uint64_t)&__str);
    v335 = *((_QWORD *)this + 81);
    v336 = (void *)*((_QWORD *)this + 107);
    re::StringID::invalid((re::StringID *)buf);
    if ((v337 & 1) == 0
    {
      re::introspect<re::NetworkSystem>(void)::info = re::introspect_NetworkSystem(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::NetworkSystem>(void)::info, (StringID *)buf, v336);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v335 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v227 = (char *)this + 576;
  }
  if ((v338 & 1) == 0)
  {
    if ((_DWORD)v332)
    {
      re::introspect<re::ecs2::NetworkReceiveSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_NetworkReceiveSystem(0);
    }
  }
  if ((v339 & 1) == 0)
  {
    if ((_DWORD)v332)
    {
      re::introspect<re::ecs2::NetworkSendSystem>(void)::info = (_UNKNOWN *)re::ecs2::introspect_NetworkSendSystem(0);
    }
  }
  if ((v340 & 1) == 0)
  {
    if ((_DWORD)v332)
    {
      re::introspect<re::NetworkSystem>(void)::info = re::introspect_NetworkSystem(0);
    }
  }
  v341 = *((_DWORD *)this + 105);
  if ((v341 & 0x400) != 0)
  {
    v342 = re::globalAllocators((re *)v332);
    v343 = (re::TraceServer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v342[2] + 32))(v342[2], 408, 8);
    *((_QWORD *)this + 120) = re::TraceServer::TraceServer(v343);
    v344 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)buf);
    if ((v345 & 1) == 0
    {
      re::introspect<re::TraceService>(void)::info = re::introspect_TraceService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::TraceService>(void)::info, (StringID *)buf, v343);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v344 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v341 = *((_DWORD *)this + 105);
  }
  if ((v341 & 0x2000) != 0)
  {
    v346 = re::globalAllocators((re *)v332);
    v347 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v346[2] + 32))(v346[2], 320, 64);
    *(_QWORD *)v347 = &off_24ED2D400;
    *(_BYTE *)(v347 + 8) = 0;
    *(_DWORD *)(v347 + 64) = 0;
    *(_QWORD *)(v347 + 80) = 0;
    *(_QWORD *)(v347 + 88) = 0;
    *(_QWORD *)(v347 + 72) = 0;
    *(_DWORD *)(v347 + 96) = 0;
    *(_QWORD *)(v347 + 144) = 0;
    *(_OWORD *)(v347 + 104) = 0u;
    *(_OWORD *)(v347 + 120) = 0u;
    *(_DWORD *)(v347 + 136) = 0;
    *(_DWORD *)(v347 + 192) = 0;
    *(_QWORD *)(v347 + 200) = 0;
    *(_OWORD *)(v347 + 16) = 0u;
    *(_OWORD *)(v347 + 32) = 0u;
    *(_QWORD *)(v347 + 48) = 0;
    *(_OWORD *)(v347 + 272) = 0u;
    *(_OWORD *)(v347 + 288) = 0u;
    *(_OWORD *)(v347 + 256) = 0u;
    *((_QWORD *)this + 104) = v347;
    re::ResourceFetchManager::init((re::ResourceFetchManager *)v347, v586);
    v348 = *((_QWORD *)this + 81);
    v349 = (void *)*((_QWORD *)this + 104);
    re::StringID::invalid((re::StringID *)buf);
    if ((v350 & 1) == 0
    {
      re::introspect<re::ResourceFetchService>(void)::info = re::introspect_ResourceFetchService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ResourceFetchService>(void)::info, (StringID *)buf, v349);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v348 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v351 = *((_QWORD *)this + 105);
    if (v351)
    {
      v352 = *(_QWORD *)(v351 + 56);
      v353 = re::globalAllocators((re *)v332)[2];
      v629[0] = &off_24ED2A0E8;
      v629[1] = this;
      v630 = v353;
      v631 = (re *)v629;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v352 + 824, (uint64_t)v629);
      v354 = v631;
      if (v631)
      {
        v354 = (re *)(**(uint64_t (***)(re *))v631)(v631);
        if (v631 != (re *)v629)
          v354 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v630 + 40))(v630);
        v631 = 0;
      }
      v355 = *(_QWORD *)(*((_QWORD *)this + 105) + 56);
      v356 = re::globalAllocators(v354)[2];
      v626[0] = &off_24ED2A150;
      v626[1] = this;
      v627 = v356;
      v628 = v626;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v355 + 864, (uint64_t)v626);
      v332 = (uint64_t)v628;
      if (v628)
      {
        v332 = (*(uint64_t (**)(_QWORD *))*v628)(v628);
        if (v628 != v626)
          v332 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v627 + 40))(v627);
        v628 = 0;
      }
    }
  }
  v357 = *((_DWORD *)this + 105);
  if ((v357 & 2) != 0)
  {
    v358 = *((_QWORD *)this + 81);
    v359 = re::globalAllocators((re *)v332);
    v360 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v359[2] + 32))(v359[2], 536, 8);
    v361 = re::ecs2::ECSManager::ECSManager((uint64_t)v360, v358, *((_QWORD *)this + 85));
    v362 = *((_QWORD *)this + 83);
    *((_QWORD *)this + 83) = v361;
    if (v362)
    {

      v360 = (void *)*((_QWORD *)this + 83);
    }
    v363 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)buf);
    if ((v364 & 1) == 0
    {
      re::introspect<re::ecs2::ECSService>(void)::info = re::ecs2::introspect_ECSService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::ECSService>(void)::info, (StringID *)buf, v360);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v363 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v357 = *((_DWORD *)this + 105);
  }
  if ((v357 & 0x20000) != 0 && *((_QWORD *)this + 107) && *((_QWORD *)this + 83))
  {
    v365 = re::globalAllocators((re *)v332);
    v366 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v365[2] + 32))(v365[2], 232, 8);
    *(_OWORD *)(v366 + 40) = 0u;
    *(_OWORD *)(v366 + 24) = 0u;
    *(_OWORD *)(v366 + 56) = 0u;
    *(_OWORD *)(v366 + 8) = 0u;
    *(_OWORD *)(v366 + 72) = 0u;
    *(_OWORD *)(v366 + 88) = 0u;
    *(_OWORD *)(v366 + 104) = 0u;
    *(_OWORD *)(v366 + 120) = 0u;
    *(_OWORD *)(v366 + 136) = 0u;
    *(_OWORD *)(v366 + 152) = 0u;
    *(_OWORD *)(v366 + 168) = 0u;
    *(_OWORD *)(v366 + 184) = 0u;
    *(_OWORD *)(v366 + 200) = 0u;
    *(_QWORD *)v366 = &off_24ED2BA58;
    *(_OWORD *)(v366 + 32) = 0u;
    *(_OWORD *)(v366 + 48) = 0u;
    *(_OWORD *)(v366 + 16) = 0u;
    *(_DWORD *)(v366 + 64) = 0;
    *(_DWORD *)(v366 + 68) = 0x7FFFFFFF;
    *(_OWORD *)(v366 + 80) = 0u;
    *(_OWORD *)(v366 + 96) = 0u;
    *(_DWORD *)(v366 + 112) = 0;
    *(_DWORD *)(v366 + 116) = 0x7FFFFFFF;
    *(_OWORD *)(v366 + 128) = 0u;
    *(_OWORD *)(v366 + 144) = 0u;
    *(_DWORD *)(v366 + 160) = 0;
    *(_DWORD *)(v366 + 164) = 0x7FFFFFFF;
    *(_QWORD *)(v366 + 176) = 0;
    *(_QWORD *)(v366 + 184) = 0;
    *(_WORD *)(v366 + 192) = 0;
    *(_QWORD *)(v366 + 208) = &str_110;
    *(_QWORD *)(v366 + 216) = 0;
    *(_QWORD *)(v366 + 224) = 0;
    *((_QWORD *)this + 102) = v366;
    re::NetworkAssetManager::init(v366, *((_QWORD *)this + 107), *((_QWORD *)this + 83), *((_BYTE *)a2 + 185));
    v367 = *((_QWORD *)this + 81);
    v368 = (void *)*((_QWORD *)this + 102);
    re::StringID::invalid((re::StringID *)buf);
    if ((v369 & 1) == 0
    {
      re::introspect<re::NetworkAssetService>(void)::info = re::introspect_NetworkAssetService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::NetworkAssetService>(void)::info, (StringID *)buf, v368);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v367 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v371 = re::globalAllocators(v370);
    v372 = (_OWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v371[2] + 32))(v371[2], 128, 64);
    v372[4] = 0u;
    v372[5] = 0u;
    *v372 = 0u;
    v372[1] = 0u;
    v372[2] = 0u;
    v372[3] = 0u;
    v372[6] = 0u;
    v372[7] = 0u;
    *(_QWORD *)v372 = &off_24ED2CA90;
    *(_OWORD *)((char *)v372 + 88) = 0u;
    *((_QWORD *)v372 + 13) = 0x7FFFFFFF00000000;
    *(_OWORD *)((char *)v372 + 72) = 0u;
    *((_QWORD *)this + 94) = v372;
    v373 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)buf);
    if ((v374 & 1) == 0
    {
      re::introspect<re::NetworkSendBlockingAssetLoadRequestService>(void)::info = re::introspect_NetworkSendBlockingAssetLoadRequestService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::NetworkSendBlockingAssetLoadRequestService>(void)::info, (StringID *)buf, v372);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v373 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v357 = *((_DWORD *)this + 105);
  }
  if ((v357 & 8) != 0)
  {
    v375 = re::globalAllocators((re *)v332);
    v376 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v375[2] + 32))(v375[2], 16, 8);
    v377 = *((_QWORD *)this + 105) == 0;
    *(_QWORD *)v376 = &off_24ED36DC0;
    v378 = !v377;
    *((_BYTE *)v376 + 8) = v378;
    *((_QWORD *)this + 95) = v376;
    v379 = re::globalAllocators(v376);
    v380 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v379[2] + 32))(v379[2], 48, 8);
    *(_QWORD *)(v380 + 40) = 0;
    *(_QWORD *)v380 = &off_24ED39190;
    *(_OWORD *)(v380 + 8) = 0u;
    *(_OWORD *)(v380 + 24) = 0u;
    *(_BYTE *)(v380 + 40) = 0;
    *((_QWORD *)this + 101) = v380;
    v584 = *(_OWORD *)((char *)this + 696);
    *(_OWORD *)v585 = *(_OWORD *)((char *)this + 712);
    v381 = re::NetworkSystem::useOPACK((re::NetworkSystem *)v380);
    *(_OWORD *)(v380 + 8) = *(_OWORD *)v585;
    *(_OWORD *)(v380 + 24) = v584;
    *(_BYTE *)(v380 + 40) = v381;
    v382 = *((_QWORD *)this + 81);
    v383 = (void *)*((_QWORD *)this + 101);
    re::StringID::invalid((re::StringID *)buf);
    if ((v384 & 1) == 0
    {
      re::introspect<re::NetworkAssetSerializationService>(void)::info = re::introspect_NetworkAssetSerializationService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::NetworkAssetSerializationService>(void)::info, (StringID *)buf, v383);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v382 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v386 = re::globalAllocators(v385);
    v387 = (re::AssetManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v386[2] + 32))(v386[2], 1856, 64);
    re::AssetManager::AssetManager(v387);
    *((_QWORD *)this + 93) = v388;
    v389 = *((id *)a2 + 2);
    v390 = (char *)*((_QWORD *)this + 81);
    *(_QWORD *)&__str.var0 = v389;
    __str.var1 = v390;
    v391 = *((_QWORD *)this + 107);
    if (v391)
      v392 = v391 + 2456;
    else
      v392 = 0;
    *(_QWORD *)&__str_16.var0 = v392;
    LOBYTE(__str_16.var1) = (*((_DWORD *)this + 105) & 0x1000) != 0;
    *(_QWORD *)&v619.var0 = *((_QWORD *)this + 95);
    LOBYTE(v619.var1) = *((_BYTE *)a2 + 186);
    v620 = *((_OWORD *)a2 + 12);
    v621 = *((_BYTE *)a2 + 208);
    v622 = *((_QWORD *)this + 105) != 0;
    v623 = *((_BYTE *)a2 + 213);
    v624 = *((_BYTE *)a2 + 214);
    v625 = *((_BYTE *)a2 + 216);
    re::AssetManager::init((uint64_t)v387, (uint64_t)&__str);

    re::Defaults::intValue((re::Defaults *)"enableFullEntityLoadTracing", v393, (uint64_t)v596);
    v394 = (_BYTE *)*((_QWORD *)this + 93);
    if (v596[0] && v597)
      v394[1458] = 1;
    v395 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)buf);
    if ((v396 & 1) == 0
    {
      re::introspect<re::AssetService>(void)::info = re::introspect_AssetService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::AssetService>(void)::info, (StringID *)buf, v394);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v395 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v397 = *((_QWORD *)this + 81);
    v398 = *((_QWORD *)this + 93);
    if (v398)
      v399 = (void *)(v398 + 8);
    else
      v399 = 0;
    re::StringID::invalid((re::StringID *)buf);
    if ((v400 & 1) == 0
    {
      re::introspect<re::AssetCompilerService>(void)::info = re::introspect_AssetCompilerService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::AssetCompilerService>(void)::info, (StringID *)buf, v399);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v397 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v357 = *((_DWORD *)this + 105);
  }
  if ((v357 & 0x1000) != 0 && *((_QWORD *)this + 107) && *((_QWORD *)this + 93))
  {
    LocalPeerId = (re *)RESyncServiceGetLocalPeerId();
    v402 = re::globalAllocators(LocalPeerId);
    v403 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v402[2] + 32))(v402[2], 104, 8);
    *(_QWORD *)v403 = &off_24ED30088;
    *(_QWORD *)(v403 + 8) = &unk_24ED300F0;
    *(_BYTE *)(v403 + 16) = 0;
    *(_QWORD *)(v403 + 24) = 0;
    *(_QWORD *)(v403 + 32) = 0;
    *(_QWORD *)(v403 + 96) = 0;
    *(_OWORD *)(v403 + 40) = 0u;
    *(_OWORD *)(v403 + 56) = 0u;
    *(_OWORD *)(v403 + 72) = 0u;
    *(_DWORD *)(v403 + 88) = 0;
    *((_QWORD *)this + 103) = v403;
    re::ResourceSharingManager::init((re::ResourceSharingManager *)v403, *((AssetService **)this + 93), v586, (uint64_t)LocalPeerId);
    v404 = *((_QWORD *)this + 81);
    v405 = (void *)*((_QWORD *)this + 103);
    re::StringID::invalid((re::StringID *)buf);
    if ((v406 & 1) == 0
    {
      re::introspect<re::ResourceSharingService>(void)::info = re::introspect_ResourceSharingService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ResourceSharingService>(void)::info, (StringID *)buf, v405);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v404 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
  }
  v407 = (void *)MEMORY[0x24BDAC760];
  if (*((_QWORD *)this + 93) && *((_QWORD *)this + 105))
  {
    v408 = re::globalAllocators((re *)v332);
    v409 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v408[2] + 32))(v408[2], 104, 8);
    *(_QWORD *)v409 = off_24ED30E90;
    *(_OWORD *)(v409 + 16) = 0u;
    *(_OWORD *)(v409 + 32) = 0u;
    *(_DWORD *)(v409 + 48) = 0;
    *(_QWORD *)(v409 + 52) = 0x7FFFFFFFLL;
    *(_QWORD *)(v409 + 64) = 0;
    *(_BYTE *)(v409 + 72) = 0;
    *(_QWORD *)(v409 + 88) = 0;
    *(_QWORD *)(v409 + 96) = 0;
    *(_QWORD *)(v409 + 80) = 0;
    *((_QWORD *)this + 96) = v409;
    v410 = *((_QWORD *)this + 105);
    *(_QWORD *)(v409 + 88) = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(*((_QWORD *)this + 81));
    *(_QWORD *)(v409 + 8) = v410;
    v411 = *((_QWORD *)this + 81);
    v412 = (void *)*((_QWORD *)this + 96);
    re::StringID::invalid((re::StringID *)&__str);
    re::ServiceRegistry::add<re::DrawableQueueService>(v411, v412, &__str);
    re::StringID::destroyString((re::StringID *)&__str);
    v413 = *((_QWORD *)this + 83);
    if (v413)
    {
      v414 = re::globalAllocators((re *)v332);
      v415 = (re::ecs2::DrawableQueueSyncSystem *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v414[2] + 32))(v414[2], 472, 8);
      v595 = re::ecs2::DrawableQueueSyncSystem::DrawableQueueSyncSystem(v415);
      re::ecs2::ECSManager::addSystem(v413, (unint64_t *)&v595, 0xFFFFFFFF, 0);
      if (v595)
      {

        v595 = 0;
      }
    }
    if (*((_QWORD *)this + 93) && *((_QWORD *)this + 105))
    {
      v416 = (void *)DRContextConfigCreate();
      v417 = *((id *)this + 54);
      DRContextConfigSetDispatchQueue();

      v418 = *(id *)(*((_QWORD *)this + 105) + 184);
      DRContextConfigSetDevice();

      DRContextConfigSetMode();
      DRContextConfigSetReuseStrategy();
      v419 = DRContextCreate();
      v420 = (void *)*((_QWORD *)this + 97);
      *((_QWORD *)this + 97) = v419;

      v421 = *((_QWORD *)this + 81);
      v422 = (void *)*((_QWORD *)this + 97);
      re::StringID::invalid((re::StringID *)buf);
      if ((v423 & 1) == 0
      {
        re::introspect<re::DRContextService>(void)::info = re::introspect_DRContextService(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::DRContextService>(void)::info, (StringID *)buf, v422);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v421 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);
      Mode = (re *)DRContextConfigGetMode();
      if (Mode)
      {
        v425 = *((_QWORD *)this + 105);
        if (v425 && *(_QWORD *)(v425 + 104))
        {
          v426 = objc_retainAutorelease(*((id *)this + 54));
          v427 = *(id *)(*((_QWORD *)this + 105) + 184);
          objc_initWeak((id *)&__str, (char *)this + 8);
          v591[0] = v407;
          v591[1] = 3321888768;
          v591[2] = ___ZN2re6Engine4initERKNS_19EngineConfigurationE_block_invoke_2;
          v591[3] = &unk_24ED29A08;
          v167 = v591;
          v593 = v427;
          v428 = v426;
          v592 = v428;
          v594[0] = 0;
          objc_copyWeak(v594, (id *)&__str);
          DRContextSetOnCommitComplete();
          v227 = (char *)this + 576;
          objc_destroyWeak(v594);
          v594[0] = 0;

          if (v593)
          {

            v593 = 0;
          }
          objc_destroyWeak((id *)&__str);
          if (v427)

        }
      }
      else
      {
        v594[1] = v407;
        v594[2] = (id)3221225472;
        v594[3] = ___ZN2re6Engine4initERKNS_19EngineConfigurationE_block_invoke;
        v594[4] = &__block_descriptor_40_e45_v24__0___DRContext__8___DRResourcesCommit__16l;
        v594[5] = this;
        Mode = (re *)DRContextSetOnCommitComplete();
      }
      v429 = re::globalAllocators(Mode);
      v430 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v429[2] + 32))(v429[2], 184, 8);
      *((_QWORD *)this + 98) = re::DirectResourceAssetTracker::DirectResourceAssetTracker((uint64_t)v430, *((_QWORD *)this + 97), (id *)(*((_QWORD *)this + 105) + 184), *(_QWORD *)(*((_QWORD *)this + 105) + 32), *((_QWORD *)this + 93), *(_QWORD *)(*((_QWORD *)this + 105) + 64));
      v431 = *((_QWORD *)this + 81);
      re::StringID::invalid((re::StringID *)buf);
      if ((v432 & 1) == 0
      {
        re::introspect<re::DirectResourceAssetTracker>(void)::info = re::introspect_DirectResourceAssetTracker(0);
      }
      re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::DirectResourceAssetTracker>(void)::info, (StringID *)buf, v430);
      re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v431 + 16, (uint64_t *)&__str);
      re::StringID::destroyString((re::StringID *)&__str.var1);
      re::StringID::destroyString((re::StringID *)buf);

    }
  }
  if ((*((_BYTE *)this + 421) & 1) != 0)
  {
    if (*((_BYTE *)a2 + 215))
    {
      v433 = operator new(0x3E0uLL);
      v433[1] = 0;
      v433[2] = 0;
      *v433 = &off_24ED3DD98;
      v434 = re::AudioSharedSceneManager::AudioSharedSceneManager((re::AudioSharedSceneManager *)(v433 + 4));
      *((_QWORD *)this + 141) = v434;
      v435 = (std::__shared_weak_count *)*((_QWORD *)this + 142);
      *((_QWORD *)this + 142) = v433;
      if (v435)
      {
        p_shared_owners = (unint64_t *)&v435->__shared_owners_;
        do
          v437 = __ldaxr(p_shared_owners);
        while (__stlxr(v437 - 1, p_shared_owners));
        if (!v437)
        {
          ((void (*)(std::__shared_weak_count *))v435->__on_zero_shared)(v435);
          std::__shared_weak_count::__release_weak(v435);
        }
      }
      v438 = (id)*re::appLogObjects(v434);
      if (os_log_type_enabled(v438, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)&__str.var0 = 0;
        v439 = "[RE/Engine] [init] Creating AudioSharedSceneManager";
        goto LABEL_371;
      }
    }
    else
    {
      v440 = operator new(0xD0uLL);
      v440[1] = 0;
      v440[2] = 0;
      *v440 = &off_24ED3DDE8;
      v441 = re::AudioMultiSceneManager::AudioMultiSceneManager((re::AudioMultiSceneManager *)(v440 + 3));
      *((_QWORD *)this + 141) = v441;
      v442 = (std::__shared_weak_count *)*((_QWORD *)this + 142);
      *((_QWORD *)this + 142) = v440;
      if (v442)
      {
        v443 = (unint64_t *)&v442->__shared_owners_;
        do
          v444 = __ldaxr(v443);
        while (__stlxr(v444 - 1, v443));
        if (!v444)
        {
          ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
          std::__shared_weak_count::__release_weak(v442);
        }
      }
      v438 = (id)*re::appLogObjects(v441);
      if (os_log_type_enabled(v438, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)&__str.var0 = 0;
        v439 = "[RE/Engine] [init] Creating AudioMultiSceneManager";
LABEL_371:
        _os_log_impl(&dword_224FE9000, v438, OS_LOG_TYPE_DEFAULT, v439, (uint8_t *)&__str, 2u);
      }
    }

    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 141) + 120))(*((_QWORD *)this + 141), *((unsigned __int8 *)a2 + 215));
    v445 = *((_QWORD *)this + 141);
    v446 = *((id *)this + 54);
    (*(void (**)(uint64_t, id))(*(_QWORD *)v445 + 56))(v445, v446);

    v447 = *((_QWORD *)this + 81);
    v448 = (void *)*((_QWORD *)this + 141);
    re::StringID::invalid((re::StringID *)buf);
    if ((v449 & 1) == 0
    {
      re::introspect<re::AudioSceneService>(void)::info = re::introspect_AudioSceneService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::AudioSceneService>(void)::info, (StringID *)buf, v448);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v447 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
  }
  if (*v227 && (*((_BYTE *)this + 420) & 0x10) != 0)
  {
    v450 = re::globalAllocators((re *)v332);
    v451 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v450[2] + 32))(v450[2], 176, 8);
    *(_OWORD *)(v451 + 48) = 0u;
    *(_OWORD *)(v451 + 64) = 0u;
    *(_OWORD *)(v451 + 112) = 0u;
    *(_OWORD *)(v451 + 128) = 0u;
    *(_OWORD *)(v451 + 144) = 0u;
    *(_OWORD *)(v451 + 160) = 0u;
    *(_OWORD *)(v451 + 80) = 0u;
    *(_OWORD *)(v451 + 96) = 0u;
    *(_QWORD *)v451 = &off_24ED6A9A0;
    *(_OWORD *)(v451 + 8) = 0u;
    *(_OWORD *)(v451 + 24) = 0u;
    *(_QWORD *)(v451 + 40) = 0x7FFFFFFF00000000;
    *(_OWORD *)(v451 + 72) = 0u;
    *(_QWORD *)(v451 + 88) = 0x7FFFFFFF00000000;
    *(_OWORD *)(v451 + 56) = 0u;
    *(_OWORD *)(v451 + 120) = 0u;
    *(_OWORD *)(v451 + 130) = 0u;
    *(_OWORD *)(v451 + 104) = 0u;
    re::VideoAutoCounter::VideoAutoCounter((re::VideoAutoCounter *)(v451 + 160));
    *((_QWORD *)this + 108) = v451;
    re::VideoManager::init((_anonymous_namespace_ *)v451, *((_QWORD *)this + 81));
    v452 = *((_QWORD *)this + 81);
    v453 = (void *)*((_QWORD *)this + 108);
    re::StringID::invalid((re::StringID *)buf);
    if ((v454 & 1) == 0
    {
      re::introspect<re::VideoService>(void)::info = re::introspect_VideoService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::VideoService>(void)::info, (StringID *)buf, v453);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v452 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    if ((*((_BYTE *)this + 424) & 0x10) != 0)
      re::VideoManager::initializeVideoProcessorIfNeeded(*((re::VideoManager **)this + 108), *((re::RenderManager **)this + 105));
  }
  if (*((_QWORD *)this + 93) && *((_QWORD *)this + 105))
  {
    v455 = re::globalAllocators((re *)v332);
    v456 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v455[2] + 32))(v455[2], 80, 8);
    *(_QWORD *)v456 = &off_24ED68E98;
    *(_OWORD *)(v456 + 24) = 0u;
    *(_OWORD *)(v456 + 40) = 0u;
    *(_OWORD *)(v456 + 52) = 0u;
    *(_OWORD *)(v456 + 8) = 0u;
    *(_QWORD *)(v456 + 68) = 0x7FFFFFFFLL;
    *((_QWORD *)this + 109) = v456;
    *((_QWORD *)v456 + 1) = *((_QWORD *)this + 93);
    v457 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)buf);
    if ((v458 & 1) == 0
    {
      re::introspect<re::MaterialParametersService>(void)::info = re::introspect_MaterialParametersService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::MaterialParametersService>(void)::info, (StringID *)buf, v456);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v457 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
  }
  v459 = *((_DWORD *)this + 105);
  if ((v459 & 8) != 0)
  {
    re::AssetHelper::registerDefaultAssetTypes(*((re::AssetManager **)this + 93), *((_QWORD *)this + 81), (16 * *((_WORD *)this + 212)) & 0x100 | (v459 >> 12) & 1);
    v459 = *((_DWORD *)this + 105);
  }
  if ((v459 & 0x40) != 0)
  {
    v460 = re::globalAllocators((re *)v332);
    v461 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v460[2] + 32))(v460[2], 256, 8);
    *(_QWORD *)v461 = off_24ED7D7F8;
    *((_WORD *)v461 + 4) = 0;
    *((_QWORD *)v461 + 27) = 0;
    *((_QWORD *)v461 + 28) = 0;
    *((_WORD *)v461 + 116) = 0;
    *(_QWORD *)(v461 + 244) = 0;
    *(_QWORD *)(v461 + 236) = 0;
    *((_WORD *)v461 + 126) = 0;
    *((_OWORD *)v461 + 1) = 0u;
    *((_OWORD *)v461 + 2) = 0u;
    *((_OWORD *)v461 + 3) = 0u;
    *((_OWORD *)v461 + 4) = 0u;
    *((_OWORD *)v461 + 5) = 0u;
    *((_OWORD *)v461 + 6) = 0u;
    *((_OWORD *)v461 + 7) = 0u;
    *((_OWORD *)v461 + 8) = 0u;
    *((_OWORD *)v461 + 9) = 0u;
    *((_OWORD *)v461 + 10) = 0u;
    *((_OWORD *)v461 + 11) = 0u;
    *((_OWORD *)v461 + 12) = 0u;
    *(_QWORD *)(v461 + 206) = 0;
    *((_QWORD *)this + 112) = v461;
    v462 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)buf);
    if ((v463 & 1) == 0
    {
      re::introspect<re::InputService>(void)::info = re::introspect_InputService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::InputService>(void)::info, (StringID *)buf, v461);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v462 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    re::Engine::setAcceptingInput(this, (re::InputManager *)1);
  }
  v464 = re::globalAllocators((re *)v332);
  v465 = (re::SceneUnderstandingManager *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v464[2]
                                                                                               + 32))(v464[2], 336, 16);
  v466 = re::SceneUnderstandingManager::SceneUnderstandingManager(v465);
  *((_QWORD *)this + 118) = v467;
  (*(void (**)(uint64_t, double))(*(_QWORD *)v467 + 16))(v467, v466);
  v468 = *((_QWORD *)this + 81);
  v469 = (void *)*((_QWORD *)this + 118);
  re::StringID::invalid((re::StringID *)buf);
  if ((v470 & 1) == 0
  {
    re::introspect<re::SceneUnderstandingService>(void)::info = re::introspect_SceneUnderstandingService(0);
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::SceneUnderstandingService>(void)::info, (StringID *)buf, v469);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v468 + 16, (uint64_t *)&__str);
  re::StringID::destroyString((re::StringID *)&__str.var1);
  re::StringID::destroyString((re::StringID *)buf);
  v472 = re::globalAllocators(v471);
  v473 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v472[2] + 32))(v472[2], 192, 8);
  v474 = *((_QWORD *)this + 81);
  *((_QWORD *)v473 + 1) = 0;
  *((_QWORD *)v473 + 2) = 0;
  *((_DWORD *)v473 + 6) = 0;
  *(_QWORD *)v473 = 0;
  *((_DWORD *)v473 + 16) = 0;
  *((_OWORD *)v473 + 2) = 0u;
  *((_OWORD *)v473 + 3) = 0u;
  *(_OWORD *)(v473 + 100) = 0u;
  *(_OWORD *)(v473 + 88) = 0u;
  *(_OWORD *)(v473 + 72) = 0u;
  *(_QWORD *)(v473 + 116) = 0x7FFFFFFFLL;
  *((_DWORD *)v473 + 40) = 0;
  *((_OWORD *)v473 + 8) = 0u;
  *((_OWORD *)v473 + 9) = 0u;
  *(_QWORD *)(v473 + 164) = 0x7FFFFFFFLL;
  *((_QWORD *)v473 + 22) = 0;
  *((_QWORD *)v473 + 23) = 0;
  *((_QWORD *)v473 + 22) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v474);
  *((_QWORD *)this + 133) = v473;
  v475 = *((_QWORD *)this + 81);
  re::StringID::invalid((re::StringID *)buf);
  if ((v476 & 1) == 0
  {
    re::introspect<re::ecs2::RemoteEffectsService>(void)::info = re::ecs2::introspect_RemoteEffectsService(0);
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::RemoteEffectsService>(void)::info, (StringID *)buf, v473);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v475 + 16, (uint64_t *)&__str);
  re::StringID::destroyString((re::StringID *)&__str.var1);
  re::StringID::destroyString((re::StringID *)buf);
  v478 = re::globalAllocators(v477);
  v479 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v478[2] + 32))(v478[2], 552, 8);
  *((_QWORD *)this + 132) = re::ecs2::CARESortingManager::CARESortingManager((uint64_t)v479, *((_QWORD *)this + 81));
  v480 = *((_QWORD *)this + 81);
  re::StringID::invalid((re::StringID *)buf);
  v481 = atomic_load((unsigned __int8 *)&qword_2540FB358);
  if ((v481 & 1) == 0 && __cxa_guard_acquire(&qword_2540FB358))
  {
    qword_2540FB350 = re::ecs2::introspect_CARESortingService(0);
    __cxa_guard_release(&qword_2540FB358);
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)qword_2540FB350, (StringID *)buf, v479);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v480 + 16, (uint64_t *)&__str);
  re::StringID::destroyString((re::StringID *)&__str.var1);
  re::StringID::destroyString((re::StringID *)buf);
  v482 = *((_DWORD *)a2 + 14);
  v484 = *(uint64_t (**)(void))(*(_QWORD *)re::globalAllocators(v483)[2] + 32);
  if (v482)
  {
    v485 = (re::ManualClock *)v484();
    *((_QWORD *)this + 114) = re::ManualClock::ManualClock(v485);
  }
  else
  {
    v486 = (id *)v484();
    v590 = *v586;
    re::DisplayLinkClock::DisplayLinkClock((uint64_t)v486, &v590);

    re::DisplayLinkClock::init((re::DisplayLinkClock *)v486);
    *((_QWORD *)this + 114) = v486;
    v487 = (re *)objc_msgSend(v486[18], "maximumRefreshRate");
    v489 = 1.0 / v488;
    v490 = (id)*re::appLogObjects(v487);
    v491 = os_log_type_enabled(v490, OS_LOG_TYPE_DEFAULT);
    if (v489 == 0.0)
    {
      if (v491)
      {
        *(_WORD *)&__str.var0 = 0;
        _os_log_impl(&dword_224FE9000, v490, OS_LOG_TYPE_DEFAULT, "Refresh rate of main display: unknown", (uint8_t *)&__str, 2u);
      }
    }
    else if (v491)
    {
      __str.var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)134217984;
      *(double *)(&__str.var0 + 1) = v489;
      _os_log_impl(&dword_224FE9000, v490, OS_LOG_TYPE_DEFAULT, "Refresh rate of main display: %f", (uint8_t *)&__str, 0xCu);
    }

  }
  v492 = *((_QWORD *)this + 81);
  v493 = (void *)*((_QWORD *)this + 114);
  re::StringID::invalid((re::StringID *)buf);
  v494 = atomic_load((unsigned __int8 *)&qword_2540FB368);
  if ((v494 & 1) == 0 && __cxa_guard_acquire(&qword_2540FB368))
  {
    qword_2540FB360 = re::introspect_SimulationClock(0);
    __cxa_guard_release(&qword_2540FB368);
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)qword_2540FB360, (StringID *)buf, v493);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v492 + 16, (uint64_t *)&__str);
  re::StringID::destroyString((re::StringID *)&__str.var1);
  re::StringID::destroyString((re::StringID *)buf);
  *((CFTimeInterval *)this + 146) = CACurrentMediaTime();
  v496 = re::globalAllocators(v495);
  v497 = (re::VariableStepTimer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v496[2] + 32))(v496[2], 248, 8);
  v498 = re::VariableStepTimer::VariableStepTimer(v497);
  *((_QWORD *)this + 115) = v498;
  (*(void (**)(re::VariableStepTimer *, _QWORD))(*(_QWORD *)v498 + 24))(v498, *((_QWORD *)this + 114));
  v499 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 115) + 120))(*((_QWORD *)this + 115));
  *(_QWORD *)&__str.var0 = this;
  __str.var1 = (char *)re::Engine::timeDidChange;
  *(_QWORD *)&__str_16.var0 = 0;
  __str_16.var1 = (char *)re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::createSubscription<re::Engine>(re::Engine *,REEventHandlerResult (re::Engine::*)(re::SimulationTimer*,re::SimulationTimerEventArgs const&))::{lambda(re::SimulationTimer*,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription const&,re::SimulationTimerEventArgs const&)#1}::__invoke;
  re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::addSubscription(v499, (uint64_t)&__str);
  v500 = *((_QWORD *)this + 81);
  v501 = (void *)*((_QWORD *)this + 115);
  re::StringID::invalid((re::StringID *)buf);
  if ((v502 & 1) == 0
  {
    re::introspect<re::SimulationTimer>(void)::info = re::introspect_SimulationTimer(0);
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::SimulationTimer>(void)::info, (StringID *)buf, v501);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v500 + 16, (uint64_t *)&__str);
  re::StringID::destroyString((re::StringID *)&__str.var1);
  re::StringID::destroyString((re::StringID *)buf);
  if (*v227 && (*((_BYTE *)this + 420) & 0x10) != 0)
  {
    v504 = *((_QWORD *)this + 83);
    if (v504)
    {
      v505 = *((_QWORD *)this + 140);
      v589 = v505;
      if (v505)
        v506 = (id)(v505 + 8);
      re::ecs2::ECSManager::addSystem(v504, &v589, 0xFFFFFFFF, 0);
      if (v589)
      {

        v589 = 0;
      }
    }
    v507 = *((_QWORD *)this + 93);
    if (v507)
      *(_QWORD *)(v507 + 1416) = *((_QWORD *)this + 117);
  }
  if ((v508 & 1) == 0)
  {
    if ((_DWORD)v503)
    {
      re::introspect<re::ecs2::ThrottleService>(void)::info = re::ecs2::introspect_ThrottleService(0);
    }
  }
  v509 = *((_DWORD *)this + 105);
  if ((v509 & 0x8000) != 0)
  {
    v510 = re::globalAllocators(v503);
    v511 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v510[2] + 32))(v510[2], 136, 8);
    *(_OWORD *)v511 = 0u;
    *(_OWORD *)(v511 + 16) = 0u;
    *(_OWORD *)(v511 + 32) = 0u;
    *(_OWORD *)(v511 + 48) = 0u;
    *(_OWORD *)(v511 + 64) = 0u;
    *(_OWORD *)(v511 + 80) = 0u;
    *(_OWORD *)(v511 + 96) = 0u;
    *(_OWORD *)(v511 + 112) = 0u;
    *(_QWORD *)(v511 + 128) = 0;
    re::ecs2::ThrottleManager::ThrottleManager((re::ecs2::ThrottleManager *)v511);
    v513 = *((_QWORD *)this + 110);
    *((_QWORD *)this + 110) = v512;
    if (v513)
    {

      v512 = *((_QWORD *)this + 110);
    }
    re::ecs2::ThrottleManager::init(v512, *((_QWORD *)this + 81));
    v514 = *((_QWORD *)this + 81);
    v515 = (void *)*((_QWORD *)this + 110);
    re::StringID::invalid((re::StringID *)buf);
    if ((v516 & 1) == 0
    {
      re::introspect<re::ecs2::ThrottleService>(void)::info = re::ecs2::introspect_ThrottleService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::ecs2::ThrottleService>(void)::info, (StringID *)buf, v515);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v514 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v509 = *((_DWORD *)this + 105);
  }
  if ((v509 & 0x100000) != 0)
  {
    v517 = *((_QWORD *)this + 81);
    v518 = re::globalAllocators(v503);
    v519 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v518[2] + 32))(v518[2], 408, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v519, 0);
    *(_QWORD *)v519 = &off_24ED29500;
    *(_OWORD *)(v519 + 24) = 0u;
    *(_OWORD *)(v519 + 40) = 0u;
    *(_OWORD *)(v519 + 56) = 0u;
    *(_OWORD *)(v519 + 72) = 0u;
    *(_DWORD *)(v519 + 88) = 0;
    *(_QWORD *)(v519 + 92) = 0x7FFFFFFFLL;
    *(_QWORD *)(v519 + 112) = 0;
    *(_QWORD *)(v519 + 120) = 0;
    *(_QWORD *)(v519 + 104) = 0;
    *(_BYTE *)(v519 + 128) = 1;
    *(_QWORD *)(v519 + 136) = 0;
    *(_QWORD *)(v519 + 144) = 0;
    *(_DWORD *)(v519 + 129) = 0;
    *(_BYTE *)(v519 + 133) = 0;
    *(_DWORD *)(v519 + 152) = 1;
    *(_QWORD *)(v519 + 160) = 0;
    *(_QWORD *)(v519 + 168) = 0;
    *(_DWORD *)(v519 + 184) = 0;
    *(_QWORD *)(v519 + 176) = 0;
    *(_DWORD *)(v519 + 224) = 0;
    *(_OWORD *)(v519 + 192) = 0u;
    *(_OWORD *)(v519 + 208) = 0u;
    *(_QWORD *)(v519 + 228) = 0x7FFFFFFFLL;
    *(_QWORD *)(v519 + 400) = 0;
    *(_OWORD *)(v519 + 256) = 0u;
    *(_OWORD *)(v519 + 272) = 0u;
    *(_OWORD *)(v519 + 288) = 0u;
    *(_OWORD *)(v519 + 304) = 0u;
    *(_OWORD *)(v519 + 320) = 0u;
    *(_OWORD *)(v519 + 336) = 0u;
    *(_OWORD *)(v519 + 352) = 0u;
    *(_OWORD *)(v519 + 368) = 0u;
    *(_OWORD *)(v519 + 240) = 0u;
    *(_OWORD *)(v519 + 380) = 0u;
    re::FrameAnalysisManager::init(v520, v517);
    v521 = *((_QWORD *)this + 116);
    *((_QWORD *)this + 116) = v519;
    if (v521)
    {

      v519 = *((_QWORD *)this + 116);
    }
    v522 = *((_QWORD *)this + 81);
    re::StringID::invalid((re::StringID *)buf);
    if ((v523 & 1) == 0
    {
      re::introspect<re::FrameAnalysisService>(void)::info = re::introspect_FrameAnalysisService(0);
    }
    re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&__str, (const re::IntrospectionBase *)re::introspect<re::FrameAnalysisService>(void)::info, (StringID *)buf, (void *)v519);
    re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(v522 + 16, (uint64_t *)&__str);
    re::StringID::destroyString((re::StringID *)&__str.var1);
    re::StringID::destroyString((re::StringID *)buf);
    v524 = *((_QWORD *)this + 119);
    if (v524)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v524 + 16));
      v525 = re::ProfilerManager::getProcessorId<re::FrameAnalysisProfilerProcessor>();
      v526 = (_QWORD *)operator new();
      *v526 = 0;
      v526[1] = 0;
      *v526 = &off_24ED295B8;
      v526[3] = 0;
      v526[4] = 0;
      v526[2] = 0;
      v527 = (uint64_t *)(v524 + 480);
      v528 = *(_QWORD *)(v524 + 488);
      if (v528)
      {
        v529 = (uint8x8_t)vcnt_s8((int8x8_t)v528);
        v529.i16[0] = vaddlv_u8(v529);
        if (v529.u32[0] > 1uLL)
        {
          v167 = (uint64_t *)v525;
          if (v528 <= v525)
            v167 = (uint64_t *)(v525 % v528);
        }
        else
        {
          v167 = (uint64_t *)((v528 - 1) & v525);
        }
        v530 = *(_QWORD **)(*v527 + 8 * (_QWORD)v167);
        if (v530)
        {
          for (n = (_QWORD *)*v530; n; n = (_QWORD *)*n)
          {
            v532 = n[1];
            if (v532 == v525)
            {
              if (n[2] == v525)
                goto LABEL_461;
            }
            else
            {
              if (v529.u32[0] > 1uLL)
              {
                if (v532 >= v528)
                  v532 %= v528;
              }
              else
              {
                v532 &= v528 - 1;
              }
              if ((uint64_t *)v532 != v167)
                break;
            }
          }
        }
      }
      v533 = operator new(0x20uLL);
      v533[1] = v525;
      v533[2] = v525;
      v533[3] = v526;
      v534 = (float)(unint64_t)(*(_QWORD *)(v524 + 504) + 1);
      v535 = *(float *)(v524 + 512);
      if (!v528 || (float)(v535 * (float)v528) < v534)
      {
        v536 = 1;
        if (v528 >= 3)
          v536 = (v528 & (v528 - 1)) != 0;
        v537 = v536 | (2 * v528);
        v538 = vcvtps_u32_f32(v534 / v535);
        if (v537 <= v538)
          v539 = v538;
        else
          v539 = v537;
        std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>(v524 + 480, v539);
        v528 = *(_QWORD *)(v524 + 488);
        if ((v528 & (v528 - 1)) != 0)
        {
          if (v528 <= v525)
            v167 = (uint64_t *)(v525 % v528);
          else
            v167 = (uint64_t *)v525;
        }
        else
        {
          v167 = (uint64_t *)((v528 - 1) & v525);
        }
      }
      v540 = *v527;
      v541 = *(_QWORD **)(*v527 + 8 * (_QWORD)v167);
      if (v541)
      {
        *v533 = *v541;
        goto LABEL_459;
      }
      v542 = *(_QWORD *)(v524 + 496);
      *v533 = v542;
      *(_QWORD *)(v524 + 496) = v533;
      *(_QWORD *)(v540 + 8 * (_QWORD)v167) = v524 + 496;
      if (v542)
      {
        v543 = *(_QWORD *)(v542 + 8);
        if ((v528 & (v528 - 1)) != 0)
        {
          if (v543 >= v528)
            v543 %= v528;
        }
        else
        {
          v543 &= v528 - 1;
        }
        v541 = (_QWORD *)(*v527 + 8 * v543);
LABEL_459:
        *v541 = v533;
      }
      ++*(_QWORD *)(v524 + 504);
LABEL_461:
      os_unfair_lock_unlock((os_unfair_lock_t)(v524 + 16));
      v544 = *((_QWORD *)this + 119);
      os_unfair_lock_lock((os_unfair_lock_t)(v544 + 16));
      *(_DWORD *)(v544 + 532) = 0;
      isStatisticCollectionEnabled = re::ProfilerManager::getProcessorId<re::FrameAnalysisProfilerProcessor>();
      v546 = *(_QWORD **)(v544 + 496);
      if (v546)
      {
        v547 = isStatisticCollectionEnabled;
        do
        {
          v548 = (_BYTE *)v546[3];
          if (v546[2] == v547)
          {
            v548[8] = 1;
            isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v548 + 64))(v548, 1);
          }
          if (v548[8])
          {
            if (*(_BYTE *)(v544 + 532))
              v549 = 1;
            else
              v549 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v548 + 24))(v548);
            *(_BYTE *)(v544 + 532) = v549;
            if (*(_BYTE *)(v544 + 533))
              v550 = 1;
            else
              v550 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v548 + 32))(v548);
            *(_BYTE *)(v544 + 533) = v550;
            if (*(_BYTE *)(v544 + 534))
              v551 = 1;
            else
              v551 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v548 + 40))(v548);
            *(_BYTE *)(v544 + 534) = v551;
            if (*(_BYTE *)(v544 + 535))
              isStatisticCollectionEnabled = 1;
            else
              isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v548 + 48))(v548);
            *(_BYTE *)(v544 + 535) = isStatisticCollectionEnabled;
          }
          v546 = (_QWORD *)*v546;
        }
        while (v546);
      }
      if (*(_BYTE *)(v544 + 532))
      {
        v552 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
        isStatisticCollectionEnabled = os_log_type_enabled(v552, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)isStatisticCollectionEnabled)
        {
          *(_WORD *)&__str.var0 = 0;
          _os_log_impl(&dword_224FE9000, v552, OS_LOG_TYPE_DEFAULT, "Processor needs events but event collection is disabled.", (uint8_t *)&__str, 2u);
        }
      }
      if (*(_BYTE *)(v544 + 533))
      {
        isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
        if ((isStatisticCollectionEnabled & 1) == 0)
        {
          v553 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
          isStatisticCollectionEnabled = os_log_type_enabled(v553, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)isStatisticCollectionEnabled)
          {
            *(_WORD *)&__str.var0 = 0;
            _os_log_impl(&dword_224FE9000, v553, OS_LOG_TYPE_DEFAULT, "Processor needs statistics but statistic collection is disabled.", (uint8_t *)&__str, 2u);
          }
        }
      }
      if (*(_BYTE *)(v544 + 534))
      {
        v554 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
        isStatisticCollectionEnabled = os_log_type_enabled(v554, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)isStatisticCollectionEnabled)
        {
          *(_WORD *)&__str.var0 = 0;
          _os_log_impl(&dword_224FE9000, v554, OS_LOG_TYPE_DEFAULT, "Processor needs attributions but attribution collection is disabled.", (uint8_t *)&__str, 2u);
        }
      }
      if (*(_BYTE *)(v544 + 535))
      {
        v555 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
        if (os_log_type_enabled(v555, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)&__str.var0 = 0;
          _os_log_impl(&dword_224FE9000, v555, OS_LOG_TYPE_DEFAULT, "Processor needs memory statistics but memory statistic collection is disabled.", (uint8_t *)&__str, 2u);
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v544 + 16));
      v556 = *((_QWORD *)this + 116);
      v557 = *((_QWORD *)this + 119);
      v558 = (os_unfair_lock_s *)(v557 + 16);
      os_unfair_lock_lock((os_unfair_lock_t)(v557 + 16));
      *(_QWORD *)&__str.var0 = re::ProfilerManager::getProcessorId<re::FrameAnalysisProfilerProcessor>();
      v559 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((_QWORD *)(v557 + 480), (unint64_t *)&__str);
      if (v559)
        v560 = v559[3];
      else
        v560 = 0;
      os_unfair_lock_unlock(v558);
      *(_QWORD *)(v556 + 32) = v560;
    }
  }
  v562 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)this + 150, 0);
  ++*((_DWORD *)this + 306);
  re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)this + 161, 0);
  ++*((_DWORD *)this + 328);
  (*(void (**)(re::Engine *))(*(_QWORD *)this + 32))(this);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 115) + 128))(*((_QWORD *)this + 115));
  block[0] = v407;
  block[1] = 3221225472;
  block[2] = ___ZN2re6Engine4initERKNS_19EngineConfigurationE_block_invoke_42;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  v563 = dispatch_block_create((dispatch_block_flags_t)0, block);
  v564 = (void *)*((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = v563;

  re::Engine::configurePhases((uint64_t)this);
  re::Defaults::BOOLValue((re::Defaults *)"enableReportingComponentsWithoutExplicitRealityFileSerializationTag", v565, (char *)&__str);
  if (*(_BYTE *)&__str.var0 && *((_BYTE *)&__str.var0 + 1))
  {
    v567 = re::ecs2::ComponentTypeRegistry::instance(v566);
    v568 = *((_QWORD *)v567 + 3);
    re::ecs2::ComponentHelper::getComponentsWithoutAnyExplicitRealityFileSerializationFlag((re::ecs2::ComponentHelper *)v567, (uint64_t)&__str);
    if (*(_QWORD *)&__str_16.var0)
    {
      v569 = *(const StringID **)&v619.var0;
      v570 = 16 * *(_QWORD *)&__str_16.var0;
      v571 = &stru_24EDA2070;
      do
      {
        re::StringID::StringID((re::StringID *)buf, v569);
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%s, "), *(_QWORD *)&v633[4]);
        v572 = (void *)objc_claimAutoreleasedReturnValue();
        -[__CFString stringByAppendingString:](v571, "stringByAppendingString:", v572);
        v573 = (__CFString *)objc_claimAutoreleasedReturnValue();

        re::StringID::destroyString((re::StringID *)buf);
        ++v569;
        v571 = v573;
        v570 -= 16;
      }
      while (v570);
    }
    else
    {
      v573 = &stru_24EDA2070;
    }
    -[__CFString substringToIndex:](v573, "substringToIndex:", -[__CFString length](v573, "length") - 2);
    v574 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("These %zu of %zu built-in RE Components are not tagged correctly for Reality File serialization: %@"), *(_QWORD *)&__str_16.var0, v568, v574);
    v575 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%s %s %s"), "Components must be explicitly tagged with one of the serialization flags", "kTransient, kExcludeFromRealityFile or kIncludeInRealityFile", "and mulitple flags are not allowed.");
    v576 = (re *)objc_claimAutoreleasedReturnValue();
    v577 = *re::appLogObjects(v576);
    if (os_log_type_enabled(v577, OS_LOG_TYPE_DEFAULT))
    {
      v578 = objc_retainAutorelease(v576);
      v579 = v577;
      v580 = -[re UTF8String](v578, "UTF8String");
      v581 = objc_msgSend(objc_retainAutorelease(v575), "UTF8String");
      v582 = objc_msgSend(objc_retainAutorelease(v574), "UTF8String");
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v633 = v580;
      *(_WORD *)&v633[8] = 2080;
      *(_QWORD *)&v633[10] = v581;
      v634 = 2080;
      v635 = v582;
      _os_log_impl(&dword_224FE9000, v579, OS_LOG_TYPE_DEFAULT, "%s\n%s\n%s", buf, 0x20u);

    }
    re::DynamicArray<re::StringID>::deinit((uint64_t)&__str);
  }
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
    result = kdebug_trace();
  if (v598[0])
  {
    result = v599;
    if (v599)
    {
      if ((v600 & 1) != 0)
        result = (*(uint64_t (**)(void))(*(_QWORD *)v599 + 40))();
    }
  }
  if (v602.var0)
  {
    result = (uint64_t)v602.var1;
    if (v602.var1)
    {
      if ((v603 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v602.var1 + 40))();
    }
  }
  return result;
}

void re::ServiceRegistry::add<re::EventBus>(uint64_t a1, void *a2, StringID *a3)
{
  void *v3;
  unsigned __int8 v5;
  __objc2_class_ro **p_info;
  int v7;
  StringID *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  p_info = VideoSpillMapMetalSession.info;
  if ((v5 & 1) == 0)
  {
    v8 = a3;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    a3 = v8;
    v3 = a2;
    if (v7)
    {
      re::introspect<re::EventBus>(void)::info = re::introspect_EventBus(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      a3 = v8;
      v3 = a2;
    }
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&v10, (const re::IntrospectionBase *)p_info[301], a3, v3);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(a1 + 16, &v10);
  re::StringID::destroyString((re::StringID *)&v11);
}

uint64_t re::ProfilerManager::getProcessor<re::FrameProfiler,void>(uint64_t a1)
{
  os_unfair_lock_s *v2;
  _QWORD *v3;
  uint64_t v4;
  __guard v6;

  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v6 = re::ProfilerManager::getProcessorId<re::FrameProfiler>();
  v3 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((_QWORD *)(a1 + 480), (unint64_t *)&v6);
  if (v3)
    v4 = v3[3];
  else
    v4 = 0;
  os_unfair_lock_unlock(v2);
  return v4;
}

void re::ProfilerManager::setProcessorEnabled<re::FrameProfiler,void>(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t isStatisticCollectionEnabled;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  char v10;
  char v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t v16[16];
  uint8_t v17[16];
  uint8_t v18[16];
  uint8_t buf[16];

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(_DWORD *)(a1 + 532) = 0;
  isStatisticCollectionEnabled = re::ProfilerManager::getProcessorId<re::FrameProfiler>();
  v6 = *(_QWORD **)(a1 + 496);
  if (v6)
  {
    v7 = isStatisticCollectionEnabled;
    do
    {
      v8 = (_BYTE *)v6[3];
      if (v6[2] == v7)
      {
        v8[8] = a2;
        isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v8 + 64))(v8, a2);
      }
      if (v8[8])
      {
        if (*(_BYTE *)(a1 + 532))
          v9 = 1;
        else
          v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8);
        *(_BYTE *)(a1 + 532) = v9;
        if (*(_BYTE *)(a1 + 533))
          v10 = 1;
        else
          v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 32))(v8);
        *(_BYTE *)(a1 + 533) = v10;
        if (*(_BYTE *)(a1 + 534))
          v11 = 1;
        else
          v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 40))(v8);
        *(_BYTE *)(a1 + 534) = v11;
        if (*(_BYTE *)(a1 + 535))
          isStatisticCollectionEnabled = 1;
        else
          isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 48))(v8);
        *(_BYTE *)(a1 + 535) = isStatisticCollectionEnabled;
      }
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  if (*(_BYTE *)(a1 + 532))
  {
    v12 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Processor needs events but event collection is disabled.", buf, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 533))
  {
    isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
    if ((isStatisticCollectionEnabled & 1) == 0)
    {
      v13 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
      isStatisticCollectionEnabled = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Processor needs statistics but statistic collection is disabled.", v18, 2u);
      }
    }
  }
  if (*(_BYTE *)(a1 + 534))
  {
    v14 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Processor needs attributions but attribution collection is disabled.", v17, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 535))
  {
    v15 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Processor needs memory statistics but memory statistic collection is disabled.", v16, 2u);
    }
  }
  os_unfair_lock_unlock(v4);
}

void re::ProfilerManager::setProcessorEnabled<re::ProfilerLogProcessor,void>(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t isStatisticCollectionEnabled;
  _QWORD *v6;
  __objc2_class_ro *v7;
  _BYTE *v8;
  char v9;
  char v10;
  char v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  __int16 v16[8];
  uint8_t v17[16];
  uint8_t v18[16];
  uint8_t buf[16];

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(_DWORD *)(a1 + 532) = 0;
  isStatisticCollectionEnabled = (uint64_t)re::ProfilerManager::getProcessorId<re::ProfilerLogProcessor>();
  v6 = *(_QWORD **)(a1 + 496);
  if (v6)
  {
    v7 = (__objc2_class_ro *)isStatisticCollectionEnabled;
    do
    {
      v8 = (_BYTE *)v6[3];
      if ((__objc2_class_ro *)v6[2] == v7)
      {
        v8[8] = a2;
        isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v8 + 64))(v8, a2);
      }
      if (v8[8])
      {
        if (*(_BYTE *)(a1 + 532))
          v9 = 1;
        else
          v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8);
        *(_BYTE *)(a1 + 532) = v9;
        if (*(_BYTE *)(a1 + 533))
          v10 = 1;
        else
          v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 32))(v8);
        *(_BYTE *)(a1 + 533) = v10;
        if (*(_BYTE *)(a1 + 534))
          v11 = 1;
        else
          v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 40))(v8);
        *(_BYTE *)(a1 + 534) = v11;
        if (*(_BYTE *)(a1 + 535))
          isStatisticCollectionEnabled = 1;
        else
          isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 48))(v8);
        *(_BYTE *)(a1 + 535) = isStatisticCollectionEnabled;
      }
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  if (*(_BYTE *)(a1 + 532))
  {
    v12 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Processor needs events but event collection is disabled.", buf, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 533))
  {
    isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
    if ((isStatisticCollectionEnabled & 1) == 0)
    {
      v13 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
      isStatisticCollectionEnabled = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Processor needs statistics but statistic collection is disabled.", v18, 2u);
      }
    }
  }
  if (*(_BYTE *)(a1 + 534))
  {
    v14 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Processor needs attributions but attribution collection is disabled.", v17, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 535))
  {
    v15 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16[0] = 0;
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Processor needs memory statistics but memory statistic collection is disabled.", (uint8_t *)v16, 2u);
    }
  }
  os_unfair_lock_unlock(v4);
}

void re::ProfilerManager::setProcessorEnabled<re::ProfilerFlameChartProcessor,void>(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t isStatisticCollectionEnabled;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  char v10;
  char v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t v16[16];
  uint8_t v17[16];
  uint8_t v18[16];
  uint8_t buf[16];

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(_DWORD *)(a1 + 532) = 0;
  isStatisticCollectionEnabled = re::ProfilerManager::getProcessorId<re::ProfilerFlameChartProcessor>();
  v6 = *(_QWORD **)(a1 + 496);
  if (v6)
  {
    v7 = isStatisticCollectionEnabled;
    do
    {
      v8 = (_BYTE *)v6[3];
      if (v6[2] == v7)
      {
        v8[8] = a2;
        isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v8 + 64))(v8, a2);
      }
      if (v8[8])
      {
        if (*(_BYTE *)(a1 + 532))
          v9 = 1;
        else
          v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8);
        *(_BYTE *)(a1 + 532) = v9;
        if (*(_BYTE *)(a1 + 533))
          v10 = 1;
        else
          v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 32))(v8);
        *(_BYTE *)(a1 + 533) = v10;
        if (*(_BYTE *)(a1 + 534))
          v11 = 1;
        else
          v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 40))(v8);
        *(_BYTE *)(a1 + 534) = v11;
        if (*(_BYTE *)(a1 + 535))
          isStatisticCollectionEnabled = 1;
        else
          isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 48))(v8);
        *(_BYTE *)(a1 + 535) = isStatisticCollectionEnabled;
      }
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  if (*(_BYTE *)(a1 + 532))
  {
    v12 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Processor needs events but event collection is disabled.", buf, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 533))
  {
    isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
    if ((isStatisticCollectionEnabled & 1) == 0)
    {
      v13 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
      isStatisticCollectionEnabled = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Processor needs statistics but statistic collection is disabled.", v18, 2u);
      }
    }
  }
  if (*(_BYTE *)(a1 + 534))
  {
    v14 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Processor needs attributions but attribution collection is disabled.", v17, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 535))
  {
    v15 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Processor needs memory statistics but memory statistic collection is disabled.", v16, 2u);
    }
  }
  os_unfair_lock_unlock(v4);
}

void re::ProfilerManager::setProcessorEnabled<re::ProfilerDetailedHUDProcessor,void>(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t isStatisticCollectionEnabled;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  char v10;
  char v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t v16[16];
  uint8_t v17[16];
  uint8_t v18[16];
  uint8_t buf[16];

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(_DWORD *)(a1 + 532) = 0;
  isStatisticCollectionEnabled = re::ProfilerManager::getProcessorId<re::ProfilerDetailedHUDProcessor>();
  v6 = *(_QWORD **)(a1 + 496);
  if (v6)
  {
    v7 = isStatisticCollectionEnabled;
    do
    {
      v8 = (_BYTE *)v6[3];
      if (v6[2] == v7)
      {
        v8[8] = a2;
        isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v8 + 64))(v8, a2);
      }
      if (v8[8])
      {
        if (*(_BYTE *)(a1 + 532))
          v9 = 1;
        else
          v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8);
        *(_BYTE *)(a1 + 532) = v9;
        if (*(_BYTE *)(a1 + 533))
          v10 = 1;
        else
          v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 32))(v8);
        *(_BYTE *)(a1 + 533) = v10;
        if (*(_BYTE *)(a1 + 534))
          v11 = 1;
        else
          v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 40))(v8);
        *(_BYTE *)(a1 + 534) = v11;
        if (*(_BYTE *)(a1 + 535))
          isStatisticCollectionEnabled = 1;
        else
          isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 48))(v8);
        *(_BYTE *)(a1 + 535) = isStatisticCollectionEnabled;
      }
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  if (*(_BYTE *)(a1 + 532))
  {
    v12 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Processor needs events but event collection is disabled.", buf, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 533))
  {
    isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
    if ((isStatisticCollectionEnabled & 1) == 0)
    {
      v13 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
      isStatisticCollectionEnabled = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Processor needs statistics but statistic collection is disabled.", v18, 2u);
      }
    }
  }
  if (*(_BYTE *)(a1 + 534))
  {
    v14 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Processor needs attributions but attribution collection is disabled.", v17, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 535))
  {
    v15 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Processor needs memory statistics but memory statistic collection is disabled.", v16, 2u);
    }
  }
  os_unfair_lock_unlock(v4);
}

void re::ProfilerManager::setProcessorEnabled<re::ProfilerMiniHUDProcessor,void>(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t isStatisticCollectionEnabled;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  char v9;
  char v10;
  char v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t v16[16];
  uint8_t v17[16];
  uint8_t v18[16];
  uint8_t buf[16];

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(_DWORD *)(a1 + 532) = 0;
  isStatisticCollectionEnabled = re::ProfilerManager::getProcessorId<re::ProfilerMiniHUDProcessor>();
  v6 = *(_QWORD **)(a1 + 496);
  if (v6)
  {
    v7 = isStatisticCollectionEnabled;
    do
    {
      v8 = (_BYTE *)v6[3];
      if (v6[2] == v7)
      {
        v8[8] = a2;
        isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v8 + 64))(v8, a2);
      }
      if (v8[8])
      {
        if (*(_BYTE *)(a1 + 532))
          v9 = 1;
        else
          v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8);
        *(_BYTE *)(a1 + 532) = v9;
        if (*(_BYTE *)(a1 + 533))
          v10 = 1;
        else
          v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 32))(v8);
        *(_BYTE *)(a1 + 533) = v10;
        if (*(_BYTE *)(a1 + 534))
          v11 = 1;
        else
          v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 40))(v8);
        *(_BYTE *)(a1 + 534) = v11;
        if (*(_BYTE *)(a1 + 535))
          isStatisticCollectionEnabled = 1;
        else
          isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 48))(v8);
        *(_BYTE *)(a1 + 535) = isStatisticCollectionEnabled;
      }
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  if (*(_BYTE *)(a1 + 532))
  {
    v12 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Processor needs events but event collection is disabled.", buf, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 533))
  {
    isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
    if ((isStatisticCollectionEnabled & 1) == 0)
    {
      v13 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
      isStatisticCollectionEnabled = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Processor needs statistics but statistic collection is disabled.", v18, 2u);
      }
    }
  }
  if (*(_BYTE *)(a1 + 534))
  {
    v14 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Processor needs attributions but attribution collection is disabled.", v17, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 535))
  {
    v15 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Processor needs memory statistics but memory statistic collection is disabled.", v16, 2u);
    }
  }
  os_unfair_lock_unlock(v4);
}

void re::ProfilerManager::setProcessorEnabled<re::ProfilerCsvProcessor,void>(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t isStatisticCollectionEnabled;
  _QWORD *v6;
  __objc2_class_ro *v7;
  _BYTE *v8;
  char v9;
  char v10;
  char v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  __int16 v16[8];
  uint8_t v17[16];
  uint8_t v18[16];
  uint8_t buf[16];

  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(_DWORD *)(a1 + 532) = 0;
  isStatisticCollectionEnabled = (uint64_t)re::ProfilerManager::getProcessorId<re::ProfilerCsvProcessor>();
  v6 = *(_QWORD **)(a1 + 496);
  if (v6)
  {
    v7 = (__objc2_class_ro *)isStatisticCollectionEnabled;
    do
    {
      v8 = (_BYTE *)v6[3];
      if ((__objc2_class_ro *)v6[2] == v7)
      {
        v8[8] = a2;
        isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)v8 + 64))(v8, a2);
      }
      if (v8[8])
      {
        if (*(_BYTE *)(a1 + 532))
          v9 = 1;
        else
          v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8);
        *(_BYTE *)(a1 + 532) = v9;
        if (*(_BYTE *)(a1 + 533))
          v10 = 1;
        else
          v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 32))(v8);
        *(_BYTE *)(a1 + 533) = v10;
        if (*(_BYTE *)(a1 + 534))
          v11 = 1;
        else
          v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 40))(v8);
        *(_BYTE *)(a1 + 534) = v11;
        if (*(_BYTE *)(a1 + 535))
          isStatisticCollectionEnabled = 1;
        else
          isStatisticCollectionEnabled = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 48))(v8);
        *(_BYTE *)(a1 + 535) = isStatisticCollectionEnabled;
      }
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  if (*(_BYTE *)(a1 + 532))
  {
    v12 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "Processor needs events but event collection is disabled.", buf, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 533))
  {
    isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
    if ((isStatisticCollectionEnabled & 1) == 0)
    {
      v13 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
      isStatisticCollectionEnabled = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "Processor needs statistics but statistic collection is disabled.", v18, 2u);
      }
    }
  }
  if (*(_BYTE *)(a1 + 534))
  {
    v14 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    isStatisticCollectionEnabled = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Processor needs attributions but attribution collection is disabled.", v17, 2u);
    }
  }
  if (*(_BYTE *)(a1 + 535))
  {
    v15 = *re::foundationProfilingLogObjects((re *)isStatisticCollectionEnabled);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16[0] = 0;
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "Processor needs memory statistics but memory statistic collection is disabled.", (uint8_t *)v16, 2u);
    }
  }
  os_unfair_lock_unlock(v4);
}

uint64_t re::ProfilerManager::getProcessor<re::ProfilerMiniHUDProcessor,void>(uint64_t a1)
{
  os_unfair_lock_s *v2;
  _QWORD *v3;
  uint64_t v4;
  __guard v6;

  v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v6 = re::ProfilerManager::getProcessorId<re::ProfilerMiniHUDProcessor>();
  v3 = std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::find<unsigned long long>((_QWORD *)(a1 + 480), (unint64_t *)&v6);
  if (v3)
    v4 = v3[3];
  else
    v4 = 0;
  os_unfair_lock_unlock(v2);
  return v4;
}

void re::ServiceRegistry::add<re::DrawableQueueService>(uint64_t a1, void *a2, StringID *a3)
{
  void *v3;
  unsigned __int8 v5;
  __objc2_class_ro **p_info;
  int v7;
  StringID *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  p_info = VideoSpillMapMetalSession.info;
  if ((v5 & 1) == 0)
  {
    v8 = a3;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    a3 = v8;
    v3 = a2;
    if (v7)
    {
      re::introspect<re::DrawableQueueService>(void)::info = re::introspect_DrawableQueueService(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      a3 = v8;
      v3 = a2;
    }
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&v10, (const re::IntrospectionBase *)p_info[325], a3, v3);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(a1 + 16, &v10);
  re::StringID::destroyString((re::StringID *)&v11);
}

void ___ZN2re6Engine4initERKNS_19EngineConfigurationE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 824);
  v2 = (id)DRResourcesCommitCopyToXPC();
  re::ResourceSharingManager::pushDirectCommit(v1, v2);

}

void ___ZN2re6Engine4initERKNS_19EngineConfigurationE_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  uint64_t Id;
  NSObject *v8;
  _QWORD block[4];
  id v10;
  id v11;
  uint64_t v12;

  v4 = a3;
  if (DRResourcesCommitHasEvent())
  {
    v5 = (void *)DRResourcesCommitCopyEventWithDevice();
    v6 = v5;

    Id = DRResourcesCommitGetId();
    v8 = *(NSObject **)(a1 + 32);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 3321888768;
    block[2] = ___ZN2re6Engine4initERKNS_19EngineConfigurationE_block_invoke_3;
    block[3] = &__block_descriptor_56_a8_32c34_ZTSN2re10ArcWeakPtrINS_6EngineEEE40c40_ZTSN2NS9SharedPtrIN3MTL11SharedEventEEE_e5_v8__0l;
    v10 = 0;
    objc_copyWeak(&v10, (id *)(a1 + 48));
    v11 = v5;
    v12 = Id;
    dispatch_async(v8, block);
    if (v11)
    {

      v11 = 0;
    }
    objc_destroyWeak(&v10);
    v10 = 0;
    if (v5)

  }
}

void ___ZN2re6Engine4initERKNS_19EngineConfigurationE_block_invoke_3(id *a1)
{
  id WeakRetained;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;

  WeakRetained = objc_loadWeakRetained(a1 + 4);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = *(_QWORD *)(*((_QWORD *)WeakRetained + 104) + 104);
    v5 = a1[5];
    v6 = v5;
    re::DrawingManager::addFrameBeganSignal(v4, &v6, a1[6]);
    if (v5)

  }
}

id __copy_helper_block_a8_32c34_ZTSN2re10ArcWeakPtrINS_6EngineEEE40c40_ZTSN2NS9SharedPtrIN3MTL11SharedEventEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id result;

  *(_QWORD *)(a1 + 32) = 0;
  v3 = a1 + 32;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
  result = *(id *)(a2 + 40);
  *(_QWORD *)(v3 + 8) = result;
  return result;
}

void __destroy_helper_block_a8_32c34_ZTSN2re10ArcWeakPtrINS_6EngineEEE40c40_ZTSN2NS9SharedPtrIN3MTL11SharedEventEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {

    *(_QWORD *)(a1 + 40) = 0;
  }
  objc_destroyWeak((id *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

void __copy_helper_block_a8_40c34_ZTSN2NS9SharedPtrIN3MTL6DeviceEEE48c34_ZTSN2re10ArcWeakPtrINS_6EngineEEE(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = *(id *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  a1 += 48;
  *(_QWORD *)(a1 - 8) = v4;
  objc_copyWeak((id *)a1, (id *)(a2 + 48));
}

void __destroy_helper_block_a8_40c34_ZTSN2NS9SharedPtrIN3MTL6DeviceEEE48c34_ZTSN2re10ArcWeakPtrINS_6EngineEEE(uint64_t a1)
{
  void *v2;

  objc_destroyWeak((id *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(void **)(a1 + 40);
  if (v2)
  {

    *(_QWORD *)(a1 + 40) = 0;
  }
}

void re::Engine::setAcceptingInput(re::Engine *this, re::InputManager *a2)
{
  uint64_t v2;
  id v3;

  v2 = *((_QWORD *)this + 112);
  if (v2)
  {
    if ((_DWORD)a2)
    {
      v3 = *((id *)this + 54);
      re::InputManager::subscribe(v2, &v3);

    }
    else
    {
      re::InputManager::unsubscribe(*((re::InputManager **)this + 112), a2);
    }
  }
}

uint64_t re::Engine::timeDidChange(re::Engine *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  std::chrono::steady_clock::time_point v7;
  double v8;
  float v9;
  _BYTE v11[16];

  v4 = *((_QWORD *)a1 + 117);
  if (v4)
  {
    *(_QWORD *)(v4 + 248) = 0;
    *(_QWORD *)(v4 + 256) = 0;
    *(_BYTE *)(v4 + 264) = 0;
    *(std::chrono::steady_clock::time_point *)(v4 + 248) = std::chrono::steady_clock::now();
    *(_BYTE *)(v4 + 264) = 1;
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v11, 1504, (uint64_t)a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  if (v5 >= (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2) - 1)
  {
    re::Engine::executePhase(a1, 1u);
    re::Engine::executePhase(a1, 2u);
  }
  re::Engine::executePhase(a1, 3u);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2))
  {
    re::Engine::executePhase(a1, 4u);
    re::Engine::executePhase(a1, 5u);
    re::Engine::executePhase(a1, 6u);
    re::Engine::executePhase(a1, 7u);
  }
  v6 = *((_QWORD *)a1 + 117);
  if (v6)
  {
    v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v8 = 0.0;
    if (*(_BYTE *)(v6 + 264))
      v8 = 1.0;
    v9 = (*(double *)(v6 + 256) + (double)(v7.__d_.__rep_ - *(_QWORD *)(v6 + 248)) / 1000000000.0 * v8) * 1000.0;
    *(float *)(v6 + 236) = v9;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v11);
  return 0;
}

void ___ZN2re6Engine4initERKNS_19EngineConfigurationE_block_invoke_42(uint64_t a1)
{
  re::Engine *v1;
  void *v2;

  v1 = *(re::Engine **)(a1 + 32);
  v2 = (void *)MEMORY[0x227694090]();
  re::Engine::tick(v1);
  objc_autoreleasePoolPop(v2);
}

uint64_t re::Engine::tick(re::Engine *this)
{
  uint64_t v2;
  CFTimeInterval v3;
  float v4;
  float v5;

  v3 = CACurrentMediaTime();
  v4 = v3 - *((double *)this + 146);
  *((CFTimeInterval *)this + 146) = v3;
  v5 = 3600.0;
  if (v4 <= 3600.0)
    v5 = v4;
  if (v4 < 0.0)
    v5 = 0.0;
  return re::Engine::tick(this, v5, v2);
}

uint64_t re::Engine::configurePhases(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  int v4;
  _OWORD v5[2];
  int v6;
  uint64_t v7;

  if (*(_BYTE *)(this + 24))
  {
    v1 = this;
    memset(v3, 0, sizeof(v3));
    v4 = 0;
    v7 = 0;
    memset(v5, 0, sizeof(v5));
    v6 = 0;
    re::Engine::configureEnterFramePhase(this, (uint64_t)v3);
    re::Engine::configurePreparePhase(v1, (uint64_t)v3);
    re::Engine::configureSimulatePhase(v1, (uint64_t)v3);
    re::Engine::configureCommitPhase(v1, (uint64_t)v3);
    re::Engine::configureRenderPhase(v1, (uint64_t)v3);
    re::Engine::configureEndTickPhase(v1, (uint64_t)v3);
    re::Engine::configureExitFramePhase((_QWORD *)v1, (uint64_t)v3);
    re::Scheduler::configure(*(_anonymous_namespace_ **)(v1 + 680), (unint64_t)v3);
    re::Engine::updateRaiseUpdateEventScheduleState((re::Engine *)v1);
    re::Engine::updateOutputDeviceFrameTaskSet(v1);
    v2 = *(_QWORD *)(v1 + 680);
    if (v2)
      re::Scheduler::setEnabled(v2, v1 + 336, *(unsigned __int8 *)(v1 + 408));
    re::DynamicArray<re::Scheduler::TaskDescriptor>::deinit((uint64_t)v5 + 8);
    return re::DynamicArray<re::StringID>::deinit((uint64_t)v3);
  }
  return this;
}

re *re::internal::destroyPersistent<re::AnimationManager>(re *result, uint64_t a2, re::AnimationManager *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::AnimationManager::~AnimationManager(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::AnimationManager *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::Engine::configureEnterFramePhase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re *v5;
  uint64_t v6;
  uint64_t v7;
  re *v8;
  uint64_t v9;
  re *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  re *v20;
  uint64_t v21;
  const char *v22;
  __int16 v23;
  int v24;
  char v25;
  __int16 v26;
  int v27;
  char v28;
  uint64_t (**v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (***v33)();
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v21 = 0x1A73B3E1A79F3CALL;
  v22 = "Enter Frame";
  v4 = re::Scheduler::ScheduleDescriptor::addPhase(a2, &v21);
  re::StringID::destroyString((re::StringID *)&v21);
  v18 = v4;
  *(_QWORD *)(a1 + 40) = v4;
  v21 = 0xBBDDDE49C7E29768;
  v22 = "Enter Frame Profiling Begin";
  v23 = 1;
  v24 = 0;
  v25 = 0;
  v26 = 260;
  v27 = 1023969417;
  v28 = 0;
  v6 = re::globalAllocators(v5)[2];
  v29 = &off_24ED2A1B8;
  v30 = a1;
  v32 = v6;
  v33 = &v29;
  v39 = 0;
  v38 = 0;
  v36 = 0;
  v37 = 0;
  v34 = v4;
  v35 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v21);
  if (v35)
  {
    if (v39)
      (*(void (**)(void))(*(_QWORD *)v35 + 40))();
    v39 = 0;
    v36 = 0;
    v37 = 0;
    v35 = 0;
    ++v38;
  }
  if (v33)
  {
    ((void (*)(uint64_t (***)()))**v33)(v33);
    if (v33 != &v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    v33 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v21);
  v7 = *(_QWORD *)(a1 + 848);
  v21 = 0xEEA8176B5CA41DF0;
  v22 = "Increment Frame Counter";
  v23 = 1;
  v24 = 0;
  v25 = 0;
  v26 = 260;
  v27 = 1023969417;
  v28 = 0;
  v9 = re::globalAllocators(v8)[2];
  v29 = &off_24ED2A210;
  v30 = v7;
  v31 = a1 + 1184;
  v32 = v9;
  v33 = &v29;
  v34 = v4;
  v39 = 0;
  v38 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  *(_QWORD *)(a1 + 104) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v21);
  if (v35)
  {
    if (v39)
      (*(void (**)(void))(*(_QWORD *)v35 + 40))();
    v39 = 0;
    v36 = 0;
    v37 = 0;
    v35 = 0;
    ++v38;
  }
  if (v33)
  {
    ((void (*)(uint64_t (***)()))**v33)(v33);
    if (v33 != &v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    v33 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v21);
  v11 = *(_DWORD *)(a1 + 424);
  if ((v11 & 0x100000) != 0)
  {
    v12 = *(_QWORD *)(a1 + 928);
    v21 = 0xA8BB4F263E93A12ALL;
    v22 = "Notify Frame Analysis Frame Start";
    v23 = 1;
    v24 = 0;
    v25 = 0;
    v26 = 260;
    v27 = 1023969417;
    v28 = 0;
    v13 = re::globalAllocators(v10)[2];
    v29 = &off_24ED2A268;
    v30 = v12;
    v32 = v13;
    v33 = &v29;
    v39 = 0;
    v38 = 0;
    v36 = 0;
    v37 = 0;
    v34 = v4;
    v35 = 0;
    *(_QWORD *)(a1 + 112) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v21);
    if (v35)
    {
      if (v39)
        (*(void (**)(void))(*(_QWORD *)v35 + 40))();
      v39 = 0;
      v36 = 0;
      v37 = 0;
      v35 = 0;
      ++v38;
    }
    if (v33)
    {
      ((void (*)(uint64_t (***)()))**v33)(v33);
      if (v33 != &v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
      v33 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v21);
    v11 = *(_DWORD *)(a1 + 424);
  }
  if ((v11 & 0x100) != 0)
  {
    v14 = *(_QWORD *)(a1 + 1128);
    v19[0] = &off_24ED2AEC8;
    v19[1] = a1;
    v19[2] = a2;
    v20 = (re *)v19;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v14 + 72))(v14, &v18, v19);
    v10 = v20;
    if (v20 == (re *)v19)
    {
      v15 = 4;
      v10 = (re *)v19;
    }
    else
    {
      if (!v20)
        goto LABEL_33;
      v15 = 5;
    }
    v10 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 8 * v15))();
  }
LABEL_33:
  v16 = *(_QWORD *)(a1 + 848);
  v21 = 0x8120BAF859FB454CLL;
  v22 = "Enter Frame Profiling End";
  v23 = 1;
  v24 = 0;
  v25 = 0;
  v26 = 260;
  v27 = 1023969417;
  v28 = 0;
  v17 = re::globalAllocators(v10)[2];
  v29 = &off_24ED2A2C0;
  v30 = v16;
  v31 = a1;
  v32 = v17;
  v33 = &v29;
  v34 = v18;
  v39 = 0;
  v38 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v21);
  if (v35)
  {
    if (v39)
      (*(void (**)(void))(*(_QWORD *)v35 + 40))();
    v39 = 0;
    v36 = 0;
    v37 = 0;
    v35 = 0;
    ++v38;
  }
  if (v33)
  {
    ((void (*)(uint64_t (***)()))**v33)(v33);
    if (v33 != &v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
    v33 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v21);
}

void re::Engine::configurePreparePhase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re *v5;
  uint64_t v6;
  re *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  __int16 v38;
  int v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t (**v43)();
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (***v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v36 = 0x22A07D49CELL;
  v37 = "Prepare";
  v4 = re::Scheduler::ScheduleDescriptor::addPhase(a2, &v36);
  re::StringID::destroyString((re::StringID *)&v36);
  *(_QWORD *)(a1 + 48) = v4;
  v36 = 0x7B2E133A3B21656CLL;
  v37 = "Prepare Profiling Begin";
  v38 = 1;
  v39 = 0;
  v40 = 0;
  LOWORD(v41) = 260;
  HIDWORD(v41) = 1023969417;
  v42 = 0;
  v6 = re::globalAllocators(v5)[2];
  v43 = &off_24ED2A318;
  v44 = a1;
  v46 = v6;
  v47 = &v43;
  v53 = 0;
  v52 = 0;
  v50 = 0;
  v51 = 0;
  v48 = v4;
  v49 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v36);
  if (v49)
  {
    if (v53)
      (*(void (**)(void))(*(_QWORD *)v49 + 40))();
    v53 = 0;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    ++v52;
  }
  if (v47)
  {
    ((void (*)(uint64_t (***)()))**v47)(v47);
    if (v47 != &v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
    v47 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v36);
  v8 = *(_DWORD *)(a1 + 424);
  if ((v8 & 0x40) != 0)
  {
    v9 = *(_QWORD *)(a1 + 896);
    v36 = 0x3611AC122B14243ELL;
    v37 = "Input Update";
    v38 = 1;
    v39 = 0;
    v40 = 0;
    LOWORD(v41) = 260;
    HIDWORD(v41) = 1023969417;
    v42 = 0;
    v10 = re::globalAllocators(v7)[2];
    v43 = &off_24ED2A370;
    v44 = v9;
    v46 = v10;
    v47 = &v43;
    v53 = 0;
    v52 = 0;
    v50 = 0;
    v51 = 0;
    v48 = v4;
    v49 = 0;
    *(_QWORD *)(a1 + 128) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v36);
    if (v49)
    {
      if (v53)
        (*(void (**)(void))(*(_QWORD *)v49 + 40))();
      v53 = 0;
      v50 = 0;
      v51 = 0;
      v49 = 0;
      ++v52;
    }
    if (v47)
    {
      ((void (*)(uint64_t (***)()))**v47)(v47);
      if (v47 != &v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
      v47 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v36);
    v8 = *(_DWORD *)(a1 + 424);
  }
  if ((v8 & 0x104) != 0 && (v8 & 2) != 0)
  {
    v11 = *(_QWORD *)(a1 + 1152);
    if (v11)
    {
      v36 = 0x4005877381F5E22CLL;
      v37 = "Shared Clock Update";
      v38 = 1;
      v39 = 0;
      v40 = 0;
      LOWORD(v41) = 260;
      HIDWORD(v41) = 1023969417;
      v42 = 0;
      v12 = re::globalAllocators(v7)[2];
      v43 = &off_24ED2A3C8;
      v44 = v11;
      v46 = v12;
      v47 = &v43;
      v53 = 0;
      v52 = 0;
      v50 = 0;
      v51 = 0;
      v48 = v4;
      v49 = 0;
      *(_QWORD *)(a1 + 136) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v36);
      if (v49)
      {
        if (v53)
          (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        v53 = 0;
        v50 = 0;
        v51 = 0;
        v49 = 0;
        ++v52;
      }
      if (v47)
      {
        ((void (*)(uint64_t (***)()))**v47)(v47);
        if (v47 != &v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
        v47 = 0;
      }
      re::StringID::destroyString((re::StringID *)&v36);
    }
    v13 = *(_QWORD *)(a1 + 1144);
    if (v13)
    {
      v36 = 0x874A02CC4DB88436;
      v37 = "Timebase Before Frame Update";
      v38 = 1;
      v39 = 0;
      v40 = 0;
      LOWORD(v41) = 260;
      HIDWORD(v41) = 1023969417;
      v42 = 0;
      v14 = re::globalAllocators(v7)[2];
      v43 = &off_24ED2A420;
      v44 = v13;
      v46 = v14;
      v47 = &v43;
      v53 = 0;
      v52 = 0;
      v50 = 0;
      v51 = 0;
      v48 = v4;
      v49 = 0;
      *(_QWORD *)(a1 + 144) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v36);
      if (v49)
      {
        if (v53)
          (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        v53 = 0;
        v50 = 0;
        v51 = 0;
        v49 = 0;
        ++v52;
      }
      if (v47)
      {
        ((void (*)(uint64_t (***)()))**v47)(v47);
        if (v47 != &v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
        v47 = 0;
      }
      re::StringID::destroyString((re::StringID *)&v36);
    }
  }
  if ((*(_BYTE *)(a1 + 424) & 0x80) != 0)
  {
    v15 = *(_QWORD *)(a1 + 856);
    if (v15)
    {
      v36 = 0x691970AE8D5439D6;
      v37 = "Network Before Frame Update";
      v38 = 1;
      v39 = 0;
      v40 = 0;
      LOWORD(v41) = 260;
      HIDWORD(v41) = 1023969417;
      v42 = 0;
      v16 = re::globalAllocators(v7)[2];
      v43 = &off_24ED2A478;
      v44 = v15;
      v46 = v16;
      v47 = &v43;
      v53 = 0;
      v52 = 0;
      v50 = 0;
      v51 = 0;
      v48 = v4;
      v49 = 0;
      *(_QWORD *)(a1 + 152) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v36);
      if (v49)
      {
        if (v53)
          (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        v53 = 0;
        v50 = 0;
        v51 = 0;
        v49 = 0;
        ++v52;
      }
      if (v47)
      {
        ((void (*)(uint64_t (***)()))**v47)(v47);
        if (v47 != &v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
        v47 = 0;
      }
      re::StringID::destroyString((re::StringID *)&v36);
    }
  }
  v17 = *(_QWORD *)(a1 + 672);
  v36 = 0x5D0715B967600FE4;
  v37 = "Background Task Update";
  v38 = 1;
  v39 = 0;
  v40 = 0;
  LOWORD(v41) = 260;
  HIDWORD(v41) = 1023969417;
  v42 = 0;
  v18 = re::globalAllocators(v7)[2];
  v43 = &off_24ED2A4D0;
  v44 = v17;
  v46 = v18;
  v47 = &v43;
  v53 = 0;
  v52 = 0;
  v50 = 0;
  v51 = 0;
  v48 = v4;
  v49 = 0;
  *(_QWORD *)(a1 + 160) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v36);
  if (v49)
  {
    if (v53)
      (*(void (**)(void))(*(_QWORD *)v49 + 40))();
    v53 = 0;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    ++v52;
  }
  if (v47)
  {
    ((void (*)(uint64_t (***)()))**v47)(v47);
    if (v47 != &v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
    v47 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v36);
  v20 = *(_DWORD *)(a1 + 424);
  if ((v20 & 8) != 0)
  {
    v23 = *(_QWORD *)(a1 + 744);
    v36 = 0x308AF400B2139072;
    v37 = "Asset Update";
    v38 = 1;
    v39 = 0;
    v40 = 0;
    v41 = *(_QWORD *)(v23 + 1752);
    v42 = *(_BYTE *)(v23 + 1760);
    v24 = re::globalAllocators(v19)[2];
    v43 = &off_24ED2A528;
    v44 = v23;
    v46 = v24;
    v47 = &v43;
    v53 = 0;
    v52 = 0;
    v50 = 0;
    v51 = 0;
    v48 = v4;
    v49 = 0;
    v25 = re::Scheduler::ScheduleDescriptor::addTask(a2, &v36);
    if (v49)
    {
      if (v53)
        (*(void (**)(void))(*(_QWORD *)v49 + 40))();
      v53 = 0;
      v50 = 0;
      v51 = 0;
      v49 = 0;
      ++v52;
    }
    if (v47)
    {
      ((void (*)(uint64_t (***)()))**v47)(v47);
      if (v47 != &v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
      v47 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v36);
    *(_QWORD *)(a1 + 168) = v25;
    v26 = *(_QWORD *)(a1 + 744);
    *(_QWORD *)(v26 + 1728) = *(_QWORD *)(a1 + 680);
    *(_QWORD *)(v26 + 1736) = v25;
    v20 = *(_DWORD *)(a1 + 424);
    if ((v20 & 4) == 0)
    {
LABEL_62:
      if ((v20 & 2) == 0)
        goto LABEL_64;
      goto LABEL_63;
    }
  }
  else if ((v20 & 4) == 0)
  {
    goto LABEL_62;
  }
  v27 = *(_QWORD *)(a1 + 664);
  v28 = *(_QWORD *)(a1 + 728);
  v36 = 0x1D1930259178F24ALL;
  v37 = "Animation Update";
  v29 = 112;
  do
  {
    v30 = *(_DWORD *)(v28 + v29);
    if (v30)
      break;
    v31 = v29 == 176;
    v29 += 64;
  }
  while (!v31);
  v38 = v30 != 0;
  v39 = 0;
  v40 = 0;
  v32 = *(_QWORD *)(v28 + 16);
  v42 = *(_BYTE *)(v28 + 24);
  v41 = v32;
  v33 = re::globalAllocators(v19)[2];
  v43 = &off_24ED2A580;
  v44 = v27;
  v45 = v28;
  v46 = v33;
  v47 = &v43;
  v48 = v4;
  v53 = 0;
  v52 = 0;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v34 = re::Scheduler::ScheduleDescriptor::addTask(a2, &v36);
  if (v49)
  {
    if (v53)
      (*(void (**)(void))(*(_QWORD *)v49 + 40))();
    v53 = 0;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    ++v52;
  }
  if (v47)
  {
    ((void (*)(uint64_t (***)()))**v47)(v47);
    if (v47 != &v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
    v47 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v36);
  *(_QWORD *)(a1 + 176) = v34;
  v35 = *(_QWORD *)(a1 + 728);
  *(_QWORD *)(v35 + 8) = *(_QWORD *)(a1 + 680);
  *(_QWORD *)(v35 + 32) = v34;
  if ((*(_DWORD *)(a1 + 424) & 2) != 0)
LABEL_63:
    re::ecs2::ECSManager::configurePreparePhase(*(re **)(a1 + 664), a2, v4);
LABEL_64:
  v21 = *(_QWORD *)(a1 + 848);
  v36 = 0x2239DAB9BBDDC450;
  v37 = "Prepare Profiling End";
  v38 = 1;
  v39 = 0;
  v40 = 0;
  LOWORD(v41) = 260;
  HIDWORD(v41) = 1023969417;
  v42 = 0;
  v22 = re::globalAllocators(v19)[2];
  v43 = &off_24ED2A5D8;
  v44 = v21;
  v45 = a1;
  v46 = v22;
  v47 = &v43;
  v48 = v4;
  v53 = 0;
  v52 = 0;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v36);
  if (v49)
  {
    if (v53)
      (*(void (**)(void))(*(_QWORD *)v49 + 40))();
    v53 = 0;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    ++v52;
  }
  if (v47)
  {
    ((void (*)(uint64_t (***)()))**v47)(v47);
    if (v47 != &v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 40))(v46);
    v47 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v36);
}

void re::Engine::configureSimulatePhase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re *v5;
  uint64_t v6;
  re *v7;
  uint64_t v8;
  re *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t (**v14)();
  uint64_t (***v15)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  __int16 v21;
  int v22;
  char v23;
  __int16 v24;
  int v25;
  char v26;
  uint64_t (**v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (***v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v19 = 0x4544226CC88;
  v20 = "Simulate";
  v4 = re::Scheduler::ScheduleDescriptor::addPhase(a2, &v19);
  re::StringID::destroyString((re::StringID *)&v19);
  *(_QWORD *)(a1 + 56) = v4;
  v19 = 0xD57EE63E48F23426;
  v20 = "Simulate Profiling Begin";
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 260;
  v25 = 1023969417;
  v26 = 0;
  v6 = re::globalAllocators(v5)[2];
  v27 = &off_24ED2A630;
  v28 = a1;
  v30 = v6;
  v31 = &v27;
  v37 = 0;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v32 = v4;
  v33 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v19);
  if (v33)
  {
    if (v37)
      (*(void (**)(void))(*(_QWORD *)v33 + 40))();
    v37 = 0;
    v34 = 0;
    v35 = 0;
    v33 = 0;
    ++v36;
  }
  if (v31)
  {
    ((void (*)(uint64_t (***)()))**v31)(v31);
    if (v31 != &v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v31 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v19);
  v19 = 0xAAFBCE219D0498AELL;
  v20 = "Raise Update Event";
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 260;
  v25 = 1023969417;
  v26 = 0;
  v8 = re::globalAllocators(v7)[2];
  v27 = &off_24ED2A688;
  v28 = a1;
  v30 = v8;
  v31 = &v27;
  v37 = 0;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v32 = v4;
  v33 = 0;
  *(_QWORD *)(a1 + 200) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v19);
  if (v33)
  {
    if (v37)
      (*(void (**)(void))(*(_QWORD *)v33 + 40))();
    v37 = 0;
    v34 = 0;
    v35 = 0;
    v33 = 0;
    ++v36;
  }
  if (v31)
  {
    ((void (*)(uint64_t (***)()))**v31)(v31);
    if (v31 != &v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v31 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v19);
  v10 = *(_DWORD *)(a1 + 424);
  if ((v10 & 0x8000) != 0)
  {
    v11 = *(_QWORD *)(a1 + 880);
    v19 = 0xD275FE6FB8A1FF7ELL;
    v20 = "Throttle Service";
    v21 = 1;
    v22 = 0;
    v23 = 0;
    v24 = 260;
    v25 = 1023969417;
    v26 = 0;
    v12 = re::globalAllocators(v9)[2];
    v27 = &off_24ED2A6E0;
    v28 = v11;
    v30 = v12;
    v31 = &v27;
    v37 = 0;
    v36 = 0;
    v34 = 0;
    v35 = 0;
    v32 = v4;
    v33 = 0;
    *(_QWORD *)(a1 + 208) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v19);
    if (v33)
    {
      if (v37)
        (*(void (**)(void))(*(_QWORD *)v33 + 40))();
      v37 = 0;
      v34 = 0;
      v35 = 0;
      v33 = 0;
      ++v36;
    }
    if (v31)
    {
      ((void (*)(uint64_t (***)()))**v31)(v31);
      if (v31 != &v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
      v31 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v19);
    v10 = *(_DWORD *)(a1 + 424);
  }
  if ((v10 & 2) != 0)
  {
    re::ecs2::ECSManager::configureSimulatePhase(*(_QWORD *)(a1 + 664), a2, v4);
    if ((*(_BYTE *)(a1 + 424) & 0x20) != 0 && !*(_BYTE *)(a1 + 625))
    {
      v13 = *(uint64_t (***)())(a1 + 664);
      v14 = *(uint64_t (***)())(a1 + 888);
      v19 = 0x494D4D6493EA9B80;
      v20 = "Physics Simulation";
      v21 = 1;
      v22 = 0;
      v23 = 1;
      v24 = 260;
      v25 = 1023969417;
      v26 = 0;
      v30 = re::globalAllocators(v9)[2];
      v15 = (uint64_t (***)())(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 32))(v30, 32, 0);
      *v15 = &off_24ED2A738;
      v15[1] = v13;
      v15[2] = v14;
      v15[3] = (uint64_t (**)())a1;
      v31 = v15;
      v32 = v4;
      v37 = 0;
      v36 = 0;
      v34 = 0;
      v35 = 0;
      v33 = 0;
      v16 = re::Scheduler::ScheduleDescriptor::addTask(a2, &v19);
      if (v33)
      {
        if (v37)
          (*(void (**)(void))(*(_QWORD *)v33 + 40))();
        v37 = 0;
        v34 = 0;
        v35 = 0;
        v33 = 0;
        ++v36;
      }
      if (v31)
      {
        ((void (*)(uint64_t (***)()))**v31)(v31);
        if (v31 != &v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
        v31 = 0;
      }
      re::StringID::destroyString((re::StringID *)&v19);
      *(_QWORD *)(a1 + 216) = v16;
    }
  }
  v17 = *(_QWORD *)(a1 + 848);
  v19 = 0x8C9BF83F7726F98ALL;
  v20 = "Simulate Profiling End";
  v21 = 1;
  v22 = 0;
  v23 = 0;
  v24 = 260;
  v25 = 1023969417;
  v26 = 0;
  v18 = re::globalAllocators(v9)[2];
  v27 = &off_24ED2A790;
  v28 = v17;
  v29 = a1;
  v30 = v18;
  v31 = &v27;
  v32 = v4;
  v37 = 0;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v19);
  if (v33)
  {
    if (v37)
      (*(void (**)(void))(*(_QWORD *)v33 + 40))();
    v37 = 0;
    v34 = 0;
    v35 = 0;
    v33 = 0;
    ++v36;
  }
  if (v31)
  {
    ((void (*)(uint64_t (***)()))**v31)(v31);
    if (v31 != &v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 40))(v30);
    v31 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v19);
}

void re::Engine::configureCommitPhase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re *v5;
  uint64_t v6;
  re *v7;
  id v8;
  re *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  re *v31;
  uint64_t v32;
  const char *v33;
  __int16 v34;
  int v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t (**v39)();
  uint64_t v40;
  re *v41;
  uint64_t v42;
  uint64_t (***v43)();
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v32 = 4048038574;
  v33 = "Commit";
  v4 = re::Scheduler::ScheduleDescriptor::addPhase(a2, &v32);
  re::StringID::destroyString((re::StringID *)&v32);
  v29 = v4;
  *(_QWORD *)(a1 + 64) = v4;
  v32 = 0x62A8C35CEECE864CLL;
  v33 = "Commit Profiling Begin";
  v34 = 1;
  v35 = 0;
  v36 = 0;
  LOWORD(v37) = 260;
  HIDWORD(v37) = 1023969417;
  v38 = 0;
  v6 = re::globalAllocators(v5)[2];
  v39 = &off_24ED2A7E8;
  v40 = a1;
  v42 = v6;
  v43 = &v39;
  v49 = 0;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v44 = v4;
  v45 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v32);
  if (v45)
  {
    if (v49)
      (*(void (**)(void))(*(_QWORD *)v45 + 40))();
    v49 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    ++v48;
  }
  if (v43)
  {
    ((void (*)(uint64_t (***)()))**v43)(v43);
    if (v43 != &v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v43 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v32);
  if (*(_BYTE *)(a1 + 576) && (*(_BYTE *)(a1 + 420) & 0x10) != 0 && (*(_BYTE *)(a1 + 424) & 8) != 0)
  {
    v8 = *(id *)(a1 + 776);
    v32 = 0x1AF7B461BE06DD12;
    v33 = "DirectResource After Frame Update";
    v34 = 1;
    v35 = 0;
    v36 = 0;
    LOWORD(v37) = 260;
    HIDWORD(v37) = 1023969417;
    v38 = 0;
    v9 = (re *)v8;
    v10 = re::globalAllocators(v9)[2];
    v39 = &off_24ED2A840;
    v40 = a1;
    v41 = v9;
    v42 = v10;
    v43 = &v39;
    v44 = v29;
    v49 = 0;
    v48 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    *(_QWORD *)(a1 + 232) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v32);
    if (v45)
    {
      if (v49)
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
      v49 = 0;
      v46 = 0;
      v47 = 0;
      v45 = 0;
      ++v48;
    }
    if (v43)
    {
      ((void (*)(uint64_t (***)()))**v43)(v43);
      if (v43 != &v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      v43 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v32);

  }
  v11 = *(_DWORD *)(a1 + 424);
  if ((v11 & 2) != 0)
  {
    re::ecs2::ECSManager::configureCommitPhase(*(re **)(a1 + 664), a2, v29);
    v11 = *(_DWORD *)(a1 + 424);
  }
  if ((~v11 & 0x18) != 0)
  {
    if ((v11 & 8) == 0)
      goto LABEL_25;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 768);
    v32 = 0xB6A9C34D18D9D762;
    v33 = "Drawable Queue After Frame Update";
    v34 = 1;
    v35 = 0;
    v36 = 0;
    LOWORD(v37) = 260;
    HIDWORD(v37) = 1023969417;
    v38 = 0;
    v13 = re::globalAllocators(v7)[2];
    v39 = &off_24ED2A898;
    v40 = v12;
    v42 = v13;
    v43 = &v39;
    v49 = 0;
    v48 = 0;
    v46 = 0;
    v47 = 0;
    v44 = v29;
    v45 = 0;
    *(_QWORD *)(a1 + 224) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v32);
    if (v45)
    {
      if (v49)
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
      v49 = 0;
      v46 = 0;
      v47 = 0;
      v45 = 0;
      ++v48;
    }
    if (v43)
    {
      ((void (*)(uint64_t (***)()))**v43)(v43);
      if (v43 != &v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      v43 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v32);
    v11 = *(_DWORD *)(a1 + 424);
    if ((v11 & 8) == 0)
    {
LABEL_25:
      if ((v11 & 0x80) == 0)
        goto LABEL_56;
      goto LABEL_45;
    }
  }
  v14 = *(_QWORD *)(a1 + 744);
  v32 = 0xFBA855DF8D4C94A0;
  v33 = "Asset After Frame Update";
  v34 = 1;
  v35 = 0;
  v36 = 0;
  v37 = *(_QWORD *)(v14 + 1752);
  v38 = *(_BYTE *)(v14 + 1760);
  v15 = re::globalAllocators(v7)[2];
  v39 = &off_24ED2A8F0;
  v40 = v14;
  v42 = v15;
  v43 = &v39;
  v49 = 0;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v44 = v29;
  v45 = 0;
  v16 = re::Scheduler::ScheduleDescriptor::addTask(a2, &v32);
  if (v45)
  {
    if (v49)
      (*(void (**)(void))(*(_QWORD *)v45 + 40))();
    v49 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    ++v48;
  }
  if (v43)
  {
    ((void (*)(uint64_t (***)()))**v43)(v43);
    if (v43 != &v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v43 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v32);
  *(_QWORD *)(a1 + 240) = v16;
  *(_QWORD *)(*(_QWORD *)(a1 + 744) + 1744) = v16;
  v11 = *(_DWORD *)(a1 + 424);
  if ((v11 & 0x80) != 0)
  {
LABEL_45:
    v17 = *(_QWORD *)(a1 + 856);
    if (v17 && *(_QWORD *)(v17 + 2416))
    {
      v32 = 0xB96777787FFDBCA4;
      v33 = "Network After Frame Update";
      v34 = 1;
      v35 = 0;
      v36 = 0;
      LOWORD(v37) = 260;
      HIDWORD(v37) = 1023969417;
      v38 = 0;
      v18 = re::globalAllocators(v7)[2];
      v39 = &off_24ED2A948;
      v40 = v17;
      v42 = v18;
      v43 = &v39;
      v49 = 0;
      v48 = 0;
      v46 = 0;
      v47 = 0;
      v44 = v29;
      v45 = 0;
      *(_QWORD *)(a1 + 248) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v32);
      if (v45)
      {
        if (v49)
          (*(void (**)(void))(*(_QWORD *)v45 + 40))();
        v49 = 0;
        v46 = 0;
        v47 = 0;
        v45 = 0;
        ++v48;
      }
      if (v43)
      {
        ((void (*)(uint64_t (***)()))**v43)(v43);
        if (v43 != &v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
        v43 = 0;
      }
      re::StringID::destroyString((re::StringID *)&v32);
      v11 = *(_DWORD *)(a1 + 424);
    }
  }
LABEL_56:
  if ((v11 & 0x104) != 0 && (v11 & 2) != 0)
  {
    v19 = *(_QWORD *)(a1 + 1144);
    if (v19)
    {
      v32 = 0xB21EB5FD96B6A644;
      v33 = "Timebase After Frame Update";
      v34 = 1;
      v35 = 0;
      v36 = 0;
      LOWORD(v37) = 260;
      HIDWORD(v37) = 1023969417;
      v38 = 0;
      v20 = re::globalAllocators(v7)[2];
      v39 = &off_24ED2A9A0;
      v40 = v19;
      v42 = v20;
      v43 = &v39;
      v49 = 0;
      v48 = 0;
      v46 = 0;
      v47 = 0;
      v44 = v29;
      v45 = 0;
      *(_QWORD *)(a1 + 256) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v32);
      if (v45)
      {
        if (v49)
          (*(void (**)(void))(*(_QWORD *)v45 + 40))();
        v49 = 0;
        v46 = 0;
        v47 = 0;
        v45 = 0;
        ++v48;
      }
      if (v43)
      {
        ((void (*)(uint64_t (***)()))**v43)(v43);
        if (v43 != &v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
        v43 = 0;
      }
      re::StringID::destroyString((re::StringID *)&v32);
      v11 = *(_DWORD *)(a1 + 424);
    }
  }
  if ((v11 & 0x100) != 0)
  {
    v21 = *(_QWORD *)(a1 + 1128);
    v30[0] = &off_24ED2AF58;
    v30[1] = a1;
    v30[2] = a2;
    v31 = (re *)v30;
    (*(void (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v21 + 80))(v21, &v29, v30);
    v7 = v31;
    if (v31 == (re *)v30)
    {
      v22 = 4;
      v7 = (re *)v30;
      goto LABEL_73;
    }
    if (v31)
    {
      v22 = 5;
LABEL_73:
      v7 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 8 * v22))();
    }
  }
  v23 = *(_DWORD *)(a1 + 424);
  if ((~v23 & 0x100010) == 0)
  {
    v24 = *(_QWORD *)(a1 + 928);
    if (v24)
    {
      v32 = 0xC8CF523D8AC5AC22;
      v33 = "Frame Analysis after frame Update";
      v34 = 1;
      v35 = 0;
      v36 = 0;
      LOWORD(v37) = 260;
      HIDWORD(v37) = 1023969417;
      v38 = 0;
      v25 = re::globalAllocators(v7)[2];
      v39 = &off_24ED2A9F8;
      v40 = v24;
      v42 = v25;
      v43 = &v39;
      v49 = 0;
      v48 = 0;
      v46 = 0;
      v47 = 0;
      v44 = v29;
      v45 = 0;
      *(_QWORD *)(a1 + 272) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v32);
      if (v45)
      {
        if (v49)
          (*(void (**)(void))(*(_QWORD *)v45 + 40))();
        v49 = 0;
        v46 = 0;
        v47 = 0;
        v45 = 0;
        ++v48;
      }
      if (v43)
      {
        ((void (*)(uint64_t (***)()))**v43)(v43);
        if (v43 != &v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
        v43 = 0;
      }
      re::StringID::destroyString((re::StringID *)&v32);
      v23 = *(_DWORD *)(a1 + 424);
    }
  }
  if ((v23 & 0x12) != 0)
  {
    v32 = 0xCA668105099A87ECLL;
    v33 = "ColorManager After Frame Update";
    v34 = 1;
    v35 = 0;
    v36 = 0;
    LOWORD(v37) = 260;
    HIDWORD(v37) = 1023969417;
    v38 = 0;
    v26 = re::globalAllocators(v7)[2];
    v39 = &off_24ED2AA50;
    v40 = a1;
    v42 = v26;
    v43 = &v39;
    v49 = 0;
    v48 = 0;
    v46 = 0;
    v47 = 0;
    v44 = v29;
    v45 = 0;
    *(_QWORD *)(a1 + 280) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v32);
    if (v45)
    {
      if (v49)
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
      v49 = 0;
      v46 = 0;
      v47 = 0;
      v45 = 0;
      ++v48;
    }
    if (v43)
    {
      ((void (*)(uint64_t (***)()))**v43)(v43);
      if (v43 != &v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
      v43 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v32);
  }
  v27 = *(_QWORD *)(a1 + 848);
  v32 = 0xBFA2F07C801D9D30;
  v33 = "Commit Profiling End";
  v34 = 1;
  v35 = 0;
  v36 = 0;
  LOWORD(v37) = 260;
  HIDWORD(v37) = 1023969417;
  v38 = 0;
  v28 = re::globalAllocators(v7)[2];
  v39 = &off_24ED2AAA8;
  v40 = v27;
  v41 = (re *)a1;
  v42 = v28;
  v43 = &v39;
  v44 = v29;
  v49 = 0;
  v48 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v32);
  if (v45)
  {
    if (v49)
      (*(void (**)(void))(*(_QWORD *)v45 + 40))();
    v49 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    ++v48;
  }
  if (v43)
  {
    ((void (*)(uint64_t (***)()))**v43)(v43);
    if (v43 != &v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v43 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v32);
}

void re::Engine::configureRenderPhase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  re *v6;
  uint64_t v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;
  int v13;
  char v14;
  __int16 v15;
  int v16;
  char v17;
  uint64_t (**v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t (***v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v10 = 0x123605B6CLL;
  v11 = "Render";
  v4 = re::Scheduler::ScheduleDescriptor::addPhase(a2, &v10);
  re::StringID::destroyString((re::StringID *)&v10);
  *(_QWORD *)(a1 + 72) = v4;
  v5 = *(_QWORD *)(a1 + 952);
  v10 = 0xF32E3A1A8997B0ALL;
  v11 = "Render Profiling Begin";
  v12 = 1;
  v13 = 0;
  v14 = 0;
  v15 = 260;
  v16 = 1023969417;
  v17 = 0;
  v7 = re::globalAllocators(v6)[2];
  v18 = &off_24ED2AB00;
  v19 = v5;
  v20 = v7;
  v21 = &v18;
  v27 = 0;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  v22 = v4;
  v23 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v10);
  if (v23)
  {
    if (v27)
      (*(void (**)(void))(*(_QWORD *)v23 + 40))();
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    ++v26;
  }
  if (v21)
  {
    ((void (*)(uint64_t (***)()))**v21)(v21);
    if (v21 != &v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    v21 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v10);
  if ((*(_BYTE *)(a1 + 424) & 0x10) != 0)
  {
    v10 = 0x39632A79442;
    v11 = "DoRender";
    v12 = 1;
    v13 = 0;
    v14 = 0;
    v15 = 260;
    v16 = 1023969417;
    v17 = 0;
    v9 = re::globalAllocators(v8)[2];
    v18 = &off_24ED2AB58;
    v19 = a1;
    v20 = v9;
    v21 = &v18;
    v27 = 0;
    v26 = 0;
    v24 = 0;
    v25 = 0;
    v22 = v4;
    v23 = 0;
    *(_QWORD *)(a1 + 288) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v10);
    if (v23)
    {
      if (v27)
        (*(void (**)(void))(*(_QWORD *)v23 + 40))();
      v27 = 0;
      v24 = 0;
      v25 = 0;
      v23 = 0;
      ++v26;
    }
    if (v21)
    {
      ((void (*)(uint64_t (***)()))**v21)(v21);
      if (v21 != &v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
      v21 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v10);
  }
  v10 = 0xF32E3A1A8997B0ALL;
  v11 = "Render Profiling Begin";
  v12 = 1;
  v13 = 0;
  v14 = 0;
  v15 = 260;
  v16 = 1023969417;
  v17 = 0;
  v20 = re::globalAllocators(v8)[2];
  v21 = &v18;
  v18 = &off_24ED2ABB0;
  v22 = v4;
  v23 = 0;
  v27 = 0;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v10);
  if (v23)
  {
    if (v27)
      (*(void (**)(void))(*(_QWORD *)v23 + 40))();
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    ++v26;
  }
  if (v21)
  {
    ((void (*)(uint64_t (***)()))**v21)(v21);
    if (v21 != &v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    v21 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::Engine::configureEndTickPhase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re *v5;
  uint64_t v6;
  re *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;
  int v13;
  char v14;
  __int16 v15;
  int v16;
  char v17;
  uint64_t (**v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t (***v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v10 = 0x3A2CE5BC404;
  v11 = "End Tick";
  v4 = re::Scheduler::ScheduleDescriptor::addPhase(a2, &v10);
  re::StringID::destroyString((re::StringID *)&v10);
  *(_QWORD *)(a1 + 80) = v4;
  v10 = 0xC9DEE6B0E4A0B3A2;
  v11 = "End Tick Profiling Begin";
  v12 = 1;
  v13 = 0;
  v14 = 0;
  v15 = 260;
  v16 = 1023969417;
  v17 = 0;
  v6 = re::globalAllocators(v5)[2];
  v18 = &off_24ED2AC08;
  v19 = a1;
  v20 = v6;
  v21 = &v18;
  v27 = 0;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  v22 = v4;
  v23 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v10);
  if (v23)
  {
    if (v27)
      (*(void (**)(void))(*(_QWORD *)v23 + 40))();
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    ++v26;
  }
  if (v21)
  {
    ((void (*)(uint64_t (***)()))**v21)(v21);
    if (v21 != &v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    v21 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v10);
  if (*(_DWORD *)(a1 + 472) == 1)
  {
    v10 = 0x50005DFB508F214ALL;
    v11 = "Schedule Continuous Tick";
    v12 = 1;
    v13 = 0;
    v14 = 0;
    v15 = 259;
    v16 = 1023969417;
    v17 = 0;
    v8 = re::globalAllocators(v7)[2];
    v18 = &off_24ED2AC60;
    v19 = a1;
    v20 = v8;
    v21 = &v18;
    v27 = 0;
    v26 = 0;
    v24 = 0;
    v25 = 0;
    v22 = v4;
    v23 = 0;
    *(_QWORD *)(a1 + 296) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v10);
    if (v23)
    {
      if (v27)
        (*(void (**)(void))(*(_QWORD *)v23 + 40))();
      v27 = 0;
      v24 = 0;
      v25 = 0;
      v23 = 0;
      ++v26;
    }
    if (v21)
    {
      ((void (*)(uint64_t (***)()))**v21)(v21);
      if (v21 != &v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
      v21 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v10);
  }
  v10 = 0x7D9AB786E06D5540;
  v11 = "Exit Tick Profiling End";
  v12 = 1;
  v13 = 0;
  v14 = 0;
  v15 = 260;
  v16 = 1023969417;
  v17 = 0;
  v9 = re::globalAllocators(v7)[2];
  v18 = &off_24ED2ACB8;
  v19 = a1;
  v20 = v9;
  v21 = &v18;
  v27 = 0;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  v22 = v4;
  v23 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v10);
  if (v23)
  {
    if (v27)
      (*(void (**)(void))(*(_QWORD *)v23 + 40))();
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    ++v26;
  }
  if (v21)
  {
    ((void (*)(uint64_t (***)()))**v21)(v21);
    if (v21 != &v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    v21 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::Engine::configureExitFramePhase(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  re *v5;
  uint64_t v6;
  re *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  int v17;
  char v18;
  __int16 v19;
  int v20;
  char v21;
  uint64_t (**v22)();
  _QWORD *v23;
  uint64_t v24;
  uint64_t (***v25)();
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v14 = 0xDB60E4C7127D6;
  v15 = "Exit Frame";
  v4 = re::Scheduler::ScheduleDescriptor::addPhase(a2, &v14);
  re::StringID::destroyString((re::StringID *)&v14);
  a1[11] = v4;
  v14 = 0x260FC32374E83374;
  v15 = "Exit Frame Profiling Begin";
  v16 = 1;
  v17 = 0;
  v18 = 0;
  v19 = 260;
  v20 = 1023969417;
  v21 = 0;
  v6 = re::globalAllocators(v5)[2];
  v22 = &off_24ED2AD10;
  v23 = a1;
  v24 = v6;
  v25 = &v22;
  v31 = 0;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v26 = v4;
  v27 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v14);
  if (v27)
  {
    if (v31)
      (*(void (**)(void))(*(_QWORD *)v27 + 40))();
    v31 = 0;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    ++v30;
  }
  if (v25)
  {
    ((void (*)(uint64_t (***)()))**v25)(v25);
    if (v25 != &v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    v25 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v14);
  v8 = (_QWORD *)a1[117];
  if (v8)
  {
    v14 = 0x47C2C45EE134F02;
    v15 = "End Frame Profiler";
    v16 = 1;
    v17 = 0;
    v18 = 0;
    v19 = 260;
    v20 = 1023969417;
    v21 = 0;
    v9 = re::globalAllocators(v7)[2];
    v22 = &off_24ED2AD68;
    v23 = v8;
    v24 = v9;
    v25 = &v22;
    v31 = 0;
    v30 = 0;
    v28 = 0;
    v29 = 0;
    v26 = v4;
    v27 = 0;
    a1[38] = re::Scheduler::ScheduleDescriptor::addTask(a2, &v14);
    if (v27)
    {
      if (v31)
        (*(void (**)(void))(*(_QWORD *)v27 + 40))();
      v31 = 0;
      v28 = 0;
      v29 = 0;
      v27 = 0;
      ++v30;
    }
    if (v25)
    {
      ((void (*)(uint64_t (***)()))**v25)(v25);
      if (v25 != &v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      v25 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v14);
  }
  if (a1[83])
  {
    v14 = 0x9027F98B17907458;
    v15 = "Exit Frame Profiling End";
    v16 = 1;
    v17 = 0;
    v18 = 0;
    v19 = 260;
    v20 = 1023969417;
    v21 = 0;
    v10 = re::globalAllocators(v7)[2];
    v22 = &off_24ED2ADC0;
    v23 = a1;
    v24 = v10;
    v25 = &v22;
    v31 = 0;
    v30 = 0;
    v28 = 0;
    v29 = 0;
    v26 = v4;
    v27 = 0;
    a1[39] = re::Scheduler::ScheduleDescriptor::addTask(a2, &v14);
  }
  else
  {
    v14 = 0x9027F98B17907458;
    v15 = "Exit Frame Profiling End";
    v16 = 1;
    v17 = 0;
    v18 = 0;
    v19 = 260;
    v20 = 1023969417;
    v21 = 0;
    v11 = re::globalAllocators(v7)[2];
    v22 = &off_24ED2AE18;
    v23 = a1;
    v24 = v11;
    v25 = &v22;
    v31 = 0;
    v30 = 0;
    v28 = 0;
    v29 = 0;
    v26 = v4;
    v27 = 0;
    re::Scheduler::ScheduleDescriptor::addTask(a2, &v14);
  }
  if (v27)
  {
    if (v31)
      (*(void (**)(void))(*(_QWORD *)v27 + 40))();
    v31 = 0;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    ++v30;
  }
  if (v25)
  {
    ((void (*)(uint64_t (***)()))**v25)(v25);
    if (v25 != &v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    v25 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v14);
  v14 = 0x966E2F48F8574292;
  v15 = "Reset Target Display Time";
  v16 = 1;
  v17 = 0;
  v18 = 0;
  v19 = 260;
  v20 = 1023969417;
  v21 = 0;
  v13 = re::globalAllocators(v12)[2];
  v22 = &off_24ED2AE70;
  v23 = a1;
  v24 = v13;
  v25 = &v22;
  v31 = 0;
  v30 = 0;
  v28 = 0;
  v29 = 0;
  v26 = v4;
  v27 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v14);
  if (v27)
  {
    if (v31)
      (*(void (**)(void))(*(_QWORD *)v27 + 40))();
    v31 = 0;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    ++v30;
  }
  if (v25)
  {
    ((void (*)(uint64_t (***)()))**v25)(v25);
    if (v25 != &v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
    v25 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v14);
}

re::EventBus::EventInfo *re::Engine::updateRaiseUpdateEventScheduleState(re::Engine *this)
{
  re::EventBus::EventInfo *result;
  unint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  re::EventBus::EventInfo *updated;
  uint64_t v8;
  re::Scheduler *v9;

  result = (re::EventBus::EventInfo *)*((_QWORD *)this + 85);
  if (result)
  {
    v3 = *((_QWORD *)this + 25);
    v4 = re::Scheduler::taskScheduleType(result, v3) == 4;
    v5 = *((_QWORD *)this + 152);
    v6 = *((_QWORD *)this + 172);
    updated = re::EventBus::subscriptionCountInternal<re::Engine,REEngineDoUpdateEvent>(v6, (unint64_t)this, 0);
    result = re::EventBus::subscriptionCountInternal<re::Engine,REEngineDoUpdateEvent>(v6, 0, 0);
    if (((v4 ^ ((re::EventBus::EventInfo *)((char *)result + (_QWORD)updated + v5) != 0)) & 1) == 0)
    {
      v8 = -((uint64_t)result + (_QWORD)updated);
      v9 = (re::Scheduler *)*((_QWORD *)this + 85);
      if (v5 == v8)
        return re::Scheduler::updateTaskSchedule(v9, v3, 4);
      else
        return (re::EventBus::EventInfo *)re::Scheduler::setTaskOptions(v9, v3, (float *)this + 80);
    }
  }
  return result;
}

uint64_t re::Engine::updateOutputDeviceFrameTaskSet(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t i;
  unint64_t v18;
  _QWORD v19[2];
  char v20;

  v1 = this;
  v2 = this + 336;
  v3 = *(_DWORD *)(this + 352);
  if ((v3 & 1) != 0)
    v4 = (_QWORD *)(this + 360);
  else
    v4 = *(_QWORD **)(this + 368);
  v5 = *(_QWORD *)(this + 344);
  v6 = this + 360;
  while (1)
  {
    v7 = this + 360;
    if ((v3 & 1) == 0)
      v7 = *(_QWORD *)(this + 368);
    if (v4 == (_QWORD *)(v7 + 8 * v5))
      break;
    *v4++ = 0;
    v3 = *(_DWORD *)(this + 352);
  }
  v8 = *(_QWORD *)(this + 680);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 40);
    v10 = *(_QWORD *)(this + 400);
    if ((v9 & 0x3F) != 0)
      v11 = (v9 >> 6) + 1;
    else
      v11 = v9 >> 6;
    *(_QWORD *)(this + 400) = v9;
    v19[0] = 0;
    re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)(this + 336), v11, v19);
    if (v9)
      v12 = v10 > v9;
    else
      v12 = 0;
    if (v12)
    {
      v13 = 63;
      v14 = *(_QWORD *)(v1 + 400) & 0x3FLL;
      if (v14)
      {
        v15 = v14 == 63;
        v16 = -1 << v14;
        if (!v15)
          v13 = ~v16;
      }
      if ((*(_BYTE *)(v1 + 352) & 1) == 0)
        v6 = *(_QWORD *)(v1 + 368);
      *(_QWORD *)(v6 + 8 * *(_QWORD *)(v1 + 344) - 8) &= v13;
    }
    for (i = 0; i != 7; ++i)
    {
      v18 = *(_QWORD *)(v1 + 8 * re::Engine::kOutputDeviceFrameTasks[i] + 104);
      if (v18 < v9)
        re::DynamicBitset<unsigned long long,256ul>::setBit(v2, v18);
    }
    this = *(_QWORD *)(v1 + 664);
    if (this)
    {
      re::ecs2::ECSManager::outputDeviceSystemTasks(this, (uint64_t)v19);
      re::DynamicBitset<unsigned long long,256ul>::orWithBitSet(v2, (uint64_t)v19);
      this = v19[0];
      if (v19[0])
      {
        if ((v20 & 1) == 0)
          return (*(uint64_t (**)(void))(*(_QWORD *)v19[0] + 40))();
      }
    }
  }
  return this;
}

uint64_t re::Engine::tick(re::Engine *this, float a2, uint64_t a3)
{
  uint64_t result;

  if (*((int *)this + 298) < 1)
    return re::ManualClock::update(*((_QWORD *)this + 114), a2, a3);
  re::internal::assertLog((re::internal *)4, a3, "assertion failure: '%s' (%s:line %i) Invalid nested engine tick", "!isInsideTick()", "tick", 1642);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::Engine::setPreferredFramesPerSecond(uint64_t this, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;

  *(float *)(this + 1160) = a2;
  if (!*(_DWORD *)(this + 472))
  {
    v2 = this;
    v3 = *(_QWORD *)(this + 912);
    if (a2 <= 0.0)
    {
      this = objc_msgSend(*(id *)(v3 + 144), "setPreferredFramesPerSecond:", 60);
      if ((*(_BYTE *)(v2 + 424) & 0x10) == 0)
        return this;
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 840) + 104);
      if (!v4)
        return this;
      v5 = 60.0;
    }
    else
    {
      this = objc_msgSend(*(id *)(v3 + 144), "setPreferredFramesPerSecond:", llroundf(a2));
      if ((*(_BYTE *)(v2 + 424) & 0x10) == 0)
        return this;
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 840) + 104);
      if (!v4)
        return this;
      v5 = roundf(*(float *)(v2 + 1160));
    }
    *(float *)(v4 + 1760) = v5;
  }
  return this;
}

void re::Engine::doUpdate(re::EventBus **this, float a2)
{
  uint64_t v2;
  re *isStatisticCollectionEnabled;
  uint64_t v6;
  re::EventBus *v7;
  __objc2_class_ro *Type;
  uint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  float v14;
  _BYTE v15[16];

  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)this);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v6 = re::profilerThreadContext(isStatisticCollectionEnabled);
    if (*(_QWORD *)(v6 + 152))
      v2 = mach_absolute_time();
  }
  else
  {
    v6 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15, 1510, (uint64_t)this);
  re::Event<re::Engine>::raise((uint64_t)(this + 150), (uint64_t)this);
  v7 = this[172];
  v14 = a2;
  Type = re::EventBus::getTypeId<REEngineDoUpdateEvent>();
  re::EventBus::publish(v7, (uint64_t)this, (uint64_t)Type, (uint64_t)&v14, 4uLL, 0);
  re::Engine::updateRaiseUpdateEventScheduleState((re::Engine *)this);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15);
  if (v6)
  {
    if (*(_QWORD *)(v6 + 152))
    {
      v9 = mach_absolute_time();
      v10 = *(int64x2_t **)(v6 + 152);
      if (v10)
      {
        v11 = v10[76].u64[0];
        if (v11 >= v9 - v2)
          v11 = v9 - v2;
        v10[76].i64[0] = v11;
        v12 = v10[76].u64[1];
        if (v12 <= v9 - v2)
          v12 = v9 - v2;
        v10[76].i64[1] = v12;
        v13 = vdupq_n_s64(1uLL);
        v13.i64[0] = v9 - v2;
        v10[77] = vaddq_s64(v10[77], v13);
        *(_BYTE *)(v6 + 184) = 0;
      }
    }
  }
}

void re::Event<re::Engine>::raise(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  _OWORD v23[5];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32 * v5 + 24))(a2) == 1)
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, v5);
      else
        ++v5;
    }
    while (v5 < *(_QWORD *)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
    {
      v7 = 0;
      for (i = 0; i != v6; ++i)
      {
        v9 = *(_QWORD *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v23, 0, sizeof(v23));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v15 = 136315906;
          v16 = "operator[]";
          v17 = 1024;
          v18 = 789;
          v19 = 2048;
          v20 = i;
          v21 = 2048;
          v22 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v10 = *(_QWORD *)(a1 + 72) + v7;
        v11 = *(_QWORD *)(v10 + 32);
        v12 = *(_OWORD *)(v10 + 16);
        v13[0] = *(_OWORD *)v10;
        v13[1] = v12;
        v14 = v11;
        if (LOBYTE(v13[0]))
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (_QWORD *)v13 + 1, (uint64_t)v23);
          if (!LOBYTE(v23[0]))
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)a1, (uint64_t)v13 + 8);
        }
        else
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStable((_QWORD *)a1, (_QWORD *)v13 + 1);
        }
        v7 += 40;
      }
    }
  }
}

int64x2_t re::Engine::doRender(re::Engine *this)
{
  uint64_t v1;
  re *isStatisticCollectionEnabled;
  uint64_t v4;
  re::EventBus *v5;
  unsigned __int8 v6;
  int64x2_t result;
  uint64_t v8;
  int64x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  const char *v13;
  float v14;
  _BYTE v15[16];

  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(this);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v4 = re::profilerThreadContext(isStatisticCollectionEnabled);
    if (*(_QWORD *)(v4 + 152))
      v1 = mach_absolute_time();
  }
  else
  {
    v4 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15, 5000, *((_QWORD *)this + 105));
  *(_BYTE *)(*((_QWORD *)this + 117) + 296) = 1;
  re::Event<re::Engine>::raise((uint64_t)this + 1288, (uint64_t)this);
  v5 = (re::EventBus *)*((_QWORD *)this + 172);
  v14 = (*(float (**)(_QWORD))(**((_QWORD **)this + 115) + 56))(*((_QWORD *)this + 115));
  v6 = atomic_load((unsigned __int8 *)&qword_2540FB388);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2540FB388))
  {
    qword_2540FB380 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"21REEngineDoRenderEvent" & 0x7FFFFFFFFFFFFFFFLL), v13);
    __cxa_guard_release(&qword_2540FB388);
  }
  re::EventBus::publish(v5, (uint64_t)this, qword_2540FB380, (uint64_t)&v14, 4uLL, 0);
  *(_BYTE *)(*((_QWORD *)this + 117) + 296) = 0;
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v15);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 152))
    {
      v8 = mach_absolute_time();
      v9 = *(int64x2_t **)(v4 + 152);
      if (v9)
      {
        v10 = v9[40].u64[0];
        if (v10 >= v8 - v1)
          v10 = v8 - v1;
        v9[40].i64[0] = v10;
        v11 = v9[40].u64[1];
        if (v11 <= v8 - v1)
          v11 = v8 - v1;
        v9[40].i64[1] = v11;
        v12 = vdupq_n_s64(1uLL);
        v12.i64[0] = v8 - v1;
        result = vaddq_s64(v9[41], v12);
        v9[41] = result;
        *(_BYTE *)(v4 + 184) = 0;
      }
    }
  }
  return result;
}

uint64_t re::Scheduler::ScheduleDescriptor::addPhase(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[2];

  v4 = *a2;
  v3 = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >= v5)
  {
    v7 = v6 + 1;
    if (v5 < v6 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v8 = 2 * v5;
        v9 = v5 == 0;
        v10 = 8;
        if (!v9)
          v10 = v8;
        if (v10 <= v7)
          v11 = v7;
        else
          v11 = v10;
        re::DynamicArray<re::StringID>::setCapacity((_QWORD *)a1, v11);
      }
      else
      {
        re::DynamicArray<re::StringID>::setCapacity((_QWORD *)a1, v7);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v6 = *(_QWORD *)(a1 + 16);
  }
  v12 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v6);
  *v12 = v4;
  v12[1] = v3;
  v15[0] = 0;
  v15[1] = &str_110;
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13 + 1;
  ++*(_DWORD *)(a1 + 24);
  re::StringID::destroyString((re::StringID *)v15);
  return v13;
}

uint64_t re::Scheduler::ScheduleDescriptor::addTask(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  if (a2[9])
  {
    re::DynamicArray<re::Scheduler::TaskDescriptor>::add((_anonymous_namespace_ *)(a1 + 40), a2);
    return *(_QWORD *)(a1 + 56) - 1;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Task Descriptor does not contain an update function", "taskDescriptor.taskFunction", "addTask", 148);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::Engine::enableHackedAutoDisableOutputSystemsCode(uint64_t this)
{
  *(_BYTE *)(this + 409) = 1;
  if (*(_BYTE *)(this + 408))
  {
    *(_BYTE *)(this + 408) = 0;
    if (*(_QWORD *)(this + 680))
      return re::Scheduler::setEnabled(*(_QWORD *)(this + 680), this + 336, 0);
  }
  return this;
}

re::Scheduler *re::Engine::setRaiseUpdateEventFrameTaskOptions(uint64_t a1, float *a2)
{
  re::Scheduler *result;
  unint64_t v5;
  uint64_t v6;

  result = *(re::Scheduler **)(a1 + 680);
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 200);
    result = (re::Scheduler *)re::Scheduler::taskScheduleType(result, v5);
    if ((_DWORD)result == *(unsigned __int8 *)(a1 + 320))
      result = (re::Scheduler *)re::Scheduler::setTaskOptions(*(re::Scheduler **)(a1 + 680), v5, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 328) = *((_BYTE *)a2 + 8);
  *(_QWORD *)(a1 + 320) = v6;
  return result;
}

uint64_t re::Scheduler::taskScheduleType(re::Scheduler *this, unint64_t a2)
{
  if (*((_QWORD *)this + 56) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*((_QWORD *)this + 57) + a2);
}

uint64_t re::DynamicBitset<unsigned long long,256ul>::setBit(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(result + 8) <= a2 >> 6)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    v2 = result + 24;
  else
    v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(v2 + 8 * (a2 >> 6)) |= 1 << a2;
  return result;
}

uint64_t re::DynamicBitset<unsigned long long,256ul>::orWithBitSet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 64);
  if (v4 > *(_QWORD *)(a1 + 64))
  {
    if ((v4 & 0x3F) != 0)
      v5 = (v4 >> 6) + 1;
    else
      v5 = v4 >> 6;
    *(_QWORD *)(a1 + 64) = v4;
    v11 = 0;
    re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)a1, v5, &v11);
  }
  v6 = *(_QWORD *)(a2 + 8);
  if (v6 >= *(_QWORD *)(a1 + 8))
    v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      v8 = *(_QWORD *)(a2 + 32);
      if ((*(_BYTE *)(a2 + 16) & 1) != 0)
        v8 = a2 + 24;
      v9 = a1 + 24;
      if ((*(_BYTE *)(a1 + 16) & 1) == 0)
        v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(v9 + 8 * i) |= *(_QWORD *)(v8 + 8 * i);
    }
  }
  return a1;
}

void re::Engine::checkForConfigureSystemChanges(re::Engine *this, char a2)
{
  re::ecs2::ECSManager *v4;

  v4 = (re::ecs2::ECSManager *)*((_QWORD *)this + 83);
  if (v4 && re::ecs2::ECSManager::hasPendingSystemChanges(v4))
  {
    re::ecs2::ECSManager::configureSystemChanges(*((re::ecs2::ECSManager **)this + 83));
    *((_BYTE *)this + 1408) = 1;
  }
  if ((a2 & 1) == 0)
  {
    if (*((_BYTE *)this + 1408))
    {
      re::Engine::configurePhases((uint64_t)this);
      *((_BYTE *)this + 1408) = 0;
    }
  }
}

uint64_t re::Engine::start(uint64_t this)
{
  re::Engine *v1;
  int v2;
  uint64_t v3;

  v1 = (re::Engine *)this;
  v2 = *(_DWORD *)(this + 904);
  if (!v2)
  {
    v3 = re::ServiceLocator::service<re::SimulationClock>(*(re::internal **)(this + 648));
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
    v2 = *((_DWORD *)v1 + 226);
  }
  *((_DWORD *)v1 + 226) = v2 + 1;
  if (*((_DWORD *)v1 + 118) == 1)
    return re::Engine::tick(v1);
  return this;
}

uint64_t re::ServiceLocator::service<re::SimulationClock>(re::internal *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  re::internal *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v9[16];
  _BYTE v10[9];
  _BYTE v11[23];

  v2 = atomic_load((unsigned __int8 *)&qword_2540FB368);
  if ((v2 & 1) == 0)
    goto LABEL_8;
  while (1)
  {
    v3 = qword_2540FB360;
    re::StringID::invalid((re::StringID *)v10);
    v4 = (*(uint64_t (**)(re::internal *, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v10);
    re::StringID::destroyString((re::StringID *)v10);
    if (v4)
      break;
    v6 = (re::internal *)re::introspect<re::SimulationClock>();
    re::StringID::invalid((re::StringID *)v9);
    re::internal::missingServiceErrorMessage(v6, (const re::IntrospectionBase *)v9, (re::DynamicString *)v10);
    re::DynamicString::~DynamicString((re::DynamicString *)v10);
    re::StringID::~StringID((re::StringID *)v9);
    a1 = (re::internal *)re::introspect<re::SimulationClock>();
    re::StringID::invalid((re::StringID *)v9);
    re::internal::missingServiceErrorMessage(a1, (const re::IntrospectionBase *)v9, (re::DynamicString *)v10);
    if ((v10[8] & 1) != 0)
      v8 = *(_BYTE **)&v11[7];
    else
      v8 = v11;
    re::internal::assertLog((re::internal *)5, v7, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v8);
    re::DynamicString::~DynamicString((re::DynamicString *)v10);
    re::StringID::~StringID((re::StringID *)v9);
    _os_crash();
    __break(1u);
LABEL_8:
    if (__cxa_guard_acquire(&qword_2540FB368))
    {
      qword_2540FB360 = re::introspect_SimulationClock(0);
      __cxa_guard_release(&qword_2540FB368);
    }
  }
  return v4;
}

uint64_t re::Engine::stop(uint64_t this)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = *(_DWORD *)(this + 904);
  if (!v1 || (v2 = v1 - 1, (*(_DWORD *)(this + 904) = v2) == 0))
  {
    v3 = re::ServiceLocator::service<re::SimulationClock>(*(re::internal **)(this + 648));
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  }
  return this;
}

BOOL re::Engine::createDrawingManager(re::Engine *this)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  re *DrawingManager;
  uint64_t v8;
  re *v9;
  uint64_t *v10;
  _QWORD *v11;
  re *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  re *v21;
  NSObject *v22;
  StringID v24;

  v2 = *(_QWORD *)(*((_QWORD *)this + 105) + 104);
  v3 = *re::appLogObjects(this);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)&v24.var0 = 0;
      v5 = "CreateDrawingManager was called, but drawing manager already exists";
      v6 = v3;
LABEL_23:
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v24, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)&v24.var0 = 0;
      _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "Enter CreateDrawingManager", (uint8_t *)&v24, 2u);
    }
    DrawingManager = re::RenderManager::createDrawingManager(*((re::RenderManager **)this + 105));
    v8 = *(_QWORD *)(*((_QWORD *)this + 105) + 104);
    if (v8)
      v9 = *(re **)(v8 + 296);
    else
      v9 = 0;
    v10 = re::globalAllocators(DrawingManager);
    v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 8, 8);
    *v11 = &off_24ED29BA8;
    v12 = re::RenderGraphManager::setDataPipeFactory(v9, (uint64_t)v11);
    v13 = *(_QWORD *)(*((_QWORD *)this + 105) + 104);
    if (v13)
    {
      v12 = (re *)*((_QWORD *)this + 119);
      *(_QWORD *)(v13 + 1664) = v12;
      if (v12)
      {
        v12 = (re *)re::ProfilerManager::getProcessor<re::FrameProfiler,void>((uint64_t)v12);
        *(_QWORD *)(v13 + 1648) = v12;
      }
    }
    if (*((_QWORD *)this + 93))
    {
      v14 = *((_QWORD *)this + 105);
      if (v14)
      {
        if (*(_QWORD *)(v14 + 104) && !*((_QWORD *)this + 96))
        {
          v15 = re::globalAllocators(v12);
          v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 104, 8);
          *(_QWORD *)v16 = off_24ED30E90;
          *(_OWORD *)(v16 + 16) = 0u;
          *(_OWORD *)(v16 + 32) = 0u;
          *(_DWORD *)(v16 + 48) = 0;
          *(_QWORD *)(v16 + 52) = 0x7FFFFFFFLL;
          *(_QWORD *)(v16 + 64) = 0;
          *(_BYTE *)(v16 + 72) = 0;
          *(_QWORD *)(v16 + 88) = 0;
          *(_QWORD *)(v16 + 96) = 0;
          *(_QWORD *)(v16 + 80) = 0;
          *((_QWORD *)this + 96) = v16;
          v17 = *((_QWORD *)this + 105);
          *(_QWORD *)(v16 + 88) = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(*((_QWORD *)this + 81));
          *(_QWORD *)(v16 + 8) = v17;
          v18 = *((_QWORD *)this + 81);
          v19 = (void *)*((_QWORD *)this + 96);
          re::StringID::invalid((re::StringID *)&v24);
          re::ServiceRegistry::add<re::DrawableQueueService>(v18, v19, &v24);
          re::StringID::destroyString((re::StringID *)&v24);
        }
      }
    }
    *((_DWORD *)this + 106) |= 0x10u;
    v20 = *re::appLogObjects(v12);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)&v24.var0 = 0;
      _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "CreateDrawingManager: about to call remove/add scenes", (uint8_t *)&v24, 2u);
    }
    v21 = (re *)*((_QWORD *)this + 83);
    if (v21)
      v21 = (re *)re::ecs2::ECSManager::removeAndAddScenes(v21);
    *((_BYTE *)this + 1408) = 1;
    v22 = *re::appLogObjects(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)&v24.var0 = 0;
      v5 = "Exit CreateDrawingManager";
      v6 = v22;
      goto LABEL_23;
    }
  }
  return v2 == 0;
}

BOOL re::Engine::createRealityRendererSystemArrayManager(re::Engine *this)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  StringID v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 99);
  if (!v1)
  {
    v3 = re::globalAllocators(this);
    *((_QWORD *)this + 99) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 1, 1);
    v4 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(*((_QWORD *)this + 81));
    v11 = 0;
    v8.var1 = 0;
    v9 = 0;
    *(_QWORD *)&v8.var0 = 0;
    v10 = 0;
    re::ecs2::ComponentHelper::addRealityRendererDefaultSystems((re *)&v8, v4);
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v8);
    v5 = *((_QWORD *)this + 81);
    v6 = (void *)*((_QWORD *)this + 99);
    re::StringID::invalid((re::StringID *)&v8);
    re::ServiceRegistry::add<re::RealityRendererSystemArrayManager>(v5, v6, &v8);
    re::StringID::destroyString((re::StringID *)&v8);
  }
  return v1 == 0;
}

void re::ServiceRegistry::add<re::RealityRendererSystemArrayManager>(uint64_t a1, void *a2, StringID *a3)
{
  void *v3;
  unsigned __int8 v5;
  __objc2_class_ro **p_info;
  int v7;
  StringID *v8;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  p_info = VideoSpillMapMetalSession.info;
  if ((v5 & 1) == 0)
  {
    v8 = a3;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    a3 = v8;
    v3 = a2;
    if (v7)
    {
      re::introspect<re::RealityRendererSystemArrayManager>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RealityRendererSystemArrayManager", (uint64_t (*)(re::internal *))re::allocInfo_RealityRendererSystemArrayManager, (re::IntrospectionBase *(*)(void))re::initInfo_RealityRendererSystemArrayManager, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RealityRendererSystemArrayManager>, 0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      a3 = v8;
      v3 = a2;
    }
  }
  re::ServiceRegistration::ServiceRegistration((re::ServiceRegistration *)&v10, (const re::IntrospectionBase *)p_info[444], a3, v3);
  re::HashSetBase<re::ServiceKey,re::ServiceRegistration,re::internal::ServiceKeyGetter,re::internal::ServiceKeyHash,re::internal::ServiceKeyEqualTo,false,false>::add(a1 + 16, &v10);
  re::StringID::destroyString((re::StringID *)&v11);
}

void re::Engine::executeInlinePhase(uint64_t a1, int a2, float a3)
{
  void (*v4)(void);

  switch(a2)
  {
    case 1:
      re::FrameManager::nextFrame(*(re::FrameManager **)(a1 + 848));
      if ((*(_BYTE *)(a1 + 426) & 0x10) != 0)
      {
        v4 = *(void (**)(void))(**(_QWORD **)(a1 + 928) + 40);
        goto LABEL_10;
      }
      break;
    case 2:
      re::Engine::executeInlinePreparePhase((re::Engine *)a1, a3);
      break;
    case 3:
      re::Engine::executeInlineSimulatePhase((re::ecs2::ECSManager **)a1, a3);
      break;
    case 4:
      re::Engine::executeInlineCommitPhase((re::Engine *)a1, a3);
      break;
    case 5:
      if ((*(_BYTE *)(a1 + 424) & 0x10) != 0)
      {
        v4 = *(void (**)(void))(*(_QWORD *)a1 + 56);
LABEL_10:
        v4();
      }
      break;
    default:
      return;
  }
}

void re::Engine::executeInlinePreparePhase(re::Engine *this, float a2)
{
  int v4;
  int v5;
  BOOL v6;
  os_unfair_lock_s *v7;
  BOOL v8;
  re::TimebaseManager *v9;
  int v10;

  v4 = *((_DWORD *)this + 106) & 0x104;
  v5 = *((_DWORD *)this + 106) & 2;
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = (os_unfair_lock_s *)*((_QWORD *)this + 144);
    if (v7)
    {
      re::SharedClockManager::update(v7);
      v4 = *((_DWORD *)this + 106) & 0x104;
      v5 = *((_DWORD *)this + 106) & 2;
    }
    else
    {
      v5 = 1;
      v4 = 1;
    }
  }
  if (v5)
    v8 = v4 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = (re::TimebaseManager *)*((_QWORD *)this + 143);
    if (v9)
      re::TimebaseManager::beforeFrameUpdate(v9, a2);
  }
  re::BackgroundTaskManager::update(*((re::BackgroundTaskManager **)this + 84));
  v10 = *((_DWORD *)this + 106);
  if ((v10 & 8) == 0)
  {
    if ((v10 & 2) == 0)
      return;
LABEL_18:
    re::ecs2::ECSManager::executeInlinePhaseByGroup(*((re::ecs2::ECSManager **)this + 83), 0);
    return;
  }
  re::AssetManager::update(*((re::AssetManager **)this + 93), 1u, 1);
  if ((*((_DWORD *)this + 106) & 2) != 0)
    goto LABEL_18;
}

void re::Engine::executeInlineSimulatePhase(re::ecs2::ECSManager **this, float a2)
{
  re::ecs2::ECSManager *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  re::ecs2::ECSManager *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  re::PhysicsSimulation *v13;
  uint64_t v16;
  uint64_t v17;

  (*((void (**)(re::ecs2::ECSManager **))*this + 6))(this);
  if (((_BYTE)this[53] & 2) != 0)
  {
    re::ecs2::ECSManager::executeInlinePhaseByGroup(this[83], 1);
    if (((_BYTE)this[53] & 0x20) != 0 && !*((_BYTE *)this + 625))
    {
      v4 = this[83];
      if (!*((_BYTE *)v4 + 356))
      {
        v5 = *((_QWORD *)v4 + 28);
        if (v5)
        {
          v6 = (uint64_t *)*((_QWORD *)v4 + 30);
          v7 = &v6[v5];
          do
          {
            v8 = this[111];
            v16 = *v6;
            v9 = re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v8 + 432, &v16);
            if (v9)
            {
              v10 = v9;
              re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v16, v9, 0);
              v11 = v10 == v16 && (unsigned __int16)v17 == 0xFFFFLL;
              if (!v11 || (v17 & 0xFFFF0000) != 4294901760)
              {
                do
                {
                  v13 = *(re::PhysicsSimulation **)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v16)
                                                  + 8);
                  if (v13)
                    re::PhysicsSimulation::update(v13, a2);
                  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v16);
                }
                while (v16 != v10 || (unsigned __int16)v17 != 0xFFFF || WORD1(v17) != 0xFFFF);
              }
            }
            ++v6;
          }
          while (v6 != v7);
        }
      }
    }
  }
}

void re::Engine::executeInlineCommitPhase(re::Engine *this, float a2)
{
  int v3;
  os_unfair_lock_s *v5;

  v3 = *((_DWORD *)this + 106);
  if ((v3 & 2) != 0)
  {
    re::ecs2::ECSManager::executeInlinePhaseByGroup(*((re::ecs2::ECSManager **)this + 83), 2);
    v3 = *((_DWORD *)this + 106);
  }
  if ((~v3 & 0x18) == 0)
  {
    re::DrawableQueueManager::afterFrameUpdate(*((re::DrawableQueueManager **)this + 96));
    v3 = *((_DWORD *)this + 106);
  }
  if ((v3 & 8) != 0)
  {
    re::AssetManager::afterFrameUpdate(*((re::AssetManager **)this + 93));
    v3 = *((_DWORD *)this + 106);
  }
  if ((v3 & 0x104) != 0 && (v3 & 2) != 0)
  {
    v5 = (os_unfair_lock_s *)*((_QWORD *)this + 143);
    if (v5)
    {
      re::TimebaseManager::afterFrameUpdate(v5);
      v3 = *((_DWORD *)this + 106);
    }
  }
  if ((v3 & 0x12) != 0)
    re::Engine::performColorManagerAfterFrameUpdate(this);
}

uint64_t re::ecs2::PhysicsSimulationManager::physicsSimulationsForScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  return re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(a1 + 432, &v3);
}

uint64_t re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*(unsigned __int16 *a1)
{
  unint64_t v1;

  v1 = a1[5];
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) <= v1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v1) + 272 * a1[4];
}

void re::Engine::performColorManagerAfterFrameUpdate(re::Engine *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re::ecs2::Entity *SceneDataEntity;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];

  v2 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(*((_QWORD *)this + 81));
  v3 = re::ServiceLocator::serviceOrNull<re::ColorManager>(*((_QWORD *)this + 81));
  v4 = v3;
  v5 = 1.0;
  if (v2)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (v6)
    goto LABEL_13;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8)
    goto LABEL_13;
  v9 = *(uint64_t **)(v7 + 40);
  v10 = 8 * v8;
  while (1)
  {
    v11 = *v9;
    v15[0] = 0;
    SceneDataEntity = makeSceneDataEntity(v11, (uint64_t)v15, 0, re::ecs2::Scene::kLocalSceneDataEntityID, 0);
    if (SceneDataEntity)
    {
      v13 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EDRColorManagementComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v13)
        break;
    }
    ++v9;
    v10 -= 8;
    if (!v10)
      goto LABEL_13;
  }
  v14 = *(_QWORD *)(v13 + 32);
  if (v14)
  {
    v5 = (*(float (**)(void))(v14 + 16))();
LABEL_13:
    *(float *)(v4 + 12492) = v5;
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::ColorManager>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ColorManager>(void)::info = re::introspect_ColorManager(0);
  }
  v3 = re::introspect<re::ColorManager>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::EngineOverlay::init(re::EngineOverlay *this, re::Engine *a2)
{
  uint64_t *v3;
  re::ManualClock *v4;
  re *v5;
  uint64_t *v6;
  re::VariableStepTimer *v7;
  re::VariableStepTimer *v8;
  uint64_t v9;
  uint64_t result;

  *((_QWORD *)this + 3) = a2;
  v3 = re::globalAllocators(this);
  v4 = (re::ManualClock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 128, 8);
  v5 = re::ManualClock::ManualClock(v4);
  *((_QWORD *)this + 4) = v5;
  v6 = re::globalAllocators(v5);
  v7 = (re::VariableStepTimer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 248, 8);
  v8 = re::VariableStepTimer::VariableStepTimer(v7);
  *((_QWORD *)this + 5) = v8;
  re::VariableStepTimer::setClock((uint64_t)v8, *((_QWORD *)this + 4));
  *(_BYTE *)(*((_QWORD *)this + 5) + 24) = 1;
  v9 = *((_QWORD *)this + 3);
  *(_BYTE *)(*((_QWORD *)this + 4) + 8) = 1;
  result = re::ServiceLocator::serviceOrNull<re::RealityRendererSystemArrayManager>(*(_QWORD *)(v9 + 648));
  if (!result)
    return re::Engine::createRealityRendererSystemArrayManager(*((re::Engine **)this + 3));
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::RealityRendererSystemArrayManager>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::RealityRendererSystemArrayManager>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RealityRendererSystemArrayManager", (uint64_t (*)(re::internal *))re::allocInfo_RealityRendererSystemArrayManager, (re::IntrospectionBase *(*)(void))re::initInfo_RealityRendererSystemArrayManager, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RealityRendererSystemArrayManager>, 0);
  }
  v3 = re::introspect<re::RealityRendererSystemArrayManager>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void re::EngineOverlay::~EngineOverlay(re::EngineOverlay *this)
{
  uint64_t v2;
  uint64_t v3;
  re *v4;
  void (***v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24ED29A48;
  v2 = *((_QWORD *)this + 5);
  *(_BYTE *)(*((_QWORD *)this + 4) + 8) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  v3 = re::globalAllocators(this)[2];
  re::VariableStepTimer::~VariableStepTimer((re::VariableStepTimer *)v2);
  v4 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  *((_QWORD *)this + 5) = 0;
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 4);
  if (v5)
  {
    v6 = re::globalAllocators(v4)[2];
    (**v5)(v5);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v6 + 40))(v6, v5);
  }
  *((_QWORD *)this + 4) = 0;
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {

    *((_QWORD *)this + 6) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::EngineOverlay::~EngineOverlay(this);
  JUMPOUT(0x2276933B8);
}

void re::EngineOverlay::executePhase(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  v4 = re::ServiceLocator::serviceOrNull<re::ecs2::ECSService>(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 648));
  if (v4)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 216))(v4, *(_QWORD *)(a1 + 48));
  if (*(unsigned __int8 *)(a1 + 56) >= a2)
    re::Engine::checkForConfigureSystemChanges(*(re::Engine **)(a1 + 24), 1);
  re::Engine::executeInlinePhase(*(_QWORD *)(a1 + 24), a2, *(float *)(*(_QWORD *)(a1 + 40) + 40));
  *(_BYTE *)(a1 + 56) = a2;
}

void re::EngineOverlay::setRealityRendererSceneGroup(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;

  if (a2)
    v4 = (id)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2;
  if (v5)

}

uint64_t *re::allocInfo_Engine(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2540FB330);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2540FB330))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2540FB408, 0);
    *(uint64_t *)((char *)&qword_2540FB418 + 6) = 0;
    qword_2540FB418 = 0;
    qword_2540FB428 = 0;
    qword_2540FB430 = 0xFFFFFFFFLL;
    qword_2540FB408 = (uint64_t)&off_24ED7DAA8;
    qword_2540FB438 = (uint64_t)"Engine";
    dword_2540FB440 = 0;
    xmmword_2540FB448 = 0u;
    unk_2540FB458 = 0u;
    xmmword_2540FB468 = 0u;
    qword_2540FB478 = 0;
    __cxa_guard_release(&qword_2540FB330);
  }
  return &qword_2540FB408;
}

void re::initInfo_Engine(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 4160343236;
  v5[1] = "Engine";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x58800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::Engine>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::Engine>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_Engine(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_Engine(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Engine", (uint64_t (*)(re::internal *))re::allocInfo_Engine, (re::IntrospectionBase *(*)(void))re::initInfo_Engine, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::Engine>, this);
}

re::EngineConfiguration *re::EngineConfiguration::EngineConfiguration(re::EngineConfiguration *this)
{
  uint64_t v2;
  _anonymous_namespace_ *v3;
  re *v4;
  const char *v5;
  const char *v6;
  BOOL v7;
  char v8;
  const char *v9;
  BOOL v10;
  char v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  BOOL v16;
  char v17;
  char v19;
  char v20;
  uint64_t v21;

  *(_BYTE *)this = 0;
  *(_QWORD *)((char *)this + 4) = -65537;
  v2 = MEMORY[0x24BDAC9B8];
  v3 = (_anonymous_namespace_ *)MEMORY[0x24BDAC9B8];
  *((_QWORD *)this + 2) = v2;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (re *)re::DynamicString::setCapacity((_QWORD *)this + 3, 0);
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 12) = re::globalAllocators(v4)[2];
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 7) = xmmword_2260F4F10;
  *((_QWORD *)this + 16) = 0x101010101010101;
  *((_QWORD *)this + 17) = 0x101010101010101;
  *((_DWORD *)this + 36) = 257;
  *((_BYTE *)this + 148) = 1;
  *(_DWORD *)((char *)this + 149) = 0;
  *(_WORD *)((char *)this + 153) = 1;
  *((_BYTE *)this + 155) = 0;
  *((_BYTE *)this + 160) = 1;
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  re::Defaults::BOOLValue((re::Defaults *)"shareAssetStates", v5, &v19);
  if (v19)
    v7 = v20 == 0;
  else
    v7 = 1;
  v8 = !v7;
  *((_BYTE *)this + 185) = v8;
  re::Defaults::BOOLValue((re::Defaults *)"calculateAssetRuntimeSize", v6, &v19);
  if (v19)
    v10 = v20 == 0;
  else
    v10 = 1;
  v11 = !v10;
  *((_BYTE *)this + 186) = v11;
  re::Defaults::uint64Value((re::Defaults *)"assetRuntimeSizeLimit", v9, (uint64_t)&v19);
  if (v19)
    v13 = v21;
  else
    v13 = -1;
  *((_QWORD *)this + 24) = v13;
  re::Defaults::uint64Value((re::Defaults *)"assetRuntimeUpdateTimeoutNanoseconds", v12, (uint64_t)&v19);
  if (v19)
    v14 = v21;
  else
    v14 = 0;
  *((_QWORD *)this + 25) = v14;
  *((_BYTE *)this + 208) = 0;
  *((_BYTE *)this + 209) = _os_feature_enabled_impl() ^ 1;
  *((_BYTE *)this + 210) = _os_feature_enabled_impl();
  *(_WORD *)((char *)this + 211) = 257;
  *((_BYTE *)this + 213) = 0;
  re::Defaults::BOOLValue((re::Defaults *)"preloadEngineAssets", v15, &v19);
  if (v19)
    v16 = v20 == 0;
  else
    v16 = 1;
  v17 = !v16;
  *((_BYTE *)this + 214) = v17;
  *(_WORD *)((char *)this + 215) = 0;
  return this;
}

re::NetworkOPACKSerializer *re::NetworkOPACKSerializer::NetworkOPACKSerializer(re::NetworkOPACKSerializer *this)
{
  uint64_t v2;
  StringID v4;

  *(_QWORD *)&v4.var0 = 0xD66B7D4190E6B598;
  v4.var1 = "NetworkOPACKSerializer";
  v2 = re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SerializerV2((uint64_t)this, &v4);
  *(_QWORD *)v2 = &off_24ED2B138;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_QWORD *)(v2 + 200) = v2 + 456;
  re::StringID::destroyString((re::StringID *)&v4);
  *(_QWORD *)this = &off_24ED2B078;
  return this;
}

void re::NetworkOPACKSerializer::~NetworkOPACKSerializer(re::NetworkOPACKSerializer *this)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED2B1A0;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  v3 = *((_QWORD *)this + 45);
  if (v3)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  v5 = *((_QWORD *)this + 34);
  if (v5)
  {
    if (*((_QWORD *)this + 38))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 35) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 34) = 0;
    ++*((_DWORD *)this + 74);
  }
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer(this);
}

{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED2B1A0;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  v3 = *((_QWORD *)this + 45);
  if (v3)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  v5 = *((_QWORD *)this + 34);
  if (v5)
  {
    if (*((_QWORD *)this + 38))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 35) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 34) = 0;
    ++*((_DWORD *)this + 74);
  }
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer(this);
  JUMPOUT(0x2276933B8);
}

void re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::doClose(uint64_t a1)
{
  re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::serializeSharedObjects(a1);
  re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
  *(_QWORD *)(a1 + 288) = 0;
  ++*(_DWORD *)(a1 + 296);
  re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1 + 312);
  *(_QWORD *)(a1 + 376) = 0;
  ++*(_DWORD *)(a1 + 384);
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 400);
}

void re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL (*v16)(uint64_t, const char *, const re::TypeInfo *, uint64_t, re *, const re::TypeInfo *, int);

  v11 = 6059476;
  v12 = "BOOL";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 6104748;
  v12 = "char";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x172E117BCLL;
  v12 = "int8_t";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93A4A92;
  v12 = "int16_t";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93BFE06;
  v12 = "int32_t";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93EC744;
  v12 = "int64_t";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 6655224;
  v12 = "long";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x31CD534126;
  v12 = "uint8_t";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD0D4E68;
  v12 = "uint16_t";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD0F01DCLL;
  v12 = "uint32_t";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD11CB1ALL;
  v12 = "uint64_t";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x1947BDF6CLL;
  v12 = "size_t";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 195052728;
  v12 = "float";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x161EEF7A2;
  v12 = "double";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 189247272;
  v12 = "char*";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2686EB529B3EE220;
  v12 = "DynamicString";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x458DDB01A18;
  v12 = "StringID";
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v2 = *(_QWORD *)(a1 + 208);
  v11 = 0x258C98EAAF29A10ALL;
  v12 = "CallbackSerializerAttribute";
  v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      v5 = *(_QWORD *)(a1 + 208);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        v6 = a1 + 224;
        v7 = (uint64_t *)(v14 + 24);
        v8 = 48 * v13;
        do
        {
          v9 = *v7;
          v7 += 6;
          v16 = re::serializeIntrospectionCallbackSerializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>;
          v15 = v9 | 0xFFFFFFFF00000000;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(v6, &v15, &v16);
          v8 -= 48;
        }
        while (v8);
      }
      if (v11)
      {
        if (v14)
          (*(void (**)(void))(*(_QWORD *)v11 + 40))();
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[32];
  _BYTE v24[32];
  __int16 v25;
  uint64_t v26;

  v10 = a4;
  v26 = a4;
  if (!*(_QWORD *)(a1 + 288))
  {
    if (*(_DWORD *)(a1 + 136) == 2)
    {
      v22 = a4;
      re::TypeInfo::TypeInfo((uint64_t)v23, (uint64_t)a5);
      re::TypeInfo::TypeInfo((uint64_t)v24, a6);
      v25 = 0;
      re::DynamicArray<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject>::add((_anonymous_namespace_ *)(a1 + 272), (uint64_t)&v22);
      LODWORD(v22) = 0;
      re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::addNew<int>(a1 + 312, &v26, &v22);
      a3 = 10;
      v10 = v26;
    }
    else
    {
      v22 = 0;
      re::TypeInfo::TypeInfo((uint64_t)v23, (uint64_t)a5);
      re::TypeInfo::TypeInfo((uint64_t)v24, a6);
      v25 = 0;
      re::DynamicArray<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject>::add((_anonymous_namespace_ *)(a1 + 272), (uint64_t)&v22);
    }
  }
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(_QWORD *)a1 + 80))(a1, a5);
  if (v14)
    return v14(a1, a2, a3, v10, a5, a6, a7);
  v16 = re::TypeInfo::name(a5);
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v17, v18, v19, v20, v21, v16[1]);
  return 0;
}

uint64_t (*re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(uint64_t a1, const char *a2, uint64_t a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 12) == 9)
    return re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::serializePointer;
  if (*(_QWORD *)a2 == *(_QWORD *)(a1 + 208))
  {
    LODWORD(v4) = **(_QWORD **)(a2 + 16);
    HIDWORD(v4) = -1;
    v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 224, &v4);
    if (v3)
      return *(uint64_t (**)(uint64_t, const char *, uint64_t, char **, re::TypeInfo *, const re::TypeInfo *, char))v3;
  }
  return (uint64_t (*)(uint64_t, const char *, uint64_t, char **, re::TypeInfo *, const re::TypeInfo *, char))re::serializeType<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>;
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SerializerV2(uint64_t a1, const StringID *a2)
{
  *(_QWORD *)a1 = &off_24ED2B208;
  re::StringID::StringID((re::StringID *)(a1 + 8), a2);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::Encoder(a1 + 24, 12);
  *(_QWORD *)(a1 + 256) = 0x7FFFFFFF00000000;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)a1 = &off_24ED2B1A0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_QWORD *)(a1 + 348) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 436) = 0x7FFFFFFFLL;
  return a1;
}

_QWORD *re::NetworkSerializerBase<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>::~NetworkSerializerBase(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED2B1A0;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(a1 + 400));
  v3 = *(_QWORD *)(a1 + 360);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 392))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    ++*(_DWORD *)(a1 + 384);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 312));
  v5 = *(_QWORD *)(a1 + 272);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 304))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    ++*(_DWORD *)(a1 + 296);
  }
  return re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer((_QWORD *)a1);
}

void re::NetworkSerializerBase<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>>::~NetworkSerializerBase(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED2B1A0;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(a1 + 400));
  v3 = *(_QWORD *)(a1 + 360);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 392))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    ++*(_DWORD *)(a1 + 384);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 312));
  v5 = *(_QWORD *)(a1 + 272);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 304))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    ++*(_DWORD *)(a1 + 296);
  }
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer((_QWORD *)a1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~SerializerV2(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED2B1A0;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(a1 + 400));
  v3 = *(_QWORD *)(a1 + 360);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 392))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    ++*(_DWORD *)(a1 + 384);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 312));
  v5 = *(_QWORD *)(a1 + 272);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 304))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    ++*(_DWORD *)(a1 + 296);
  }
  return re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer((_QWORD *)a1);
}

void re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~SerializerV2(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED2B1A0;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(a1 + 400));
  v3 = *(_QWORD *)(a1 + 360);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 392))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    ++*(_DWORD *)(a1 + 384);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 312));
  v5 = *(_QWORD *)(a1 + 272);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 304))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    ++*(_DWORD *)(a1 + 296);
  }
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer((_QWORD *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::doOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a1 + 288) = 0;
  ++*(_DWORD *)(a1 + 296);
  re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1 + 312);
  *(_QWORD *)(a1 + 376) = 0;
  ++*(_DWORD *)(a1 + 384);
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 400);
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(a1 + 24, "container", 0, 0);
  if ((result & 1) == 0 && !*(_BYTE *)(a1 + 64))
    return re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, "container", "Failed to open container.", v11, v12, v13, v14, v15, a9);
  return result;
}

void re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer(_QWORD *a1)
{
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(_QWORD *)a1 + 80))(a1, a5);
  if (v14)
    return v14(a1, a2, a3, a4, a5, a6, a7);
  v16 = re::TypeInfo::name(a5);
  re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v17, v18, v19, v20, v21, v16[1]);
  return 0;
}

uint64_t (*re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(_BYTE *a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)a2 == *(_QWORD *)(a1 + 208)
    && (LODWORD(v4) = **(_QWORD **)(a2 + 16),
        HIDWORD(v4) = -1,
        (v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 224, &v4)) != 0))
  {
    return *(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, unsigned __int16 *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v3;
  }
  else
  {
    return re::serializeType<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>;
  }
}

uint64_t re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::Encoder(uint64_t result, int a2)
{
  __objc2_class_ro **p_info;
  unsigned __int8 v3;
  __objc2_class_ro *v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[4];
  int v11;

  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_DWORD *)(result + 136) = a2;
  *(_BYTE *)(result + 140) = 0;
  *(_QWORD *)(result + 152) = 1024;
  p_info = VideoSpillMapMetalSession.info;
  if ((v3 & 1) == 0)
  {
    v9 = result;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    v7 = v5;
    result = v9;
    if (v7)
    {
      re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v6, (uint64_t)v10);
      v8 = v11;
      if (!v10[0])
        v8 = 0;
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::Encoder(int)::s_maxSerializationDepth = v8;
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      result = v9;
    }
  }
  v4 = p_info[490];
  if (v4)
    *(_QWORD *)(result + 152) = v4;
  return result;
}

_QWORD *re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::~Serializer(_QWORD *a1)
{
  *a1 = &off_24ED2B208;
  if (a1[26])
  {
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 28));
    a1[26] = 0;
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(a1 + 28);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::~Encoder((uint64_t)(a1 + 3));
  re::StringID::destroyString((re::StringID *)(a1 + 1));
  return a1;
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_391, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

double re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::~Encoder(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close((_BYTE *)a1);
  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 128))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    ++*(_DWORD *)(a1 + 120);
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(_QWORD *)(a1 + 64);
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 72) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 80));
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
    }
  }
  return a1;
}

_BYTE *re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::close(_BYTE *result)
{
  _QWORD *v1;

  if (*(_QWORD *)result)
  {
    v1 = result;
    if (!result[40])
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState((_anonymous_namespace_ *)result, 0);
    result = (_BYTE *)v1[12];
    if (result)
    {
      if (v1[16])
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 40))(result);
      v1[16] = 0;
      v1[13] = 0;
      v1[14] = 0;
      v1[12] = 0;
      ++*((_DWORD *)v1 + 30);
    }
    if (*((int *)v1 + 4) >= 1)
    {
      result = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 24))(*v1);
      v1[1] = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
    *v1 = 0;
    v1[3] = 0;
    v1[4] = 0;
  }
  return result;
}

_anonymous_namespace_ *re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(_anonymous_namespace_ *result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  char v7;

  v3 = (uint64_t)result;
  v4 = *((_QWORD *)result + 14);
  if (!v4)
  {
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v3, (uint64_t)&v6);
    result = v6;
    if (v6 && (v7 & 1) != 0)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
    v4 = *(_QWORD *)(v3 + 112);
  }
  v5 = v4 - 1;
  if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 128) + 48 * v5) != a2)
  {
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v3, (uint64_t)&v6);
    result = v6;
    if (v6 && (v7 & 1) != 0)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
    v5 = *(_QWORD *)(v3 + 112) - 1;
  }
  *(_QWORD *)(v3 + 112) = v5;
  ++*(_DWORD *)(v3 + 120);
  return result;
}

uint64_t re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)&v3 = 400;
  *((_QWORD *)&v3 + 1) = &re::FoundationErrorCategory(void)::instance;
  v4 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1, &v3);
  result = v4;
  if (v4)
  {
    if ((v5 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v4 + 40))();
  }
  return result;
}

uint64_t re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  unsigned __int8 v4[8];
  __int128 v5;
  uint64_t v6;
  char v7;

  v4[0] = 1;
  v5 = *a2;
  re::DynamicString::DynamicString((re::DynamicString *)&v6, (const re::DynamicString *)(a2 + 1));
  result = re::Optional<re::DetailedError>::operator=(a1 + 40, v4);
  if (v4[0])
  {
    result = v6;
    if (v6)
    {
      if ((v7 & 1) != 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
    }
  }
  return result;
}

uint64_t re::Optional<re::DetailedError>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  _OWORD *v6;
  BOOL v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      v9 = (_OWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 24);
      if (v8)
      {
        if ((*(_BYTE *)(a1 + 32) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 40));
        *v9 = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
      }
      *(_BYTE *)a1 = 0;
    }
    else
    {
      v6 = (_OWORD *)(a1 + 8);
      if (*(_BYTE *)a1)
        v7 = 1;
      else
        v7 = v3 == 0;
      if (v7)
      {
        *v6 = *(_OWORD *)(a2 + 8);
        re::DynamicString::operator=((re::DynamicString *)(a1 + 24), (re::DynamicString *)(a2 + 24));
      }
      else
      {
        *(_BYTE *)a1 = 1;
        *v6 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 24) = 0u;
        *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
        v10 = *((_QWORD *)a2 + 4);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a2 + 3) = 0;
        v11 = *((_QWORD *)a2 + 5);
        *((_QWORD *)a2 + 6) = 0;
        v13 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 32) = v10;
        *(_QWORD *)(a1 + 40) = v11;
        *((_QWORD *)a2 + 4) = v13;
        *((_QWORD *)a2 + 5) = v12;
      }
    }
  }
  return a1;
}

uint64_t re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _BYTE *v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  _BYTE v17[23];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21[3];
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  v22 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v23, a3, &a9);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels((_anonymous_namespace_ *)(a1 + 24), a2, (re::DynamicString *)&v15);
  if ((v16 & 1) != 0)
    v12 = *(_BYTE **)&v17[7];
  else
    v12 = v17;
  if ((v24 & 1) != 0)
    v13 = v25;
  else
    v13 = (char *)&v24 + 1;
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v18, "serialize", v12, v13);
  *(_QWORD *)&v21[0] = 400;
  *((_QWORD *)&v21[0] + 1) = &re::FoundationErrorCategory(void)::instance;
  *(_QWORD *)&v21[1] = v18;
  *((_QWORD *)&v21[2] + 1) = v20;
  *(__int128 *)((char *)&v21[1] + 8) = v19;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1 + 24, v21);
  if (*(_QWORD *)&v21[1])
  {
    if ((BYTE8(v21[1]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v21[1] + 40))();
    memset(&v21[1], 0, 32);
  }
  if (v15 && (v16 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  result = (uint64_t)v23;
  if (v23)
  {
    if ((v24 & 1) != 0)
      return (*(uint64_t (**)(void))(*v23 + 40))();
  }
  return result;
}

void *re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels@<X0>(_anonymous_namespace_ *a1@<X0>, const char *a2@<X1>, re::DynamicString *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  void *result;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  _BYTE *v14;
  size_t v15;
  size_t v16;
  char __src;
  char v18;

  v5 = *((_QWORD *)a1 + 16);
  v6 = *((_QWORD *)a1 + 14);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 1) = 0;
  result = re::DynamicString::setCapacity(a3, 0);
  if (v6 >= 2)
  {
    v8 = v6 - 1;
    v9 = v5 + 48;
    do
    {
      v10 = *(unsigned __int8 *)(v9 - 48);
      v11 = v10 > 0xA;
      v12 = (1 << v10) & 0x608;
      if (v11 || v12 == 0)
      {
        v14 = *(_BYTE **)(v9 + 8);
        if (v14 && *v14)
        {
          __src = 47;
          re::DynamicString::append(a3, &__src, 1uLL);
          v15 = strlen(*(const char **)(v9 + 8));
          result = re::DynamicString::append(a3, *(const char **)(v9 + 8), v15);
        }
        if (*(_BYTE *)v9 == 5)
          result = (void *)re::DynamicString::appendf(a3, "/%lld", *(_QWORD *)(v9 + 32));
      }
      v9 += 48;
      --v8;
    }
    while (v8);
  }
  if (a2)
  {
    if (*a2)
    {
      v18 = 47;
      re::DynamicString::append(a3, &v18, 1uLL);
      v16 = strlen(a2);
      return re::DynamicString::append(a3, a2, v16);
    }
  }
  return result;
}

uint64_t re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 24 * v3 + 4) != v2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 24 * v3 + 4) == v2)
        return v5 + 24 * v3 + 16;
    }
    return 0;
  }
  return v5 + 24 * v3 + 16;
}

uint64_t re::serializeType<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (this != (re::TypeInfo *)a6)
  {
    if (*(_QWORD *)this == *(_QWORD *)a6)
    {
      v15 = **((_QWORD **)this + 2);
      v16 = **(_QWORD **)(a6 + 16);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        v18 = WORD1(v15) == WORD1(v16);
        v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        v18 = v18 && v17 == 0;
        if (v18)
          goto LABEL_19;
      }
    }
    else if (re::areSameTranslatedVersion(this, (const re::TypeInfo *)a6, a3))
    {
      goto LABEL_19;
    }
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
      if (v19)
        v20 = *(_DWORD *)(v19 + 16);
      else
        v20 = -1;
      v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **(_QWORD **)(a6 + 16));
      if (v21)
        v22 = *(_DWORD *)(v21 + 16);
      else
        v22 = -1;
      if (v20 == v22)
        goto LABEL_19;
      v24 = re::TypeInfo::name(this)[1];
      re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
      re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **(_QWORD **)(a6 + 16));
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError((uint64_t)a1, a2, "Cannot serialize type \"%s\" version %u as version %u. Downgrading versions is not supported.", v30, v31, v32, v33, v34, v24);
    }
    else
    {
      re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, this, (re::TypeInfo *)a6);
    }
    return 0;
  }
LABEL_19:
  switch(*((_BYTE *)this + 12))
  {
    case 1:
      result = re::serializeBasic<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, a3, a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 2:
      result = re::serializeEnum<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, (re::TypeInfo *)a4, (uint64_t)this, a6, a7);
      break;
    case 3:
      result = re::serializeOptional<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 4:
      result = re::serializeArray<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, (char *)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 5:
      result = re::serializeList<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 6:
      result = re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 7:
      result = re::serializeUnion<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, (char *)a4, this, (re::TypeInfo *)a6, a7);
      break;
    case 8:
      result = re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, this, a6, a7);
      break;
    case 9:
      v35 = re::TypeInfo::name(this)[1];
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError((uint64_t)a1, a2, "Pointer type (\"%s\") needs to be handled explicitly by the serializer.", v25, v26, v27, v28, v29, v35);
      return 0;
    default:
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError((uint64_t)a1, a2, "Invalid type category. Value = %d", (uint64_t)a4, (uint64_t)this, a6, a7, a8, *((_BYTE *)this + 12));
      return 0;
  }
  return result;
}

BOOL re::areSameVersion(re *this, const re::TypeInfo *a2, const re::TypeInfo *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  if (this == a2)
    return 1;
  if (*(_QWORD *)this != *(_QWORD *)a2)
    return re::areSameTranslatedVersion(this, a2, a3);
  v4 = **((_QWORD **)this + 2);
  v5 = **((_QWORD **)a2 + 2);
  if ((unsigned __int16)v4 == (unsigned __int16)v5
    && ((v7 = WORD1(v4) == WORD1(v5), v6 = (v5 ^ v4) & 0xFFFFFF00000000, v7) ? (v7 = v6 == 0) : (v7 = 0), v7))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, re::TypeInfo *this, re::TypeInfo *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = re::TypeInfo::name(this)[1];
  re::TypeInfo::name(a4);
  return re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, a2, "Type mismatch. Runtime type \"%s\" and serialized type \"%s\" are different.", v8, v9, v10, v11, v12, v7);
}

uint64_t re::serializeBasic<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  int v10;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = (int)a3;
  if (this != a6)
  {
    if (*(_QWORD *)this != *(_QWORD *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3))
        goto LABEL_4;
LABEL_19:
      re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, this, a6);
      return 0;
    }
    v18 = **((_QWORD **)this + 2);
    v19 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v18 != (unsigned __int16)v19)
      goto LABEL_19;
    v21 = WORD1(v18) == WORD1(v19);
    v20 = (v19 ^ v18) & 0xFFFFFF00000000;
    v21 = v21 && v20 == 0;
    if (!v21)
      goto LABEL_19;
  }
LABEL_4:
  v14 = re::TypeInfo::name(this);
  v15 = (unint64_t)*v14 >> 1;
  if (v15 > 0xCA3DEFB5)
  {
    if ((unint64_t)*v14 >> 1 > 0x18E6A9A092)
    {
      if ((unint64_t)*v14 >> 1 <= 0x303EE8780EDLL)
      {
        if (v15 != 0x18E6A9A093)
        {
          if (v15 == 0x303EE86A734)
            return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned short>(a1 + 24, a2, v10, a4, a7);
          goto LABEL_47;
        }
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned char>(a1 + 24, a2, v10, (unsigned __int8 *)a4, a7);
      }
      if (v15 == 0x303EE8780EELL)
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned int>(a1 + 24, a2, v10, (unsigned int *)a4, a7);
      if (v15 != 0x303EE88E58DLL)
        goto LABEL_47;
    }
    else
    {
      if ((unint64_t)*v14 >> 1 > 0x16749DFF02)
      {
        if (v15 == 0x16749DFF03)
          return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<int>(a1 + 24, a2, v10, (int *)a4, a7);
        v22 = 0x16749F63A2;
        goto LABEL_34;
      }
      if (v15 != 3393056694)
      {
        v17 = 0x16749D2549;
        goto LABEL_24;
      }
    }
    return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned long long>(a1 + 24, a2, v10, (uint64_t *)a4, a7);
  }
  if ((unint64_t)*v14 >> 1 <= 0x5D0225B)
  {
    if ((unint64_t)*v14 >> 1 <= 0x2E9355)
    {
      if (v15 != 104431)
      {
        if (v15 == 3029738)
          return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, a2, v10, a4, a7);
        goto LABEL_47;
      }
      return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<int>(a1 + 24, a2, v10, (int *)a4, a7);
    }
    if (v15 != 3052374)
    {
      v22 = 3327612;
LABEL_34:
      if (v15 == v22)
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<long long>(a1 + 24, a2, v10, (uint64_t *)a4, a7);
LABEL_47:
      v23 = re::TypeInfo::name(this);
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, a2, "Unsupported basic type \"%s\".", v24, v25, v26, v27, v28, v23[1]);
      return 0;
    }
    return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<signed char>(a1 + 24, a2, v10, (char *)a4, a7);
  }
  if ((unint64_t)*v14 >> 1 > 0xB0F77BD0)
  {
    if (v15 != 2969009105)
    {
      if (v15 != 3111160798)
        goto LABEL_47;
      return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<signed char>(a1 + 24, a2, v10, (char *)a4, a7);
    }
    return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, a2, v10, (char *)a4, a7);
  }
  else
  {
    if (v15 != 97526364)
    {
      v17 = 109413500;
LABEL_24:
      if (v15 == v17)
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<short>(a1 + 24, a2, v10, (__int16 *)a4, a7);
      goto LABEL_47;
    }
    return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat(a1 + 24, a2, v10, (char *)a4, a7);
  }
}

uint64_t re::serializeEnum<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, re::TypeInfo *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19;

  if (a5 == a6)
    return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::internal *)a5, (re::TypeInfo *)a6, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **(_QWORD **)(a5 + 16);
    v15 = **(_QWORD **)(a6 + 16);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::internal *)a5, (re::TypeInfo *)a6, a7);
    }
  }
  else if (re::areSameTranslatedVersion((re *)a5, (const re::TypeInfo *)a6, a3))
  {
    return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::internal *)a5, (re::TypeInfo *)a6, a7);
  }
  if (*(unsigned __int8 *)(a5 + 12) == *(unsigned __int8 *)(a6 + 12))
  {
    v18 = re::TypeInfo::name((re::TypeInfo *)a5);
    v19 = re::TypeInfo::name((re::TypeInfo *)a6);
    if (re::StringID::operator==(v18, v19))
      return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a3, a4, (re::internal *)a5, (re::TypeInfo *)a6, a7);
  }
  re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, (re::TypeInfo *)a5, (re::TypeInfo *)a6);
  return 0;
}

BOOL re::serializeOptional<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  re::internal *v18;
  _anonymous_namespace_ *v19;
  uint64_t v20;
  BOOL v22;
  _BYTE v23[32];
  _BYTE v24[32];
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;

  v11 = (int)a3;
  if (a5 == a6)
    goto LABEL_11;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_11;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (a7)
  {
    v23[0] = 0;
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginOptional(a1 + 24, a2, v11, v23, 0);
    if (v23[0])
    {
      v18 = *(re::internal **)(a1 + 208);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), v25);
      re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)&v26);
      re::internal::translateType(v18, (const re::TypeRegistry *)v24, (uint64_t)v25);
      if (!*(_BYTE *)(a1 + 64))
        (*(void (**)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, 0, 0, v25, v25, 1);
    }
    v19 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), v25);
    re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)&v26);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), v25);
    re::TypeInfo::TypeInfo((uint64_t)v23, (uint64_t)&v26);
    re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)a5);
    v22 = (*(uint64_t (**)(uint64_t))(v27 + 80))(a4) != 0;
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginOptional(a1 + 24, a2, v11, &v22, 0);
    if (v22)
    {
      v20 = (*(uint64_t (**)(uint64_t))(v27 + 80))(a4);
      if (!*(_BYTE *)(a1 + 64))
        (*(void (**)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a2, 0, v20, v24, v23, 0);
    }
    v19 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endOptional(v19);
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::serializeArray<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  re::internal *v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t);
  _QWORD *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(_BYTE *, _QWORD, _QWORD, uint64_t, _BYTE *, unint64_t *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t result;
  char *v33;
  _anonymous_namespace_ *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  _anonymous_namespace_ *v43;
  unint64_t v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  BOOL v53;
  char v54;
  unint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  unint64_t v58;
  _QWORD v59[2];
  unint64_t v60[4];
  _BYTE v61[12];
  char v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE v65[32];

  v11 = (int)a3;
  if (a5 == a6)
    goto LABEL_13;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((_BYTE *)a6 + 12) != 4)
    goto LABEL_69;
  v18 = (_QWORD *)*((_QWORD *)a5 + 2);
  v19 = (_QWORD *)*((_QWORD *)a6 + 2);
  v20 = *((_DWORD *)v19 + 21) & 0xFFFFFF;
  if ((*((_DWORD *)v18 + 21) & 0xFFFFFF) != 0)
  {
    if (v20)
      goto LABEL_13;
LABEL_69:
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, a5, a6);
    return 0;
  }
  if (v20 || *((_DWORD *)v18 + 22) != *((_DWORD *)v19 + 22))
    goto LABEL_69;
LABEL_13:
  if (a7)
  {
    v21 = (re::internal *)*((_QWORD *)a1 + 26);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v64);
    re::TypeInfo::TypeInfo((uint64_t)v60, (uint64_t)v65);
    re::internal::translateType(v21, (const re::TypeRegistry *)v60, (uint64_t)v61);
    v22 = (*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v61);
    if (v22)
    {
      v23 = (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))v22;
      v24 = (_QWORD *)*((_QWORD *)a6 + 2);
      v25 = *((_DWORD *)v24 + 21) & 0xFFFFFF;
      if (v25)
        v26 = 0;
      else
        v26 = *((int *)v24 + 22);
      v64 = v26;
      if (v62 == 1)
      {
        v60[0] = v26 * *(unsigned int *)(v63 + 8);
        v50 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginBLOB((uint64_t)(a1 + 24), a2, v11, v60, 0);
        result = 0;
        if (!v50)
          return result;
        if (v60[0])
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBLOB((uint64_t)(a1 + 24), 0, 1);
        v34 = (_anonymous_namespace_ *)(a1 + 24);
        goto LABEL_48;
      }
      if (v25)
        v51 = 8;
      else
        v51 = 4;
      v43 = (_anonymous_namespace_ *)(a1 + 24);
      result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray((uint64_t)(a1 + 24), a2, v11, &v64, v51);
      if ((_DWORD)result)
      {
        v52 = v64;
        if (v25)
          v53 = v64 == 0;
        else
          v53 = 1;
        v54 = v53;
        if (!v53)
        {
          v59[0] = 0;
          v59[1] = 0xFFFFFFFFLL;
          (*(void (**)(_BYTE *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 16))(a1, 0, v59);
          v52 = v64;
        }
        if (v52)
        {
          v55 = 0;
          do
          {
            v23(a1, 0, 0, 0, v61, v61, 1);
            ++v55;
          }
          while (v55 < v64);
        }
        if ((v54 & 1) != 0)
          goto LABEL_41;
        goto LABEL_40;
      }
      return result;
    }
    goto LABEL_23;
  }
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &v64);
  re::TypeInfo::TypeInfo((uint64_t)v61, (uint64_t)v65);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v64);
  re::TypeInfo::TypeInfo((uint64_t)v60, (uint64_t)v65);
  re::TypeInfo::TypeInfo((uint64_t)&v64, (uint64_t)a5);
  v27 = (*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v61);
  if (!v27)
  {
LABEL_23:
    v35 = re::TypeInfo::name((re::TypeInfo *)v61);
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError((uint64_t)a1, 0, "Failed to resolve serialize function for type \"%s\"", v36, v37, v38, v39, v40, v35[1]);
    return 0;
  }
  v28 = (void (*)(_BYTE *, _QWORD, _QWORD, uint64_t, _BYTE *, unint64_t *, _QWORD))v27;
  v29 = re::ArrayAccessor::size((re::ArrayAccessor *)&v64, a4);
  v58 = v29;
  if (v62 == 1)
  {
    v30 = v29;
    v57 = v29 * *(unsigned int *)(v63 + 8);
    v31 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginBLOB((uint64_t)(a1 + 24), a2, v11, (unint64_t *)&v57, 0);
    result = 0;
    if (!v31)
      return result;
    if (v30)
    {
      v33 = (char *)re::ArrayAccessor::elementAt((re::ArrayAccessor *)&v64, a4, 0);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBLOB((uint64_t)(a1 + 24), v33, 0);
    }
    v34 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_48:
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endBLOB(v34);
    return a1[64] == 0;
  }
  v41 = *(_DWORD *)(*((_QWORD *)a5 + 2) + 84) & 0xFFFFFF;
  if (v41)
    v42 = 8;
  else
    v42 = 4;
  v43 = (_anonymous_namespace_ *)(a1 + 24);
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray((uint64_t)(a1 + 24), a2, v11, &v58, v42);
  if ((_DWORD)result)
  {
    v44 = v58;
    if (v41)
      v45 = v58 == 0;
    else
      v45 = 1;
    v46 = v45;
    if (!v45)
    {
      v47 = *(_QWORD *)a4;
      v56[0] = 0;
      v56[1] = 0xFFFFFFFFLL;
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v47, v56);
      v44 = v58;
    }
    if (v44)
    {
      v48 = 0;
      do
      {
        v49 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)&v64, a4, v48);
        v28(a1, 0, 0, v49, v61, v60, 0);
        ++v48;
      }
      while (v48 < v58);
    }
    if ((v46 & 1) != 0)
      goto LABEL_41;
LABEL_40:
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1);
LABEL_41:
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray(v43);
    return a1[64] == 0;
  }
  return result;
}

BOOL re::serializeList<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  re::internal *v18;
  uint64_t v19;
  int v20;
  _BOOL8 result;
  _anonymous_namespace_ *v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *, unint64_t *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t i;
  uint64_t v36;
  _anonymous_namespace_ *v37;
  void (*v38)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t);
  int v39;
  unint64_t j;
  uint64_t (*v41)(uint64_t, _QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52[4];
  unint64_t v53;
  unint64_t v54[4];
  _BYTE v55[12];
  char v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v11 = (int)a3;
  if (a5 == a6)
    goto LABEL_11;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_11;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (!a7)
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &v58);
    re::TypeInfo::TypeInfo((uint64_t)v55, (uint64_t)&v59);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v58);
    re::TypeInfo::TypeInfo((uint64_t)v54, (uint64_t)&v59);
    re::TypeInfo::TypeInfo((uint64_t)&v58, (uint64_t)a5);
    v23 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v55);
    if (!v23)
      goto LABEL_27;
    v24 = (void (*)(uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *, unint64_t *, _QWORD))v23;
    v25 = (*(uint64_t (**)(uint64_t))(v60 + 80))(a4);
    v53 = v25;
    if (*((_BYTE *)a5 + 12) == 5 && (*(_BYTE *)(*((_QWORD *)a5 + 2) + 48) & 8) != 0 && v56 == 1)
    {
      v26 = v25;
      v52[0] = v25 * *(unsigned int *)(v57 + 8);
      v27 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginBLOB(a1 + 24, a2, v11, v52, 0);
      result = 0;
      if (!v27)
        return result;
      if (v26)
      {
        v28 = (char *)(*(uint64_t (**)(uint64_t, _QWORD))(v60 + 96))(a4, 0);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBLOB(a1 + 24, v28, 0);
      }
      v22 = (_anonymous_namespace_ *)(a1 + 24);
      goto LABEL_26;
    }
    v34 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, v11, &v53, 0);
    result = 0;
    if (!v34)
      return result;
    if (*(_QWORD *)(v60 + 96))
    {
      if (v53)
      {
        for (i = 0; i < v53; ++i)
        {
          v36 = (*(uint64_t (**)(uint64_t, unint64_t))(v60 + 96))(a4, i);
          v24(a1, 0, 0, v36, v55, v54, 0);
        }
      }
LABEL_36:
      v37 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_42:
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray(v37);
      return *(_BYTE *)(a1 + 64) == 0;
    }
    v41 = *(uint64_t (**)(uint64_t, _QWORD))(v60 + 104);
    if (v41 && *(_QWORD *)(v60 + 112) && *(_QWORD *)(v60 + 120))
    {
      v42 = v41(a4, *(_QWORD *)(a1 + 56));
      v43 = (*(uint64_t (**)(void))(v60 + 112))();
      if (v43)
      {
        v44 = v43;
        do
        {
          v24(a1, 0, 0, v44, v55, v54, 0);
          v44 = (*(uint64_t (**)(uint64_t))(v60 + 112))(v42);
        }
        while (v44);
      }
      (*(void (**)(uint64_t, _QWORD))(v60 + 120))(v42, *(_QWORD *)(a1 + 56));
      goto LABEL_36;
    }
    re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)&v58);
    v51 = re::TypeInfo::name((re::TypeInfo *)v52)[1];
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, a2, "List type \"%s\" does not provide an indexer or iterator.", v45, v46, v47, v48, v49, v51);
    return 0;
  }
  v18 = *(re::internal **)(a1 + 208);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v58);
  re::TypeInfo::TypeInfo((uint64_t)v54, (uint64_t)&v59);
  re::internal::translateType(v18, (const re::TypeRegistry *)v54, (uint64_t)v55);
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v55);
  if (!v19)
  {
LABEL_27:
    v50 = re::TypeInfo::name((re::TypeInfo *)v55)[1];
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v29, v30, v31, v32, v33, v50);
    return 0;
  }
  v58 = 0;
  if (v56 != 1)
  {
    v38 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))v19;
    v39 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(a1 + 24, a2, v11, &v58, 0);
    result = 0;
    if (!v39)
      return result;
    if (v58)
    {
      for (j = 0; j < v58; ++j)
        v38(a1, 0, 0, 0, v55, v55, 1);
    }
    v37 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_42;
  }
  v54[0] = 0;
  v20 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginBLOB(a1 + 24, a2, v11, v54, 0);
  result = 0;
  if (!v20)
    return result;
  if (v54[0])
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBLOB(a1 + 24, 0, 1);
  v22 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_26:
  re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endBLOB(v22);
  return *(_BYTE *)(a1 + 64) == 0;
}

BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  re::internal *v18;
  re::internal *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, _QWORD, _QWORD, _QWORD *, _QWORD *, uint64_t, double);
  uint64_t v22;
  void (*v23)(uint64_t, const char *, _QWORD, _QWORD, int *, int *, uint64_t);
  int v24;
  _BOOL8 result;
  unint64_t v26;
  double v27;
  _anonymous_namespace_ *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, _QWORD, uint64_t, _QWORD *, _BYTE *, _QWORD, double);
  uint64_t v31;
  void (*v32)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  int v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  __n128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t i;
  double v49;
  unint64_t v50;
  void (*v51)(void);
  re::TypeInfo *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t j;
  double v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD v66[2];
  unint64_t v67;
  int v68;
  uint64_t *v69;
  unint64_t v70;
  _BYTE v71[16];
  uint64_t v72;
  _BYTE v73[32];
  _BYTE v74[32];
  _BYTE v75[32];
  _QWORD v76[4];
  uint64_t v77;
  int v78;
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  unint64_t v83;
  __int16 v84;
  unint64_t v85;
  __n128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v11 = (int)a3;
  v91 = *MEMORY[0x24BDAC8D0];
  if (a5 == a6)
    goto LABEL_11;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_11;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (!a7)
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &v86);
    re::TypeInfo::TypeInfo((uint64_t)v76, (uint64_t)&v86.n128_i64[1]);
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v86);
    re::TypeInfo::TypeInfo((uint64_t)v75, (uint64_t)&v86.n128_i64[1]);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v86);
    re::TypeInfo::TypeInfo((uint64_t)v74, (uint64_t)&v86.n128_i64[1]);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v86);
    re::TypeInfo::TypeInfo((uint64_t)v73, (uint64_t)&v86.n128_i64[1]);
    re::TypeInfo::TypeInfo((uint64_t)v71, (uint64_t)a5);
    v29 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 80))(a1, v76);
    if (!v29)
    {
      v52 = (re::TypeInfo *)v76;
      goto LABEL_45;
    }
    v30 = (void (*)(uint64_t, const char *, _QWORD, uint64_t, _QWORD *, _BYTE *, _QWORD, double))v29;
    v31 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v75);
    if (!v31)
    {
      v52 = (re::TypeInfo *)v75;
      goto LABEL_45;
    }
    v32 = (void (*)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v31;
    v70 = (*(uint64_t (**)(uint64_t))(v72 + 88))(a4);
    v33 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionary(a1 + 24, a2, v11, &v70, 0);
    result = 0;
    if (!v33)
      return result;
    if (!v70)
    {
LABEL_54:
      v28 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_55:
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endDictionary(v28);
      return *(_BYTE *)(a1 + 64) == 0;
    }
    v34 = *(_QWORD *)a5;
    v86.n128_u64[0] = 0x449AD97C4B77BED4;
    v86.n128_u64[1] = (unint64_t)"_CompareFunc";
    v35 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v34 + 200, &v86);
    if (v35)
    {
      v36 = *v35;
      re::StringID::destroyString((re::StringID *)&v86);
      if (v34)
      {
        v37 = *(_QWORD *)v76[2];
        v86.n128_u64[0] = v36;
        v86.n128_u64[1] = v37;
        LODWORD(v87) = -1;
        v38 = (unint64_t *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v76[0] + 768, (uint64_t *)&v86);
        if (v38)
        {
          v39 = *v38;
          if (*v38)
          {
            v69 = 0;
            v66[1] = 0;
            v67 = 0;
            v68 = 0;
            v66[0] = *(_QWORD *)(a1 + 56);
            re::DynamicArray<re::RigNodeConstraint>::setCapacity(v66, v70);
            ++v68;
            v40 = (*(uint64_t (**)(uint64_t, _QWORD))(v72 + 112))(a4, *(_QWORD *)(a1 + 56));
            if ((*(unsigned int (**)(void))(v72 + 120))())
            {
              do
              {
                v41 = (*(uint64_t (**)(uint64_t))(v72 + 128))(v40);
                v42 = (*(uint64_t (**)(uint64_t))(v72 + 136))(v40);
                v86.n128_u64[0] = v41;
                v86.n128_u64[1] = v42;
                v43 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v66, &v86);
              }
              while (((*(uint64_t (**)(uint64_t, __n128))(v72 + 120))(v40, v43) & 1) != 0);
            }
            (*(void (**)(uint64_t, _QWORD))(v72 + 144))(v40, *(_QWORD *)(a1 + 56));
            v86.n128_u64[0] = v39;
            v45 = 126 - 2 * __clz(v67);
            if (v67)
              v46 = v45;
            else
              v46 = 0;
            std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(v69, &v69[2 * v67], (uint64_t (**)(uint64_t, uint64_t))&v86, v46, 1, v44);
            if (v70)
            {
              v47 = 0;
              for (i = 0; i < v70; ++i)
              {
                v49 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionaryEntry(a1 + 24, 0);
                if (v67 <= i)
                {
                  v77 = 0;
                  v89 = 0u;
                  v90 = 0u;
                  v87 = 0u;
                  v88 = 0u;
                  v86 = 0u;
                  v64 = v67;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v78 = 136315906;
                  v79 = "operator[]";
                  v80 = 1024;
                  v81 = 789;
                  v82 = 2048;
                  v83 = i;
                  v84 = 2048;
                  v85 = v64;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_57:
                  v77 = 0;
                  v89 = 0u;
                  v90 = 0u;
                  v87 = 0u;
                  v88 = 0u;
                  v86 = 0u;
                  v65 = v50;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v78 = 136315906;
                  v79 = "operator[]";
                  v80 = 1024;
                  v81 = 789;
                  v82 = 2048;
                  v83 = i;
                  v84 = 2048;
                  v85 = v65;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                v30(a1, "key", 0, v69[v47], v76, v74, 0, v49);
                v50 = v67;
                if (v67 <= i)
                  goto LABEL_57;
                v32(a1, "value", 0, v69[v47 + 1], v75, v73, 0);
                re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
                v47 += 2;
              }
            }
            if (!v66[0] || !v69)
              goto LABEL_54;
            v51 = *(void (**)(void))(*(_QWORD *)v66[0] + 40);
            goto LABEL_53;
          }
        }
      }
    }
    else
    {
      re::StringID::destroyString((re::StringID *)&v86);
    }
    v59 = (*(uint64_t (**)(uint64_t, _QWORD))(v72 + 112))(a4, *(_QWORD *)(a1 + 56));
    (*(void (**)(void))(v72 + 120))();
    if (v70)
    {
      for (j = 0; j < v70; ++j)
      {
        v61 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionaryEntry(a1 + 24, 0);
        v62 = (*(uint64_t (**)(uint64_t, double))(v72 + 128))(v59, v61);
        ((void (*)(uint64_t, const char *, _QWORD, uint64_t, _QWORD *, _BYTE *, _QWORD))v30)(a1, "key", 0, v62, v76, v74, 0);
        v63 = (*(uint64_t (**)(uint64_t))(v72 + 136))(v59);
        v32(a1, "value", 0, v63, v75, v73, 0);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
        (*(void (**)(uint64_t))(v72 + 120))(v59);
      }
    }
    v51 = *(void (**)(void))(v72 + 144);
LABEL_53:
    v51();
    goto LABEL_54;
  }
  v18 = *(re::internal **)(a1 + 208);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v86);
  re::TypeInfo::TypeInfo((uint64_t)&v78, (uint64_t)&v86.n128_i64[1]);
  re::internal::translateType(v18, (const re::TypeRegistry *)&v78, (uint64_t)v66);
  v19 = *(re::internal **)(a1 + 208);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v86);
  re::TypeInfo::TypeInfo((uint64_t)v76, (uint64_t)&v86.n128_i64[1]);
  re::internal::translateType(v19, (const re::TypeRegistry *)v76, (uint64_t)&v78);
  v20 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 80))(a1, v66);
  if (!v20)
  {
    v52 = (re::TypeInfo *)v66;
LABEL_45:
    v53 = re::TypeInfo::name(v52);
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v54, v55, v56, v57, v58, v53[1]);
    return 0;
  }
  v21 = (void (*)(uint64_t, const char *, _QWORD, _QWORD, _QWORD *, _QWORD *, uint64_t, double))v20;
  v22 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 80))(a1, &v78);
  if (!v22)
  {
    v52 = (re::TypeInfo *)&v78;
    goto LABEL_45;
  }
  v23 = (void (*)(uint64_t, const char *, _QWORD, _QWORD, int *, int *, uint64_t))v22;
  v86.n128_u64[0] = 0;
  v24 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionary(a1 + 24, a2, v11, v86.n128_u64, 0);
  result = 0;
  if (v24)
  {
    if (v86.n128_u64[0])
    {
      v26 = 0;
      do
      {
        v27 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionaryEntry(a1 + 24, 1);
        v21(a1, "key", 0, 0, v66, v66, 1, v27);
        v23(a1, "value", 0, 0, &v78, &v78, 1);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
        ++v26;
      }
      while (v26 < v86.n128_u64[0]);
    }
    v28 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_55;
  }
  return result;
}

uint64_t re::serializeUnion<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, re::TypeInfo *a6, int a7)
{
  int v11;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19[4];
  unint64_t Tag;
  _BYTE v21[32];

  v11 = (int)a3;
  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
LABEL_19:
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, a5, a6);
    return 0;
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    goto LABEL_19;
LABEL_4:
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject((uint64_t)(a1 + 24), a2, v11, 16);
  if (a7)
  {
    if (!(_DWORD)result)
      return result;
    v19[0] = 0;
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned long long>((uint64_t)(a1 + 24), "tag", 0, (uint64_t *)v19, 0);
    if (v19[0] < *(unsigned int *)(*((_QWORD *)a6 + 2) + 88))
    {
      re::TypeInfo::unionMember(a6, v19[0], (uint64_t)v21);
      if (!a1[64])
        (*(void (**)(_BYTE *, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, "value", 0, 0, v21, v21, 1);
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    re::TypeInfo::TypeInfo((uint64_t)v21, (uint64_t)a5);
    Tag = re::UnionAccessor::readTag((re::UnionAccessor *)v21, a4);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned long long>((uint64_t)(a1 + 24), "tag", 0, (uint64_t *)&Tag, 0);
    if (Tag < *(unsigned int *)(*((_QWORD *)a5 + 2) + 88))
    {
      re::TypeInfo::unionMember(a5, Tag, (uint64_t)v19);
      if (!a1[64])
        (*(void (**)(_BYTE *, const char *, _QWORD, char *, unint64_t *, unint64_t *, _QWORD))(*(_QWORD *)a1 + 72))(a1, "value", 0, a4, v19, v19, 0);
    }
  }
  re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
  return a1[64] == 0;
}

uint64_t re::serializeObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, re::TypeInfo *this, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  const char *v15;
  const re::TypeInfo *v16;
  int v17;
  uint64_t result;
  re::TypeRegistry *v19;
  re *v20;
  const re::TypeInfo *v21;
  uint64_t v22;
  const char *v23;
  const re::TypeInfo *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _BYTE v36[8];
  uint64_t v37;
  _BYTE v38[32];

  if (!(_DWORD)a7)
  {
LABEL_6:
    if ((*(_BYTE *)(*((_QWORD *)this + 2) + 48) & 4) != 0)
      return re::internal::serializeObjectWithOneMember<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_BYTE *)a1, a2, a3, a4, (uint64_t *)this, (uint64_t *)a6, a7);
    v17 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(a1 + 24, a2, a3, 0);
    result = 0;
    if (!v17)
      return result;
    if (this == (re::TypeInfo *)a6)
      goto LABEL_11;
    if (*(_QWORD *)this == *(_QWORD *)a6)
    {
      v25 = **((_QWORD **)this + 2);
      v26 = **(_QWORD **)(a6 + 16);
      if ((unsigned __int16)v25 == (unsigned __int16)v26)
      {
        v28 = WORD1(v25) == WORD1(v26);
        v27 = (v26 ^ v25) & 0xFFFFFF00000000;
        v28 = v28 && v27 == 0;
        if (v28)
          goto LABEL_11;
      }
    }
    else if (re::areSameTranslatedVersion(this, (const re::TypeInfo *)a6, v16))
    {
LABEL_11:
      re::internal::serializeMembersWithoutVersioning<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_BYTE *)a1, a4, (uint64_t *)this, a7);
LABEL_24:
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
      return *(_BYTE *)(a1 + 64) == 0;
    }
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      re::internal::serializeMembersWithVersioning<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a4, (uint64_t *)this, (uint64_t *)a6, a7);
    }
    else
    {
      v29 = re::TypeInfo::name(this)[1];
      re::TypeInfo::name((re::TypeInfo *)a6);
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, 0, "Type categories of types \"%s\" (runtime) and \"%s\" (stream) don't match.", v30, v31, v32, v33, v34, v29);
    }
    goto LABEL_24;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 49) & 1) != 0)
  {
    v19 = *(re::TypeRegistry **)(a1 + 208);
    v35[0] = 0x2686EB529B3EE220;
    v35[1] = "DynamicString";
    re::TypeRegistry::typeInfo(v19, (const re::StringID *)v35, v36);
    re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)&v37);
    re::StringID::destroyString((re::StringID *)v35);
    v20 = (re *)v38;
    v21 = (const re::TypeInfo *)v38;
    v22 = a1;
    v23 = a2;
    v24 = (const re::TypeInfo *)a3;
  }
  else
  {
    v14 = re::TypeInfo::name(this);
    if ((unint64_t)*v14 >> 1 != 0x134375A94D9F7110)
      goto LABEL_6;
    v15 = (const char *)v14[1];
    if (v15 != "DynamicString")
    {
      if (strcmp(v15, "DynamicString"))
        goto LABEL_6;
    }
    v22 = a1;
    v23 = a2;
    v24 = (const re::TypeInfo *)a3;
    v20 = this;
    v21 = this;
  }
  re::serializeDynamicString<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(v22, v23, v24, 0, v20, v21, 1);
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(uint64_t a1, const char *a2, int a3, _BYTE *a4, char a5)
{
  uint64_t v5;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char __src;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    if (*a4)
      v10 = 1;
    else
      v10 = 2;
    __src = v10;
    if (!*(_BYTE *)(a1 + 40)
      && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, &__src, 1uLL) & 1) == 0)
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Boolean");
    }
    if ((a5 & 2) == 0)
    {
      v11 = *(_QWORD *)(a1 + 128);
      v12 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v11 + 48 * v12) != 2)
        ++*(_QWORD *)(v11 + 48 * v12 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat(uint64_t a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char __src;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    __src = 53;
    if (!*(_BYTE *)(a1 + 40))
    {
      if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, &__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Float");
      if (!*(_BYTE *)(a1 + 40)
        && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, a4, 4uLL) & 1) == 0)
      {
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Float");
      }
    }
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v10 + 48 * v11) != 2)
        ++*(_QWORD *)(v10 + 48 * v11 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(uint64_t a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char __src;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    __src = 54;
    if (!*(_BYTE *)(a1 + 40))
    {
      if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, &__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Double");
      if (!*(_BYTE *)(a1 + 40)
        && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, a4, 8uLL) & 1) == 0)
      {
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Double");
      }
    }
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v10 + 48 * v11) != 2)
        ++*(_QWORD *)(v10 + 48 * v11 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(uint64_t a1, const char *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 112) - 1;
  if (*(_BYTE *)(v3 + 48 * v4) == 2 && (*(_BYTE *)(v3 + 48 * v4 + 4) & 0x40) == 0)
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(a1, a2, a3);
  return 1;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(uint64_t result, const char *a2, uint64_t a3)
{
  unsigned __int8 *v5;
  const char *v6;
  int v7;
  int v8;
  uint64_t __src;

  v5 = (unsigned __int8 *)result;
  if ((unint64_t)(a3 + 1) > 0x28)
  {
    if (a3 == (char)a3)
    {
      LOBYTE(__src) = 48;
      if (!*(_BYTE *)(result + 40))
      {
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
        if ((result & 1) == 0)
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"8-Bit Signed Integer");
        v7 = v5[40];
        LOBYTE(__src) = a3;
        if (!v7)
        {
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, (char *)&__src, 1uLL);
          if ((result & 1) == 0)
          {
            v6 = "8-Bit Signed Integer";
            return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
          }
        }
      }
    }
    else
    {
      LOBYTE(__src) = 51;
      if (!*(_BYTE *)(result + 40))
      {
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
        if ((result & 1) == 0)
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"64-Bit Signed Integer");
        v8 = v5[40];
        __src = a3;
        if (!v8)
        {
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, (char *)&__src, 8uLL);
          if ((result & 1) == 0)
          {
            v6 = "64-Bit Signed Integer";
            return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
          }
        }
      }
    }
  }
  else
  {
    LOBYTE(__src) = a3 + 8;
    if (!*(_BYTE *)(result + 40))
    {
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
      if ((result & 1) == 0)
      {
        v6 = "Small Signed Integer";
        return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
      }
    }
  }
  return result;
}

uint64_t re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(_QWORD *a1, char *__src, size_t __n)
{
  int *v5;
  void **v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  size_t v12;

  v5 = (int *)(a1 + 2);
  v6 = (void **)(a1 + 1);
  if (__src)
  {
    v7 = __src;
    while (1)
    {
      v8 = *v5;
      if (__n <= v8)
        break;
      if ((int)v8 >= 1)
      {
        memcpy(*v6, v7, v8);
        v9 = *v5;
        v7 += v9;
        __n -= v9;
        *v6 = 0;
        *v5 = 0;
      }
      if (((*(uint64_t (**)(_QWORD, void **, int *))(*(_QWORD *)*a1 + 16))(*a1, v6, v5) & 1) == 0)
        return 0;
    }
    memcpy(*v6, v7, __n);
  }
  else
  {
    while (1)
    {
      v12 = *v5;
      if (__n <= v12)
        break;
      if ((int)v12 >= 1)
      {
        bzero(*v6, v12);
        __n -= *v5;
        *v6 = 0;
        *v5 = 0;
      }
      v11 = (*(uint64_t (**)(_QWORD, void **, int *))(*(_QWORD *)*a1 + 16))(*a1, v6, v5);
      result = 0;
      if ((v11 & 1) == 0)
        return result;
    }
    bzero(*v6, __n);
  }
  *v6 = (char *)*v6 + __n;
  *v5 -= __n;
  return 1;
}

uint64_t re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(_anonymous_namespace_ *a1, const char *a2, uint64_t a3)
{
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  _BYTE v9[23];
  _OWORD v10[2];

  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v7);
  if ((v8 & 1) != 0)
    v5 = *(_BYTE **)&v9[7];
  else
    v5 = v9;
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: Error %s type %s.", (re::DynamicString *)v10, "serialize", v5, "writing", a3);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, (uint64_t)v10);
  if (*(_QWORD *)&v10[0])
  {
    if ((BYTE8(v10[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v10[0] + 40))();
    memset(v10, 0, sizeof(v10));
  }
  result = v7;
  if (v7)
  {
    if ((v8 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v7 + 40))();
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  const char *v12;
  _anonymous_namespace_ *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t i;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  BOOL v27;
  unsigned __int8 v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  char v33;
  _BYTE v34[23];
  size_t v35;
  __int128 v36;
  size_t v37;
  size_t __n[6];
  unsigned __int8 __src;

  if (*(_BYTE *)(result + 40))
    return result;
  v1 = result;
  __src = 0;
  v2 = *(_QWORD *)(result + 168);
  if (v2)
  {
    v3 = v2 - 1;
    v4 = *(unsigned __int8 *)(result + v3 + 160);
    __src = v4;
    *(_QWORD *)(v1 + 168) = v3;
  }
  else
  {
    if (!re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL))
    {
      v12 = "Member";
      v13 = (_anonymous_namespace_ *)v1;
      return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v13, "unknown", (uint64_t)v12);
    }
    v4 = __src;
  }
  result = (uint64_t)re::OPACK::toString(v4);
  v5 = result;
  v6 = __src;
  if (__src > 0x2Fu)
  {
    switch(__src)
    {
      case '0':
LABEL_20:
        if (*(_BYTE *)(v1 + 40))
          return result;
        v10 = (_QWORD *)v1;
        v11 = 1;
        goto LABEL_73;
      case '1':
LABEL_30:
        if (*(_BYTE *)(v1 + 40))
          return result;
        v15 = *(_QWORD *)(v1 + 168);
        if (!v15)
        {
          v11 = 2;
          goto LABEL_72;
        }
        v8 = 2;
        if (v15 >= 2)
          v9 = 2;
        else
          v9 = *(_QWORD *)(v1 + 168);
        *(_QWORD *)(v1 + 168) = v15 - v9;
        if (v15 != 1)
          return result;
        goto LABEL_48;
      case '2':
      case '5':
LABEL_23:
        if (*(_BYTE *)(v1 + 40))
          return result;
        v14 = *(_QWORD *)(v1 + 168);
        if (!v14)
        {
          v11 = 4;
          goto LABEL_72;
        }
        v8 = 4;
        if (v14 >= 4)
          v9 = 4;
        else
          v9 = *(_QWORD *)(v1 + 168);
        *(_QWORD *)(v1 + 168) = v14 - v9;
        if (v14 > 3)
          return result;
        goto LABEL_48;
      case '3':
      case '6':
        goto LABEL_12;
      case '4':
        goto LABEL_37;
      default:
        switch(__src)
        {
          case 0xC1u:
            goto LABEL_20;
          case 0xC2u:
            goto LABEL_30;
          case 0xC3u:
            if (*(_BYTE *)(v1 + 40))
              return result;
            v18 = *(_QWORD *)(v1 + 168);
            if (!v18)
            {
              v11 = 3;
              goto LABEL_72;
            }
            v19 = 3;
            if (v18 < 3)
              v19 = *(_QWORD *)(v1 + 168);
            *(_QWORD *)(v1 + 168) = v18 - v19;
            v11 = v19 ^ 3;
            if (v19 == 3)
              return result;
            goto LABEL_72;
          case 0xC4u:
            goto LABEL_23;
          default:
            goto LABEL_37;
        }
    }
  }
  if (__src - 1 >= 4)
  {
    if (__src == 5)
    {
      if (*(_BYTE *)(v1 + 40))
        return result;
      v17 = *(_QWORD *)(v1 + 168);
      if (!v17)
      {
        v11 = 16;
        goto LABEL_72;
      }
      v8 = 16;
      if (v17 >= 0x10)
        v9 = 16;
      else
        v9 = *(_QWORD *)(v1 + 168);
      *(_QWORD *)(v1 + 168) = v17 - v9;
      if (v17 > 0xF)
        return result;
    }
    else
    {
      if (__src != 6)
      {
LABEL_37:
        if (__src - 7 < 0x29)
          return result;
        if (__src - 64 > 0x24)
        {
          if (__src - 112 > 0x24)
          {
            if ((__src + 96) >= 0x21u)
            {
              if ((__src + 48) > 0xEu)
              {
                if (__src == 223)
                {
                  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readTag(v1, "unknown", (char *)&__src, (uint64_t)"Array value/terminator");
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v23 = __src;
                      if (__src == 3)
                        break;
                      v24 = *(_QWORD *)(v1 + 168);
                      if (v24 <= 7)
                      {
                        *(_QWORD *)(v1 + 168) = v24 + 1;
                        *(_BYTE *)(v1 + v24 + 160) = v23;
                      }
                      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject(v1);
                      result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readTag(v1, "unknown", (char *)&__src, (uint64_t)"Array value/terminator");
                    }
                    while ((result & 1) != 0);
                  }
                }
                else if ((__src + 32) > 0xEu)
                {
                  if (__src == 239)
                  {
                    for (result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readTag(v1, "unknown", (char *)&__src, (uint64_t)"Dictionary key/value/terminator");
                          (_DWORD)result;
                          result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readTag(v1, "unknown", (char *)&__src, (uint64_t)"Dictionary key/value/terminator"))
                    {
                      v28 = __src;
                      if (__src == 3)
                        break;
                      v29 = *(_QWORD *)(v1 + 168);
                      if (v29 <= 7)
                      {
                        *(_QWORD *)(v1 + 168) = v29 + 1;
                        *(_BYTE *)(v1 + v29 + 160) = v28;
                      }
                      v30 = -2;
                      do
                      {
                        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject(v1);
                        v27 = __CFADD__(v30++, 1);
                      }
                      while (!v27);
                    }
                  }
                  else
                  {
                    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels((_anonymous_namespace_ *)v1, 0, (re::DynamicString *)&v32);
                    if ((v33 & 1) != 0)
                      v31 = *(_BYTE **)&v34[7];
                    else
                      v31 = v34;
                    re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Found unsupported tag while skipping over data.", (re::DynamicString *)&v35, v31);
                    __n[0] = 400;
                    __n[1] = (size_t)&re::FoundationErrorCategory(void)::instance;
                    __n[2] = v35;
                    __n[5] = v37;
                    *(_OWORD *)&__n[3] = v36;
                    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, (__int128 *)__n);
                    if (__n[2])
                    {
                      if ((__n[3] & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)__n[2] + 40))();
                      memset(&__n[2], 0, 32);
                    }
                    result = v32;
                    if (v32 && (v33 & 1) != 0)
                      return (*(uint64_t (**)(void))(*(_QWORD *)v32 + 40))();
                  }
                }
                else
                {
                  v25 = *(_QWORD *)(v1 + 168);
                  if (v25 <= 7)
                  {
                    *(_QWORD *)(v1 + 168) = v25 + 1;
                    *(_BYTE *)(v1 + v25 + 160) = v6;
                  }
                  __n[0] = 0;
                  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readDictionaryTag(v1, "unknown", (char *)__n);
                  if (2 * __n[0])
                  {
                    v26 = -2 * __n[0];
                    do
                    {
                      result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject(v1);
                      v27 = __CFADD__(v26++, 1);
                    }
                    while (!v27);
                  }
                }
              }
              else
              {
                v21 = *(_QWORD *)(v1 + 168);
                if (v21 <= 7)
                {
                  *(_QWORD *)(v1 + 168) = v21 + 1;
                  *(_BYTE *)(v1 + v21 + 160) = v6;
                }
                __n[0] = 0;
                result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readArrayTag(v1, "unknown", (char *)__n);
                for (i = __n[0]; i; result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject(v1))
                  --i;
              }
            }
            return result;
          }
          v20 = *(_QWORD *)(v1 + 168);
          if (v20 <= 7)
          {
            *(_QWORD *)(v1 + 168) = v20 + 1;
            *(_BYTE *)(v1 + v20 + 160) = v6;
          }
          __n[0] = 0;
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readDataTag(v1, "unknown", (uint64_t *)__n);
        }
        else
        {
          v16 = *(_QWORD *)(v1 + 168);
          if (v16 <= 7)
          {
            *(_QWORD *)(v1 + 168) = v16 + 1;
            *(_BYTE *)(v1 + v16 + 160) = v6;
          }
          __n[0] = 0;
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readStringTag(v1, "unknown", (uint64_t *)__n);
        }
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readRaw(v1, "unknown", 0, __n[0], v5, 1);
      }
LABEL_12:
      if (*(_BYTE *)(v1 + 40))
        return result;
      v7 = *(_QWORD *)(v1 + 168);
      if (!v7)
      {
        v11 = 8;
        goto LABEL_72;
      }
      v8 = 8;
      if (v7 >= 8)
        v9 = 8;
      else
        v9 = *(_QWORD *)(v1 + 168);
      *(_QWORD *)(v1 + 168) = v7 - v9;
      if (v7 > 7)
        return result;
    }
LABEL_48:
    v11 = v8 - v9;
LABEL_72:
    v10 = (_QWORD *)v1;
LABEL_73:
    result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v10, 0, v11);
    if ((result & 1) == 0)
    {
      v13 = (_anonymous_namespace_ *)v1;
      v12 = (const char *)v5;
      return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v13, "unknown", (uint64_t)v12);
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readTag(uint64_t a1, const char *a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 40))
  {
    v6 = *(_QWORD *)(a1 + 168);
    if (v6)
    {
      v7 = v6 - 1;
      *__src = *(_BYTE *)(a1 + v7 + 160);
      *(_QWORD *)(a1 + 168) = v7;
      return 1;
    }
    v4 = 1;
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, __src, 1uLL) & 1) != 0)return v4;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, a4);
  }
  return 0;
}

const char *re::OPACK::toString(int a1)
{
  const char *result;

  if (a1 <= 96)
  {
    result = "Invalid";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "Boolean(True)";
        break;
      case 2:
        result = "Boolean(False)";
        break;
      case 3:
        result = "Terminator";
        break;
      case 4:
        result = "Null";
        break;
      case 5:
        result = "UUID";
        break;
      case 6:
        result = "Date";
        break;
      default:
        switch(a1)
        {
          case '0':
            result = "8-Bit Signed Integer";
            break;
          case '1':
            result = "16-Bit Signed Integer";
            break;
          case '2':
            result = "32-Bit Signed Integer";
            break;
          case '3':
            result = "64-Bit Signed Integer";
            break;
          case '5':
            result = "32-Bit Floating Point";
            break;
          case '6':
            result = "64-Bit Floating Point";
            break;
          default:
            goto LABEL_42;
        }
        break;
    }
  }
  else if (a1 > 158)
  {
    if (a1 > 222)
    {
      if (a1 == 223)
      {
        return "Array";
      }
      else if (a1 == 239)
      {
        return "Dictionary";
      }
      else
      {
LABEL_42:
        if (a1 >= 0x30)
        {
          if ((a1 - 64) >= 0x21)
          {
            if ((a1 - 112) >= 0x21)
            {
              if ((a1 + 96) >= 0x21u)
              {
                if ((a1 + 48) >= 0xFu)
                {
                  if ((a1 + 32) >= 0xFu)
                    return "Unknown Tag";
                  else
                    return "Small Dictionary";
                }
                else
                {
                  return "Small Array";
                }
              }
              else
              {
                return "Small UID";
              }
            }
            else
            {
              return "Small Data";
            }
          }
          else
          {
            return "Small String";
          }
        }
        else
        {
          return "Small Signed Integer";
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 193:
          result = "8-Bit UID";
          break;
        case 194:
          result = "16-Bit UID";
          break;
        case 195:
          result = "24-Bit UID";
          break;
        case 196:
          result = "32-Bit UID";
          break;
        default:
          if (a1 != 159)
            goto LABEL_42;
          result = "Data(Chunked)";
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 'a':
        result = "String(8-Bit Length)";
        break;
      case 'b':
        result = "String(16-Bit Length)";
        break;
      case 'c':
        result = "String(32-Bit Length)";
        break;
      case 'd':
        result = "String(64-Bit Length)";
        break;
      default:
        switch(a1)
        {
          case 145:
            result = "Data(8-Bit Length)";
            break;
          case 146:
            result = "Data(16-Bit Length)";
            break;
          case 147:
            result = "Data(32-Bit Length)";
            break;
          case 148:
            result = "Data(64-Bit Length)";
            break;
          default:
            if (a1 != 111)
              goto LABEL_42;
            result = "Null-Terminated String";
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readRaw(uint64_t a1, const char *a2, _BYTE *a3, size_t __n, uint64_t a5, char a6)
{
  size_t v10;
  size_t v11;
  int64_t v12;
  int64_t v13;
  char *v14;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v10 = *(_QWORD *)(a1 + 168);
  if (v10)
  {
    if (v10 >= __n)
      v11 = __n;
    else
      v11 = *(_QWORD *)(a1 + 168);
    v12 = v10 - v11;
    if ((uint64_t)(v10 - 1) >= (uint64_t)(v10 - v11))
    {
      do
      {
        *a3++ = *(_BYTE *)(a1 + 159 + v10);
        v13 = v10 - 2;
        --v10;
      }
      while (v13 >= v12);
    }
    *(_QWORD *)(a1 + 168) = v12;
    __n -= v11;
  }
  if (__n)
  {
    v14 = (a6 & 1) != 0 ? 0 : a3;
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, v14, __n) & 1) == 0)
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, a5);
      return 0;
    }
  }
  return 1;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readStringTag(uint64_t result, const char *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  char *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  unsigned __int8 __src;

  if (*(_BYTE *)(result + 40))
    return result;
  v5 = result;
  __src = 0;
  v6 = *(_QWORD *)(result + 168);
  if (v6)
  {
    v7 = v6 - 1;
    result = *(unsigned __int8 *)(result + v7 + 160);
    __src = *(_BYTE *)(v5 + v7 + 160);
    *(_QWORD *)(v5 + 168) = v7;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String");
    result = __src;
  }
  if ((result - 64) > 0x20)
  {
    switch((int)result)
    {
      case 'a':
        LOBYTE(v32) = 0;
        if (!*(_BYTE *)(v5 + 40))
        {
          v8 = *(_QWORD *)(v5 + 168);
          if (v8)
          {
            v9 = v8 - 1;
            LODWORD(v8) = *(unsigned __int8 *)(v5 + v8 - 1 + 160);
            *(_QWORD *)(v5 + 168) = v9;
          }
          else
          {
            result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)v5, (char *)&v32, 1uLL);
            if (!(_DWORD)result)
              return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String");
            LODWORD(v8) = v32;
          }
          v8 = v8;
          goto LABEL_8;
        }
        return result;
      case 'b':
        LOWORD(v32) = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v11 = *(_QWORD *)(v5 + 168);
        if (v11)
        {
          v12 = 2;
          if (v11 < 2)
            v12 = *(_QWORD *)(v5 + 168);
          v13 = v11 - v12;
          if ((uint64_t)(v11 - 1) >= (uint64_t)(v11 - v12))
          {
            v14 = (char *)&v32;
            v26 = *(_QWORD *)(v5 + 168);
            do
            {
              *v14++ = *(_BYTE *)(v5 + 159 + v26);
              v27 = v26 - 2;
              --v26;
            }
            while (v27 >= v13);
          }
          else
          {
            v14 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v13;
          if (v11 > 1)
          {
LABEL_43:
            v8 = (unsigned __int16)v32;
            goto LABEL_8;
          }
          v25 = 2 - v12;
        }
        else
        {
          v14 = (char *)&v32;
          v25 = 2;
        }
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)v5, v14, v25);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String");
        goto LABEL_43;
      case 'c':
        LODWORD(v32) = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v15 = *(_QWORD *)(v5 + 168);
        if (v15)
        {
          v16 = 4;
          if (v15 < 4)
            v16 = *(_QWORD *)(v5 + 168);
          v17 = v15 - v16;
          if ((uint64_t)(v15 - 1) >= (uint64_t)(v15 - v16))
          {
            v18 = (char *)&v32;
            v28 = *(_QWORD *)(v5 + 168);
            do
            {
              *v18++ = *(_BYTE *)(v5 + 159 + v28);
              v29 = v28 - 2;
              --v28;
            }
            while (v29 >= v17);
          }
          else
          {
            v18 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v17;
          if (v15 > 3)
            goto LABEL_49;
          v23 = 4 - v16;
        }
        else
        {
          v18 = (char *)&v32;
          v23 = 4;
        }
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)v5, v18, v23);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String");
LABEL_49:
        v8 = v32;
        goto LABEL_8;
      case 'd':
        v32 = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v19 = *(_QWORD *)(v5 + 168);
        if (v19)
        {
          v20 = 8;
          if (v19 < 8)
            v20 = *(_QWORD *)(v5 + 168);
          v21 = v19 - v20;
          if ((uint64_t)(v19 - 1) >= (uint64_t)(v19 - v20))
          {
            v22 = (char *)&v32;
            v30 = *(_QWORD *)(v5 + 168);
            do
            {
              *v22++ = *(_BYTE *)(v5 + 159 + v30);
              v31 = v30 - 2;
              --v30;
            }
            while (v31 >= v21);
          }
          else
          {
            v22 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v21;
          if (v19 > 7)
            goto LABEL_55;
          v24 = 8 - v20;
        }
        else
        {
          v22 = (char *)&v32;
          v24 = 8;
        }
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)v5, v22, v24);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String");
LABEL_55:
        v8 = v32;
        goto LABEL_8;
      default:
        v10 = re::OPACK::toString(result);
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)v5, (uint64_t)"String", (uint64_t)v10);
    }
  }
  v8 = result - 64;
LABEL_8:
  *a3 = v8;
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readDataTag(uint64_t result, const char *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  char *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  unsigned __int8 __src;

  if (*(_BYTE *)(result + 40))
    return result;
  v5 = result;
  __src = 0;
  v6 = *(_QWORD *)(result + 168);
  if (v6)
  {
    v7 = v6 - 1;
    result = *(unsigned __int8 *)(result + v7 + 160);
    __src = *(_BYTE *)(v5 + v7 + 160);
    *(_QWORD *)(v5 + 168) = v7;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"BLOB");
    result = __src;
  }
  if ((result - 112) > 0x20)
  {
    switch((int)result)
    {
      case 145:
        LOBYTE(v32) = 0;
        if (!*(_BYTE *)(v5 + 40))
        {
          v8 = *(_QWORD *)(v5 + 168);
          if (v8)
          {
            v9 = v8 - 1;
            LODWORD(v8) = *(unsigned __int8 *)(v5 + v8 - 1 + 160);
            *(_QWORD *)(v5 + 168) = v9;
          }
          else
          {
            result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)v5, (char *)&v32, 1uLL);
            if (!(_DWORD)result)
              return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"BLOB");
            LODWORD(v8) = v32;
          }
          v8 = v8;
          goto LABEL_8;
        }
        return result;
      case 146:
        LOWORD(v32) = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v11 = *(_QWORD *)(v5 + 168);
        if (v11)
        {
          v12 = 2;
          if (v11 < 2)
            v12 = *(_QWORD *)(v5 + 168);
          v13 = v11 - v12;
          if ((uint64_t)(v11 - 1) >= (uint64_t)(v11 - v12))
          {
            v14 = (char *)&v32;
            v26 = *(_QWORD *)(v5 + 168);
            do
            {
              *v14++ = *(_BYTE *)(v5 + 159 + v26);
              v27 = v26 - 2;
              --v26;
            }
            while (v27 >= v13);
          }
          else
          {
            v14 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v13;
          if (v11 > 1)
          {
LABEL_43:
            v8 = (unsigned __int16)v32;
            goto LABEL_8;
          }
          v25 = 2 - v12;
        }
        else
        {
          v14 = (char *)&v32;
          v25 = 2;
        }
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)v5, v14, v25);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"BLOB");
        goto LABEL_43;
      case 147:
        LODWORD(v32) = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v15 = *(_QWORD *)(v5 + 168);
        if (v15)
        {
          v16 = 4;
          if (v15 < 4)
            v16 = *(_QWORD *)(v5 + 168);
          v17 = v15 - v16;
          if ((uint64_t)(v15 - 1) >= (uint64_t)(v15 - v16))
          {
            v18 = (char *)&v32;
            v28 = *(_QWORD *)(v5 + 168);
            do
            {
              *v18++ = *(_BYTE *)(v5 + 159 + v28);
              v29 = v28 - 2;
              --v28;
            }
            while (v29 >= v17);
          }
          else
          {
            v18 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v17;
          if (v15 > 3)
            goto LABEL_49;
          v23 = 4 - v16;
        }
        else
        {
          v18 = (char *)&v32;
          v23 = 4;
        }
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)v5, v18, v23);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"BLOB");
LABEL_49:
        v8 = v32;
        goto LABEL_8;
      case 148:
        v32 = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v19 = *(_QWORD *)(v5 + 168);
        if (v19)
        {
          v20 = 8;
          if (v19 < 8)
            v20 = *(_QWORD *)(v5 + 168);
          v21 = v19 - v20;
          if ((uint64_t)(v19 - 1) >= (uint64_t)(v19 - v20))
          {
            v22 = (char *)&v32;
            v30 = *(_QWORD *)(v5 + 168);
            do
            {
              *v22++ = *(_BYTE *)(v5 + 159 + v30);
              v31 = v30 - 2;
              --v30;
            }
            while (v31 >= v21);
          }
          else
          {
            v22 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v21;
          if (v19 > 7)
            goto LABEL_55;
          v24 = 8 - v20;
        }
        else
        {
          v22 = (char *)&v32;
          v24 = 8;
        }
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)v5, v22, v24);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"BLOB");
LABEL_55:
        v8 = v32;
        goto LABEL_8;
      default:
        v10 = re::OPACK::toString(result);
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)v5, (uint64_t)"BLOB", (uint64_t)v10);
    }
  }
  v8 = result - 112;
LABEL_8:
  *a3 = v8;
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readArrayTag(uint64_t result, const char *a2, char *__src)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unsigned __int8 __srca;

  if (!*(_BYTE *)(result + 40))
  {
    v5 = (_QWORD *)result;
    __srca = 0;
    v6 = *(_QWORD *)(result + 168);
    if (v6)
    {
      v7 = v6 - 1;
      result = *(unsigned __int8 *)(result + v7 + 160);
      __srca = *((_BYTE *)v5 + v7 + 160);
      v5[21] = v7;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__srca, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"Array");
      result = __srca;
    }
    if ((result + 48) > 0xEu)
    {
      if ((_DWORD)result == 223)
      {
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readUint64((uint64_t)v5, a2, __src);
      }
      else
      {
        v8 = re::OPACK::toString(result);
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)v5, (uint64_t)"Array", (uint64_t)v8);
      }
    }
    else
    {
      *(_QWORD *)__src = result - 208;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readDictionaryTag(uint64_t result, const char *a2, char *__src)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unsigned __int8 __srca;

  if (!*(_BYTE *)(result + 40))
  {
    v5 = result;
    __srca = 0;
    v6 = *(_QWORD *)(result + 168);
    if (v6)
    {
      v7 = v6 - 1;
      result = *(unsigned __int8 *)(result + v7 + 160);
      __srca = *(_BYTE *)(v5 + v7 + 160);
      *(_QWORD *)(v5 + 168) = v7;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__srca, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"Dictionary");
      result = __srca;
    }
    if ((result + 32) <= 0xEu)
    {
      *(_QWORD *)__src = result - 224;
      return result;
    }
    if ((_DWORD)result != 210)
      goto LABEL_17;
    result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readUint64(v5, a2, __src);
    if (!(_DWORD)result || *(_BYTE *)(v5 + 40))
      return result;
    v8 = *(_QWORD *)(v5 + 168);
    if (v8)
    {
      v9 = v8 - 1;
      result = *(unsigned __int8 *)(v5 + v9 + 160);
      __srca = *(_BYTE *)(v5 + v9 + 160);
      *(_QWORD *)(v5 + 168) = v9;
      goto LABEL_16;
    }
    if (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)v5, (char *)&__srca, 1uLL))
    {
      result = __srca;
LABEL_16:
      if ((_DWORD)result == 239)
        return result;
LABEL_17:
      v10 = re::OPACK::toString(result);
      return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)v5, (uint64_t)"Dictionary", (uint64_t)v10);
    }
    return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"Dictionary");
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  _BYTE v10[23];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14[3];

  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, 0, (re::DynamicString *)&v8);
  if ((v9 & 1) != 0)
    v6 = *(_BYTE **)&v10[7];
  else
    v6 = v10;
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Expected type: \"%s\". Actual type: \"%s\".", (re::DynamicString *)&v11, v6, a2, a3);
  *(_QWORD *)&v14[0] = 400;
  *((_QWORD *)&v14[0] + 1) = &re::FoundationErrorCategory(void)::instance;
  *(_QWORD *)&v14[1] = v11;
  *((_QWORD *)&v14[2] + 1) = v13;
  *(__int128 *)((char *)&v14[1] + 8) = v12;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, v14);
  if (*(_QWORD *)&v14[1])
  {
    if ((BYTE8(v14[1]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v14[1] + 40))();
    memset(&v14[1], 0, 32);
  }
  result = v8;
  if (v8)
  {
    if ((v9 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v8 + 40))();
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readUint64(uint64_t a1, const char *a2, char *__src)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  size_t v15;
  unint64_t v16;
  unsigned __int8 __srca;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  __srca = 0;
  v7 = *(_QWORD *)(a1 + 168);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = *(unsigned __int8 *)(a1 + v7 - 1 + 160);
    __srca = v9;
    *(_QWORD *)(a1 + 168) = v8;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, (char *)&__srca, 1uLL) & 1) == 0)
    {
LABEL_25:
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"UInt64");
      return 0;
    }
    v9 = __srca;
  }
  if (v9 != 120)
  {
    v16 = *(_QWORD *)(a1 + 168);
    if (v16 <= 7)
    {
      *(_QWORD *)(a1 + 168) = v16 + 1;
      *(_BYTE *)(a1 + v16 + 160) = v9;
    }
    v18 = 0;
    if ((re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readInteger(a1, a2, (char *)&v18, (uint64_t)"Int64") & 1) == 0)
      return 0;
    *(_QWORD *)__src = v18;
    return 1;
  }
  if (!*(_BYTE *)(a1 + 40))
  {
    v10 = *(_QWORD *)(a1 + 168);
    if (v10)
    {
      v11 = 8;
      if (v10 < 8)
        v11 = *(_QWORD *)(a1 + 168);
      v12 = v10 - v11;
      if ((uint64_t)(v10 - 1) >= (uint64_t)(v10 - v11))
      {
        v13 = *(_QWORD *)(a1 + 168);
        do
        {
          *__src++ = *(_BYTE *)(a1 + 159 + v13);
          v14 = v13 - 2;
          --v13;
        }
        while (v14 >= v12);
      }
      *(_QWORD *)(a1 + 168) = v12;
      if (v10 > 7)
        return 1;
      v15 = 8 - v11;
    }
    else
    {
      v15 = 8;
    }
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, __src, v15) & 1) != 0)return 1;
    goto LABEL_25;
  }
  return 0;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::readInteger(uint64_t a1, const char *a2, char *__src, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  int v38;
  __int16 v39;
  char v40;
  unsigned __int8 __srca;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  __srca = 0;
  v9 = *(_QWORD *)(a1 + 168);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = *(unsigned __int8 *)(a1 + v10 + 160);
    __srca = *(_BYTE *)(a1 + v10 + 160);
    *(_QWORD *)(a1 + 168) = v10;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, (char *)&__srca, 1uLL) & 1) == 0)
    {
      v14 = (_anonymous_namespace_ *)a1;
      v15 = a2;
      v16 = (const char *)a4;
      goto LABEL_17;
    }
    v11 = __srca;
  }
  if (v11 - 7 > 0x28)
  {
    switch(v11)
    {
      case '0':
        result = 0;
        v40 = 0;
        if (*(_BYTE *)(a1 + 40))
          return result;
        v12 = *(_QWORD *)(a1 + 168);
        if (v12)
        {
          v13 = v12 - 1;
          LOBYTE(v12) = *(_BYTE *)(a1 + v12 - 1 + 160);
          *(_QWORD *)(a1 + 168) = v13;
LABEL_46:
          v12 = (char)v12;
          goto LABEL_10;
        }
        if (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, &v40, 1uLL))
        {
          LOBYTE(v12) = v40;
          goto LABEL_46;
        }
        v16 = "8-Bit Signed Integer";
        goto LABEL_63;
      case '1':
        result = 0;
        v39 = 0;
        if (*(_BYTE *)(a1 + 40))
          return result;
        v18 = *(_QWORD *)(a1 + 168);
        if (v18)
        {
          v19 = 2;
          if (v18 < 2)
            v19 = *(_QWORD *)(a1 + 168);
          v20 = v18 - v19;
          if ((uint64_t)(v18 - 1) >= (uint64_t)(v18 - v19))
          {
            v21 = (char *)&v39;
            v34 = *(_QWORD *)(a1 + 168);
            do
            {
              *v21++ = *(_BYTE *)(a1 + 159 + v34);
              v35 = v34 - 2;
              --v34;
            }
            while (v35 >= v20);
          }
          else
          {
            v21 = (char *)&v39;
          }
          *(_QWORD *)(a1 + 168) = v20;
          if (v18 > 1)
            goto LABEL_53;
          v33 = 2 - v19;
        }
        else
        {
          v21 = (char *)&v39;
          v33 = 2;
        }
        if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, v21, v33) & 1) != 0)
        {
LABEL_53:
          v12 = v39;
          goto LABEL_10;
        }
        v16 = "16-Bit Signed Integer";
        goto LABEL_63;
      case '2':
        result = 0;
        v38 = 0;
        if (*(_BYTE *)(a1 + 40))
          return result;
        v22 = *(_QWORD *)(a1 + 168);
        if (v22)
        {
          v23 = 4;
          if (v22 < 4)
            v23 = *(_QWORD *)(a1 + 168);
          v24 = v22 - v23;
          if ((uint64_t)(v22 - 1) >= (uint64_t)(v22 - v23))
          {
            v25 = (char *)&v38;
            v36 = *(_QWORD *)(a1 + 168);
            do
            {
              *v25++ = *(_BYTE *)(a1 + 159 + v36);
              v37 = v36 - 2;
              --v36;
            }
            while (v37 >= v24);
          }
          else
          {
            v25 = (char *)&v38;
          }
          *(_QWORD *)(a1 + 168) = v24;
          if (v22 > 3)
            goto LABEL_60;
          v32 = 4 - v23;
        }
        else
        {
          v25 = (char *)&v38;
          v32 = 4;
        }
        if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, v25, v32) & 1) != 0)
        {
LABEL_60:
          v12 = v38;
          goto LABEL_10;
        }
        v16 = "32-Bit Signed Integer";
LABEL_63:
        v14 = (_anonymous_namespace_ *)a1;
        v15 = a2;
        break;
      case '3':
        if (*(_BYTE *)(a1 + 40))
          return 0;
        v26 = *(_QWORD *)(a1 + 168);
        if (v26)
        {
          v27 = 8;
          if (v26 < 8)
            v27 = *(_QWORD *)(a1 + 168);
          v28 = v26 - v27;
          if ((uint64_t)(v26 - 1) >= (uint64_t)(v26 - v27))
          {
            v29 = *(_QWORD *)(a1 + 168);
            do
            {
              *__src++ = *(_BYTE *)(a1 + 159 + v29);
              v30 = v29 - 2;
              --v29;
            }
            while (v30 >= v28);
          }
          *(_QWORD *)(a1 + 168) = v28;
          if (v26 > 7)
            return 1;
          v31 = 8 - v27;
        }
        else
        {
          v31 = 8;
        }
        if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, __src, v31) & 1) != 0)return 1;
        v16 = "64-Bit Signed Integer";
        goto LABEL_63;
      default:
        v17 = re::OPACK::toString(v11);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)a1, a4, (uint64_t)v17);
        return 0;
    }
LABEL_17:
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v14, v15, (uint64_t)v16);
    return 0;
  }
  v12 = v11 - 8;
LABEL_10:
  *(_QWORD *)__src = v12;
  return 1;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<signed char>(uint64_t a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(a1, a2, *a4);
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v10 + 48 * v11) != 2)
        ++*(_QWORD *)(v10 + 48 * v11 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<short>(uint64_t a1, const char *a2, int a3, __int16 *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(a1, a2, *a4);
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v10 + 48 * v11) != 2)
        ++*(_QWORD *)(v10 + 48 * v11 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<int>(uint64_t a1, const char *a2, int a3, int *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(a1, a2, *a4);
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v10 + 48 * v11) != 2)
        ++*(_QWORD *)(v10 + 48 * v11 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<long long>(uint64_t a1, const char *a2, int a3, uint64_t *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(a1, a2, *a4);
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v10 + 48 * v11) != 2)
        ++*(_QWORD *)(v10 + 48 * v11 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned char>(uint64_t a1, const char *a2, int a3, unsigned __int8 *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(a1, a2, *a4);
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v10 + 48 * v11) != 2)
        ++*(_QWORD *)(v10 + 48 * v11 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned short>(uint64_t a1, const char *a2, int a3, unsigned __int16 *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(a1, a2, *a4);
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v10 + 48 * v11) != 2)
        ++*(_QWORD *)(v10 + 48 * v11 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned int>(uint64_t a1, const char *a2, int a3, unsigned int *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(a1, a2, *a4);
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v10 + 48 * v11) != 2)
        ++*(_QWORD *)(v10 + 48 * v11 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned long long>(uint64_t a1, const char *a2, int a3, uint64_t *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v5 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v5)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeUint64(a1, a2, *a4);
    if ((a5 & 2) == 0)
    {
      v10 = *(_QWORD *)(a1 + 128);
      v11 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v10 + 48 * v11) != 2)
        ++*(_QWORD *)(v10 + 48 * v11 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeUint64(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t __src;

  if ((a3 & 0x8000000000000000) == 0)
    return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(a1, a2, a3);
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeDataTag(a1, a2, 8uLL);
  __src = a3;
  if (!*(_BYTE *)(a1 + 40))
  {
    result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, (char *)&__src, 8uLL);
    if ((result & 1) == 0)
      return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"UInt64");
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeDataTag(uint64_t result, const char *a2, unint64_t a3)
{
  unsigned __int8 *v5;
  const char *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t __src;

  v5 = (unsigned __int8 *)result;
  if (a3 > 0x20)
  {
    if (a3 <= 0xFF)
    {
      LOBYTE(__src) = -111;
      if (!*(_BYTE *)(result + 40))
      {
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
        if ((result & 1) == 0)
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"Data(8-Bit Length)");
        v8 = v5[40];
        LOBYTE(__src) = a3;
        if (!v8)
        {
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, (char *)&__src, 1uLL);
          if ((result & 1) == 0)
          {
            v6 = "Data(8-Bit Length)";
            return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
          }
        }
      }
    }
    else if (a3 >> 16)
    {
      if (HIDWORD(a3))
      {
        LOBYTE(__src) = -108;
        if (!*(_BYTE *)(result + 40))
        {
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
          if ((result & 1) == 0)
            result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"Data(64-Bit Length)");
          v7 = v5[40];
          __src = a3;
          if (!v7)
          {
            result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, (char *)&__src, 8uLL);
            if ((result & 1) == 0)
            {
              v6 = "Data(64-Bit Length)";
              return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
            }
          }
        }
      }
      else
      {
        LOBYTE(__src) = -109;
        if (!*(_BYTE *)(result + 40))
        {
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
          if ((result & 1) == 0)
            result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"Data(32-Bit Length)");
          v10 = v5[40];
          LODWORD(__src) = a3;
          if (!v10)
          {
            result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, (char *)&__src, 4uLL);
            if ((result & 1) == 0)
            {
              v6 = "Data(32-Bit Length)";
              return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
            }
          }
        }
      }
    }
    else
    {
      LOBYTE(__src) = -110;
      if (!*(_BYTE *)(result + 40))
      {
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
        if ((result & 1) == 0)
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"Data(16-Bit Length)");
        v9 = v5[40];
        LOWORD(__src) = a3;
        if (!v9)
        {
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, (char *)&__src, 2uLL);
          if ((result & 1) == 0)
          {
            v6 = "Data(16-Bit Length)";
            return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
          }
        }
      }
    }
  }
  else
  {
    LOBYTE(__src) = a3 + 112;
    if (!*(_BYTE *)(result + 40))
    {
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
      if ((result & 1) == 0)
      {
        v6 = "Small Data";
        return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
      }
    }
  }
  return result;
}

uint64_t re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, re::TypeInfo *a4, re::internal *a5, re::TypeInfo *a6, int a7)
{
  re::internal *v11;
  uint64_t result;
  _QWORD *v15;
  uint64_t (*v16)(_BYTE *, const char *, const re::TypeInfo *, re::TypeInfo *, _BYTE *, _BYTE *, _QWORD);
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  re::internal *v23;
  _BYTE v24[32];
  _BYTE v25[8];
  _BYTE v26[32];

  if (a7)
  {
    v11 = (re::internal *)*((_QWORD *)a1 + 26);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), v25);
    re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v26);
    re::internal::translateType(v11, (const re::TypeRegistry *)v24, (uint64_t)v25);
    if (!a1[64])
      return (*(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, _QWORD, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, 0, v25, v25, 1);
    return 0;
  }
  v15 = *(_QWORD **)a5;
  if (a5 == a6)
    goto LABEL_8;
  if (v15 == *(_QWORD **)a6)
  {
    v19 = **((_QWORD **)a5 + 2);
    v20 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v19 == (unsigned __int16)v20)
    {
      v22 = WORD1(v19) == WORD1(v20);
      v21 = (v20 ^ v19) & 0xFFFFFF00000000;
      v22 = v22 && v21 == 0;
      if (v22)
        goto LABEL_8;
    }
LABEL_15:
    result = re::internal::findEnumConstantToSerialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, a4, a5, a6, 1);
    if (!result)
      return result;
    a4 = (re::TypeInfo *)result;
    v23 = (re::internal *)*((_QWORD *)a1 + 26);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), v25);
    re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v26);
    re::internal::translateType(v23, (const re::TypeRegistry *)v24, (uint64_t)v25);
    if (a1[64])
      return 0;
    v16 = *(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, re::TypeInfo *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72);
    v17 = v25;
    v18 = v25;
    return v16(a1, a2, a3, a4, v17, v18, 0);
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    goto LABEL_15;
  v15 = *(_QWORD **)a5;
LABEL_8:
  re::TypeRegistry::typeInfo(v15, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), v25);
  re::TypeInfo::TypeInfo((uint64_t)v24, (uint64_t)v26);
  if (a1[64])
    return 0;
  v16 = *(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, re::TypeInfo *, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72);
  v17 = v24;
  v18 = v24;
  return v16(a1, a2, a3, a4, v17, v18, 0);
}

uint64_t re::internal::findEnumConstantToSerialize<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, re::TypeInfo *a3, re::internal *this, re::TypeInfo *a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int EnumConstantIndex;
  unsigned int v18;
  re::internal::TypeTranslationTable *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t __dst;

  if (*(_DWORD *)(*((_QWORD *)this + 2) + 8) >= 9u)
  {
    v38 = re::TypeInfo::name(this)[1];
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, a2, "Enum type \"%s\" has invalid size: %zu bytes", v9, v10, v11, v12, v13, v38);
    return 0;
  }
  EnumConstantIndex = re::internal::getEnumConstantIndex(this, a3, a3);
  if ((EnumConstantIndex & 0x80000000) != 0)
  {
    __dst = 0;
    memcpy(&__dst, a3, *(unsigned int *)(*((_QWORD *)this + 2) + 8));
    v30 = __dst;
    re::TypeInfo::name(this);
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, a2, "Value %zu is not a valid enum constant of \"%s\".", v31, v32, v33, v34, v35, v30);
    return 0;
  }
  v18 = EnumConstantIndex;
  if (!a6)
  {
    v36 = re::TypeInfo::enumConstants(this);
    if (v37 > v18)
      return v36 + 24 * v18;
    re::internal::assertLog((re::internal *)6, v37, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v18, v37);
    _os_crash();
    __break(1u);
    goto LABEL_15;
  }
  v19 = *(re::internal::TypeTranslationTable **)(*(_QWORD *)a5 + 856);
  if (!v19 || (result = re::internal::TypeTranslationTable::translateRuntimeEnum(v19, this, v18, a5)) == 0)
  {
    v21 = re::TypeInfo::enumConstants(this);
    v23 = v18;
    if (v22 > v18)
    {
      v24 = *(_QWORD *)(v21 + 24 * v18 + 16);
      re::TypeInfo::name(a5);
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, a2, "Runtime enum constant \"%s\" does not exist in serialized type \"%s\".", v25, v26, v27, v28, v29, v24);
      return 0;
    }
LABEL_15:
    re::internal::assertLog((re::internal *)6, v22, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v23, v22);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::Slice<re::EnumConstant>::operator[](_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = a1[1];
  if (v2 > a2)
    return *a1 + 24 * a2;
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v2);
  result = _os_crash();
  __break(1u);
  return result;
}

void re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginOptional(uint64_t a1, const char *a2, int a3, _BYTE *a4, int a5)
{
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[3];
  uint64_t v16;
  char __src;

  if (!*(_BYTE *)(a1 + 40))
  {
    v16 = 0;
    if ((re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3) & 1) != 0)
    {
      if (*a4)
      {
        v9 = 1;
      }
      else
      {
        __src = 4;
        if (!*(_BYTE *)(a1 + 40)
          && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, &__src, 1uLL) & 1) == 0)
        {
          re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Optional");
        }
        v9 = *a4;
      }
      LOBYTE(v10) = 3;
      DWORD1(v10) = a5;
      *((_QWORD *)&v10 + 1) = a2;
      v11 = 0;
      v13 = 0;
      v14 = 0;
      v12 = v9;
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v10);
      *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v16;
    }
    else
    {
      LOBYTE(v15[0]) = 3;
      DWORD1(v15[0]) = a5;
      *((_QWORD *)&v15[0] + 1) = a2;
      memset(&v15[1], 0, 32);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, v15);
    }
  }
}

_anonymous_namespace_ *re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endOptional(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  const char *v8;
  _anonymous_namespace_ *v9;
  char v10;
  _BYTE v11[23];
  _OWORD v12[2];

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14) - 1;
    if (*(_QWORD *)(v2 + 48 * v3 + 32) == *(_QWORD *)(v2 + 48 * v3 + 24))
    {
      for (i = *(_QWORD *)(v2 + 48 * v3 + 16); i; --i)
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject((uint64_t)v1);
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, 3);
      v5 = *((_QWORD *)v1 + 16);
      v6 = *((_QWORD *)v1 + 14) - 1;
      if (*(_BYTE *)(v5 + 48 * v6) != 2)
        ++*(_QWORD *)(v5 + 48 * v6 + 32);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v9);
      if ((v10 & 1) != 0)
        v7 = *(_BYTE **)&v11[7];
      else
        v7 = v11;
      if (*(uint64_t *)(*((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14) - 24) <= 0)
        v8 = "Optional should not have a value.";
      else
        v8 = "Optional requires a value.";
      re::DynamicString::format((re::DynamicString *)"Failed to serialize optional type \"%s\". %s", (re::DynamicString *)v12, v7, v8);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)v12);
      if (*(_QWORD *)&v12[0])
      {
        if ((BYTE8(v12[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v12[0] + 40))();
        memset(v12, 0, sizeof(v12));
      }
      result = v9;
      if (v9 && (v10 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  return result;
}

double re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState(_QWORD *a1, _OWORD *a2)
{
  __int128 v4;
  double result;
  _OWORD v6[3];
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (a1[14] >= a1[19])
  {
    re::DynamicString::format((re::DynamicString *)"State stack overflow (max depth is %zu). Increase user default com.apple.maxSerializationDepth to allow deeper hierarchies.", (re::DynamicString *)&v7, a1[19]);
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, (uint64_t)&v7);
    if (v7)
    {
      if ((v8 & 1) != 0)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v9);
    }
  }
  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v6[2] = a2[2];
  *(_QWORD *)&result = re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::add((_anonymous_namespace_ *)(a1 + 12), (uint64_t)v6).n128_u64[0];
  return result;
}

__n128 re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 48 * v4;
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v7;
  *(__n128 *)v5 = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 48 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginBLOB(uint64_t a1, const char *a2, int a3, unint64_t *a4, int a5)
{
  uint64_t result;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v16 = 0;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeDataTag(a1, a2, *a4);
    v10 = *a4;
    LOBYTE(v11) = 4;
    DWORD1(v11) = a5;
    *((_QWORD *)&v11 + 1) = a2;
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = v10;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v11);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v16;
    return *(_BYTE *)(a1 + 40) == 0;
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBLOB(uint64_t result, char *a2, char a3)
{
  _anonymous_namespace_ *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(result + 40))
  {
    v4 = (_anonymous_namespace_ *)result;
    v5 = *(_QWORD *)(*(_QWORD *)(result + 128) + 48 * *(_QWORD *)(result + 112) - 24);
    result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, a2, v5);
    if ((result & 1) == 0)
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v4, 0, (uint64_t)"BLOB");
    if ((a3 & 2) == 0)
    {
      v6 = *((_QWORD *)v4 + 16);
      v7 = *((_QWORD *)v4 + 14) - 1;
      if (*(_BYTE *)(v6 + 48 * v7) != 2)
        *(_QWORD *)(v6 + 48 * v7 + 32) += v5;
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endBLOB(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  char v10;
  _BYTE v11[23];
  _OWORD v12[2];

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14) - 1;
    if (*(_QWORD *)(v2 + 48 * v3 + 32) == *(_QWORD *)(v2 + 48 * v3 + 24))
    {
      for (i = *(_QWORD *)(v2 + 48 * v3 + 16); i; --i)
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject((uint64_t)v1);
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, 4);
      v5 = *((_QWORD *)v1 + 16);
      v6 = *((_QWORD *)v1 + 14) - 1;
      if (*(_BYTE *)(v5 + 48 * v6) != 2)
        ++*(_QWORD *)(v5 + 48 * v6 + 32);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v9);
      if ((v10 & 1) != 0)
        v7 = *(_BYTE **)&v11[7];
      else
        v7 = v11;
      v8 = *((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14);
      re::DynamicString::format((re::DynamicString *)"Failed to serialize BLOB \"%s\". Expected number of bytes: %lld. Actual number of bytes: %lld.", (re::DynamicString *)v12, v7, *(_QWORD *)(v8 - 24), *(_QWORD *)(v8 - 16));
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)v12);
      if (*(_QWORD *)&v12[0])
      {
        if ((BYTE8(v12[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v12[0] + 40))();
        memset(v12, 0, sizeof(v12));
      }
      result = v9;
      if (v9 && (v10 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginArray(uint64_t a1, const char *a2, int a3, unint64_t *a4, int a5)
{
  uint64_t result;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v16 = 0;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeArrayTag(a1, a2, *a4);
    v10 = *a4;
    LOBYTE(v11) = 5;
    DWORD1(v11) = a5;
    *((_QWORD *)&v11 + 1) = a2;
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = v10;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v11);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v16;
    return *(_BYTE *)(a1 + 40) == 0;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endArray(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char v11;
  _BYTE v12[23];
  _OWORD __src[2];

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14) - 1;
    v4 = *(_QWORD *)(v2 + 48 * v3 + 32);
    if (v4 == *(_QWORD *)(v2 + 48 * v3 + 24))
    {
      if (v4 >= 0xF)
      {
        LOBYTE(__src[0]) = 3;
        if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(result, (char *)__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v1, 0, (uint64_t)"Array");
        v2 = *((_QWORD *)v1 + 16);
        v3 = *((_QWORD *)v1 + 14) - 1;
      }
      for (i = *(_QWORD *)(v2 + 48 * v3 + 16); i; --i)
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject((uint64_t)v1);
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, 5);
      v6 = *((_QWORD *)v1 + 16);
      v7 = *((_QWORD *)v1 + 14) - 1;
      if (*(_BYTE *)(v6 + 48 * v7) != 2)
        ++*(_QWORD *)(v6 + 48 * v7 + 32);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v10);
      if ((v11 & 1) != 0)
        v8 = *(_BYTE **)&v12[7];
      else
        v8 = v12;
      v9 = *((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize array \"%s\". Expected number of elements: %lld. Actual number of elements: %lld.", (re::DynamicString *)__src, v8, *(_QWORD *)(v9 - 24), *(_QWORD *)(v9 - 16));
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)__src);
      if (*(_QWORD *)&__src[0])
      {
        if ((BYTE8(__src[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&__src[0] + 40))();
        memset(__src, 0, sizeof(__src));
      }
      result = v10;
      if (v10 && (v11 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 40))();
    }
  }
  return result;
}

uint64_t re::ArrayAccessor::elementAt(re::ArrayAccessor *this, char *a2, unint64_t a3)
{
  if (re::ArrayAccessor::size(this, a2) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    re::ArrayAccessor::size(this, a2);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::ArrayAccessor::elementAtUnchecked(this, (void **)a2, a3);
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeArrayTag(uint64_t result, const char *a2, unint64_t a3)
{
  _anonymous_namespace_ *v5;
  char __src;
  char v7;

  v5 = (_anonymous_namespace_ *)result;
  if (a3 > 0xE)
  {
    v7 = -33;
    if (!*(_BYTE *)(result + 40)
      && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, &v7, 1uLL) & 1) == 0)
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v5, a2, (uint64_t)"Array");
    }
    return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeUint64((uint64_t)v5, a2, a3);
  }
  else
  {
    __src = a3 - 48;
    if (!*(_BYTE *)(result + 40))
    {
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, &__src, 1uLL);
      if ((result & 1) == 0)
        return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v5, a2, (uint64_t)"Small Array");
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionary(uint64_t a1, const char *a2, int a3, unint64_t *a4, int a5)
{
  uint64_t result;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v16 = 0;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeDictionaryTag(a1, a2, *a4);
    v10 = *a4;
    LOBYTE(v11) = 6;
    DWORD1(v11) = a5;
    *((_QWORD *)&v11 + 1) = a2;
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = v10;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v11);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v16;
    return *(_BYTE *)(a1 + 40) == 0;
  }
  return result;
}

double re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionaryEntry(uint64_t a1, int a2)
{
  double result;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 40))
  {
    LOBYTE(v3[0]) = 7;
    DWORD1(v3[0]) = a2;
    *((_QWORD *)&v3[0] + 1) = "entry";
    v3[1] = xmmword_2260F4F20;
    v4 = 0;
    v5 = 0;
    return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, v3);
  }
  return result;
}

_anonymous_namespace_ *re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endDictionaryEntry(_anonymous_namespace_ *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _anonymous_namespace_ *v5;
  char v6;
  _BYTE v7[23];
  _OWORD v8[2];

  if (!*((_BYTE *)result + 40))
  {
    v1 = (uint64_t)result;
    if (*(_QWORD *)(*((_QWORD *)result + 16) + 48 * *((_QWORD *)result + 14) - 16) == 2)
    {
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(result, 7);
      v2 = *(_QWORD *)(v1 + 128);
      v3 = *(_QWORD *)(v1 + 112) - 1;
      if (*(_BYTE *)(v2 + 48 * v3) != 2)
        ++*(_QWORD *)(v2 + 48 * v3 + 32);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v5);
      if ((v6 & 1) != 0)
        v4 = *(_BYTE **)&v7[7];
      else
        v4 = v7;
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary entry \"%s\". Expected 2 objects (key+value). Actual number of objects: %lld.", (re::DynamicString *)v8, v4, *(_QWORD *)(*(_QWORD *)(v1 + 128) + 48 * *(_QWORD *)(v1 + 112) - 16));
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, (uint64_t)v8);
      if (*(_QWORD *)&v8[0])
      {
        if ((BYTE8(v8[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v8[0] + 40))();
        memset(v8, 0, sizeof(v8));
      }
      result = v5;
      if (v5 && (v6 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 40))();
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endDictionary(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  char v11;
  _BYTE v12[23];
  _OWORD __src[2];

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14) - 1;
    v4 = *(_QWORD *)(v2 + 48 * v3 + 32);
    if (v4 == *(_QWORD *)(v2 + 48 * v3 + 24))
    {
      if (v4 >= 0xF)
      {
        LOBYTE(__src[0]) = 3;
        if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(result, (char *)__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v1, 0, (uint64_t)"Dictionary");
        v2 = *((_QWORD *)v1 + 16);
        v3 = *((_QWORD *)v1 + 14) - 1;
      }
      for (i = *(_QWORD *)(v2 + 48 * v3 + 16); i; --i)
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject((uint64_t)v1);
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, 6);
      v6 = *((_QWORD *)v1 + 16);
      v7 = *((_QWORD *)v1 + 14) - 1;
      if (*(_BYTE *)(v6 + 48 * v7) != 2)
        ++*(_QWORD *)(v6 + 48 * v7 + 32);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v10);
      if ((v11 & 1) != 0)
        v8 = *(_BYTE **)&v12[7];
      else
        v8 = v12;
      v9 = *((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14);
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary \"%s\". Expected number of entries: %lld. Actual number of entries: %lld.", (re::DynamicString *)__src, v8, *(_QWORD *)(v9 - 24), *(_QWORD *)(v9 - 16));
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)__src);
      if (*(_QWORD *)&__src[0])
      {
        if ((BYTE8(__src[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&__src[0] + 40))();
        memset(__src, 0, sizeof(__src));
      }
      result = v10;
      if (v10 && (v11 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 40))();
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeDictionaryTag(uint64_t result, const char *a2, unint64_t a3)
{
  _anonymous_namespace_ *v5;
  const char *v6;
  char __src;
  char v8;
  char v9;

  v5 = (_anonymous_namespace_ *)result;
  if (a3 > 0xE)
  {
    v8 = -46;
    if (!*(_BYTE *)(result + 40)
      && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, &v8, 1uLL) & 1) == 0)
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v5, a2, (uint64_t)"Dictionary container");
    }
    result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeUint64((uint64_t)v5, a2, a3);
    v9 = -17;
    if (!*((_BYTE *)v5 + 40))
    {
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, &v9, 1uLL);
      if ((result & 1) == 0)
      {
        v6 = "Dictionary";
        return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v5, a2, (uint64_t)v6);
      }
    }
  }
  else
  {
    __src = a3 - 32;
    if (!*(_BYTE *)(result + 40))
    {
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, &__src, 1uLL);
      if ((result & 1) == 0)
      {
        v6 = "Small Dictionary";
        return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v5, a2, (uint64_t)v6);
      }
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,false>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5, __n128 a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  char *v17;
  char v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _OWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;

  if ((uint64_t *)result != a2)
  {
    v4 = (_OWORD *)result;
    v5 = (uint64_t *)(result + 16);
    if ((uint64_t *)(result + 16) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v9 = v8[2];
        v10 = *v8;
        v8 = v5;
        result = (*a3)(v9, v10);
        if ((_DWORD)result)
        {
          v14 = *(_OWORD *)v8;
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_OWORD *)((char *)v4 + v12 + 16) = *(_OWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*a3)(v11, *(_QWORD *)((char *)v4 + v12 - 16));
            v12 -= 16;
            if ((result & 1) == 0)
            {
              v13 = (_OWORD *)((char *)v4 + v12 + 16);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v14;
        }
        v5 = v8 + 2;
        v7 += 16;
      }
      while (v8 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    for (i = (_QWORD *)(result + 16); v4 + 2 != a2; i = v4 + 2)
    {
      v7 = v4[2];
      v8 = *v4;
      v4 = i;
      result = (*a3)(v7, v8);
      if ((_DWORD)result)
      {
        v12 = *(_OWORD *)v4;
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10 - 1;
          *v10 = *(v10 - 1);
          result = (*a3)(v9, *((_QWORD *)v10 - 4));
          v10 = v11;
        }
        while ((result & 1) != 0);
        *v11 = v12;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD, _QWORD))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v8 = (*a4)(*a2, *a1);
  result = (*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v11;
    if (!(*a4)(*a2, *a1))
      return 1;
    v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v12;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v13 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v13;
    if (!(*a4)(*a3, *a2))
      return 1;
    v14 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v14;
    return 2;
  }
  v10 = *(_OWORD *)a1;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_OWORD *)a3 = v10;
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;

  v4 = a2;
  v14 = *(_OWORD *)a1;
  v6 = *a1;
  if (((*a3)(*a1, *(a2 - 2)) & 1) != 0)
  {
    v7 = a1;
    do
    {
      v8 = v7[2];
      v7 += 2;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 2;
    do
    {
      v7 = v9;
      if (v9 >= v4)
        break;
      v9 += 2;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
    {
      v10 = *(v4 - 2);
      v4 -= 2;
    }
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    v15 = *(_OWORD *)v7;
    *(_OWORD *)v7 = *(_OWORD *)v4;
    *(_OWORD *)v4 = v15;
    do
    {
      v11 = v7[2];
      v7 += 2;
    }
    while (!(*a3)(v6, v11));
    do
    {
      v12 = *(v4 - 2);
      v4 -= 2;
    }
    while (((*a3)(v6, v12) & 1) != 0);
  }
  if (v7 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v7 - 1);
  *((_OWORD *)v7 - 1) = v14;
  return v7;
}

__int128 *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,re::Pair<void const*,void *,true> *,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &>(__int128 *a1, __int128 *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;

  v6 = 0;
  v19 = *a1;
  v7 = *(_QWORD *)a1;
  do
    v8 = (*a3)(*(_QWORD *)&a1[++v6], v7);
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *((_QWORD *)a2-- - 2);
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      v11 = *((_QWORD *)a2-- - 2);
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
        v16 = *((_QWORD *)v13++ + 2);
      while (((*a3)(v16, v7) & 1) != 0);
      do
        v17 = *((_QWORD *)v14-- - 2);
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v19;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(char *a1, char *a2, uint64_t (**a3)(uint64_t, _QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  char *v8;
  __int128 v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  __int128 v18;

  v6 = (a2 - a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 16;
      if ((*a3)(*((_QWORD *)a2 - 2), *(_QWORD *)a1))
      {
        v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)v8 = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, (_QWORD *)a1 + 6, (_QWORD *)a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (_QWORD *)a1 + 2, (_QWORD *)a1 + 4, a3);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*(_QWORD *)v11, *(_QWORD *)v10))
    {
      v18 = *(_OWORD *)v11;
      v14 = *(_QWORD *)v11;
      v15 = v12;
      while (1)
      {
        *(_OWORD *)&a1[v15 + 48] = *(_OWORD *)&a1[v15 + 32];
        if (v15 == -32)
          break;
        v16 = (*a3)(v14, *(_QWORD *)&a1[v15 + 16]);
        v15 -= 16;
        if ((v16 & 1) == 0)
        {
          v17 = &a1[v15 + 48];
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_OWORD *)v17 = v18;
      if (++v13 == 8)
        return v11 + 16 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 16;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD, _QWORD))
{
  __n128 result;
  __int128 v11;
  __int128 v12;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, a2, a3, a5);
  if ((*a5)(*a4, *a3))
  {
    v11 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v11;
    if ((*a5)(*a3, *a2))
    {
      v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      if ((*a5)(*a2, *a1))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD, _QWORD))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v12 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(_QWORD, _QWORD, __n128))*a6)(*a5, *a4, v12))
  {
    v14 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v14;
    if ((*a6)(*a4, *a3))
    {
      v15 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v15;
      if ((*a6)(*a3, *a2))
      {
        v16 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v16;
        if ((*a6)(*a2, *a1))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

char *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*,re::Pair<void const*,void *,true>*>(char *a1, char *a2, char *a3, uint64_t (**a4)(unint64_t, unint64_t), __n128 a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v22;

  if (a1 != a2)
  {
    v9 = a2 - a1;
    v10 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = &a1[16 * v11];
      do
      {
        a5 = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((uint64_t)a1, (unsigned int (**)(_QWORD, uint64_t))a4, v10, v13);
        v13 -= 16;
        --v12;
      }
      while (v12);
    }
    v14 = a2;
    if (a2 != a3)
    {
      v15 = a2;
      do
      {
        if (((unsigned int (*)(_QWORD, _QWORD, __n128))*a4)(*(_QWORD *)v15, *(_QWORD *)a1, a5))
        {
          v16 = *(_OWORD *)v15;
          *(_OWORD *)v15 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          a5 = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((uint64_t)a1, (unsigned int (**)(_QWORD, uint64_t))a4, v10, a1);
        }
        v15 += 16;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 17)
    {
      v17 = (unint64_t)v9 >> 4;
      v18 = a2 - 16;
      do
      {
        v22 = *(_OWORD *)a1;
        v19 = (char *)std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(a1, (unsigned int (**)(_QWORD, _QWORD))a4, v17);
        if (v18 == v19)
        {
          *(_OWORD *)v19 = v22;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v18;
          *(_OWORD *)v18 = v22;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>((uint64_t)a1, (uint64_t)(v19 + 16), a4, (v19 + 16 - a1) >> 4);
        }
        v18 -= 16;
      }
      while (v17-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(uint64_t a1, unsigned int (**a2)(_QWORD, uint64_t), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 result;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      v10 = ((uint64_t)a4 - a1) >> 3;
      v11 = v10 + 1;
      v12 = (_QWORD *)(a1 + 16 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[2]))
      {
        v12 += 2;
        v11 = v13;
      }
      if ((((uint64_t (*)(_QWORD, _QWORD))*a2)(*v12, *v5) & 1) == 0)
      {
        v19 = *(__n128 *)v5;
        v15 = *v5;
        do
        {
          v16 = v5;
          v5 = v12;
          *v16 = *(_OWORD *)v12;
          if (v7 < v11)
            break;
          v17 = (2 * v11) | 1;
          v12 = (_QWORD *)(a1 + 16 * v17);
          v18 = 2 * v11 + 2;
          if (v18 < a3)
          {
            if ((*a2)(*v12, v12[2]))
            {
              v12 += 2;
              v17 = v18;
            }
          }
          v11 = v17;
        }
        while (!(*a2)(*v12, v15));
        result = v19;
        *(__n128 *)v5 = v19;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(_OWORD *a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(*v9, *(_QWORD *)&a1[v6 + 2]))
    {
      v9 += 2;
      v10 = v11;
    }
    *a1 = *(_OWORD *)v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

__n128 std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL re::serializeDictionary<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)::{lambda(re::Pair<void const*,void *,true> const&,re::Pair<void const*,void *,true> const&)#1} &,re::Pair<void const*,void *,true>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(unint64_t, unint64_t), uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  __n128 *v8;
  __n128 *v9;
  __n128 result;
  unint64_t v11;
  __n128 *v12;
  __n128 v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = (__n128 *)(a1 + 16 * (v4 >> 1));
    v9 = (__n128 *)(a2 - 16);
    if ((*a3)(v8->n128_u64[0], *(_QWORD *)(a2 - 16)))
    {
      v13 = *v9;
      v11 = v9->n128_u64[0];
      do
      {
        v12 = v9;
        v9 = v8;
        *v12 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (__n128 *)(a1 + 16 * v7);
      }
      while (((*a3)(v8->n128_u64[0], v11) & 1) != 0);
      result = v13;
      *v9 = v13;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(uint64_t a1, const char *a2, int a3, int a4)
{
  uint64_t v4;
  char v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char __src;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v15 = 0;
  v4 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)v4)
  {
    if ((a4 & 0x10) != 0)
    {
      __src = -33;
      if (!*(_BYTE *)(a1 + 40)
        && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, &__src, 1uLL) & 1) == 0)
      {
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Object");
      }
      v8 = 1;
    }
    else
    {
      __src = -17;
      if (!*(_BYTE *)(a1 + 40)
        && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, &__src, 1uLL) & 1) == 0)
      {
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Object");
      }
      v8 = 2;
    }
    LOBYTE(v10) = v8;
    DWORD1(v10) = a4;
    *((_QWORD *)&v10 + 1) = a2;
    v11 = 0;
    v12 = 0;
    v13 = 0xFFFFFFFF80000000;
    v14 = 0;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v10);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v15;
  }
  return v4;
}

_anonymous_namespace_ *re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char __src;

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    __src = 3;
    if ((re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(result, &__src, 1uLL) & 1) == 0)re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v1, 0, (uint64_t)"Object");
    v2 = *((_QWORD *)v1 + 16);
    v3 = *((_QWORD *)v1 + 14) - 1;
    v4 = *(_QWORD *)(v2 + 48 * v3 + 16);
    if (v4)
    {
      do
      {
        --v4;
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject((uint64_t)v1);
      }
      while (v4);
      v2 = *((_QWORD *)v1 + 16);
      v3 = *((_QWORD *)v1 + 14) - 1;
    }
    result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, *(unsigned __int8 *)(v2 + 48 * v3));
    v5 = *((_QWORD *)v1 + 16);
    v6 = *((_QWORD *)v1 + 14) - 1;
    if (*(_BYTE *)(v5 + 48 * v6) != 2)
      ++*(_QWORD *)(v5 + 48 * v6 + 32);
  }
  return result;
}

BOOL re::serializeDynamicString<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t *v18;
  char *v19;
  _BOOL8 result;
  int v21;
  _anonymous_namespace_ *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  char *v26;
  unint64_t v27;

  v9 = (int)a3;
  if (a5 == a6)
    goto LABEL_14;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_14;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_14;
  }
  v18 = re::TypeInfo::name(a6);
  if ((unint64_t)*v18 >> 1 != 0x22C6ED80D0CLL
    || (v19 = (char *)v18[1], v19 != "StringID") && strcmp(v19, "StringID"))
  {
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_14:
  if (a7)
  {
    v27 = 0;
    v21 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, a2, v9, &v27, 0);
    result = 0;
    if (!v21)
      return result;
    if (v27)
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, 0, 1);
    v22 = (_anonymous_namespace_ *)(a1 + 24);
    goto LABEL_29;
  }
  v23 = *(_QWORD *)(a4 + 8);
  if ((v23 & 1) != 0)
    v24 = v23 >> 1;
  else
    v24 = v23 >> 1;
  v27 = v24;
  v25 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, a2, v9, &v27, 0);
  result = 0;
  if (v25)
  {
    if (v27)
    {
      if ((*(_BYTE *)(a4 + 8) & 1) != 0)
        v26 = *(char **)(a4 + 16);
      else
        v26 = (char *)(a4 + 9);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, v26, 0);
    }
    v22 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_29:
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString(v22);
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::internal::serializeObjectWithOneMember<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(_BYTE *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uint64_t *v14;
  uint64_t v15;
  const re::TypeInfo *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23[5];
  _QWORD *v24[4];
  _BYTE v25[32];
  _BYTE v26[32];
  _QWORD *v27;
  uint64_t v28;
  _BYTE v29[8];
  _BYTE v30[32];

  v14 = (uint64_t *)re::TypeMemberCollection::TypeMemberCollection((uint64_t)v29, *a5, a5[2]);
  re::TypeMemberCollection::operator[](v14, 0, (uint64_t)&v27);
  v15 = a4 + *(unsigned int *)(v28 + 24);
  re::TypeRegistry::typeInfo(v27, *(_QWORD *)v28, v29);
  re::TypeInfo::TypeInfo((uint64_t)v26, (uint64_t)v30);
  if (a5 == a6)
    goto LABEL_4;
  if (*a5 == *a6)
  {
    v18 = *(_QWORD *)a5[2];
    v19 = a6[2];
    v20 = *(_QWORD *)v19;
    if ((unsigned __int16)v18 != (unsigned __int16)*(_QWORD *)v19)
      goto LABEL_14;
    v22 = WORD1(v18) == WORD1(v20);
    v21 = (v20 ^ v18) & 0xFFFFFF00000000;
    v22 = v22 && v21 == 0;
    if (!v22)
      goto LABEL_14;
LABEL_4:
    if (!a1[64])
      return (*(uint64_t (**)(_BYTE *, const char *, uint64_t, uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, v15, v26, v26, a7);
    return 0;
  }
  if (re::areSameTranslatedVersion((re *)a5, (const re::TypeInfo *)a6, v16))
    goto LABEL_4;
  v19 = a6[2];
LABEL_14:
  if (*(_DWORD *)(v19 + 88) != 1)
  {
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((uint64_t)a1, a2, (re::TypeInfo *)a5, (re::TypeInfo *)a6);
    return 0;
  }
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v23, *a6, v19);
  re::TypeMemberCollection::operator[](v23, 0, (uint64_t)v24);
  re::TypeRegistry::typeInfo(v24[0], *v24[2], v29);
  re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)v30);
  if (a1[64])
    return 0;
  return (*(uint64_t (**)(_BYTE *, const char *, uint64_t, uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, v15, v26, v25, a7);
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(uint64_t a1, const char *a2, int a3, unint64_t *a4, int a5)
{
  uint64_t result;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v16 = 0;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeStringTag(a1, a2, *a4);
    v10 = *a4;
    LOBYTE(v11) = 8;
    DWORD1(v11) = a5;
    *((_QWORD *)&v11 + 1) = a2;
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = v10;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v11);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v16;
    return *(_BYTE *)(a1 + 40) == 0;
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(uint64_t result, char *a2, char a3)
{
  _anonymous_namespace_ *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(result + 40))
  {
    v4 = (_anonymous_namespace_ *)result;
    v5 = *(_QWORD *)(*(_QWORD *)(result + 128) + 48 * *(_QWORD *)(result + 112) - 24);
    result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, a2, v5);
    if ((result & 1) == 0)
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType(v4, 0, (uint64_t)"String");
    if ((a3 & 2) == 0)
    {
      v6 = *((_QWORD *)v4 + 16);
      v7 = *((_QWORD *)v4 + 14) - 1;
      if (*(_BYTE *)(v6 + 48 * v7) != 2)
        *(_QWORD *)(v6 + 48 * v7 + 32) += v5;
    }
  }
  return result;
}

_anonymous_namespace_ *re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  char v10;
  _BYTE v11[23];
  _OWORD v12[2];

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14) - 1;
    if (*(_QWORD *)(v2 + 48 * v3 + 32) == *(_QWORD *)(v2 + 48 * v3 + 24))
    {
      for (i = *(_QWORD *)(v2 + 48 * v3 + 16); i; --i)
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject((uint64_t)v1);
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, 8);
      v5 = *((_QWORD *)v1 + 16);
      v6 = *((_QWORD *)v1 + 14) - 1;
      if (*(_BYTE *)(v5 + 48 * v6) != 2)
        ++*(_QWORD *)(v5 + 48 * v6 + 32);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v9);
      if ((v10 & 1) != 0)
        v7 = *(_BYTE **)&v11[7];
      else
        v7 = v11;
      v8 = *((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14);
      re::DynamicString::format((re::DynamicString *)"Failed to serialize string \"%s\". Expected number of characters: %lld. Actual number of characters: %lld.", (re::DynamicString *)v12, v7, *(_QWORD *)(v8 - 24), *(_QWORD *)(v8 - 16));
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)v12);
      if (*(_QWORD *)&v12[0])
      {
        if ((BYTE8(v12[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v12[0] + 40))();
        memset(v12, 0, sizeof(v12));
      }
      result = v9;
      if (v9 && (v10 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeStringTag(uint64_t result, const char *a2, unint64_t a3)
{
  unsigned __int8 *v5;
  const char *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t __src;

  v5 = (unsigned __int8 *)result;
  if (a3 > 0x20)
  {
    if (a3 <= 0xFF)
    {
      LOBYTE(__src) = 97;
      if (!*(_BYTE *)(result + 40))
      {
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
        if ((result & 1) == 0)
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String(8-Bit Length)");
        v8 = v5[40];
        LOBYTE(__src) = a3;
        if (!v8)
        {
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, (char *)&__src, 1uLL);
          if ((result & 1) == 0)
          {
            v6 = "String(8-Bit Length)";
            return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
          }
        }
      }
    }
    else if (a3 >> 16)
    {
      if (HIDWORD(a3))
      {
        LOBYTE(__src) = 100;
        if (!*(_BYTE *)(result + 40))
        {
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
          if ((result & 1) == 0)
            result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String(64-Bit Length)");
          v7 = v5[40];
          __src = a3;
          if (!v7)
          {
            result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, (char *)&__src, 8uLL);
            if ((result & 1) == 0)
            {
              v6 = "String(64-Bit Length)";
              return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
            }
          }
        }
      }
      else
      {
        LOBYTE(__src) = 99;
        if (!*(_BYTE *)(result + 40))
        {
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
          if ((result & 1) == 0)
            result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String(32-Bit Length)");
          v10 = v5[40];
          LODWORD(__src) = a3;
          if (!v10)
          {
            result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, (char *)&__src, 4uLL);
            if ((result & 1) == 0)
            {
              v6 = "String(32-Bit Length)";
              return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
            }
          }
        }
      }
    }
    else
    {
      LOBYTE(__src) = 98;
      if (!*(_BYTE *)(result + 40))
      {
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
        if ((result & 1) == 0)
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String(16-Bit Length)");
        v9 = v5[40];
        LOWORD(__src) = a3;
        if (!v9)
        {
          result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>(v5, (char *)&__src, 2uLL);
          if ((result & 1) == 0)
          {
            v6 = "String(16-Bit Length)";
            return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
          }
        }
      }
    }
  }
  else
  {
    LOBYTE(__src) = a3 + 64;
    if (!*(_BYTE *)(result + 40))
    {
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)result, (char *)&__src, 1uLL);
      if ((result & 1) == 0)
      {
        v6 = "Small String";
        return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)v6);
      }
    }
  }
  return result;
}

uint64_t re::internal::serializeMembersWithoutVersioning<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16[2];
  uint64_t v17;
  unint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  _BYTE v21[8];
  uint64_t v22;

  re::TypeRegistry::typeInfo((_QWORD *)*a3, *(_QWORD *)(a3[2] + 72), v19);
  if (v19[0])
  {
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v20);
    if (*(_DWORD *)(v17 + 88) || (re::TypeRegistry::typeInfo(v16[0], *(_QWORD *)(v17 + 72), v21), v21[0]))
    {
      if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject((uint64_t)(a1 + 24), "@super", 0, 0))
      {
        re::internal::serializeMembersWithoutVersioning<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, v16, a4);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
      }
    }
  }
  result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v16, *a3, a3[2]);
  if (v18)
  {
    for (i = 0; i < v18; ++i)
    {
      if (a1[64])
        break;
      result = (uint64_t)re::TypeMemberCollection::operator[]((uint64_t *)v16, i, (uint64_t)&v14);
      if (*(_BYTE *)(v15 + 28))
      {
        v10 = *(_QWORD *)(v15 + 16);
        if (strlen((const char *)v10) >= 3 && *(_BYTE *)v10 == 109)
          v10 += 2 * (*(_BYTE *)(v10 + 1) == 95);
        v11 = *(unsigned int *)(v15 + 32);
        v12 = *(unsigned int *)(v15 + 24);
        re::TypeRegistry::typeInfo(v14, *(_QWORD *)v15, v21);
        result = re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v22);
        if (!a1[64])
          result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, v10, v11, a2 + v12, v13, v13, a4);
      }
    }
  }
  return result;
}

uint64_t re::internal::serializeMembersWithVersioning<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  const re::TypeInfo *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t i;
  uint64_t v29;
  uint64_t v30;
  re *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  re::internal *v36;
  _BYTE v37[32];
  _BYTE v38[32];
  _QWORD *v39[2];
  uint64_t v40;
  _QWORD *v41[2];
  uint64_t v42;
  uint64_t v43[4];
  unint64_t v44;
  uint64_t v45[5];
  _BYTE v46[8];
  uint64_t v47;
  char v48;
  uint64_t *v49;
  _BYTE v50[8];
  uint64_t v51;
  char v52;
  uint64_t *v53;
  uint8_t buf[4];
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  re::TypeRegistry::typeInfo((_QWORD *)*a3, *(_QWORD *)(a3[2] + 72), v50);
  re::TypeRegistry::typeInfo((_QWORD *)*a4, *(_QWORD *)(a4[2] + 72), v46);
  if (v46[0])
  {
    if (!v50[0])
    {
      v11 = re::TypeInfo::name((re::TypeInfo *)&v47)[1];
      re::TypeInfo::name((re::TypeInfo *)a3);
      return re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, 0, "Base class \"%s\" removed from type \"%s\".", v12, v13, v14, v15, v16, v11);
    }
    if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(a1 + 24, "@super", 0, 0))
    {
      if (v51 == v47)
      {
        v18 = *v53;
        v19 = *v49;
        if ((unsigned __int16)*v53 == (unsigned __int16)*v49)
        {
          v21 = WORD1(v18) == WORD1(v19);
          v20 = (v19 ^ v18) & 0xFFFFFF00000000;
          v21 = v21 && v20 == 0;
          if (v21)
            goto LABEL_6;
        }
      }
      else if (re::areSameTranslatedVersion((re *)&v51, (const re::TypeInfo *)&v47, v10))
      {
LABEL_6:
        re::internal::serializeMembersWithoutVersioning<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_BYTE *)a1, a2, &v51, a5);
LABEL_16:
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
        goto LABEL_17;
      }
      if (v52 == v48)
      {
        re::internal::serializeMembersWithVersioning<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, &v51, &v47, a5);
      }
      else
      {
        v22 = re::TypeInfo::name((re::TypeInfo *)&v51)[1];
        re::TypeInfo::name((re::TypeInfo *)&v47);
        re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, 0, "Type categories of types \"%s\" (runtime) and \"%s\" (stream) don't match.", v23, v24, v25, v26, v27, v22);
      }
      goto LABEL_16;
    }
  }
LABEL_17:
  re::TypeMemberCollection::TypeMemberCollection((uint64_t)v45, *a3, a3[2]);
  result = re::TypeMemberCollection::TypeMemberCollection((uint64_t)v43, *a4, a4[2]);
  if (v44)
  {
    for (i = 0; i < v44; ++i)
    {
      if (*(_BYTE *)(a1 + 64))
        break;
      result = (uint64_t)re::TypeMemberCollection::operator[](v43, i, (uint64_t)v41);
      if (*(_BYTE *)(v42 + 28))
      {
        v29 = *(_QWORD *)(v42 + 16);
        if (strlen((const char *)v29) >= 3 && *(_BYTE *)v29 == 109)
          v29 += 2 * (*(_BYTE *)(v29 + 1) == 95);
        v30 = *(unsigned int *)(v42 + 32);
        v31 = *(re **)(*a4 + 856);
        if (!v31
          || (v31 = (re *)re::internal::TypeTranslationTable::translateMember(v31, (const re::TypeMemberInfo *)v41),
              (_DWORD)v31 == -1))
        {
          v33 = *re::foundationSerializationLogObjects(v31);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            v34 = v33;
            v35 = re::TypeInfo::name((re::TypeInfo *)a4)[1];
            *(_DWORD *)buf = 136315394;
            v55 = v35;
            v56 = 2080;
            v57 = v29;
            _os_log_impl(&dword_224FE9000, v34, OS_LOG_TYPE_INFO, "Skipping unknown member \"%s.%s\".", buf, 0x16u);

          }
          v36 = *(re::internal **)(a1 + 208);
          re::TypeRegistry::typeInfo(v41[0], *(_QWORD *)v42, buf);
          re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)&v55 + 4);
          result = re::internal::translateType(v36, (const re::TypeRegistry *)v39, (uint64_t)buf);
          if (!*(_BYTE *)(a1 + 64))
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint8_t *, uint8_t *, uint64_t))(*(_QWORD *)a1 + 72))(a1, v29, v30, 0, buf, buf, 1);
        }
        else
        {
          re::TypeMemberCollection::operator[](v45, (int)v31, (uint64_t)v39);
          v32 = *(unsigned int *)(v40 + 24);
          re::TypeRegistry::typeInfo(v39[0], *(_QWORD *)v40, buf);
          re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)&v55 + 4);
          re::TypeRegistry::typeInfo(v41[0], *(_QWORD *)v42, buf);
          result = re::TypeInfo::TypeInfo((uint64_t)v37, (uint64_t)&v55 + 4);
          if (!*(_BYTE *)(a1 + 64))
            result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, v29, v30, a2 + v32, v38, v37, a5);
        }
      }
    }
  }
  return result;
}

double re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 96 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 96;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_402, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 32 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 32;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_402, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 96 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 96;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::serializeSharedObjects(uint64_t result)
{
  uint64_t v1;
  _anonymous_namespace_ *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  _BYTE v11[32];
  re::TypeRegistry *v12[4];
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(result + 288) >= 2uLL)
  {
    v1 = result;
    v2 = (_anonymous_namespace_ *)(result + 24);
    result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject(result + 24, "@shared", 20, 0);
    if ((_DWORD)result)
    {
      v3 = *(_QWORD *)(v1 + 56);
      v16 = 0;
      v17 = 0;
      v14 = v3;
      v15 = 0;
      re::DynamicString::setCapacity(&v14, 8uLL);
      if (*(_QWORD *)(v1 + 288) < 2uLL)
      {
LABEL_18:
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject(v2);
      }
      else
      {
        v4 = 0;
        v5 = 1;
        while (!*(_BYTE *)(v1 + 64))
        {
          re::DynamicString::assignf((re::DynamicString *)&v14, "%u", v5);
          v6 = *(_QWORD *)(v1 + 288);
          if (v6 <= v5)
          {
            v18 = 0;
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            v27 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v19 = 136315906;
            v20 = "operator[]";
            v21 = 1024;
            v22 = 789;
            v23 = 2048;
            v24 = v5;
            v25 = 2048;
            v26 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v7 = *(_QWORD *)(v1 + 304) + v4;
          v10 = *(_QWORD *)(v7 + 80);
          re::TypeInfo::TypeInfo((uint64_t)v11, v7 + 88);
          re::TypeInfo::TypeInfo((uint64_t)v12, v7 + 120);
          v13 = *(_WORD *)(v7 + 152);
          if ((_BYTE)v13)
          {
            if ((v15 & 1) != 0)
              v8 = v16;
            else
              v8 = (char *)&v15 + 1;
            re::internal::serializePolymorphicObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_BYTE *)v1, v8, v5, v10, (re::TypeInfo *)v11, v12, v13 > 0xFFu);
          }
          else if (!*(_BYTE *)(v1 + 64))
          {
            if ((v15 & 1) != 0)
              v9 = (char *)v16;
            else
              v9 = (char *)&v15 + 1;
            (*(void (**)(uint64_t, char *, unint64_t, uint64_t, _BYTE *, re::TypeRegistry **, _QWORD))(*(_QWORD *)v1 + 72))(v1, v9, v5, v10, v11, v12, 0);
          }
          ++v5;
          v4 += 80;
          if (*(_QWORD *)(v1 + 288) <= v5)
            goto LABEL_18;
        }
      }
      result = v14;
      if (v14)
      {
        if ((v15 & 1) != 0)
          return (*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
      }
    }
  }
  return result;
}

BOOL re::internal::serializePolymorphicObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(_BYTE *a1, const char *a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, re::TypeRegistry **a6, int a7)
{
  re::TypeRegistry *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  uint64_t v29[4];
  _BYTE v30[16];
  uint64_t v31;

  re::TypeInfo::TypeInfo((uint64_t)v30, (uint64_t)a5);
  if (a7)
  {
    v13 = *a6;
    v14 = re::TypeInfo::name(a5);
    re::TypeRegistry::typeInfo(v13, (const re::StringID *)v14, v28);
    if (!v28[0])
    {
      v27 = re::TypeInfo::name(a5)[1];
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError((uint64_t)a1, a2, "No matching type found for polymorphic type \"%s\" to serialize.", v21, v22, v23, v24, v25, v27);
      return 0;
    }
    re::TypeInfo::operator=((uint64_t)v30, (uint64_t)v29);
  }
  v28[0] = *(_BYTE *)(v31 + 120);
  if (!v28[0])
  {
    v26 = re::TypeInfo::name((re::TypeInfo *)v30)[1];
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError((uint64_t)a1, a2, "Failed to get custom class ID for type \"%s\".", v16, v17, v18, v19, v20, v26);
    return 0;
  }
  v29[0] = *(_QWORD *)(v31 + 128);
  if (!re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginObject((uint64_t)(a1 + 24), a2, 0, 0))
    return 0;
  re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned long long>((uint64_t)(a1 + 24), "customClassID", 1, v29, 0);
  if (!a1[64])
    (*(void (**)(_BYTE *, const char *, uint64_t, uint64_t, re::TypeInfo *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, "object", 10, a4, a5, v30, 0);
  re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endObject((_anonymous_namespace_ *)(a1 + 24));
  return a1[64] == 0;
}

uint64_t *re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::registerSerializeFunc(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *result;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 208);
  result = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v5 + 200, a2);
  if (v5)
    v7 = result == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *result;
    v10 = a3;
    v9 = v8 | 0xFFFFFFFF00000000;
    return (uint64_t *)re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(a1 + 224, &v9, &v10);
  }
  return result;
}

uint64_t re::serializeBool<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = &v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeBool(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeChar<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = &v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<signed char>(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeI8<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = &v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<signed char>(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeI16<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, __int16 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  __int16 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int16 v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = &v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<short>(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeI32<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, int *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  int *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = &v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<int>(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeI64<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = &v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeSignedInteger<long long>(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeU8<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int8 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  unsigned __int8 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (unsigned __int8 *)&v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned char>(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeU16<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned __int16 *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  unsigned __int16 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int16 v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (unsigned __int16 *)&v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned short>(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeU32<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, unsigned int *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  unsigned int *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (unsigned int *)&v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned int>(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeU64<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = &v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeUnsignedInteger<unsigned long long>(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeFloat<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (char *)&v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeFloat(a1 + 24, a2, v9, v14, a7);
}

uint64_t re::serializeDouble<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v9 = (int)a3;
  v20 = 0;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 == *(_QWORD *)a6)
    {
      v16 = **((_QWORD **)a5 + 2);
      v17 = **((_QWORD **)a6 + 2);
      if ((unsigned __int16)v16 == (unsigned __int16)v17)
      {
        v19 = WORD1(v16) == WORD1(v17);
        v18 = (v17 ^ v16) & 0xFFFFFF00000000;
        v19 = v19 && v18 == 0;
        if (v19)
          goto LABEL_4;
      }
    }
    else if (re::areSameTranslatedVersion(a5, a6, a3))
    {
      goto LABEL_4;
    }
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_4:
  if (a7)
    v14 = (char *)&v20;
  else
    v14 = a4;
  return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeDouble(a1 + 24, a2, v9, v14, a7);
}

BOOL re::serializeCString<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char **a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BOOL8 result;
  int v21;
  const char *v22;
  _anonymous_namespace_ *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  const char *v28;
  int v29;

  v9 = (int)a3;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 != *(_QWORD *)a6)
    {
      if (re::areSameTranslatedVersion(a5, a6, a3))
        goto LABEL_4;
LABEL_23:
      re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
      return 0;
    }
    v24 = **((_QWORD **)a5 + 2);
    v25 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v24 != (unsigned __int16)v25)
      goto LABEL_23;
    v27 = WORD1(v24) == WORD1(v25);
    v26 = (v25 ^ v24) & 0xFFFFFF00000000;
    v27 = v27 && v26 == 0;
    if (!v27)
      goto LABEL_23;
  }
LABEL_4:
  if (a7)
  {
    v29 = 0;
    v19 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, v9, &v29, 0);
    result = 0;
    if (!v19)
      return result;
    if (v29)
    {
      if (v29 == 1)
      {
        re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, a2, "Found pointer reference instead of C string.", v14, v15, v16, v17, v18, (char)v28);
        return 0;
      }
      v28 = 0;
      if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, a2, 0, (unint64_t *)&v28, 0))
      {
        if (v28)
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, 0, 1);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
      }
    }
    v23 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    v29 = 2 * (*a4 != 0);
    v21 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, v9, &v29, 0);
    result = 0;
    if (!v21)
      return result;
    if (v29 == 2)
    {
      v22 = *a4;
      if (*a4)
        v22 = (const char *)strlen(v22);
      v28 = v22;
      if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, a2, 0, (unint64_t *)&v28, 0))
      {
        if (v28)
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, *a4, 0);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
      }
    }
    v23 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endPointer(v23);
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::serializeStringID<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t *v18;
  char *v19;
  uint64_t result;
  int v21;
  _anonymous_namespace_ *v22;
  size_t v23;

  v9 = (int)a3;
  if (a5 == a6)
    goto LABEL_14;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_14;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_14;
  }
  v18 = re::TypeInfo::name(a6);
  if ((unint64_t)*v18 >> 1 != 0x134375A94D9F7110
    || (v19 = (char *)v18[1], v19 != "DynamicString") && strcmp(v19, "DynamicString"))
  {
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_14:
  if (a7)
  {
    v23 = 0;
    v21 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, a2, v9, &v23, 0);
    result = 0;
    if (!v21)
      return result;
    if (v23)
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, 0, 1);
    v22 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    v23 = strlen(*(const char **)(a4 + 8));
    result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, a2, v9, &v23, 0);
    if (!(_DWORD)result)
      return result;
    if (v23)
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, *(char **)(a4 + 8), 0);
    v22 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString(v22);
  return *(_BYTE *)(a1 + 64) == 0;
}

BOOL re::serializeIntrospectionCallbackSerializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v10;
  int v14;
  _BOOL8 result;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36[2];

  v10 = (int)a3;
  if (a5 != a6)
  {
    if (*(_QWORD *)a5 != *(_QWORD *)a6)
    {
      if (re::areSameTranslatedVersion(a5, a6, a3))
        goto LABEL_4;
LABEL_28:
      re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, a5, a6);
      return 0;
    }
    v23 = **((_QWORD **)a5 + 2);
    v24 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v23 != (unsigned __int16)v24)
      goto LABEL_28;
    v26 = WORD1(v23) == WORD1(v24);
    v25 = (v24 ^ v23) & 0xFFFFFF00000000;
    v26 = v26 && v25 == 0;
    if (!v26)
      goto LABEL_28;
  }
LABEL_4:
  if (!a7)
  {
    v16 = **((_QWORD **)a5 + 2);
    v32 = *(_QWORD *)a5;
    v33 = v16;
    LODWORD(v34) = -1;
    v36[0] = 0x258C98EAAF29A10ALL;
    v36[1] = (unint64_t)"CallbackSerializerAttribute";
    v17 = (uint64_t *)re::TypeAttributeCollection::operator[](&v32, v36);
    re::StringID::destroyString((re::StringID *)v36);
    v18 = *v17;
    v19 = *(_QWORD *)(a1 + 200);
    v20 = *(_QWORD *)(a1 + 56);
    v34 = 0;
    v35 = 0;
    v32 = v20;
    v33 = 0;
    re::DynamicString::setCapacity(&v32, 0);
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(v18 + 72))(v19, v18, a4, &v32) & 1) != 0)
    {
      if ((v33 & 1) != 0)
        v21 = v33 >> 1;
      else
        v21 = v33 >> 1;
      v36[0] = v21;
      if (re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, a2, v10, v36, 0))
      {
        if (v36[0])
        {
          if ((v33 & 1) != 0)
            v22 = v34;
          else
            v22 = (char *)&v33 + 1;
          re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, v22, 0);
        }
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
        if (v32 && (v33 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v32 + 40))();
        return *(_BYTE *)(a1 + 64) == 0;
      }
    }
    else
    {
      re::TypeInfo::name(a5);
      re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, a2, "Failed to write string for \"%s\" (type %s) using serialization callback.", v27, v28, v29, v30, v31, (char)a2);
    }
    if (v32 && (v33 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v32 + 40))();
    return 0;
  }
  v32 = 0;
  v14 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginString(a1 + 24, a2, v10, (unint64_t *)&v32, 0);
  result = 0;
  if (v14)
  {
    if (v32)
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::serializeString(a1 + 24, 0, 1);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endString((_anonymous_namespace_ *)(a1 + 24));
    return *(_BYTE *)(a1 + 64) == 0;
  }
  return result;
}

uint64_t re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginPointer(uint64_t a1, const char *a2, int a3, int *a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char __src;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v17 = 0;
  result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::advance(a1, a2, a3);
  if ((_DWORD)result)
  {
    v11 = *a4;
    if ((*a4 - 1) >= 2)
    {
      if (v11)
      {
        re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Unexpected PointerEncoding.", "!\"Unreachable code\"", "beginPointer", 927);
        result = _os_crash();
        __break(1u);
        return result;
      }
      __src = 4;
      if (!*(_BYTE *)(a1 + 40)
        && (re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::process<re::DynamicArrayBufferedOutputStream,0>((_QWORD *)a1, &__src, 1uLL) & 1) == 0)
      {
        re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Optional");
      }
      v11 = *a4;
    }
    LOBYTE(v12) = 9;
    DWORD1(v12) = a5;
    *((_QWORD *)&v12 + 1) = a2;
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v14 = v11 != 0;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v12);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v17;
    return *(_BYTE *)(a1 + 40) == 0;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endPointer(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _anonymous_namespace_ *v8;
  char v9;
  _BYTE v10[23];
  _OWORD v11[2];

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14) - 1;
    if (*(_QWORD *)(v2 + 48 * v3 + 32) == *(_QWORD *)(v2 + 48 * v3 + 24))
    {
      for (i = *(_QWORD *)(v2 + 48 * v3 + 16); i; --i)
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::skipObject((uint64_t)v1);
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, 9);
      v5 = *((_QWORD *)v1 + 16);
      v6 = *((_QWORD *)v1 + 14) - 1;
      if (*(_BYTE *)(v5 + 48 * v6) != 2)
        ++*(_QWORD *)(v5 + 48 * v6 + 32);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v8);
      if ((v9 & 1) != 0)
        v7 = *(_BYTE **)&v10[7];
      else
        v7 = v10;
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize pointer \"%s\". No value was provided.", (re::DynamicString *)v11, v7);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)v11);
      if (*(_QWORD *)&v11[0])
      {
        if ((BYTE8(v11[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v11[0] + 40))();
        memset(v11, 0, sizeof(v11));
      }
      result = v8;
      if (v8 && (v9 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v8 + 40))();
    }
  }
  return result;
}

uint64_t re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addEmplace<BOOL (*&)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 4) != v6)
  {
    v8 = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = 3 * v8;
  *(_QWORD *)(v9 + 8 * v10 + 16) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 16) + 8 * v10;
  return v11 + 16;
}

uint64_t re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addEmplace<BOOL (*&)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 4) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addEmplace<BOOL (*&)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 4) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 4), *(_QWORD *)&v13[16] + v10 + 4, *(_QWORD *)&v13[16] + v10 + 16);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_402, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicArray<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 80 * v4;
  *(_QWORD *)v5 = *(_QWORD *)a2;
  re::TypeInfo::TypeInfo(v5 + 8, a2 + 8);
  result = re::TypeInfo::TypeInfo(v5 + 40, a2 + 40);
  *(_WORD *)(v5 + 72) = *(_WORD *)(a2 + 72);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::addNew<int>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::addEmplace<int>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

_QWORD *re::DynamicArray<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 80 * v9;
        v11 = (uint64_t)(v7 + 5);
        v12 = v8 + 40;
        do
        {
          *(_QWORD *)(v11 - 40) = *(_QWORD *)(v12 - 40);
          re::TypeInfo::TypeInfo(v11 - 32, v12 - 32);
          re::TypeInfo::TypeInfo(v11, v12);
          *(_WORD *)(v11 + 32) = *(_WORD *)(v12 + 32);
          v11 += 80;
          v13 = v12 + 40;
          v12 += 80;
        }
        while (v13 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::addEmplace<int>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::addEmplace<int>(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_402, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::serializePointer(uint64_t a1, const char *a2, uint64_t a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  const re::TypeInfo *v14;
  _BOOL4 isPointerToPolymorphicType;
  int v16;
  unsigned int *v17;
  re *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _anonymous_namespace_ *v25;
  int v26;
  uint64_t result;
  _anonymous_namespace_ *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _BYTE v38[32];
  _BYTE v39[44];
  unsigned int v40;
  _BYTE v41[32];
  re *v42[2];
  re::TypeRegistry *v43[4];
  _QWORD v44[5];

  isPointerToPolymorphicType = re::TypeInfo::isPointerToPolymorphicType(this);
  if (this == a6)
    goto LABEL_4;
  if (*(_QWORD *)this == *(_QWORD *)a6)
  {
    v29 = **((_QWORD **)this + 2);
    v30 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v29 == (unsigned __int16)v30)
    {
      v32 = WORD1(v29) == WORD1(v30);
      v31 = (v30 ^ v29) & 0xFFFFFF00000000;
      v32 = v32 && v31 == 0;
      if (v32)
        goto LABEL_4;
    }
  }
  else if (re::areSameTranslatedVersion(this, a6, v14))
  {
LABEL_4:
    v16 = 0;
    goto LABEL_5;
  }
  if (*((_BYTE *)a6 + 12) != 9
    || isPointerToPolymorphicType
    && (!re::TypeInfo::isPointerToPolymorphicType(a6)
     || (v33 = re::TypeInfo::name(this), v34 = re::TypeInfo::name(a6), !re::StringID::operator==(v33, v34))))
  {
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>(a1, a2, this, a6);
    return 0;
  }
  v16 = 1;
LABEL_5:
  re::TypeRegistry::typeInfo(*(_QWORD **)this, *(_QWORD *)(*((_QWORD *)this + 2) + 72), &v37);
  re::TypeInfo::TypeInfo((uint64_t)v44, (uint64_t)v38);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v37);
  re::TypeInfo::TypeInfo((uint64_t)v43, (uint64_t)v38);
  if (!isPointerToPolymorphicType || (a7 & 1) != 0)
  {
    v18 = *(re **)v44[2];
    v42[0] = (re *)v44[0];
    v42[1] = v18;
    if (v44[0])
      goto LABEL_8;
    goto LABEL_14;
  }
  re::internal::actualType(a4, (void **)this, v42);
  if (!v42[0])
  {
LABEL_14:
    v19 = re::TypeInfo::name(this);
    re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::setError(a1, a2, "Failed to get actual type of polymorphic object. Type \"%s\".", v20, v21, v22, v23, v24, v19[1]);
    return 0;
  }
LABEL_8:
  re::TypeRegistry::typeInfo(*(re **)this, v42, &v37);
  re::TypeInfo::TypeInfo((uint64_t)v41, (uint64_t)v38);
  if ((a7 & 1) != 0 || !*a4)
  {
    LODWORD(v37) = 0;
    v25 = (_anonymous_namespace_ *)(a1 + 24);
    v26 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)&v37, 0);
    result = 0;
    if (v26)
    {
LABEL_16:
      v28 = v25;
LABEL_17:
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endPointer(v28);
      return *(_BYTE *)(a1 + 64) == 0;
    }
  }
  else if (*(_BYTE *)(*((_QWORD *)this + 2) + 80))
  {
    v17 = (unsigned int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 312, (uint64_t *)a4);
    if (v17)
    {
      v40 = *v17;
    }
    else
    {
      v40 = *(_QWORD *)(a1 + 288);
      v37 = *a4;
      re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)v41);
      re::TypeInfo::TypeInfo((uint64_t)v39, (uint64_t)v43);
      v39[32] = isPointerToPolymorphicType;
      v39[33] = v16;
      re::DynamicArray<re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject>::add((_anonymous_namespace_ *)(a1 + 272), (uint64_t)&v37);
      re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::addNew<int>(a1 + 312, (uint64_t *)a4, &v40);
    }
    LODWORD(v37) = 1;
    v25 = (_anonymous_namespace_ *)(a1 + 24);
    result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)&v37, 0);
    if ((_DWORD)result)
    {
      if (!*(_BYTE *)(a1 + 64))
      {
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::writeInteger(a1 + 24, "ID", v40);
        v35 = *(_QWORD *)(a1 + 152);
        v36 = *(_QWORD *)(a1 + 136) - 1;
        if (*(_BYTE *)(v35 + 48 * v36) != 2)
          ++*(_QWORD *)(v35 + 48 * v36 + 32);
      }
      goto LABEL_16;
    }
  }
  else
  {
    LODWORD(v37) = 2;
    result = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginPointer(a1 + 24, a2, a3, (int *)&v37, 0);
    if ((_DWORD)result)
    {
      if (isPointerToPolymorphicType)
      {
        re::internal::serializePolymorphicObject<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>((_BYTE *)a1, a2, a3, (uint64_t)*a4, (re::TypeInfo *)v41, v43, v16);
      }
      else if (!*(_BYTE *)(a1 + 64))
      {
        (*(void (**)(uint64_t, const char *, _QWORD, char *, _QWORD *, re::TypeRegistry **, _QWORD))(*(_QWORD *)a1 + 72))(a1, a2, 0, *a4, v44, v43, 0);
      }
      v28 = (_anonymous_namespace_ *)(a1 + 24);
      goto LABEL_17;
    }
  }
  return result;
}

re::NetworkOPACKDeserializer *re::NetworkOPACKDeserializer::NetworkOPACKDeserializer(re::NetworkOPACKDeserializer *this)
{
  uint64_t v2;
  StringID v4;

  *(_QWORD *)&v4.var0 = 0xDEED4B9BC35C271ALL;
  v4.var1 = "NetworkOPACKDeserializer";
  v2 = re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::SerializerV2((uint64_t)this, &v4);
  *(_QWORD *)v2 = &off_24ED2B330;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_QWORD *)(v2 + 200) = v2 + 456;
  re::StringID::destroyString((re::StringID *)&v4);
  *(_QWORD *)this = &off_24ED2B270;
  return this;
}

void re::NetworkOPACKDeserializer::~NetworkOPACKDeserializer(re::NetworkOPACKDeserializer *this)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED2B398;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  v3 = *((_QWORD *)this + 45);
  if (v3)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  v5 = *((_QWORD *)this + 34);
  if (v5)
  {
    if (*((_QWORD *)this + 38))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 35) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 34) = 0;
    ++*((_DWORD *)this + 74);
  }
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer(this);
}

{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED2B398;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)this + 50);
  v3 = *((_QWORD *)this + 45);
  if (v3)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 39);
  v5 = *((_QWORD *)this + 34);
  if (v5)
  {
    if (*((_QWORD *)this + 38))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *((_QWORD *)this + 38) = 0;
    *((_QWORD *)this + 35) = 0;
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 34) = 0;
    ++*((_DWORD *)this + 74);
  }
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer(this);
  JUMPOUT(0x2276933B8);
}

void re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::doClose(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;

  re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::deserializeSharedObjects(a1, a2, a3, a4, a5, a6, a7, a8, v9);
  re::EncoderOPACK<re::FixedArrayInputStream>::endObject(a1 + 24);
  *(_QWORD *)(a1 + 288) = 0;
  ++*(_DWORD *)(a1 + 296);
  re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1 + 312);
  *(_QWORD *)(a1 + 376) = 0;
  ++*(_DWORD *)(a1 + 384);
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 400);
}

void re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::doRegisterSerializeFuncs(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(uint64_t, const char *, const re::TypeInfo *, uint64_t, re::TypeInfo *, re::TypeInfo *, int);

  v11 = 6059476;
  v12 = "BOOL";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeBool<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 6104748;
  v12 = "char";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeChar<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x172E117BCLL;
  v12 = "int8_t";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI8<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93A4A92;
  v12 = "int16_t";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI16<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93BFE06;
  v12 = "int32_t";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI32<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2CE93EC744;
  v12 = "int64_t";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 6655224;
  v12 = "long";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeI64<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x31CD534126;
  v12 = "uint8_t";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU8<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD0D4E68;
  v12 = "uint16_t";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU16<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD0F01DCLL;
  v12 = "uint32_t";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU32<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x607DD11CB1ALL;
  v12 = "uint64_t";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x1947BDF6CLL;
  v12 = "size_t";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeU64<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 195052728;
  v12 = "float";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeFloat<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x161EEF7A2;
  v12 = "double";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDouble<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 189247272;
  v12 = "char*";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeCString<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x2686EB529B3EE220;
  v12 = "DynamicString";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeDynamicString<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v11 = 0x458DDB01A18;
  v12 = "StringID";
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::registerSerializeFunc(a1, &v11, (uint64_t)re::serializeStringID<re::EncoderOPACK<re::FixedArrayInputStream>>);
  re::StringID::destroyString((re::StringID *)&v11);
  v2 = *(_QWORD *)(a1 + 208);
  v11 = 0x258C98EAAF29A10ALL;
  v12 = "CallbackSerializerAttribute";
  v3 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(v2 + 200, &v11);
  if (v3)
  {
    v4 = *v3;
    re::StringID::destroyString((re::StringID *)&v11);
    if (v2)
    {
      v5 = *(_QWORD *)(a1 + 208);
      v10[0] = v2;
      v10[1] = v4;
      re::TypeRegistry::attributesByAttributeType(v5, (uint64_t)v10, (uint64_t)&v11);
      if (v13)
      {
        v6 = a1 + 224;
        v7 = (uint64_t *)(v14 + 24);
        v8 = 48 * v13;
        do
        {
          v9 = *v7;
          v7 += 6;
          v16 = re::serializeIntrospectionCallbackSerializer<re::EncoderOPACK<re::FixedArrayInputStream>>;
          v15 = v9 | 0xFFFFFFFF00000000;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::addOrReplace<BOOL (*&)(re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL)>(v6, &v15, &v16);
          v8 -= 48;
        }
        while (v8);
      }
      if (v11)
      {
        if (v14)
          (*(void (**)(void))(*(_QWORD *)v11 + 40))();
      }
    }
  }
  else
  {
    re::StringID::destroyString((re::StringID *)&v11);
  }
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::doSerialize(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v14)(_DWORD *, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD v24[22];
  int v25;

  if (!a1[107] && a1[34] == 2)
  {
    v25 = 0;
    v22 = a4;
    re::TypeInfo::TypeInfo((uint64_t)&v23, (uint64_t)a5);
    re::TypeInfo::TypeInfo((uint64_t)v24, a6);
    v24[16] = 0;
    re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addNew((uint64_t)(a1 + 100), &v25, (uint64_t)&v22);
    a3 = 10;
  }
  v14 = (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(_DWORD *, re::TypeInfo *))(*(_QWORD *)a1 + 80))(a1, a5);
  if (v14)
    return v14(a1, a2, a3, a4, a5, a6, a7);
  v16 = re::TypeInfo::name(a5);
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, 0, "Failed to resolve serialize function for type \"%s\"", v17, v18, v19, v20, v21, v16[1]);
  return 0;
}

BOOL (*re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(uint64_t a1, const char *a2, uint64_t a3, char **a4, re::TypeInfo *this, const re::TypeInfo *a6, uint64_t a7)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 12) == 9)
    return re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::serializePointer;
  if (*(_QWORD *)a2 == *(_QWORD *)(a1 + 208))
  {
    LODWORD(v4) = **(_QWORD **)(a2 + 16);
    HIDWORD(v4) = -1;
    v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 224, &v4);
    if (v3)
      return *(BOOL (**)(uint64_t, const char *, uint64_t, char **, re::TypeInfo *, const re::TypeInfo *, uint64_t))v3;
  }
  return (BOOL (*)(uint64_t, const char *, uint64_t, char **, re::TypeInfo *, const re::TypeInfo *, uint64_t))re::serializeType<re::EncoderOPACK<re::FixedArrayInputStream>>;
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::SerializerV2(uint64_t a1, const StringID *a2)
{
  *(_QWORD *)a1 = &off_24ED2B400;
  re::StringID::StringID((re::StringID *)(a1 + 8), a2);
  re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::Encoder(a1 + 24, 12);
  *(_QWORD *)(a1 + 256) = 0x7FFFFFFF00000000;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)a1 = &off_24ED2B398;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_QWORD *)(a1 + 348) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 436) = 0x7FFFFFFFLL;
  return a1;
}

_QWORD *re::NetworkSerializerBase<re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>>::~NetworkSerializerBase(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED2B398;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(a1 + 400));
  v3 = *(_QWORD *)(a1 + 360);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 392))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    ++*(_DWORD *)(a1 + 384);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 312));
  v5 = *(_QWORD *)(a1 + 272);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 304))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    ++*(_DWORD *)(a1 + 296);
  }
  return re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer((_QWORD *)a1);
}

void re::NetworkSerializerBase<re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>>::~NetworkSerializerBase(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED2B398;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(a1 + 400));
  v3 = *(_QWORD *)(a1 + 360);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 392))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    ++*(_DWORD *)(a1 + 384);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 312));
  v5 = *(_QWORD *)(a1 + 272);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 304))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    ++*(_DWORD *)(a1 + 296);
  }
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer((_QWORD *)a1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::~SerializerV2(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED2B398;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(a1 + 400));
  v3 = *(_QWORD *)(a1 + 360);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 392))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    ++*(_DWORD *)(a1 + 384);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 312));
  v5 = *(_QWORD *)(a1 + 272);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 304))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    ++*(_DWORD *)(a1 + 296);
  }
  return re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer((_QWORD *)a1);
}

void re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::~SerializerV2(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED2B398;
  v2 = re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(a1 + 400));
  v3 = *(_QWORD *)(a1 + 360);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 392))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v3 + 40))(v3, v2);
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_QWORD *)(a1 + 360) = 0;
    ++*(_DWORD *)(a1 + 384);
  }
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(a1 + 312));
  v5 = *(_QWORD *)(a1 + 272);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 304))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4);
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 272) = 0;
    ++*(_DWORD *)(a1 + 296);
  }
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer((_QWORD *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SerializerV2<re::EncoderOPACK<re::FixedArrayInputStream>>::doOpen(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(a1 + 288) = 0;
  ++*(_DWORD *)(a1 + 296);
  re::HashTable<void *,unsigned int,re::Hash<void *>,re::EqualTo<void *>,true,false>::clear(a1 + 312);
  *(_QWORD *)(a1 + 376) = 0;
  ++*(_DWORD *)(a1 + 384);
  re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::clear(a1 + 400);
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginObject(a1 + 24, "container", 0, 0);
  if ((result & 1) == 0 && !*(_BYTE *)(a1 + 64))
    return re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, "container", "Failed to open container.", v11, v12, v13, v14, v15, a9);
  return result;
}

void re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer(_QWORD *a1)
{
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::doSerialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, re::TypeInfo *a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t);
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, re::TypeInfo *, uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, re::TypeInfo *))(*(_QWORD *)a1 + 80))(a1, a5);
  if (v14)
    return v14(a1, a2, a3, a4, a5, a6, a7);
  v16 = re::TypeInfo::name(a5);
  re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v17, v18, v19, v20, v21, v16[1]);
  return 0;
}

uint64_t (*re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::doResolveSerializeFunc(uint64_t a1, uint64_t a2))(_BYTE *a1, const char *a2, const re::TypeInfo *a3, void *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)a2 == *(_QWORD *)(a1 + 208)
    && (LODWORD(v4) = **(_QWORD **)(a2 + 16),
        HIDWORD(v4) = -1,
        (v3 = re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::tryGet(a1 + 224, &v4)) != 0))
  {
    return *(uint64_t (**)(_BYTE *, const char *, const re::TypeInfo *, void *, re::TypeInfo *, uint64_t, uint64_t, uint64_t))v3;
  }
  else
  {
    return re::serializeType<re::EncoderOPACK<re::FixedArrayInputStream>>;
  }
}

uint64_t re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::Encoder(uint64_t result, int a2)
{
  __objc2_class_ro **p_info;
  unsigned __int8 v3;
  __objc2_class_ro *v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[4];
  int v11;

  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_DWORD *)(result + 136) = a2;
  *(_BYTE *)(result + 140) = 0;
  *(_QWORD *)(result + 152) = 1024;
  p_info = VideoSpillMapMetalSession.info;
  if ((v3 & 1) == 0)
  {
    v9 = result;
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    v7 = v5;
    result = v9;
    if (v7)
    {
      re::Defaults::intValue((re::Defaults *)"maxSerializationDepth", v6, (uint64_t)v10);
      v8 = v11;
      if (!v10[0])
        v8 = 0;
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::Encoder(int)::s_maxSerializationDepth = v8;
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
      result = v9;
    }
  }
  v4 = p_info[492];
  if (v4)
    *(_QWORD *)(result + 152) = v4;
  return result;
}

_QWORD *re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::~Serializer(_QWORD *a1)
{
  *a1 = &off_24ED2B400;
  if (a1[26])
  {
    re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear((uint64_t)(a1 + 28));
    a1[26] = 0;
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit(a1 + 28);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::~Encoder((uint64_t)(a1 + 3));
  re::StringID::destroyString((re::StringID *)(a1 + 1));
  return a1;
}

void re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_396, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(uint64_t a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _BYTE *v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  _BYTE v17[23];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21[3];
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  v22 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v23, a3, &a9);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels((_anonymous_namespace_ *)(a1 + 24), a2, (re::DynamicString *)&v15);
  if ((v16 & 1) != 0)
    v12 = *(_BYTE **)&v17[7];
  else
    v12 = v17;
  if ((v24 & 1) != 0)
    v13 = v25;
  else
    v13 = (char *)&v24 + 1;
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v18, "deserialize", v12, v13);
  *(_QWORD *)&v21[0] = 400;
  *((_QWORD *)&v21[0] + 1) = &re::FoundationErrorCategory(void)::instance;
  *(_QWORD *)&v21[1] = v18;
  *((_QWORD *)&v21[2] + 1) = v20;
  *(__int128 *)((char *)&v21[1] + 8) = v19;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1 + 24, v21);
  if (*(_QWORD *)&v21[1])
  {
    if ((BYTE8(v21[1]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v21[1] + 40))();
    memset(&v21[1], 0, 32);
  }
  if (v15 && (v16 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  result = (uint64_t)v23;
  if (v23)
  {
    if ((v24 & 1) != 0)
      return (*(uint64_t (**)(void))(*v23 + 40))();
  }
  return result;
}

uint64_t re::serializeType<re::EncoderOPACK<re::FixedArrayInputStream>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, void *a4, re::TypeInfo *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **Instance;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t *v53[4];
  _BYTE v54[24];
  uint64_t v55;
  char v56;
  _BYTE v57[23];
  unsigned __int8 v58[8];
  _BYTE v59[32];

  if (this != (re::TypeInfo *)a6)
  {
    if (*(_QWORD *)this == *(_QWORD *)a6)
    {
      v15 = **((_QWORD **)this + 2);
      v16 = **(_QWORD **)(a6 + 16);
      if ((unsigned __int16)v15 == (unsigned __int16)v16)
      {
        v18 = WORD1(v15) == WORD1(v16);
        v17 = (v16 ^ v15) & 0xFFFFFF00000000;
        v18 = v18 && v17 == 0;
        if (v18)
          goto LABEL_19;
      }
    }
    else if (re::areSameTranslatedVersion(this, (const re::TypeInfo *)a6, a3))
    {
      goto LABEL_19;
    }
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      v19 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
      if (v19)
        v20 = *(_DWORD *)(v19 + 16);
      else
        v20 = -1;
      v21 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **(_QWORD **)(a6 + 16));
      if (v21)
        v22 = *(_DWORD *)(v21 + 16);
      else
        v22 = -1;
      if (v20 == v22)
        goto LABEL_19;
      v24 = re::TypeInfo::name(this);
      v25 = re::TypeInfo::name((re::TypeInfo *)a6);
      if (re::StringID::operator==(v24, v25))
      {
        v26 = re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **(_QWORD **)(a6 + 16));
        if (v26)
          v27 = *(_DWORD *)(v26 + 16);
        else
          v27 = -1;
        re::TypeInfo::atVersion(this, v27, v58);
        if (v58[0])
        {
          if ((a7 & 1) != 0)
            Instance = 0;
          else
            Instance = re::TypeInfo::createInstance((re::TypeInfo *)v59, *((re::Allocator **)a1 + 6), *((void **)a1 + 25));
          if (a1[64]
            || ((*(void (**)(_BYTE *, const char *, const re::TypeInfo *, void **, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, Instance, v59, a6, a7), a1[64]))
          {
            if (Instance)
              re::TypeInfo::releaseInstance((re::TypeInfo *)v59, Instance, *((re::Allocator **)a1 + 6), *((void **)a1 + 25));
          }
          else
          {
            if ((a7 & 1) != 0)
              return 1;
            re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v59);
            re::internal::upgradeObject(Instance, v53, a4, (uint64_t **)this, *((re::Allocator **)a1 + 6), *((void **)a1 + 25), v54);
            if (v54[0])
              return 1;
            if ((v56 & 1) != 0)
              LOBYTE(v51) = v57[7];
            else
              v51 = v57;
            re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, a2, "%s", v46, v47, v48, v49, v50, (char)v51);
            if (!v54[0] && v55 && (v56 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v55 + 40))();
          }
        }
        else
        {
          v35 = re::TypeInfo::name((re::TypeInfo *)a6)[1];
          re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **(_QWORD **)(a6 + 16));
          re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, a2, "Unknown serialized type \"%s\" version %u. No matching runtime type found.", v41, v42, v43, v44, v45, v35);
        }
      }
      else
      {
        v33 = re::TypeInfo::name((re::TypeInfo *)a6)[1];
        re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)a6 + 96, **(_QWORD **)(a6 + 16));
        re::TypeInfo::name(this);
        re::DataArray<re::TextureAtlasTile>::tryGet(*(_QWORD *)this + 96, **((_QWORD **)this + 2));
        re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, a2, "Type name changed: Serialized type \"%s\" version %u, runtime type \"%s\" version %u.", v36, v37, v38, v39, v40, v33);
      }
    }
    else
    {
      re::internal::setTypeMismatchError<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, this, (re::TypeInfo *)a6);
    }
    return 0;
  }
LABEL_19:
  switch(*((_BYTE *)this + 12))
  {
    case 1:
      result = re::serializeBasic<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, (__int16 *)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 2:
      result = re::serializeEnum<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, a4, (uint64_t)this, a6, a7);
      break;
    case 3:
      result = re::serializeOptional<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 4:
      result = re::serializeArray<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a3, (char *)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 5:
      result = re::serializeList<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 6:
      result = re::serializeDictionary<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, (uint64_t)a4, this, (const re::TypeInfo *)a6, a7);
      break;
    case 7:
      result = re::serializeUnion<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a3, (char *)a4, this, (re::TypeInfo *)a6, a7);
      break;
    case 8:
      result = re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)a4, this, a6, a7);
      break;
    case 9:
      v52 = re::TypeInfo::name(this)[1];
      re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, a2, "Pointer type (\"%s\") needs to be handled explicitly by the serializer.", v28, v29, v30, v31, v32, v52);
      return 0;
    default:
      re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, a2, "Invalid type category. Value = %d", (uint64_t)a4, (uint64_t)this, a6, a7, a8, *((_BYTE *)this + 12));
      return 0;
  }
  return result;
}

uint64_t re::internal::setTypeMismatchError<re::EncoderOPACK<re::FixedArrayInputStream>>(uint64_t a1, const char *a2, re::TypeInfo *this, re::TypeInfo *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = re::TypeInfo::name(this)[1];
  re::TypeInfo::name(a4);
  return re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, a2, "Type mismatch. Runtime type \"%s\" and serialized type \"%s\" are different.", v8, v9, v10, v11, v12, v7);
}

uint64_t re::serializeBasic<re::EncoderOPACK<re::FixedArrayInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, __int16 *a4, re::TypeInfo *this, const re::TypeInfo *a6, char a7)
{
  int v10;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = (int)a3;
  if (this != a6)
  {
    if (*(_QWORD *)this != *(_QWORD *)a6)
    {
      if (re::areSameTranslatedVersion(this, a6, a3))
        goto LABEL_4;
LABEL_19:
      re::internal::setTypeMismatchError<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, this, a6);
      return 0;
    }
    v18 = **((_QWORD **)this + 2);
    v19 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v18 != (unsigned __int16)v19)
      goto LABEL_19;
    v21 = WORD1(v18) == WORD1(v19);
    v20 = (v19 ^ v18) & 0xFFFFFF00000000;
    v21 = v21 && v20 == 0;
    if (!v21)
      goto LABEL_19;
  }
LABEL_4:
  v14 = re::TypeInfo::name(this);
  v15 = (unint64_t)*v14 >> 1;
  if (v15 > 0xCA3DEFB5)
  {
    if ((unint64_t)*v14 >> 1 > 0x18E6A9A092)
    {
      if ((unint64_t)*v14 >> 1 <= 0x303EE8780EDLL)
      {
        if (v15 != 0x18E6A9A093)
        {
          if (v15 == 0x303EE86A734)
            return re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned short>(a1 + 24, a2, v10, a4, a7);
          goto LABEL_47;
        }
        return re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned char>(a1 + 24, a2, v10, (char *)a4, a7);
      }
      if (v15 == 0x303EE8780EELL)
        return re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned int>(a1 + 24, a2, v10, (int *)a4, a7);
      if (v15 != 0x303EE88E58DLL)
        goto LABEL_47;
    }
    else
    {
      if ((unint64_t)*v14 >> 1 > 0x16749DFF02)
      {
        if (v15 == 0x16749DFF03)
          return re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<int>(a1 + 24, a2, v10, (int *)a4, a7);
        v22 = 0x16749F63A2;
        goto LABEL_34;
      }
      if (v15 != 3393056694)
      {
        v17 = 0x16749D2549;
        goto LABEL_24;
      }
    }
    return re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned long long>(a1 + 24, a2, v10, (char *)a4, a7);
  }
  if ((unint64_t)*v14 >> 1 <= 0x5D0225B)
  {
    if ((unint64_t)*v14 >> 1 <= 0x2E9355)
    {
      if (v15 != 104431)
      {
        if (v15 == 3029738)
          return re::EncoderOPACK<re::FixedArrayInputStream>::serializeBool(a1 + 24, a2, v10, a4, a7);
        goto LABEL_47;
      }
      return re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<int>(a1 + 24, a2, v10, (int *)a4, a7);
    }
    if (v15 != 3052374)
    {
      v22 = 3327612;
LABEL_34:
      if (v15 == v22)
        return re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<long long>(a1 + 24, a2, v10, a4, a7);
LABEL_47:
      v23 = re::TypeInfo::name(this);
      re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, a2, "Unsupported basic type \"%s\".", v24, v25, v26, v27, v28, v23[1]);
      return 0;
    }
    return re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<signed char>(a1 + 24, a2, v10, (char *)a4, a7);
  }
  if ((unint64_t)*v14 >> 1 > 0xB0F77BD0)
  {
    if (v15 != 2969009105)
    {
      if (v15 != 3111160798)
        goto LABEL_47;
      return re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<signed char>(a1 + 24, a2, v10, (char *)a4, a7);
    }
    return re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(a1 + 24, a2, v10, (char *)a4, a7);
  }
  else
  {
    if (v15 != 97526364)
    {
      v17 = 109413500;
LABEL_24:
      if (v15 == v17)
        return re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<short>(a1 + 24, a2, v10, a4, a7);
      goto LABEL_47;
    }
    return re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat(a1 + 24, a2, v10, (char *)a4, a7);
  }
}

uint64_t re::serializeEnum<re::EncoderOPACK<re::FixedArrayInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, void *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19;

  if (a5 == a6)
    return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a3, a4, (re::internal *)a5, (re::internal *)a6, a7);
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **(_QWORD **)(a5 + 16);
    v15 = **(_QWORD **)(a6 + 16);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a3, a4, (re::internal *)a5, (re::internal *)a6, a7);
    }
  }
  else if (re::areSameTranslatedVersion((re *)a5, (const re::TypeInfo *)a6, a3))
  {
    return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a3, a4, (re::internal *)a5, (re::internal *)a6, a7);
  }
  if (*(unsigned __int8 *)(a5 + 12) == *(unsigned __int8 *)(a6 + 12))
  {
    v18 = re::TypeInfo::name((re::TypeInfo *)a5);
    v19 = re::TypeInfo::name((re::TypeInfo *)a6);
    if (re::StringID::operator==(v18, v19))
      return re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a3, a4, (re::internal *)a5, (re::internal *)a6, a7);
  }
  re::internal::setTypeMismatchError<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, (re::TypeInfo *)a5, (re::TypeInfo *)a6);
  return 0;
}

BOOL re::serializeOptional<re::EncoderOPACK<re::FixedArrayInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  re::internal *v18;
  _anonymous_namespace_ *v19;
  double v20;
  void **Instance;
  uint64_t v23;
  BOOL v24;
  _BYTE v25[32];
  _BYTE v26[32];
  _BYTE v27[8];
  uint64_t v28;
  uint64_t v29;

  v11 = (int)a3;
  if (a5 == a6)
    goto LABEL_11;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_11;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (a7)
  {
    v25[0] = 0;
    re::EncoderOPACK<re::FixedArrayInputStream>::beginOptional(a1 + 24, a2, v11, v25, 0);
    if (v25[0])
    {
      v18 = *(re::internal **)(a1 + 208);
      re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), v27);
      re::TypeInfo::TypeInfo((uint64_t)v26, (uint64_t)&v28);
      re::internal::translateType(v18, (const re::TypeRegistry *)v26, (uint64_t)v27);
      if (!*(_BYTE *)(a1 + 64))
        (*(void (**)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, 0, 0, v27, v27, 1);
    }
    v19 = (_anonymous_namespace_ *)(a1 + 24);
  }
  else
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), v27);
    re::TypeInfo::TypeInfo((uint64_t)v26, (uint64_t)&v28);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), v27);
    re::TypeInfo::TypeInfo((uint64_t)v25, (uint64_t)&v28);
    re::TypeInfo::TypeInfo((uint64_t)v27, (uint64_t)a5);
    v24 = (*(uint64_t (**)(uint64_t))(v29 + 80))(a4) != 0;
    v20 = re::EncoderOPACK<re::FixedArrayInputStream>::beginOptional(a1 + 24, a2, v11, &v24, 0);
    if (v24)
    {
      Instance = re::TypeInfo::createInstance((re::TypeInfo *)v26, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 200));
      (*(void (**)(uint64_t, void **))(v29 + 88))(a4, Instance);
      re::TypeInfo::releaseInstance((re::TypeInfo *)v26, Instance, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 200));
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, double))(v29 + 88))(a4, 0, v20);
    }
    if (v24)
    {
      v23 = (*(uint64_t (**)(uint64_t))(v29 + 80))(a4);
      if (!*(_BYTE *)(a1 + 64))
        (*(void (**)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a2, 0, v23, v26, v25, 0);
    }
    v19 = (_anonymous_namespace_ *)(a1 + 24);
  }
  re::EncoderOPACK<re::FixedArrayInputStream>::endOptional(v19);
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::serializeArray<re::EncoderOPACK<re::FixedArrayInputStream>>(_BYTE *a1, const char *a2, const re::TypeInfo *a3, char *a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  re::internal *v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t);
  _QWORD *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(_BYTE *, _QWORD, _QWORD, uint64_t, _BYTE *, uint64_t *, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t result;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _anonymous_namespace_ *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  _anonymous_namespace_ *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const re::TypeInfo *v52;
  BOOL v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unint64_t v60;
  BOOL v61;
  char v62;
  unint64_t v63;
  _QWORD v64[2];
  unint64_t v65;
  const re::TypeInfo *v66;
  _QWORD v67[2];
  uint64_t v68[4];
  _BYTE v69[12];
  char v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE v73[32];

  v11 = (int)a3;
  if (a5 == a6)
    goto LABEL_13;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_13;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_13;
  }
  if (*((_BYTE *)a6 + 12) != 4)
    goto LABEL_71;
  v18 = (_QWORD *)*((_QWORD *)a5 + 2);
  v19 = (_QWORD *)*((_QWORD *)a6 + 2);
  v20 = *((_DWORD *)v19 + 21) & 0xFFFFFF;
  if ((*((_DWORD *)v18 + 21) & 0xFFFFFF) != 0)
  {
    if (v20)
      goto LABEL_13;
LABEL_71:
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::FixedArrayInputStream>>((uint64_t)a1, a2, a5, a6);
    return 0;
  }
  if (v20 || *((_DWORD *)v18 + 22) != *((_DWORD *)v19 + 22))
    goto LABEL_71;
LABEL_13:
  if (a7)
  {
    v21 = (re::internal *)*((_QWORD *)a1 + 26);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v72);
    re::TypeInfo::TypeInfo((uint64_t)v68, (uint64_t)v73);
    re::internal::translateType(v21, (const re::TypeRegistry *)v68, (uint64_t)v69);
    v22 = (*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v69);
    if (v22)
    {
      v23 = (void (*)(_BYTE *, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))v22;
      v24 = (_QWORD *)*((_QWORD *)a6 + 2);
      v25 = *((_DWORD *)v24 + 21) & 0xFFFFFF;
      if (v25)
        v26 = 0;
      else
        v26 = *((int *)v24 + 22);
      v72 = v26;
      if (v70 == 1)
      {
        v68[0] = v26 * *(unsigned int *)(v71 + 8);
        v58 = re::EncoderOPACK<re::FixedArrayInputStream>::beginBLOB((uint64_t)(a1 + 24), a2, v11, v68, 0);
        result = 0;
        if (!v58)
          return result;
        if (v68[0])
          re::EncoderOPACK<re::FixedArrayInputStream>::serializeBLOB((uint64_t)(a1 + 24), 0, 1);
        v39 = (_anonymous_namespace_ *)(a1 + 24);
        goto LABEL_49;
      }
      if (v25)
        v59 = 8;
      else
        v59 = 4;
      v48 = (_anonymous_namespace_ *)(a1 + 24);
      result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray((uint64_t)(a1 + 24), a2, v11, (char *)&v72, v59);
      if ((_DWORD)result)
      {
        v60 = v72;
        if (v25)
          v61 = v72 == 0;
        else
          v61 = 1;
        v62 = v61;
        if (!v61)
        {
          v67[0] = 0;
          v67[1] = 0xFFFFFFFFLL;
          (*(void (**)(_BYTE *, _QWORD, _QWORD *))(*(_QWORD *)a1 + 16))(a1, 0, v67);
          v60 = v72;
        }
        if (v60)
        {
          v63 = 0;
          do
          {
            v23(a1, 0, 0, 0, v69, v69, 1);
            ++v63;
          }
          while (v63 < v72);
        }
        if ((v62 & 1) != 0)
          goto LABEL_67;
        goto LABEL_66;
      }
      return result;
    }
    goto LABEL_24;
  }
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &v72);
  re::TypeInfo::TypeInfo((uint64_t)v69, (uint64_t)v73);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v72);
  re::TypeInfo::TypeInfo((uint64_t)v68, (uint64_t)v73);
  re::TypeInfo::TypeInfo((uint64_t)&v72, (uint64_t)a5);
  v27 = (*(uint64_t (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v69);
  if (!v27)
  {
LABEL_24:
    v40 = re::TypeInfo::name((re::TypeInfo *)v69);
    re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError((uint64_t)a1, 0, "Failed to resolve serialize function for type \"%s\"", v41, v42, v43, v44, v45, v40[1]);
    return 0;
  }
  v28 = (void (*)(_BYTE *, _QWORD, _QWORD, uint64_t, _BYTE *, uint64_t *, _QWORD))v27;
  v29 = re::ArrayAccessor::size((re::ArrayAccessor *)&v72, a4);
  v30 = v29;
  v66 = (const re::TypeInfo *)v29;
  if (v70 == 1)
  {
    v65 = v29 * *(unsigned int *)(v71 + 8);
    v34 = re::EncoderOPACK<re::FixedArrayInputStream>::beginBLOB((uint64_t)(a1 + 24), a2, v11, (uint64_t *)&v65, 0);
    result = 0;
    if (v34)
    {
      v36 = v65;
      v37 = *(unsigned int *)(v71 + 8);
      if ((_DWORD)result)
      {
        if (v36 >= v37)
        {
          v38 = (char *)re::ArrayAccessor::elementAt((re::ArrayAccessor *)&v72, a4, 0);
          re::EncoderOPACK<re::FixedArrayInputStream>::serializeBLOB((uint64_t)(a1 + 24), v38, 0);
        }
        v39 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_49:
        re::EncoderOPACK<re::FixedArrayInputStream>::endBLOB(v39);
        return a1[64] == 0;
      }
    }
  }
  else
  {
    v46 = *(_DWORD *)(*((_QWORD *)a5 + 2) + 84) & 0xFFFFFF;
    if (v46)
      v47 = 8;
    else
      v47 = 4;
    v48 = (_anonymous_namespace_ *)(a1 + 24);
    result = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray((uint64_t)(a1 + 24), a2, v11, (char *)&v66, v47);
    if ((_DWORD)result)
    {
      if ((_DWORD)result)
      {
        v52 = v66;
        if (v46)
          v53 = v66 == 0;
        else
          v53 = 1;
        v54 = v53;
        if (!v53)
        {
          v55 = *(_QWORD *)a4;
          v64[0] = 0;
          v64[1] = 0xFFFFFFFFLL;
          (*(void (**)(_BYTE *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v55, v64);
          v52 = v66;
        }
        if (v52)
        {
          v56 = 0;
          do
          {
            v57 = re::ArrayAccessor::elementAt((re::ArrayAccessor *)&v72, a4, v56);
            v28(a1, 0, 0, v57, v69, v68, 0);
            ++v56;
          }
          while (v56 < (unint64_t)v66);
        }
        if ((v54 & 1) != 0)
          goto LABEL_67;
LABEL_66:
        (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1);
LABEL_67:
        re::EncoderOPACK<re::FixedArrayInputStream>::endArray(v48);
        return a1[64] == 0;
      }
    }
  }
  return result;
}

uint64_t re::serializeList<re::EncoderOPACK<re::FixedArrayInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  re::internal *v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  _anonymous_namespace_ *v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *, uint64_t *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t j;
  uint64_t v43;
  _anonymous_namespace_ *v44;
  void (*v45)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t);
  int v46;
  unint64_t i;
  uint64_t (*v48)(uint64_t, _QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[4];
  unint64_t v60;
  uint64_t v61[4];
  _BYTE v62[12];
  char v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v11 = (int)a3;
  if (a5 == a6)
    goto LABEL_11;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_11;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (a7)
  {
    v18 = *(re::internal **)(a1 + 208);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v65);
    re::TypeInfo::TypeInfo((uint64_t)v61, (uint64_t)&v66);
    re::internal::translateType(v18, (const re::TypeRegistry *)v61, (uint64_t)v62);
    v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v62);
    if (v19)
    {
      v65 = 0;
      if (v63 == 1)
      {
        v61[0] = 0;
        v20 = re::EncoderOPACK<re::FixedArrayInputStream>::beginBLOB(a1 + 24, a2, v11, v61, 0);
        result = 0;
        if (!v20)
          return result;
        if (v61[0])
          re::EncoderOPACK<re::FixedArrayInputStream>::serializeBLOB(a1 + 24, 0, 1);
        v22 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_18:
        re::EncoderOPACK<re::FixedArrayInputStream>::endBLOB(v22);
        return *(_BYTE *)(a1 + 64) == 0;
      }
      v45 = (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))v19;
      v46 = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, v11, (char *)&v65, 0);
      result = 0;
      if (!v46)
        return result;
      if (v65)
      {
        for (i = 0; i < v65; ++i)
          v45(a1, 0, 0, 0, v62, v62, 1);
      }
      v44 = (_anonymous_namespace_ *)(a1 + 24);
LABEL_45:
      re::EncoderOPACK<re::FixedArrayInputStream>::endArray(v44);
      return *(_BYTE *)(a1 + 64) == 0;
    }
    goto LABEL_29;
  }
  re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &v65);
  re::TypeInfo::TypeInfo((uint64_t)v62, (uint64_t)&v66);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v65);
  re::TypeInfo::TypeInfo((uint64_t)v61, (uint64_t)&v66);
  re::TypeInfo::TypeInfo((uint64_t)&v65, (uint64_t)a5);
  v23 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v62);
  if (!v23)
  {
LABEL_29:
    v57 = re::TypeInfo::name((re::TypeInfo *)v62)[1];
    re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v36, v37, v38, v39, v40, v57);
    return 0;
  }
  v24 = (void (*)(uint64_t, _QWORD, _QWORD, uint64_t, _BYTE *, uint64_t *, _QWORD))v23;
  v25 = (*(uint64_t (**)(uint64_t))(v67 + 80))(a4);
  v26 = v25;
  v60 = v25;
  if (*((_BYTE *)a5 + 12) == 5 && (*(_BYTE *)(*((_QWORD *)a5 + 2) + 48) & 8) != 0 && v63 == 1)
  {
    v59[0] = v25 * *(unsigned int *)(v64 + 8);
    v31 = re::EncoderOPACK<re::FixedArrayInputStream>::beginBLOB(a1 + 24, a2, v11, v59, 0);
    result = 0;
    if (!v31)
      return result;
    v32 = v59[0];
    v33 = *(unsigned int *)(v64 + 8);
    v34 = v59[0] / v33;
    if (v59[0] / v33 * v33 == v59[0])
    {
      if (!(_DWORD)result)
        return result;
      if (v32 >= v33)
      {
        v35 = (char *)(*(uint64_t (**)(uint64_t, _QWORD))(v67 + 96))(a4, 0);
        re::EncoderOPACK<re::FixedArrayInputStream>::serializeBLOB(a1 + 24, v35, 0);
      }
      v22 = (_anonymous_namespace_ *)(a1 + 24);
      goto LABEL_18;
    }
    re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError((_anonymous_namespace_ *)(a1 + 24), a2, "BLOB size mismatch: BLOB is %zu bytes, but list only accomodates %zu bytes (%zu elements * %zu bytes/element)", v27, v34, v28, v29, v30, v59[0]);
    return 0;
  }
  v41 = re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(a1 + 24, a2, v11, (char *)&v60, 0);
  result = 0;
  if (v41)
  {
    if ((_DWORD)result)
    {
      if (*(_QWORD *)(v67 + 96))
      {
        if (v60)
        {
          for (j = 0; j < v60; ++j)
          {
            v43 = (*(uint64_t (**)(uint64_t, unint64_t))(v67 + 96))(a4, j);
            v24(a1, 0, 0, v43, v62, v61, 0);
          }
        }
      }
      else
      {
        v48 = *(uint64_t (**)(uint64_t, _QWORD))(v67 + 104);
        if (!v48 || !*(_QWORD *)(v67 + 112) || !*(_QWORD *)(v67 + 120))
        {
          re::TypeInfo::TypeInfo((uint64_t)v59, (uint64_t)&v65);
          v58 = re::TypeInfo::name((re::TypeInfo *)v59)[1];
          re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, a2, "List type \"%s\" does not provide an indexer or iterator.", v52, v53, v54, v55, v56, v58);
          return 0;
        }
        v49 = v48(a4, *(_QWORD *)(a1 + 56));
        v50 = (*(uint64_t (**)(void))(v67 + 112))();
        if (v50)
        {
          v51 = v50;
          do
          {
            v24(a1, 0, 0, v51, v62, v61, 0);
            v51 = (*(uint64_t (**)(uint64_t))(v67 + 112))(v49);
          }
          while (v51);
        }
        (*(void (**)(uint64_t, _QWORD))(v67 + 120))(v49, *(_QWORD *)(a1 + 56));
      }
      v44 = (_anonymous_namespace_ *)(a1 + 24);
      goto LABEL_45;
    }
  }
  return result;
}

BOOL re::serializeDictionary<re::EncoderOPACK<re::FixedArrayInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, uint64_t a4, re *a5, const re::TypeInfo *a6, int a7)
{
  int v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  re::internal *v18;
  re::internal *v19;
  uint64_t v20;
  void (*v21)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t, double);
  uint64_t v22;
  void (*v23)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t);
  _anonymous_namespace_ *v24;
  int v25;
  _BOOL8 result;
  unint64_t i;
  double v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, _QWORD, void **, _BYTE *, _BYTE *, _QWORD, double);
  uint64_t v31;
  void (*v32)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD);
  int v33;
  uint64_t v34;
  void (*v35)(uint64_t, unint64_t *, uint64_t);
  void **Instance;
  uint64_t v37;
  double v38;
  re::Allocator *v39;
  uint64_t v40;
  re::TypeInfo *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE v49[16];
  uint64_t v50;
  _BYTE v51[32];
  _BYTE v52[32];
  _BYTE v53[32];
  _BYTE v54[32];
  unint64_t v55;
  _BYTE v56[32];

  v11 = (int)a3;
  if (a5 == a6)
    goto LABEL_11;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v14 = **((_QWORD **)a5 + 2);
    v15 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v14 == (unsigned __int16)v15)
    {
      v17 = WORD1(v14) == WORD1(v15);
      v16 = (v15 ^ v14) & 0xFFFFFF00000000;
      v17 = v17 && v16 == 0;
      if (v17)
        goto LABEL_11;
    }
  }
  else if (re::areSameTranslatedVersion(a5, a6, a3))
  {
    goto LABEL_11;
  }
  if (*((unsigned __int8 *)a5 + 12) != *((unsigned __int8 *)a6 + 12))
  {
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a5, a6);
    return 0;
  }
LABEL_11:
  if (!a7)
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &v55);
    re::TypeInfo::TypeInfo((uint64_t)v54, (uint64_t)v56);
    re::TypeRegistry::typeInfo(*(_QWORD **)a5, *(_QWORD *)(*((_QWORD *)a5 + 2) + 80), &v55);
    re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v55);
    re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v55);
    re::TypeInfo::TypeInfo((uint64_t)v51, (uint64_t)v56);
    re::TypeInfo::TypeInfo((uint64_t)v49, (uint64_t)a5);
    v29 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v54);
    if (v29)
    {
      v30 = (void (*)(uint64_t, const char *, _QWORD, void **, _BYTE *, _BYTE *, _QWORD, double))v29;
      v31 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v53);
      if (v31)
      {
        v32 = (void (*)(uint64_t, const char *, _QWORD, uint64_t, _BYTE *, _BYTE *, _QWORD))v31;
        v48 = (*(uint64_t (**)(uint64_t))(v50 + 88))(a4);
        v24 = (_anonymous_namespace_ *)(a1 + 24);
        v33 = re::EncoderOPACK<re::FixedArrayInputStream>::beginDictionary(a1 + 24, a2, v11, (char *)&v48, 0);
        result = 0;
        if (!v33)
          return result;
        v34 = *(_QWORD *)(a1 + 48);
        v35 = *(void (**)(uint64_t, unint64_t *, uint64_t))(v50 + 96);
        re::TypeInfo::TypeInfo((uint64_t)&v55, (uint64_t)v49);
        v35(a4, &v55, v34);
        if (v48)
        {
          Instance = re::TypeInfo::createInstance((re::TypeInfo *)v54, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 200));
          if (v48)
          {
            v37 = 0;
            while (1)
            {
              v38 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionaryEntry(a1 + 24, 0);
              v30(a1, "key", 0, Instance, v54, v52, 0, v38);
              v39 = *(re::Allocator **)(a1 + 48);
              if (*(_BYTE *)(a1 + 64))
                break;
              v40 = (*(uint64_t (**)(uint64_t, _BYTE *, re::Allocator *, void **))(v50 + 104))(a4, v49, v39, Instance);
              v32(a1, "value", 0, v40, v53, v51, 0);
              re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
              if (++v37 >= v48)
                goto LABEL_27;
            }
            re::TypeInfo::releaseInstance((re::TypeInfo *)v54, Instance, v39, *(void **)(a1 + 200));
            return 0;
          }
LABEL_27:
          re::TypeInfo::releaseInstance((re::TypeInfo *)v54, Instance, *(re::Allocator **)(a1 + 48), *(void **)(a1 + 200));
        }
LABEL_28:
        re::EncoderOPACK<re::FixedArrayInputStream>::endDictionary(v24);
        return *(_BYTE *)(a1 + 64) == 0;
      }
      goto LABEL_31;
    }
LABEL_29:
    v41 = (re::TypeInfo *)v54;
LABEL_32:
    v42 = re::TypeInfo::name(v41);
    re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, 0, "Failed to resolve serialize function for type \"%s\"", v43, v44, v45, v46, v47, v42[1]);
    return 0;
  }
  v18 = *(re::internal **)(a1 + 208);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v53, (uint64_t)v56);
  re::internal::translateType(v18, (const re::TypeRegistry *)v53, (uint64_t)v54);
  v19 = *(re::internal **)(a1 + 208);
  re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 80), &v55);
  re::TypeInfo::TypeInfo((uint64_t)v52, (uint64_t)v56);
  re::internal::translateType(v19, (const re::TypeRegistry *)v52, (uint64_t)v53);
  v20 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v54);
  if (!v20)
    goto LABEL_29;
  v21 = (void (*)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t, double))v20;
  v22 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v53);
  if (!v22)
  {
LABEL_31:
    v41 = (re::TypeInfo *)v53;
    goto LABEL_32;
  }
  v23 = (void (*)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))v22;
  v55 = 0;
  v24 = (_anonymous_namespace_ *)(a1 + 24);
  v25 = re::EncoderOPACK<re::FixedArrayInputStream>::beginDictionary(a1 + 24, a2, v11, (char *)&v55, 0);
  result = 0;
  if (v25)
  {
    if (v55)
    {
      for (i = 0; i < v55; ++i)
      {
        v28 = re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::beginDictionaryEntry(a1 + 24, 1);
        v21(a1, "key", 0, 0, v54, v54, 1, v28);
        v23(a1, "value", 0, 0, v53, v53, 1);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::endDictionaryEntry((_anonymous_namespace_ *)(a1 + 24));
      }
    }
    goto LABEL_28;
  }
  return result;
}

uint64_t re::serializeUnion<re::EncoderOPACK<re::FixedArrayInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, char *a4, re::TypeInfo *a5, re::TypeInfo *a6, int a7)
{
  int v11;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19[4];
  unint64_t Tag;
  _BYTE v21[32];

  v11 = (int)a3;
  if (a5 == a6)
    goto LABEL_4;
  if (*(_QWORD *)a5 == *(_QWORD *)a6)
  {
    v15 = **((_QWORD **)a5 + 2);
    v16 = **((_QWORD **)a6 + 2);
    if ((unsigned __int16)v15 == (unsigned __int16)v16)
    {
      v18 = WORD1(v15) == WORD1(v16);
      v17 = (v16 ^ v15) & 0xFFFFFF00000000;
      v18 = v18 && v17 == 0;
      if (v18)
        goto LABEL_4;
    }
LABEL_19:
    re::internal::setTypeMismatchError<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a2, a5, a6);
    return 0;
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
    goto LABEL_19;
LABEL_4:
  result = re::EncoderOPACK<re::FixedArrayInputStream>::beginObject(a1 + 24, a2, v11, 16);
  if (a7)
  {
    if (!(_DWORD)result)
      return result;
    v19[0] = 0;
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned long long>(a1 + 24, "tag", 0, (char *)v19, 0);
    if (v19[0] < *(unsigned int *)(*((_QWORD *)a6 + 2) + 88))
    {
      re::TypeInfo::unionMember(a6, v19[0], (uint64_t)v21);
      if (!*(_BYTE *)(a1 + 64))
        (*(void (**)(uint64_t, const char *, _QWORD, _QWORD, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 72))(a1, "value", 0, 0, v21, v21, 1);
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    re::TypeInfo::TypeInfo((uint64_t)v21, (uint64_t)a5);
    Tag = re::UnionAccessor::readTag((re::UnionAccessor *)v21, a4);
    re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned long long>(a1 + 24, "tag", 0, (char *)&Tag, 0);
    re::UnionAccessor::reset((re::UnionAccessor *)v21, a4, (const re::TypeInfo *)Tag, *(re::Allocator **)(a1 + 48));
    if (Tag < *(unsigned int *)(*((_QWORD *)a5 + 2) + 88))
    {
      re::TypeInfo::unionMember(a5, Tag, (uint64_t)v19);
      if (!*(_BYTE *)(a1 + 64))
        (*(void (**)(uint64_t, const char *, _QWORD, char *, unint64_t *, unint64_t *, _QWORD))(*(_QWORD *)a1 + 72))(a1, "value", 0, a4, v19, v19, 0);
    }
  }
  re::EncoderOPACK<re::FixedArrayInputStream>::endObject(a1 + 24);
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::serializeObject<re::EncoderOPACK<re::FixedArrayInputStream>>(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, re::TypeInfo *this, uint64_t a6, uint64_t a7)
{
  uint64_t *v14;
  const char *v15;
  const re::TypeInfo *v16;
  int v17;
  uint64_t result;
  re::TypeRegistry *v19;
  re *v20;
  const re::TypeInfo *v21;
  uint64_t v22;
  const char *v23;
  const re::TypeInfo *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  _BYTE v36[8];
  uint64_t v37;
  _BYTE v38[32];

  if (!(_DWORD)a7)
  {
LABEL_6:
    if ((*(_BYTE *)(*((_QWORD *)this + 2) + 48) & 4) != 0)
      return re::internal::serializeObjectWithOneMember<re::EncoderOPACK<re::FixedArrayInputStream>>((_BYTE *)a1, a2, a3, a4, (uint64_t *)this, (uint64_t *)a6, a7);
    v17 = re::EncoderOPACK<re::FixedArrayInputStream>::beginObject(a1 + 24, a2, a3, 0);
    result = 0;
    if (!v17)
      return result;
    if (this == (re::TypeInfo *)a6)
      goto LABEL_11;
    if (*(_QWORD *)this == *(_QWORD *)a6)
    {
      v25 = **((_QWORD **)this + 2);
      v26 = **(_QWORD **)(a6 + 16);
      if ((unsigned __int16)v25 == (unsigned __int16)v26)
      {
        v28 = WORD1(v25) == WORD1(v26);
        v27 = (v26 ^ v25) & 0xFFFFFF00000000;
        v28 = v28 && v27 == 0;
        if (v28)
          goto LABEL_11;
      }
    }
    else if (re::areSameTranslatedVersion(this, (const re::TypeInfo *)a6, v16))
    {
LABEL_11:
      re::internal::serializeMembersWithoutVersioning<re::EncoderOPACK<re::FixedArrayInputStream>>((_BYTE *)a1, a4, (uint64_t *)this, a7);
LABEL_24:
      re::EncoderOPACK<re::FixedArrayInputStream>::endObject(a1 + 24);
      return *(_BYTE *)(a1 + 64) == 0;
    }
    if (*((unsigned __int8 *)this + 12) == *(unsigned __int8 *)(a6 + 12))
    {
      re::internal::serializeMembersWithVersioning<re::EncoderOPACK<re::FixedArrayInputStream>>(a1, a4, (uint64_t *)this, (uint64_t *)a6, a7);
    }
    else
    {
      v29 = re::TypeInfo::name(this)[1];
      re::TypeInfo::name((re::TypeInfo *)a6);
      re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, 0, "Type categories of types \"%s\" (runtime) and \"%s\" (stream) don't match.", v30, v31, v32, v33, v34, v29);
    }
    goto LABEL_24;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 2) + 49) & 1) != 0)
  {
    v19 = *(re::TypeRegistry **)(a1 + 208);
    v35[0] = 0x2686EB529B3EE220;
    v35[1] = "DynamicString";
    re::TypeRegistry::typeInfo(v19, (const re::StringID *)v35, v36);
    re::TypeInfo::TypeInfo((uint64_t)v38, (uint64_t)&v37);
    re::StringID::destroyString((re::StringID *)v35);
    v20 = (re *)v38;
    v21 = (const re::TypeInfo *)v38;
    v22 = a1;
    v23 = a2;
    v24 = (const re::TypeInfo *)a3;
  }
  else
  {
    v14 = re::TypeInfo::name(this);
    if ((unint64_t)*v14 >> 1 != 0x134375A94D9F7110)
      goto LABEL_6;
    v15 = (const char *)v14[1];
    if (v15 != "DynamicString")
    {
      if (strcmp(v15, "DynamicString"))
        goto LABEL_6;
    }
    v22 = a1;
    v23 = a2;
    v24 = (const re::TypeInfo *)a3;
    v20 = this;
    v21 = this;
  }
  re::serializeDynamicString<re::EncoderOPACK<re::FixedArrayInputStream>>(v22, v23, v24, 0, v20, v21, 1);
  return *(_BYTE *)(a1 + 64) == 0;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeBool(uint64_t a1, const char *a2, int a3, _BYTE *a4, char a5)
{
  uint64_t result;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  unsigned __int8 __dst;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v18 = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v18, 0);
  if ((_DWORD)result)
  {
    __dst = 0;
    if (*(_BYTE *)(a1 + 40))
    {
LABEL_5:
      for (i = v18; i; --i)
        re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
      result = 1;
      if ((a5 & 2) == 0)
      {
        v11 = *(_QWORD *)(a1 + 128);
        v12 = *(_QWORD *)(a1 + 112) - 1;
        if (*(_BYTE *)(v11 + 48 * v12) != 2)
          ++*(_QWORD *)(v11 + 48 * v12 + 32);
      }
      return result;
    }
    v13 = *(_QWORD *)(a1 + 168);
    if (v13)
    {
      v14 = v13 - 1;
      v15 = *(unsigned __int8 *)(a1 + v14 + 160);
      __dst = *(_BYTE *)(a1 + v14 + 160);
      *(_QWORD *)(a1 + 168) = v14;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dst, 1uLL) & 1) == 0)
      {
        re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Boolean");
        goto LABEL_5;
      }
      v15 = __dst;
    }
    if (v15 == 2)
    {
      if ((a5 & 1) == 0)
        *a4 = 0;
    }
    else
    {
      if (v15 != 1)
      {
        v16 = re::OPACK::toString(v15);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)a1, (uint64_t)"Boolean", (uint64_t)v16);
        return 0;
      }
      if ((a5 & 1) == 0)
        *a4 = 1;
    }
    goto LABEL_5;
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeFloat(uint64_t a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t result;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  int64_t v20;
  size_t v21;
  const char *v22;
  char *v23;
  unsigned __int8 __dst;
  uint64_t v25;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v25 = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v25, 0);
  if ((_DWORD)result)
  {
    __dst = 0;
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_5;
    v13 = *(_QWORD *)(a1 + 168);
    if (v13)
    {
      v14 = v13 - 1;
      v15 = *(unsigned __int8 *)(a1 + v14 + 160);
      __dst = *(_BYTE *)(a1 + v14 + 160);
      *(_QWORD *)(a1 + 168) = v14;
    }
    else
    {
      if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dst, 1uLL))goto LABEL_31;
      v15 = __dst;
    }
    if (v15 != 53)
    {
      v22 = re::OPACK::toString(v15);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)a1, (uint64_t)"Float", (uint64_t)v22);
      return 0;
    }
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_5;
    v16 = *(_QWORD *)(a1 + 168);
    if (v16)
    {
      v17 = 4;
      if (v16 < 4)
        v17 = *(_QWORD *)(a1 + 168);
      v18 = v16 - v17;
      if ((uint64_t)(v16 - 1) >= (uint64_t)(v16 - v17))
      {
        v19 = *(_QWORD *)(a1 + 168);
        do
        {
          *a4++ = *(_BYTE *)(a1 + 159 + v19);
          v20 = v19 - 2;
          --v19;
        }
        while (v20 >= v18);
      }
      *(_QWORD *)(a1 + 168) = v18;
      if (v16 > 3)
        goto LABEL_5;
      v21 = 4 - v17;
    }
    else
    {
      v21 = 4;
    }
    if ((a5 & 1) != 0)
      v23 = 0;
    else
      v23 = a4;
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, v23, v21) & 1) != 0)
    {
LABEL_5:
      for (i = v25; i; --i)
        re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
      result = 1;
      if ((a5 & 2) == 0)
      {
        v11 = *(_QWORD *)(a1 + 128);
        v12 = *(_QWORD *)(a1 + 112) - 1;
        if (*(_BYTE *)(v11 + 48 * v12) != 2)
          ++*(_QWORD *)(v11 + 48 * v12 + 32);
      }
      return result;
    }
LABEL_31:
    re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Float");
    goto LABEL_5;
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeDouble(uint64_t a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t result;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  int64_t v20;
  size_t v21;
  const char *v22;
  char *v23;
  unsigned __int8 __dst;
  uint64_t v25;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v25 = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v25, 0);
  if ((_DWORD)result)
  {
    __dst = 0;
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_5;
    v13 = *(_QWORD *)(a1 + 168);
    if (v13)
    {
      v14 = v13 - 1;
      v15 = *(unsigned __int8 *)(a1 + v14 + 160);
      __dst = *(_BYTE *)(a1 + v14 + 160);
      *(_QWORD *)(a1 + 168) = v14;
    }
    else
    {
      if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dst, 1uLL))goto LABEL_31;
      v15 = __dst;
    }
    if (v15 != 54)
    {
      v22 = re::OPACK::toString(v15);
      re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)a1, (uint64_t)"Double", (uint64_t)v22);
      return 0;
    }
    if (*(_BYTE *)(a1 + 40))
      goto LABEL_5;
    v16 = *(_QWORD *)(a1 + 168);
    if (v16)
    {
      v17 = 8;
      if (v16 < 8)
        v17 = *(_QWORD *)(a1 + 168);
      v18 = v16 - v17;
      if ((uint64_t)(v16 - 1) >= (uint64_t)(v16 - v17))
      {
        v19 = *(_QWORD *)(a1 + 168);
        do
        {
          *a4++ = *(_BYTE *)(a1 + 159 + v19);
          v20 = v19 - 2;
          --v19;
        }
        while (v20 >= v18);
      }
      *(_QWORD *)(a1 + 168) = v18;
      if (v16 > 7)
        goto LABEL_5;
      v21 = 8 - v17;
    }
    else
    {
      v21 = 8;
    }
    if ((a5 & 1) != 0)
      v23 = 0;
    else
      v23 = a4;
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, v23, v21) & 1) != 0)
    {
LABEL_5:
      for (i = v25; i; --i)
        re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
      result = 1;
      if ((a5 & 2) == 0)
      {
        v11 = *(_QWORD *)(a1 + 128);
        v12 = *(_QWORD *)(a1 + 112) - 1;
        if (*(_BYTE *)(v11 + 48 * v12) != 2)
          ++*(_QWORD *)(v11 + 48 * v12 + 32);
      }
      return result;
    }
LABEL_31:
    re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Double");
    goto LABEL_5;
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::advance(uint64_t a1, const char *a2, int a3, _QWORD *a4, _DWORD *a5)
{
  int v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 48);
  if (v9 == 2)
  {
    if (!re::EncoderOPACK<re::FixedArrayInputStream>::advance_KeyedContainer(a1, a2, a3))
      return 0;
  }
  else if (v9 == 1 && !re::EncoderOPACK<re::FixedArrayInputStream>::advance_UnkeyedContainer(a1, a2))
  {
    return 0;
  }
  return re::EncoderOPACK<re::FixedArrayInputStream>::evaluateConditional(a1, a2, a5, a4);
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readTag(uint64_t a1, const char *a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (!*(_BYTE *)(a1 + 40))
  {
    v6 = *(_QWORD *)(a1 + 168);
    if (v6)
    {
      v7 = v6 - 1;
      *__dst = *(_BYTE *)(a1 + v7 + 160);
      *(_QWORD *)(a1 + 168) = v7;
      return 1;
    }
    v4 = 1;
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, __dst, 1uLL) & 1) != 0)return v4;
    re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, a4);
  }
  return 0;
}

BOOL re::EncoderOPACK<re::FixedArrayInputStream>::advance_UnkeyedContainer(uint64_t a1, const char *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  unsigned __int8 __dst;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v4 = *(_QWORD *)(a1 + 168);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(unsigned __int8 *)(a1 + v4 - 1 + 160);
    *(_QWORD *)(a1 + 168) = v5;
  }
  else
  {
    __dst = 0;
    if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dst, 1uLL))
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Array element or terminator");
      return 0;
    }
    v6 = __dst;
    v5 = *(_QWORD *)(a1 + 168);
  }
  if (v5 <= 7)
  {
    *(_QWORD *)(a1 + 168) = v5 + 1;
    *(_BYTE *)(a1 + v5 + 160) = v6;
  }
  return v6 != 3;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::advance_KeyedContainer(uint64_t a1, const char *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  size_t v22;
  unint64_t v23;
  uint64_t v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  int64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  __int16 v33;
  char v34;
  unsigned __int8 __dst;
  int v36;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 112) - 1;
  if ((*(_BYTE *)(v3 + 48 * v4 + 4) & 0x40) != 0)
    return 1;
  v6 = *(_DWORD *)(v3 + 48 * v4 + 32);
  v36 = v6;
  if (v6 == a3)
  {
LABEL_3:
    *(_QWORD *)(v3 + 48 * v4 + 32) = 0xFFFFFFFF80000000;
    return 1;
  }
  v10 = a1 + 159;
  while (1)
  {
    if (v6 > a3)
    {
      result = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 16) = v6;
      return result;
    }
    if ((v6 & 0x80000000) == 0)
      re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
    __dst = 0;
    if (*(_BYTE *)(a1 + 40))
      return 0;
    v11 = *(_QWORD *)(a1 + 168);
    if (v11)
    {
      v12 = v11 - 1;
      v13 = *(unsigned __int8 *)(a1 + v11 - 1 + 160);
      __dst = v13;
      *(_QWORD *)(a1 + 168) = v12;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dst, 1uLL) & 1) == 0)
      {
        v32 = "Integer (numeric tag)";
        goto LABEL_64;
      }
      v13 = __dst;
    }
    if (v13 == 3)
      break;
    if ((v13 - 7) <= 0x28)
    {
      LODWORD(v14) = v13 - 8;
      goto LABEL_53;
    }
    if (v13 != 50)
    {
      if (v13 != 49)
      {
        if (v13 != 48)
        {
          v31 = *(_QWORD *)(a1 + 168);
          if (v31 <= 7)
          {
            *(_QWORD *)(a1 + 168) = v31 + 1;
            *(_BYTE *)(a1 + v31 + 160) = v13;
          }
          return 0;
        }
        v34 = 0;
        if (*(_BYTE *)(a1 + 40))
          return 0;
        v14 = *(_QWORD *)(a1 + 168);
        if (v14)
        {
          v15 = v14 - 1;
          LOBYTE(v14) = *(_BYTE *)(a1 + v14 - 1 + 160);
          *(_QWORD *)(a1 + 168) = v15;
        }
        else
        {
          if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, &v34, 1uLL))
          {
            v32 = "8-Bit Signed Integer";
            goto LABEL_64;
          }
          LOBYTE(v14) = v34;
        }
        LODWORD(v14) = (char)v14;
        goto LABEL_53;
      }
      v33 = 0;
      if (*(_BYTE *)(a1 + 40))
        return 0;
      v23 = *(_QWORD *)(a1 + 168);
      if (!v23)
      {
        v26 = (char *)&v33;
        v29 = 2;
        goto LABEL_51;
      }
      if (v23 >= 2)
        v24 = 2;
      else
        v24 = *(_QWORD *)(a1 + 168);
      v25 = v23 - v24;
      v26 = (char *)&v33;
      if ((uint64_t)(v23 - 1) >= (uint64_t)(v23 - v24))
      {
        v27 = *(_QWORD *)(a1 + 168);
        do
        {
          *v26++ = *(_BYTE *)(v10 + v27);
          v28 = v27 - 2;
          --v27;
        }
        while (v28 >= v25);
      }
      *(_QWORD *)(a1 + 168) = v25;
      if (v23 <= 1)
      {
        v29 = 2 - v24;
LABEL_51:
        if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, v26, v29) & 1) == 0)
        {
          v32 = "16-Bit Signed Integer";
          goto LABEL_64;
        }
      }
      LODWORD(v14) = v33;
LABEL_53:
      v36 = v14;
      goto LABEL_54;
    }
    if (*(_BYTE *)(a1 + 40))
      return 0;
    v16 = *(_QWORD *)(a1 + 168);
    if (v16)
    {
      if (v16 >= 4)
        v17 = 4;
      else
        v17 = *(_QWORD *)(a1 + 168);
      v18 = v16 - v17;
      v19 = (char *)&v36;
      if ((uint64_t)(v16 - 1) >= (uint64_t)(v16 - v17))
      {
        v20 = *(_QWORD *)(a1 + 168);
        do
        {
          *v19++ = *(_BYTE *)(v10 + v20);
          v21 = v20 - 2;
          --v20;
        }
        while (v21 >= v18);
      }
      *(_QWORD *)(a1 + 168) = v18;
      if (v16 > 3)
        goto LABEL_54;
      v22 = 4 - v17;
    }
    else
    {
      v19 = (char *)&v36;
      v22 = 4;
    }
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, v19, v22) & 1) == 0)
    {
      v32 = "32-Bit Signed Integer";
LABEL_64:
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)v32);
      return 0;
    }
LABEL_54:
    v6 = v36;
    if (v36 == a3)
    {
      v3 = *(_QWORD *)(a1 + 128);
      v4 = *(_QWORD *)(a1 + 112) - 1;
      goto LABEL_3;
    }
  }
  v30 = *(_QWORD *)(a1 + 168);
  if (v30 <= 7)
  {
    *(_QWORD *)(a1 + 168) = v30 + 1;
    *(_BYTE *)(a1 + v30 + 160) = 3;
  }
  return 0;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::evaluateConditional(uint64_t a1, const char *a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v21;
  uint64_t i;
  char v23;
  uint64_t v24;
  unsigned __int8 v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  const char *v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  size_t v42;
  uint64_t v43;
  int64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  int v47;
  uint64_t v48;
  char v49;
  _BYTE v50[7];
  _BYTE *v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int16 v55;
  unsigned __int8 v56;
  unsigned __int8 __dst;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  __dst = 0;
  v9 = *(_QWORD *)(a1 + 168);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = *(unsigned __int8 *)(a1 + v9 - 1 + 160);
    __dst = v11;
    *(_QWORD *)(a1 + 168) = v10;
  }
  else
  {
    if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dst, 1uLL))
    {
LABEL_55:
      v29 = "Array";
      goto LABEL_56;
    }
    v11 = __dst;
  }
  v12 = v11;
  v13 = v11 - 209;
  if ((v11 + 33) < 0xF3u || v11 == 209)
  {
    v15 = *(_QWORD *)(a1 + 168);
    if (v15 <= 7)
    {
      *(_QWORD *)(a1 + 168) = v15 + 1;
      *(_BYTE *)(a1 + v15 + 160) = v11;
    }
    return 1;
  }
  v4 = 0;
  v56 = 0;
  if (*(_BYTE *)(a1 + 40))
    return v4;
  v17 = *(_QWORD *)(a1 + 168);
  if (v17)
  {
    v18 = v17 - 1;
    v19 = *(unsigned __int8 *)(a1 + v17 - 1 + 160);
    v56 = v19;
    *(_QWORD *)(a1 + 168) = v18;
    goto LABEL_21;
  }
  if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&v56, 1uLL) & 1) != 0)
  {
    v19 = v56;
LABEL_21:
    if (v19 != 69)
    {
      v26 = *(_QWORD *)(a1 + 168);
      if (v26 <= 7)
      {
        *(_QWORD *)(a1 + 168) = v26 + 1;
        *(_BYTE *)(a1 + v26 + 160) = v19;
LABEL_35:
        v27 = *(_QWORD *)(a1 + 168);
        if (v27 <= 7)
        {
          v28 = __dst;
          *(_QWORD *)(a1 + 168) = v27 + 1;
          *(_BYTE *)(a1 + v27 + 160) = v28;
        }
      }
      return 1;
    }
    v55 = 0;
    v54 = 0;
    if (*(_BYTE *)(a1 + 40))
    {
LABEL_23:
      if (v54 == 1852793664 && v55 == 100)
      {
        v34 = 0;
        v35 = v12 - 210;
        v36 = 1;
        while (!*(_BYTE *)(a1 + 40))
        {
          v37 = *(_QWORD *)(a1 + 168);
          if (v37)
          {
            v38 = v37 - 1;
            v39 = *(_BYTE *)(a1 + v37 - 1 + 160);
            __dst = v39;
            *(_QWORD *)(a1 + 168) = v38;
          }
          else
          {
            if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dst, 1uLL))goto LABEL_55;
            v39 = __dst;
          }
          if ((v39 + 46) >= 0xDu)
          {
            re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels((_anonymous_namespace_ *)a1, a2, (re::DynamicString *)&v48);
            if ((v49 & 1) != 0)
              v45 = v51;
            else
              v45 = v50;
            re::DynamicString::format((re::DynamicString *)"Failed to read version conditional \"%s\". Invalid condition.", (re::DynamicString *)&v52, v45);
            re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1, (uint64_t)&v52);
            if ((_QWORD)v52)
            {
              if ((BYTE8(v52) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v52 + 40))();
              v52 = 0u;
              v53 = 0u;
            }
            if (v48 && (v49 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v48 + 40))();
            return 0;
          }
          v47 = 0;
          v4 = re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<int>((_anonymous_namespace_ *)a1, a2, &v47);
          if ((v4 & 1) == 0)
          {
            re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels((_anonymous_namespace_ *)a1, a2, (re::DynamicString *)&v48);
            if ((v49 & 1) != 0)
              v46 = v51;
            else
              v46 = v50;
            re::DynamicString::format((re::DynamicString *)"Failed to read version conditional \"%s\". Failed to read version.", (re::DynamicString *)&v52, v46);
            re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(a1, (uint64_t)&v52);
            if ((_QWORD)v52)
            {
              if ((BYTE8(v52) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v52 + 40))();
              v52 = 0u;
              v53 = 0u;
            }
            if (v48 && (v49 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v48 + 40))();
            return v4;
          }
          if (*(_DWORD *)(a1 + 136) <= v47 || v35 == v34)
          {
            if (a3)
              *a3 = v47;
            *a4 = v13 + ~v34;
            return v4;
          }
          re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
          v34 = v36;
          if (v13 <= v36++)
          {
            re::internal::assertLog((re::internal *)4, v40, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "evaluateConditional", 2285);
            _os_crash();
            __break(1u);
            goto LABEL_55;
          }
        }
        return 0;
      }
      v21 = *(_QWORD *)(a1 + 168);
      if (v21 + 4 <= 7)
      {
        for (i = 4; i != -1; --i)
        {
          v23 = *((_BYTE *)&v54 + i);
          v24 = *(_QWORD *)(a1 + 168);
          *(_QWORD *)(a1 + 168) = v24 + 1;
          *(_BYTE *)(a1 + v24 + 160) = v23;
        }
        v21 = *(_QWORD *)(a1 + 168);
      }
      if (v21 <= 7)
      {
        v25 = v56;
        *(_QWORD *)(a1 + 168) = v21 + 1;
        *(_BYTE *)(a1 + v21 + 160) = v25;
        goto LABEL_35;
      }
      return 1;
    }
    v30 = *(_QWORD *)(a1 + 168);
    if (v30)
    {
      v31 = 5;
      if (v30 < 5)
        v31 = *(_QWORD *)(a1 + 168);
      v32 = v30 - v31;
      if ((uint64_t)(v30 - 1) >= (uint64_t)(v30 - v31))
      {
        v33 = (char *)&v54;
        v43 = *(_QWORD *)(a1 + 168);
        do
        {
          *v33++ = *(_BYTE *)(a1 + 159 + v43);
          v44 = v43 - 2;
          --v43;
        }
        while (v44 >= v32);
      }
      else
      {
        v33 = (char *)&v54;
      }
      *(_QWORD *)(a1 + 168) = v32;
      if (v30 > 4)
        goto LABEL_23;
      v42 = 5 - v31;
    }
    else
    {
      v33 = (char *)&v54;
      v42 = 5;
    }
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, v33, v42) & 1) == 0)re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Small String");
    goto LABEL_23;
  }
  v29 = "Small String";
LABEL_56:
  re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)v29);
  return 0;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  const char *v12;
  _anonymous_namespace_ *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t i;
  unsigned __int8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  BOOL v27;
  unsigned __int8 v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  char v33;
  _BYTE v34[23];
  size_t v35;
  __int128 v36;
  size_t v37;
  size_t __n[6];
  unsigned __int8 __dst;

  if (*(_BYTE *)(result + 40))
    return result;
  v1 = result;
  __dst = 0;
  v2 = *(_QWORD *)(result + 168);
  if (v2)
  {
    v3 = v2 - 1;
    v4 = *(unsigned __int8 *)(result + v3 + 160);
    __dst = v4;
    *(_QWORD *)(v1 + 168) = v3;
  }
  else
  {
    if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)result, (char *)&__dst, 1uLL))
    {
      v12 = "Member";
      v13 = (_anonymous_namespace_ *)v1;
      return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType(v13, "unknown", (uint64_t)v12);
    }
    v4 = __dst;
  }
  result = (uint64_t)re::OPACK::toString(v4);
  v5 = result;
  v6 = __dst;
  if (__dst > 0x2Fu)
  {
    switch(__dst)
    {
      case '0':
LABEL_20:
        if (*(_BYTE *)(v1 + 40))
          return result;
        v10 = (_QWORD *)v1;
        v11 = 1;
        goto LABEL_73;
      case '1':
LABEL_30:
        if (*(_BYTE *)(v1 + 40))
          return result;
        v15 = *(_QWORD *)(v1 + 168);
        if (!v15)
        {
          v11 = 2;
          goto LABEL_72;
        }
        v8 = 2;
        if (v15 >= 2)
          v9 = 2;
        else
          v9 = *(_QWORD *)(v1 + 168);
        *(_QWORD *)(v1 + 168) = v15 - v9;
        if (v15 != 1)
          return result;
        goto LABEL_48;
      case '2':
      case '5':
LABEL_23:
        if (*(_BYTE *)(v1 + 40))
          return result;
        v14 = *(_QWORD *)(v1 + 168);
        if (!v14)
        {
          v11 = 4;
          goto LABEL_72;
        }
        v8 = 4;
        if (v14 >= 4)
          v9 = 4;
        else
          v9 = *(_QWORD *)(v1 + 168);
        *(_QWORD *)(v1 + 168) = v14 - v9;
        if (v14 > 3)
          return result;
        goto LABEL_48;
      case '3':
      case '6':
        goto LABEL_12;
      case '4':
        goto LABEL_37;
      default:
        switch(__dst)
        {
          case 0xC1u:
            goto LABEL_20;
          case 0xC2u:
            goto LABEL_30;
          case 0xC3u:
            if (*(_BYTE *)(v1 + 40))
              return result;
            v18 = *(_QWORD *)(v1 + 168);
            if (!v18)
            {
              v11 = 3;
              goto LABEL_72;
            }
            v19 = 3;
            if (v18 < 3)
              v19 = *(_QWORD *)(v1 + 168);
            *(_QWORD *)(v1 + 168) = v18 - v19;
            v11 = v19 ^ 3;
            if (v19 == 3)
              return result;
            goto LABEL_72;
          case 0xC4u:
            goto LABEL_23;
          default:
            goto LABEL_37;
        }
    }
  }
  if (__dst - 1 >= 4)
  {
    if (__dst == 5)
    {
      if (*(_BYTE *)(v1 + 40))
        return result;
      v17 = *(_QWORD *)(v1 + 168);
      if (!v17)
      {
        v11 = 16;
        goto LABEL_72;
      }
      v8 = 16;
      if (v17 >= 0x10)
        v9 = 16;
      else
        v9 = *(_QWORD *)(v1 + 168);
      *(_QWORD *)(v1 + 168) = v17 - v9;
      if (v17 > 0xF)
        return result;
    }
    else
    {
      if (__dst != 6)
      {
LABEL_37:
        if (__dst - 7 < 0x29)
          return result;
        if (__dst - 64 > 0x24)
        {
          if (__dst - 112 > 0x24)
          {
            if ((__dst + 96) >= 0x21u)
            {
              if ((__dst + 48) > 0xEu)
              {
                if (__dst == 223)
                {
                  result = re::EncoderOPACK<re::FixedArrayInputStream>::readTag(v1, "unknown", (char *)&__dst, (uint64_t)"Array value/terminator");
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v23 = __dst;
                      if (__dst == 3)
                        break;
                      v24 = *(_QWORD *)(v1 + 168);
                      if (v24 <= 7)
                      {
                        *(_QWORD *)(v1 + 168) = v24 + 1;
                        *(_BYTE *)(v1 + v24 + 160) = v23;
                      }
                      re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(v1);
                      result = re::EncoderOPACK<re::FixedArrayInputStream>::readTag(v1, "unknown", (char *)&__dst, (uint64_t)"Array value/terminator");
                    }
                    while ((result & 1) != 0);
                  }
                }
                else if ((__dst + 32) > 0xEu)
                {
                  if (__dst == 239)
                  {
                    for (result = re::EncoderOPACK<re::FixedArrayInputStream>::readTag(v1, "unknown", (char *)&__dst, (uint64_t)"Dictionary key/value/terminator");
                          (_DWORD)result;
                          result = re::EncoderOPACK<re::FixedArrayInputStream>::readTag(v1, "unknown", (char *)&__dst, (uint64_t)"Dictionary key/value/terminator"))
                    {
                      v28 = __dst;
                      if (__dst == 3)
                        break;
                      v29 = *(_QWORD *)(v1 + 168);
                      if (v29 <= 7)
                      {
                        *(_QWORD *)(v1 + 168) = v29 + 1;
                        *(_BYTE *)(v1 + v29 + 160) = v28;
                      }
                      v30 = -2;
                      do
                      {
                        re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(v1);
                        v27 = __CFADD__(v30++, 1);
                      }
                      while (!v27);
                    }
                  }
                  else
                  {
                    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels((_anonymous_namespace_ *)v1, 0, (re::DynamicString *)&v32);
                    if ((v33 & 1) != 0)
                      v31 = *(_BYTE **)&v34[7];
                    else
                      v31 = v34;
                    re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Found unsupported tag while skipping over data.", (re::DynamicString *)&v35, v31);
                    __n[0] = 400;
                    __n[1] = (size_t)&re::FoundationErrorCategory(void)::instance;
                    __n[2] = v35;
                    __n[5] = v37;
                    *(_OWORD *)&__n[3] = v36;
                    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError(v1, (__int128 *)__n);
                    if (__n[2])
                    {
                      if ((__n[3] & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)__n[2] + 40))();
                      memset(&__n[2], 0, 32);
                    }
                    result = v32;
                    if (v32 && (v33 & 1) != 0)
                      return (*(uint64_t (**)(void))(*(_QWORD *)v32 + 40))();
                  }
                }
                else
                {
                  v25 = *(_QWORD *)(v1 + 168);
                  if (v25 <= 7)
                  {
                    *(_QWORD *)(v1 + 168) = v25 + 1;
                    *(_BYTE *)(v1 + v25 + 160) = v6;
                  }
                  __n[0] = 0;
                  result = re::EncoderOPACK<re::FixedArrayInputStream>::readDictionaryTag(v1, "unknown", (char *)__n);
                  if (2 * __n[0])
                  {
                    v26 = -2 * __n[0];
                    do
                    {
                      result = re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(v1);
                      v27 = __CFADD__(v26++, 1);
                    }
                    while (!v27);
                  }
                }
              }
              else
              {
                v21 = *(_QWORD *)(v1 + 168);
                if (v21 <= 7)
                {
                  *(_QWORD *)(v1 + 168) = v21 + 1;
                  *(_BYTE *)(v1 + v21 + 160) = v6;
                }
                __n[0] = 0;
                result = re::EncoderOPACK<re::FixedArrayInputStream>::readArrayTag(v1, "unknown", (char *)__n);
                for (i = __n[0]; i; result = re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(v1))
                  --i;
              }
            }
            return result;
          }
          v20 = *(_QWORD *)(v1 + 168);
          if (v20 <= 7)
          {
            *(_QWORD *)(v1 + 168) = v20 + 1;
            *(_BYTE *)(v1 + v20 + 160) = v6;
          }
          __n[0] = 0;
          re::EncoderOPACK<re::FixedArrayInputStream>::readDataTag(v1, "unknown", (uint64_t *)__n);
        }
        else
        {
          v16 = *(_QWORD *)(v1 + 168);
          if (v16 <= 7)
          {
            *(_QWORD *)(v1 + 168) = v16 + 1;
            *(_BYTE *)(v1 + v16 + 160) = v6;
          }
          __n[0] = 0;
          re::EncoderOPACK<re::FixedArrayInputStream>::readStringTag(v1, "unknown", (uint64_t *)__n);
        }
        return re::EncoderOPACK<re::FixedArrayInputStream>::readRaw(v1, "unknown", 0, __n[0], v5, 1);
      }
LABEL_12:
      if (*(_BYTE *)(v1 + 40))
        return result;
      v7 = *(_QWORD *)(v1 + 168);
      if (!v7)
      {
        v11 = 8;
        goto LABEL_72;
      }
      v8 = 8;
      if (v7 >= 8)
        v9 = 8;
      else
        v9 = *(_QWORD *)(v1 + 168);
      *(_QWORD *)(v1 + 168) = v7 - v9;
      if (v7 > 7)
        return result;
    }
LABEL_48:
    v11 = v8 - v9;
LABEL_72:
    v10 = (_QWORD *)v1;
LABEL_73:
    result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>(v10, 0, v11);
    if ((result & 1) == 0)
    {
      v13 = (_anonymous_namespace_ *)v1;
      v12 = (const char *)v5;
      return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType(v13, "unknown", (uint64_t)v12);
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readRaw(uint64_t a1, const char *a2, _BYTE *a3, size_t __n, uint64_t a5, char a6)
{
  size_t v10;
  size_t v11;
  int64_t v12;
  int64_t v13;
  char *v14;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v10 = *(_QWORD *)(a1 + 168);
  if (v10)
  {
    if (v10 >= __n)
      v11 = __n;
    else
      v11 = *(_QWORD *)(a1 + 168);
    v12 = v10 - v11;
    if ((uint64_t)(v10 - 1) >= (uint64_t)(v10 - v11))
    {
      do
      {
        *a3++ = *(_BYTE *)(a1 + 159 + v10);
        v13 = v10 - 2;
        --v10;
      }
      while (v13 >= v12);
    }
    *(_QWORD *)(a1 + 168) = v12;
    __n -= v11;
  }
  if (__n)
  {
    v14 = (a6 & 1) != 0 ? 0 : a3;
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, v14, __n) & 1) == 0)
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, a5);
      return 0;
    }
  }
  return 1;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readStringTag(uint64_t result, const char *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  char *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  unsigned __int8 __dst;

  if (*(_BYTE *)(result + 40))
    return result;
  v5 = result;
  __dst = 0;
  v6 = *(_QWORD *)(result + 168);
  if (v6)
  {
    v7 = v6 - 1;
    result = *(unsigned __int8 *)(result + v7 + 160);
    __dst = *(_BYTE *)(v5 + v7 + 160);
    *(_QWORD *)(v5 + 168) = v7;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)result, (char *)&__dst, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String");
    result = __dst;
  }
  if ((result - 64) > 0x20)
  {
    switch((int)result)
    {
      case 'a':
        LOBYTE(v32) = 0;
        if (!*(_BYTE *)(v5 + 40))
        {
          v8 = *(_QWORD *)(v5 + 168);
          if (v8)
          {
            v9 = v8 - 1;
            LODWORD(v8) = *(unsigned __int8 *)(v5 + v8 - 1 + 160);
            *(_QWORD *)(v5 + 168) = v9;
          }
          else
          {
            result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)v5, (char *)&v32, 1uLL);
            if (!(_DWORD)result)
              return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String");
            LODWORD(v8) = v32;
          }
          v8 = v8;
          goto LABEL_8;
        }
        return result;
      case 'b':
        LOWORD(v32) = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v11 = *(_QWORD *)(v5 + 168);
        if (v11)
        {
          v12 = 2;
          if (v11 < 2)
            v12 = *(_QWORD *)(v5 + 168);
          v13 = v11 - v12;
          if ((uint64_t)(v11 - 1) >= (uint64_t)(v11 - v12))
          {
            v14 = (char *)&v32;
            v26 = *(_QWORD *)(v5 + 168);
            do
            {
              *v14++ = *(_BYTE *)(v5 + 159 + v26);
              v27 = v26 - 2;
              --v26;
            }
            while (v27 >= v13);
          }
          else
          {
            v14 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v13;
          if (v11 > 1)
          {
LABEL_43:
            v8 = (unsigned __int16)v32;
            goto LABEL_8;
          }
          v25 = 2 - v12;
        }
        else
        {
          v14 = (char *)&v32;
          v25 = 2;
        }
        result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)v5, v14, v25);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String");
        goto LABEL_43;
      case 'c':
        LODWORD(v32) = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v15 = *(_QWORD *)(v5 + 168);
        if (v15)
        {
          v16 = 4;
          if (v15 < 4)
            v16 = *(_QWORD *)(v5 + 168);
          v17 = v15 - v16;
          if ((uint64_t)(v15 - 1) >= (uint64_t)(v15 - v16))
          {
            v18 = (char *)&v32;
            v28 = *(_QWORD *)(v5 + 168);
            do
            {
              *v18++ = *(_BYTE *)(v5 + 159 + v28);
              v29 = v28 - 2;
              --v28;
            }
            while (v29 >= v17);
          }
          else
          {
            v18 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v17;
          if (v15 > 3)
            goto LABEL_49;
          v23 = 4 - v16;
        }
        else
        {
          v18 = (char *)&v32;
          v23 = 4;
        }
        result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)v5, v18, v23);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String");
LABEL_49:
        v8 = v32;
        goto LABEL_8;
      case 'd':
        v32 = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v19 = *(_QWORD *)(v5 + 168);
        if (v19)
        {
          v20 = 8;
          if (v19 < 8)
            v20 = *(_QWORD *)(v5 + 168);
          v21 = v19 - v20;
          if ((uint64_t)(v19 - 1) >= (uint64_t)(v19 - v20))
          {
            v22 = (char *)&v32;
            v30 = *(_QWORD *)(v5 + 168);
            do
            {
              *v22++ = *(_BYTE *)(v5 + 159 + v30);
              v31 = v30 - 2;
              --v30;
            }
            while (v31 >= v21);
          }
          else
          {
            v22 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v21;
          if (v19 > 7)
            goto LABEL_55;
          v24 = 8 - v20;
        }
        else
        {
          v22 = (char *)&v32;
          v24 = 8;
        }
        result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)v5, v22, v24);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"String");
LABEL_55:
        v8 = v32;
        goto LABEL_8;
      default:
        v10 = re::OPACK::toString(result);
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)v5, (uint64_t)"String", (uint64_t)v10);
    }
  }
  v8 = result - 64;
LABEL_8:
  *a3 = v8;
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readDataTag(uint64_t result, const char *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  char *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  unsigned __int8 __dst;

  if (*(_BYTE *)(result + 40))
    return result;
  v5 = result;
  __dst = 0;
  v6 = *(_QWORD *)(result + 168);
  if (v6)
  {
    v7 = v6 - 1;
    result = *(unsigned __int8 *)(result + v7 + 160);
    __dst = *(_BYTE *)(v5 + v7 + 160);
    *(_QWORD *)(v5 + 168) = v7;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)result, (char *)&__dst, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"BLOB");
    result = __dst;
  }
  if ((result - 112) > 0x20)
  {
    switch((int)result)
    {
      case 145:
        LOBYTE(v32) = 0;
        if (!*(_BYTE *)(v5 + 40))
        {
          v8 = *(_QWORD *)(v5 + 168);
          if (v8)
          {
            v9 = v8 - 1;
            LODWORD(v8) = *(unsigned __int8 *)(v5 + v8 - 1 + 160);
            *(_QWORD *)(v5 + 168) = v9;
          }
          else
          {
            result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)v5, (char *)&v32, 1uLL);
            if (!(_DWORD)result)
              return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"BLOB");
            LODWORD(v8) = v32;
          }
          v8 = v8;
          goto LABEL_8;
        }
        return result;
      case 146:
        LOWORD(v32) = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v11 = *(_QWORD *)(v5 + 168);
        if (v11)
        {
          v12 = 2;
          if (v11 < 2)
            v12 = *(_QWORD *)(v5 + 168);
          v13 = v11 - v12;
          if ((uint64_t)(v11 - 1) >= (uint64_t)(v11 - v12))
          {
            v14 = (char *)&v32;
            v26 = *(_QWORD *)(v5 + 168);
            do
            {
              *v14++ = *(_BYTE *)(v5 + 159 + v26);
              v27 = v26 - 2;
              --v26;
            }
            while (v27 >= v13);
          }
          else
          {
            v14 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v13;
          if (v11 > 1)
          {
LABEL_43:
            v8 = (unsigned __int16)v32;
            goto LABEL_8;
          }
          v25 = 2 - v12;
        }
        else
        {
          v14 = (char *)&v32;
          v25 = 2;
        }
        result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)v5, v14, v25);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"BLOB");
        goto LABEL_43;
      case 147:
        LODWORD(v32) = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v15 = *(_QWORD *)(v5 + 168);
        if (v15)
        {
          v16 = 4;
          if (v15 < 4)
            v16 = *(_QWORD *)(v5 + 168);
          v17 = v15 - v16;
          if ((uint64_t)(v15 - 1) >= (uint64_t)(v15 - v16))
          {
            v18 = (char *)&v32;
            v28 = *(_QWORD *)(v5 + 168);
            do
            {
              *v18++ = *(_BYTE *)(v5 + 159 + v28);
              v29 = v28 - 2;
              --v28;
            }
            while (v29 >= v17);
          }
          else
          {
            v18 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v17;
          if (v15 > 3)
            goto LABEL_49;
          v23 = 4 - v16;
        }
        else
        {
          v18 = (char *)&v32;
          v23 = 4;
        }
        result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)v5, v18, v23);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"BLOB");
LABEL_49:
        v8 = v32;
        goto LABEL_8;
      case 148:
        v32 = 0;
        if (*(_BYTE *)(v5 + 40))
          return result;
        v19 = *(_QWORD *)(v5 + 168);
        if (v19)
        {
          v20 = 8;
          if (v19 < 8)
            v20 = *(_QWORD *)(v5 + 168);
          v21 = v19 - v20;
          if ((uint64_t)(v19 - 1) >= (uint64_t)(v19 - v20))
          {
            v22 = (char *)&v32;
            v30 = *(_QWORD *)(v5 + 168);
            do
            {
              *v22++ = *(_BYTE *)(v5 + 159 + v30);
              v31 = v30 - 2;
              --v30;
            }
            while (v31 >= v21);
          }
          else
          {
            v22 = (char *)&v32;
          }
          *(_QWORD *)(v5 + 168) = v21;
          if (v19 > 7)
            goto LABEL_55;
          v24 = 8 - v20;
        }
        else
        {
          v22 = (char *)&v32;
          v24 = 8;
        }
        result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)v5, v22, v24);
        if ((result & 1) == 0)
          return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"BLOB");
LABEL_55:
        v8 = v32;
        goto LABEL_8;
      default:
        v10 = re::OPACK::toString(result);
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)v5, (uint64_t)"BLOB", (uint64_t)v10);
    }
  }
  v8 = result - 112;
LABEL_8:
  *a3 = v8;
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readArrayTag(uint64_t result, const char *a2, char *__dst)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  unsigned __int8 __dsta;

  if (!*(_BYTE *)(result + 40))
  {
    v5 = (_QWORD *)result;
    __dsta = 0;
    v6 = *(_QWORD *)(result + 168);
    if (v6)
    {
      v7 = v6 - 1;
      result = *(unsigned __int8 *)(result + v7 + 160);
      __dsta = *((_BYTE *)v5 + v7 + 160);
      v5[21] = v7;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)result, (char *)&__dsta, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"Array");
      result = __dsta;
    }
    if ((result + 48) > 0xEu)
    {
      if ((_DWORD)result == 223)
      {
        return re::EncoderOPACK<re::FixedArrayInputStream>::readUint64((uint64_t)v5, a2, __dst);
      }
      else
      {
        v8 = re::OPACK::toString(result);
        return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)v5, (uint64_t)"Array", (uint64_t)v8);
      }
    }
    else
    {
      *(_QWORD *)__dst = result - 208;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readDictionaryTag(uint64_t result, const char *a2, char *__dst)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unsigned __int8 __dsta;

  if (!*(_BYTE *)(result + 40))
  {
    v5 = result;
    __dsta = 0;
    v6 = *(_QWORD *)(result + 168);
    if (v6)
    {
      v7 = v6 - 1;
      result = *(unsigned __int8 *)(result + v7 + 160);
      __dsta = *(_BYTE *)(v5 + v7 + 160);
      *(_QWORD *)(v5 + 168) = v7;
    }
    else
    {
      if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)result, (char *)&__dsta, 1uLL) & 1) == 0)return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"Dictionary");
      result = __dsta;
    }
    if ((result + 32) <= 0xEu)
    {
      *(_QWORD *)__dst = result - 224;
      return result;
    }
    if ((_DWORD)result != 210)
      goto LABEL_17;
    result = re::EncoderOPACK<re::FixedArrayInputStream>::readUint64(v5, a2, __dst);
    if (!(_DWORD)result || *(_BYTE *)(v5 + 40))
      return result;
    v8 = *(_QWORD *)(v5 + 168);
    if (v8)
    {
      v9 = v8 - 1;
      result = *(unsigned __int8 *)(v5 + v9 + 160);
      __dsta = *(_BYTE *)(v5 + v9 + 160);
      *(_QWORD *)(v5 + 168) = v9;
      goto LABEL_16;
    }
    if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)v5, (char *)&__dsta, 1uLL))
    {
      result = __dsta;
LABEL_16:
      if ((_DWORD)result == 239)
        return result;
LABEL_17:
      v10 = re::OPACK::toString(result);
      return re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)v5, (uint64_t)"Dictionary", (uint64_t)v10);
    }
    return re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v5, a2, (uint64_t)"Dictionary");
  }
  return result;
}

uint64_t re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>(_QWORD *a1, char *__dst, size_t __n)
{
  size_t v3;
  int *v5;
  char *v6;
  const void **v7;
  size_t v8;
  uint64_t v9;
  size_t v11;

  v3 = __n;
  v5 = (int *)(a1 + 2);
  if (__dst)
  {
    v6 = __dst;
    v7 = (const void **)(a1 + 1);
    while (1)
    {
      v8 = *v5;
      if (v3 <= v8)
        break;
      if ((int)v8 >= 1)
      {
        memcpy(v6, *v7, v8);
        v9 = *v5;
        v6 += v9;
        v3 -= v9;
        *v7 = 0;
        *v5 = 0;
      }
      if (((*(uint64_t (**)(_QWORD, _QWORD *, int *))(*(_QWORD *)*a1 + 16))(*a1, a1 + 1, v5) & 1) == 0)
        return 0;
    }
    memcpy(v6, *v7, v3);
    *v7 = (char *)*v7 + v3;
    *v5 -= v3;
    return 1;
  }
  v11 = *v5;
  if (__n <= v11)
  {
    a1[1] += __n;
    *((_DWORD *)a1 + 4) = v11 - __n;
    return 1;
  }
  if ((int)v11 >= 1)
  {
    a1[1] = 0;
    *((_DWORD *)a1 + 4) = 0;
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)*a1 + 32))();
}

uint64_t re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType(_anonymous_namespace_ *a1, const char *a2, uint64_t a3)
{
  _BYTE *v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  _BYTE v9[23];
  _OWORD v10[2];

  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v7);
  if ((v8 & 1) != 0)
    v5 = *(_BYTE **)&v9[7];
  else
    v5 = v9;
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: Error %s type %s.", (re::DynamicString *)v10, "deserialize", v5, "reading", a3);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, (uint64_t)v10);
  if (*(_QWORD *)&v10[0])
  {
    if ((BYTE8(v10[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v10[0] + 40))();
    memset(v10, 0, sizeof(v10));
  }
  result = v7;
  if (v7)
  {
    if ((v8 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v7 + 40))();
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readUint64(uint64_t a1, const char *a2, char *__dst)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  size_t v15;
  unint64_t v16;
  unsigned __int8 __dsta;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  __dsta = 0;
  v7 = *(_QWORD *)(a1 + 168);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = *(unsigned __int8 *)(a1 + v7 - 1 + 160);
    __dsta = v9;
    *(_QWORD *)(a1 + 168) = v8;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dsta, 1uLL) & 1) == 0)
    {
LABEL_25:
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"UInt64");
      return 0;
    }
    v9 = __dsta;
  }
  if (v9 != 120)
  {
    v16 = *(_QWORD *)(a1 + 168);
    if (v16 <= 7)
    {
      *(_QWORD *)(a1 + 168) = v16 + 1;
      *(_BYTE *)(a1 + v16 + 160) = v9;
    }
    v18 = 0;
    if ((re::EncoderOPACK<re::FixedArrayInputStream>::readInteger(a1, a2, (char *)&v18, (uint64_t)"Int64") & 1) == 0)
      return 0;
    *(_QWORD *)__dst = v18;
    return 1;
  }
  if (!*(_BYTE *)(a1 + 40))
  {
    v10 = *(_QWORD *)(a1 + 168);
    if (v10)
    {
      v11 = 8;
      if (v10 < 8)
        v11 = *(_QWORD *)(a1 + 168);
      v12 = v10 - v11;
      if ((uint64_t)(v10 - 1) >= (uint64_t)(v10 - v11))
      {
        v13 = *(_QWORD *)(a1 + 168);
        do
        {
          *__dst++ = *(_BYTE *)(a1 + 159 + v13);
          v14 = v13 - 2;
          --v13;
        }
        while (v14 >= v12);
      }
      *(_QWORD *)(a1 + 168) = v12;
      if (v10 > 7)
        return 1;
      v15 = 8 - v11;
    }
    else
    {
      v15 = 8;
    }
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, __dst, v15) & 1) != 0)return 1;
    goto LABEL_25;
  }
  return 0;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readInteger(uint64_t a1, const char *a2, char *__dst, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  int v38;
  __int16 v39;
  char v40;
  unsigned __int8 __dsta;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  __dsta = 0;
  v9 = *(_QWORD *)(a1 + 168);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = *(unsigned __int8 *)(a1 + v10 + 160);
    __dsta = *(_BYTE *)(a1 + v10 + 160);
    *(_QWORD *)(a1 + 168) = v10;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dsta, 1uLL) & 1) == 0)
    {
      v14 = (_anonymous_namespace_ *)a1;
      v15 = a2;
      v16 = (const char *)a4;
      goto LABEL_17;
    }
    v11 = __dsta;
  }
  if (v11 - 7 > 0x28)
  {
    switch(v11)
    {
      case '0':
        result = 0;
        v40 = 0;
        if (*(_BYTE *)(a1 + 40))
          return result;
        v12 = *(_QWORD *)(a1 + 168);
        if (v12)
        {
          v13 = v12 - 1;
          LOBYTE(v12) = *(_BYTE *)(a1 + v12 - 1 + 160);
          *(_QWORD *)(a1 + 168) = v13;
LABEL_46:
          v12 = (char)v12;
          goto LABEL_10;
        }
        if (re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, &v40, 1uLL))
        {
          LOBYTE(v12) = v40;
          goto LABEL_46;
        }
        v16 = "8-Bit Signed Integer";
        goto LABEL_63;
      case '1':
        result = 0;
        v39 = 0;
        if (*(_BYTE *)(a1 + 40))
          return result;
        v18 = *(_QWORD *)(a1 + 168);
        if (v18)
        {
          v19 = 2;
          if (v18 < 2)
            v19 = *(_QWORD *)(a1 + 168);
          v20 = v18 - v19;
          if ((uint64_t)(v18 - 1) >= (uint64_t)(v18 - v19))
          {
            v21 = (char *)&v39;
            v34 = *(_QWORD *)(a1 + 168);
            do
            {
              *v21++ = *(_BYTE *)(a1 + 159 + v34);
              v35 = v34 - 2;
              --v34;
            }
            while (v35 >= v20);
          }
          else
          {
            v21 = (char *)&v39;
          }
          *(_QWORD *)(a1 + 168) = v20;
          if (v18 > 1)
            goto LABEL_53;
          v33 = 2 - v19;
        }
        else
        {
          v21 = (char *)&v39;
          v33 = 2;
        }
        if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, v21, v33) & 1) != 0)
        {
LABEL_53:
          v12 = v39;
          goto LABEL_10;
        }
        v16 = "16-Bit Signed Integer";
        goto LABEL_63;
      case '2':
        result = 0;
        v38 = 0;
        if (*(_BYTE *)(a1 + 40))
          return result;
        v22 = *(_QWORD *)(a1 + 168);
        if (v22)
        {
          v23 = 4;
          if (v22 < 4)
            v23 = *(_QWORD *)(a1 + 168);
          v24 = v22 - v23;
          if ((uint64_t)(v22 - 1) >= (uint64_t)(v22 - v23))
          {
            v25 = (char *)&v38;
            v36 = *(_QWORD *)(a1 + 168);
            do
            {
              *v25++ = *(_BYTE *)(a1 + 159 + v36);
              v37 = v36 - 2;
              --v36;
            }
            while (v37 >= v24);
          }
          else
          {
            v25 = (char *)&v38;
          }
          *(_QWORD *)(a1 + 168) = v24;
          if (v22 > 3)
            goto LABEL_60;
          v32 = 4 - v23;
        }
        else
        {
          v25 = (char *)&v38;
          v32 = 4;
        }
        if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, v25, v32) & 1) != 0)
        {
LABEL_60:
          v12 = v38;
          goto LABEL_10;
        }
        v16 = "32-Bit Signed Integer";
LABEL_63:
        v14 = (_anonymous_namespace_ *)a1;
        v15 = a2;
        break;
      case '3':
        if (*(_BYTE *)(a1 + 40))
          return 0;
        v26 = *(_QWORD *)(a1 + 168);
        if (v26)
        {
          v27 = 8;
          if (v26 < 8)
            v27 = *(_QWORD *)(a1 + 168);
          v28 = v26 - v27;
          if ((uint64_t)(v26 - 1) >= (uint64_t)(v26 - v27))
          {
            v29 = *(_QWORD *)(a1 + 168);
            do
            {
              *__dst++ = *(_BYTE *)(a1 + 159 + v29);
              v30 = v29 - 2;
              --v29;
            }
            while (v30 >= v28);
          }
          *(_QWORD *)(a1 + 168) = v28;
          if (v26 > 7)
            return 1;
          v31 = 8 - v27;
        }
        else
        {
          v31 = 8;
        }
        if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, __dst, v31) & 1) != 0)return 1;
        v16 = "64-Bit Signed Integer";
        goto LABEL_63;
      default:
        v17 = re::OPACK::toString(v11);
        re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)a1, a4, (uint64_t)v17);
        return 0;
    }
LABEL_17:
    re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType(v14, v15, (uint64_t)v16);
    return 0;
  }
  v12 = v11 - 8;
LABEL_10:
  *(_QWORD *)__dst = v12;
  return 1;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<int>(_anonymous_namespace_ *a1, const char *a2, _DWORD *a3)
{
  uint64_t result;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  _BYTE v10[23];
  _OWORD v11[2];
  uint64_t __dst;

  __dst = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::readInteger((uint64_t)a1, a2, (char *)&__dst, (uint64_t)"Int32");
  if ((_DWORD)result)
  {
    if (__dst == (int)__dst)
    {
      *a3 = __dst;
      return 1;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v8);
      if ((v9 & 1) != 0)
        v7 = *(_BYTE **)&v10[7];
      else
        v7 = v10;
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Integer of type %s expected. Value (%lld) is out of range.", (re::DynamicString *)v11, v7, "Int32", __dst);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, (uint64_t)v11);
      if (*(_QWORD *)&v11[0])
      {
        if ((BYTE8(v11[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v11[0] + 40))();
        memset(v11, 0, sizeof(v11));
      }
      if (v8)
      {
        if ((v9 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v8 + 40))();
      }
      return 0;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<signed char>(uint64_t a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t v5;
  _anonymous_namespace_ *v10;
  const char *v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v18 = 0;
  v5 = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v18, 0);
  if ((_DWORD)v5)
  {
    if ((a5 & 1) != 0)
    {
      v17 = 0;
      v12 = &v17;
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
    }
    else
    {
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
      v12 = a4;
    }
    re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<signed char>(v10, v11, v12);
    for (i = v18; i; --i)
      re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
    if ((a5 & 2) == 0)
    {
      v14 = *(_QWORD *)(a1 + 128);
      v15 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v14 + 48 * v15) != 2)
        ++*(_QWORD *)(v14 + 48 * v15 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<signed char>(_anonymous_namespace_ *a1, const char *a2, _BYTE *a3)
{
  uint64_t result;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  _BYTE v10[23];
  _OWORD v11[2];
  uint64_t __dst;

  __dst = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::readInteger((uint64_t)a1, a2, (char *)&__dst, (uint64_t)"Int8");
  if ((_DWORD)result)
  {
    if (__dst == (char)__dst)
    {
      *a3 = __dst;
      return 1;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v8);
      if ((v9 & 1) != 0)
        v7 = *(_BYTE **)&v10[7];
      else
        v7 = v10;
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Integer of type %s expected. Value (%lld) is out of range.", (re::DynamicString *)v11, v7, "Int8", __dst);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, (uint64_t)v11);
      if (*(_QWORD *)&v11[0])
      {
        if ((BYTE8(v11[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v11[0] + 40))();
        memset(v11, 0, sizeof(v11));
      }
      if (v8)
      {
        if ((v9 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v8 + 40))();
      }
      return 0;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<short>(uint64_t a1, const char *a2, int a3, __int16 *a4, char a5)
{
  uint64_t v5;
  _anonymous_namespace_ *v10;
  const char *v11;
  __int16 *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __int16 v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v18 = 0;
  v5 = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v18, 0);
  if ((_DWORD)v5)
  {
    if ((a5 & 1) != 0)
    {
      v17 = 0;
      v12 = &v17;
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
    }
    else
    {
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
      v12 = a4;
    }
    re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<short>(v10, v11, v12);
    for (i = v18; i; --i)
      re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
    if ((a5 & 2) == 0)
    {
      v14 = *(_QWORD *)(a1 + 128);
      v15 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v14 + 48 * v15) != 2)
        ++*(_QWORD *)(v14 + 48 * v15 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<short>(_anonymous_namespace_ *a1, const char *a2, _WORD *a3)
{
  uint64_t result;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  _BYTE v10[23];
  _OWORD v11[2];
  uint64_t __dst;

  __dst = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::readInteger((uint64_t)a1, a2, (char *)&__dst, (uint64_t)"Int16");
  if ((_DWORD)result)
  {
    if (__dst == (__int16)__dst)
    {
      *a3 = __dst;
      return 1;
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v8);
      if ((v9 & 1) != 0)
        v7 = *(_BYTE **)&v10[7];
      else
        v7 = v10;
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Integer of type %s expected. Value (%lld) is out of range.", (re::DynamicString *)v11, v7, "Int16", __dst);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, (uint64_t)v11);
      if (*(_QWORD *)&v11[0])
      {
        if ((BYTE8(v11[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v11[0] + 40))();
        memset(v11, 0, sizeof(v11));
      }
      if (v8)
      {
        if ((v9 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v8 + 40))();
      }
      return 0;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<int>(uint64_t a1, const char *a2, int a3, int *a4, char a5)
{
  uint64_t v5;
  _anonymous_namespace_ *v10;
  const char *v11;
  int *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v18 = 0;
  v5 = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v18, 0);
  if ((_DWORD)v5)
  {
    if ((a5 & 1) != 0)
    {
      v17 = 0;
      v12 = &v17;
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
    }
    else
    {
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
      v12 = a4;
    }
    re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<int>(v10, v11, v12);
    for (i = v18; i; --i)
      re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
    if ((a5 & 2) == 0)
    {
      v14 = *(_QWORD *)(a1 + 128);
      v15 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v14 + 48 * v15) != 2)
        ++*(_QWORD *)(v14 + 48 * v15 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeSignedInteger<long long>(uint64_t a1, const char *a2, int a3, _QWORD *a4, char a5)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t __dst;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v14 = 0;
  v5 = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v14, 0);
  if ((_DWORD)v5)
  {
    if ((a5 & 1) != 0)
    {
      __dst = 0;
      re::EncoderOPACK<re::FixedArrayInputStream>::readInteger(a1, a2, (char *)&__dst, (uint64_t)"Int64");
    }
    else
    {
      __dst = 0;
      if (re::EncoderOPACK<re::FixedArrayInputStream>::readInteger(a1, a2, (char *)&__dst, (uint64_t)"Int64"))*a4 = __dst;
    }
    for (i = v14; i; --i)
      re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
    if ((a5 & 2) == 0)
    {
      v11 = *(_QWORD *)(a1 + 128);
      v12 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v11 + 48 * v12) != 2)
        ++*(_QWORD *)(v11 + 48 * v12 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned char>(uint64_t a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t v5;
  _anonymous_namespace_ *v10;
  const char *v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v18 = 0;
  v5 = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v18, 0);
  if ((_DWORD)v5)
  {
    if ((a5 & 1) != 0)
    {
      v17 = 0;
      v12 = &v17;
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
    }
    else
    {
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
      v12 = a4;
    }
    re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<unsigned char>(v10, v11, v12);
    for (i = v18; i; --i)
      re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
    if ((a5 & 2) == 0)
    {
      v14 = *(_QWORD *)(a1 + 128);
      v15 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v14 + 48 * v15) != 2)
        ++*(_QWORD *)(v14 + 48 * v15 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<unsigned char>(_anonymous_namespace_ *a1, const char *a2, _BYTE *a3)
{
  uint64_t result;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  _BYTE v10[23];
  _OWORD v11[2];
  unint64_t __dst;

  __dst = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::readInteger((uint64_t)a1, a2, (char *)&__dst, (uint64_t)"UInt8");
  if ((_DWORD)result)
  {
    if (__dst > 0xFF)
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v8);
      if ((v9 & 1) != 0)
        v7 = *(_BYTE **)&v10[7];
      else
        v7 = v10;
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Integer of type %s expected. Value (%lld) is out of range.", (re::DynamicString *)v11, v7, "UInt8", __dst);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, (uint64_t)v11);
      if (*(_QWORD *)&v11[0])
      {
        if ((BYTE8(v11[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v11[0] + 40))();
        memset(v11, 0, sizeof(v11));
      }
      if (v8)
      {
        if ((v9 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v8 + 40))();
      }
      return 0;
    }
    else
    {
      *a3 = __dst;
      return 1;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned short>(uint64_t a1, const char *a2, int a3, __int16 *a4, char a5)
{
  uint64_t v5;
  _anonymous_namespace_ *v10;
  const char *v11;
  __int16 *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  __int16 v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v18 = 0;
  v5 = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v18, 0);
  if ((_DWORD)v5)
  {
    if ((a5 & 1) != 0)
    {
      v17 = 0;
      v12 = &v17;
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
    }
    else
    {
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
      v12 = a4;
    }
    re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<unsigned short>(v10, v11, v12);
    for (i = v18; i; --i)
      re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
    if ((a5 & 2) == 0)
    {
      v14 = *(_QWORD *)(a1 + 128);
      v15 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v14 + 48 * v15) != 2)
        ++*(_QWORD *)(v14 + 48 * v15 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<unsigned short>(_anonymous_namespace_ *a1, const char *a2, _WORD *a3)
{
  uint64_t result;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  _BYTE v10[23];
  _OWORD v11[2];
  unint64_t __dst;

  __dst = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::readInteger((uint64_t)a1, a2, (char *)&__dst, (uint64_t)"UInt16");
  if ((_DWORD)result)
  {
    if (__dst >> 16)
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v8);
      if ((v9 & 1) != 0)
        v7 = *(_BYTE **)&v10[7];
      else
        v7 = v10;
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Integer of type %s expected. Value (%lld) is out of range.", (re::DynamicString *)v11, v7, "UInt16", __dst);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, (uint64_t)v11);
      if (*(_QWORD *)&v11[0])
      {
        if ((BYTE8(v11[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v11[0] + 40))();
        memset(v11, 0, sizeof(v11));
      }
      if (v8)
      {
        if ((v9 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v8 + 40))();
      }
      return 0;
    }
    else
    {
      *a3 = __dst;
      return 1;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned int>(uint64_t a1, const char *a2, int a3, int *a4, char a5)
{
  uint64_t v5;
  _anonymous_namespace_ *v10;
  const char *v11;
  int *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v18 = 0;
  v5 = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v18, 0);
  if ((_DWORD)v5)
  {
    if ((a5 & 1) != 0)
    {
      v17 = 0;
      v12 = &v17;
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
    }
    else
    {
      v10 = (_anonymous_namespace_ *)a1;
      v11 = a2;
      v12 = a4;
    }
    re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<unsigned int>(v10, v11, v12);
    for (i = v18; i; --i)
      re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
    if ((a5 & 2) == 0)
    {
      v14 = *(_QWORD *)(a1 + 128);
      v15 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v14 + 48 * v15) != 2)
        ++*(_QWORD *)(v14 + 48 * v15 + 32);
    }
  }
  return v5;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::readIntegerAs<unsigned int>(_anonymous_namespace_ *a1, const char *a2, _DWORD *a3)
{
  uint64_t result;
  _BYTE *v7;
  uint64_t v8;
  char v9;
  _BYTE v10[23];
  _OWORD v11[2];
  unint64_t __dst;

  __dst = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::readInteger((uint64_t)a1, a2, (char *)&__dst, (uint64_t)"UInt32");
  if ((_DWORD)result)
  {
    if (HIDWORD(__dst))
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v8);
      if ((v9 & 1) != 0)
        v7 = *(_BYTE **)&v10[7];
      else
        v7 = v10;
      re::DynamicString::format((re::DynamicString *)"Failed to deserialize \"%s\". Integer of type %s expected. Value (%lld) is out of range.", (re::DynamicString *)v11, v7, "UInt32", __dst);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, (uint64_t)v11);
      if (*(_QWORD *)&v11[0])
      {
        if ((BYTE8(v11[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v11[0] + 40))();
        memset(v11, 0, sizeof(v11));
      }
      if (v8)
      {
        if ((v9 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v8 + 40))();
      }
      return 0;
    }
    else
    {
      *a3 = __dst;
      return 1;
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeUnsignedInteger<unsigned long long>(uint64_t a1, const char *a2, int a3, char *a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v18 = 0;
  v5 = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v18, 0);
  if ((_DWORD)v5)
  {
    if ((a5 & 1) != 0)
    {
      v17 = 0;
      v12 = (char *)&v17;
      v10 = a1;
      v11 = a2;
    }
    else
    {
      v10 = a1;
      v11 = a2;
      v12 = a4;
    }
    re::EncoderOPACK<re::FixedArrayInputStream>::readUint64(v10, v11, v12);
    for (i = v18; i; --i)
      re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(a1);
    if ((a5 & 2) == 0)
    {
      v14 = *(_QWORD *)(a1 + 128);
      v15 = *(_QWORD *)(a1 + 112) - 1;
      if (*(_BYTE *)(v14 + 48 * v15) != 2)
        ++*(_QWORD *)(v14 + 48 * v15 + 32);
    }
  }
  return v5;
}

uint64_t re::internal::serializeEnumAsBinary<re::EncoderOPACK<re::FixedArrayInputStream>>(uint64_t a1, const char *a2, const re::TypeInfo *a3, void *a4, re::internal *a5, re::internal *a6, int a7)
{
  re::internal *v11;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  int v22;
  re::internal *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unsigned int EnumConstantIndex;
  unsigned int v31;
  re::internal::TypeTranslationTable *v32;
  const void *v33;
  int v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[4];
  uint64_t __src;
  _QWORD v58[4];

  if (a7)
  {
    v11 = *(re::internal **)(a1 + 208);
    re::TypeRegistry::typeInfo(*(_QWORD **)a6, *(_QWORD *)(*((_QWORD *)a6 + 2) + 72), &__src);
    re::TypeInfo::TypeInfo((uint64_t)v56, (uint64_t)v58);
    re::internal::translateType(v11, (const re::TypeRegistry *)v56, (uint64_t)&__src);
    if (!*(_BYTE *)(a1 + 64))
      return (*(uint64_t (**)(uint64_t, const char *, const re::TypeInfo *, _QWORD, uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, 0, &__src, &__src, 1);
    return 0;
  }
  v15 = *(_QWORD **)a5;
  if (a5 == a6)
    goto LABEL_8;
  if (v15 == *(_QWORD **)a6)
  {
    v16 = **((_QWORD **)a5 + 2);
    v17 = (uint64_t *)*((_QWORD *)a6 + 2);
    v18 = *v17;
    if ((unsigned __int16)v16 == (unsigned __int16)*v17)
    {
      v20 = WORD1(v16) == WORD1(v18);
      v19 = (v18 ^ v16) & 0xFFFFFF00000000;
      v20 = v20 && v19 == 0;
      if (v20)
        goto LABEL_8;
    }
LABEL_21:
    v23 = *(re::internal **)(a1 + 208);
    re::TypeRegistry::typeInfo(v15, v17[9], &__src);
    re::TypeInfo::TypeInfo((uint64_t)v56, (uint64_t)v58);
    re::internal::translateType(v23, (const re::TypeRegistry *)v56, (uint64_t)&__src);
    if (*(_DWORD *)(v58[1] + 8) < 9u)
    {
      v55 = 0;
      if (!*(_BYTE *)(a1 + 64)
        && (*(unsigned int (**)(uint64_t, const char *, const re::TypeInfo *, uint64_t *, uint64_t *, uint64_t *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a2, a3, &v55, &__src, &__src, 0))
      {
        EnumConstantIndex = re::internal::getEnumConstantIndex(a6, (const re::TypeInfo *)&v55, v29);
        if ((EnumConstantIndex & 0x80000000) != 0)
        {
          v41 = v55;
          re::TypeInfo::name(a6);
          re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, a2, "Value %zu is not a valid enum constant of \"%s\".", v42, v43, v44, v45, v46, v41);
        }
        else
        {
          v31 = EnumConstantIndex;
          v32 = *(re::internal::TypeTranslationTable **)(*(_QWORD *)a6 + 856);
          if (v32)
          {
            v33 = (const void *)re::internal::TypeTranslationTable::translateSerializedEnum(v32, a6, v31, a5);
            if (v33)
            {
              memcpy(a4, v33, *(unsigned int *)(*((_QWORD *)a5 + 2) + 8));
              v34 = 0;
              return v34 == 0;
            }
          }
          v56[0] = re::TypeInfo::enumConstants(a6);
          v56[1] = v47;
          v48 = *(_QWORD *)(re::Slice<re::EnumConstant>::operator[](v56, v31) + 16);
          re::TypeInfo::name(a5);
          re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, a2, "Serialized enum constant \"%s\" does not exist in runtime type \"%s\".", v49, v50, v51, v52, v53, v48);
        }
      }
    }
    else
    {
      v54 = re::TypeInfo::name((re::TypeInfo *)&__src)[1];
      re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, a2, "Enum type \"%s\" has invalid size: %zu bytes.", v24, v25, v26, v27, v28, v54);
    }
    v34 = 1;
    return v34 == 0;
  }
  if (!re::areSameTranslatedVersion(a5, a6, a3))
  {
    v15 = *(_QWORD **)a6;
    v17 = (uint64_t *)*((_QWORD *)a6 + 2);
    goto LABEL_21;
  }
  v15 = *(_QWORD **)a5;
LABEL_8:
  re::TypeRegistry::typeInfo(v15, *(_QWORD *)(*((_QWORD *)a5 + 2) + 72), &__src);
  re::TypeInfo::TypeInfo((uint64_t)v56, (uint64_t)v58);
  __src = 0;
  if (*(_BYTE *)(a1 + 64))
    return 0;
  v22 = (*(uint64_t (**)(uint64_t, const char *, const re::TypeInfo *, uint64_t *, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a2, a3, &__src, v56, v56, 0);
  result = 0;
  if (v22)
  {
    if ((re::internal::getEnumConstantIndex(a5, (const re::TypeInfo *)&__src, v21) & 0x80000000) != 0)
    {
      v35 = __src;
      re::TypeInfo::name(a5);
      re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, a2, "Value %zu is not a valid enum constant of \"%s\".", v36, v37, v38, v39, v40, v35);
      return 0;
    }
    memcpy(a4, &__src, *(unsigned int *)(*((_QWORD *)a5 + 2) + 8));
    return 1;
  }
  return result;
}

double re::EncoderOPACK<re::FixedArrayInputStream>::beginOptional(uint64_t a1, const char *a2, int a3, _BYTE *a4, int a5)
{
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 __dst;
  _OWORD v21[3];
  uint64_t v22;

  if (!*(_BYTE *)(a1 + 40))
  {
    v22 = 0;
    if ((re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v22, 0) & 1) != 0)
    {
      __dst = 0;
      if (*(_BYTE *)(a1 + 40))
      {
LABEL_4:
        v9 = *a4;
        LOBYTE(v15) = 3;
        DWORD1(v15) = a5;
        *((_QWORD *)&v15 + 1) = a2;
        v16 = 0;
        v18 = 0;
        v19 = 0;
        v17 = v9;
        result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v15);
        *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v22;
        return result;
      }
      v11 = *(_QWORD *)(a1 + 168);
      if (v11)
      {
        v12 = v11 - 1;
        v13 = *(unsigned __int8 *)(a1 + v11 - 1 + 160);
        *(_QWORD *)(a1 + 168) = v12;
      }
      else
      {
        if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dst, 1uLL) & 1) == 0)
        {
          re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Optional");
          goto LABEL_4;
        }
        v13 = __dst;
      }
      if (v13 == 4)
      {
        *a4 = 0;
      }
      else
      {
        *a4 = 1;
        v14 = *(_QWORD *)(a1 + 168);
        if (v14 <= 7)
        {
          *(_QWORD *)(a1 + 168) = v14 + 1;
          *(_BYTE *)(a1 + v14 + 160) = v13;
        }
      }
      goto LABEL_4;
    }
    *a4 = 0;
    LOBYTE(v21[0]) = 3;
    DWORD1(v21[0]) = a5;
    *((_QWORD *)&v21[0] + 1) = a2;
    memset(&v21[1], 0, 32);
    return re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, v21);
  }
  return result;
}

_anonymous_namespace_ *re::EncoderOPACK<re::FixedArrayInputStream>::endOptional(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  const char *v8;
  _anonymous_namespace_ *v9;
  char v10;
  _BYTE v11[23];
  _OWORD v12[2];

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14) - 1;
    if (*(_QWORD *)(v2 + 48 * v3 + 32) == *(_QWORD *)(v2 + 48 * v3 + 24))
    {
      for (i = *(_QWORD *)(v2 + 48 * v3 + 16); i; --i)
        re::EncoderOPACK<re::FixedArrayInputStream>::skipObject((uint64_t)v1);
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, 3);
      v5 = *((_QWORD *)v1 + 16);
      v6 = *((_QWORD *)v1 + 14) - 1;
      if (*(_BYTE *)(v5 + 48 * v6) != 2)
        ++*(_QWORD *)(v5 + 48 * v6 + 32);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v9);
      if ((v10 & 1) != 0)
        v7 = *(_BYTE **)&v11[7];
      else
        v7 = v11;
      if (*(uint64_t *)(*((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14) - 24) <= 0)
        v8 = "Optional should not have a value.";
      else
        v8 = "Optional requires a value.";
      re::DynamicString::format((re::DynamicString *)"Failed to serialize optional type \"%s\". %s", (re::DynamicString *)v12, v7, v8);
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)v12);
      if (*(_QWORD *)&v12[0])
      {
        if ((BYTE8(v12[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v12[0] + 40))();
        memset(v12, 0, sizeof(v12));
      }
      result = v9;
      if (v9 && (v10 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::beginBLOB(uint64_t a1, const char *a2, int a3, uint64_t *a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v16 = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v16, 0);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::readDataTag(a1, a2, a4);
    v10 = *a4;
    LOBYTE(v11) = 4;
    DWORD1(v11) = a5;
    *((_QWORD *)&v11 + 1) = a2;
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = v10;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v11);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v16;
    return *(_BYTE *)(a1 + 40) == 0;
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::serializeBLOB(uint64_t result, char *a2, char a3)
{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(result + 40))
    return result;
  v4 = (_anonymous_namespace_ *)result;
  v5 = *(_QWORD *)(result + 128) + 48 * *(_QWORD *)(result + 112);
  v6 = *(_QWORD *)(v5 - 24);
  v7 = *(_QWORD *)(result + 168);
  if (v7)
  {
    if (v7 >= v6)
      v8 = *(_QWORD *)(v5 - 24);
    else
      v8 = *(_QWORD *)(result + 168);
    v9 = v7 - v8;
    if ((uint64_t)(v7 - 1) >= (uint64_t)(v7 - v8))
    {
      do
      {
        *a2++ = *(_BYTE *)(result + 159 + v7);
        v10 = v7 - 2;
        --v7;
      }
      while (v10 >= v9);
    }
    *(_QWORD *)(result + 168) = v9;
    v11 = v6 - v8;
    if (v6 == v8)
      goto LABEL_15;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(v5 - 24);
  if (v6)
  {
LABEL_11:
    if ((a3 & 1) != 0)
      a2 = 0;
    result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)result, a2, v11);
    if ((result & 1) == 0)
      result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType(v4, 0, (uint64_t)"BLOB");
  }
LABEL_15:
  if ((a3 & 2) == 0)
  {
    v12 = *((_QWORD *)v4 + 16);
    v13 = *((_QWORD *)v4 + 14) - 1;
    if (*(_BYTE *)(v12 + 48 * v13) != 2)
      *(_QWORD *)(v12 + 48 * v13 + 32) += v6;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderOPACK<re::FixedArrayInputStream>::endBLOB(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  char v10;
  _BYTE v11[23];
  _OWORD v12[2];

  if (!*((_BYTE *)result + 40))
  {
    v1 = result;
    v2 = *((_QWORD *)result + 16);
    v3 = *((_QWORD *)result + 14) - 1;
    if (*(_QWORD *)(v2 + 48 * v3 + 32) == *(_QWORD *)(v2 + 48 * v3 + 24))
    {
      for (i = *(_QWORD *)(v2 + 48 * v3 + 16); i; --i)
        re::EncoderOPACK<re::FixedArrayInputStream>::skipObject((uint64_t)v1);
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, 4);
      v5 = *((_QWORD *)v1 + 16);
      v6 = *((_QWORD *)v1 + 14) - 1;
      if (*(_BYTE *)(v5 + 48 * v6) != 2)
        ++*(_QWORD *)(v5 + 48 * v6 + 32);
    }
    else
    {
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v9);
      if ((v10 & 1) != 0)
        v7 = *(_BYTE **)&v11[7];
      else
        v7 = v11;
      v8 = *((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14);
      re::DynamicString::format((re::DynamicString *)"Failed to serialize BLOB \"%s\". Expected number of bytes: %lld. Actual number of bytes: %lld.", (re::DynamicString *)v12, v7, *(_QWORD *)(v8 - 24), *(_QWORD *)(v8 - 16));
      re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)v12);
      if (*(_QWORD *)&v12[0])
      {
        if ((BYTE8(v12[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v12[0] + 40))();
        memset(v12, 0, sizeof(v12));
      }
      result = v9;
      if (v9 && (v10 & 1) != 0)
        return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::beginArray(uint64_t a1, const char *a2, int a3, char *a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v16 = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v16, 0);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::readArrayTag(a1, a2, a4);
    v10 = *(_QWORD *)a4;
    LOBYTE(v11) = 5;
    DWORD1(v11) = a5;
    *((_QWORD *)&v11 + 1) = a2;
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = v10;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v11);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v16;
    return *(_BYTE *)(a1 + 40) == 0;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderOPACK<re::FixedArrayInputStream>::endArray(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  const char *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  char v15;
  _BYTE v16[23];
  _OWORD __dst[2];

  if (*((_BYTE *)result + 40))
    return result;
  v1 = result;
  v2 = *((_QWORD *)result + 16);
  v3 = *((_QWORD *)result + 14) - 1;
  v4 = *(_QWORD *)(v2 + 48 * v3 + 32);
  if (v4 == *(_QWORD *)(v2 + 48 * v3 + 24))
  {
    if (v4 < 0xF)
    {
LABEL_22:
      for (i = *(_QWORD *)(v2 + 48 * v3 + 16); i; --i)
        re::EncoderOPACK<re::FixedArrayInputStream>::skipObject((uint64_t)v1);
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, 5);
      v12 = *((_QWORD *)v1 + 16);
      v13 = *((_QWORD *)v1 + 14) - 1;
      if (*(_BYTE *)(v12 + 48 * v13) != 2)
        ++*(_QWORD *)(v12 + 48 * v13 + 32);
      return result;
    }
    LOBYTE(__dst[0]) = 0;
    v5 = *((_QWORD *)result + 21);
    if (v5)
    {
      v6 = v5 - 1;
      v7 = *((unsigned __int8 *)result + v6 + 160);
      LOBYTE(__dst[0]) = v7;
      *((_QWORD *)v1 + 21) = v6;
    }
    else
    {
      if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>(result, (char *)__dst, 1uLL))
      {
        re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType(v1, 0, (uint64_t)"Array");
LABEL_21:
        v2 = *((_QWORD *)v1 + 16);
        v3 = *((_QWORD *)v1 + 14) - 1;
        goto LABEL_22;
      }
      v7 = LOBYTE(__dst[0]);
    }
    if (v7 != 3)
    {
      v10 = re::OPACK::toString(v7);
      return (_anonymous_namespace_ *)re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag(v1, (uint64_t)"Array", (uint64_t)v10);
    }
    goto LABEL_21;
  }
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v14);
  if ((v15 & 1) != 0)
    v8 = *(_BYTE **)&v16[7];
  else
    v8 = v16;
  v9 = *((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14);
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize array \"%s\". Expected number of elements: %lld. Actual number of elements: %lld.", (re::DynamicString *)__dst, v8, *(_QWORD *)(v9 - 24), *(_QWORD *)(v9 - 16));
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)__dst);
  if (*(_QWORD *)&__dst[0])
  {
    if ((BYTE8(__dst[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&__dst[0] + 40))();
    memset(__dst, 0, sizeof(__dst));
  }
  result = v14;
  if (v14 && (v15 & 1) != 0)
    return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
  return result;
}

uint64_t re::`anonymous namespace'::resizeArray<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, void **a2, re::ArrayAccessor *a3, uint64_t a4, const re::TypeInfo *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  _BYTE v22[16];
  uint64_t v23;
  _BYTE v24[8];
  _QWORD v25[12];

  if ((const re::TypeInfo *)a4 == a5)
    return 1;
  v25[10] = v8;
  v25[11] = v9;
  v14 = *((_QWORD *)a3 + 2);
  if ((*(_DWORD *)(v14 + 84) & 0xFFFFFF) != 0)
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(v14 + 72), v24);
    re::TypeInfo::TypeInfo((uint64_t)v22, (uint64_t)v25);
    v21 = !is_mul_ok(*(unsigned int *)(v23 + 8), (unint64_t)a5);
    if (is_mul_ok(*(unsigned int *)(v23 + 8), (unint64_t)a5))
      re::ArrayAccessor::reset(a3, a2, *(re::Allocator **)(a1 + 48), a5);
    else
      re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, 0, "Size overflow during deserialization. Element size = %zu, count = %zu", v16, v17, v18, v19, v20, *(_DWORD *)(v23 + 8));
    return !v21;
  }
  else
  {
    re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, 0, "Invalid array size. Expected size = %zu, actual size = %zu", a4, (uint64_t)a5, a6, a7, a8, a4);
    return 0;
  }
}

uint64_t re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setError(_anonymous_namespace_ *a1, const char *a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _BYTE *v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  _BYTE v17[23];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21[3];
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v24 = 0;
  v25 = 0;
  v26 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  v22 = &a9;
  re::DynamicString::vassignf((re::DynamicString *)&v23, a3, &a9);
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(a1, a2, (re::DynamicString *)&v15);
  if ((v16 & 1) != 0)
    v12 = *(_BYTE **)&v17[7];
  else
    v12 = v17;
  if ((v24 & 1) != 0)
    v13 = v25;
  else
    v13 = (char *)&v24 + 1;
  re::DynamicString::format((re::DynamicString *)"Failed to %s \"%s\". Reason: %s", (re::DynamicString *)&v18, "deserialize", v12, v13);
  *(_QWORD *)&v21[0] = 400;
  *((_QWORD *)&v21[0] + 1) = &re::FoundationErrorCategory(void)::instance;
  *(_QWORD *)&v21[1] = v18;
  *((_QWORD *)&v21[2] + 1) = v20;
  *(__int128 *)((char *)&v21[1] + 8) = v19;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)a1, v21);
  if (*(_QWORD *)&v21[1])
  {
    if ((BYTE8(v21[1]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v21[1] + 40))();
    memset(&v21[1], 0, 32);
  }
  if (v15 && (v16 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v15 + 40))();
  result = (uint64_t)v23;
  if (v23)
  {
    if ((v24 & 1) != 0)
      return (*(uint64_t (**)(void))(*v23 + 40))();
  }
  return result;
}

uint64_t re::`anonymous namespace'::resizeList<re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  void (*v19)(uint64_t, _BYTE *, uint64_t, unint64_t);
  _BYTE v20[16];
  uint64_t v21;
  _BYTE v22[8];
  _QWORD v23[12];

  if (a4 == a5)
    return 1;
  v23[10] = v5;
  v23[11] = v6;
  re::TypeRegistry::typeInfo(*(_QWORD **)a3, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 72), v22);
  re::TypeInfo::TypeInfo((uint64_t)v20, (uint64_t)v23);
  v17 = !is_mul_ok(*(unsigned int *)(v21 + 8), a5);
  if (is_mul_ok(*(unsigned int *)(v21 + 8), a5))
  {
    v18 = *(_QWORD *)(a1 + 48);
    v19 = *(void (**)(uint64_t, _BYTE *, uint64_t, unint64_t))(*(_QWORD *)(a3 + 16) + 88);
    re::TypeInfo::TypeInfo((uint64_t)v22, a3);
    v19(a2, v22, v18, a5);
  }
  else
  {
    re::Serializer<re::EncoderOPACK<re::FixedArrayInputStream>>::setError(a1, 0, "Size overflow during deserialization. Element size = %zu, count = %zu", v12, v13, v14, v15, v16, *(_DWORD *)(v21 + 8));
  }
  return !v17;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::beginDictionary(uint64_t a1, const char *a2, int a3, char *a4, int a5)
{
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v16 = 0;
  result = re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v16, 0);
  if ((_DWORD)result)
  {
    re::EncoderOPACK<re::FixedArrayInputStream>::readDictionaryTag(a1, a2, a4);
    v10 = *(_QWORD *)a4;
    LOBYTE(v11) = 6;
    DWORD1(v11) = a5;
    *((_QWORD *)&v11 + 1) = a2;
    v12 = 0;
    v14 = 0;
    v15 = 0;
    v13 = v10;
    re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v11);
    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v16;
    return *(_BYTE *)(a1 + 40) == 0;
  }
  return result;
}

_anonymous_namespace_ *re::EncoderOPACK<re::FixedArrayInputStream>::endDictionary(_anonymous_namespace_ *result)
{
  _anonymous_namespace_ *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  const char *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  char v15;
  _BYTE v16[23];
  _OWORD __dst[2];

  if (*((_BYTE *)result + 40))
    return result;
  v1 = result;
  v2 = *((_QWORD *)result + 16);
  v3 = *((_QWORD *)result + 14) - 1;
  v4 = *(_QWORD *)(v2 + 48 * v3 + 32);
  if (v4 == *(_QWORD *)(v2 + 48 * v3 + 24))
  {
    if (v4 < 0xF)
    {
LABEL_22:
      for (i = *(_QWORD *)(v2 + 48 * v3 + 16); i; --i)
        re::EncoderOPACK<re::FixedArrayInputStream>::skipObject((uint64_t)v1);
      result = re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState(v1, 6);
      v12 = *((_QWORD *)v1 + 16);
      v13 = *((_QWORD *)v1 + 14) - 1;
      if (*(_BYTE *)(v12 + 48 * v13) != 2)
        ++*(_QWORD *)(v12 + 48 * v13 + 32);
      return result;
    }
    LOBYTE(__dst[0]) = 0;
    v5 = *((_QWORD *)result + 21);
    if (v5)
    {
      v6 = v5 - 1;
      v7 = *((unsigned __int8 *)result + v6 + 160);
      LOBYTE(__dst[0]) = v7;
      *((_QWORD *)v1 + 21) = v6;
    }
    else
    {
      if (!re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>(result, (char *)__dst, 1uLL))
      {
        re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType(v1, 0, (uint64_t)"Dictionary");
LABEL_21:
        v2 = *((_QWORD *)v1 + 16);
        v3 = *((_QWORD *)v1 + 14) - 1;
        goto LABEL_22;
      }
      v7 = LOBYTE(__dst[0]);
    }
    if (v7 != 3)
    {
      v10 = re::OPACK::toString(v7);
      return (_anonymous_namespace_ *)re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag(v1, (uint64_t)"Dictionary", (uint64_t)v10);
    }
    goto LABEL_21;
  }
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::combineLabels(result, 0, (re::DynamicString *)&v14);
  if ((v15 & 1) != 0)
    v8 = *(_BYTE **)&v16[7];
  else
    v8 = v16;
  v9 = *((_QWORD *)v1 + 16) + 48 * *((_QWORD *)v1 + 14);
  re::DynamicString::format((re::DynamicString *)"Failed to deserialize dictionary \"%s\". Expected number of entries: %lld. Actual number of entries: %lld.", (re::DynamicString *)__dst, v8, *(_QWORD *)(v9 - 24), *(_QWORD *)(v9 - 16));
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::setError((uint64_t)v1, (uint64_t)__dst);
  if (*(_QWORD *)&__dst[0])
  {
    if ((BYTE8(__dst[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&__dst[0] + 40))();
    memset(__dst, 0, sizeof(__dst));
  }
  result = v14;
  if (v14 && (v15 & 1) != 0)
    return (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 40))();
  return result;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::beginObject(uint64_t a1, const char *a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  const char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 __dst;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 40))
    return 0;
  v20 = 0;
  if (!re::EncoderOPACK<re::FixedArrayInputStream>::advance(a1, a2, a3, &v20, 0))
    return 0;
  __dst = 0;
  if (*(_BYTE *)(a1 + 40))
    return 0;
  v9 = *(_QWORD *)(a1 + 168);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = *(unsigned __int8 *)(a1 + v10 + 160);
    __dst = *(_BYTE *)(a1 + v10 + 160);
    *(_QWORD *)(a1 + 168) = v10;
  }
  else
  {
    if ((re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)a1, (char *)&__dst, 1uLL) & 1) == 0)
    {
      re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)a1, a2, (uint64_t)"Object");
      return 0;
    }
    v11 = __dst;
  }
  if (v11 != 223 && v11 != 239)
  {
    v13 = re::OPACK::toString(v11);
    re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>::setErrorUnexpectedTag((_anonymous_namespace_ *)a1, (uint64_t)"Object", (uint64_t)v13);
    return 0;
  }
  v7 = 1;
  if (v11 == 223)
    v12 = 1;
  else
    v12 = 2;
  LOBYTE(v14) = v12;
  DWORD1(v14) = a4;
  *((_QWORD *)&v14 + 1) = a2;
  v15 = 0;
  v16 = 0;
  v17 = 0xFFFFFFFF80000000;
  v18 = 0;
  re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::pushState((_QWORD *)a1, &v14);
  *(_QWORD *)(*(_QWORD *)(a1 + 128) + 48 * *(_QWORD *)(a1 + 112) - 32) = v20;
  return v7;
}

uint64_t re::EncoderOPACK<re::FixedArrayInputStream>::endObject(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 __dst;

  if (*(_BYTE *)(result + 40))
    return result;
  v1 = result;
  __dst = 0;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 168);
    if (v2)
    {
      v3 = v2 - 1;
      v4 = *(unsigned __int8 *)(v1 + v2 - 1 + 160);
      __dst = v4;
      *(_QWORD *)(v1 + 168) = v3;
      goto LABEL_7;
    }
    result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::process<re::FixedArrayInputStream,0>((_QWORD *)v1, (char *)&__dst, 1uLL);
    if (!(_DWORD)result)
      break;
    v4 = __dst;
LABEL_7:
    if (v4 == 3)
      goto LABEL_13;
    v5 = *(_QWORD *)(v1 + 168);
    if (v5 <= 7)
    {
      *(_QWORD *)(v1 + 168) = v5 + 1;
      *(_BYTE *)(v1 + v5 + 160) = v4;
    }
    result = re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(v1);
    if (*(_BYTE *)(v1 + 40))
      return result;
  }
  result = re::Encoder<re::EncoderOPACK<re::FixedArrayInputStream>,re::FixedArrayInputStream>::setErrorWithType((_anonymous_namespace_ *)v1, 0, (uint64_t)"Object");
LABEL_13:
  if (!*(_BYTE *)(v1 + 40))
  {
    v6 = *(_QWORD *)(v1 + 128);
    v7 = *(_QWORD *)(v1 + 112) - 1;
    v8 = *(_QWORD *)(v6 + 48 * v7 + 16);
    if (v8)
    {
      do
      {
        --v8;
        re::EncoderOPACK<re::FixedArrayInputStream>::skipObject(v1);
      }
      while (v8);
      v6 = *(_QWORD *)(v1 + 128);
      v7 = *(_QWORD *)(v1 + 112) - 1;
    }
    result = (uint64_t)re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::popState((_anonymous_namespace_ *)v1, *(unsigned __int8 *)(v6 + 48 * v7));
    v9 = *(_QWORD *)(v1 + 128);
    v10 = *(_QWORD *)(v1 + 112) - 1;
    if (*(_BYTE *)(v9 + 48 * v10) != 2)
      ++*(_QWORD *)(v9 + 48 * v10 + 32);
  }
  return result;
}

