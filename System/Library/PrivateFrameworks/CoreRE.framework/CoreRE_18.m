uint64_t *re::IntrospectionInfo<re::Optional<unsigned long long>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info = (uint64_t)&off_24ED719C8;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = (re *)re::introspect_uint64_t((re *)1, a2);
  if (re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info, 0);
    qword_255803200 = 0x100000000DLL;
    dword_255803208 = v11;
    word_25580320C = 0;
    *(_QWORD *)&xmmword_255803210 = 0;
    *((_QWORD *)&xmmword_255803210 + 1) = 0xFFFFFFFFLL;
    qword_255803220 = v10;
    unk_255803228 = 0;
    re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info = (uint64_t)&off_24ED719C8;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_255803210 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::Optional<unsigned long long>>::get(BOOL)::info;
}

uint64_t *re::ecs2::allocInfo_AnchorComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254117628);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254117628))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117668, 0);
    *(uint64_t *)((char *)&qword_254117678 + 6) = 0;
    qword_254117678 = 0;
    qword_254117688 = 0;
    qword_254117690 = 0xFFFFFFFFLL;
    qword_254117668 = (uint64_t)&off_24ED7DAA8;
    qword_254117698 = (uint64_t)"AnchorComponent";
    dword_2541176A0 = 0;
    xmmword_2541176A8 = 0u;
    unk_2541176B8 = 0u;
    xmmword_2541176C8 = 0u;
    qword_2541176D8 = 0;
    __cxa_guard_release(&qword_254117628);
  }
  return &qword_254117668;
}

void re::ecs2::initInfo_AnchorComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  __int128 v32;

  v31[0] = 0x61C8416D6D70DB50;
  v31[1] = "AnchorComponent";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_361);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_361);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254117630 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<unsigned char [16]>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "anchorIdentifier";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254117638 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "worldTransform";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x3000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254117640 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 5;
      *((_QWORD *)v17 + 1) = "m_transformInCoordinateSpace";
      *((_QWORD *)v17 + 2) = "worldTransform";
      qword_254117648 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v20 = re::introspect_BOOL((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "requiresLocalAnchoring";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xB000000003;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254117650 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_BOOL((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "enableShadows";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x2900000004;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254117658 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::IntrospectionInfo<re::Optional<unsigned long long>>::get(1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "lateLatchId";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0xB800000005;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_254117660 = v29;
      __cxa_guard_release(&_MergedGlobals_361);
    }
  }
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254117630;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AnchorComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AnchorComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AnchorComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AnchorComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v30 = v32;
}

double re::internal::defaultConstruct<re::ecs2::AnchorComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::AnchorComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::AnchorComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::AnchorComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_AnchorComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AnchorComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AnchorComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AnchorComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AnchorComponent>, this);
}

void re::TypeBuilderHelper::registerOptional<unsigned long long>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 0x10uLL, 8uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionOptional<unsigned long long>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<unsigned long long>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<unsigned long long>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<unsigned long long>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<unsigned long long>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<unsigned long long>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<unsigned long long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_QWORD *)(result + 8) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::AnchorComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED5A9D8;
  *(_DWORD *)(v1 + 44) = 0;
  *(_QWORD *)(v1 + 33) = 0;
  *(_QWORD *)(v1 + 25) = 0;
  *(_BYTE *)(v1 + 41) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(v1 + 48) = xmmword_2260E5F10;
  *(_OWORD *)(v1 + 64) = xmmword_2260E5F20;
  *(_OWORD *)(v1 + 80) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 96) = xmmword_2260E5D70;
  *(_OWORD *)(v1 + 112) = xmmword_2260E5F10;
  *(_OWORD *)(v1 + 128) = xmmword_2260E5F20;
  *(_OWORD *)(v1 + 144) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 160) = xmmword_2260E5D70;
  *(_BYTE *)(v1 + 184) = 0;
  *(_DWORD *)(v1 + 176) = 0;
  *(_WORD *)(v1 + 200) = 1;
  return result;
}

double re::ecs2::ECSHelper::deepCopyEntity@<D0>(re::ecs2::ECSHelper *this@<X0>, const re::ecs2::Entity *a2@<X1>, BOOL (*a3)(void *, void *)@<X4>, uint64_t a4@<X2>, uint64_t (*a5)(uint64_t, uint64_t)@<X3>, re::ecs2::Entity **a6@<X8>)
{
  _OWORD v9[2];
  int v10;
  uint64_t v11;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v11 = 0x7FFFFFFFLL;
  return re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v9);
}

void `anonymous namespace'::deepCopyEntity(re::ecs2::EntityFactory *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, re::ecs2::Entity **a7@<X8>)
{
  re::ecs2::EntityFactory *v13;
  unint64_t v14;
  uint64_t *v15;
  re::ecs2::Entity *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  re::ecs2::ECSHelper **v23;
  re::ecs2::ECSHelper *v24;
  uint64_t v25;
  const re::ecs2::Component *v26;
  uint64_t v27;
  re::ecs2::Entity *v28;
  char *v29;
  unint64_t v30;
  re::ecs2::Entity *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  re::ecs2::Entity *v35;
  re::ecs2::Entity *v36;
  re::ecs2::EntityFactory *v37;

  v37 = a1;
  if (!a1)
  {
    *a7 = 0;
    return;
  }
  v13 = a1;
  v14 = *((_QWORD *)a1 + 7);
  v15 = re::ecs2::EntityFactory::instance(a1);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v15, v14, a7);
  v16 = *a7;
  v36 = *a7;
  v17 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * ((unint64_t)v13 ^ ((unint64_t)v13 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)v13 ^ ((unint64_t)v13 >> 30))) >> 27));
  v18 = v17 ^ (v17 >> 31);
  if (!*(_QWORD *)a4)
  {
    LODWORD(v19) = 0;
    goto LABEL_10;
  }
  v19 = v18 % *(unsigned int *)(a4 + 24);
  v20 = *(unsigned int *)(*(_QWORD *)(a4 + 8) + 4 * v19);
  if ((_DWORD)v20 == 0x7FFFFFFF)
  {
LABEL_10:
    re::HashTable<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a4, v19, v18, &v37, &v36);
    ++*(_DWORD *)(a4 + 40);
    goto LABEL_11;
  }
  v21 = *(_QWORD *)(a4 + 16);
  while (*(re::ecs2::EntityFactory **)(v21 + 32 * v20 + 16) != v13)
  {
    v20 = *(_DWORD *)(v21 + 32 * v20 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v20 == 0x7FFFFFFF)
      goto LABEL_10;
  }
LABEL_11:
  re::StringID::operator=((unint64_t *)v16 + 34, (uint64_t *)v13 + 34);
  re::ecs2::Entity::setSelfEnabled(v16, (*((_DWORD *)v13 + 72) >> 3) & 1);
  re::ecs2::Entity::setSelfEnabledForFlag(v16, (*((_DWORD *)v13 + 72) >> 13) & 1, 0x2000);
  if (*((_QWORD *)v13 + 7))
  {
    v22 = 0;
    do
    {
      v23 = (re::ecs2::ECSHelper **)re::ecs2::EntityComponentCollection::operator[]((uint64_t)v13 + 32, v22);
      v24 = *v23;
      v25 = (*(uint64_t (**)(re::ecs2::ECSHelper *))(*(_QWORD *)*v23 + 40))(*v23);
      v27 = v25;
      if ((!(_DWORD)a3 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25) & 1) == 0)
        && (!a5 || (a5(v27, a6) & 1) == 0)
        && (*(_BYTE *)(v27 + 40) & 1) == 0)
      {
        re::ecs2::ECSHelper::deepCopyComponent(v24, v26, (uint64_t *)&v36);
        v28 = *a7;
        v35 = v36;
        if (v36)
          v29 = (char *)v36 + 8;
        re::ecs2::EntityComponentCollection::add((uint64_t)v28 + 32, (uint64_t *)&v35, 1);
        if (v35)
        {

          v35 = 0;
        }
        if (v36)

      }
      ++v22;
      v13 = v37;
    }
    while (v22 < *((_QWORD *)v37 + 7));
  }
  if ((a2 & 1) != 0)
  {
    v30 = *((_QWORD *)v13 + 41);
    v31 = *a7;
    if (*((_QWORD *)v31 + 40) < v30)
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)v31 + 39, v30);
      v30 = *((_QWORD *)v13 + 41);
    }
    if (v30)
    {
      v32 = (_QWORD *)*((_QWORD *)v13 + 43);
      v33 = (_QWORD *)((char *)v31 + 304);
      v34 = 8 * v30;
      do
      {
        re::Collection<re::SharedPtr<re::ecs2::Scene>>::add(v33, (uint64_t *)&v36);
        if (v36)

        ++v32;
        v34 -= 8;
      }
      while (v34);
    }
  }
}

_QWORD *`anonymous namespace'::fixUpEntityHandle(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const re::IntrospectionBase ***v5;
  uint64_t v6;
  const re::IntrospectionBase **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v16[0] = &off_24ED71A48;
  v16[1] = a2;
  v17 = v16;
  v4 = a1[7];
  if (v4)
  {
    v5 = (const re::IntrospectionBase ***)a1[9];
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      v8 = (*((uint64_t (**)(const re::IntrospectionBase **))*v7 + 5))(v7);
      v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
      re::IntrospectionWalker::walk(v9, v7, (uint64_t)v16);
      v6 -= 8;
    }
    while (v6);
  }
  v10 = a1[41];
  if (v10)
  {
    v11 = (uint64_t *)a1[43];
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      v12 -= 8;
    }
    while (v12);
  }
  result = v17;
  if (v17 == v16)
  {
    v15 = 4;
    result = v16;
  }
  else
  {
    if (!v17)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void re::ecs2::ECSHelper::deepCopyComponent(re::ecs2::ECSHelper *this@<X0>, const re::ecs2::Component *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t (*v5)(re::ecs2::ECSHelper *);
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  const re::IntrospectionBase **v14;
  _QWORD v15[3];
  _QWORD v16[3];

  if (this)
  {
    v5 = *(uint64_t (**)(re::ecs2::ECSHelper *))((*(uint64_t (**)(re::ecs2::ECSHelper *, const re::ecs2::Component *))(*(_QWORD *)this + 40))(this, a2)+ 8);
    if (v5)
    {
      v6 = v5(this);
      v7 = v6;
      *a3 = v6;
      if (v6)
        v8 = (id)(v6 + 8);

    }
    else
    {
      memset(v15, 0, sizeof(v15));
      v9 = (*(uint64_t (**)(re::ecs2::ECSHelper *))(*(_QWORD *)this + 40))(this);
      v10 = (const re::IntrospectionBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
      v11 = (*(uint64_t (**)(re::ecs2::ECSHelper *))(*(_QWORD *)this + 40))(this);
      v12 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
      v13 = re::globalAllocators(v12);
      v14 = (const re::IntrospectionBase **)*a3;
      v16[0] = v13[2];
      v16[1] = 0;
      v16[2] = v15;
    }
  }
  else
  {
    *a3 = 0;
  }
}

void *re::ecs2::ECSHelper::logIdentifier@<X0>(re::ecs2::ECSHelper **this@<X0>, const re::ecs2::Component *a2@<X1>, const re::ecs2::Entity *a3@<X2>, re::DynamicString *a4@<X8>)
{
  re::ecs2::ECSHelper *v9;
  const char *v10;
  size_t v11;
  const char *v12;
  size_t v13;
  void *result;
  const re::ecs2::Entity *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *((_QWORD *)a4 + 3) = 0;
  re::DynamicString::setCapacity(a4, 0);
  v9 = this[2];
  if (v9)
  {
    re::ecs2::ECSHelper::logIdentifier(v9, a3, (re::DynamicString *)&v15);
    re::DynamicString::operator=(a4, (re::DynamicString *)&v15);
    if (v15 && (v16 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    v10 = ":";
  }
  else
  {
    v17 = 0;
    v18 = 0;
    v15 = a3;
    v16 = 0;
    re::DynamicString::setCapacity(&v15, 0x40uLL);
    re::DynamicString::operator=(a4, (re::DynamicString *)&v15);
    if (v15 && (v16 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    v10 = "<No entity>:";
  }
  v11 = strlen(v10);
  re::DynamicString::append(a4, v10, v11);
  v12 = *(const char **)((*((uint64_t (**)(re::ecs2::ECSHelper **))*this + 5))(this) + 32);
  v13 = strlen(v12);
  result = re::DynamicString::append(a4, v12, v13);
  if (a2)
    return (void *)re::DynamicString::appendf(a4, ".%s", (const char *)a2);
  return result;
}

_anonymous_namespace_ *re::ecs2::ECSHelper::logIdentifier@<X0>(re::ecs2::ECSHelper *this@<X0>, const re::ecs2::Entity *a2@<X1>, re::DynamicString *a3@<X8>)
{
  re::ecs2::ECSHelper *v7;
  re::ecs2::ECSHelper *v8;
  re::ecs2::ECSHelper *v9;
  re::ecs2::ECSHelper *v10;
  uint64_t v11;
  re::ecs2::ECSHelper *v12;
  _BYTE *v13;
  _anonymous_namespace_ *result;
  char v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  const void *v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  re::ecs2::ECSHelper *v32;
  uint64_t *v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t *v37;

  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *(_QWORD *)a3 = a2;
  *((_QWORD *)a3 + 1) = 0;
  re::DynamicString::setCapacity(a3, 0x100uLL);
  v7 = this;
  do
  {
    v8 = v7;
    v7 = (re::ecs2::ECSHelper *)*((_QWORD *)v7 + 3);
  }
  while (v7);
  if (*((_QWORD *)v8 + 2))
  {
    v9 = this;
    do
    {
      v10 = v9;
      v9 = (re::ecs2::ECSHelper *)*((_QWORD *)v9 + 3);
    }
    while (v9);
    v11 = *((_QWORD *)v10 + 2);
    v12 = this;
    if (*(_QWORD *)(v11 + 32) < 2uLL && (v13 = *(_BYTE **)(v11 + 40), v12 = this, v13) && (v12 = this, !*v13))
    {
      v32 = this;
      do
        v32 = (re::ecs2::ECSHelper *)*((_QWORD *)v32 + 3);
      while (v32);
      re::DynamicString::appendf(a3, "<Unnamed scene (%p)>:/");
    }
    else
    {
      do
        v12 = (re::ecs2::ECSHelper *)*((_QWORD *)v12 + 3);
      while (v12);
      re::DynamicString::appendf(a3, "%s:/");
    }
  }
  else
  {
    re::DynamicString::append(a3, "<No scene>:/", 0xCuLL);
  }
  v35 = 1;
  v36 = 0;
  v37 = 0;
  v33 = (uint64_t *)a2;
  v34 = 0;
  result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(&v33, 0);
  v15 = v35 + 2;
  v35 += 2;
  do
  {
    if (!v33)
    {
      result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(&v33, v34 + 1);
      v15 = v35 + 2;
      v35 += 2;
      goto LABEL_28;
    }
    if ((v15 & 1) != 0)
    {
      if (v34 - 8 >= 0xFFFFFFFFFFFFFFF7)
        goto LABEL_28;
      v16 = v34 + 1;
      v18 = 16;
      goto LABEL_24;
    }
    v16 = v34 + 1;
    if (v34 >= v36 && v36 < v16)
    {
      v18 = 2 * v36;
LABEL_24:
      if (v18 <= v16)
        v19 = v16;
      else
        v19 = v18;
      result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,8ul>::setCapacity(&v33, v19);
      v15 = v35;
    }
LABEL_28:
    v20 = (v15 & 1) == 0;
    v21 = v37;
    v22 = v34;
    if (!v20)
      v21 = &v36;
    v21[v34] = (unint64_t)this;
    v23 = v22 + 1;
    v34 = v23;
    v24 = v35;
    v15 = v35 + 2;
    v35 += 2;
    this = (re::ecs2::ECSHelper *)*((_QWORD *)this + 3);
  }
  while (this && (*((_BYTE *)this + 288) & 0x80) == 0);
  v20 = (v24 & 1) == 0;
  v25 = v37;
  if (!v20)
    v25 = &v36;
  v26 = &v25[v23];
  if ((v15 & 1) != 0)
    goto LABEL_37;
  while (1)
  {
    v27 = v37;
    if (v26 == v37)
      break;
    while (1)
    {
      if (v26 != &v27[v34])
        re::DynamicString::append(a3, "/", 1uLL);
      v29 = *--v26;
      v28 = (const void *)v29;
      v30 = *(const char **)(v29 + 280);
      if (*(_QWORD *)(v29 + 272) > 1uLL || *v30)
      {
        v31 = strlen(v30);
        result = (_anonymous_namespace_ *)re::DynamicString::append(a3, v30, v31);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicString::appendf(a3, "<Unnamed entity (%p)>", v28);
      }
      if ((v35 & 1) == 0)
        break;
LABEL_37:
      v27 = &v36;
      if (v26 == &v36)
        return result;
    }
  }
  result = (_anonymous_namespace_ *)v33;
  if (v33)
    return (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *, unint64_t *))(*v33 + 40))(v33, v26);
  return result;
}

void std::__function::__func<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED71A48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED71A48;
  a2[1] = v2;
  return result;
}

void std::__function::__func<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::operator()(uint64_t a1, uint64_t a2, id **a3)
{
  id *v3;
  uint64_t v4;
  char *WeakRetained;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(a2 + 16) != 11)
    return;
  if (*(uint64_t (**)(re::Allocator *, uint64_t, int, id *, id *))(a2 + 88) != re::internal::entityHandleDeepCopy)
    return;
  v3 = *a3;
  if (!**a3)
    return;
  v4 = *(_QWORD *)(a1 + 8);
  WeakRetained = (char *)objc_loadWeakRetained(*a3);
  v6 = WeakRetained - 8;
  if (!WeakRetained)
    v6 = 0;
  if (!*(_QWORD *)v4
    || (v7 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * ((unint64_t)v6 ^ ((unint64_t)v6 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                               * ((unint64_t)v6 ^ ((unint64_t)v6 >> 30))) >> 27)),
        v8 = *(unsigned int *)(*(_QWORD *)(v4 + 8) + 4 * ((v7 ^ (v7 >> 31)) % *(unsigned int *)(v4 + 24))),
        (_DWORD)v8 == 0x7FFFFFFF))
  {
LABEL_9:
    v9 = 0;
    if (!WeakRetained)
      goto LABEL_11;
    goto LABEL_10;
  }
  v11 = *(_QWORD *)(v4 + 16);
  while (*(char **)(v11 + 32 * v8 + 16) != v6)
  {
    v8 = *(_DWORD *)(v11 + 32 * v8 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_9;
  }
  v9 = (uint64_t *)(v11 + 32 * v8 + 24);
  if (WeakRetained)
LABEL_10:

LABEL_11:
  if (v9)
  {
    v10 = *v9;
    if (v10)
    {
      re::ecs2::EntityHandle::reset(v3);
      objc_storeWeak(v3, (id)(v10 + 8));
      v3[1] = *(id *)(v10 + 296);
    }
  }
}

uint64_t std::__function::__func<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0,std::allocator<`anonymous namespace'::fixUpEntityHandle(re::ecs2::Entity *,re::HashTable<re::ecs2::Entity const*,re::ecs2::Entity *,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false> const&)::$_0>,void ()(re::IntrospectionBase const&,void const*)>::target_type()
{
}

_QWORD *re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_24ED71B48;
  v2 = (uint64_t)(a1 + 1);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)(a1 + 1));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
  return a1;
}

void re::ecs2::SystemCollection::~SystemCollection(re::ecs2::SystemCollection *this)
{
  re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::deinit((uint64_t *)this + 7);
  re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection(this);
}

{
  re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::deinit((uint64_t *)this + 7);
  re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SystemCollection::willClear(re::ecs2::SystemCollection *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t i;
  uint64_t v21;
  int v22;
  int v23;

  if (*((_QWORD *)this + 6))
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
    {
      v3 = (_QWORD *)*((_QWORD *)this + 5);
      v4 = &v3[v2];
      do
      {
        v5 = *v3;
        v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 96))(*((_QWORD *)this + 6), *v3);
        v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 104))(*((_QWORD *)this + 6));
        v8 = *(uint64_t **)(v7 + 40);
        v9 = *(_QWORD *)(v7 + 24);
        if (v6)
        {
          if (v9)
          {
            v10 = 8 * v9;
            do
            {
              if (*v8 == v6)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, v6);
              ++v8;
              v10 -= 8;
            }
            while (v10);
          }
        }
        else if (v9)
        {
          v11 = 8 * v9;
          do
          {
            v12 = *v8++;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, v12);
            v11 -= 8;
          }
          while (v11);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
        ++v3;
      }
      while (v3 != v4);
    }
  }
  v13 = *((_QWORD *)this + 3);
  if (v13)
  {
    v14 = (uint64_t *)*((_QWORD *)this + 5);
    v15 = 8 * v13;
    do
    {
      v16 = *v14++;
      *(_QWORD *)(v16 + 40) = 0;
      v15 -= 8;
    }
    while (v15);
  }
  if (*((_DWORD *)this + 21))
  {
    v17 = *((unsigned int *)this + 20);
    if ((_DWORD)v17)
      memset_pattern16(*((void **)this + 8), &unk_2260EB7B0, 4 * v17);
    v18 = *((unsigned int *)this + 22);
    if ((_DWORD)v18)
    {
      v19 = 0;
      for (i = 0; i < v18; ++i)
      {
        v21 = *((_QWORD *)this + 9) + v19;
        v22 = *(_DWORD *)(v21 + 8);
        if (v22 < 0)
        {
          *(_DWORD *)(v21 + 8) = v22 & 0x7FFFFFFF;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v21 + 32);
          v18 = *((unsigned int *)this + 22);
        }
        v19 += 72;
      }
    }
    *((_DWORD *)this + 21) = 0;
    *((_DWORD *)this + 22) = 0;
    v23 = *((_DWORD *)this + 24) + 1;
    *((_DWORD *)this + 23) = 0x7FFFFFFF;
    *((_DWORD *)this + 24) = v23;
  }
}

_anonymous_namespace_ *re::ecs2::SystemCollection::willInsert(re::ecs2::SystemCollection *a1, uint64_t a2, re::ecs2::System **a3)
{
  re::ecs2::System *v5;
  _anonymous_namespace_ *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *a3;
  *((_QWORD *)v5 + 5) = *((_QWORD *)a1 + 6);
  result = re::ecs2::SystemCollection::addSystemToTypeInfoMap(a1, v5);
  if (*((_QWORD *)a1 + 6))
  {
    (*(void (**)(re::ecs2::System *))(*(_QWORD *)*a3 + 40))(*a3);
    v7 = (*(uint64_t (**)(_QWORD, re::ecs2::System *))(**((_QWORD **)a1 + 6) + 96))(*((_QWORD *)a1 + 6), *a3);
    if (v7)
    {
      v8 = v7;
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 6) + 104))(*((_QWORD *)a1 + 6));
      v9 = *((_QWORD *)result + 3);
      if (v9)
      {
        v10 = (_QWORD *)*((_QWORD *)result + 5);
        v11 = 8 * v9;
        do
        {
          if (*v10 == v8)
            result = (_anonymous_namespace_ *)(*(uint64_t (**)(re::ecs2::System *, uint64_t))(*(_QWORD *)*a3 + 48))(*a3, v8);
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
    }
    else
    {
      v12 = *((unsigned __int8 *)*a3 + 85);
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 6) + 104))(*((_QWORD *)a1 + 6));
      v13 = (uint64_t *)*((_QWORD *)result + 5);
      v14 = *((_QWORD *)result + 3);
      if (v12 == 1)
      {
        if (v14)
        {
          v15 = 8 * v14;
          do
          {
            v16 = *(_QWORD *)(*v13 + 376);
            if (v16 && *(_QWORD *)(v16 + 24) != 1)
              result = (_anonymous_namespace_ *)(*(uint64_t (**)(re::ecs2::System *))(*(_QWORD *)*a3 + 48))(*a3);
            ++v13;
            v15 -= 8;
          }
          while (v15);
        }
      }
      else if (v14)
      {
        v17 = 8 * v14;
        do
        {
          v18 = *v13++;
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(re::ecs2::System *, uint64_t))(*(_QWORD *)*a3 + 48))(*a3, v18);
          v17 -= 8;
        }
        while (v17);
      }
    }
  }
  return result;
}

_anonymous_namespace_ *re::ecs2::SystemCollection::addSystemToTypeInfoMap(re::ecs2::SystemCollection *this, re::ecs2::System *a2)
{
  uint64_t v4;
  unint64_t v5;
  _anonymous_namespace_ *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v4 = (*(uint64_t (**)(re::ecs2::System *))(*(_QWORD *)a2 + 32))(a2);
  v23[0] = 0;
  v23[1] = 0;
  v24 = 1;
  v25 = 0;
  v26 = 0;
  v5 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v27, (_QWORD *)(v4 + 32));
  result = (re::ecs2::SystemCollection *)((char *)this + 56);
  if (!*((_QWORD *)this + 7))
  {
    LODWORD(v7) = 0;
    goto LABEL_11;
  }
  v7 = v5 % *((unsigned int *)this + 20);
  v8 = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_11:
    v10 = re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::addAsMove((uint64_t)result, v7, v5, (_OWORD *)(v4 + 32), (uint64_t)v23);
    ++*((_DWORD *)this + 24);
    v11 = *((_QWORD *)this + 9) + 72 * v10 + 32;
    result = (_anonymous_namespace_ *)v23[0];
    if (v23[0] && (v24 & 1) == 0)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v23[0] + 40))();
    goto LABEL_14;
  }
  v9 = *((_QWORD *)this + 9);
  while (*(_QWORD *)(v9 + 72 * v8 + 16) != *(_QWORD *)(v4 + 32)
       || *(unsigned __int16 *)(v9 + 72 * v8 + 24) != (unsigned __int16)*(_DWORD *)(v4 + 40)
       || *(unsigned __int16 *)(v9 + 72 * v8 + 26) != HIWORD(*(_DWORD *)(v4 + 40))
       || ((*(_DWORD *)(v9 + 72 * v8 + 28) ^ *(_DWORD *)(v4 + 44)) & 0xFFFFFF) != 0)
  {
    v8 = *(_DWORD *)(v9 + 72 * v8 + 8) & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF)
      goto LABEL_11;
  }
  v11 = v9 + 72 * v8 + 32;
LABEL_14:
  if (!*(_QWORD *)v11)
  {
    v18 = *(_QWORD *)(v11 + 8) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity((_QWORD *)v11, v18);
    v19 = *(_DWORD *)(v11 + 16) + 2;
    *(_DWORD *)(v11 + 16) = v19;
    if ((v19 & 1) == 0)
      goto LABEL_25;
LABEL_31:
    v20 = v11 + 24;
    goto LABEL_32;
  }
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_DWORD *)(v11 + 16);
  if ((v13 & 1) == 0)
  {
    v14 = *(_QWORD *)(v11 + 24);
    v16 = v12 >= v14;
    v15 = v12 + 1;
    v16 = !v16 || v14 >= v15;
    if (!v16)
    {
      v17 = 2 * v14;
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  v15 = v12 + 1;
  if (v15 < 2)
  {
LABEL_24:
    if ((v13 & 1) == 0)
      goto LABEL_25;
    goto LABEL_31;
  }
  v17 = 2;
LABEL_27:
  if (v17 <= v15)
    v21 = v15;
  else
    v21 = v17;
  result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity((_QWORD *)v11, v21);
  if ((*(_DWORD *)(v11 + 16) & 1) != 0)
    goto LABEL_31;
LABEL_25:
  v20 = *(_QWORD *)(v11 + 32);
LABEL_32:
  v22 = *(_QWORD *)(v11 + 8);
  *(_QWORD *)(v20 + 8 * v22) = a2;
  *(_QWORD *)(v11 + 8) = v22 + 1;
  *(_DWORD *)(v11 + 16) += 2;
  return result;
}

unint64_t re::ecs2::SystemCollection::willRemoveAt(re::ecs2::SystemCollection *this, uint64_t a2, re::ecs2::System **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  re::ecs2::System *v20;

  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = (*(uint64_t (**)(uint64_t, re::ecs2::System *))(*(_QWORD *)v5 + 96))(v5, *a3);
    if (v6)
    {
      v7 = v6;
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 104))(*((_QWORD *)this + 6));
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        v10 = *(_QWORD **)(v8 + 40);
        v11 = 8 * v9;
        do
        {
          if (*v10 == v7)
            (*(void (**)(re::ecs2::System *, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, v7);
          ++v10;
          v11 -= 8;
        }
        while (v11);
      }
    }
    else
    {
      v12 = *((unsigned __int8 *)*a3 + 85);
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 104))(*((_QWORD *)this + 6));
      v14 = *(uint64_t **)(v13 + 40);
      v15 = *(_QWORD *)(v13 + 24);
      if (v12 == 1)
      {
        if (v15)
        {
          v16 = 8 * v15;
          do
          {
            v17 = *(_QWORD *)(*v14 + 376);
            if (v17 && *(_QWORD *)(v17 + 24) != 1)
              (*(void (**)(re::ecs2::System *))(*(_QWORD *)*a3 + 56))(*a3);
            ++v14;
            v16 -= 8;
          }
          while (v16);
        }
      }
      else if (v15)
      {
        v18 = 8 * v15;
        do
        {
          v19 = *v14++;
          (*(void (**)(re::ecs2::System *, uint64_t))(*(_QWORD *)*a3 + 56))(*a3, v19);
          v18 -= 8;
        }
        while (v18);
      }
    }
    (*(void (**)(re::ecs2::System *))(*(_QWORD *)*a3 + 72))(*a3);
  }
  v20 = *a3;
  *((_QWORD *)*a3 + 5) = 0;
  return re::ecs2::SystemCollection::removeSystemFromTypeInfoMap(this, v20);
}

unint64_t re::ecs2::SystemCollection::removeSystemFromTypeInfoMap(re::ecs2::SystemCollection *this, re::ecs2::System *a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  re::ecs2::System **v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  re::ecs2::System **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int *v37;
  int v38;
  int v39;
  _OWORD v40[5];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(re::ecs2::System *))(*(_QWORD *)a2 + 32))(a2);
  result = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)v40, (_QWORD *)(v4 + 32));
  v6 = 0x7FFFFFFFLL;
  if (*((_QWORD *)this + 7))
  {
    v7 = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * (result % *((unsigned int *)this + 20)));
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v8 = *((_QWORD *)this + 9);
      v6 = 0x7FFFFFFFLL;
      while (*(_QWORD *)(v8 + 72 * v7 + 16) != *(_QWORD *)(v4 + 32)
           || *(unsigned __int16 *)(v8 + 72 * v7 + 24) != (unsigned __int16)*(_DWORD *)(v4 + 40)
           || *(unsigned __int16 *)(v8 + 72 * v7 + 26) != HIWORD(*(_DWORD *)(v4 + 40))
           || ((*(_DWORD *)(v8 + 72 * v7 + 28) ^ *(_DWORD *)(v4 + 44)) & 0xFFFFFF) != 0)
      {
        v7 = *(_DWORD *)(v8 + 72 * v7 + 8) & 0x7FFFFFFF;
        if (v7 == 0x7FFFFFFF)
          goto LABEL_9;
      }
      v6 = v7;
    }
  }
LABEL_9:
  v9 = *((_QWORD *)this + 9);
  v10 = v9 + 72 * v6;
  v13 = *(_DWORD *)(v10 + 48);
  v11 = (int *)(v10 + 48);
  v12 = v13;
  v14 = v13 & 1;
  v15 = v9 + 72 * v6;
  if ((v13 & 1) != 0)
    v16 = (re::ecs2::System **)(v15 + 56);
  else
    v16 = *(re::ecs2::System ***)(v15 + 64);
  v17 = v9 + 72 * v6;
  v20 = *(_QWORD *)(v17 + 40);
  v18 = (_QWORD *)(v17 + 40);
  v19 = v20;
  if (v20)
  {
    v21 = 8 * v19;
    v22 = &v16[v19];
    while (*v16 != a2)
    {
      ++v16;
      v21 -= 8;
      if (!v21)
      {
        v16 = v22;
        break;
      }
    }
  }
  v23 = v9 + 72 * v6;
  if (v14)
    v24 = v23 + 56;
  else
    v24 = *(_QWORD *)(v23 + 64);
  if (v16 == (re::ecs2::System **)(v24 + 8 * v19))
  {
    if (v19)
      return result;
  }
  else
  {
    v25 = ((uint64_t)v16 - v24) >> 3;
    if (v19 <= v25)
    {
      memset(v40, 0, sizeof(v40));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v19 - 1 > v25)
    {
      v26 = v9 + 72 * v6;
      if (v14)
        v27 = v26 + 56;
      else
        v27 = *(_QWORD *)(v26 + 64);
      *(_QWORD *)(v27 + 8 * v25) = *(_QWORD *)(v27 + 8 * v19 - 8);
      v12 = *v11;
      v14 = *v11 & 1;
    }
    *v18 = v19 - 1;
    *v11 = (v12 & 0xFFFFFFFE | v14) + 2;
    if (v19 != 1)
      return result;
  }
  result = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)v40, (_QWORD *)(v4 + 32));
  if (*((_QWORD *)this + 7))
  {
    v28 = result % *((unsigned int *)this + 20);
    v29 = *((_QWORD *)this + 8);
    v30 = *(unsigned int *)(v29 + 4 * v28);
    if ((_DWORD)v30 != 0x7FFFFFFF)
    {
      v31 = *((_QWORD *)this + 9);
      v32 = 0x7FFFFFFFLL;
      while (1)
      {
        if (*(_QWORD *)(v31 + 72 * v30 + 16) == *(_QWORD *)(v4 + 32)
          && *(unsigned __int16 *)(v31 + 72 * v30 + 24) == (unsigned __int16)*(_DWORD *)(v4 + 40)
          && *(unsigned __int16 *)(v31 + 72 * v30 + 26) == HIWORD(*(_DWORD *)(v4 + 40)))
        {
          result = (*(_DWORD *)(v31 + 72 * v30 + 28) ^ *(_DWORD *)(v4 + 44));
          if ((result & 0xFFFFFF) == 0)
            break;
        }
        v32 = v30;
        result = *(_DWORD *)(v31 + 72 * v30 + 8) & 0x7FFFFFFF;
        v30 = result;
        if (result == 0x7FFFFFFF)
          return result;
      }
      v33 = *(_DWORD *)(v31 + 72 * v30 + 8) & 0x7FFFFFFF;
      if (v32 == 0x7FFFFFFF)
        *(_DWORD *)(v29 + 4 * v28) = v33;
      else
        *(_DWORD *)(v31 + 72 * v32 + 8) = *(_DWORD *)(v31 + 72 * v32 + 8) & 0x80000000 | v33;
      v34 = *((_QWORD *)this + 9);
      v35 = v34 + 72 * v30;
      v38 = *(_DWORD *)(v35 + 8);
      v37 = (int *)(v35 + 8);
      v36 = v38;
      if (v38 < 0)
      {
        *v37 = v36 & 0x7FFFFFFF;
        result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v34 + 72 * v30 + 32);
        v34 = *((_QWORD *)this + 9);
        v36 = *(_DWORD *)(v34 + 72 * v30 + 8);
      }
      *(_DWORD *)(v34 + 72 * v30 + 8) = *((_DWORD *)this + 23) | v36 & 0x80000000;
      --*((_DWORD *)this + 21);
      v39 = *((_DWORD *)this + 24) + 1;
      *((_DWORD *)this + 23) = v30;
      *((_DWORD *)this + 24) = v39;
    }
  }
  return result;
}

_anonymous_namespace_ *re::ecs2::SystemCollection::willSet(re::ecs2::SystemCollection *a1, unint64_t a2, re::ecs2::System **a3)
{
  re::ecs2::System *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *result;
  uint64_t v13;
  uint64_t v14;
  re::ecs2::System *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(re::ecs2::System **)re::ecs2::EntityComponentCollection::operator[]((uint64_t)a1, a2);
  v6 = *((_QWORD *)a1 + 6);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, re::ecs2::System *))(*(_QWORD *)v6 + 96))(v6, *a3);
    v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 6) + 104))(*((_QWORD *)a1 + 6));
    v9 = *(uint64_t **)(v8 + 40);
    v10 = *(_QWORD *)(v8 + 24);
    if (v7)
    {
      if (v10)
      {
        v11 = 8 * v10;
        do
        {
          if (*v9 == v7)
            (*(void (**)(re::ecs2::System *, uint64_t))(*(_QWORD *)v5 + 56))(v5, v7);
          ++v9;
          v11 -= 8;
        }
        while (v11);
      }
    }
    else if (v10)
    {
      v13 = 8 * v10;
      do
      {
        v14 = *v9++;
        (*(void (**)(re::ecs2::System *, uint64_t))(*(_QWORD *)v5 + 56))(v5, v14);
        v13 -= 8;
      }
      while (v13);
    }
    (*(void (**)(re::ecs2::System *))(*(_QWORD *)v5 + 72))(v5);
    *((_QWORD *)v5 + 5) = 0;
    re::ecs2::SystemCollection::removeSystemFromTypeInfoMap(a1, v5);
    re::ecs2::SystemCollection::addSystemToTypeInfoMap(a1, *a3);
    v15 = *a3;
    *((_QWORD *)v15 + 5) = *((_QWORD *)a1 + 6);
    (*(void (**)(re::ecs2::System *))(*(_QWORD *)v15 + 40))(v15);
    v16 = (*(uint64_t (**)(_QWORD, re::ecs2::System *))(**((_QWORD **)a1 + 6) + 96))(*((_QWORD *)a1 + 6), *a3);
    result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 6) + 104))(*((_QWORD *)a1 + 6));
    v17 = (uint64_t *)*((_QWORD *)result + 5);
    v18 = *((_QWORD *)result + 3);
    if (v16)
    {
      if (v18)
      {
        v19 = 8 * v18;
        do
        {
          if (*v17 == v16)
            result = (_anonymous_namespace_ *)(*(uint64_t (**)(re::ecs2::System *, uint64_t))(*(_QWORD *)*a3 + 48))(*a3, v16);
          ++v17;
          v19 -= 8;
        }
        while (v19);
      }
    }
    else if (v18)
    {
      v20 = 8 * v18;
      do
      {
        v21 = *v17++;
        result = (_anonymous_namespace_ *)(*(uint64_t (**)(re::ecs2::System *, uint64_t))(*(_QWORD *)*a3 + 48))(*a3, v21);
        v20 -= 8;
      }
      while (v20);
    }
  }
  else
  {
    *((_QWORD *)v5 + 5) = 0;
    re::ecs2::SystemCollection::removeSystemFromTypeInfoMap(a1, v5);
    result = re::ecs2::SystemCollection::addSystemToTypeInfoMap(a1, *a3);
    *((_QWORD *)*a3 + 5) = *((_QWORD *)a1 + 6);
  }
  return result;
}

void re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection(_QWORD *a1)
{
  re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection(a1);
  JUMPOUT(0x2276933B8);
}

double re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v6 + 32);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  const void *v40;
  int v41;
  void *v42;
  uint64_t v43;
  int v44;
  _BYTE v46[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v46, 0, 36);
          *(_QWORD *)&v46[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v46, v13, v12);
          v15 = *(_OWORD *)v46;
          *(_OWORD *)v46 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v46[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v46[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v46[24];
          *(_OWORD *)&v46[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v46[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 16);
              ++v21;
              v22 += 72;
            }
            while (v21 < v20);
          }
          re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::deinit((uint64_t *)v46);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 72 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 72 * v9 + 8) = v24 | 0x80000000;
  v26 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9) = a3;
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 16) = *a4;
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 + 72 * v9;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = v28 + 32;
  *(_DWORD *)(v29 + 16) = 1;
  v30 = (int *)(v29 + 16);
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  v31 = (uint64_t *)(v29 + 24);
  *(_QWORD *)(v29 + 32) = 0;
  if ((*(_BYTE *)(a5 + 16) & 1) == 0)
  {
    *v30 = 3;
    *(_QWORD *)v29 = *(_QWORD *)a5;
    *(_QWORD *)a5 = 0;
    v32 = v27 + 72 * v9;
    *(_QWORD *)(v32 + 40) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = 0;
    v33 = *(_QWORD *)(v32 + 64);
    *(_QWORD *)(v32 + 64) = *(_QWORD *)(a5 + 32);
    *(_QWORD *)(a5 + 32) = v33;
    *(_DWORD *)(a5 + 16) = *(_DWORD *)(a5 + 16) & 0xFFFFFFFE | *v30 & 1;
    *v30 &= ~1u;
    v34 = *v31;
    *v31 = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 24) = v34;
LABEL_39:
    v44 = 2;
    goto LABEL_40;
  }
  v35 = *(_QWORD *)(a5 + 8);
  if (!v35)
  {
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v29);
    *(_QWORD *)v29 = *(_QWORD *)a5;
    goto LABEL_39;
  }
  *(_QWORD *)v29 = *(_QWORD *)a5;
  v36 = v27 + 72 * v9;
  re::DynamicOverflowArray<unsigned long long,1ul>::setCapacity((_QWORD *)v29, v35);
  v39 = *(_QWORD *)(v36 + 40);
  v38 = (unint64_t *)(v36 + 40);
  v37 = v39;
  if ((*(_BYTE *)(a5 + 16) & 1) != 0)
    v40 = (const void *)(a5 + 24);
  else
    v40 = *(const void **)(a5 + 32);
  v41 = *v30;
  v42 = (void *)(v29 + 24);
  if ((*v30 & 1) == 0)
    v42 = *(void **)(v27 + 72 * v9 + 64);
  if (v37)
  {
    memmove(v42, v40, 8 * v37);
    v41 = *v30;
  }
  if ((v41 & 1) == 0)
    v31 = *(uint64_t **)(v27 + 72 * v9 + 64);
  if ((*(_DWORD *)(a5 + 16) & 1) != 0)
    v43 = a5 + 24;
  else
    v43 = *(_QWORD *)(a5 + 32);
  memcpy(&v31[*v38], (const void *)(v43 + 8 * *v38), 8 * v35 - 8 * *v38);
  *v38 = v35;
  *(_QWORD *)(a5 + 8) = 0;
  v44 = 4;
LABEL_40:
  *(_DWORD *)(a5 + 16) = ((*(_DWORD *)(a5 + 16) & 0xFFFFFFFE) + v44) | *(_DWORD *)(a5 + 16) & 1;
  *v30 += 2;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v26) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::ecs2::CustomSystemRegistry::init(os_unfair_lock_s *this, re::ecs2::ECSManager *a2)
{
  os_unfair_lock_s *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  int v7;

  v4 = this + 1;
  os_unfair_lock_lock(this + 1);
  if (!LOBYTE(this->_os_unfair_lock_opaque))
  {
    LOBYTE(this->_os_unfair_lock_opaque) = 1;
    v6 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDefinition>::setCapacity(&this[4]._os_unfair_lock_opaque, 0);
    ++this[10]._os_unfair_lock_opaque;
    re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::setCapacity(&this[14]._os_unfair_lock_opaque, 0);
    v7 = this[20]._os_unfair_lock_opaque + 1;
    this[20]._os_unfair_lock_opaque = v7;
    *(_QWORD *)&this[24]._os_unfair_lock_opaque = a2;
    *(_QWORD *)&this[2]._os_unfair_lock_opaque = this[10]._os_unfair_lock_opaque + v7;
  }
  os_unfair_lock_unlock(v4);
}

void re::ecs2::CustomSystemRegistry::~CustomSystemRegistry(os_unfair_lock_s *this)
{
  uint64_t v2;
  uint64_t v3;

  re::ecs2::CustomSystemRegistry::deinit(this);
  v2 = *(_QWORD *)&this[14]._os_unfair_lock_opaque;
  if (v2)
  {
    if (*(_QWORD *)&this[22]._os_unfair_lock_opaque)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)&this[22]._os_unfair_lock_opaque = 0;
    *(_QWORD *)&this[16]._os_unfair_lock_opaque = 0;
    *(_QWORD *)&this[18]._os_unfair_lock_opaque = 0;
    *(_QWORD *)&this[14]._os_unfair_lock_opaque = 0;
    ++this[20]._os_unfair_lock_opaque;
  }
  v3 = *(_QWORD *)&this[4]._os_unfair_lock_opaque;
  if (v3)
  {
    if (*(_QWORD *)&this[12]._os_unfair_lock_opaque)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)&this[12]._os_unfair_lock_opaque = 0;
    *(_QWORD *)&this[6]._os_unfair_lock_opaque = 0;
    *(_QWORD *)&this[8]._os_unfair_lock_opaque = 0;
    *(_QWORD *)&this[4]._os_unfair_lock_opaque = 0;
    ++this[10]._os_unfair_lock_opaque;
  }
}

void re::ecs2::CustomSystemRegistry::deinit(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = this + 1;
  os_unfair_lock_lock(this + 1);
  if (LOBYTE(this->_os_unfair_lock_opaque))
  {
    LOBYTE(this->_os_unfair_lock_opaque) = 0;
    v3 = *(_QWORD *)&this[4]._os_unfair_lock_opaque;
    if (v3)
    {
      if (*(_QWORD *)&this[12]._os_unfair_lock_opaque)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      *(_QWORD *)&this[12]._os_unfair_lock_opaque = 0;
      *(_QWORD *)&this[6]._os_unfair_lock_opaque = 0;
      *(_QWORD *)&this[8]._os_unfair_lock_opaque = 0;
      *(_QWORD *)&this[4]._os_unfair_lock_opaque = 0;
      ++this[10]._os_unfair_lock_opaque;
    }
    v4 = *(_QWORD *)&this[14]._os_unfair_lock_opaque;
    if (v4)
    {
      if (*(_QWORD *)&this[22]._os_unfair_lock_opaque)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      *(_QWORD *)&this[22]._os_unfair_lock_opaque = 0;
      *(_QWORD *)&this[16]._os_unfair_lock_opaque = 0;
      *(_QWORD *)&this[18]._os_unfair_lock_opaque = 0;
      *(_QWORD *)&this[14]._os_unfair_lock_opaque = 0;
      ++this[20]._os_unfair_lock_opaque;
    }
  }
  os_unfair_lock_unlock(v2);
}

char *re::ecs2::CustomSystemRegistry::instance(re::ecs2::CustomSystemRegistry *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    re::ecs2::CustomSystemRegistry::instance(void)::s_instance = 0;
    unk_255828B0C = 0u;
    unk_255828B1C = 0u;
    unk_255828B2C = 0;
    xmmword_255828B38 = 0u;
    unk_255828B48 = 0u;
    dword_255828B58 = 0;
    qword_255828B68 = 0;
    unk_255828B70 = 0;
    qword_255828B60 = 0;
    re::ecs2::CustomSystemRegistry::init((os_unfair_lock_s *)&re::ecs2::CustomSystemRegistry::instance(void)::s_instance, 0);
  }
  return &re::ecs2::CustomSystemRegistry::instance(void)::s_instance;
}

__n128 re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDefinition>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDefinition>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 40 * v4;
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)v5 = result;
  *(_OWORD *)(v5 + 16) = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 48 * v4;
  result = *(__n128 *)a2;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v7;
  *(__n128 *)v5 = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ecs2::CustomSystemRegistry::configureSystemChanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;

  v6 = (os_unfair_lock_s *)(a1 + 4);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 4));
  if (*(_QWORD *)(a1 + 96))
  {
    re::ecs2::CustomSystemRegistry::addCustomSystems((_QWORD *)a1);
    *(_QWORD *)(a1 + 8) = (*(_DWORD *)(a1 + 80) + *(_DWORD *)(a1 + 40));
  }
  else
  {
    re::ecs2::CustomSystemRegistry::addSwiftCustomSystemsTo(a1, a2);
  }
  re::ecs2::CustomSystemRegistry::sortSystems((_anonymous_namespace_ *)a1, a3);
  os_unfair_lock_unlock(v6);
}

void re::ecs2::CustomSystemRegistry::addSwiftCustomSystemsTo(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8[2];
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  _OWORD v17[5];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4 < v3)
  {
    v6 = 40 * v4;
    do
    {
      v7 = *(_QWORD *)(a1 + 32);
      if (v7 <= v4)
      {
        v8[1] = 0;
        memset(v17, 0, sizeof(v17));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v9 = 136315906;
        v10 = "operator[]";
        v11 = 1024;
        v12 = 789;
        v13 = 2048;
        v14 = v4;
        v15 = 2048;
        v16 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::ecs2::CustomSystemRegistry::create((re *)v17, a1, (int32x2_t *)(*(_QWORD *)(a1 + 48) + v6));
      v8[0] = *(_QWORD *)&v17[0];
      *(_QWORD *)&v17[0] = 0;
      re::ecs2::ECSManager::addSystem(a2, v8, v4, 0);
      if (v8[0])
      {

        v8[0] = 0;
      }
      if (*(_QWORD *)&v17[0])

      ++v4;
      v6 += 40;
    }
    while (v3 != v4);
  }
  *(_QWORD *)(a2 + 24) = v3;
}

void re::ecs2::CustomSystemRegistry::addCustomSystems(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7[2];
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  _OWORD v16[5];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = a1[4];
  v3 = a1[13];
  if (v3 < v2)
  {
    v4 = 40 * v3;
    do
    {
      v5 = a1[4];
      if (v5 <= v3)
      {
        v7[1] = 0;
        memset(v16, 0, sizeof(v16));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v8 = 136315906;
        v9 = "operator[]";
        v10 = 1024;
        v11 = 789;
        v12 = 2048;
        v13 = v3;
        v14 = 2048;
        v15 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v6 = a1[12];
      re::ecs2::CustomSystemRegistry::create((re *)v16, (uint64_t)a1, (int32x2_t *)(a1[6] + v4));
      v7[0] = *(_QWORD *)&v16[0];
      *(_QWORD *)&v16[0] = 0;
      re::ecs2::ECSManager::addSystem(v6, v7, 0xFFFFFFFF, 0);
      if (v7[0])
      {

        v7[0] = 0;
      }
      if (*(_QWORD *)&v16[0])

      ++v3;
      v4 += 40;
    }
    while (v2 != v3);
  }
  a1[13] = v2;
}

void re::ecs2::CustomSystemRegistry::sortSystems(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  signed int v5;
  _BOOL8 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _anonymous_namespace_ *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t hasCycle;
  NSObject *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 *v55;
  uint64_t v56;
  __int128 *v57;
  __int128 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  __int128 v66;
  __int128 v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[28];
  __int16 v72;
  _BYTE v73[10];
  _BYTE v74[20];
  unint64_t v75;
  __int16 v76;
  unint64_t v77;
  uint8_t buf[16];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a1 + 9))
    return;
  v5 = *(_DWORD *)(a2 + 16);
  v66 = 0u;
  v67 = 0u;
  v68 = 0;
  v69 = 0x7FFFFFFFLL;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
  {
    v8 = 0;
    v9 = 0xFFFFFFFFLL;
    v10 = 48;
    do
    {
      *(_QWORD *)v74 = 0;
      *(_QWORD *)&v74[8] = 0xFFFFFFFFLL;
      *(_DWORD *)&v74[16] = -1;
      if (v7 <= v8)
        goto LABEL_119;
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v8);
      if (*(_BYTE *)(v11 + 84) == 2)
      {
        *(_DWORD *)&v74[16] = *(_DWORD *)(v11 + 28);
      }
      else
      {
        *(_OWORD *)v74 = *(_OWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11) + 32);
        v7 = *(_QWORD *)(a2 + 16);
      }
      if (v7 <= v8)
        goto LABEL_120;
      *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v8);
      v12 = re::Hash<re::ecs2::CustomSystemRegistry::SystemID>::operator()((uint64_t)v74);
      v13 = v12;
      if ((_QWORD)v66)
      {
        v3 = v12 % DWORD2(v67);
        v2 = *(unsigned int *)(*((_QWORD *)&v66 + 1) + 4 * v3);
        if ((_DWORD)v2 != 0x7FFFFFFF)
        {
          v14 = v67;
          do
          {
            v6 = re::ecs2::CustomSystemRegistry::SystemID::operator==(v14 + 48 * v2 + 16, (uint64_t)v74);
            if (v6)
              goto LABEL_17;
            v2 = *(_DWORD *)(v14 + 48 * v2 + 8) & 0x7FFFFFFF;
          }
          while (v2 != 0x7FFFFFFF);
        }
      }
      else
      {
        v3 = 0;
      }
      re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::addAsMove((uint64_t)&v66, v3, v13, (__n128 *)v74, buf);
      ++HIDWORD(v69);
LABEL_17:
      v7 = *(_QWORD *)(a2 + 16);
      if (v7 <= v8)
        goto LABEL_121;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v8) + 24) = v8;
      ++v8;
    }
    while (v8 < v7);
  }
  v15 = *((_QWORD *)a1 + 9);
  *(_QWORD *)&v73[2] = 0;
  memset(&v71[8], 0, 20);
  ++*(_DWORD *)&v71[24];
  v16 = *((_QWORD *)a1 + 9);
  if (v16)
  {
    v8 = 0;
    v7 = *((_QWORD *)a1 + 11);
    v17 = v7 + 48 * v16;
    do
    {
      v18 = re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::tryGet((uint64_t)&v66, v7);
      if (v18)
      {
        v19 = (uint64_t *)v18;
        v20 = (_anonymous_namespace_ *)re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::tryGet((uint64_t)&v66, v7 + 24);
        if (v20)
        {
          v21 = (uint64_t *)v20;
          v22 = *v19;
          v23 = *(_QWORD *)v20;
          if (*v19 != *(_QWORD *)v20
            && (*(_anonymous_namespace_ **)(v22 + 32) == a1 || *(_anonymous_namespace_ **)(v23 + 32) == a1))
          {
            if (*(_QWORD *)&v71[16] >= *(_QWORD *)&v71[8])
            {
              v24 = *(_QWORD *)&v71[16] + 1;
              if (*(_QWORD *)&v71[8] < (unint64_t)(*(_QWORD *)&v71[16] + 1))
              {
                if (*(_QWORD *)v71)
                {
                  v25 = 8;
                  if (*(_QWORD *)&v71[8])
                    v25 = 2 * *(_QWORD *)&v71[8];
                  if (v25 <= v24)
                    v26 = *(_QWORD *)&v71[16] + 1;
                  else
                    v26 = v25;
                }
                else
                {
                  ++*(_DWORD *)&v71[24];
                }
              }
            }
            v3 = *(_QWORD *)&v73[2];
            v27 = *(_QWORD *)&v71[16];
            v28 = *(_QWORD *)&v73[2] + 24 * *(_QWORD *)&v71[16];
            *(_QWORD *)v28 = v22;
            *(_QWORD *)(v28 + 8) = v23;
            *(_WORD *)(v28 + 16) = 0;
            v10 = v27 + 1;
            *(_QWORD *)&v71[16] = v27 + 1;
            v9 = ++*(_DWORD *)&v71[24];
            if ((hasCycle & 1) != 0)
            {
              v30 = *re::ecsCoreLogObjects((re *)hasCycle);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
              }
              if ((int)v10 >= 1)
              {
                v31 = v10 + 1;
                do
                {
                  v2 = (v31 - 2);
                  if (v10 <= v2)
                    goto LABEL_118;
                  v32 = v3 + 24 * v2;
                  if (*(_BYTE *)(v32 + 17))
                  {
                    v33 = v10 - 1;
                    if (v10 - 1 > v2)
                    {
                      v34 = v3 - 24 + 24 * v10;
                      v35 = *(_OWORD *)v34;
                      *(_WORD *)(v32 + 16) = *(_WORD *)(v34 + 16);
                      *(_OWORD *)v32 = v35;
                      v33 = v10 - 1;
                    }
                    v9 = (v9 + 1);
                    v10 = v33;
                  }
                  --v31;
                }
                while (v31 > 1);
                *(_QWORD *)&v71[16] = v10;
                *(_DWORD *)&v71[24] = v9;
              }
            }
            else
            {
              v8 = v8 | (*(_BYTE *)(*v21 + 48) == 0);
            }
          }
        }
      }
      v7 += 48;
    }
    while (v7 != v17);
    if ((v8 & 1) != 0)
    {
      v36 = *(_QWORD *)&v71[16];
      if (*(_QWORD *)&v71[16])
      {
        v37 = *(_QWORD *)&v73[2];
        v38 = (_BYTE *)(*(_QWORD *)&v73[2] + 16);
        v39 = *(_QWORD *)&v71[16];
        do
        {
          *v38 = 0;
          v38 += 24;
          --v39;
        }
        while (v39);
        v40 = (_BYTE *)(v37 + 16);
        do
        {
          if (!*(_BYTE *)(*((_QWORD *)v40 - 1) + 48) && !*v40)
          v40 += 24;
          --v36;
        }
        while (v36);
      }
    }
  }
  v3 = *(_QWORD *)&v71[16];
  if (!*(_QWORD *)&v71[16])
    goto LABEL_108;
  v41 = *(_QWORD *)(a2 + 16);
  if (!v41)
    goto LABEL_108;
  v7 = 0;
  v42 = 0;
  v43 = *(_QWORD *)&v73[2];
  v44 = *(_QWORD *)&v73[2] + 8;
  v8 = 24;
  v9 = *(_QWORD *)&v71[16];
  do
  {
    v10 = *(_QWORD *)(a2 + 16);
    if (v10 <= v7)
      v45 = v7;
    else
      v45 = *(_QWORD *)(a2 + 16);
    v2 = -1;
    v46 = 0x7FFFFFFFLL;
    v47 = v7;
    v48 = 0x7FFFFFFFLL;
    while (1)
    {
      if (v47 == v45)
        goto LABEL_115;
      v49 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v47);
      v50 = *(unsigned int *)(v49 + 24);
      if ((int)v50 > (int)v48)
        goto LABEL_68;
      if (*(_BYTE *)(v49 + 84) != 2)
      {
        if (v46 > (int)v50)
        {
          v53 = 0;
          v54 = (_QWORD *)v44;
          while (1)
          {
            if (v3 == v53)
              goto LABEL_114;
            if (*v54 == v49)
              break;
            ++v53;
            v54 += 3;
            if (v9 == v53)
              goto LABEL_81;
          }
          if (v46 >= (int)v50)
            v46 = (int)v50;
        }
LABEL_68:
        v50 = v48;
        goto LABEL_82;
      }
      if (*(_anonymous_namespace_ **)(v49 + 32) == a1)
      {
        v51 = 0;
        v52 = (_QWORD *)v44;
        while (v3 != v51)
        {
          if (*v52 == v49)
            goto LABEL_68;
          ++v51;
          v52 += 3;
          if (v9 == v51)
            goto LABEL_81;
        }
        v70 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v74 = 136315906;
        *(_QWORD *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        v75 = v3;
        v76 = 2048;
        v77 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_114:
        v70 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v74 = 136315906;
        *(_QWORD *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        v75 = v3;
        v76 = 2048;
        v77 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_115:
        v70 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v74 = 136315906;
        *(_QWORD *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        v75 = v45;
        v76 = 2048;
        v77 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_116:
        v70 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v74 = 136315906;
        *(_QWORD *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        v75 = v45;
        v76 = 2048;
        v77 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_117:
        v70 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v74 = 136315906;
        *(_QWORD *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        v75 = v2;
        v76 = 2048;
        v77 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        v70 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v74 = 136315906;
        *(_QWORD *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        v75 = v2;
        v76 = 2048;
        v77 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_119:
        v70 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v71 = 136315906;
        *(_QWORD *)&v71[4] = "operator[]";
        *(_WORD *)&v71[12] = 1024;
        *(_DWORD *)&v71[14] = 789;
        *(_WORD *)&v71[18] = 2048;
        *(_QWORD *)&v71[20] = v8;
        v72 = 2048;
        *(_QWORD *)v73 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_120:
        v70 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v71 = 136315906;
        *(_QWORD *)&v71[4] = "operator[]";
        *(_WORD *)&v71[12] = 1024;
        *(_DWORD *)&v71[14] = 789;
        *(_WORD *)&v71[18] = 2048;
        *(_QWORD *)&v71[20] = v8;
        v72 = 2048;
        *(_QWORD *)v73 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_121:
        v70 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v71 = 136315906;
        *(_QWORD *)&v71[4] = "operator[]";
        *(_WORD *)&v71[12] = 1024;
        *(_DWORD *)&v71[14] = 789;
        *(_WORD *)&v71[18] = 2048;
        *(_QWORD *)&v71[20] = v8;
        v72 = 2048;
        *(_QWORD *)v73 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_122:
        v70 = 0;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        *(_OWORD *)buf = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v74 = 136315906;
        *(_QWORD *)&v74[4] = "operator[]";
        *(_WORD *)&v74[12] = 1024;
        *(_DWORD *)&v74[14] = 789;
        *(_WORD *)&v74[18] = 2048;
        v75 = v9;
        v76 = 2048;
        v77 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_123;
      }
LABEL_81:
      v2 = v47;
      if (v42 == (int)v50)
        break;
LABEL_82:
      ++v47;
      v48 = v50;
      if (v47 >= v41)
        goto LABEL_88;
    }
    v2 = v47;
LABEL_88:
    LODWORD(v45) = v9;
    if ((int)v9 - 1 >= 0)
    {
      do
      {
        v45 = (v45 - 1);
        if (v3 <= v45)
          goto LABEL_116;
        v10 = *(_QWORD *)(a2 + 16);
        if (v10 <= v2)
          goto LABEL_117;
        v55 = (__int128 *)(v43 + 24 * v45);
        v56 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v2);
        if ((*(_QWORD *)v55 == v56 || *(_QWORD *)(v43 + 24 * v45 + 8) == v56) && --v9 > v45)
        {
          if (v3 <= v9)
            goto LABEL_122;
          v57 = (__int128 *)(v43 + 24 * v9);
          v58 = *v55;
          v59 = *((_QWORD *)v55 + 2);
          v60 = *((_WORD *)v57 + 8);
          *v55 = *v57;
          *((_WORD *)v55 + 8) = v60;
          *((_WORD *)v57 + 8) = v59;
          *v57 = v58;
        }
      }
      while ((int)v45 > 0);
    }
    if (v42 == (int)v50)
      ++v42;
    if (v2 != v7)
    {
      v10 = *(_QWORD *)(a2 + 16);
      if (v10 > v2)
      {
        v61 = v44;
        v62 = v42;
        v63 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v2);
        *(_QWORD *)buf = v63;
        if (v63)
          v64 = (id)(v63 + 8);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::removeStableAt(a2, v2);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::insert((_anonymous_namespace_ *)a2, v7, (uint64_t *)buf);
        if (*(_QWORD *)buf)

        v42 = v62;
        v44 = v61;
        goto LABEL_106;
      }
LABEL_123:
      v70 = 0;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v74 = 136315906;
      *(_QWORD *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      *(_WORD *)&v74[18] = 2048;
      v75 = v2;
      v76 = 2048;
      v77 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_106:
    ++v7;
  }
  while (v7 < v41 && v9);
LABEL_108:
  if (*(_QWORD *)v71)
  {
    if (*(_QWORD *)&v73[2])
      (*(void (**)(void))(**(_QWORD **)v71 + 40))();
  }
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)&v66);
}

void *re::ecs2::CustomSystemRegistry::create(re *a1, uint64_t a2, int32x2_t *a3)
{
  int32x2_t *v6;
  void *result;
  int32x2_t *v8;

  re::make::shared::object<re::ecs2::CustomSystem>(a1, a1);
  v6 = *(int32x2_t **)a1;
  v6[3] = vrev64_s32(*a3);
  v6[15] = a3[4];
  result = _Block_copy(*(const void **)&a3[1]);
  v8 = *(int32x2_t **)a1;
  *(_QWORD *)(*(_QWORD *)a1 + 104) = result;
  if (a3[1])
  {
    result = _Block_copy(*(const void **)&a3[2]);
    v8 = *(int32x2_t **)a1;
    v8[14] = (int32x2_t)result;
    v8[10].i8[5] = 2;
  }
  else
  {
    v8[16] = a3[3];
  }
  v8[4] = (int32x2_t)a2;
  return result;
}

uint64_t `anonymous namespace'::setSystemGroup(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;

  v5 = result;
  if (*(_BYTE *)(result + 84) == 2 && *(_QWORD *)(result + 32) == a3)
    *(_BYTE *)(result + 48) = 0;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = 0;
    for (i = 0; i < v6; ++i)
    {
      v9 = *(_QWORD *)(a2 + 32) + v7;
      if (*(_QWORD *)(v9 + 8) == v5)
      {
        *(_BYTE *)(v9 + 16) = 1;
        v6 = *(_QWORD *)(a2 + 16);
      }
      v7 += 24;
    }
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = re::Hash<re::ecs2::CustomSystemRegistry::SystemID>::operator()(a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::ecs2::CustomSystemRegistry::SystemID::operator==(v6 + 48 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 48 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 48 * v5 + 40;
}

uint64_t `anonymous namespace'::hasCycle(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int hasCycle;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 16);
  if (a3)
  {
    if (!v5)
      return 0;
    v6 = (_BYTE *)(*(_QWORD *)(a2 + 32) + 16);
    v7 = *(_QWORD *)(a2 + 16);
    do
    {
      *v6 = 0;
      v6 += 24;
      --v7;
    }
    while (v7);
  }
  if (!v5)
    return 0;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = *(_QWORD *)(a2 + 32);
    v11 = v10 + v8;
    if (*(_QWORD *)(v10 + v8 + 8) == a1)
    {
      if (*(_BYTE *)(v11 + 16))
        goto LABEL_14;
      *(_BYTE *)(v11 + 16) = 1;
      v5 = *(_QWORD *)(a2 + 16);
      if (hasCycle)
        break;
    }
    ++v9;
    v8 += 24;
    if (v9 >= v5)
      return 0;
  }
  if (v5 <= v9)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *(_QWORD *)(a2 + 32);
LABEL_14:
  result = 1;
  *(_BYTE *)(v10 + v8 + 17) = 1;
  return result;
}

BOOL re::ecs2::CustomSystemRegistry::SystemID::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && (v2 = *(_QWORD *)(a2 + 8), *(unsigned __int16 *)(a1 + 8) == (unsigned __int16)v2)
    && *(unsigned __int16 *)(a1 + 10) == WORD1(v2)
    && ((*(_DWORD *)(a1 + 12) ^ HIDWORD(v2)) & 0xFFFFFF) == 0)
  {
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  }
  else
  {
    return 0;
  }
}

unint64_t re::Hash<re::ecs2::CustomSystemRegistry::SystemID>::operator()(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = re::Hash<re::Pair<void const*,void const*,true>>::operator()((uint64_t)&v5, (_QWORD *)a1);
  v3 = 0xBF58476D1CE4E5B9 * (*(int *)(a1 + 16) ^ ((unint64_t)*(int *)(a1 + 16) >> 30));
  return ((v2 << 6)
        + (v2 >> 2)
        - 0x61C8864680B583E9
        + ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))) ^ v2;
}

_QWORD *re::DynamicArray<`anonymous namespace'::ECSSystemDependency>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 24 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::DynamicArray<re::SharedPtr<re::ecs2::System>>::insert(_anonymous_namespace_ *this, unint64_t a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v4 = *((_QWORD *)this + 2);
  if (v4 + 1 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v7 = *((_QWORD *)this + 4);
  v8 = (uint64_t *)(v7 + 8 * v4);
  if (v4 <= a2)
  {
    v15 = *a3;
    *v8 = *a3;
    if (v15)
      v16 = (id)(v15 + 8);
  }
  else
  {
    v9 = *(v8 - 1);
    *(v8 - 1) = 0;
    *v8 = v9;
    v10 = v8 - 1;
    if (v10 != (uint64_t *)(v7 + 8 * a2))
    {
      v11 = *v10;
      v12 = (uint64_t *)(v7 + 8 * v4 - 16);
      v13 = 8 * a2 - 8 * v4 + 8;
      do
      {
        v14 = *v12;
        *v12 = v11;
        v12[1] = v14;
        --v12;
        v13 += 8;
      }
      while (v13);
      v7 = *((_QWORD *)this + 4);
    }
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v7 + 8 * a2), *a3);
  }
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
}

_QWORD *re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDefinition>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 40 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (__int128 *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 48 * v9;
        v11 = v7;
        do
        {
          v12 = *v8;
          v13 = v8[2];
          v11[1] = v8[1];
          v11[2] = v13;
          *v11 = v12;
          v11 += 3;
          v8 += 3;
          v10 -= 48;
        }
        while (v10);
        v8 = (__int128 *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDefinition>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDefinition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDefinition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

double re::make::shared::object<re::ecs2::CustomSystem>@<D0>(re *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 208, 8);
  re::ecs2::System::System(v4, 2, 1);
  *(_QWORD *)v5 = &off_24ED71678;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_DWORD *)(v5 + 184) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v5 + 188) = 0x7FFFFFFFLL;
  *(_BYTE *)(v5 + 200) = 0;
  *a2 = v5;
  return result;
}

__n128 re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, __n128 *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  __n128 *v25;
  __n128 result;
  _BYTE v27[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v27, v13, v12);
          v15 = *(_OWORD *)v27;
          *(_OWORD *)v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v27[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v27[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 40;
            do
            {
              if ((*(_DWORD *)(v21 - 32) & 0x80000000) != 0)
                re::HashTable<re::ecs2::CustomSystemRegistry::SystemID,re::ecs2::System *,re::Hash<re::ecs2::CustomSystemRegistry::SystemID>,re::EqualTo<re::ecs2::CustomSystemRegistry::SystemID>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 40) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 40), v21 - 24, v21);
              v21 += 48;
              --v20;
            }
            while (v20);
          }
          _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)v27);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 48 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 48 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9) = a3;
  v25 = (__n128 *)(*(_QWORD *)(a1 + 16) + 48 * v9);
  result = *a4;
  v25[2].n128_u64[0] = a4[1].n128_u64[0];
  v25[1] = result;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v9 + 40) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::ecs2::SystemSchedulingDisabler::disableSchedulingIfNoComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;

  if (*(_BYTE *)(a1 + 68))
    v3 = a1 + 72;
  else
    v3 = a1 + 52;
  v17 = *(_QWORD *)v3;
  v18 = *(_DWORD *)(v3 + 8);
  if (v17 == 1)
    return 1;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 104))(*(_QWORD *)(a1 + 40));
  v9 = *(_QWORD *)(v8 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 40);
    v11 = v10 + 8 * v9;
    while (!a3)
    {
LABEL_14:
      v10 += 8;
      if (v10 == v11)
        goto LABEL_15;
    }
    v12 = 8 * a3;
    v13 = a2;
    while (1)
    {
      v14 = *(unsigned __int16 *)(*(_QWORD *)v13 + 16);
      if (*(_QWORD *)(*(_QWORD *)v10 + 224) > v14)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 240) + 8 * v14);
        if (v15)
        {
          if (*(_QWORD *)(v15 + 24))
            return 0;
        }
      }
      v13 += 8;
      v12 -= 8;
      if (!v12)
        goto LABEL_14;
    }
  }
  else
  {
LABEL_15:
    v4 = 1;
    LOBYTE(v17) = 1;
    re::ecs2::System::setTaskOptions((_QWORD *)a1, &v17);
  }
  return v4;
}

uint64_t re::ecs2::ECSManager::ECSManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _anonymous_namespace_ *v6;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)a1 = &off_24ED71BA0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 48) = &off_24ED71AC8;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 200) = &off_24ED71700;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a1;
  *(_DWORD *)(a1 + 256) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 304) = 515;
  *(_DWORD *)(a1 + 308) = 1023969417;
  *(_BYTE *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 336) = -1;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 349) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 1;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_QWORD *)(a1 + 460) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  re::ecs2::CustomSystemRegistry::init((os_unfair_lock_s *)(a1 + 424), (re::ecs2::ECSManager *)a1);
  return a1;
}

void re::ecs2::ECSManager::~ECSManager(re::ecs2::ECSManager *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t i;
  id *v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (_QWORD *)((char *)this + 200);
  (*(void (**)(char *))(*((_QWORD *)this + 25) + 16))((char *)this + 200);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)this + 208);
  (*(void (**)(char *))(*((_QWORD *)this + 6) + 16))((char *)this + 48);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear((uint64_t)this + 56);
  if (*((_DWORD *)this + 45))
  {
    v3 = *((unsigned int *)this + 44);
    if ((_DWORD)v3)
      memset_pattern16(*((void **)this + 20), &unk_2260EB7B0, 4 * v3);
    v4 = *((unsigned int *)this + 46);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 32 * v4;
      do
      {
        v7 = *((_QWORD *)this + 21) + v5;
        v8 = *(_DWORD *)(v7 + 8);
        if (v8 < 0)
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
        v5 += 32;
      }
      while (v6 != v5);
    }
    *((_DWORD *)this + 45) = 0;
    *((_DWORD *)this + 46) = 0;
    v9 = *((_DWORD *)this + 48) + 1;
    *((_DWORD *)this + 47) = 0x7FFFFFFF;
    *((_DWORD *)this + 48) = v9;
  }
  re::ecs2::CustomSystemRegistry::~CustomSystemRegistry((os_unfair_lock_s *)this + 106);
  v10 = *((_QWORD *)this + 51);
  if (v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v12 = (id *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)this + 368, i);
      objc_destroyWeak(v12);
      *v12 = 0;
    }
  }
  while (*((_QWORD *)this + 47))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)this + 46);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 368);
  *((_QWORD *)this + 51) = 0;
  ++*((_DWORD *)this + 104);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 368);
  v13 = *((_QWORD *)this + 33);
  if (v13)
  {
    v14 = (id *)*((_QWORD *)this + 37);
    if (v14)
    {
      v15 = *((_QWORD *)this + 35);
      if (v15)
      {
        v16 = 8 * v15;
        do
        {
          objc_destroyWeak(v14);
          *v14++ = 0;
          v16 -= 8;
        }
        while (v16);
        v13 = *((_QWORD *)this + 33);
        v14 = (id *)*((_QWORD *)this + 37);
      }
      (*(void (**)(uint64_t, id *))(*(_QWORD *)v13 + 40))(v13, v14);
    }
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 35) = 0;
    *((_QWORD *)this + 33) = 0;
    ++*((_DWORD *)this + 72);
  }
  re::Collection<re::SharedPtr<re::ecs2::Scene>>::~Collection(v2);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashTable<re::TypeID,re::DynamicOverflowArray<re::ecs2::System *,1ul>,re::Hash<re::TypeID>,re::EqualTo<re::TypeID>,true,false>::deinit((uint64_t *)this + 13);
  re::Collection<re::SharedPtr<re::ecs2::System>>::~Collection((_QWORD *)this + 6);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::ECSManager::~ECSManager(this);
  JUMPOUT(0x2276933B8);
}

BOOL re::ecs2::ECSManager::hasPendingSystemChanges(re::ecs2::ECSManager *this)
{
  int v2;
  char *v3;

  if (*((_DWORD *)this + 87) == *((_DWORD *)this + 20)
    && (v2 = *((_DWORD *)this + 88),
        v3 = re::ecs2::CustomSystemRegistry::instance(this),
        v2 == *((_DWORD *)v3 + 20) + *((_DWORD *)v3 + 10)))
  {
    return *((_QWORD *)this + 54) != *((_DWORD *)this + 126) + *((_DWORD *)this + 116);
  }
  else
  {
    return 1;
  }
}

void re::ecs2::ECSManager::registerCustomSystem(os_unfair_lock_s *a1, uint64_t a2)
{
  __int128 v3;
  os_unfair_lock_s *v4;
  _OWORD v5[2];
  uint64_t v6;

  v3 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v3;
  v6 = *(_QWORD *)(a2 + 32);
  v4 = a1 + 107;
  os_unfair_lock_lock(a1 + 107);
  re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDefinition>::add((_anonymous_namespace_ *)&a1[110], (uint64_t)v5);
  os_unfair_lock_unlock(v4);
}

void re::ecs2::ECSManager::addSystemDependency(os_unfair_lock_s *a1, _OWORD *a2)
{
  __int128 v3;
  os_unfair_lock_s *v4;
  _OWORD v5[3];

  v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  v5[2] = a2[2];
  v4 = a1 + 107;
  os_unfair_lock_lock(a1 + 107);
  re::DynamicArray<re::ecs2::CustomSystemRegistry::SystemDependency>::add((_anonymous_namespace_ *)&a1[120], (uint64_t)v5);
  os_unfair_lock_unlock(v4);
}

void re::ecs2::ECSManager::addSystem(uint64_t a1, unint64_t *a2, unsigned int a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;

  v5 = *a2;
  v4 = v5;
  *a2 = 0;
  re::ecs2::ECSManager::addSystemNow(a1, &v5, a3, a4);
  if (v4)

}

uint64_t re::ecs2::ECSManager::addSystemNow(uint64_t a1, unint64_t *a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;

  v8 = *a2;
  v9 = (void *)(*a2 + 8);
  v10 = v9;
  v11 = *a2;
  if (*(_BYTE *)(*a2 + 84) != 2 || *(_BYTE *)(v11 + 200))
  {
    if (a4)
      goto LABEL_4;
LABEL_12:
    v21 = *(_QWORD *)(a1 + 88);
    v22 = *(_QWORD *)(a1 + 72);
    if (v22)
    {
      v23 = 8 * v22;
      v24 = *(_QWORD **)(a1 + 88);
      while (*v24 != v8)
      {
        ++v24;
        v23 -= 8;
        if (!v23)
        {
          v24 = (_QWORD *)(v21 + 8 * v22);
          break;
        }
      }
    }
    else
    {
      v24 = *(_QWORD **)(a1 + 88);
    }
    if (v22 == ((uint64_t)v24 - v21) >> 3)
    {
      v25 = (_QWORD *)(a1 + 48);
      if ((a3 & 0x80000000) == 0)
      {
LABEL_24:
        re::Collection<re::SharedPtr<re::ecs2::System>>::insert(v25, a3, v8);
        goto LABEL_26;
      }
      re::Collection<re::SharedPtr<re::ecs2::System>>::add(v25, v8);
      a3 = v22;
    }
    goto LABEL_26;
  }
  re::ecs2::System::setDefaultTaskOptions(v11, (uint64_t *)(a1 + 304));
  if (!a4)
    goto LABEL_12;
LABEL_4:
  v12 = (unint64_t *)(a1 + 152);
  v29 = v8;
  if (!re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 152, (uint64_t *)&v29))
  {
    v13 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
    v14 = v13 ^ (v13 >> 31);
    v15 = *v12;
    if (*v12)
    {
      v15 = v14 % *(unsigned int *)(a1 + 176);
      v16 = *(unsigned int *)(*(_QWORD *)(a1 + 160) + 4 * v15);
      if ((_DWORD)v16 != 0x7FFFFFFF)
      {
        v28 = *(_QWORD *)(a1 + 168);
        if (*(_QWORD *)(v28 + 32 * v16 + 16) == v8)
          goto LABEL_23;
        while (1)
        {
          v16 = *(_DWORD *)(v28 + 32 * v16 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v16 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v28 + 32 * v16 + 16) == v8)
            goto LABEL_23;
        }
      }
    }
    v17 = *(unsigned int *)(a1 + 188);
    if ((_DWORD)v17 == 0x7FFFFFFF)
    {
      v17 = *(unsigned int *)(a1 + 184);
      v18 = v17;
      if ((_DWORD)v17 == *(_DWORD *)(a1 + 176))
      {
        re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1 + 152, 2 * *(_DWORD *)(a1 + 180));
        LODWORD(v15) = v14 % *(unsigned int *)(a1 + 176);
        v18 = *(_DWORD *)(a1 + 184);
      }
      *(_DWORD *)(a1 + 184) = v18 + 1;
      v19 = *(_QWORD *)(a1 + 168);
      v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 168);
      v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
      *(_DWORD *)(a1 + 188) = v20 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 168) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v15);
    *(_QWORD *)(*(_QWORD *)(a1 + 168) + 32 * v17) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 168) + 32 * v17 + 16) = v8;
    *(_QWORD *)(*(_QWORD *)(a1 + 168) + 32 * v17 + 24) = a4;
    *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v15) = v17;
    ++*(_DWORD *)(a1 + 180);
    ++*(_DWORD *)(a1 + 192);
LABEL_23:
    v25 = (_QWORD *)(a1 + 48);
    if ((a3 & 0x80000000) != 0)
    {
      a3 = *(_DWORD *)(a1 + 72);
      re::Collection<re::SharedPtr<re::ecs2::System>>::add(v25, v8);
      goto LABEL_26;
    }
    goto LABEL_24;
  }
LABEL_26:
  v26 = *(_QWORD *)(a1 + 40);
  if (v26 && *(float *)(v26 + 756) > 0.0)
  {
    *(_DWORD *)(v26 + 756) = 0;
    *(float *)(v26 + 752) = fminf(*(float *)(v26 + 752), 0.0);
  }

  return (int)a3;
}

void re::Collection<re::SharedPtr<re::ecs2::System>>::insert(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  id v5;
  re *v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  if (a3)
    v5 = (id)(a3 + 8);
  v6 = (re *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t *))(*a1 + 24))(a1, a2, &v8);
  if (a1[3] >= a2)
  {
    re::DynamicArray<re::SharedPtr<re::ecs2::System>>::insert((_anonymous_namespace_ *)(a1 + 1), a2, &v8);
    (*(void (**)(_QWORD *, unint64_t, uint64_t *))(*a1 + 48))(a1, a2, &v8);
  }
  else
  {
    v7 = *re::foundationCoreLogObjects(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v10 = "void re::Collection<re::SharedPtr<re::ecs2::System>>::insert(size_t, const T &) [T = re::SharedPtr<re::ecs2::System>]";
      v11 = 2048;
      v12 = a2;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "%s: index %zu invalid after willInsert(), not inserting", buf, 0x16u);
    }
  }
  if (v8)

}

void re::Collection<re::SharedPtr<re::ecs2::System>>::add(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1[3];
  v6 = a2;
  if (a2)
    v4 = (id)(a2 + 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t *))(*a1 + 24))(a1, v3, &v6);
  v5 = a1[3];
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(a1 + 1, &v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t *))(*a1 + 48))(a1, v5, &v6);
  if (v6)

}

void re::ecs2::ECSManager::removeSystem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE v4[16];

  v3 = *a2;
  *a2 = 0;
  re::ecs2::ECSManager::removeSystemNow(a1, &v3, a3, (uint64_t)v4);
  if (v3)

}

_QWORD *re::ecs2::ECSManager::removeSystemNow@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    v8 = 8 * v7;
    v9 = *(_QWORD **)(a1 + 88);
    while (*v9 != *a2)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        v9 = (_QWORD *)(v6 + 8 * v7);
        break;
      }
    }
  }
  else
  {
    v9 = *(_QWORD **)(a1 + 88);
  }
  v10 = a1 + 48;
  v11 = ((uint64_t)v9 - v6) >> 3;
  if (v11 == v7)
  {
    v12 = 0;
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v11;
    v12 = 1;
  }
  *(_BYTE *)a4 = v12;
  if (!a3)
    return (_QWORD *)re::Collection<re::SharedPtr<re::ecs2::Entity>>::removeStable(a1 + 48, a2);
  v13 = a1 + 152;
  v15 = *a2;
  result = (_QWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 152, &v15);
  if (result)
  {
    if (*result == a3)
    {
      re::Collection<re::SharedPtr<re::ecs2::Entity>>::removeStable(v10, a2);
      v15 = *a2;
      return (_QWORD *)re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v13, &v15);
    }
  }
  return result;
}

uint64_t re::ecs2::ECSManager::getSceneThisSystemIsBoundToD8(re::ecs2::ECSManager *this, const re::ecs2::System *a2)
{
  uint64_t result;
  const re::ecs2::System *v3;

  v3 = a2;
  result = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 152, (uint64_t *)&v3);
  if (result)
    return *(_QWORD *)result;
  return result;
}

uint64_t re::ecs2::ECSManager::outputDeviceSystemTasks@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v4 = this;
    v5 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    if ((v5 & 0x3F) != 0)
      v6 = (v5 >> 6) + 1;
    else
      v6 = v5 >> 6;
    *(_QWORD *)(a2 + 64) = v5;
    v11 = 0;
    this = (uint64_t)re::DynamicOverflowArray<unsigned long long,5ul>::resize((_anonymous_namespace_ *)a2, v6, &v11);
    v7 = *(_QWORD *)(v4 + 72);
    if (v7)
    {
      v8 = *(_QWORD *)(v4 + 88);
      v9 = 8 * v7;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v8 + 84) == 1)
        {
          v10 = *(_QWORD *)(*(_QWORD *)v8 + 96);
          if (v10 < v5)
            this = re::DynamicBitset<unsigned long long,256ul>::setBit(a2, v10);
        }
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  return this;
}

uint64_t re::ecs2::ECSManager::systems(re::ecs2::ECSManager *this)
{
  return (uint64_t)this + 48;
}

void re::ecs2::ECSManager::configureSystemChanges(re::ecs2::ECSManager *this)
{
  char *v2;
  char *v3;

  v2 = re::ecs2::CustomSystemRegistry::instance(this);
  if (*((_DWORD *)this + 88) != *((_DWORD *)v2 + 20) + *((_DWORD *)v2 + 10))
  {
    v3 = v2;
    re::ecs2::CustomSystemRegistry::configureSystemChanges((uint64_t)v2, (uint64_t)this, (uint64_t)this + 56);
    *((_DWORD *)this + 88) = *((_DWORD *)v3 + 20) + *((_DWORD *)v3 + 10);
  }
  if (*((_QWORD *)this + 54) != *((_DWORD *)this + 126) + *((_DWORD *)this + 116))
    re::ecs2::CustomSystemRegistry::configureSystemChanges((uint64_t)this + 424, (uint64_t)this, (uint64_t)this + 56);
  *((_DWORD *)this + 87) = *((_DWORD *)this + 20);
}

void re::ecs2::ECSManager::configurePreparePhase(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  re *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;
  int v12;
  char v13;
  __int16 v14;
  int v15;
  char v16;
  uint64_t (**v17)();
  re *v18;
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v9 = 0xEEC0FA23AB2AF7FCLL;
  v10 = "ECSManager::Prepare Profiling Begin";
  v11 = 1;
  v12 = 0;
  v13 = 0;
  v14 = 260;
  v15 = 1023969417;
  v16 = 0;
  v6 = re::globalAllocators(a1)[2];
  v17 = &off_24ED71CC8;
  v18 = a1;
  v19 = v6;
  v20 = &v17;
  v26 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v21 = a3;
  v22 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v9);
  if (v22)
  {
    if (v26)
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
    v26 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    ++v25;
  }
  if (v20)
  {
    ((void (*)(uint64_t (***)()))**v20)(v20);
    if (v20 != &v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v20 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v9);
  re::ecs2::ECSManager::configurePhaseECSSystems(a1, a2, 0, a3);
  v9 = 0xA9F037AB534ABAE0;
  v10 = "ECSManager::Prepare Profiling End";
  v11 = 1;
  v12 = 0;
  v13 = 0;
  v14 = 260;
  v15 = 1023969417;
  v16 = 0;
  v8 = re::globalAllocators(v7)[2];
  v17 = &off_24ED71D20;
  v18 = a1;
  v19 = v8;
  v20 = &v17;
  v26 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v21 = a3;
  v22 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v9);
  if (v22)
  {
    if (v26)
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
    v26 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    ++v25;
  }
  if (v20)
  {
    ((void (*)(uint64_t (***)()))**v20)(v20);
    if (v20 != &v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v20 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v9);
}

void re::ecs2::ECSManager::configurePhaseECSSystems(re *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned __int8 **v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  const char *v15;
  id v16;
  char *v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  void *v21;
  unsigned __int8 *v22;
  re *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  re *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id *p_from;
  uint64_t v32;
  re *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  id to;
  _BYTE v38[24];
  id from;
  id location;
  char *v41;
  StringID v42;
  unsigned __int8 *v43;
  uint64_t v44;
  char v45;
  _BYTE v46[7];
  _BYTE *v47;
  char v48;
  uint64_t v49;
  unsigned __int8 v50;
  _BYTE v51[24];
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 9);
  if (!v6)
    goto LABEL_52;
  v35 = (_QWORD *)((char *)a1 + 360);
  v36 = (char *)a1 + 356;
  v8 = (unsigned __int8 **)*((_QWORD *)a1 + 11);
  v33 = a1;
  v34 = (uint64_t)a1 + 152;
  v9 = 8 * v6;
  v10 = 1;
  do
  {
    v11 = *v8;
    v43 = v11;
    if (v11[48] == a3)
    {
      v12 = (v11[84] == 2) | v10;
      if (v11[84] != 2 && ((v10 ^ 1) & 1) == 0)
      {
        re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(v33, a2, a4);
        v12 = 0;
        v11 = v43;
      }
      *(_QWORD *)&v42.var0 = 0x6E89C30E7C08;
      v42.var1 = "ECSSystem";
      v13 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v11 + 32))(v11);
      if (*(_DWORD *)(v13 + 16) == 8)
      {
        v14 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"ECSSystem - %s", (re::DynamicString *)&v44, *(_QWORD *)(v13 + 48));
        v15 = (v45 & 1) != 0 ? v47 : v46;
        location = 0;
        v41 = (char *)&str_110;
        v16 = location;
        v17 = v41;
        v18 = (void *)((unint64_t)location & 0xFFFFFFFFFFFFFFFELL);
        location = 0;
        v41 = (char *)&str_110;
        to = v18;
        *(_QWORD *)v38 = "ECSSystem";
        *(_QWORD *)&v42.var0 = v16;
        v42.var1 = v17;
        re::StringID::destroyString((re::StringID *)&to);
        re::StringID::destroyString((re::StringID *)&location);
        if (v44)
        {
          if ((v45 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v44 + 40))();
        }
      }
      v19 = (_QWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v34, (uint64_t *)&v43);
      if (v43)
        v20 = v43 + 8;
      else
        v20 = 0;
      objc_initWeak(&location, v20);
      if (v19)
      {
        if (*v19)
          v21 = (void *)(*v19 + 8);
        else
          v21 = 0;
        objc_initWeak(&from, v21);
        re::StringID::StringID((re::StringID *)&v44, &v42);
        LOBYTE(v47) = v43[64];
        BYTE1(v47) = v43[86];
        HIDWORD(v47) = *((_DWORD *)v43 + 22);
        v48 = 0;
        v22 = v43 + 52;
        if (v43[68])
          v22 = v43 + 72;
        v49 = *(_QWORD *)v22;
        v50 = v22[8];
        to = 0;
        objc_copyWeak(&to, &location);
        *(_QWORD *)v38 = 0;
        objc_copyWeak((id *)v38, &from);
        *(_QWORD *)&v38[8] = v36;
        *(_QWORD *)&v38[16] = v35;
        v24 = re::globalAllocators(v23)[2];
        v52 = v24;
        v53 = 0;
        if (v24)
          v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 32))(v24, 40, 0);
        else
          v25 = 0;
        *(_QWORD *)v25 = &off_24ED71F30;
        *(_QWORD *)(v25 + 8) = 0;
        objc_moveWeak((id *)(v25 + 8), &to);
        *(_QWORD *)(v25 + 16) = 0;
        objc_moveWeak((id *)(v25 + 16), (id *)v38);
        *(_OWORD *)(v25 + 24) = *(_OWORD *)&v38[8];
        v53 = (_BYTE *)v25;
        v54 = a4;
        v59 = 0;
        v56 = 0;
        v57 = 0;
        v55 = 0;
        v58 = 0;
        v30 = re::Scheduler::ScheduleDescriptor::addTask(a2, &v44);
        *((_QWORD *)v43 + 12) = v30;
        if (v55)
        {
          if (v59)
            (*(void (**)(void))(*(_QWORD *)v55 + 40))();
          v59 = 0;
          v56 = 0;
          v57 = 0;
          v55 = 0;
          ++v58;
        }
        if (v53)
        {
          (**(void (***)(_BYTE *))v53)(v53);
          if (v53 != v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
          v53 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v44);
        objc_destroyWeak((id *)v38);
        *(_QWORD *)v38 = 0;
        objc_destroyWeak(&to);
        p_from = &from;
      }
      else
      {
        re::StringID::StringID((re::StringID *)&v44, &v42);
        LOBYTE(v47) = v43[64];
        BYTE1(v47) = v43[86];
        HIDWORD(v47) = *((_DWORD *)v43 + 22);
        v48 = 0;
        v26 = v43 + 52;
        if (v43[68])
          v26 = v43 + 72;
        v49 = *(_QWORD *)v26;
        v50 = v26[8];
        to = 0;
        objc_copyWeak(&to, &location);
        *(_QWORD *)v38 = v36;
        *(_QWORD *)&v38[8] = v35;
        v28 = re::globalAllocators(v27)[2];
        v52 = v28;
        v53 = 0;
        if (v28)
          v29 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v28 + 32))(v28, 32, 0);
        else
          v29 = 0;
        *(_QWORD *)v29 = &off_24ED71F88;
        *(_QWORD *)(v29 + 8) = 0;
        objc_moveWeak((id *)(v29 + 8), &to);
        *(_OWORD *)(v29 + 16) = *(_OWORD *)v38;
        v53 = (_BYTE *)v29;
        v54 = a4;
        v59 = 0;
        v56 = 0;
        v57 = 0;
        v55 = 0;
        v58 = 0;
        v32 = re::Scheduler::ScheduleDescriptor::addTask(a2, &v44);
        *((_QWORD *)v43 + 12) = v32;
        if (v55)
        {
          if (v59)
            (*(void (**)(void))(*(_QWORD *)v55 + 40))();
          v59 = 0;
          v56 = 0;
          v57 = 0;
          v55 = 0;
          ++v58;
        }
        if (v53)
        {
          (**(void (***)(_BYTE *))v53)(v53);
          if (v53 != v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
          v53 = 0;
        }
        re::StringID::destroyString((re::StringID *)&v44);
        p_from = &to;
      }
      objc_destroyWeak(p_from);
      objc_destroyWeak(&location);
      re::StringID::destroyString((re::StringID *)&v42);
      v10 = v12;
    }
    ++v8;
    v9 -= 8;
  }
  while (v9);
  a1 = v33;
  if ((v10 & 1) != 0)
LABEL_52:
    re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(a1, a2, a4);
}

void re::ecs2::ECSManager::configureSimulatePhase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  re *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;
  int v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t (**v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (***v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v10 = 0xD448DC82DA1AF396;
  v11 = "ECSManager::Simulate Profiling Begin";
  v12 = 1;
  v13 = 0;
  v14 = 0;
  LOWORD(v15) = 260;
  HIDWORD(v15) = 1023969417;
  v16 = 0;
  v6 = re::globalAllocators((re *)a1)[2];
  v17 = &off_24ED71D78;
  v18 = a1;
  v20 = v6;
  v21 = &v17;
  v27 = 0;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  v22 = a3;
  v23 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v10);
  if (v23)
  {
    if (v27)
      (*(void (**)(void))(*(_QWORD *)v23 + 40))();
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    ++v26;
  }
  if (v21)
  {
    ((void (*)(uint64_t (***)()))**v21)(v21);
    if (v21 != &v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    v21 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v10);
  re::ecs2::ECSManager::configurePhaseECSSystems((re *)a1, a2, 1, a3);
  *(_QWORD *)(a1 + 336) = -1;
  if (*(_QWORD *)(a1 + 328))
  {
    v10 = 0x170A146AA311E622;
    v11 = "ECS Update Callback";
    v12 = 1;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 304);
    v16 = *(_BYTE *)(a1 + 312);
    v8 = re::globalAllocators(v7)[2];
    v17 = &off_24ED71DD0;
    v18 = a1;
    v20 = v8;
    v21 = &v17;
    v27 = 0;
    v26 = 0;
    v24 = 0;
    v25 = 0;
    v22 = a3;
    v23 = 0;
    *(_QWORD *)(a1 + 336) = re::Scheduler::ScheduleDescriptor::addTask(a2, &v10);
    if (v23)
    {
      if (v27)
        (*(void (**)(void))(*(_QWORD *)v23 + 40))();
      v27 = 0;
      v24 = 0;
      v25 = 0;
      v23 = 0;
      ++v26;
    }
    if (v21)
    {
      ((void (*)(uint64_t (***)()))**v21)(v21);
      if (v21 != &v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
      v21 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v10);
  }
  v10 = 0xFBB13980CD58D4FALL;
  v11 = "ECSManager::Simulate Profiling End";
  v12 = 1;
  v13 = 0;
  v14 = 0;
  LOWORD(v15) = 260;
  HIDWORD(v15) = 1023969417;
  v16 = 0;
  v9 = re::globalAllocators(v7)[2];
  v17 = &off_24ED71E28;
  v18 = a1 + 200;
  v19 = a1;
  v20 = v9;
  v21 = &v17;
  v22 = a3;
  v27 = 0;
  v26 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v10);
  if (v23)
  {
    if (v27)
      (*(void (**)(void))(*(_QWORD *)v23 + 40))();
    v27 = 0;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    ++v26;
  }
  if (v21)
  {
    ((void (*)(uint64_t (***)()))**v21)(v21);
    if (v21 != &v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    v21 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v10);
}

void re::ecs2::ECSManager::configureCommitPhase(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  re *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;
  int v12;
  char v13;
  __int16 v14;
  int v15;
  char v16;
  uint64_t (**v17)();
  re *v18;
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v9 = 0xD1BE049E450061BCLL;
  v10 = "ECSManager::Commit Profiling Begin";
  v11 = 1;
  v12 = 0;
  v13 = 0;
  v14 = 260;
  v15 = 1023969417;
  v16 = 0;
  v6 = re::globalAllocators(a1)[2];
  v17 = &off_24ED71E80;
  v18 = a1;
  v19 = v6;
  v20 = &v17;
  v26 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v21 = a3;
  v22 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v9);
  if (v22)
  {
    if (v26)
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
    v26 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    ++v25;
  }
  if (v20)
  {
    ((void (*)(uint64_t (***)()))**v20)(v20);
    if (v20 != &v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v20 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v9);
  re::ecs2::ECSManager::configurePhaseECSSystems(a1, a2, 2, a3);
  v9 = 0x37A0906342EF94A0;
  v10 = "ECSManager::Commit Profiling End";
  v11 = 1;
  v12 = 0;
  v13 = 0;
  v14 = 260;
  v15 = 1023969417;
  v16 = 0;
  v8 = re::globalAllocators(v7)[2];
  v17 = &off_24ED71ED8;
  v18 = a1;
  v19 = v8;
  v20 = &v17;
  v26 = 0;
  v25 = 0;
  v23 = 0;
  v24 = 0;
  v21 = a3;
  v22 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, &v9);
  if (v22)
  {
    if (v26)
      (*(void (**)(void))(*(_QWORD *)v22 + 40))();
    v26 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    ++v25;
  }
  if (v20)
  {
    ((void (*)(uint64_t (***)()))**v20)(v20);
    if (v20 != &v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v20 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v9);
}

void re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7[2];
  __int16 v8;
  int v9;
  char v10;
  __int16 v11;
  int v12;
  char v13;
  _QWORD v14[3];
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v7[0] = 0xA9CCEE58A62125DCLL;
  v7[1] = (uint64_t)"Post Update Callback Batch Dirty Components";
  v8 = 1;
  v9 = 0;
  v10 = 0;
  v11 = 260;
  v12 = 1023969417;
  v13 = 0;
  v6 = re::globalAllocators(a1)[2];
  v14[0] = &off_24ED71FE0;
  v14[1] = a1;
  v15 = v6;
  v16 = v14;
  v22 = 0;
  v21 = 0;
  v19 = 0;
  v20 = 0;
  v17 = a3;
  v18 = 0;
  re::Scheduler::ScheduleDescriptor::addTask(a2, v7);
  if (v18)
  {
    if (v22)
      (*(void (**)(void))(*(_QWORD *)v18 + 40))();
    v22 = 0;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    ++v21;
  }
  if (v16)
  {
    (*(void (**)(_QWORD *))*v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    v16 = 0;
  }
  re::StringID::destroyString((re::StringID *)v7);
}

uint64_t re::ecs2::ECSManager::resolveEntityHandle(re::ecs2::ECSManager *this, const re::ecs2::EntityHandle *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = *((_QWORD *)this + 28);
  if (v2)
  {
    v3 = *((_QWORD *)a2 + 1);
    v4 = (uint64_t *)*((_QWORD *)this + 30);
    v5 = 8 * v2;
    do
    {
      v6 = *v4;
      if (*v4)
      {
        v7 = (void *)(v6 + 8);
        v8 = (id)(v6 + 8);
        v15 = v3;
        v9 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v6 + 152, &v15);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);

          if (v10)
            return v10;
        }
        else
        {
          v10 = *(_QWORD *)(v6 + 104);
          v12 = *(_QWORD *)(v10 + 296);
          v13 = v15;

          if (v12 == v13)
            return v10;
        }
      }
      else
      {
        v15 = v3;
        v11 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(152, &v15);
        if (v11)
        {
          v10 = *(_QWORD *)(v11 + 8);
          if (v10)
            return v10;
        }
        else
        {
          v10 = MEMORY[0x68];
          if (*(_QWORD *)(MEMORY[0x68] + 296) == v15)
            return v10;
        }
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return 0;
}

uint64_t re::ecs2::ECSManager::scenes(re::ecs2::ECSManager *this)
{
  return (uint64_t)this + 200;
}

{
  return (uint64_t)this + 200;
}

uint64_t re::ecs2::ECSManager::setSceneNetworkingMode(uint64_t result, int a2)
{
  if (!*(_QWORD *)(result + 224))
    *(_DWORD *)(result + 344) = a2;
  return result;
}

re::Scheduler *re::ecs2::ECSManager::setDefaultCustomSystemTaskOptions(uint64_t a1, float *a2)
{
  re::Scheduler *result;
  unint64_t v5;
  uint64_t v6;
  re::Scheduler **v7;
  uint64_t v8;
  uint64_t v9;

  result = *(re::Scheduler **)(a1 + 40);
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 336);
    if (v5 != -1)
      result = (re::Scheduler *)re::Scheduler::setTaskOptions(result, v5, a2);
    v6 = *(_QWORD *)(a1 + 72);
    if (v6)
    {
      v7 = *(re::Scheduler ***)(a1 + 88);
      v8 = 8 * v6;
      do
      {
        result = *v7;
        if (*((_BYTE *)*v7 + 84) == 2 && !*((_BYTE *)result + 200))
          result = (re::Scheduler *)re::ecs2::System::setDefaultTaskOptions((uint64_t)result, (uint64_t *)a2);
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
  }
  v9 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 312) = *((_BYTE *)a2 + 8);
  *(_QWORD *)(a1 + 304) = v9;
  return result;
}

uint64_t re::ecs2::ECSManager::systemsArePausedInEditor(re::ecs2::ECSManager *this)
{
  return *((unsigned __int8 *)this + 356);
}

uint64_t re::ecs2::ECSManager::setSystemsArePausedInEditor(uint64_t this, char a2)
{
  *(_BYTE *)(this + 356) = a2;
  return this;
}

uint64_t re::ecs2::ECSManager::customSystemAtID(re::ecs2::ECSManager *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 < 0)
    return 0;
  v2 = *((_QWORD *)this + 9);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)this + 11);
  v4 = 8 * v2;
  while (*(_DWORD *)(*(_QWORD *)v3 + 28) != a2)
  {
    v3 += 8;
    v4 -= 8;
    if (!v4)
      return 0;
  }
  if (*(_BYTE *)(*(_QWORD *)v3 + 84) == 2)
    return *(_QWORD *)v3;
  else
    return 0;
}

void re::ecs2::ECSManager::enqueueComponentToMarkDirty(re::ecs2::ECSManager *this, const re::ecs2::Component *a2)
{
  char *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  id *v8;
  id location[2];
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  unint64_t v15;
  __int16 v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a2)
    v3 = (char *)a2 + 8;
  else
    v3 = 0;
  objc_initWeak(location, v3);
  v4 = *((_QWORD *)this + 51);
  v5 = *((_QWORD *)this + 47);
  if (v4 + 1 > 32 * v5)
  {
    re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::setBucketsCapacity((_QWORD *)this + 46, (v4 + 32) >> 5);
    v5 = *((_QWORD *)this + 47);
  }
  if (v5 <= v4 >> 5)
  {
    location[1] = 0;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v10 = 136315906;
    v11 = "operator[]";
    v12 = 1024;
    v13 = 858;
    v14 = 2048;
    v15 = v4 >> 5;
    v16 = 2048;
    v17 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*((_BYTE *)this + 384) & 1) != 0)
    v6 = (char *)this + 392;
  else
    v6 = (char *)*((_QWORD *)this + 50);
  v7 = *(_QWORD *)&v6[8 * (v4 >> 5)];
  ++*((_QWORD *)this + 51);
  ++*((_DWORD *)this + 104);
  v8 = (id *)(v7 + 8 * (v4 & 0x1F));
  *v8 = 0;
  objc_moveWeak(v8, location);
  objc_destroyWeak(location);
}

void re::ecs2::ECSManager::flushComponentToMarkDirtyQueue(re::ecs2::ECSManager *this)
{
  uint64_t v1;
  char *v3;
  id *v4;
  _BYTE *WeakRetained;

  v1 = *((_QWORD *)this + 51);
  if (v1)
  {
    v3 = (char *)this + 368;
    do
    {
      v4 = (id *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v3, v1 - 1);
      WeakRetained = objc_loadWeakRetained(v4);
      re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::removeLast((uint64_t)v3);
      if (WeakRetained)
      {
        if (WeakRetained[16])
          re::ecs2::Component::markDirty((_QWORD *)WeakRetained - 1);

      }
      v1 = *((_QWORD *)this + 51);
    }
    while (v1);
  }
}

void re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::removeLast(uint64_t a1)
{
  id *v2;

  v2 = (id *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[](a1, *(_QWORD *)(a1 + 40) - 1);
  objc_destroyWeak(v2);
  *v2 = 0;
  --*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
}

_QWORD *re::ecs2::ECSManager::removeAndAddScenes(_QWORD *this)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if (this[9])
  {
    v1 = this;
    v2 = 0;
    v3 = (uint64_t)(this + 6);
    v4 = (uint64_t)(this + 19);
    do
    {
      v8 = *(_QWORD *)re::ecs2::EntityComponentCollection::operator[](v3, v2);
      this = (_QWORD *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v4, &v8);
      if (this)
      {
        v5 = *this;
        if (*this)
        {
          v6 = (_QWORD *)re::ecs2::EntityComponentCollection::operator[](v3, v2);
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 56))(*v6, v5);
          v7 = (_QWORD *)re::ecs2::EntityComponentCollection::operator[](v3, v2);
          this = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 48))(*v7, v5);
        }
      }
      ++v2;
    }
    while (v2 < v1[9]);
  }
  return this;
}

void re::ecs2::ECSManager::createRealityRendererSceneGroup(re::ecs2::ECSManager *this@<X0>, _anonymous_namespace_ **a2@<X8>)
{
  uint64_t v3;

  re::make::shared::object<re::ecs2::RealityRendererSceneGroup>(this, a2);
  v3 = re::ecs2::RealityRendererSceneGroup::m_currentIdentifier++;
  *((_QWORD *)*a2 + 3) = v3;
}

uint64_t re::ecs2::ECSManager::getActiveRealityRendererSceneGroup(re::ecs2::ECSManager *this)
{
  return *((_QWORD *)this + 45);
}

void re::ecs2::ECSManager::setActiveRealityRendererSceneGroup(re::ecs2::ECSManager *this, re::ecs2::RealityRendererSceneGroup *a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id location;

  *((_QWORD *)this + 45) = a2;
  v3 = (re::ecs2::ECSManager *)((char *)this + 264);
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::clear((uint64_t)this + 264);
  v4 = *((_QWORD *)this + 28);
  if (v4)
  {
    v5 = *((_QWORD *)this + 30);
    v6 = 8 * v4;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)v5 + 376) == *((_QWORD *)this + 45))
      {
        objc_initWeak(&location, (id)(*(_QWORD *)v5 + 8));
        re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::add(v3, &location);
        objc_destroyWeak(&location);
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
  }
}

uint64_t re::ecs2::ECSManager::activeScenes(re::ecs2::ECSManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id location;

  if (*((_DWORD *)this + 64) != *((_DWORD *)this + 58))
  {
    re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::clear((uint64_t)this + 264);
    v2 = *((_QWORD *)this + 28);
    if (v2)
    {
      v3 = *((_QWORD *)this + 30);
      v4 = 8 * v2;
      do
      {
        if (*(_QWORD *)(*(_QWORD *)v3 + 376) == *((_QWORD *)this + 45))
        {
          objc_initWeak(&location, (id)(*(_QWORD *)v3 + 8));
          re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::add((re::ecs2::ECSManager *)((char *)this + 264), &location);
          objc_destroyWeak(&location);
        }
        v3 += 8;
        v4 -= 8;
      }
      while (v4);
    }
    *((_DWORD *)this + 64) = *((_DWORD *)this + 58);
  }
  return *((_QWORD *)this + 37);
}

void re::ecs2::ECSManager::executeInlinePhaseByGroup(re::ecs2::ECSManager *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  _BOOL4 v19;
  id v20;
  unsigned __int8 *v21;

  v4 = *((_QWORD *)this + 45);
  if (v4)
    v5 = *(_QWORD *)(v4 + 24);
  else
    v5 = 1;
  v6 = *((_QWORD *)this + 9);
  if (!v6)
    goto LABEL_33;
  v7 = (unsigned __int8 **)*((_QWORD *)this + 11);
  v8 = 8 * v6;
  v9 = 1;
  do
  {
    v10 = *v7;
    v21 = v10;
    if (v10[48] == a2)
    {
      v11 = v10[84] == 2;
      if (v11)
      {
        v9 |= v11;
      }
      else
      {
        v12 = v9 ^ 1;
        v9 |= v11;
        if ((v12 & 1) == 0)
        {
          re::ecs2::ECSManager::flushComponentToMarkDirtyQueue(this);
          v9 = 0;
        }
      }
      v13 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 152, (uint64_t *)&v21);
      if (v21)
        v14 = v21 + 8;
      else
        v14 = 0;
      objc_initWeak(&v20, v14);
      if (v13)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v13 + 376);
        if (v15)
          v16 = *(_QWORD *)(v15 + 24);
        else
          v16 = 1;
        if (v5 == v16)
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)v21 + 88))(v21);
      }
      else
      {
        v17 = v21[85];
        v18 = v5 == 1 && v21[85] == 0;
        v19 = v5 == 1 || v17 != 1;
        if (v17 == 2 || v18 || !v19)
          (*(void (**)(void))(*(_QWORD *)v21 + 80))();
      }
      objc_destroyWeak(&v20);
    }
    ++v7;
    v8 -= 8;
  }
  while (v8);
  if ((v9 & 1) != 0)
LABEL_33:
    re::ecs2::ECSManager::flushComponentToMarkDirtyQueue(this);
}

uint64_t re::ecs2::ECSManager::services(re::ecs2::ECSManager *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::ECSManager::scheduler(re::ecs2::ECSManager *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t re::ecs2::ECSManager::setScheduler(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t re::ecs2::ECSManager::sceneNetworkingMode(re::ecs2::ECSManager *this)
{
  return *((unsigned int *)this + 86);
}

uint64_t re::ecs2::ECSManager::defaultCustomSystemTaskOptions(re::ecs2::ECSManager *this)
{
  return (uint64_t)this + 304;
}

void re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::operator()()
{
  uint64_t v0;
  re *isStatisticCollectionEnabled;
  re::ProfilerThreadContext *v2;

  v0 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v0)
    v0 = kdebug_trace();
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v0);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v2 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::pushTimeScope(v2);
  }
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71CC8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71CC8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::operator()(re::ProfilerConfig *a1)
{
  re *isStatisticCollectionEnabled;
  uint64_t v2;
  uint64_t result;

  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v2 = re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::popTimeScope(v2, 0xDu);
  }
  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
    return kdebug_trace();
  return result;
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71D20;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71D20;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePreparePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::operator()()
{
  uint64_t v0;
  re *isStatisticCollectionEnabled;
  re::ProfilerThreadContext *v2;

  v0 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v0)
    v0 = kdebug_trace();
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v0);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v2 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::pushTimeScope(v2);
  }
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71D78;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71D78;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::operator()(uint64_t a1)
{
  uint64_t v1;
  re::ProfilerConfig *v3;
  re *isStatisticCollectionEnabled;
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  _BYTE v11[16];

  v3 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v11, 3007, *(_QWORD *)(a1 + 8));
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v3);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v5 = re::profilerThreadContext(isStatisticCollectionEnabled);
    if (*(_QWORD *)(v5 + 152))
      v1 = mach_absolute_time();
  }
  else
  {
    v5 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 8) + 328))();
  if (v5)
  {
    if (*(_QWORD *)(v5 + 152))
    {
      v6 = mach_absolute_time();
      v7 = *(int64x2_t **)(v5 + 152);
      if (v7)
      {
        v8 = v7[512].u64[0];
        if (v8 >= v6 - v1)
          v8 = v6 - v1;
        v7[512].i64[0] = v8;
        v9 = v7[512].u64[1];
        if (v9 <= v6 - v1)
          v9 = v6 - v1;
        v7[512].i64[1] = v9;
        v10 = vdupq_n_s64(1uLL);
        v10.i64[0] = v6 - v1;
        v7[513] = vaddq_s64(v7[513], v10);
        *(_BYTE *)(v5 + 184) = 0;
      }
    }
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v11);
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71DD0;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71DD0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_2,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_2,void ()(float)>::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t isStatisticCollectionEnabled;
  int64x2_t *v10;
  unint64_t v11;
  unint64_t v12;
  int64x2_t v13;
  re *v14;
  uint64_t v15;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = 0;
    v4 = *(uint64_t **)(v1 + 40);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v3 += *(_DWORD *)(v6 + 128);
      v5 -= 8;
    }
    while (v5);
    v7 = v3;
  }
  else
  {
    v7 = 0;
  }
  v8 = re::internal::enableSignposts(0, 0);
  if ((v8 & 1) != 0)
    v8 = kdebug_trace();
  isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v8);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
    v10 = *(int64x2_t **)(isStatisticCollectionEnabled + 152);
    if (v10)
    {
      v11 = v10[476].u64[0];
      if (v11 >= v7)
        v11 = v7;
      v10[476].i64[0] = v11;
      v12 = v10[476].u64[1];
      if (v12 <= v7)
        v12 = v7;
      v10[476].i64[1] = v12;
      v13 = vdupq_n_s64(1uLL);
      v13.i64[0] = v7;
      v10[477] = vaddq_s64(v10[477], v13);
      *(_BYTE *)(isStatisticCollectionEnabled + 184) = 0;
    }
  }
  v14 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
  if ((_DWORD)v14)
  {
    v15 = re::profilerThreadContext(v14);
    re::ProfilerThreadContext::popTimeScope(v15, 0xEu);
  }
  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
    return kdebug_trace();
  return result;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_2,void ()(float)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED71E28;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_2,void ()(float)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED71E28;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureSimulatePhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_2,void ()(float)>::size()
{
  return 24;
}

void re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::operator()()
{
  uint64_t v0;
  re *isStatisticCollectionEnabled;
  re::ProfilerThreadContext *v2;

  v0 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v0)
    v0 = kdebug_trace();
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v0);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v2 = (re::ProfilerThreadContext *)re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::pushTimeScope(v2);
  }
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71E80;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71E80;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::size()
{
  return 16;
}

void re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::operator()(re::ProfilerConfig *a1)
{
  re *isStatisticCollectionEnabled;
  uint64_t v2;
  uint64_t result;

  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v2 = re::profilerThreadContext(isStatisticCollectionEnabled);
    re::ProfilerThreadContext::popTimeScope(v2, 0xFu);
  }
  result = re::internal::enableSignposts(0, 0);
  if ((_DWORD)result)
    return kdebug_trace();
  return result;
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71ED8;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71ED8;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureCommitPhase(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_1,void ()(float)>::size()
{
  return 16;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::~Callable(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_24ED71F30;
  v2 = (id *)(a1 + 8);
  objc_destroyWeak((id *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  objc_destroyWeak(v2);
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::~Callable(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_24ED71F30;
  v2 = (id *)(a1 + 8);
  objc_destroyWeak((id *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  objc_destroyWeak(v2);
  *(_QWORD *)(a1 + 8) = 0;
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  _QWORD *WeakRetained;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
  {
    v5 = WeakRetained;
    *((_BYTE *)WeakRetained + 78) = 0;
    v6 = objc_loadWeakRetained((id *)(a1 + 16));
    if (v6)
    {
      v7 = v6;
      if (v5[4] && *((_QWORD *)v6 + 6))
      {
        v8 = **(_QWORD **)(a1 + 32);
        if (v8)
          v9 = *(_QWORD *)(v8 + 24);
        else
          v9 = 1;
        v10 = *((_QWORD *)v6 + 46);
        if (v10)
          v11 = *(_QWORD *)(v10 + 24);
        else
          v11 = 1;
        if (v9 == v11)
          (*(void (**)(_QWORD *, uint64_t, unint64_t))(*(v5 - 1) + 88))(v5 - 1, (uint64_t)v6 - 8, v3 | ((unint64_t)**(unsigned __int8 **)(a1 + 24) << 32));
      }

    }
  }
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED71F30;
  *(_QWORD *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(_QWORD *)(a2 + 16) = 0;
  objc_copyWeak((id *)(a2 + 16), (id *)(a1 + 16));
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED71F30;
  *(_QWORD *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(_QWORD *)(a2 + 16) = 0;
  objc_moveWeak((id *)(a2 + 16), (id *)(a1 + 16));
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_0,void ()(float)>::size()
{
  return 40;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::~Callable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24ED71F88;
  objc_destroyWeak((id *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::~Callable(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24ED71F88;
  objc_destroyWeak((id *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::operator()(uint64_t a1)
{
  unsigned __int8 *WeakRetained;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  _BOOL4 v8;

  WeakRetained = (unsigned __int8 *)objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
  {
    v3 = WeakRetained;
    WeakRetained[78] = 0;
    if (*((_QWORD *)WeakRetained + 4))
    {
      v4 = **(_QWORD **)(a1 + 24);
      if (v4)
        v5 = *(_QWORD *)(v4 + 24);
      else
        v5 = 1;
      v6 = WeakRetained[77];
      v7 = v5 == 1 && WeakRetained[77] == 0;
      v8 = v5 == 1 || v6 != 1;
      if (v6 == 2 || v7 || !v8)
        (*(void (**)(void))(*((_QWORD *)WeakRetained - 1) + 80))();
    }

  }
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::cloneInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED71F88;
  *(_QWORD *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED71F88;
  *(_QWORD *)(a2 + 8) = 0;
  objc_moveWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configurePhaseECSSystems(re::Scheduler::ScheduleDescriptor &,re::ecs2::ECSSystemGroup,unsigned long)::$_1,void ()(float)>::size()
{
  return 32;
}

void re::internal::Callable<re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::operator()(uint64_t a1)
{
  re::ecs2::ECSManager::flushComponentToMarkDirtyQueue(*(re::ecs2::ECSManager **)(a1 + 8));
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71FE0;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED71FE0;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::ECSManager::configureEnqueuedDirtyComponentsTask(re::Scheduler::ScheduleDescriptor &,unsigned long)::$_0,void ()(float)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ArcWeakPtr<re::ecs2::Component>,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 256, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::DynamicArray<char>::copy(_QWORD *this, unint64_t a2, char *__src, size_t __len)
{
  size_t v4;
  unint64_t v5;
  _QWORD *v6;
  size_t v7;
  size_t v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;

  if (!__len)
    return this;
  v5 = a2;
  v6 = this;
  v7 = this[2];
  if (v7 + 1 <= a2)
  {
    v12 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v13) = 136315906;
    *(_QWORD *)((char *)&v13 + 4) = "copy";
    WORD6(v13) = 1024;
    HIWORD(v13) = 643;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 647, v7, v5, v4, v12, v13);
    _os_crash();
    __break(1u);
  }
  v4 = __len;
  v8 = a2 + __len;
  if (__CFADD__(a2, __len))
    goto LABEL_12;
  if (v7 >= v8)
  {
    this = memmove((void *)(this[4] + a2), __src, __len);
  }
  else
  {
    re::DynamicArray<char>::growCapacity(this, a2 + __len);
    v10 = v6[2];
    v11 = &__src[v10 - v5];
    if (v10 != v5)
    {
      memmove((void *)(v6[4] + v5), __src, v10 - v5);
      v5 = v6[2];
    }
    this = memcpy((void *)(v6[4] + v5), v11, &__src[v4] - v11);
    v6[2] = v8;
  }
  ++*((_DWORD *)v6 + 6);
  return this;
}

_QWORD *re::DynamicArray<char>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<char>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<char>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

void re::exportToKtx(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v10;
  id v11;
  void *v12;
  id *v13;
  void *v14;
  const re::TextureData *v15;
  re *v16;
  _anonymous_namespace_ *v17;
  size_t v18;
  id *v19;
  int v20;
  int FaceOrArrayLength;
  uint64_t v22;
  re *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  _anonymous_namespace_ *v27;
  unint64_t v28;
  _anonymous_namespace_ *v29;
  _anonymous_namespace_ *v30;
  __int128 v31;
  __int128 v32;
  NSObject *v33;
  NSObject *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  const char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  __int128 v43;
  _anonymous_namespace_ *v44;
  uint64_t v45;
  size_t v46;
  id v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  _anonymous_namespace_ *v53;
  const char *v54;
  void *v55;
  char *v56;
  int v57;
  re::TextureData *v58;
  uint64_t v59;
  id v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  id v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  id v72;
  id v73;
  id v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  id v78;
  id v79;
  id v80;
  _OWORD v81[2];
  _OWORD v82[2];
  int v83;
  uint64_t v84;
  id v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  size_t v91;
  _BYTE v92[40];
  __int128 v93;
  __int128 v94;
  unsigned __int128 v95;
  __int128 v96;
  __int128 v97;
  unsigned int v98;
  id v99;
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v10 = *(_DWORD *)(a2 + 88);
  if (v10 == 1)
  {
    v66 = *(id *)(a2 + 96);
    v19 = (id *)(a2 + 8);
    if (objc_msgSend(*(id *)(a2 + 8), sel_textureType) == 5)
      v20 = 6;
    else
      v20 = 1;
    v63 = v20;
    FaceOrArrayLength = re::internal::getFaceOrArrayLength((id *)(a2 + 8));
    v22 = *(_QWORD *)(a2 + 32);
    if (!LOBYTE(v81[0]))
    {
      v33 = *re::pipelineLogObjects(v23);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v85[0]) = 0;
        _os_log_error_impl(&dword_224FE9000, v33, OS_LOG_TYPE_ERROR, "Failed to write KTX header to output stream", (uint8_t *)v85, 2u);
      }
      *(_BYTE *)a5 = 0;
      *(_QWORD *)(a5 + 8) = *((_QWORD *)&v81[0] + 1);
      *(_QWORD *)(a5 + 32) = *(_QWORD *)&v82[0];
      *(_OWORD *)(a5 + 16) = v81[1];
      memset((char *)v81 + 8, 0, 24);
      return;
    }
    if ((int)v22 < 1)
    {
LABEL_25:
      *(_BYTE *)a5 = 1;
      return;
    }
    v24 = 0;
    v25 = 32;
    while (1)
    {
      v91 = 0;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      *(_OWORD *)v85 = 0u;
      v86 = 0u;
      LOBYTE(v93) = 0;
      std::__variant_detail::__alt<1ul,re::CPUTexture>::__alt[abi:nn180100]<re::CPUTexture const&>((_QWORD *)&v93 + 1, a2 + 8);
      v98 = 1;
      v99 = 0;

      if (v98 != -1)
        ((void (*)(_BYTE *, char *))*(&off_24ED72028 + v98))(v92, (char *)&v93 + 8);
      LODWORD(v69) = v91;
      if (objc_msgSend(*v19, sel_textureType) == 3)
      {
        v26 = DWORD2(v90);
        LODWORD(v69) = objc_msgSend(*v19, sel_arrayLength) * v26;
      }
      v27 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v69, 4);
      if (v27 != (_anonymous_namespace_ *)4)
      {
        v39 = "Failed to write KTX image size to output stream";
        goto LABEL_39;
      }
      v28 = *(_QWORD *)(a2 + 32);
      if (v28 <= v24)
      {
        v74 = 0;
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v93 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v92 = 136315906;
        *(_QWORD *)&v92[4] = "operator[]";
        *(_WORD *)&v92[12] = 1024;
        *(_DWORD *)&v92[14] = 797;
        *(_WORD *)&v92[18] = 2048;
        *(_QWORD *)&v92[20] = v24;
        *(_WORD *)&v92[28] = 2048;
        *(_QWORD *)&v92[30] = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v29 = (_anonymous_namespace_ *)(v69 * v63);
      v30 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, _QWORD, _anonymous_namespace_ *))(*(_QWORD *)a1 + 16))(a1, *(_QWORD *)(*(_QWORD *)(a2 + 48) + v25), v29);
      if (v30 != v29)
        break;
      ++v24;
      v25 += 40;
      if (v22 == v24)
        goto LABEL_25;
    }
    v39 = "Failed to write KTX image to output stream";
LABEL_39:
    re::DynamicString::DynamicString((re::DynamicString *)v92, (const re::DynamicString *)&v93);
    *(_BYTE *)a5 = 0;
    v40 = *(_QWORD *)&v92[24];
    *(_QWORD *)(a5 + 8) = *(_QWORD *)v92;
    *(_QWORD *)(a5 + 32) = v40;
    *(_OWORD *)(a5 + 16) = *(_OWORD *)&v92[8];
LABEL_40:
    if ((_QWORD)v93)
    {
      if ((BYTE8(v93) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v93 + 40))(v93, v94);
    }
    return;
  }
  if (v10)
  {
    v57 = std::__throw_bad_variant_access[abi:nn180100]();
    re::exportToKtxWithRGBA8ToASTCCompression(v57, v58);
    return;
  }
  v11 = *(id *)(a2 + 96);
  v14 = *(void **)(a2 + 8);
  v13 = (id *)(a2 + 8);
  v12 = v14;
  if (!v14)
  {
    v31 = *(_OWORD *)v85;
    v32 = v86;
    *(_BYTE *)a5 = 0;
    *(_OWORD *)(a5 + 8) = v31;
    *(_OWORD *)(a5 + 24) = v32;
    return;
  }
  v65 = objc_msgSend(v12, sel_mipmapLevelCount);
  v61 = re::internal::getFaceOrArrayLength(v13);
  LOBYTE(v85[0]) = 0;
  v85[1] = *v13;
  DWORD2(v90) = 0;
  v91 = 0;
  re::internal::synchronizeTextureMipmaps(v85, v15);

  if (DWORD2(v90) != -1)
    ((void (*)(__int128 *, id *))*(&off_24ED72028 + DWORD2(v90)))(&v93, &v85[1]);
  if (!v92[0])
  {
    v34 = *re::pipelineLogObjects(v16);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v85[0]) = 0;
      _os_log_error_impl(&dword_224FE9000, v34, OS_LOG_TYPE_ERROR, "Failed to write KTX header to output stream", (uint8_t *)v85, 2u);
    }
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 8) = *(_QWORD *)&v92[8];
    *(_QWORD *)(a5 + 32) = *(_QWORD *)&v92[32];
    *(_OWORD *)(a5 + 16) = *(_OWORD *)&v92[16];
    memset(&v92[8], 0, 24);
    return;
  }
  v91 = 0;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  *(_OWORD *)v85 = 0u;
  v86 = 0u;
  LOBYTE(v93) = 0;
  *((_QWORD *)&v93 + 1) = *v13;
  v98 = 0;
  v99 = 0;

  if (v98 != -1)
    v17 = (_anonymous_namespace_ *)((uint64_t (*)(_OWORD *, char *))*(&off_24ED72028 + v98))(v81, (char *)&v93 + 8);
  v18 = v91;
  if (HIDWORD(v91))
  {
    re::DynamicString::DynamicString((re::DynamicString *)v81, (const re::DynamicString *)&v93);
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 8) = *(_QWORD *)&v81[0];
    *(_QWORD *)(a5 + 32) = *((_QWORD *)&v81[1] + 1);
    *(_OWORD *)(a5 + 16) = *(_OWORD *)((char *)v81 + 8);
    goto LABEL_40;
  }
  LOBYTE(v81[1]) = 0;
  *(_QWORD *)&v81[0] = &off_24ED42538;
  *((_QWORD *)&v81[0] + 1) = "re::ExportToKtxAllocator";
  memset(v82, 0, sizeof(v82));
  v83 = 0;
  v84 = 0x7FFFFFFFLL;
  v35 = objc_msgSend(*v13, sel_storageMode);
  v36 = objc_msgSend(*v13, sel_device);
  v79 = 0;
  v80 = v36;
  v78 = 0;
  v68 = v35;
  v62 = a5;
  if (v35 == (id)2)
  {
    re::ImportGraphicsResources::createCommandQueue(&v80, (const re::mtl::Device *)"createTextureWithKTXData", (const char *)1, v85);
    v37 = v85[0];
    v85[0] = 0;
    v60 = v37;
    v79 = v37;

    v85[0] = objc_msgSend(v80, sel_newBufferWithLength_options_, v18, 0);
    NS::SharedPtr<MTL::Texture>::operator=(&v78, v85);
    if (v85[0])

    v38 = objc_msgSend(v78, sel_contents);
  }
  else
  {
    v85[0] = (id)(*(uint64_t (**)(_QWORD, size_t, _QWORD))(**((_QWORD **)&v81[1] + 1) + 32))(*((_QWORD *)&v81[1] + 1), v18, 0);
    re::HashSetBase<void *,void *,re::internal::ValueAsKey<void *>,re::Hash<void *>,re::EqualTo<void *>,true,false>::add((uint64_t)v82, (uint64_t *)v85);
    v60 = 0;
    v38 = v85[0];
  }
  v41 = v61;
  if (v65 < 1)
  {
LABEL_60:
    *(_BYTE *)v62 = 1;
LABEL_65:
    v55 = v60;
    goto LABEL_66;
  }
  v42 = 0;
  v59 = v65;
  v43 = 0uLL;
  while (1)
  {
    v91 = 0;
    v89 = v43;
    v90 = v43;
    v87 = v43;
    v88 = v43;
    *(_OWORD *)v85 = v43;
    v86 = v43;
    LOBYTE(v93) = 0;
    *((_QWORD *)&v93 + 1) = *v13;
    v98 = 0;
    v99 = 0;

    if (v98 != -1)
      ((void (*)(id *, char *))*(&off_24ED72028 + v98))(&v74, (char *)&v93 + 8);
    v77 = v91;
    if (objc_msgSend(*v13, sel_textureType) == (id)3)
      v77 *= v41;
    v44 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v77, 4);
    if (v44 != (_anonymous_namespace_ *)4)
    {
      v54 = "Failed to write KTX image size to output stream";
LABEL_62:
      re::DynamicString::DynamicString((re::DynamicString *)&v74, (const re::DynamicString *)&v93);
      *(_BYTE *)v62 = 0;
      *(_QWORD *)(v62 + 8) = v74;
      *(_QWORD *)(v62 + 32) = v76;
      *(_OWORD *)(v62 + 16) = v75;
      if ((_QWORD)v93 && (BYTE8(v93) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v93 + 40))();
      goto LABEL_65;
    }
    if (v41 >= 1)
      break;
LABEL_59:
    ++v42;
    v41 = v61;
    v43 = 0uLL;
    if (v42 == v59)
      goto LABEL_60;
  }
  v45 = 0;
  v64 = *((_QWORD *)&v90 + 1);
  v67 = v90;
  v46 = v91;
  while (1)
  {
    bzero(v38, v46);
    v48 = v85[0];
    v47 = v85[1];
    v49 = v86;
    if (v68 == (id)2)
      break;
    v52 = *v13;
    v93 = 0uLL;
    *(_QWORD *)&v94 = 0;
    *((id *)&v94 + 1) = v85[0];
    v95 = __PAIR128__(v86, (unint64_t)v85[1]);
    objc_msgSend(v52, sel_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice_, v38, v67, v64, &v93, v42, v45);
LABEL_57:
    v53 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, id, size_t))(*(_QWORD *)a1 + 16))(a1, v38, v46);
    if (v53 != (_anonymous_namespace_ *)v46)
    {
      v54 = "Failed to write KTX image to output stream";
      goto LABEL_62;
    }
    if (v61 == ++v45)
      goto LABEL_59;
  }
  v50 = (void *)MEMORY[0x227694090]();
  re::mtl::CommandQueue::makeCommandBuffer(&v79, &v73);
  re::mtl::CommandBuffer::makeBlitCommandEncoder(&v73, &v72);
  v51 = *v13;
  *(_QWORD *)&v94 = 0;
  v93 = 0uLL;
  v74 = v48;
  *(_QWORD *)&v75 = v47;
  *((_QWORD *)&v75 + 1) = v49;
  objc_msgSend(v72, "copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:", v51, v45, v42, &v93, &v74, v78, 0, v67, v64);
  objc_msgSend(v72, "endEncoding");
  objc_msgSend(v73, "commit");
  objc_msgSend(v73, "waitUntilCompleted");
  re::internal::getCommandBufferError(&v73, (uint64_t)&v93);
  if ((_BYTE)v93)
  {

    objc_autoreleasePoolPop(v50);
    goto LABEL_57;
  }
  if ((v94 & 1) != 0)
    v56 = (char *)*((_QWORD *)&v94 + 1);
  else
    v56 = (char *)&v94 + 1;
  re::DynamicString::DynamicString((re::DynamicString *)&v69, (const re::DynamicString *)&v74);
  *(_BYTE *)v62 = 0;
  *(_QWORD *)(v62 + 8) = v69;
  *(_QWORD *)(v62 + 32) = v71;
  *(_OWORD *)(v62 + 16) = v70;
  if (v74 && (v75 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v74 + 40))();
  v55 = v60;
  if (!(_BYTE)v93 && *((_QWORD *)&v93 + 1) && (v94 & 1) != 0)
    (*(void (**)(void))(**((_QWORD **)&v93 + 1) + 40))();

  objc_autoreleasePoolPop(v50);
LABEL_66:
  if (v78)

  re::AutoFreeAllocator::~AutoFreeAllocator((re::AutoFreeAllocator *)v81);
}

BOOL re::exportToKtxWithRGBA8ToASTCCompression(uint64_t a1, re::TextureData *this, unint64_t a3, uint64_t a4, int a5)
{
  re *v9;
  unint64_t v10;
  id v11;
  BOOL v12;
  NSObject *v13;
  uint64_t MTLPixelFormat;
  const re::TextureData *v15;
  uint64_t v16;
  int v17;
  const re::TextureData *v18;
  id v19;
  id v20;
  const void *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  re *v25;
  char **v26;
  unsigned int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  re *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  NSObject *v41;
  NSObject *v42;
  unsigned int v44;
  NSObject *v45;
  _BYTE *v46;
  NSObject *v47;
  _BYTE *v48;
  int v49;
  NSObject *v50;
  unsigned int FaceOrArrayLength;
  int v52;
  int v53;
  _QWORD v54[3];
  char v55;
  _BYTE v56[12];
  id v57;
  char v58[8];
  uint64_t v59;
  char v60;
  _BYTE v61[23];
  NSObject *v62;
  void *v63;
  int v64;
  uint64_t v65;
  __int128 v66;
  uint8_t v67[4];
  _BYTE *v68;
  _QWORD v69[3];
  re *v70;
  uint8_t v71[4];
  int v72;
  uint64_t v73;
  char v74;
  _BYTE v75[31];
  uint8_t buf[16];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v66 = a3;
  *((_QWORD *)&v66 + 1) = a4;
  if (re::TextureData::isValid(this))
  {
    if (*((_DWORD *)this + 22) >= 2u)
      goto LABEL_86;
    v9 = (re *)re::MTLToASTCPixelFormat((int)objc_msgSend(*((id *)this + 1), sel_pixelFormat));
    if ((_DWORD)v9)
    {
      v10 = HIDWORD(a3);
      if (*((_DWORD *)this + 22))
        v11 = 0;
      else
        v11 = objc_msgSend(*((id *)this + 1), sel_device);
      v13 = v11;
      v62 = v13;
      v63 = 0;
      v64 = 65793;
      v65 = 0;
      if (!HIDWORD(a3))
      {
        if (*((_DWORD *)this + 22) >= 2u)
          goto LABEL_86;
        LODWORD(v10) = re::getASTCDefaultMode((int)objc_msgSend(*((id *)this + 1), sel_pixelFormat));
        DWORD1(v66) = v10;
      }
      MTLPixelFormat = re::getMTLPixelFormat(a3, v10);
      if (!(_DWORD)MTLPixelFormat)
      {
        v40 = 0;
        v12 = 0;
LABEL_68:

        goto LABEL_69;
      }
      v16 = MTLPixelFormat;
      v50 = v13;
      FaceOrArrayLength = re::internal::getFaceOrArrayLength((id *)this, v15);
      v17 = re::TextureData::mipmapLevelCount(this);
      re::internal::synchronizeTextureMipmaps((id *)this, v18);
      if (*((_DWORD *)this + 22) < 2u)
      {
        v19 = objc_msgSend(*((id *)this + 1), sel_textureType);
        v20 = *((id *)this + 12);
        if (*((_DWORD *)this + 22) < 2u)
        {
          v21 = v20;
          v22 = objc_msgSend(*((id *)this + 1), sel_width);
          if (*((_DWORD *)this + 22) < 2u)
          {
            v23 = v22;
            v24 = objc_msgSend(*((id *)this + 1), sel_height);
            if (*((_DWORD *)this + 22) < 2u)
            {
              if (!v58[0])
              {
                v41 = *re::pipelineLogObjects(v25);
                v13 = v50;
                if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)
                  || ((v60 & 1) != 0 ? (v46 = *(_BYTE **)&v61[7]) : (v46 = v61),
                      *(_DWORD *)buf = 136315138,
                      *(_QWORD *)&buf[4] = v46,
                      _os_log_error_impl(&dword_224FE9000, v41, OS_LOG_TYPE_ERROR, "Failed to write KTX header to output stream: %s", buf, 0xCu), !v58[0]))
                {
                  if (v59 && (v60 & 1) != 0)
                    (*(void (**)(void))(*(_QWORD *)v59 + 40))();
                }
                v12 = 0;
LABEL_67:
                v40 = v63;
                goto LABEL_68;
              }
              re::logTextureCompressionInfo((re *)"exportToKtxWithRGBA8ToASTCCompression", (uint64_t)this, (int *)&v66);
              if (*((_DWORD *)this + 22) < 2u)
              {
                v26 = &selRef_newBufferWithBytes_length_options_;
                v27 = objc_msgSend(*((id *)this + 1), sel_textureType);
                v55 = 0;
                memset(v56, 0, sizeof(v56));
                v54[2] = 0;
                v54[0] = 0;
                v54[1] = 8;
                dispatch_get_global_queue(21, 0);
                v57 = (id)objc_claimAutoreleasedReturnValue();
                if (v17 < 1)
                {
                  v12 = 1;
                  goto LABEL_64;
                }
                v28 = 0;
                v12 = 0;
                v29 = 0uLL;
                v49 = v16;
                while (1)
                {
                  v82 = 0;
                  v80 = v29;
                  v81 = v29;
                  v78 = v29;
                  v79 = v29;
                  *(_OWORD *)buf = v29;
                  v77 = v29;
                  if (v27 == 7)
                    v30 = v77;
                  else
                    v30 = FaceOrArrayLength;
                  if (v27 == 7)
                    v31 = v82;
                  else
                    v31 = FaceOrArrayLength * DWORD2(v81);
                  v53 = 0;
                  if (*((_DWORD *)this + 22) >= 2u)
                    goto LABEL_86;
                  v32 = objc_msgSend(*((id *)this + 1), v26[225]);
                  v33 = DWORD2(v81);
                  if (v32 != 5)
                    v33 = v31;
                  v53 = v33;
                  v34 = (re *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v53, 4);
                  if (v34 != (re *)4)
                    break;
                  v52 = 0;
                  if ((_DWORD)v30)
                  {
                    v35 = 0;
                    while (1)
                    {
                      if (v27 == 7)
                        v36 = 0;
                      else
                        v36 = v35;
                      if (v27 == 7)
                        v37 = v35;
                      else
                        v37 = 0;
                      v69[0] = &off_24ED72048;
                      v69[1] = &v52;
                      v69[2] = a1;
                      v70 = (re *)v69;
                      re::copyTextureBytesToASTCCompression((id *)&v62, (uint64_t)this, &v66, a5, v28, v36, v37, (re::ASTCCompressor *)v54, (uint64_t)v71, (uint64_t)v69);
                      v34 = v70;
                      if (v70 == (re *)v69)
                      {
                        v34 = (re *)v69;
                        v38 = 4;
                      }
                      else
                      {
                        if (!v70)
                          goto LABEL_45;
                        v38 = 5;
                      }
                      v34 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v34 + 8 * v38))();
LABEL_45:
                      if (!v71[0])
                      {
                        v42 = *re::pipelineLogObjects(v34);
                        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                        {
                          if ((v74 & 1) != 0)
                            v48 = *(_BYTE **)&v75[7];
                          else
                            v48 = v75;
                          *(_DWORD *)v67 = 136315138;
                          v68 = v48;
                          _os_log_error_impl(&dword_224FE9000, v42, OS_LOG_TYPE_ERROR, "Failed to write KTX image: %s", v67, 0xCu);
                        }
                        if (!v71[0] && v73 && (v74 & 1) != 0)
                          (*(void (**)(void))(*(_QWORD *)v73 + 40))();
                        goto LABEL_64;
                      }
                      if (v30 == ++v35)
                      {
                        v39 = v52;
                        v26 = &selRef_newBufferWithBytes_length_options_;
                        goto LABEL_49;
                      }
                    }
                  }
                  v39 = 0;
LABEL_49:
                  v29 = 0uLL;
                  if (v39 != v31)
                  {
                    v47 = *re::pipelineLogObjects(v34);
                    if (os_log_type_enabled(v47, OS_LOG_TYPE_FAULT))
                    {
                      *(_DWORD *)v71 = 67109376;
                      v72 = v52;
                      LOWORD(v73) = 1024;
                      *(_DWORD *)((char *)&v73 + 2) = v31;
                      _os_log_fault_impl(&dword_224FE9000, v47, OS_LOG_TYPE_FAULT, "Unexpected buffer size for ASTC-compressed texture (got %u, expected %u)", v71, 0xEu);
                    }
                    goto LABEL_64;
                  }
                  v12 = ++v28 >= v17;
                  LODWORD(v16) = v49;
                  if (v28 == v17)
                    goto LABEL_64;
                }
                v45 = *re::pipelineLogObjects(v34);
                if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)v71 = 0;
                  _os_log_error_impl(&dword_224FE9000, v45, OS_LOG_TYPE_ERROR, "Failed to write KTX image size to output stream", v71, 2u);
                }
LABEL_64:
                if (*(_QWORD *)&v56[4])
                {
                  astcenc_context_free(*(uint64_t *)&v56[4]);
                  *(_QWORD *)&v56[4] = 0;
                }

                v13 = v50;
                goto LABEL_67;
              }
            }
          }
        }
      }
LABEL_86:
      std::__throw_bad_variant_access[abi:nn180100]();
    }
    v13 = (id)*re::pipelineLogObjects(v9);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      if (*((_DWORD *)this + 22) >= 2u)
        goto LABEL_86;
      v44 = objc_msgSend(*((id *)this + 1), sel_pixelFormat);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v44;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Unsupported metal format for ASTC compression: %d", buf, 8u);
    }
    v12 = 0;
LABEL_69:

    return v12;
  }
  return 0;
}

void re::`anonymous namespace'::writeKtxHeader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10, int a11, uint64_t a12, int a13)
{
  int v14;
  int v15;
  unint64_t v18;
  char *v19;
  unsigned int StandardKtxMetadata;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  _anonymous_namespace_ *v26;
  _BOOL4 v27;
  _anonymous_namespace_ *v28;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(re::AutoFreeAllocator *__hidden);
  const char *v36;
  uint64_t v37;
  uint64_t *v38;
  _OWORD v39[2];
  int v40;
  uint64_t v41;
  _BYTE v42[24];
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  __int128 v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;

  v14 = a4;
  v15 = a3;
  v55 = *MEMORY[0x24BDAC8D0];
  v49 = 0;
  v44 = 0xBB31312058544BABLL;
  v45 = 169478669;
  v46 = 67305985;
  v18 = 0xFFFFFFFFFFFFDF10;
  while (1)
  {
      break;
    v18 += 68;
    if (!v18)
    {
      re::DynamicString::format((re::DynamicString *)"Unsupported pixel format: %d", (re::DynamicString *)&v35, a4);
      goto LABEL_5;
    }
  }
  v47 = *(_OWORD *)(v19 + 8452);
  v48 = *((_DWORD *)v19 + 2117);
  if ((a3 & 0xFFFFFFFE) == 2)
    goto LABEL_11;
  if ((_DWORD)a3 == 7)
    goto LABEL_12;
  if ((_DWORD)a3 == 5)
  {
LABEL_11:
    a8 = 0;
LABEL_12:
    v49 = __PAIR64__(a7, a6);
    v50 = a8;
    LOBYTE(v37) = 0;
    v35 = &off_24ED42538;
    v36 = "re::ExportToKtxAllocator";
    memset(v39, 0, sizeof(v39));
    v40 = 0;
    v41 = 0x7FFFFFFFLL;
    v34 = 0;
    StandardKtxMetadata = re::makeStandardKtxMetadata(v14, a5, 0, (uint64_t)&v35, &v34);
    v21 = StandardKtxMetadata;
    if (a12)
      v22 = a13;
    else
      v22 = 0;
    v23 = StandardKtxMetadata + v22;
    if (v15 == 3)
      v24 = a9;
    else
      v24 = 0;
    if (v15 == 3)
      v25 = 1;
    else
      v25 = a9;
    v51 = v24;
    v52 = v25;
    v53 = a11;
    v54 = (v23 + 3) & 0xFFFFFFFC;
    v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v44, 64);
    v27 = v26 == (_anonymous_namespace_ *)64;
    if (v21)
    {
      v28 = v26;
      v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, v34, v21);
      v27 = v28 == (_anonymous_namespace_ *)64 && v26 == (_anonymous_namespace_ *)v21;
    }
    if (a12)
    {
      if (a13 >= 1)
      {
        v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, a12, a13);
        if (v26 != (_anonymous_namespace_ *)a13)
          v27 = 0;
      }
    }
    if ((v23 & 3) != 0)
    {
      *(_DWORD *)v42 = 0;
      v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)a2 + 16))(a2, v42, v23 & 3);
      if (v26 == (_anonymous_namespace_ *)(v23 & 3) && v27)
        goto LABEL_37;
    }
    else if (v27)
    {
LABEL_37:
      *(_BYTE *)a1 = 1;
LABEL_40:
      re::AutoFreeAllocator::~AutoFreeAllocator((re::AutoFreeAllocator *)&v35);
      return;
    }
    v31 = *(_OWORD *)v42;
    v32 = *(_QWORD *)&v42[16];
    v33 = v43;
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v31;
    *(_QWORD *)(a1 + 24) = v32;
    *(_QWORD *)(a1 + 32) = v33;
    goto LABEL_40;
  }
  re::DynamicString::format((re::DynamicString *)"Unsupported texture type: %d", (re::DynamicString *)&v35, a3);
LABEL_5:
  re::DynamicString::DynamicString((re::DynamicString *)v42, (const re::DynamicString *)&v35);
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)v42;
  *(_QWORD *)(a1 + 32) = v43;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)&v42[8];
  if (v35)
  {
    if ((v36 & 1) != 0)
      (*((void (**)(void))*v35 + 5))();
  }
}

void re::TextureData::textureType(id *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (*((_DWORD *)this + 22) >= 2u)
  {
    v1 = std::__throw_bad_variant_access[abi:nn180100]();
  }
  else
  {
    objc_msgSend(this[1], sel_textureType);
  }
}

void re::`anonymous namespace'::ktxMipInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7;
  id v8;
  uint64_t v9;
  char v10;
  void *v11;

  if (*(_DWORD *)(a2 + 88))
  {
    v11 = 0;
    if (a4)
      goto LABEL_10;
  }
  else
  {
    v7 = objc_msgSend(*(id *)(a2 + 8), sel_device);
    v11 = v7;
    if (a4)
    {
      if (v7)
      {
        v8 = objc_retainAutorelease(v7);
        MTLPixelFormatGetInfoForDevice();
        if ((v10 & 1) == 0)
          re::ObjCObject::operator=(&v11, 0);
      }
      goto LABEL_10;
    }
  }
  if (*(_DWORD *)(a2 + 88) >= 2u)
  {
LABEL_16:
    v9 = std::__throw_bad_variant_access[abi:nn180100]();
    re::shouldASTCCompress(v9);
    return;
  }
  objc_msgSend(*(id *)(a2 + 8), sel_pixelFormat);
LABEL_10:
  if (*(_DWORD *)(a2 + 88) >= 2u)
    goto LABEL_16;
  objc_msgSend(*(id *)(a2 + 8), sel_width);
  if (*(_DWORD *)(a2 + 88) >= 2u)
    goto LABEL_16;
  objc_msgSend(*(id *)(a2 + 8), sel_height);
  if (*(_DWORD *)(a2 + 88) >= 2u)
    goto LABEL_16;
  objc_msgSend(*(id *)(a2 + 8), sel_depth);
  if (!*(_DWORD *)(a2 + 88))
    objc_msgSend(*(id *)(a2 + 8), sel_sampleCount);
  re::ktxMipInfo(&v11, a1);

}

uint64_t re::shouldASTCCompress(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  uint64_t result;
  BOOL v8;
  id *v9;
  const re::TextureData *v10;

  result = re::TextureData::isValid((re::TextureData *)a1);
  if ((_DWORD)result)
  {
    result = 0;
    switch(a3)
    {
      case 0:
      case 2:
        if (*(_DWORD *)(a1 + 88) >= 2u)
          goto LABEL_16;
        if (objc_msgSend(*(id *)(a1 + 8), sel_pixelFormat) != 70)
        {
          if (*(_DWORD *)(a1 + 88) >= 2u)
            goto LABEL_16;
          v8 = objc_msgSend(*(id *)(a1 + 8), sel_pixelFormat) == 71;
          goto LABEL_11;
        }
        result = 1;
        break;
      case 3:
        goto LABEL_7;
      case 4:
        if (*a4)
        {
LABEL_7:
          if (*(_DWORD *)(a1 + 88) >= 2u)
          {
LABEL_16:
            v9 = (id *)std::__throw_bad_variant_access[abi:nn180100]();
            result = re::canExportToKtx(v9, v10);
          }
          else
          {
            v8 = re::getASTCBlockSize((int)objc_msgSend(*(id *)(a1 + 8), sel_pixelFormat)) == 0;
LABEL_11:
            result = v8;
          }
        }
        else
        {
          result = 0;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t re::canExportToKtx(id *this, const re::TextureData *a2)
{
  id *v2;
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)this + 22) >= 2u)
  {
    std::__throw_bad_variant_access[abi:nn180100]();
  }
  else
  {
    v2 = this;
    v3 = objc_msgSend(this[1], sel_textureType);
    if (v3 < 0xA)
      return (0xACu >> v3) & 1;
  }
  re::TextureData::textureType(v2);
  re::TextureData::textureType(v2);
  re::internal::assertLog((re::internal *)5, v6, "assertion failure: '%s' (%s:line %i) Unexpected texture type: %u.", "!\"Unreachable code\"", "canExportToKtx", 476, v5);
  result = _os_crash();
  __break(1u);
  return result;
}

void std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED72048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED72048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;

  **(_DWORD **)(a1 + 8) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7, v8);
  v10 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  if ((_anonymous_namespace_ *)v9 == v10)
  {
    *(_BYTE *)a3 = 1;
  }
  else
  {
    result = v14;
    v12 = v15;
    v13 = v16;
    *(_BYTE *)a3 = 0;
    *(__n128 *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 24) = v12;
    *(_QWORD *)(a3 + 32) = v13;
  }
  return result;
}

uint64_t std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0,std::allocator<re::exportToKtxWithRGBA8ToASTCCompression(re::StreamWriter &,re::TextureData const&,re::ASTCCompressionOptions,re::TextureSemantic,re::Allocator *)::$_0>,re::Result<re::Unit,re::DynamicString> ()(re::ASTCResultBuffer const&)>::target_type()
{
}

uint64_t re::internal::addAttributesByName(uint64_t this, uint64_t *a2)
{
  int v2;
  re::internal::GeomAttributeContainer *v4;
  unsigned int i;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  char *v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v2 = *(_DWORD *)(this + 24);
  if (v2)
  {
    v4 = (re::internal::GeomAttributeContainer *)this;
    for (i = 0; i != v2; ++i)
    {
      v6 = re::internal::GeomAttributeContainer::attributeByIndex(v4, i);
      v7 = *(char **)(v6 + 8);
      v19 = v7;
      this = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a2, &v19);
      if (this == -1)
      {
        if (!a2[7])
        {
        }
        v8 = a2[4];
        if (!v8 || a2[2] > (unint64_t)(8 * v8))
          re::HashBrown<char const*,re::GeomAttribute *,re::internal::HashName,re::internal::HashName,void,false>::resize(a2);
        v9 = re::RigEvaluation::HashString::operator()((int)&v20, v7) % ((unint64_t)a2[2] >> 4);
        while (1)
        {
          v10 = *a2;
          v11 = re::RigEvaluation::HashString::operator()((int)&v21, v7);
          v12 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
          if (v12 < 0x40)
            break;
          if (++v9 == (unint64_t)a2[2] >> 4)
            v9 = 0;
          if (v9 == re::RigEvaluation::HashString::operator()((int)&v23, v7) % ((unint64_t)a2[2] >> 4))
          {
            re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
            this = _os_crash();
            __break(1u);
            return this;
          }
        }
        v14 = v10 + 16 * v9;
        v15 = *(unsigned __int8 *)(v14 + v12) == 255;
        *(_BYTE *)(v14 + v12) = v11 & 0x7F;
        v16 = 16 * (v12 + 16 * v9);
        v17 = (char **)(a2[1] + v16);
        *v17 = v7;
        v17[1] = (char *)v6;
        v18 = a2[4] - v15;
        ++a2[3];
        a2[4] = v18;
        this = re::RigEvaluation::HashString::operator()((int)&v22, *(char **)(a2[1] + v16));
        a2[5] ^= this;
      }
    }
  }
  return this;
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeManager::copy(re::internal::GeomAttributeContainer *this, re::internal::GeomAttributeManager *a2)
{
  uint64_t v3;

  if (a2 != this)
  {
    v3 = (uint64_t)this;
    re::internal::GeomAttributeContainer::copy(this, a2);
    re::internal::GeomAttributeContainer::copy((re::internal::GeomAttributeContainer *)(v3 + 112), (re::internal::GeomAttributeManager *)((char *)a2 + 112));
    re::internal::GeomAttributeContainer::copy((re::internal::GeomAttributeContainer *)(v3 + 224), (re::internal::GeomAttributeManager *)((char *)a2 + 224));
    re::internal::GeomAttributeContainer::copy((re::internal::GeomAttributeContainer *)(v3 + 336), (re::internal::GeomAttributeManager *)((char *)a2 + 336));
    re::internal::GeomAttributeContainer::copy((re::internal::GeomAttributeContainer *)(v3 + 448), (re::internal::GeomAttributeManager *)((char *)a2 + 448));
    return (re::internal::GeomAttributeContainer *)re::internal::GeomAttributeManager::copyAttributeTable((re::internal::GeomAttributeManager *)v3, a2);
  }
  return this;
}

uint64_t re::internal::GeomAttributeManager::copyAttributeTable(re::internal::GeomAttributeManager *this, re::internal::GeomAttributeManager *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char *v13;
  _OWORD v14[3];
  __int128 v15;

  *((_QWORD *)a2 + 72) = 0;
  ++*((_DWORD *)a2 + 146);
  *((_QWORD *)a2 + 78) = 0;
  *((_QWORD *)a2 + 81) = 0;
  *((_QWORD *)a2 + 80) = 0;
  v4 = *((_QWORD *)a2 + 77);
  *((_QWORD *)a2 + 79) = v4;
  if (v4 >= 0x10)
  {
    v5 = 0;
    *(_QWORD *)&v6 = -1;
    *((_QWORD *)&v6 + 1) = -1;
    do
      *(_OWORD *)(*((_QWORD *)a2 + 75) + 16 * v5++) = v6;
    while (v5 < *((_QWORD *)a2 + 77) >> 4);
  }
  v15 = 0u;
  memset(v14, 0, sizeof(v14));
  re::internal::addAttributesByName((uint64_t)a2, (uint64_t *)v14);
  re::internal::addAttributesByName((uint64_t)a2 + 112, (uint64_t *)v14);
  re::internal::addAttributesByName((uint64_t)a2 + 224, (uint64_t *)v14);
  re::internal::addAttributesByName((uint64_t)a2 + 336, (uint64_t *)v14);
  re::internal::addAttributesByName((uint64_t)a2 + 448, (uint64_t *)v14);
  if (*((_QWORD *)this + 72))
  {
    v7 = 0;
    v8 = 1;
    v9 = *((_QWORD *)&v14[0] + 1);
    do
    {
      v13 = *(char **)(*(_QWORD *)(*((_QWORD *)this + 74) + 8 * v7) + 8);
      v10 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)v14, &v13);
      re::internal::GeomAttributeManager::addAttributeToTable(a2, *(re::GeomAttribute **)(v9 + 16 * v10 + 8));
      v7 = v8;
    }
    while (*((_QWORD *)this + 72) > (unint64_t)v8++);
  }
  result = *((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    if (*(_QWORD *)&v14[0])
      return (*(uint64_t (**)(void))(**((_QWORD **)&v15 + 1) + 40))();
  }
  return result;
}

re::internal::GeomAttributeManager *re::internal::GeomAttributeManager::GeomAttributeManager(re::internal::GeomAttributeManager *this)
{
  uint64_t v2;
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this, 0);
  re::internal::GeomAttributeContainer::GeomAttributeContainer(v2 + 112, 1);
  re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 224, 2);
  re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 336, 3);
  v3 = (_anonymous_namespace_ *)re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 448, 4);
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_DWORD *)this + 146) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((_QWORD *)this + 70, 1uLL);
  ++*((_DWORD *)this + 146);
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_DWORD *)this = 1;
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 5);
    v7 = 8 * v5;
    do
    {
      v8 = *v6++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 72))(v8, *(unsigned int *)this);
      v7 -= 8;
    }
    while (v7);
  }
  return this;
}

re::internal::GeomAttributeManager *re::internal::GeomAttributeManager::GeomAttributeManager(re::internal::GeomAttributeManager *this, const re::internal::GeomAttributeManager *a2)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;

  v4 = re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this, 0);
  re::internal::GeomAttributeContainer::GeomAttributeContainer(v4 + 112, 1);
  re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 224, 2);
  re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 336, 3);
  v5 = (_anonymous_namespace_ *)re::internal::GeomAttributeContainer::GeomAttributeContainer((uint64_t)this + 448, 4);
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 72) = 0;
  *((_QWORD *)this + 71) = 0;
  *((_DWORD *)this + 146) = 0;
  v6 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity((_QWORD *)this + 70, 1uLL);
  ++*((_DWORD *)this + 146);
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  re::internal::GeomAttributeManager::copy(a2, this);
  return this;
}

void re::internal::GeomAttributeManager::~GeomAttributeManager(re::internal::GeomAttributeManager *this)
{
  re::GeomAttribute *v2;
  double v3;
  uint64_t v4;
  re::GeomAttribute *v5;
  re::GeomAttribute *v6;
  re::GeomAttribute *v7;
  re::GeomAttribute *v8;

  v3 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 600);
  v4 = *((_QWORD *)this + 70);
  if (v4)
  {
    v2 = (re::GeomAttribute *)*((_QWORD *)this + 74);
    if (v2)
      (*(void (**)(uint64_t, double))(*(_QWORD *)v4 + 40))(v4, v3);
    *((_QWORD *)this + 74) = 0;
    *((_QWORD *)this + 71) = 0;
    *((_QWORD *)this + 72) = 0;
    *((_QWORD *)this + 70) = 0;
    ++*((_DWORD *)this + 146);
  }
  re::internal::GeomAttributeContainer::~GeomAttributeContainer((re::internal::GeomAttributeManager *)((char *)this + 448), v2);
  re::internal::GeomAttributeContainer::~GeomAttributeContainer((re::internal::GeomAttributeManager *)((char *)this + 336), v5);
  re::internal::GeomAttributeContainer::~GeomAttributeContainer((re::internal::GeomAttributeManager *)((char *)this + 224), v6);
  re::internal::GeomAttributeContainer::~GeomAttributeContainer((re::internal::GeomAttributeManager *)((char *)this + 112), v7);
  re::internal::GeomAttributeContainer::~GeomAttributeContainer(this, v8);
}

_QWORD *re::internal::GeomAttributeManager::addAttributeToTable(_QWORD *this, re::GeomAttribute *a2)
{
  _QWORD *v2;
  int v3;
  char *v4;
  re::GeomAttribute *v5;

  v5 = a2;
  if (a2)
  {
    v4 = (char *)*((_QWORD *)a2 + 1);
    v2 = this + 70;
    v3 = this[72];
    re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(this + 75, &v4, &v3);
    return re::DynamicArray<re::TransitionCondition *>::add(v2, &v5);
  }
  return this;
}

re::GeomAttribute *re::internal::GeomAttributeManager::addAttribute(re::internal::GeomAttributeManager *a1, char *a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  re::GeomAttribute *v10;
  uint64_t *v11;

  v8 = re::internal::GeomAttributeManager::attributeByName(a1, a2);
  if (v8)
  {
    v10 = (re::GeomAttribute *)v8;
    if (*(unsigned __int8 *)(v8 + 16) != a3 || *(unsigned __int8 *)(v8 + 17) != a4)
      return 0;
  }
  else
  {
    v11 = (uint64_t *)a1;
    switch(a3)
    {
      case 0:
        break;
      case 1:
        v11 = (uint64_t *)((char *)a1 + 112);
        break;
      case 2:
        v11 = (uint64_t *)((char *)a1 + 224);
        break;
      case 3:
        v11 = (uint64_t *)((char *)a1 + 336);
        break;
      case 4:
        v11 = (uint64_t *)((char *)a1 + 448);
        break;
      default:
        re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Unexpected attribute rate", "!\"Unreachable code\"", "containerByRate", 158);
        _os_crash();
        __break(1u);
        JUMPOUT(0x225870B30);
    }
    v10 = (re::GeomAttribute *)re::internal::GeomAttributeContainer::addAttribute(v11, a2, a4);
    re::internal::GeomAttributeManager::addAttributeToTable(a1, v10);
  }
  return v10;
}

uint64_t re::internal::GeomAttributeManager::deleteAttribute(re::internal::GeomAttributeManager *this, char *a2)
{
  unint64_t v2;
  re::internal::GeomAttributeManager *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v3 = this;
  v28 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v4 = (uint64_t *)((char *)this + 600);
  result = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 75, &v13);
  if (result == -1)
    return result;
  v6 = *((_QWORD *)v3 + 76) + 16 * result;
  v9 = *(_DWORD *)(v6 + 8);
  v7 = (int *)(v6 + 8);
  v8 = v9;
  v10 = *((_QWORD *)v3 + 72);
  if (v10 <= v9)
  {
    v14 = 0;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v15 = 136315906;
    v16 = "operator[]";
    v17 = 1024;
    v18 = 789;
    v19 = 2048;
    v20 = v8;
    v21 = 2048;
    v22 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v11 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v3 + 74) + 8 * v8) + 16);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::remove(v4, &v13);
  v2 = *v7;
  if (--v10 > v2)
  {
    v8 = *((_QWORD *)v3 + 72);
    if (v8 > v10)
    {
      *(_QWORD *)(*((_QWORD *)v3 + 74) + 8 * v2) = *(_QWORD *)(*((_QWORD *)v3 + 74) + 8 * v10);
      if (v8 > v2)
      {
        *(_QWORD *)&v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 74) + 8 * v2) + 8);
        re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addOrReplace(v4, (char **)&v23, v7);
        goto LABEL_7;
      }
LABEL_16:
      v14 = 0;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v23 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v15 = 136315906;
      v16 = "operator[]";
      v17 = 1024;
      v18 = 789;
      v19 = 2048;
      v20 = v2;
      v21 = 2048;
      v22 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_15:
    v14 = 0;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v15 = 136315906;
    v16 = "operator[]";
    v17 = 1024;
    v18 = 789;
    v19 = 2048;
    v20 = v10;
    v21 = 2048;
    v22 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
LABEL_7:
  re::DynamicArray<double>::resize((uint64_t)v3 + 560, v10);
  switch(v11)
  {
    case 0:
      return re::internal::GeomAttributeContainer::deleteAttribute(v3, v13);
    case 1:
      v3 = (re::internal::GeomAttributeManager *)((char *)v3 + 112);
      break;
    case 2:
      v3 = (re::internal::GeomAttributeManager *)((char *)v3 + 224);
      break;
    case 3:
      v3 = (re::internal::GeomAttributeManager *)((char *)v3 + 336);
      break;
    case 4:
      v3 = (re::internal::GeomAttributeManager *)((char *)v3 + 448);
      break;
    default:
      re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Unexpected attribute rate", "!\"Unreachable code\"", "containerByRate", 158);
      _os_crash();
      __break(1u);
      JUMPOUT(0x225870F00);
  }
  return re::internal::GeomAttributeContainer::deleteAttribute(v3, v13);
}

BOOL re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::remove(uint64_t *a1, char **a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v15;

  v3 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    v9 = re::RigEvaluation::HashString::operator()((int)&v15, *(char **)(a1[1] + 16 * v3));
    v10 = a1[4];
    a1[5] ^= v9;
    if (v7)
      v11 = v10 + 1;
    else
      v11 = v10;
    v12 = a1[2];
    v13 = a1[3] - 1;
    a1[3] = v13;
    a1[4] = v11;
    if (v12 >= 0x11 && v13 < v12 >> 2)
      re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::resize(a1, 0);
  }
  return v4 != -1;
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addOrReplace(uint64_t *a1, char **a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
  v7 = a1[1] + 16 * v6;
  *(_DWORD *)(v7 + 8) = *a3;
  return v7 + 8;
}

uint64_t re::internal::GeomAttributeManager::attributeCount(uint64_t a1, uint64_t a2)
{
  switch((int)a2)
  {
    case 0:
      return *(unsigned int *)(a1 + 24);
    case 1:
      a1 += 112;
      break;
    case 2:
      a1 += 224;
      break;
    case 3:
      a1 += 336;
      break;
    case 4:
      a1 += 448;
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute rate", "!\"Unreachable code\"", "containerByRate", 135);
      _os_crash();
      __break(1u);
      JUMPOUT(0x225871100);
  }
  return *(unsigned int *)(a1 + 24);
}

uint64_t re::internal::GeomAttributeManager::attributeByIndex(re::internal::GeomAttributeManager *this, unsigned int a2)
{
  if (*((_QWORD *)this + 72) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 74) + 8 * a2);
}

{
  if (*((_QWORD *)this + 72) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 74) + 8 * a2);
}

uint64_t re::internal::GeomAttributeManager::attributeByName(re::internal::GeomAttributeManager *this, const char *a2)
{
  uint64_t v3;
  unint64_t v4;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v6[0] = a2;
  v3 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 75, (char **)v6);
  if (v3 == -1)
    return 0;
  v4 = *(unsigned int *)(*((_QWORD *)this + 76) + 16 * v3 + 8);
  if ((_DWORD)v4 == -1)
    return 0;
  if (*((_QWORD *)this + 72) <= v4)
  {
    memset(v6, 0, sizeof(v6));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 74) + 8 * v4);
}

{
  uint64_t v3;
  unint64_t v4;
  _OWORD v6[5];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v6[0] = a2;
  v3 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 75, (char **)v6);
  if (v3 == -1)
    return 0;
  v4 = *(unsigned int *)(*((_QWORD *)this + 76) + 16 * v3 + 8);
  if ((_DWORD)v4 == -1)
    return 0;
  if (*((_QWORD *)this + 72) <= v4)
  {
    memset(v6, 0, sizeof(v6));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 74) + 8 * v4);
}

uint64_t re::internal::GeomAttributeManager::attributeByIndex(re::internal::GeomAttributeContainer *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  switch(a3)
  {
    case 0:
      return re::internal::GeomAttributeContainer::attributeByIndex(a1, a2);
    case 1:
      a1 = (re::internal::GeomAttributeContainer *)((char *)a1 + 112);
      break;
    case 2:
      a1 = (re::internal::GeomAttributeContainer *)((char *)a1 + 224);
      break;
    case 3:
      a1 = (re::internal::GeomAttributeContainer *)((char *)a1 + 336);
      break;
    case 4:
      a1 = (re::internal::GeomAttributeContainer *)((char *)a1 + 448);
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute rate", "!\"Unreachable code\"", "containerByRate", 135, v3, v4);
      _os_crash();
      __break(1u);
      JUMPOUT(0x225871698);
  }
  return re::internal::GeomAttributeContainer::attributeByIndex(a1, a2);
}

_QWORD *re::internal::GeomAttributeManager::clear(re::internal::GeomAttributeManager *this, re::GeomAttribute *a2)
{
  re::GeomAttribute *v3;
  re::GeomAttribute *v4;
  re::GeomAttribute *v5;
  re::GeomAttribute *v6;
  _QWORD *result;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)this = 0;
  re::internal::GeomAttributeContainer::clearAttributes(this, a2);
  *((_DWORD *)this + 28) = 0;
  re::internal::GeomAttributeContainer::clearAttributes((_QWORD *)this + 14, v3);
  *((_DWORD *)this + 56) = 0;
  re::internal::GeomAttributeContainer::clearAttributes((_QWORD *)this + 28, v4);
  *((_DWORD *)this + 84) = 0;
  re::internal::GeomAttributeContainer::clearAttributes((_QWORD *)this + 42, v5);
  *((_DWORD *)this + 112) = 0;
  result = re::internal::GeomAttributeContainer::clearAttributes((_QWORD *)this + 56, v6);
  *((_QWORD *)this + 72) = 0;
  ++*((_DWORD *)this + 146);
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 81) = 0;
  v8 = *((_QWORD *)this + 77);
  *((_QWORD *)this + 78) = 0;
  *((_QWORD *)this + 79) = v8;
  if (v8 >= 0x10)
  {
    v9 = 0;
    *(_QWORD *)&v10 = -1;
    *((_QWORD *)&v10 + 1) = -1;
    do
      *(_OWORD *)(*((_QWORD *)this + 75) + 16 * v9++) = v10;
    while (v9 < *((_QWORD *)this + 77) >> 4);
  }
  *(_DWORD *)this = 1;
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    v12 = (uint64_t *)*((_QWORD *)this + 5);
    v13 = 8 * v11;
    do
    {
      v14 = *v12++;
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 72))(v14, *(unsigned int *)this);
      v13 -= 8;
    }
    while (v13);
  }
  return result;
}

uint64_t re::internal::GeomAttributeManager::reorderFaces(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  unsigned int v9;
  re::internal::GeomAttributeContainer *v10;
  re::internal *v11;
  const re::GeomAttribute *v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  re::internal *v31;
  const re::GeomAttribute *v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  BOOL v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  re::internal::GeomAttributeContainer *v53;
  _QWORD v54[2];
  unint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD v58[2];
  unint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD v62[2];
  unint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  int v76;
  uint64_t v77;
  _BYTE v78[12];
  __int16 v79;
  _BYTE v80[24];
  _QWORD v81[3];
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _QWORD v88[14];

  v88[11] = *MEMORY[0x24BDAC8D0];
  result = re::internal::GeomAttributeContainer::reorder(a1 + 224, a2);
  v5 = *(_DWORD *)(a1 + 360);
  v6 = a2[2];
  if (v5)
    v7 = (_DWORD)v6 == 0;
  else
    v7 = 1;
  if (v7)
    return result;
  v8 = 0;
  v9 = 0;
  v10 = (re::internal::GeomAttributeContainer *)(a1 + 336);
  v52 = a2[2];
  do
  {
    v11 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex(v10, v9);
    result = re::internal::accessFaceVaryingAttributeSubmesh(v11, v12);
    if (*(_BYTE *)(result + 140))
      v13 = *(_DWORD *)(result + 128) == 0;
    else
      v13 = 1;
    if (!v13
      || (*(_DWORD *)(result + 48) ? (v14 = *(_BYTE *)(result + 60) == 0) : (v14 = 1),
          v14 ? (v15 = *(_DWORD *)(result + 24) == (_DWORD)v6) : (v15 = 0),
          !v15))
    {
      v8 = 1;
      goto LABEL_19;
    }
    v73 = *(_DWORD *)result;
    re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v74, (uint64_t *)(result + 8));
    if (!(_QWORD)v75)
      re::DynamicArray<re::BlendNode>::setCapacity(&v74, 1uLL);
    re::internal::GeomBaseTopology::reorderFaces((uint64_t)&v73, a2);
    *(_QWORD *)v78 = 0xFFFFFFFF00000000;
    v16 = -1;
    *(_DWORD *)&v78[8] = -1;
    LOBYTE(v79) = 0;
    if ((_DWORD)v6 == -1)
    {
      v17 = 0xFFFFFFFF00000000;
    }
    else
    {
      *(_DWORD *)&v78[8] = v6 - 1;
      v16 = v6 - 1;
      v17 = v6;
      *(_QWORD *)v78 = v6;
    }
    *(_DWORD *)&v80[2] = v17;
    v66 = v17;
    v67 = v16;
    v68 = 0;
    LODWORD(v69) = v17;
    LODWORD(v83) = v73;
    *((_QWORD *)&v83 + 1) = v74;
    v84 = v75;
    *((_QWORD *)&v85 + 1) = v77;
    v77 = 0;
    LODWORD(v85) = 1;
    v73 = 0;
    v74 = 0;
    v75 = 0uLL;
    v76 += 2;
    re::GeomIndexMap::GeomIndexMap((uint64_t)&v86, (uint64_t)v78);
    re::GeomIndexMap::GeomIndexMap((uint64_t)v88, (uint64_t)&v66);
    if (v68)
    {
      if (v68 == 2)
      {
        v19 = v72;
        if (v72)
        {
          if (v70)
            v70 = 0;
          v18 = v69;
          if (v69)
            goto LABEL_36;
        }
      }
      else
      {
        if (v68 != 1)
          goto LABEL_133;
        v19 = v69;
        if (v69)
        {
          v18 = v71;
          if (v71)
LABEL_36:
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
    }
    if ((_BYTE)v79)
    {
      if (v79 == 2)
      {
        if (!v82)
          goto LABEL_49;
        if (*(_QWORD *)&v80[10])
          *(_QWORD *)&v80[10] = 0;
        if (!*(_QWORD *)&v80[2])
          goto LABEL_49;
        (*(void (**)(void))(*(_QWORD *)v82 + 40))();
        v20 = &v80[2];
      }
      else
      {
        if (v79 != 1)
          goto LABEL_134;
        if (!*(_QWORD *)&v80[2])
          goto LABEL_49;
        v20 = v81;
        if (v81[0])
        {
          (*(void (**)(void))(**(_QWORD **)&v80[2] + 40))();
          v20 = v81;
        }
      }
      *v20 = 0;
    }
LABEL_49:
    (*(void (**)(re::internal *, __int128 *))(*(_QWORD *)v11 + 64))(v11, &v83);
    re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v83, v21);
    result = v74;
    if (v74 && v77)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v74 + 40))();
LABEL_19:
    ++v9;
  }
  while (v5 != v9);
  if ((v8 & 1) == 0)
    return result;
  v53 = v10;
  v65 = 0;
  v62[1] = 0;
  v63 = 0;
  v62[0] = 0;
  v64 = 0;
  v22 = v6;
  re::DynamicArray<unsigned int>::resize(v62, v52, &re::kInvalidMeshIndex);
  v23 = 0;
  v24 = a2[2];
  v25 = a2[4];
  v26 = (int *)v63;
  v27 = v65;
  do
  {
    if (v24 == v23)
      goto LABEL_130;
    v28 = v6;
    v29 = *(unsigned int *)(v25 + 4 * v23);
    if ((unint64_t)v26 <= v29)
    {
LABEL_131:
      v66 = 0;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v83 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v78 = 136315906;
      *(_QWORD *)&v78[4] = "operator[]";
      v79 = 1024;
      *(_DWORD *)v80 = 789;
      *(_WORD *)&v80[4] = 2048;
      *(_QWORD *)&v80[6] = v29;
      *(_WORD *)&v80[14] = 2048;
      *(_QWORD *)&v80[16] = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_132:
      re::internal::assertLog((re::internal *)4, v40, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
      _os_crash();
      __break(1u);
LABEL_133:
      re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_134:
      re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_135:
      re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
LABEL_136:
      re::internal::assertLog((re::internal *)4, v49, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
    }
    *(_DWORD *)(v27 + 4 * v29) = v23++;
    v6 = v28;
  }
  while (v52 != v23);
  v30 = 0;
  while (2)
  {
    v31 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex(v53, v30);
    v33 = re::internal::accessFaceVaryingAttributeSubmesh(v31, v32);
    v34 = v33;
    if (*(_BYTE *)(v33 + 140))
      v35 = *(_DWORD *)(v33 + 128) == 0;
    else
      v35 = 1;
    if (!v35)
    {
      v38 = *(_QWORD *)(v33 + 24);
      v39 = v38;
      goto LABEL_71;
    }
    if (*(_DWORD *)(v33 + 48))
      v36 = *(_BYTE *)(v33 + 60) == 0;
    else
      v36 = 1;
    v38 = *(_QWORD *)(v33 + 24);
    if (!v36 || (_DWORD)v38 != (_DWORD)v28)
    {
      v39 = *(_QWORD *)(v33 + 24);
LABEL_71:
      v61 = 0;
      v58[1] = 0;
      v59 = 0;
      v57 = 0;
      v58[0] = 0;
      v60 = 0;
      v54[1] = 0;
      v55 = 0;
      v54[0] = 0;
      v56 = 0;
      re::DynamicArray<unsigned int>::resize(v58, v39, &re::kInvalidMeshIndex);
      re::DynamicArray<unsigned int>::resize(v54, v22, &re::kInvalidMeshIndex);
      if ((_DWORD)v38)
      {
        v41 = 0;
        v24 = v38;
        while (1)
        {
          LODWORD(v83) = v41;
          v42 = *(unsigned __int8 *)(v34 + 60);
          if (v42 == 2)
            break;
          if (v42 == 1)
          {
            if (*(_QWORD *)(v34 + 80) > v41)
            {
              v43 = *(_DWORD *)(*(_QWORD *)(v34 + 96) + 4 * v41);
              goto LABEL_84;
            }
            goto LABEL_83;
          }
          if (*(_BYTE *)(v34 + 60))
            goto LABEL_132;
          if (v41 >= *(unsigned int *)(v34 + 64))
            v43 = -1;
          else
            v43 = v41;
LABEL_84:
          v45 = v43;
          v46 = v63;
          if (v63 <= v43)
          {
            v66 = 0;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v83 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v78 = 136315906;
            *(_QWORD *)&v78[4] = "operator[]";
            v79 = 1024;
            *(_DWORD *)v80 = 789;
            *(_WORD *)&v80[4] = 2048;
            *(_QWORD *)&v80[6] = v45;
            *(_WORD *)&v80[14] = 2048;
            *(_QWORD *)&v80[16] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_128:
            v66 = 0;
            v47 = (unint64_t)&v73;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v83 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v78 = 136315906;
            *(_QWORD *)&v78[4] = "operator[]";
            v79 = 1024;
            *(_DWORD *)v80 = 789;
            *(_WORD *)&v80[4] = 2048;
            *(_QWORD *)&v80[6] = v41;
            *(_WORD *)&v80[14] = 2048;
            *(_QWORD *)&v80[16] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_129:
            v66 = 0;
            v26 = &v73;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v83 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v78 = 136315906;
            *(_QWORD *)&v78[4] = "operator[]";
            v79 = 1024;
            *(_DWORD *)v80 = 789;
            *(_WORD *)&v80[4] = 2048;
            *(_QWORD *)&v80[6] = v47;
            *(_WORD *)&v80[14] = 2048;
            *(_QWORD *)&v80[16] = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_130:
            v66 = 0;
            v29 = (unint64_t)&v73;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v83 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v78 = 136315906;
            *(_QWORD *)&v78[4] = "operator[]";
            v79 = 1024;
            *(_DWORD *)v80 = 797;
            *(_WORD *)&v80[4] = 2048;
            *(_QWORD *)&v80[6] = v24;
            *(_WORD *)&v80[14] = 2048;
            *(_QWORD *)&v80[16] = v24;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_131;
          }
          v46 = v59;
          if (v59 <= v41)
            goto LABEL_128;
          v47 = *(unsigned int *)(v65 + 4 * v43);
          *(_DWORD *)(v61 + 4 * v41) = v47;
          v46 = v55;
          if (v55 <= v47)
            goto LABEL_129;
          *(_DWORD *)(v57 + 4 * v47) = v41++;
          if (v24 == v41)
            goto LABEL_88;
        }
        v44 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v34 + 64), (unsigned int *)&v83);
        if (v44 != -1)
        {
          v43 = *(_DWORD *)(*(_QWORD *)(v34 + 72) + 8 * v44 + 4);
          goto LABEL_84;
        }
LABEL_83:
        v43 = -1;
        goto LABEL_84;
      }
LABEL_88:
      v73 = *(_DWORD *)v34;
      re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v74, (uint64_t *)(v34 + 8));
      if (!(_QWORD)v75)
        re::DynamicArray<re::BlendNode>::setCapacity(&v74, 1uLL);
      re::GeomIndexMap::GeomIndexMap((uint64_t)v78, (uint64_t)v58);
      re::GeomIndexMap::GeomIndexMap((uint64_t)&v66, (uint64_t)v54);
      LODWORD(v83) = v73;
      *((_QWORD *)&v83 + 1) = v74;
      v84 = v75;
      *((_QWORD *)&v85 + 1) = v77;
      v77 = 0;
      LODWORD(v85) = 1;
      v73 = 0;
      v74 = 0;
      v75 = 0uLL;
      v76 += 2;
      re::GeomIndexMap::GeomIndexMap((uint64_t)&v86, (uint64_t)v78);
      re::GeomIndexMap::GeomIndexMap((uint64_t)v88, (uint64_t)&v66);
      (*(void (**)(re::internal *, __int128 *))(*(_QWORD *)v31 + 64))(v31, &v83);
      re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v83, v48);
      if (v68)
      {
        if (v68 == 2)
        {
          v50 = v72;
          if (!v72)
            goto LABEL_101;
          if (v70)
            v70 = 0;
          v49 = v69;
          if (!v69)
            goto LABEL_101;
        }
        else
        {
          if (v68 != 1)
            goto LABEL_135;
          v50 = v69;
          if (!v69)
            goto LABEL_101;
          v49 = v71;
          if (!v71)
            goto LABEL_101;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50);
      }
LABEL_101:
      v22 = v52;
      if ((_BYTE)v79)
      {
        if (v79 == 2)
        {
          if (v82)
          {
            if (*(_QWORD *)&v80[10])
              *(_QWORD *)&v80[10] = 0;
            if (*(_QWORD *)&v80[2])
            {
              (*(void (**)(void))(*(_QWORD *)v82 + 40))();
              v51 = &v80[2];
              goto LABEL_112;
            }
          }
        }
        else
        {
          if (v79 != 1)
            goto LABEL_136;
          if (*(_QWORD *)&v80[2])
          {
            v51 = v81;
            if (v81[0])
            {
              (*(void (**)(void))(**(_QWORD **)&v80[2] + 40))();
              v51 = v81;
            }
LABEL_112:
            *v51 = 0;
          }
        }
      }
      if (v74 && v77)
        (*(void (**)(void))(*(_QWORD *)v74 + 40))();
      if (v54[0] && v57)
        (*(void (**)(void))(*(_QWORD *)v54[0] + 40))();
      if (v58[0] && v61)
        (*(void (**)(void))(*(_QWORD *)v58[0] + 40))();
    }
    if (++v30 != v5)
      continue;
    break;
  }
  result = v62[0];
  if (v62[0])
  {
    if (v65)
      return (*(uint64_t (**)(void))(*(_QWORD *)v62[0] + 40))();
  }
  return result;
}

uint64_t re::internal::GeomBaseTopology::reorderFaces(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  re::DynamicArray<float>::DynamicArray((uint64_t)&v11, a2);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = v12;
    do
    {
      if (v6 <= v4)
        goto LABEL_25;
      v7 = v13;
      if (v5 != *(_DWORD *)(v13 + 4 * v4))
      {
        v6 = *(_QWORD *)(a1 + 24);
        if (v6 <= v4)
          goto LABEL_26;
        v15 = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v4);
        v4 = v5;
        v8 = v5;
        while (1)
        {
          v6 = *(unsigned int *)(v7 + 4 * v4);
          if (v5 == (_DWORD)v6)
            break;
          v9 = *(_QWORD *)(a1 + 24);
          if (v9 <= v6)
          {
            v14 = 0;
            v27 = 0u;
            v28 = 0u;
            v25 = 0u;
            v26 = 0u;
            v24 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v16 = 136315906;
            v17 = "operator[]";
            v18 = 1024;
            v19 = 789;
            v20 = 2048;
            v21 = v6;
            v22 = 2048;
            v23 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            v14 = 0;
            v27 = 0u;
            v28 = 0u;
            v25 = 0u;
            v26 = 0u;
            v24 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v16 = 136315906;
            v17 = "operator[]";
            v18 = 1024;
            v19 = 789;
            v20 = 2048;
            v21 = v4;
            v22 = 2048;
            v23 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            v14 = 0;
            v27 = 0u;
            v28 = 0u;
            v25 = 0u;
            v26 = 0u;
            v24 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v16 = 136315906;
            v17 = "operator[]";
            v18 = 1024;
            v19 = 789;
            v20 = 2048;
            v21 = v4;
            v22 = 2048;
            v23 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            v14 = 0;
            v27 = 0u;
            v28 = 0u;
            v25 = 0u;
            v26 = 0u;
            v24 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v16 = 136315906;
            v17 = "operator[]";
            v18 = 1024;
            v19 = 789;
            v20 = 2048;
            v21 = v6;
            v22 = 2048;
            v23 = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_25:
            *(_QWORD *)&v15 = 0;
            v27 = 0u;
            v28 = 0u;
            v25 = 0u;
            v26 = 0u;
            v24 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v16 = 136315906;
            v17 = "operator[]";
            v18 = 1024;
            v19 = 789;
            v20 = 2048;
            v21 = v4;
            v22 = 2048;
            v23 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_26:
            *(_QWORD *)&v15 = 0;
            v27 = 0u;
            v28 = 0u;
            v25 = 0u;
            v26 = 0u;
            v24 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v16 = 136315906;
            v17 = "operator[]";
            v18 = 1024;
            v19 = 789;
            v20 = 2048;
            v21 = v4;
            v22 = 2048;
            v23 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_27:
            v14 = 0;
            v27 = 0u;
            v28 = 0u;
            v25 = 0u;
            v26 = 0u;
            v24 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v16 = 136315906;
            v17 = "operator[]";
            v18 = 1024;
            v19 = 789;
            v20 = 2048;
            v21 = v4;
            v22 = 2048;
            v23 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_28;
          }
          if (v9 <= v4)
            goto LABEL_22;
          *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v4) = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v6);
          v9 = v12;
          if (v12 <= v4)
            goto LABEL_23;
          v7 = v13;
          *(_DWORD *)(v13 + 4 * v4) = v8;
          v4 = v6;
          v8 = v6;
          if (v9 <= v6)
            goto LABEL_24;
        }
        v6 = *(_QWORD *)(a1 + 24);
        if (v6 <= v4)
          goto LABEL_27;
        *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v4) = v15;
        v6 = v12;
        if (v12 <= v4)
        {
LABEL_28:
          v14 = 0;
          v27 = 0u;
          v28 = 0u;
          v25 = 0u;
          v26 = 0u;
          v24 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v16 = 136315906;
          v17 = "operator[]";
          v18 = 1024;
          v19 = 789;
          v20 = 2048;
          v21 = v4;
          v22 = 2048;
          v23 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(v13 + 4 * v4) = v8;
      }
      v4 = ++v5;
    }
    while (v3 > v5);
  }
  result = v11;
  if (v11)
  {
    if (v13)
      return (*(uint64_t (**)(void))(*(_QWORD *)v11 + 40))();
  }
  return result;
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeManager::GeomAttributeManager(uint64_t a1, uint64_t a2)
{
  re::internal::GeomAttributeContainer *v4;

  v4 = re::internal::GeomAttributeContainer::GeomAttributeContainer((re::internal::GeomAttributeContainer *)a1);
  re::internal::GeomAttributeContainer::GeomAttributeContainer((re::internal::GeomAttributeContainer *)((char *)v4 + 112));
  re::internal::GeomAttributeContainer::GeomAttributeContainer((re::internal::GeomAttributeContainer *)(a1 + 224));
  re::internal::GeomAttributeContainer::GeomAttributeContainer((re::internal::GeomAttributeContainer *)(a1 + 336));
  re::internal::GeomAttributeContainer::GeomAttributeContainer((re::internal::GeomAttributeContainer *)(a1 + 448));
  *(_DWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 656) = 0;
  return re::internal::GeomAttributeManager::operator=((re::internal::GeomAttributeContainer *)a1, a2);
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeManager::operator=(re::internal::GeomAttributeContainer *this, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;

  if (this != (re::internal::GeomAttributeContainer *)a2)
  {
    re::internal::GeomAttributeContainer::operator=(this, a2);
    re::internal::GeomAttributeContainer::operator=((re::internal::GeomAttributeContainer *)((char *)this + 112), a2 + 112);
    re::internal::GeomAttributeContainer::operator=((re::internal::GeomAttributeContainer *)((char *)this + 224), a2 + 224);
    re::internal::GeomAttributeContainer::operator=((re::internal::GeomAttributeContainer *)((char *)this + 336), a2 + 336);
    re::internal::GeomAttributeContainer::operator=((re::internal::GeomAttributeContainer *)((char *)this + 448), a2 + 448);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)this + 75, (uint64_t *)(a2 + 600));
    re::DynamicArray<re::GeomAttribute *>::operator=((uint64_t)this + 560, a2 + 560);
    *(_QWORD *)(a2 + 624) = 0;
    *(_QWORD *)(a2 + 648) = 0;
    *(_QWORD *)(a2 + 640) = 0;
    v4 = *(_QWORD *)(a2 + 616);
    *(_QWORD *)(a2 + 632) = v4;
    if (v4 >= 0x10)
    {
      v5 = 0;
      *(_QWORD *)&v6 = -1;
      *((_QWORD *)&v6 + 1) = -1;
      do
        *(_OWORD *)(*(_QWORD *)(a2 + 600) + 16 * v5++) = v6;
      while (v5 < *(_QWORD *)(a2 + 616) >> 4);
    }
    *(_QWORD *)(a2 + 576) = 0;
    ++*(_DWORD *)(a2 + 584);
  }
  return this;
}

uint64_t re::DynamicArray<re::GeomAttribute *>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

re::GeomAttribute *re::internal::GeomAttributeManager::replaceVertexWithFaceVaryingAttribute(uint64_t *a1, char *a2, re *a3)
{
  unint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  re::GeomAttribute *FaceVaryingAttribute;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v6 = a1 + 75;
  v7 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1 + 75, &v18);
  if (v7 == -1)
    return 0;
  v8 = a1[76] + 16 * v7;
  v11 = *(_DWORD *)(v8 + 8);
  v9 = (int *)(v8 + 8);
  v10 = v11;
  v12 = a1[72];
  if (v12 <= v11)
  {
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = v10;
    v26 = 2048;
    v27 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = v12;
    v26 = 2048;
    v27 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *(_QWORD *)(a1[74] + 8 * v10);
  FaceVaryingAttribute = re::GeomAttribute::createFaceVaryingAttribute(v18, *(unsigned __int8 *)(v13 + 17), a3);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)FaceVaryingAttribute + 72))(FaceVaryingAttribute, v15);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  (*(void (**)(uint64_t, re::GeomAttribute *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 40))(v13, FaceVaryingAttribute, v16, 0, 0);
  v12 = *v9;
  v3 = a1[72];
  if (v3 <= v12)
    goto LABEL_8;
  *(_QWORD *)(a1[74] + 8 * v12) = FaceVaryingAttribute;
  *(_QWORD *)&v28 = *(_QWORD *)(v13 + 8);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::remove(v6, (char **)&v28);
  *(_QWORD *)&v28 = *((_QWORD *)FaceVaryingAttribute + 1);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(v6, (char **)&v28, v9);
  re::internal::GeomAttributeContainer::addAttribute((re::internal::GeomAttributeContainer *)(a1 + 42), FaceVaryingAttribute);
  re::internal::GeomAttributeContainer::deleteAttribute((re::internal::GeomAttributeContainer *)(a1 + 14), v18);
  return FaceVaryingAttribute;
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(uint64_t *a1, char **a2, int *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
  else
    return a1[1] + 16 * v6 + 8;
}

{
  uint64_t v6;

  v6 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
  else
    return a1[1] + 16 * v6 + 8;
}

re::GeomAttribute *re::internal::GeomAttributeManager::replaceFaceWithFaceVaryingAttribute(uint64_t *a1, char *a2, re *a3)
{
  unint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  re::GeomAttribute *FaceVaryingAttribute;
  uint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v18 = a2;
  v6 = a1 + 75;
  v7 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1 + 75, &v18);
  if (v7 == -1)
    return 0;
  v8 = a1[76] + 16 * v7;
  v11 = *(_DWORD *)(v8 + 8);
  v9 = (int *)(v8 + 8);
  v10 = v11;
  v12 = a1[72];
  if (v12 <= v11)
  {
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = v10;
    v26 = 2048;
    v27 = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    v19 = 0;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v20 = 136315906;
    v21 = "operator[]";
    v22 = 1024;
    v23 = 789;
    v24 = 2048;
    v25 = v12;
    v26 = 2048;
    v27 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = *(_QWORD *)(a1[74] + 8 * v10);
  FaceVaryingAttribute = re::GeomAttribute::createFaceVaryingAttribute(v18, *(unsigned __int8 *)(v13 + 17), a3);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)FaceVaryingAttribute + 72))(FaceVaryingAttribute, v15);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
  (*(void (**)(uint64_t, re::GeomAttribute *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 40))(v13, FaceVaryingAttribute, v16, 0, 0);
  v12 = *v9;
  v3 = a1[72];
  if (v3 <= v12)
    goto LABEL_8;
  *(_QWORD *)(a1[74] + 8 * v12) = FaceVaryingAttribute;
  *(_QWORD *)&v28 = *(_QWORD *)(v13 + 8);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::remove(v6, (char **)&v28);
  *(_QWORD *)&v28 = *((_QWORD *)FaceVaryingAttribute + 1);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(v6, (char **)&v28, v9);
  re::internal::GeomAttributeContainer::addAttribute((re::internal::GeomAttributeContainer *)(a1 + 42), FaceVaryingAttribute);
  re::internal::GeomAttributeContainer::deleteAttribute((re::internal::GeomAttributeContainer *)(a1 + 28), v18);
  return FaceVaryingAttribute;
}

uint64_t re::internal::GeomAttributeManager::updateFaceVaryingAttributeSubmesh(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v10[2];
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v10[0] = a2;
  v5 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(a1 + 75, v10);
  if (v5 == -1)
    return 0;
  v6 = *(unsigned int *)(a1[76] + 16 * v5 + 8);
  v7 = a1[72];
  if (v7 <= v6)
  {
    v10[1] = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v11 = 136315906;
    v12 = "operator[]";
    v13 = 1024;
    v14 = 789;
    v15 = 2048;
    v16 = v6;
    v17 = 2048;
    v18 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = *(_QWORD *)(a1[74] + 8 * v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 64))(v8, a3);
  return v8;
}

re::GeomAttribute *re::internal::GeomAttributeManager::addFaceVaryingAttribute(uint64_t a1, const char *a2, uint64_t a3, re::internal::GeomAttributeFaceVaryingSubmesh *a4)
{
  re::GeomAttribute *v8;
  re::GeomAttribute *FaceVaryingAttribute;

  if (re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)a1, a2))
    return 0;
  FaceVaryingAttribute = re::GeomAttribute::createFaceVaryingAttribute(a2, a3, a4);
  v8 = re::internal::GeomAttributeContainer::addAttribute((re::internal::GeomAttributeContainer *)(a1 + 336), FaceVaryingAttribute);
  re::internal::GeomAttributeManager::addAttributeToTable((_QWORD *)a1, v8);
  return v8;
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find(uint64_t *a1, char **a2)
{
  size_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v15;
  char v16;
  char v17;
  char v18;

  if (!a1[7] || (unint64_t)a1[2] < 0x10 || !a1[3])
    return -1;
  v4 = re::RigEvaluation::HashString::operator()((int)&v16, *a2) % ((unint64_t)a1[2] >> 4);
  while (1)
  {
    v5 = *a1;
    v6 = re::RigEvaluation::HashString::operator()((int)&v17, *a2);
    v15 = *(int8x16_t *)(v5 + 16 * v4);
    v7 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(vdupq_n_s8(v6 & 0x7F), v15), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v8 = __clz(__rbit64(v7));
    if (v8 <= 0x3F)
      break;
LABEL_10:
    v13.i64[0] = -1;
    v13.i64[1] = -1;
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v15, v13), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (++v4 == (unint64_t)a1[2] >> 4)
      v4 = 0;
    v12 = -1;
    if (v4 == re::RigEvaluation::HashString::operator()((int)&v18, *a2) % ((unint64_t)a1[2] >> 4))
      return v12;
  }
  v9 = 16 * v4;
  v10 = *a2;
  v11 = a1[1];
  while (1)
  {
    v12 = v8 + v9;
    if (!strcmp(v10, *(const char **)(v11 + 16 * (v8 + v9))))
      return v12;
    if (v8 <= 0x3E)
    {
      v8 = __clz(__rbit64((-2 << v8) & v7));
      if (v8 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

uint64_t re::DynamicArray<re::GeomCell4>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::GeomCell4>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::GeomCell4>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::BlendNode>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 16 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 16 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 16 * (_QWORD)v5), 16 * v4 - 16 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 16 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

void re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh(re::internal::GeomAttributeFaceVaryingSubmesh *this, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *((unsigned __int8 *)this + 140);
  if (v3 == 2)
  {
    re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 144);
  }
  else if (v3 == 1)
  {
    v4 = *((_QWORD *)this + 18);
    if (v4)
    {
      a2 = *((_QWORD *)this + 22);
      if (a2)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      *((_QWORD *)this + 22) = 0;
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
      *((_QWORD *)this + 18) = 0;
      ++*((_DWORD *)this + 42);
    }
  }
  else
  {
    if (*((_BYTE *)this + 140))
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
      _os_crash();
      __break(1u);
      goto LABEL_25;
    }
    *((_DWORD *)this + 36) = 0;
  }
  v5 = *((unsigned __int8 *)this + 60);
  if (v5 != 2)
  {
    if (v5 == 1)
    {
      v6 = *((_QWORD *)this + 8);
      if (v6)
      {
        if (*((_QWORD *)this + 12))
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        *((_QWORD *)this + 12) = 0;
        *((_QWORD *)this + 9) = 0;
        *((_QWORD *)this + 10) = 0;
        *((_QWORD *)this + 8) = 0;
        ++*((_DWORD *)this + 22);
      }
      goto LABEL_19;
    }
    if (!*((_BYTE *)this + 60))
    {
      *((_DWORD *)this + 16) = 0;
      goto LABEL_19;
    }
LABEL_25:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    return;
  }
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 64);
LABEL_19:
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

uint64_t re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(_QWORD *a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = *a2;
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
  v6 = v5 ^ (v5 >> 31);
  v7 = v6 % v3;
  v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = v6 % v3;
  while (1)
  {
    v11 = *(int8x16_t *)(*a1 + 16 * v10);
    v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3)
      v10 = 0;
    else
      ++v10;
    v15 = -1;
    if (v10 == v7)
      return v15;
  }
  v14 = 16 * v10;
  while (1)
  {
    v15 = v13 + v14;
    if ((_DWORD)v4 == *(_DWORD *)(a1[1] + 8 * (v13 + v14)))
      return v15;
    if (v13 <= 0x3E)
    {
      v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

uint64_t re::HashBrown<char const*,re::GeomAttribute *,re::internal::HashName,re::internal::HashName,void,false>::resize(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  char **v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  char v32;
  unint64_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  __int128 v45;
  unint64_t v46;
  _QWORD *v47;
  __int128 v48;
  _OWORD v49[3];
  char v50;

  v3 = a1[2];
  v2 = a1[3];
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = a1[7];
  v48 = 0u;
  v49[0] = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v49[1], 0, 32);
  v9 = (size_t)re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v48, v7, v8);
  v10 = a1[2];
  if (v10 < 0x10)
    goto LABEL_12;
  v11 = 0;
  v12 = v10 >> 4;
  while (1)
  {
    v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
    v14 = (unsigned __int16)~v13;
    if (v13 != 0xFFFF)
      break;
    v11 += 16;
    if (!--v12)
      goto LABEL_12;
  }
  v15 = __clz(__rbit64(v14)) + v11;
  if (v15 == -1)
    goto LABEL_12;
  while (1)
  {
    v25 = a1[1];
    if (*((_QWORD *)&v49[2] + 1))
    {
      v26 = *(_QWORD *)&v49[1];
      if (!*(_QWORD *)&v49[1])
        goto LABEL_39;
    }
    else
    {
      *(_QWORD *)&v49[0] = 16;
      *(_QWORD *)&v48 = v44;
      *(_QWORD *)&v45 = -1;
      *((_QWORD *)&v45 + 1) = -1;
      *v44 = v45;
      *((_QWORD *)&v48 + 1) = v44 + 1;
      v26 = *(_QWORD *)&v49[0];
      if (*(_QWORD *)&v49[0])
      {
        v46 = 0;
        v47 = (_QWORD *)*((_QWORD *)&v48 + 1);
        v26 = *(_QWORD *)&v49[0];
        do
        {
          *v47 = 0;
          v47[1] = 0;
          v47 += 2;
          ++v46;
        }
        while (v46 < v26);
      }
      *(_QWORD *)&v49[2] = 0;
      *((_QWORD *)&v49[0] + 1) = 0;
      v49[1] = v26;
      if (!v26)
      {
LABEL_39:
        re::HashBrown<char const*,re::GeomAttribute *,re::internal::HashName,re::internal::HashName,void,false>::resize(&v48);
        goto LABEL_21;
      }
    }
    if (*(_QWORD *)&v49[0] > 8 * v26)
      goto LABEL_39;
LABEL_21:
    v27 = (char **)(v25 + 16 * v15);
    v28 = re::RigEvaluation::HashString::operator()((int)&v50, *v27);
    v29 = v48;
    v30 = *(_QWORD *)&v49[0] >> 4;
    v31 = v28 % (*(_QWORD *)&v49[0] >> 4);
    while (1)
    {
      v32 = re::RigEvaluation::HashString::operator()((int)&v50, *v27);
      v33 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v29 + 16 * v31)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
      if (v33 < 0x40)
        break;
      if (v31 + 1 == v30)
        v31 = 0;
      else
        ++v31;
    }
    v34 = v29 + 16 * v31;
    v35 = *(unsigned __int8 *)(v34 + v33) == 255;
    *(_BYTE *)(v34 + v33) = v32 & 0x7F;
    v36 = 16 * (v33 + 16 * v31);
    v37 = *((_QWORD *)&v48 + 1);
    v38 = *((_QWORD *)&v49[0] + 1);
    *(_OWORD *)(*((_QWORD *)&v48 + 1) + v36) = *(_OWORD *)v27;
    *((_QWORD *)&v49[0] + 1) = v38 + 1;
    *(_QWORD *)&v49[1] -= v35;
    v9 = re::RigEvaluation::HashString::operator()((int)&v50, *(char **)(v37 + v36));
    *((_QWORD *)&v49[1] + 1) ^= v9;
    v39 = v15 >> 4;
    v10 = a1[2];
    if (v15 >> 4 >= v10 >> 4)
      goto LABEL_12;
    v40 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
    if (v40 >= 0x40)
      break;
    v15 = v40 + (v15 & 0xFFFFFFFFFFFFFFF0);
LABEL_33:
    if (v15 == -1)
      goto LABEL_12;
  }
  v41 = 16 * v39;
  v42 = ~v39 + (v10 >> 4);
  while (v42)
  {
    v14 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v41 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v43 = __clz(__rbit64(v14));
    v41 += 16;
    --v42;
    if (v43 <= 0x3F)
    {
      v15 = v43 + v41;
      goto LABEL_33;
    }
  }
LABEL_12:
  v17 = *((_QWORD *)&v49[2] + 1);
  *((_QWORD *)&v49[2] + 1) = a1[7];
  result = *((_QWORD *)&v49[2] + 1);
  v18 = v48;
  v19 = v49[0];
  *(_QWORD *)&v49[0] = v10;
  v20 = *a1;
  v21 = a1[1];
  *(_QWORD *)&v48 = *a1;
  *((_QWORD *)&v48 + 1) = v21;
  v22 = v49[1];
  v23 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v49[2];
  a1[7] = v17;
  *(_OWORD *)((char *)&v49[1] + 8) = v23;
  v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v22;
  *(_OWORD *)((char *)v49 + 8) = v24;
  if (result)
  {
    if (v21)
      *((_QWORD *)&v48 + 1) = 0;
    if (v20)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  uint64_t v23;
  _OWORD v24[4];

  v4 = a1[7];
  memset(v24, 0, sizeof(v24));
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(v24, v4, a2);
  v22[0] = a1;
  v6 = a1[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a1;
    v9 = v6 >> 4;
    v10 = (__n128)xmmword_2260EE390;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v22[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        goto LABEL_9;
    }
    v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    v23 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::internalAdd(v24, *(_QWORD *)(v22[0] + 8) + 16 * v12, *(_QWORD *)(v22[0] + 8) + 16 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v22);
        v12 = v23;
      }
      while (v23 != -1);
      v6 = a1[2];
    }
  }
LABEL_9:
  v14 = *((_QWORD *)&v24[3] + 1);
  *((_QWORD *)&v24[3] + 1) = a1[7];
  result = *((_QWORD *)&v24[3] + 1);
  v15 = v24[0];
  v16 = v24[1];
  *(_QWORD *)&v24[1] = v6;
  v17 = *a1;
  v18 = a1[1];
  *(_QWORD *)&v24[0] = *a1;
  *((_QWORD *)&v24[0] + 1) = v18;
  v19 = v24[2];
  v20 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v24[3];
  a1[7] = v14;
  *(_OWORD *)((char *)&v24[2] + 8) = v20;
  v21 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v15;
  *((_OWORD *)a1 + 1) = v16;
  *((_OWORD *)a1 + 2) = v19;
  *(_OWORD *)((char *)&v24[1] + 8) = v21;
  if (result)
  {
    if (v18)
      *((_QWORD *)&v24[0] + 1) = 0;
    if (v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::internalAdd(_anonymous_namespace_ *a1, char **a2, int *a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  size_t v11;
  int v12;
  _BOOL8 v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  char v20;
  char v21;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || *((_QWORD *)a1 + 2) > (unint64_t)(8 * v6))
    re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::resize((uint64_t *)a1, 1);
  v7 = re::RigEvaluation::HashString::operator()((int)&v19, *a2) % (*((_QWORD *)a1 + 2) >> 4);
  while (1)
  {
    v8 = *(_QWORD *)a1;
    v9 = re::RigEvaluation::HashString::operator()((int)&v20, *a2);
    v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v10 < 0x40)
      break;
    if (v7 + 1 == *((_QWORD *)a1 + 2) >> 4)
      v7 = 0;
    else
      ++v7;
  }
  v11 = v8 + 16 * v7;
  v12 = *(unsigned __int8 *)(v11 + v10);
  *(_BYTE *)(v11 + v10) = v9 & 0x7F;
  v13 = v12 == 255;
  v14 = v10 + 16 * v7;
  v15 = *a3;
  v16 = *((_QWORD *)a1 + 1) + 16 * v14;
  *(_QWORD *)v16 = *a2;
  *(_DWORD *)(v16 + 8) = v15;
  v17 = *((_QWORD *)a1 + 4) - v13;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v17;
  *((_QWORD *)a1 + 5) ^= re::RigEvaluation::HashString::operator()((int)&v21, *(char **)(*((_QWORD *)a1 + 1) + 16 * v14));
  return *((_QWORD *)a1 + 1) + 16 * v14 + 8;
}

{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  int v13;
  _BOOL8 v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  char v21;
  char v22;
  char v23;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || *((_QWORD *)a1 + 2) > (unint64_t)(8 * v6))
    re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::resize((uint64_t *)a1, 1);
  v7 = re::RigEvaluation::HashString::operator()((int)&v20, *a2) % (*((_QWORD *)a1 + 2) >> 4);
  while (1)
  {
    v8 = *(_QWORD *)a1;
    v9 = re::RigEvaluation::HashString::operator()((int)&v21, *a2);
    v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v10 < 0x40)
      break;
    if (++v7 == *((_QWORD *)a1 + 2) >> 4)
      v7 = 0;
    if (v7 == re::RigEvaluation::HashString::operator()((int)&v23, *a2) % (*((_QWORD *)a1 + 2) >> 4))
    {
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      result = _os_crash();
      __break(1u);
      return result;
    }
  }
  v12 = v8 + 16 * v7;
  v13 = *(unsigned __int8 *)(v12 + v10);
  *(_BYTE *)(v12 + v10) = v9 & 0x7F;
  v14 = v13 == 255;
  v15 = v10 + 16 * v7;
  v16 = *a3;
  v17 = *((_QWORD *)a1 + 1) + 16 * v15;
  *(_QWORD *)v17 = *a2;
  *(_DWORD *)(v17 + 8) = v16;
  v18 = *((_QWORD *)a1 + 4) - v14;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v18;
  *((_QWORD *)a1 + 5) ^= re::RigEvaluation::HashString::operator()((int)&v22, *(char **)(*((_QWORD *)a1 + 1) + 16 * v15));
  return *((_QWORD *)a1 + 1) + 16 * v15 + 8;
}

uint64_t re::internal::mergeVertexPositions(re::internal *this, re::GeomMesh *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v7;
  unint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  re *v29;
  re *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t result;
  int v36;
  int v37;
  _QWORD v38[2];
  unint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD v42[2];
  unint64_t v43;
  int v44;
  uint64_t v45;
  _QWORD v46[2];
  unint64_t v47;
  int v48;
  uint64_t v49;
  char v50;
  int v51;
  float v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56[4];
  float32x4_t __s[2];
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[12];
  __int16 v64;
  int v65;
  __int16 v66;
  unint64_t v67;
  __int16 v68;
  unint64_t v69;
  _DWORD v70[12];
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v7 = &v50;
  v73 = *MEMORY[0x24BDAC8D0];
  v8 = (unint64_t)this + 16;
  re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute((re::internal *)((char *)this + 16), "vertexUV");
  re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute((re::internal::GeomBaseMesh *)v8, "vertexNormal");
  re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute((re::internal::GeomBaseMesh *)v8, "vertexTangent");
  re::internal::GeomBaseMesh::replaceVertexAttributeWithFaceVaryingAttribute((re::internal::GeomBaseMesh *)v8, "vertexBitangent");
  v50 = 1;
  v51 = 0;
  v53 = xmmword_226132040;
  v54 = 0;
  re::computeAABB(this, __s);
  v9 = vsubq_f32(__s[1], __s[0]);
  v9.i32[3] = 0;
  v10 = vmaxnmq_f32(v9, (float32x4_t)0);
  v11 = vmulq_f32(v10, v10);
  v52 = (float)(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0])* 0.5)* 0.000001;
  v49 = 0;
  v46[1] = 0;
  v47 = 0;
  v46[0] = 0;
  v48 = 0;
  v12 = *((_DWORD *)this + 4);
  v45 = 0;
  v36 = re::mergeVertices((uint64_t)this, (uint64_t)v46, (uint64_t)&v50);
  v37 = v12;
  v13 = (v12 - v36);
  v42[1] = 0;
  v43 = 0;
  v42[0] = 0;
  v44 = 0;
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v42, v13);
  v41 = 0;
  v38[1] = 0;
  v39 = 0;
  v38[0] = 0;
  v40 = 0;
  re::DynamicArray<unsigned int>::resize(v38, *((unsigned int *)this + 4), &re::kInvalidMeshIndex);
  v14 = re::GeomMesh::accessVertexPositions(this);
  v16 = *((unsigned int *)this + 4);
  if ((_DWORD)v16)
  {
    v17 = v15;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v3 = v47;
      if (v47 <= (unint64_t)v18)
        goto LABEL_50;
      v5 = *(unsigned int *)(v49 + 4 * (_QWORD)v18);
      v3 = v39;
      if (v39 <= v5)
        break;
      if (*(_DWORD *)(v41 + 4 * v5) == -1)
      {
        if (v5 >= v15)
          goto LABEL_55;
        v3 = v19;
        v4 = v43;
        if (v43 <= v19)
          goto LABEL_56;
        *(_OWORD *)(v45 + 16 * v19) = *(_OWORD *)(v14 + 16 * v5);
        v3 = v39;
        if (v39 <= v5)
          goto LABEL_57;
        *(_DWORD *)(v41 + 4 * v5) = v19++;
        v16 = *(unsigned int *)v8;
      }
      v18 = (unsigned int *)((char *)v18 + 1);
      if ((unint64_t)v18 >= v16)
        goto LABEL_11;
    }
LABEL_51:
    *(_QWORD *)v63 = 0;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70[0] = 136315906;
    *(_QWORD *)&v70[1] = "operator[]";
    LOWORD(v70[3]) = 1024;
    *(_DWORD *)((char *)&v70[3] + 2) = 789;
    HIWORD(v70[4]) = 2048;
    *(_QWORD *)&v70[5] = v5;
    LOWORD(v70[7]) = 2048;
    *(_QWORD *)((char *)&v70[7] + 2) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_52:
    v55 = 0;
    v71 = 0u;
    v72 = 0u;
    memset(v70, 0, sizeof(v70));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 797;
    v66 = 2048;
    v67 = v8;
    v68 = 2048;
    v69 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_53:
    v55 = 0;
    v71 = 0u;
    v72 = 0u;
    memset(v70, 0, sizeof(v70));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 789;
    v66 = 2048;
    v67 = v2;
    v68 = 2048;
    v69 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_54:
    v55 = 0;
    v71 = 0u;
    v72 = 0u;
    memset(v70, 0, sizeof(v70));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    v64 = 1024;
    v65 = 609;
    v66 = 2048;
    v67 = v8;
    v68 = 2048;
    v69 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_55:
    *(_QWORD *)v63 = 0;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70[0] = 136315906;
    *(_QWORD *)&v70[1] = "operator[]";
    LOWORD(v70[3]) = 1024;
    *(_DWORD *)((char *)&v70[3] + 2) = 601;
    HIWORD(v70[4]) = 2048;
    *(_QWORD *)&v70[5] = v5;
    LOWORD(v70[7]) = 2048;
    *(_QWORD *)((char *)&v70[7] + 2) = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    *(_QWORD *)v63 = 0;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70[0] = 136315906;
    *(_QWORD *)&v70[1] = "operator[]";
    LOWORD(v70[3]) = 1024;
    *(_DWORD *)((char *)&v70[3] + 2) = 789;
    HIWORD(v70[4]) = 2048;
    *(_QWORD *)&v70[5] = v3;
    LOWORD(v70[7]) = 2048;
    *(_QWORD *)((char *)&v70[7] + 2) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_57:
    *(_QWORD *)v63 = 0;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70[0] = 136315906;
    *(_QWORD *)&v70[1] = "operator[]";
    LOWORD(v70[3]) = 1024;
    *(_DWORD *)((char *)&v70[3] + 2) = 789;
    HIWORD(v70[4]) = 2048;
    *(_QWORD *)&v70[5] = v5;
    LOWORD(v70[7]) = 2048;
    *(_QWORD *)((char *)&v70[7] + 2) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_11:
  v7 = (char *)*((unsigned int *)this + 10);
  re::GeomMeshBuilder::GeomMeshBuilder((re *)__s, (uint64_t)this);
  if (v7)
  {
    v5 = 0;
    v8 = 0;
    v18 = v56;
    v3 = 3;
    do
    {
      v17 = v58;
      if (v58 <= v8)
        goto LABEL_52;
      v20 = 0;
      v21 = v59 + v5;
      do
      {
        v56[v20] = *(_DWORD *)(v21 + v20 * 4);
        ++v20;
      }
      while (v20 != 4);
      v22 = 0;
      if (v56[3] == -1)
        v23 = 3;
      else
        v23 = 4;
      v17 = v47;
      v24 = v49;
      v4 = v39;
      v25 = v41;
      do
      {
        v2 = v56[v22];
        if (v17 <= v2)
        {
          v55 = 0;
          v71 = 0u;
          v72 = 0u;
          memset(v70, 0, sizeof(v70));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v63 = 136315906;
          *(_QWORD *)&v63[4] = "operator[]";
          v64 = 1024;
          v65 = 789;
          v66 = 2048;
          v67 = v2;
          v68 = 2048;
          v69 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_49:
          v55 = 0;
          v71 = 0u;
          v72 = 0u;
          memset(v70, 0, sizeof(v70));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v63 = 136315906;
          *(_QWORD *)&v63[4] = "operator[]";
          v64 = 1024;
          v65 = 789;
          v66 = 2048;
          v67 = v2;
          v68 = 2048;
          v69 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_50:
          *(_QWORD *)v63 = 0;
          *((_OWORD *)v7 + 7) = 0u;
          *((_OWORD *)v7 + 8) = 0u;
          *((_OWORD *)v7 + 5) = 0u;
          *((_OWORD *)v7 + 6) = 0u;
          *((_OWORD *)v7 + 4) = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v70[0] = 136315906;
          *(_QWORD *)&v70[1] = "operator[]";
          LOWORD(v70[3]) = 1024;
          *(_DWORD *)((char *)&v70[3] + 2) = 789;
          HIWORD(v70[4]) = 2048;
          *(_QWORD *)&v70[5] = v18;
          LOWORD(v70[7]) = 2048;
          *(_QWORD *)((char *)&v70[7] + 2) = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_51;
        }
        v2 = *(unsigned int *)(v24 + 4 * v2);
        if (v4 <= v2)
          goto LABEL_49;
        v56[v22++] = *(_DWORD *)(v25 + 4 * v2);
      }
      while (v23 != v22);
      re::GeomMeshBuilder::setFaceVertices((re::GeomMeshBuilder *)__s, v8++, v23, (double *)v56);
      v5 += 16;
    }
    while ((char *)v8 != v7);
  }
  if (__s[0].i32[2] > v13 && (_DWORD)v58 && (v58 - 1) > v58)
  {
    while (1)
      ;
  }
  __s[0].i32[2] = v13;
  v60 = v13;
  if (v61)
  {
    v26 = v62;
    v27 = 8 * v61;
    do
    {
      v28 = *v26++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 72))(v28, v60);
      v27 -= 8;
    }
    while (v27);
  }
  v29 = (re *)re::GeomMesh::operator=((uint64_t)this, &__s[0].i32[2]);
  v30 = re::GeomMesh::setName(v29, (const char *)__s[0].i64[0]);
  v31 = __s[0].i64[0];
  if (__s[0].i64[0])
  {
    v32 = re::globalAllocators(v30);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32[2] + 40))(v32[2], v31);
    __s[0].i64[0] = 0;
  }
  v33 = re::GeomMesh::modifyVertexPositions(this);
  if (v37 != v36)
  {
    v2 = 0;
    v8 = v34;
    do
    {
      v17 = v43;
      if (v43 <= v2)
        goto LABEL_53;
      if (v2 == v34)
        goto LABEL_54;
      *(_OWORD *)(v33 + 16 * v2) = *(_OWORD *)(v45 + 16 * v2);
    }
    while (++v2 != v13);
  }
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
  if (v38[0] && v41)
    (*(void (**)(void))(*(_QWORD *)v38[0] + 40))();
  if (v42[0] && v45)
    (*(void (**)(void))(*(_QWORD *)v42[0] + 40))();
  result = v46[0];
  if (v46[0] && v49)
    return (*(uint64_t (**)(void))(*(_QWORD *)v46[0] + 40))();
  return result;
}

double re::GeomMeshBuilder::setFaceVertices(re::GeomMeshBuilder *this, unsigned int a2, int a3, double *a4)
{
  unint64_t v4;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  unsigned int i;
  re::internal *v13;
  const re::GeomAttribute *v14;
  unsigned int v15;
  double result;
  unsigned int v17;
  uint64_t v18;

  v4 = a2;
  if (*((_QWORD *)this + 4) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  v8 = (_DWORD *)(*((_QWORD *)this + 6) + 16 * a2);
  if (*v8 != -1)
  {
    v9 = v8[3] == -1;
    v10 = a3 == 3 || *((_DWORD *)a4 + 3) == -1;
    if (v10 != v9)
    {
      v11 = *((_DWORD *)this + 104);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::GeomMeshBuilder *)((char *)this + 392), i);
          re::internal::accessFaceVaryingAttributeSubmesh(v13, v14);
        }
      }
    }
  }
  if (a3 == 4)
    v15 = *((_DWORD *)a4 + 3);
  else
    v15 = -1;
  if (*((_QWORD *)this + 4) <= v4)
  {
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  result = *a4;
  v17 = *((_DWORD *)a4 + 2);
  v18 = *((_QWORD *)this + 6) + 16 * v4;
  *(double *)v18 = *a4;
  *(_DWORD *)(v18 + 8) = v17;
  *(_DWORD *)(v18 + 12) = v15;
  return result;
}

uint64_t *re::allocInfo_AABB(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_362);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_362))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254117728, 0);
    *(uint64_t *)((char *)&qword_254117738 + 6) = 0;
    qword_254117738 = 0;
    qword_254117748 = 0;
    qword_254117750 = 0xFFFFFFFFLL;
    qword_254117728 = (uint64_t)&off_24ED7DAA8;
    qword_254117758 = (uint64_t)"AABB";
    dword_254117760 = 0;
    unk_254117768 = 0u;
    unk_254117778 = 0u;
    unk_254117788 = 0u;
    qword_254117798 = 0;
    __cxa_guard_release(&_MergedGlobals_362);
  }
  return &qword_254117728;
}

void re::initInfo_AABB(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 4001984;
  v13[1] = "AABB";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_2541176E8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541176E8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "min";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254117700 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "max";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254117708 = v11;
      __cxa_guard_release(&qword_2541176E8);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254117700;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::AABB>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::AABB>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::AABB>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::AABB>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

int32x4_t re::internal::defaultConstruct<re::AABB>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x4_t result;
  __int128 v4;

  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v4 = 0x7F0000007FLL;
  *((_QWORD *)&v4 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)a3 = result;
  *(_OWORD *)(a3 + 16) = v4;
  return result;
}

int32x4_t re::internal::defaultConstructV2<re::AABB>(uint64_t a1)
{
  int32x4_t result;
  __int128 v2;

  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v2 = 0x7F0000007FLL;
  *((_QWORD *)&v2 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)a1 = result;
  *(_OWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t re::introspect_AABB(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AABB", (uint64_t (*)(re::internal *))re::allocInfo_AABB, (re::IntrospectionBase *(*)(void))re::initInfo_AABB, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::AABB>, this);
}

uint64_t *re::allocInfo_RayF(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541176F0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541176F0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541177A0, 0);
    *(uint64_t *)((char *)&qword_2541177B0 + 6) = 0;
    qword_2541177B0 = 0;
    qword_2541177C0 = 0;
    qword_2541177C8 = 0xFFFFFFFFLL;
    qword_2541177A0 = (uint64_t)&off_24ED7DAA8;
    qword_2541177D0 = (uint64_t)"RayF";
    dword_2541177D8 = 0;
    xmmword_2541177E0 = 0u;
    unk_2541177F0 = 0u;
    xmmword_254117800 = 0u;
    qword_254117810 = 0;
    __cxa_guard_release(&qword_2541176F0);
  }
  return &qword_2541177A0;
}

void re::initInfo_RayF(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 5079800;
  v17[1] = "RayF";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_2541176F8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541176F8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "origin";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254117710 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "direction";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1000000002;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254117718 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_float((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "length";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x2000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254117720 = v15;
      __cxa_guard_release(&qword_2541176F8);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254117710;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::RayF>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::RayF>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::RayF>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::RayF>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

double re::internal::defaultConstruct<re::RayF>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)(a3 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

double re::internal::defaultConstructV2<re::RayF>(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t re::introspect_RayF(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayF", (uint64_t (*)(re::internal *))re::allocInfo_RayF, (re::IntrospectionBase *(*)(void))re::initInfo_RayF, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::RayF>, this);
}

float32x4_t re::computeAABB@<Q0>(re *this@<X0>, _OWORD *a2@<X8>)
{
  __int128 v5;
  float32x4_t *v6;
  unsigned int v7;
  float32x4_t result;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  int32x4_t v14;

  v14 = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v5 = 0x7F0000007FLL;
  *((_QWORD *)&v5 + 1) = 0x7F0000007FLL;
  *a2 = v14;
  a2[1] = v5;
  v6 = (float32x4_t *)re::GeomMesh::accessVertexPositions(this);
  v9.i64[0] = 0x7F0000007FLL;
  v9.i32[2] = 127;
  v10 = (float32x4_t)v14;
  v11 = *((unsigned int *)this + 4);
  if ((_DWORD)v11)
  {
    v12 = v7;
    do
    {
      if (!v12)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v13 = *v6++;
      result = v13;
      v10.i32[3] = 0;
      result.i32[3] = 0;
      v9.i32[3] = 0;
      v10 = vminnmq_f32(v10, result);
      v9 = vmaxnmq_f32(v9, result);
      *a2 = v10;
      a2[1] = v9;
      --v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t re::computeOrientedBoundingBox@<X0>(re *this@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t result;
  _QWORD v16[2];
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = *((unsigned int *)this + 4);
  v19 = 0;
  v16[1] = 0;
  v17 = 0;
  v16[0] = 0;
  v18 = 0;
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v16, v6);
  v7 = re::GeomMesh::accessVertexPositions(this);
  if ((_DWORD)v6)
  {
    v9 = 0;
    v10 = v8;
    do
    {
      if (v9 == v8)
      {
        v20 = 0;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v21 = 136315906;
        v22 = "operator[]";
        v23 = 1024;
        v24 = 601;
        v25 = 2048;
        v26 = v10;
        v27 = 2048;
        v28 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_11:
        v20 = 0;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v21 = 136315906;
        v22 = "operator[]";
        v23 = 1024;
        v24 = 789;
        v25 = 2048;
        v26 = v9;
        v27 = 2048;
        v28 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v3 = v17;
      if (v17 <= v9)
        goto LABEL_11;
      *(_OWORD *)(v19 + 16 * v9) = *(_OWORD *)(v7 + 16 * v9);
      ++v9;
    }
    while (v9 != v6);
  }
  *(double *)&v11 = MEMORY[0x227693C34](v17, v19);
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  a2[3] = v14;
  result = v16[0];
  if (v16[0])
  {
    if (v19)
      return (*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 40))();
  }
  return result;
}

uint64_t re::transform(re::GeomMesh *a1, float32x4_t *a2)
{
  float32x2_t *v4;
  unsigned int v5;
  uint64_t v6;

  v4 = (float32x2_t *)re::GeomMesh::modifyVertexPositions(a1);
  v6 = v5;
  if (v5)
  {
    do
    {
      *(float32x4_t *)v4->f32 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)v4->f32)), a2[1], *v4, 1), a2[2], *(float32x4_t *)v4->f32, 2);
      v4 += 2;
      --v6;
    }
    while (v6);
  }
}

{
  float32x4_t v4;
  float32x4_t v5;
  float32x2_t *v6;
  unsigned int v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v11[3];

  v4 = a2[1];
  v5 = a2[2];
  v11[0] = *a2;
  v11[1] = v4;
  v11[2] = v5;
  v6 = (float32x2_t *)re::GeomMesh::modifyVertexPositions(a1);
  v8 = v7;
  if (v7)
  {
    do
    {
      v9 = vaddq_f32(a2[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)v6->f32)), a2[1], *v6, 1), a2[2], *(float32x4_t *)v6->f32, 2));
      *(float32x4_t *)v6->f32 = vdivq_f32(v9, (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 3));
      v6 += 2;
      --v8;
    }
    while (v8);
  }
}

double re::`anonymous namespace'::transformMeshTangents(uint64_t a1, float32x4_t *a2)
{
  re::internal::GeomAttributeManager *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (re::internal::GeomAttributeManager *)(a1 + 64);
  v4 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), "vertexTangent");
  if (v4 && *(_BYTE *)(v4 + 17) == 7)
  {
    v5 = re::internal::GeomAttributeManager::attributeByName(v3, "vertexTangent");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
    {
      v6 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v5, 0);
      v7 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
    else
    {
      v7 = 0;
      v6 = 0;
    }
    v13 = v6;
    v14 = v7;
  }
  v8 = re::internal::GeomAttributeManager::attributeByName(v3, "vertexBitangent");
  if (v8 && *(_BYTE *)(v8 + 17) == 7)
  {
    v10 = re::internal::GeomAttributeManager::attributeByName(v3, "vertexBitangent");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
    {
      v11 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v10, 0);
      v12 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    v13 = v11;
    v14 = v12;
  }
  return result;
}

uint64_t re::`anonymous namespace'::transformMeshNormals(uint64_t result, uint64_t a2)
{
  simd_float3x3 v2;
  float32x4_t v3;
  uint64_t v4;
  re::internal::GeomAttributeManager *v5;
  uint64_t v6;
  float32x2_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  simd_float3x3 v19;

  v2.columns[1] = *(simd_float3 *)(a2 + 16);
  v2.columns[2] = *(simd_float3 *)(a2 + 32);
  v3 = vmulq_f32(*(float32x4_t *)a2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v2.columns[2], (int8x16_t)v2.columns[2], 0xCuLL), (int8x16_t)v2.columns[2], 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2.columns[1], (int32x4_t)v2.columns[1]), (int8x16_t)v2.columns[1], 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2.columns[2], (int32x4_t)v2.columns[2]), (int8x16_t)v2.columns[2], 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v2.columns[1], (int8x16_t)v2.columns[1], 0xCuLL), (int8x16_t)v2.columns[1], 8uLL)));
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0]) >= 1.0e-15)
  {
    v4 = result;
    v2.columns[0] = *(simd_float3 *)a2;
    v19 = __invert_f3(v2);
    v17 = (int32x4_t)v19.columns[2];
    v18 = (int32x4_t)v19.columns[0];
    v16 = (int32x4_t)v19.columns[1];
    v5 = (re::internal::GeomAttributeManager *)(v4 + 64);
    result = re::internal::GeomAttributeManager::attributeByName(v5, "vertexNormal");
    if (result)
    {
      if (*(_BYTE *)(result + 17) == 7)
      {
        v6 = re::internal::GeomAttributeManager::attributeByName(v5, "vertexNormal");
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        if ((_DWORD)result)
        {
          v7 = (float32x2_t *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v6, 0);
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
          if ((_DWORD)result)
          {
            v8 = (float32x4_t)vzip1q_s32(v18, v16);
            v8.i32[2] = v17.i32[0];
            v9 = (float32x4_t)vzip2q_s32(vzip1q_s32(v18, v17), vdupq_lane_s32(*(int32x2_t *)v16.i8, 1));
            v10 = (float32x4_t)vzip2q_s32(v18, v16);
            v10.i32[2] = v17.i32[2];
            v11 = result;
            do
            {
              v12 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(_OWORD *)v7->f32)), v9, *v7, 1), v10, *(float32x4_t *)v7->f32, 2);
              v13 = (int32x4_t)vmulq_f32(v12, v12);
              v13.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1))).u32[0];
              v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
              v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
              *(float32x4_t *)v7->f32 = vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
              v7 += 2;
              --v11;
            }
            while (v11);
          }
        }
      }
    }
  }
  return result;
}

uint64_t re::computeVertexFaceConnectivity(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  __int128 v28;
  _BYTE v29[28];
  __int16 v30;
  _BYTE v31[10];
  _BYTE v32[18];
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v6 = a3;
  v8 = a1;
  v42 = *MEMORY[0x24BDAC8D0];
  v9 = *(unsigned int *)(a1 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  ++*(_DWORD *)(a3 + 24);
  LODWORD(v37) = 0;
  re::DynamicArray<unsigned int>::resize((_QWORD *)a3, v9, &v37);
  v10 = *(_QWORD *)(v8 + 40);
  v11 = v10;
  if (!(_DWORD)v10)
  {
    v13 = 0;
    goto LABEL_13;
  }
  v12 = 0;
  v13 = 0;
  v14 = *(_QWORD *)(v8 + 56);
  v4 = *(_QWORD *)(v6 + 16);
  do
  {
    if (v12 == v10)
      goto LABEL_41;
    v15 = 0;
    *(_OWORD *)v32 = *(_OWORD *)(v14 + 16 * v12);
    v16 = *(_QWORD *)(v6 + 32);
    if (*(_DWORD *)&v32[12] == -1)
      v17 = 3;
    else
      v17 = 4;
    v13 = (v13 + v17);
    do
    {
      v3 = *(unsigned int *)&v32[4 * v15];
      if (v4 <= v3)
      {
        *(_QWORD *)&v28 = 0;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v29 = 136315906;
        *(_QWORD *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 789;
        *(_WORD *)&v29[18] = 2048;
        *(_QWORD *)&v29[20] = v3;
        v30 = 2048;
        *(_QWORD *)v31 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_39:
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v32 = 136315906;
        *(_QWORD *)&v32[4] = "operator[]";
        *(_WORD *)&v32[12] = 1024;
        *(_DWORD *)&v32[14] = 789;
        v33 = 2048;
        v34 = v9;
        v35 = 2048;
        v36 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_40:
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v32 = 136315906;
        *(_QWORD *)&v32[4] = "operator[]";
        *(_WORD *)&v32[12] = 1024;
        *(_DWORD *)&v32[14] = 789;
        v33 = 2048;
        v34 = v3;
        v35 = 2048;
        v36 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        *(_QWORD *)v32 = 0;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v29 = 136315906;
        *(_QWORD *)&v29[4] = "operator[]";
        *(_WORD *)&v29[12] = 1024;
        *(_DWORD *)&v29[14] = 797;
        *(_WORD *)&v29[18] = 2048;
        *(_QWORD *)&v29[20] = v10;
        v30 = 2048;
        *(_QWORD *)v31 = v10;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_42:
        *(_QWORD *)&v28 = 0;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v32 = 136315906;
        *(_QWORD *)&v32[4] = "operator[]";
        *(_WORD *)&v32[12] = 1024;
        *(_DWORD *)&v32[14] = 797;
        v33 = 2048;
        v34 = v13;
        v35 = 2048;
        v36 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_43;
      }
      ++*(_DWORD *)(v16 + 4 * v3);
      ++v15;
    }
    while (v17 != v15);
    ++v12;
  }
  while (v12 != v10);
LABEL_13:
  *(_QWORD *)&v31[2] = 0;
  memset(v29, 0, sizeof(v29));
  if ((_DWORD)v9)
  {
    re::DynamicArray<float>::resize((uint64_t)v29, v9);
    v4 = *(_QWORD *)&v29[16];
    if (!*(_QWORD *)&v29[16])
      goto LABEL_46;
    v18 = *(_QWORD *)&v31[2];
    **(_DWORD **)&v31[2] = 0;
    if (v9 >= 2)
    {
      v5 = 0;
      v10 = *(_QWORD *)(v6 + 16);
      if (v10 <= 1)
        v3 = 1;
      else
        v3 = *(_QWORD *)(v6 + 16);
      v19 = v18 + 4;
      v20 = (_DWORD *)(*(_QWORD *)(v6 + 32) + 4);
      while (v10 != v5)
      {
        if (v4 - 1 == v5)
          goto LABEL_44;
        *(_DWORD *)(v19 + 4 * v5) = *(v20 - 1);
        if (v3 - 1 == v5)
          goto LABEL_45;
        *v20 += *(v20 - 1);
        ++v20;
        if (v9 - 1 == ++v5)
          goto LABEL_24;
      }
LABEL_43:
      *(_QWORD *)&v28 = 0;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v32 = 136315906;
      *(_QWORD *)&v32[4] = "operator[]";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 789;
      v33 = 2048;
      v34 = v5;
      v35 = 2048;
      v36 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      *(_QWORD *)&v28 = 0;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v32 = 136315906;
      *(_QWORD *)&v32[4] = "operator[]";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 789;
      v33 = 2048;
      v34 = v4;
      v35 = 2048;
      v36 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      *(_QWORD *)&v28 = 0;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v32 = 136315906;
      *(_QWORD *)&v32[4] = "operator[]";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 789;
      v33 = 2048;
      v34 = v3;
      v35 = 2048;
      v36 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      *(_QWORD *)&v28 = 0;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v32 = 136315906;
      *(_QWORD *)&v32[4] = "operator[]";
      *(_WORD *)&v32[12] = 1024;
      *(_DWORD *)&v32[14] = 789;
      v33 = 2048;
      v34 = 0;
      v35 = 2048;
      v36 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
LABEL_24:
  re::DynamicArray<float>::resize(a2, v13);
  if (v11)
  {
    v21 = 0;
    v13 = *(_QWORD *)(v8 + 40);
    v22 = *(_QWORD *)(v8 + 56);
    v8 = *(_QWORD *)&v29[16];
    while (v21 != v13)
    {
      v23 = 0;
      v28 = *(_OWORD *)(v22 + 16 * v21);
      v24 = *(_QWORD *)&v31[2];
      v6 = *(_QWORD *)(a2 + 16);
      v25 = *(_QWORD *)(a2 + 32);
      if (HIDWORD(v28) == -1)
        v26 = 3;
      else
        v26 = 4;
      do
      {
        v9 = *(unsigned int *)&v29[4 * v23 - 16];
        if (v8 <= v9)
          goto LABEL_39;
        v3 = *(unsigned int *)(v24 + 4 * v9);
        *(_DWORD *)(v24 + 4 * v9) = v3 + 1;
        if (v6 <= v3)
          goto LABEL_40;
        *(_DWORD *)(v25 + 4 * v3) = v21;
        ++v23;
      }
      while (v26 != v23);
      if (++v21 == v11)
        goto LABEL_34;
    }
    goto LABEL_42;
  }
LABEL_34:
  result = *(_QWORD *)v29;
  if (*(_QWORD *)v29)
  {
    if (*(_QWORD *)&v31[2])
      return (*(uint64_t (**)(void))(**(_QWORD **)v29 + 40))();
  }
  return result;
}

uint64_t re::mergeContinuousFaceVaryingAttributeValues(re *this, re::GeomMesh *a2, const char *a3, double a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  re *v9;
  char **v10;
  uint64_t v11;
  char **v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t **v20;
  uint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  uint64_t **v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  char v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char v64;
  int v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char v76;
  int v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  char v88;
  int v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unint64_t v95;
  unsigned __int8 *v96;
  uint64_t v97;
  int v98;
  const re::GeomAttribute *v99;
  unsigned int v100;
  unsigned __int8 *v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  BOOL v110;
  uint64_t v112;
  int v113;
  const re::GeomAttribute *v114;
  unsigned int v115;
  unsigned __int8 *v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v127;
  int v128;
  const re::GeomAttribute *v129;
  unsigned int v130;
  unsigned __int8 *v131;
  uint64_t v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  uint64_t v139;
  BOOL v140;
  uint64_t v142;
  int v143;
  const re::GeomAttribute *v144;
  unsigned int v145;
  unsigned __int8 *v146;
  _DWORD *v147;
  uint64_t v148;
  unsigned __int8 *v149;
  uint64_t v150;
  _DWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  uint64_t v157;
  BOOL v158;
  uint64_t v160;
  int v161;
  const re::GeomAttribute *v162;
  unsigned int v163;
  unsigned __int8 *v164;
  _DWORD *v165;
  uint64_t v166;
  unsigned __int8 *v167;
  uint64_t v168;
  _DWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _DWORD *v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  int v190;
  int v191;
  uint64_t v192;
  int v193;
  int v194;
  int v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  int v202;
  int v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  int v214;
  int v215;
  uint64_t v216;
  int v217;
  int v218;
  int v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  int v229;
  int v230;
  int v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  int v238;
  int v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  const void *v256;
  size_t v257;
  unint64_t v258;
  unint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  __int128 v272;
  uint64_t v273;
  uint64_t *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  int v280;
  unsigned __int8 *v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  int v291;
  _DWORD *v292;
  _BYTE v293[28];
  __int16 v294;
  _BYTE v295[10];
  _BYTE v296[28];
  __int16 v297;
  _BYTE v298[10];
  _OWORD v299[3];
  uint64_t **v300;
  _BYTE v301[18];
  __int16 v302;
  unint64_t v303;
  __int16 v304;
  unint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  uint64_t v311;

  v9 = this;
  v311 = *MEMORY[0x24BDAC8D0];
  v10 = (char **)re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), (const char *)a2);
  v12 = v10;
  switch(*((_BYTE *)v10 + 17))
  {
    case 4:
      result = (*((uint64_t (**)(char **))*v10 + 2))(v10);
      if (!(_DWORD)result)
        return result;
      v286 = 0;
      v283 = 0;
      v284 = 0;
      v281 = 0;
      v282 = 0;
      v285 = 0;
      v278 = 0;
      v279 = 0;
      v277 = 0;
      v280 = 0;
      v14 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!(_DWORD)v14)
        goto LABEL_27;
      if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
      {
        v15 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v12, 0);
        if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
          goto LABEL_28;
      }
      v288 = 0;
      v309 = 0u;
      v310 = 0u;
      v307 = 0u;
      v308 = 0u;
      v306 = 0u;
      v12 = (char **)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v299[0]) = 136315906;
      *(_QWORD *)((char *)v299 + 4) = "operator[]";
      WORD6(v299[0]) = 1024;
      *(_DWORD *)((char *)v299 + 14) = 601;
      WORD1(v299[1]) = 2048;
      *(_QWORD *)((char *)&v299[1] + 4) = 0;
      WORD6(v299[1]) = 2048;
      *(_QWORD *)((char *)&v299[1] + 14) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_7:
      result = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!(_DWORD)result)
        return result;
      v286 = 0;
      v283 = 0;
      v284 = 0;
      v281 = 0;
      v282 = 0;
      v285 = 0;
      v278 = 0;
      v279 = 0;
      v277 = 0;
      v280 = 0;
      v14 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!(_DWORD)v14)
      {
        v15 = 0;
        goto LABEL_40;
      }
      if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
      {
        v15 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
        if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
        {
LABEL_40:
          v300 = 0;
          v16 = v14;
          *((_QWORD *)&v299[0] + 1) = v14;
          memset(&v299[1], 0, 28);
          *(_QWORD *)&v299[0] = v15;
          v292 = 0;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 0;
          re::DynamicArray<float>::resize((uint64_t)&v288, v14);
          if ((_DWORD)v14)
          {
            v5 = 0;
            v17 = v290;
            v23 = v292;
            do
            {
              if (v17 <= v5)
                goto LABEL_623;
              v23[v5] = v5;
              ++v5;
            }
            while ((_DWORD)v14 != (_DWORD)v5);
            v24 = 0;
            *(_QWORD *)&v299[2] = 0;
            ++DWORD2(v299[2]);
            if (*((_QWORD *)&v299[1] + 1) < (unint64_t)v14)
            {
              re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(&v299[1], v14);
              v24 = *(_QWORD *)&v299[2];
            }
            if (v24 < v14)
            {
              v25 = &v300[3 * v24];
              v26 = (char *)&v300[3 * v14] - (char *)v25;
              if (v26 >= 1)
              {
                v27 = v26 / 0x18uLL + 1;
                do
                {
                  *v25 = 0;
                  v25[1] = 0;
                  *((_DWORD *)v25 + 4) = -1;
                  *((_BYTE *)v25 + 20) = 0;
                  --v27;
                  v25 += 3;
                }
                while (v27 > 1);
              }
            }
            *(_QWORD *)&v299[2] = v14;
          }
          else
          {
            *(_QWORD *)&v299[2] = 0;
          }
          ++DWORD2(v299[2]);
          if (*((_QWORD *)&v299[0] + 1))
          {
            LODWORD(v306) = 0;
            re::internal::GeomKDTree<re::Vector2<float>>::buildHelper((uint64_t *)v299, 0, v14, (uint64_t)&v288, &v306);
          }
          if (v288 && v292)
            (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v288 + 40))(v288, v292);
          v284 = 0;
          ++v285;
          v279 = 0;
          ++v280;
          re::DynamicArray<unsigned int>::resize(&v282, v14, &re::kInvalidMeshIndex);
          LOBYTE(v306) = 0;
          re::DynamicArray<unsigned char>::resize(&v277, v14, &v306);
          v292 = 0;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 0;
          if ((_DWORD)v14)
          {
            v14 = 0;
            v17 = 1;
            while (1)
            {
              v4 = v284;
              if (v284 <= v14)
                goto LABEL_633;
              if (*(_DWORD *)(v286 + 4 * v14) == -1)
              {
                v290 = 0;
                v291 += 2;
                v51 = *(_QWORD *)&v299[2];
                if (*(_QWORD *)&v299[2]
                  && (re::internal::GeomKDTree<re::Vector2<float>>::findWithinRadiusHelper((uint64_t)v299, v300, (float32x2_t *)(v15 + 8 * v14), &v288, a4), v51 = v290, (_DWORD)v290))
                {
                  v52 = 0;
                  v53 = *v292;
                }
                else
                {
                  v52 = 1;
                  v53 = v14;
                }
                v4 = v284;
                if (v284 <= v14)
                  goto LABEL_671;
                *(_DWORD *)(v286 + 4 * v14) = v53;
                v4 = v279;
                if (v279 <= v14)
                  goto LABEL_675;
                v281[v14] = 1;
                if ((v52 & 1) == 0)
                  break;
              }
LABEL_125:
              if (++v14 == v16)
              {
                if (v288 && v292)
                  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v288 + 40))(v288, v292);
                goto LABEL_129;
              }
            }
            v54 = 0;
            v5 = v290;
            v55 = v292;
            v6 = v284;
            v56 = v286;
            while (v5 != v54)
            {
              v4 = v55[v54];
              if (v6 <= v4)
                goto LABEL_522;
              *(_DWORD *)(v56 + 4 * v4) = v14;
              if (v51 == ++v54)
                goto LABEL_125;
            }
            goto LABEL_518;
          }
LABEL_129:
          if (*(_QWORD *)&v299[1] && v300)
            (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)&v299[1] + 40))(*(_QWORD *)&v299[1], v300);
          *(_QWORD *)&v299[2] = 0;
          memset(v299, 0, 28);
          v292 = 0;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 0;
          v57 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
          v58 = v57;
          if (v57)
          {
            v15 = v279;
            if (v279 <= v57 - 1)
              goto LABEL_697;
            LODWORD(v59) = 0;
            v60 = v281;
            v61 = v57;
            do
            {
              v62 = *v60++;
              v59 = (v59 + v62);
              --v61;
            }
            while (v61);
          }
          else
          {
            v59 = 0;
          }
          if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
          {
            v14 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
            v17 = (*((unsigned int (**)(char **))*v12 + 2))(v12);
          }
          else
          {
            v17 = 0;
            v14 = 0;
          }
          re::DynamicArray<unsigned long>::resize((uint64_t)v299, v59);
          v15 = v58;
          re::DynamicArray<unsigned int>::resize(&v288, v58, &re::kInvalidMeshIndex);
          if (v58)
          {
            v16 = 0;
            v115 = 0;
            do
            {
              v4 = v279;
              if (v279 <= v16)
                goto LABEL_627;
              if (v281[v16])
              {
                v4 = v290;
                if (v290 <= v16)
                  goto LABEL_654;
                v292[v16] = v115;
                if (v17 <= v16)
                  goto LABEL_658;
                v5 = v115;
                v4 = *(_QWORD *)&v299[1];
                if (*(_QWORD *)&v299[1] <= (unint64_t)v115)
                  goto LABEL_662;
                *(_QWORD *)(*(_QWORD *)&v299[2] + 8 * v115++) = *(_QWORD *)(v14 + 8 * v16);
              }
              ++v16;
            }
            while (v15 != v16);
            v16 = 0;
            v17 = v279;
            v116 = v281;
            v5 = v284;
            v117 = v286;
            v14 = v290;
            v118 = v292;
            while (v17 != v16)
            {
              if (!v116[v16])
              {
                if (v5 <= v16)
                  goto LABEL_679;
                v6 = *(unsigned int *)(v117 + 4 * v16);
                if (v14 <= v6)
                  goto LABEL_683;
                if (v14 <= v16)
                  goto LABEL_687;
                v118[v16] = v118[v6];
              }
              if (v15 == ++v16)
                goto LABEL_309;
            }
LABEL_637:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v17;
            v297 = 2048;
            *(_QWORD *)v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_638;
          }
LABEL_309:
          v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v114);
          v15 = *(_QWORD *)&v299[1];
          v6 = *(_QWORD *)(v16 + 24);
          v14 = v6;
          *(_QWORD *)&v298[2] = 0;
          memset(v296, 0, sizeof(v296));
          re::DynamicArray<re::GeomCell4>::resize(v296, v6);
          if ((_DWORD)v6)
          {
            v119 = 0;
            v17 = *(_QWORD *)&v296[16];
            v120 = *(_QWORD *)&v298[2];
            v5 = *(_QWORD *)(v16 + 24);
            v121 = *(_QWORD *)(v16 + 40);
            v7 = v290;
            while (v119 != v17)
            {
              if (v119 == v5)
                goto LABEL_647;
              v122 = 0;
              *(_OWORD *)v301 = *(_OWORD *)(v121 + 16 * v119);
              v123 = v292;
              if (*(_DWORD *)&v301[12] == -1)
                v124 = 3;
              else
                v124 = 4;
              do
              {
                v4 = *(unsigned int *)&v301[4 * v122];
                if (v7 <= v4)
                  goto LABEL_452;
                *(_DWORD *)(v120 + 4 * v122++) = v123[v4];
              }
              while (v124 != v122);
              ++v119;
              v120 += 16;
              if (v119 == v6)
                goto LABEL_319;
            }
            goto LABEL_643;
          }
LABEL_319:
          if (*(_DWORD *)(v16 + 48))
            v125 = *(_BYTE *)(v16 + 60) == 0;
          else
            v125 = 1;
          if (v125 && *((_DWORD *)v9 + 10) == (_DWORD)v6)
          {
            re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t)v296);
          }
          else
          {
            *(_QWORD *)&v295[2] = 0;
            memset(v293, 0, sizeof(v293));
            re::DynamicArray<unsigned int>::resize(v293, v6, &re::kInvalidMeshIndex);
            v128 = *(unsigned __int8 *)(v16 + 60);
            if (v128 == 2)
            {
              re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v274, (uint64_t *)(v16 + 64));
              LOBYTE(v273) = 2;
              v193 = *(unsigned __int8 *)(v16 + 60);
              if (!*(_BYTE *)(v16 + 60))
                goto LABEL_472;
              if (v193 == 2)
              {
                LOBYTE(v270) = 2;
                v271 = v16 + 64;
                v272 = xmmword_2260E7ED0;
                goto LABEL_557;
              }
              if (v193 != 1)
                goto LABEL_712;
              v194 = *(_DWORD *)(v16 + 48);
            }
            else
            {
              if (v128 != 1)
              {
                if (*(_BYTE *)(v16 + 60))
                  goto LABEL_707;
                LOBYTE(v273) = 0;
                LODWORD(v274) = 0;
LABEL_472:
                v195 = *(_DWORD *)(v16 + 64);
                LOBYTE(v270) = 0;
                LODWORD(v271) = v195;
                goto LABEL_557;
              }
              v194 = *(_DWORD *)(v16 + 48);
              if (v194)
              {
                v196 = *(uint64_t **)(v16 + 96);
                v197 = *(unsigned int *)(v16 + 52);
                v198 = *(_QWORD *)(v16 + 80);
                v199 = (char *)v196 + 4 * v198;
                LOBYTE(v273) = 1;
                if (!v196)
                  goto LABEL_550;
                v200 = (char *)v196 + 4 * v197;
                if (v198 != v197)
                {
                  v200 -= 4;
                  v201 = 4 * v198 - 4 * v197;
                  do
                  {
                    v203 = *((_DWORD *)v200 + 1);
                    v200 += 4;
                    v202 = v203;
                    if (!v201)
                      break;
                    v201 -= 4;
                  }
                  while (v202 == -1);
                }
LABEL_551:
                v274 = v196;
                v275 = v200;
                v276 = v199;
              }
              else
              {
                LOBYTE(v273) = 1;
                v275 = 0;
                v276 = 0;
                v274 = 0;
              }
            }
            if (v194)
            {
              v245 = *(_QWORD *)(v16 + 96);
              v246 = v245 + 4 * *(_QWORD *)(v16 + 80);
              LOBYTE(v270) = 1;
              v271 = v245;
              *(_QWORD *)&v272 = v246;
              *((_QWORD *)&v272 + 1) = v246;
            }
            else
            {
              LOBYTE(v270) = 1;
              v272 = 0uLL;
              v271 = 0;
            }
LABEL_557:
            while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v273, &v270) & 1) == 0)
            {
              v16 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v248);
              v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v247);
              v4 = *(_QWORD *)&v293[16];
              if (*(_QWORD *)&v293[16] <= v14)
                goto LABEL_692;
              *(_DWORD *)(*(_QWORD *)&v295[2] + 4 * v14) = HIDWORD(v16);
              re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v273);
            }
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v270, v248);
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v273, v249);
            re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t *)v296, (uint64_t *)v293);
            if (*(_QWORD *)v293 && *(_QWORD *)&v295[2])
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v293 + 40))(*(_QWORD *)v293, *(_QWORD *)&v295[2]);
          }
          if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
          {
            v9 = (re *)re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
            if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
              goto LABEL_605;
          }
          *(_QWORD *)v301 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          v12 = (char **)MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v293 = 136315906;
          *(_QWORD *)&v293[4] = "operator[]";
          *(_WORD *)&v293[12] = 1024;
          *(_DWORD *)&v293[14] = 609;
          *(_WORD *)&v293[18] = 2048;
          *(_QWORD *)&v293[20] = 0;
          v294 = 2048;
          *(_QWORD *)v295 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_564;
        }
      }
      v288 = 0;
      v309 = 0u;
      v310 = 0u;
      v307 = 0u;
      v308 = 0u;
      v306 = 0u;
      v12 = (char **)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v299[0]) = 136315906;
      *(_QWORD *)((char *)v299 + 4) = "operator[]";
      WORD6(v299[0]) = 1024;
      *(_DWORD *)((char *)v299 + 14) = 601;
      WORD1(v299[1]) = 2048;
      *(_QWORD *)((char *)&v299[1] + 4) = 0;
      WORD6(v299[1]) = 2048;
      *(_QWORD *)((char *)&v299[1] + 14) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_12:
      result = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!(_DWORD)result)
        return result;
      v286 = 0;
      v283 = 0;
      v284 = 0;
      v281 = 0;
      v282 = 0;
      v285 = 0;
      v278 = 0;
      v279 = 0;
      v277 = 0;
      v280 = 0;
      v14 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!(_DWORD)v14)
      {
        v15 = 0;
        goto LABEL_52;
      }
      if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
      {
        v15 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0);
        if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
        {
LABEL_52:
          v300 = 0;
          v16 = v14;
          *((_QWORD *)&v299[0] + 1) = v14;
          memset(&v299[1], 0, 28);
          *(_QWORD *)&v299[0] = v15;
          v292 = 0;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 0;
          re::DynamicArray<float>::resize((uint64_t)&v288, v14);
          if ((_DWORD)v14)
          {
            v5 = 0;
            v17 = v290;
            v28 = v292;
            do
            {
              if (v17 <= v5)
                goto LABEL_624;
              v28[v5] = v5;
              ++v5;
            }
            while ((_DWORD)v14 != (_DWORD)v5);
            v29 = 0;
            *(_QWORD *)&v299[2] = 0;
            ++DWORD2(v299[2]);
            if (*((_QWORD *)&v299[1] + 1) < (unint64_t)v14)
            {
              re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(&v299[1], v14);
              v29 = *(_QWORD *)&v299[2];
            }
            if (v29 < v14)
            {
              v30 = &v300[3 * v29];
              v31 = (char *)&v300[3 * v14] - (char *)v30;
              if (v31 >= 1)
              {
                v32 = v31 / 0x18uLL + 1;
                do
                {
                  *v30 = 0;
                  v30[1] = 0;
                  *((_DWORD *)v30 + 4) = -1;
                  *((_BYTE *)v30 + 20) = 0;
                  --v32;
                  v30 += 3;
                }
                while (v32 > 1);
              }
            }
            *(_QWORD *)&v299[2] = v14;
          }
          else
          {
            *(_QWORD *)&v299[2] = 0;
          }
          ++DWORD2(v299[2]);
          if (*((_QWORD *)&v299[0] + 1))
          {
            LODWORD(v306) = 0;
            re::internal::GeomKDTree<re::Vector4<float>>::buildHelper((uint64_t *)v299, 0, v14, (uint64_t)&v288, &v306);
          }
          if (v288 && v292)
            (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v288 + 40))(v288, v292);
          v284 = 0;
          ++v285;
          v279 = 0;
          ++v280;
          re::DynamicArray<unsigned int>::resize(&v282, v14, &re::kInvalidMeshIndex);
          LOBYTE(v306) = 0;
          re::DynamicArray<unsigned char>::resize(&v277, v14, &v306);
          v292 = 0;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 0;
          if ((_DWORD)v14)
          {
            v14 = 0;
            v17 = 1;
            while (1)
            {
              v4 = v284;
              if (v284 <= v14)
                goto LABEL_634;
              if (*(_DWORD *)(v286 + 4 * v14) == -1)
              {
                v290 = 0;
                v291 += 2;
                v63 = *(_QWORD *)&v299[2];
                if (*(_QWORD *)&v299[2]
                  && (re::internal::GeomKDTree<re::Vector4<float>>::findWithinRadiusHelper((uint64_t)v299, v300, (float32x4_t *)(v15 + 16 * v14), &v288, a4), v63 = v290, (_DWORD)v290))
                {
                  v64 = 0;
                  v65 = *v292;
                }
                else
                {
                  v64 = 1;
                  v65 = v14;
                }
                v4 = v284;
                if (v284 <= v14)
                  goto LABEL_672;
                *(_DWORD *)(v286 + 4 * v14) = v65;
                v4 = v279;
                if (v279 <= v14)
                  goto LABEL_676;
                v281[v14] = 1;
                if ((v64 & 1) == 0)
                  break;
              }
LABEL_158:
              if (++v14 == v16)
              {
                if (v288 && v292)
                  (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v288 + 40))(v288, v292);
                goto LABEL_162;
              }
            }
            v66 = 0;
            v5 = v290;
            v67 = v292;
            v6 = v284;
            v68 = v286;
            while (v5 != v66)
            {
              v4 = v67[v66];
              if (v6 <= v4)
                goto LABEL_523;
              *(_DWORD *)(v68 + 4 * v4) = v14;
              if (v63 == ++v66)
                goto LABEL_158;
            }
LABEL_519:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v5;
            v297 = 2048;
            *(_QWORD *)v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_520;
          }
LABEL_162:
          if (*(_QWORD *)&v299[1] && v300)
            (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)&v299[1] + 40))(*(_QWORD *)&v299[1], v300);
          *(_QWORD *)&v299[2] = 0;
          memset(v299, 0, 28);
          v292 = 0;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 0;
          v69 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
          v70 = v69;
          if (v69)
          {
            v15 = v279;
            if (v279 <= v69 - 1)
              goto LABEL_698;
            LODWORD(v71) = 0;
            v72 = v281;
            v73 = v69;
            do
            {
              v74 = *v72++;
              v71 = (v71 + v74);
              --v73;
            }
            while (v73);
          }
          else
          {
            v71 = 0;
          }
          if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
          {
            v14 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0);
            v17 = (*((unsigned int (**)(char **))*v12 + 2))(v12);
          }
          else
          {
            v17 = 0;
            v14 = 0;
          }
          re::DynamicArray<re::Vector4<float>>::resize((uint64_t)v299, v71);
          v15 = v70;
          re::DynamicArray<unsigned int>::resize(&v288, v70, &re::kInvalidMeshIndex);
          if (v70)
          {
            v16 = 0;
            v130 = 0;
            do
            {
              v4 = v279;
              if (v279 <= v16)
                goto LABEL_628;
              if (v281[v16])
              {
                v4 = v290;
                if (v290 <= v16)
                  goto LABEL_655;
                v292[v16] = v130;
                if (v17 <= v16)
                  goto LABEL_659;
                v5 = v130;
                v4 = *(_QWORD *)&v299[1];
                if (*(_QWORD *)&v299[1] <= (unint64_t)v130)
                  goto LABEL_663;
                *(_OWORD *)(*(_QWORD *)&v299[2] + 16 * v130++) = *(_OWORD *)v14;
              }
              ++v16;
              v14 += 16;
            }
            while (v15 != v16);
            v16 = 0;
            v17 = v279;
            v131 = v281;
            v5 = v284;
            v132 = v286;
            v14 = v290;
            v133 = v292;
            while (v17 != v16)
            {
              if (!v131[v16])
              {
                if (v5 <= v16)
                  goto LABEL_680;
                v6 = *(unsigned int *)(v132 + 4 * v16);
                if (v14 <= v6)
                  goto LABEL_684;
                if (v14 <= v16)
                  goto LABEL_688;
                v133[v16] = v133[v6];
              }
              if (v15 == ++v16)
                goto LABEL_348;
            }
LABEL_638:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v17;
            v297 = 2048;
            *(_QWORD *)v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_639;
          }
LABEL_348:
          v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v129);
          v15 = *(_QWORD *)&v299[1];
          v6 = *(_QWORD *)(v16 + 24);
          v14 = v6;
          *(_QWORD *)&v298[2] = 0;
          memset(v296, 0, sizeof(v296));
          re::DynamicArray<re::GeomCell4>::resize(v296, v6);
          if ((_DWORD)v6)
          {
            v134 = 0;
            v17 = *(_QWORD *)&v296[16];
            v135 = *(_QWORD *)&v298[2];
            v5 = *(_QWORD *)(v16 + 24);
            v136 = *(_QWORD *)(v16 + 40);
            v7 = v290;
            while (v134 != v17)
            {
              if (v134 == v5)
                goto LABEL_648;
              v137 = 0;
              *(_OWORD *)v301 = *(_OWORD *)(v136 + 16 * v134);
              v138 = v292;
              if (*(_DWORD *)&v301[12] == -1)
                v139 = 3;
              else
                v139 = 4;
              do
              {
                v4 = *(unsigned int *)&v301[4 * v137];
                if (v7 <= v4)
                  goto LABEL_453;
                *(_DWORD *)(v135 + 4 * v137++) = v138[v4];
              }
              while (v139 != v137);
              ++v134;
              v135 += 16;
              if (v134 == v6)
                goto LABEL_358;
            }
LABEL_644:
            *(_QWORD *)v301 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v293 = 136315906;
            *(_QWORD *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(_QWORD *)&v293[20] = v17;
            v294 = 2048;
            *(_QWORD *)v295 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_645;
          }
LABEL_358:
          if (*(_DWORD *)(v16 + 48))
            v140 = *(_BYTE *)(v16 + 60) == 0;
          else
            v140 = 1;
          if (v140 && *((_DWORD *)v9 + 10) == (_DWORD)v6)
          {
            re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t)v296);
            goto LABEL_575;
          }
          *(_QWORD *)&v295[2] = 0;
          memset(v293, 0, sizeof(v293));
          re::DynamicArray<unsigned int>::resize(v293, v6, &re::kInvalidMeshIndex);
          v143 = *(unsigned __int8 *)(v16 + 60);
          if (v143 == 2)
          {
            re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v274, (uint64_t *)(v16 + 64));
            LOBYTE(v273) = 2;
            v205 = *(unsigned __int8 *)(v16 + 60);
            if (!*(_BYTE *)(v16 + 60))
              goto LABEL_484;
            if (v205 == 2)
            {
              LOBYTE(v270) = 2;
              v271 = v16 + 64;
              v272 = xmmword_2260E7ED0;
              goto LABEL_571;
            }
            if (v205 != 1)
              goto LABEL_713;
            v206 = *(_DWORD *)(v16 + 48);
            goto LABEL_566;
          }
          if (v143 != 1)
          {
            if (*(_BYTE *)(v16 + 60))
              goto LABEL_708;
            LOBYTE(v273) = 0;
            LODWORD(v274) = 0;
LABEL_484:
            v207 = *(_DWORD *)(v16 + 64);
            LOBYTE(v270) = 0;
            LODWORD(v271) = v207;
            goto LABEL_571;
          }
          v206 = *(_DWORD *)(v16 + 48);
          if (!v206)
          {
            LOBYTE(v273) = 1;
            v275 = 0;
            v276 = 0;
            v274 = 0;
LABEL_566:
            if (v206)
            {
              v250 = *(_QWORD *)(v16 + 96);
              v251 = v250 + 4 * *(_QWORD *)(v16 + 80);
              LOBYTE(v270) = 1;
              v271 = v250;
              *(_QWORD *)&v272 = v251;
              *((_QWORD *)&v272 + 1) = v251;
            }
            else
            {
              LOBYTE(v270) = 1;
              v272 = 0uLL;
              v271 = 0;
            }
LABEL_571:
            while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v273, &v270) & 1) == 0)
            {
              v252 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v254) >> 32;
              v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v253);
              v4 = *(_QWORD *)&v293[16];
              if (*(_QWORD *)&v293[16] <= v14)
                goto LABEL_693;
              *(_DWORD *)(*(_QWORD *)&v295[2] + 4 * v14) = v252;
              re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v273);
            }
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v270, v254);
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v273, v255);
            re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t *)v296, (uint64_t *)v293);
            if (*(_QWORD *)v293 && *(_QWORD *)&v295[2])
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v293 + 40))(*(_QWORD *)v293, *(_QWORD *)&v295[2]);
LABEL_575:
            if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
            {
              v9 = (re *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0);
              if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
                goto LABEL_577;
            }
LABEL_703:
            *(_QWORD *)v301 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v293 = 136315906;
            *(_QWORD *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 609;
            *(_WORD *)&v293[18] = 2048;
            *(_QWORD *)&v293[20] = 0;
            v294 = 2048;
            *(_QWORD *)v295 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_704;
          }
          v208 = *(uint64_t **)(v16 + 96);
          v209 = *(unsigned int *)(v16 + 52);
          v210 = *(_QWORD *)(v16 + 80);
          v211 = (char *)v208 + 4 * v210;
          LOBYTE(v273) = 1;
          if (v208)
          {
            v212 = (char *)v208 + 4 * v209;
            if (v210 != v209)
            {
              v212 -= 4;
              v213 = 4 * v210 - 4 * v209;
              do
              {
                v215 = *((_DWORD *)v212 + 1);
                v212 += 4;
                v214 = v215;
                if (!v213)
                  break;
                v213 -= 4;
              }
              while (v214 == -1);
            }
            goto LABEL_565;
          }
LABEL_564:
          v212 = 0;
LABEL_565:
          v274 = v208;
          v275 = v212;
          v276 = v211;
          goto LABEL_566;
        }
      }
      v288 = 0;
      v309 = 0u;
      v310 = 0u;
      v307 = 0u;
      v308 = 0u;
      v306 = 0u;
      v12 = (char **)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v299[0]) = 136315906;
      *(_QWORD *)((char *)v299 + 4) = "operator[]";
      WORD6(v299[0]) = 1024;
      *(_DWORD *)((char *)v299 + 14) = 601;
      WORD1(v299[1]) = 2048;
      *(_QWORD *)((char *)&v299[1] + 4) = 0;
      WORD6(v299[1]) = 2048;
      *(_QWORD *)((char *)&v299[1] + 14) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      result = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!(_DWORD)result)
        return result;
      v286 = 0;
      v283 = 0;
      v284 = 0;
      v281 = 0;
      v282 = 0;
      v285 = 0;
      v278 = 0;
      v279 = 0;
      v277 = 0;
      v280 = 0;
      v14 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!(_DWORD)v14)
      {
        v15 = 0;
        goto LABEL_64;
      }
      if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
      {
        v15 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
        if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
        {
LABEL_64:
          v300 = 0;
          v16 = v14;
          *((_QWORD *)&v299[0] + 1) = v14;
          memset(&v299[1], 0, 28);
          *(_QWORD *)&v299[0] = v15;
          v292 = 0;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 0;
          re::DynamicArray<float>::resize((uint64_t)&v288, v14);
          if ((_DWORD)v14)
          {
            v5 = 0;
            v17 = v290;
            v33 = v292;
            do
            {
              if (v17 <= v5)
                goto LABEL_625;
              v33[v5] = v5;
              ++v5;
            }
            while ((_DWORD)v14 != (_DWORD)v5);
            v34 = 0;
            *(_QWORD *)&v299[2] = 0;
            ++DWORD2(v299[2]);
            if (*((_QWORD *)&v299[1] + 1) < (unint64_t)v14)
            {
              re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(&v299[1], v14);
              v34 = *(_QWORD *)&v299[2];
            }
            if (v34 < v14)
            {
              v35 = &v300[3 * v34];
              v36 = (char *)&v300[3 * v14] - (char *)v35;
              if (v36 >= 1)
              {
                v37 = v36 / 0x18uLL + 1;
                do
                {
                  *v35 = 0;
                  v35[1] = 0;
                  *((_DWORD *)v35 + 4) = -1;
                  *((_BYTE *)v35 + 20) = 0;
                  --v37;
                  v35 += 3;
                }
                while (v37 > 1);
              }
            }
            *(_QWORD *)&v299[2] = v14;
          }
          else
          {
            *(_QWORD *)&v299[2] = 0;
          }
          ++DWORD2(v299[2]);
          if (*((_QWORD *)&v299[0] + 1))
          {
            LODWORD(v306) = 0;
            re::internal::GeomKDTree<double>::buildHelper((uint64_t *)v299, 0, v14, (uint64_t)&v288, &v306);
          }
          if (v288 && v292)
            (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v288 + 40))(v288, v292);
          v284 = 0;
          ++v285;
          v279 = 0;
          ++v280;
          re::DynamicArray<unsigned int>::resize(&v282, v14, &re::kInvalidMeshIndex);
          LOBYTE(v306) = 0;
          re::DynamicArray<unsigned char>::resize(&v277, v14, &v306);
          v292 = 0;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 0;
          if ((_DWORD)v14)
          {
            v14 = 0;
            v17 = 1;
            do
            {
              v4 = v284;
              if (v284 <= v14)
                goto LABEL_636;
              if (*(_DWORD *)(v286 + 4 * v14) == -1)
              {
                v290 = 0;
                v291 += 2;
                v87 = *(_QWORD *)&v299[2];
                if (*(_QWORD *)&v299[2]
                  && (re::internal::GeomKDTree<double>::findWithinRadiusHelper((uint64_t)v299, v300, (double *)(v15 + 8 * v14), &v288, a4), v87 = v290, (_DWORD)v290))
                {
                  v88 = 0;
                  v89 = *v292;
                }
                else
                {
                  v88 = 1;
                  v89 = v14;
                }
                v4 = v284;
                if (v284 <= v14)
                  goto LABEL_674;
                *(_DWORD *)(v286 + 4 * v14) = v89;
                v4 = v279;
                if (v279 <= v14)
                  goto LABEL_678;
                v281[v14] = 1;
                if ((v88 & 1) == 0)
                {
                  v90 = 0;
                  v5 = v290;
                  v91 = v292;
                  v6 = v284;
                  v92 = v286;
                  do
                  {
                    if (v5 == v90)
                      goto LABEL_521;
                    v4 = v91[v90];
                    if (v6 <= v4)
                      goto LABEL_525;
                    *(_DWORD *)(v92 + 4 * v4) = v14;
                    ++v90;
                  }
                  while (v87 != v90);
                }
              }
              ++v14;
            }
            while (v14 != v16);
            if (v288 && v292)
              (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v288 + 40))(v288, v292);
          }
          if (*(_QWORD *)&v299[1] && v300)
            (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)&v299[1] + 40))(*(_QWORD *)&v299[1], v300);
          *(_QWORD *)&v299[2] = 0;
          memset(v299, 0, 28);
          v292 = 0;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 0;
          v93 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
          v94 = v93;
          if (v93)
          {
            v15 = v279;
            if (v279 <= v93 - 1)
              goto LABEL_700;
            LODWORD(v95) = 0;
            v96 = v281;
            v97 = v93;
            do
            {
              v98 = *v96++;
              v95 = (v95 + v98);
              --v97;
            }
            while (v97);
          }
          else
          {
            v95 = 0;
          }
          if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
          {
            v14 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
            v5 = (*((unsigned int (**)(char **))*v12 + 2))(v12);
          }
          else
          {
            v5 = 0;
            v14 = 0;
          }
          re::DynamicArray<double>::resize((uint64_t)v299, v95);
          v15 = v94;
          re::DynamicArray<unsigned int>::resize(&v288, v94, &re::kInvalidMeshIndex);
          if (v94)
          {
            v17 = 0;
            v163 = 0;
            v16 = v279;
            v164 = v281;
            v6 = v290;
            v165 = v292;
            v7 = *(_QWORD *)&v299[1];
            v166 = *(_QWORD *)&v299[2];
            do
            {
              if (v16 == v17)
                goto LABEL_630;
              if (v164[v17])
              {
                if (v6 <= v17)
                  goto LABEL_657;
                v165[v17] = v163;
                if (v5 <= v17)
                  goto LABEL_661;
                v4 = v163;
                if (v7 <= v163)
                  goto LABEL_665;
                *(_QWORD *)(v166 + 8 * v163++) = *(_QWORD *)(v14 + 8 * v17);
              }
              ++v17;
            }
            while (v15 != v17);
            v14 = 0;
            v167 = v281;
            v5 = v284;
            v168 = v286;
            v17 = v290;
            v169 = v292;
            do
            {
              if (v16 == v14)
                goto LABEL_640;
              if (!v167[v14])
              {
                if (v5 <= v14)
                  goto LABEL_682;
                v6 = *(unsigned int *)(v168 + 4 * v14);
                if (v17 <= v6)
                  goto LABEL_686;
                if (v17 <= v14)
                  goto LABEL_690;
                v169[v14] = v169[v6];
              }
              ++v14;
            }
            while (v15 != v14);
          }
          v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v162);
          v15 = *(_QWORD *)&v299[1];
          v6 = *(_QWORD *)(v16 + 24);
          v14 = v6;
          *(_QWORD *)&v298[2] = 0;
          memset(v296, 0, sizeof(v296));
          re::DynamicArray<re::GeomCell4>::resize(v296, v6);
          if ((_DWORD)v6)
          {
            v170 = 0;
            v17 = *(_QWORD *)&v296[16];
            v171 = *(_QWORD *)&v298[2];
            v5 = *(_QWORD *)(v16 + 24);
            v172 = *(_QWORD *)(v16 + 40);
            v7 = v290;
            do
            {
              if (v170 == v17)
                goto LABEL_646;
              if (v170 == v5)
                goto LABEL_650;
              v173 = 0;
              *(_OWORD *)v301 = *(_OWORD *)(v172 + 16 * v170);
              v174 = v292;
              if (*(_DWORD *)&v301[12] == -1)
                v175 = 3;
              else
                v175 = 4;
              do
              {
                v4 = *(unsigned int *)&v301[4 * v173];
                if (v7 <= v4)
                  goto LABEL_455;
                *(_DWORD *)(v171 + 4 * v173++) = v174[v4];
              }
              while (v175 != v173);
              ++v170;
              v171 += 16;
            }
            while (v170 != v6);
          }
          if (*(_DWORD *)(v16 + 48))
            v176 = *(_BYTE *)(v16 + 60) == 0;
          else
            v176 = 1;
          if (v176 && *((_DWORD *)v9 + 10) == (_DWORD)v6)
          {
            re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t)v296);
LABEL_603:
            if (!(*((unsigned int (**)(char **))*v12 + 2))(v12))
              goto LABEL_705;
            v9 = (re *)re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v12, 0);
            if (!(*((unsigned int (**)(char **))*v12 + 2))(v12))
              goto LABEL_705;
LABEL_605:
            v256 = *(const void **)&v299[2];
            v257 = 8 * v15;
            goto LABEL_606;
          }
          *(_QWORD *)&v295[2] = 0;
          memset(v293, 0, sizeof(v293));
          re::DynamicArray<unsigned int>::resize(v293, v6, &re::kInvalidMeshIndex);
          v179 = *(unsigned __int8 *)(v16 + 60);
          if (v179 == 2)
          {
            re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v274, (uint64_t *)(v16 + 64));
            LOBYTE(v273) = 2;
            v229 = *(unsigned __int8 *)(v16 + 60);
            if (!*(_BYTE *)(v16 + 60))
            {
LABEL_508:
              v231 = *(_DWORD *)(v16 + 64);
              LOBYTE(v270) = 0;
              LODWORD(v271) = v231;
LABEL_599:
              while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v273, &v270) & 1) == 0)
              {
                v266 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v268) >> 32;
                v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v267);
                v4 = *(_QWORD *)&v293[16];
                if (*(_QWORD *)&v293[16] <= v14)
                  goto LABEL_695;
                *(_DWORD *)(*(_QWORD *)&v295[2] + 4 * v14) = v266;
                re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v273);
              }
              re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v270, v268);
              re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v273, v269);
              re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t *)v296, (uint64_t *)v293);
              if (*(_QWORD *)v293 && *(_QWORD *)&v295[2])
                (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v293 + 40))(*(_QWORD *)v293, *(_QWORD *)&v295[2]);
              goto LABEL_603;
            }
            if (v229 == 2)
            {
              LOBYTE(v270) = 2;
              v271 = v16 + 64;
              v272 = xmmword_2260E7ED0;
              goto LABEL_599;
            }
            if (v229 != 1)
              goto LABEL_715;
            v230 = *(_DWORD *)(v16 + 48);
          }
          else
          {
            if (v179 != 1)
            {
              if (*(_BYTE *)(v16 + 60))
                goto LABEL_710;
              LOBYTE(v273) = 0;
              LODWORD(v274) = 0;
              goto LABEL_508;
            }
            v230 = *(_DWORD *)(v16 + 48);
            if (v230)
            {
              v232 = *(uint64_t **)(v16 + 96);
              v233 = *(unsigned int *)(v16 + 52);
              v234 = *(_QWORD *)(v16 + 80);
              v235 = (char *)v232 + 4 * v234;
              LOBYTE(v273) = 1;
              if (v232)
              {
                v236 = (char *)v232 + 4 * v233;
                if (v234 != v233)
                {
                  v236 -= 4;
                  v237 = 4 * v234 - 4 * v233;
                  do
                  {
                    v239 = *((_DWORD *)v236 + 1);
                    v236 += 4;
                    v238 = v239;
                    if (!v237)
                      break;
                    v237 -= 4;
                  }
                  while (v238 == -1);
                }
              }
              else
              {
                v236 = 0;
              }
              v274 = v232;
              v275 = v236;
              v276 = v235;
            }
            else
            {
              LOBYTE(v273) = 1;
              v275 = 0;
              v276 = 0;
              v274 = 0;
            }
          }
          if (v230)
          {
            v264 = *(_QWORD *)(v16 + 96);
            v265 = v264 + 4 * *(_QWORD *)(v16 + 80);
            LOBYTE(v270) = 1;
            v271 = v264;
            *(_QWORD *)&v272 = v265;
            *((_QWORD *)&v272 + 1) = v265;
          }
          else
          {
            LOBYTE(v270) = 1;
            v272 = 0uLL;
            v271 = 0;
          }
          goto LABEL_599;
        }
      }
      v288 = 0;
      v309 = 0u;
      v310 = 0u;
      v307 = 0u;
      v308 = 0u;
      v306 = 0u;
      v12 = (char **)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v299[0]) = 136315906;
      *(_QWORD *)((char *)v299 + 4) = "operator[]";
      WORD6(v299[0]) = 1024;
      *(_DWORD *)((char *)v299 + 14) = 601;
      WORD1(v299[1]) = 2048;
      *(_QWORD *)((char *)&v299[1] + 4) = 0;
      WORD6(v299[1]) = 2048;
      *(_QWORD *)((char *)&v299[1] + 14) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_22:
      result = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if (!(_DWORD)result)
        return result;
      v286 = 0;
      v283 = 0;
      v284 = 0;
      v281 = 0;
      v282 = 0;
      v285 = 0;
      v278 = 0;
      v279 = 0;
      v277 = 0;
      v280 = 0;
      v14 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      if ((_DWORD)v14)
      {
        if (!(*((unsigned int (**)(char **))*v12 + 2))(v12)
          || (v15 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0),
              !(*((unsigned int (**)(char **))*v12 + 2))(v12)))
        {
          v288 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          v12 = (char **)MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v299[0]) = 136315906;
          *(_QWORD *)((char *)v299 + 4) = "operator[]";
          WORD6(v299[0]) = 1024;
          *(_DWORD *)((char *)v299 + 14) = 601;
          WORD1(v299[1]) = 2048;
          *(_QWORD *)((char *)&v299[1] + 4) = 0;
          WORD6(v299[1]) = 2048;
          *(_QWORD *)((char *)&v299[1] + 14) = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_27:
          v15 = 0;
LABEL_28:
          v300 = 0;
          v16 = v14;
          *((_QWORD *)&v299[0] + 1) = v14;
          memset(&v299[1], 0, 28);
          *(_QWORD *)&v299[0] = v15;
          v292 = 0;
          v289 = 0;
          v290 = 0;
          v288 = 0;
          v291 = 0;
          re::DynamicArray<float>::resize((uint64_t)&v288, v14);
          if (!(_DWORD)v14)
          {
            *(_QWORD *)&v299[2] = 0;
            goto LABEL_171;
          }
          v5 = 0;
          v17 = v290;
          v18 = v292;
          while (v17 > v5)
          {
            v18[v5] = v5;
            if ((_DWORD)v14 == (_DWORD)++v5)
            {
              v19 = 0;
              *(_QWORD *)&v299[2] = 0;
              ++DWORD2(v299[2]);
              if (*((_QWORD *)&v299[1] + 1) < (unint64_t)v14)
              {
                re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(&v299[1], v14);
                v19 = *(_QWORD *)&v299[2];
              }
              if (v19 < v14)
              {
                v20 = &v300[3 * v19];
                v21 = (char *)&v300[3 * v14] - (char *)v20;
                if (v21 >= 1)
                {
                  v22 = v21 / 0x18uLL + 1;
                  do
                  {
                    *v20 = 0;
                    v20[1] = 0;
                    *((_DWORD *)v20 + 4) = -1;
                    *((_BYTE *)v20 + 20) = 0;
                    --v22;
                    v20 += 3;
                  }
                  while (v22 > 1);
                }
              }
              *(_QWORD *)&v299[2] = v14;
LABEL_171:
              ++DWORD2(v299[2]);
              if (*((_QWORD *)&v299[0] + 1))
              {
                LODWORD(v306) = 0;
                re::internal::GeomKDTree<float>::buildHelper((uint64_t *)v299, 0, v14, (uint64_t)&v288, &v306);
              }
              if (v288 && v292)
                (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v288 + 40))(v288, v292);
              v284 = 0;
              ++v285;
              v279 = 0;
              ++v280;
              re::DynamicArray<unsigned int>::resize(&v282, v14, &re::kInvalidMeshIndex);
              LOBYTE(v306) = 0;
              re::DynamicArray<unsigned char>::resize(&v277, v14, &v306);
              v292 = 0;
              v289 = 0;
              v290 = 0;
              v288 = 0;
              v291 = 0;
              if ((_DWORD)v14)
              {
                v14 = 0;
                v17 = 1;
                while (1)
                {
                  v4 = v284;
                  if (v284 <= v14)
                    goto LABEL_635;
                  if (*(_DWORD *)(v286 + 4 * v14) == -1)
                  {
                    v290 = 0;
                    v291 += 2;
                    v75 = *(_QWORD *)&v299[2];
                    if (*(_QWORD *)&v299[2]
                      && (re::internal::GeomKDTree<float>::findWithinRadiusHelper((uint64_t)v299, v300, (float *)(v15 + 4 * v14), &v288, a4), v75 = v290, (_DWORD)v290))
                    {
                      v76 = 0;
                      v77 = *v292;
                    }
                    else
                    {
                      v76 = 1;
                      v77 = v14;
                    }
                    v4 = v284;
                    if (v284 <= v14)
                      goto LABEL_673;
                    *(_DWORD *)(v286 + 4 * v14) = v77;
                    v4 = v279;
                    if (v279 <= v14)
                      goto LABEL_677;
                    v281[v14] = 1;
                    if ((v76 & 1) == 0)
                      break;
                  }
LABEL_191:
                  if (++v14 == v16)
                  {
                    if (v288 && v292)
                      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v288 + 40))(v288, v292);
                    goto LABEL_195;
                  }
                }
                v78 = 0;
                v5 = v290;
                v79 = v292;
                v6 = v284;
                v80 = v286;
                while (v5 != v78)
                {
                  v4 = v79[v78];
                  if (v6 <= v4)
                    goto LABEL_524;
                  *(_DWORD *)(v80 + 4 * v4) = v14;
                  if (v75 == ++v78)
                    goto LABEL_191;
                }
LABEL_520:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v5;
                v297 = 2048;
                *(_QWORD *)v298 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_521:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v5;
                v297 = 2048;
                *(_QWORD *)v298 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_522:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v4;
                v297 = 2048;
                *(_QWORD *)v298 = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_523:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v4;
                v297 = 2048;
                *(_QWORD *)v298 = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_524:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v4;
                v297 = 2048;
                *(_QWORD *)v298 = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_525:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                v12 = (char **)MEMORY[0x24BDACB70];
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v4;
                v297 = 2048;
                *(_QWORD *)v298 = v6;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_526:
                LOBYTE(v273) = 1;
                v275 = 0;
                v276 = 0;
                v274 = 0;
                goto LABEL_538;
              }
LABEL_195:
              if (*(_QWORD *)&v299[1] && v300)
                (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)&v299[1] + 40))(*(_QWORD *)&v299[1], v300);
              *(_QWORD *)&v299[2] = 0;
              memset(v299, 0, 28);
              v292 = 0;
              v289 = 0;
              v290 = 0;
              v288 = 0;
              v291 = 0;
              v81 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
              v82 = v81;
              if (v81)
              {
                v15 = v279;
                if (v279 > v81 - 1)
                {
                  LODWORD(v83) = 0;
                  v84 = v281;
                  v85 = v81;
                  do
                  {
                    v86 = *v84++;
                    v83 = (v83 + v86);
                    --v85;
                  }
                  while (v85);
                  goto LABEL_286;
                }
LABEL_699:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 797;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v15;
                v297 = 2048;
                *(_QWORD *)v298 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_700:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 797;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v15;
                v297 = 2048;
                *(_QWORD *)v298 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              v83 = 0;
LABEL_286:
              if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
              {
                v14 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v12, 0);
                v5 = (*((unsigned int (**)(char **))*v12 + 2))(v12);
              }
              else
              {
                v5 = 0;
                v14 = 0;
              }
              re::DynamicArray<float>::resize((uint64_t)v299, v83);
              v15 = v82;
              re::DynamicArray<unsigned int>::resize(&v288, v82, &re::kInvalidMeshIndex);
              if (v82)
              {
                v17 = 0;
                v145 = 0;
                v16 = v279;
                v146 = v281;
                v6 = v290;
                v147 = v292;
                v7 = *(_QWORD *)&v299[1];
                v148 = *(_QWORD *)&v299[2];
                do
                {
                  if (v16 == v17)
                    goto LABEL_629;
                  if (v146[v17])
                  {
                    if (v6 <= v17)
                      goto LABEL_656;
                    v147[v17] = v145;
                    if (v5 <= v17)
                      goto LABEL_660;
                    v4 = v145;
                    if (v7 <= v145)
                      goto LABEL_664;
                    *(_DWORD *)(v148 + 4 * v145++) = *(_DWORD *)(v14 + 4 * v17);
                  }
                  ++v17;
                }
                while (v15 != v17);
                v14 = 0;
                v149 = v281;
                v5 = v284;
                v150 = v286;
                v17 = v290;
                v151 = v292;
                while (v16 != v14)
                {
                  if (!v149[v14])
                  {
                    if (v5 <= v14)
                      goto LABEL_681;
                    v6 = *(unsigned int *)(v150 + 4 * v14);
                    if (v17 <= v6)
                      goto LABEL_685;
                    if (v17 <= v14)
                      goto LABEL_689;
                    v151[v14] = v151[v6];
                  }
                  if (v15 == ++v14)
                    goto LABEL_387;
                }
LABEL_639:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 797;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v16;
                v297 = 2048;
                *(_QWORD *)v298 = v16;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_640:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 797;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v16;
                v297 = 2048;
                *(_QWORD *)v298 = v16;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_641:
                *(_QWORD *)v301 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v293 = 136315906;
                *(_QWORD *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 789;
                *(_WORD *)&v293[18] = 2048;
                *(_QWORD *)&v293[20] = v17;
                v294 = 2048;
                *(_QWORD *)v295 = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_642;
              }
LABEL_387:
              v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v144);
              v15 = *(_QWORD *)&v299[1];
              v6 = *(_QWORD *)(v16 + 24);
              v14 = v6;
              *(_QWORD *)&v298[2] = 0;
              memset(v296, 0, sizeof(v296));
              re::DynamicArray<re::GeomCell4>::resize(v296, v6);
              if ((_DWORD)v6)
              {
                v152 = 0;
                v17 = *(_QWORD *)&v296[16];
                v153 = *(_QWORD *)&v298[2];
                v5 = *(_QWORD *)(v16 + 24);
                v154 = *(_QWORD *)(v16 + 40);
                v7 = v290;
                while (v152 != v17)
                {
                  if (v152 == v5)
                    goto LABEL_649;
                  v155 = 0;
                  *(_OWORD *)v301 = *(_OWORD *)(v154 + 16 * v152);
                  v156 = v292;
                  if (*(_DWORD *)&v301[12] == -1)
                    v157 = 3;
                  else
                    v157 = 4;
                  do
                  {
                    v4 = *(unsigned int *)&v301[4 * v155];
                    if (v7 <= v4)
                      goto LABEL_454;
                    *(_DWORD *)(v153 + 4 * v155++) = v156[v4];
                  }
                  while (v157 != v155);
                  ++v152;
                  v153 += 16;
                  if (v152 == v6)
                    goto LABEL_397;
                }
LABEL_645:
                *(_QWORD *)v301 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v293 = 136315906;
                *(_QWORD *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 789;
                *(_WORD *)&v293[18] = 2048;
                *(_QWORD *)&v293[20] = v17;
                v294 = 2048;
                *(_QWORD *)v295 = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_646:
                *(_QWORD *)v301 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v293 = 136315906;
                *(_QWORD *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 789;
                *(_WORD *)&v293[18] = 2048;
                *(_QWORD *)&v293[20] = v17;
                v294 = 2048;
                *(_QWORD *)v295 = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_647:
                *(_QWORD *)v301 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v293 = 136315906;
                *(_QWORD *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 797;
                *(_WORD *)&v293[18] = 2048;
                *(_QWORD *)&v293[20] = v5;
                v294 = 2048;
                *(_QWORD *)v295 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_648:
                *(_QWORD *)v301 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v293 = 136315906;
                *(_QWORD *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 797;
                *(_WORD *)&v293[18] = 2048;
                *(_QWORD *)&v293[20] = v5;
                v294 = 2048;
                *(_QWORD *)v295 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_649:
                *(_QWORD *)v301 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v293 = 136315906;
                *(_QWORD *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 797;
                *(_WORD *)&v293[18] = 2048;
                *(_QWORD *)&v293[20] = v5;
                v294 = 2048;
                *(_QWORD *)v295 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_650:
                *(_QWORD *)v301 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v293 = 136315906;
                *(_QWORD *)&v293[4] = "operator[]";
                *(_WORD *)&v293[12] = 1024;
                *(_DWORD *)&v293[14] = 797;
                *(_WORD *)&v293[18] = 2048;
                *(_QWORD *)&v293[20] = v5;
                v294 = 2048;
                *(_QWORD *)v295 = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_651:
                *(_QWORD *)v293 = 0;
                v309 = 0u;
                v310 = 0u;
                v307 = 0u;
                v308 = 0u;
                v306 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v296 = 136315906;
                *(_QWORD *)&v296[4] = "operator[]";
                *(_WORD *)&v296[12] = 1024;
                *(_DWORD *)&v296[14] = 789;
                *(_WORD *)&v296[18] = 2048;
                *(_QWORD *)&v296[20] = v16;
                v297 = 2048;
                *(_QWORD *)v298 = v4;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_652;
              }
LABEL_397:
              if (*(_DWORD *)(v16 + 48))
                v158 = *(_BYTE *)(v16 + 60) == 0;
              else
                v158 = 1;
              if (v158 && *((_DWORD *)v9 + 10) == (_DWORD)v6)
              {
                re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t)v296);
              }
              else
              {
                *(_QWORD *)&v295[2] = 0;
                memset(v293, 0, sizeof(v293));
                re::DynamicArray<unsigned int>::resize(v293, v6, &re::kInvalidMeshIndex);
                v161 = *(unsigned __int8 *)(v16 + 60);
                if (v161 == 2)
                {
                  re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v274, (uint64_t *)(v16 + 64));
                  LOBYTE(v273) = 2;
                  v217 = *(unsigned __int8 *)(v16 + 60);
                  if (!*(_BYTE *)(v16 + 60))
                    goto LABEL_496;
                  if (v217 == 2)
                  {
                    LOBYTE(v270) = 2;
                    v271 = v16 + 64;
                    v272 = xmmword_2260E7ED0;
                    goto LABEL_585;
                  }
                  if (v217 != 1)
                    goto LABEL_714;
                  v218 = *(_DWORD *)(v16 + 48);
                }
                else
                {
                  if (v161 != 1)
                  {
                    if (!*(_BYTE *)(v16 + 60))
                    {
                      LOBYTE(v273) = 0;
                      LODWORD(v274) = 0;
LABEL_496:
                      v219 = *(_DWORD *)(v16 + 64);
                      LOBYTE(v270) = 0;
                      LODWORD(v271) = v219;
                      goto LABEL_585;
                    }
LABEL_709:
                    re::internal::assertLog((re::internal *)4, v160, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
                    _os_crash();
                    __break(1u);
LABEL_710:
                    re::internal::assertLog((re::internal *)4, v178, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
                    _os_crash();
                    __break(1u);
LABEL_711:
                    re::internal::assertLog((re::internal *)4, v180, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
                    _os_crash();
                    __break(1u);
LABEL_712:
                    re::internal::assertLog((re::internal *)4, v192, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
                    _os_crash();
                    __break(1u);
LABEL_713:
                    re::internal::assertLog((re::internal *)4, v204, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
                    _os_crash();
                    __break(1u);
LABEL_714:
                    re::internal::assertLog((re::internal *)4, v216, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
                    _os_crash();
                    __break(1u);
LABEL_715:
                    re::internal::assertLog((re::internal *)4, v228, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
                    _os_crash();
                    __break(1u);
                    JUMPOUT(0x22587E160);
                  }
                  v218 = *(_DWORD *)(v16 + 48);
                  if (v218)
                  {
                    v220 = *(uint64_t **)(v16 + 96);
                    v221 = *(unsigned int *)(v16 + 52);
                    v222 = *(_QWORD *)(v16 + 80);
                    v223 = (char *)v220 + 4 * v222;
                    LOBYTE(v273) = 1;
                    if (v220)
                    {
                      v224 = (char *)v220 + 4 * v221;
                      if (v222 != v221)
                      {
                        v224 -= 4;
                        v225 = 4 * v222 - 4 * v221;
                        do
                        {
                          v227 = *((_DWORD *)v224 + 1);
                          v224 += 4;
                          v226 = v227;
                          if (!v225)
                            break;
                          v225 -= 4;
                        }
                        while (v226 == -1);
                      }
                    }
                    else
                    {
                      v224 = 0;
                    }
                    v274 = v220;
                    v275 = v224;
                    v276 = v223;
                  }
                  else
                  {
                    LOBYTE(v273) = 1;
                    v275 = 0;
                    v276 = 0;
                    v274 = 0;
                  }
                }
                if (v218)
                {
                  v258 = *(_QWORD *)(v16 + 96);
                  v259 = v258 + 4 * *(_QWORD *)(v16 + 80);
                  LOBYTE(v270) = 1;
                  v271 = v258;
                  *(_QWORD *)&v272 = v259;
                  *((_QWORD *)&v272 + 1) = v259;
                }
                else
                {
                  LOBYTE(v270) = 1;
                  v272 = 0uLL;
                  v271 = 0;
                }
LABEL_585:
                while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v273, &v270) & 1) == 0)
                {
                  v260 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v262) >> 32;
                  v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v261);
                  v4 = *(_QWORD *)&v293[16];
                  if (*(_QWORD *)&v293[16] <= v14)
                    goto LABEL_694;
                  *(_DWORD *)(*(_QWORD *)&v295[2] + 4 * v14) = v260;
                  re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v273);
                }
                re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v270, v262);
                re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v273, v263);
                re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t *)v296, (uint64_t *)v293);
                if (*(_QWORD *)v293 && *(_QWORD *)&v295[2])
                  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v293 + 40))(*(_QWORD *)v293, *(_QWORD *)&v295[2]);
              }
              if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
              {
                v9 = (re *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v12, 0);
                if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
                {
                  v256 = *(const void **)&v299[2];
                  v257 = 4 * v15;
                  goto LABEL_606;
                }
              }
LABEL_704:
              *(_QWORD *)v301 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v293 = 136315906;
              *(_QWORD *)&v293[4] = "operator[]";
              *(_WORD *)&v293[12] = 1024;
              *(_DWORD *)&v293[14] = 609;
              *(_WORD *)&v293[18] = 2048;
              *(_QWORD *)&v293[20] = 0;
              v294 = 2048;
              *(_QWORD *)v295 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_705:
              *(_QWORD *)v301 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v293 = 136315906;
              *(_QWORD *)&v293[4] = "operator[]";
              *(_WORD *)&v293[12] = 1024;
              *(_DWORD *)&v293[14] = 609;
              *(_WORD *)&v293[18] = 2048;
              *(_QWORD *)&v293[20] = 0;
              v294 = 2048;
              *(_QWORD *)v295 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_706:
              re::internal::assertLog((re::internal *)4, v112, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699, v270, v271, v272, v273, v274, v275, v276);
              _os_crash();
              __break(1u);
LABEL_707:
              re::internal::assertLog((re::internal *)4, v127, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
              _os_crash();
              __break(1u);
LABEL_708:
              re::internal::assertLog((re::internal *)4, v142, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
              _os_crash();
              __break(1u);
              goto LABEL_709;
            }
          }
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v5;
          v297 = 2048;
          *(_QWORD *)v298 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_623:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v5;
          v297 = 2048;
          *(_QWORD *)v298 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_624:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v5;
          v297 = 2048;
          *(_QWORD *)v298 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_625:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v5;
          v297 = 2048;
          *(_QWORD *)v298 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_626:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v16;
          v297 = 2048;
          *(_QWORD *)v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_627:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v16;
          v297 = 2048;
          *(_QWORD *)v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_628:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v16;
          v297 = 2048;
          *(_QWORD *)v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_629:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v16;
          v297 = 2048;
          *(_QWORD *)v298 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_630:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v16;
          v297 = 2048;
          *(_QWORD *)v298 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_631:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v14;
          v297 = 2048;
          *(_QWORD *)v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_632:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 797;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v17;
          v297 = 2048;
          *(_QWORD *)v298 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_633:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v14;
          v297 = 2048;
          *(_QWORD *)v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_634:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v14;
          v297 = 2048;
          *(_QWORD *)v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_635:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v14;
          v297 = 2048;
          *(_QWORD *)v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_636:
          *(_QWORD *)v293 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v296 = 136315906;
          *(_QWORD *)&v296[4] = "operator[]";
          *(_WORD *)&v296[12] = 1024;
          *(_DWORD *)&v296[14] = 789;
          *(_WORD *)&v296[18] = 2048;
          *(_QWORD *)&v296[20] = v14;
          v297 = 2048;
          *(_QWORD *)v298 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_637;
        }
      }
      else
      {
        v15 = 0;
      }
      v300 = 0;
      memset(v299, 0, 44);
      v16 = v14;
      if ((re::internal::GeomKDTree<re::Vector3<float>>::build((uint64_t)v299, v14, v15) & 1) == 0)
      {
LABEL_702:
        re::internal::assertLog((re::internal *)4, v38, "assertion failure: '%s' (%s:line %i) k-d tree failed to build.", "!\"Unreachable code\"", "computeRepresentativeValuesAndReducedIndicesContinuous", 245);
        _os_crash();
        __break(1u);
        goto LABEL_703;
      }
      v284 = 0;
      ++v285;
      v279 = 0;
      ++v280;
      re::DynamicArray<unsigned int>::resize(&v282, v14, &re::kInvalidMeshIndex);
      LOBYTE(v306) = 0;
      re::DynamicArray<unsigned char>::resize(&v277, v14, &v306);
      v292 = 0;
      v289 = 0;
      v290 = 0;
      v288 = 0;
      v291 = 0;
      if (!(_DWORD)v14)
        goto LABEL_96;
      v14 = 0;
      v17 = 1;
      do
      {
        v4 = v284;
        if (v284 <= v14)
          goto LABEL_631;
        if (*(_DWORD *)(v286 + 4 * v14) == -1)
        {
          v290 = 0;
          v291 += 2;
          v39 = *(_QWORD *)&v299[2];
          if (*(_QWORD *)&v299[2]
            && (re::internal::GeomKDTree<re::Vector3<float>>::findWithinRadiusHelper((uint64_t)v299, v300, (float32x4_t *)(v15 + 16 * v14), &v288, a4), v39 = v290, (_DWORD)v290))
          {
            v40 = 0;
            v41 = *v292;
          }
          else
          {
            v40 = 1;
            v41 = v14;
          }
          v4 = v284;
          if (v284 <= v14)
            goto LABEL_666;
          *(_DWORD *)(v286 + 4 * v14) = v41;
          v4 = v279;
          if (v279 <= v14)
          {
LABEL_667:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_668:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v16;
            v297 = 2048;
            *(_QWORD *)v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_669:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v6;
            v297 = 2048;
            *(_QWORD *)v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_670:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v16;
            v297 = 2048;
            *(_QWORD *)v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_671:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_672:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_673:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_674:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_675:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_676:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_677:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_678:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_679:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v16;
            v297 = 2048;
            *(_QWORD *)v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_680:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v16;
            v297 = 2048;
            *(_QWORD *)v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_681:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_682:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_683:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v6;
            v297 = 2048;
            *(_QWORD *)v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_684:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v6;
            v297 = 2048;
            *(_QWORD *)v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_685:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v6;
            v297 = 2048;
            *(_QWORD *)v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_686:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v6;
            v297 = 2048;
            *(_QWORD *)v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_687:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v16;
            v297 = 2048;
            *(_QWORD *)v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_688:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v16;
            v297 = 2048;
            *(_QWORD *)v298 = v14;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_689:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_690:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v14;
            v297 = 2048;
            *(_QWORD *)v298 = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_691:
            v287 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v301 = 136315906;
            *(_QWORD *)&v301[4] = "operator[]";
            *(_WORD *)&v301[12] = 1024;
            *(_DWORD *)&v301[14] = 789;
            v302 = 2048;
            v303 = v14;
            v304 = 2048;
            v305 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_692:
            v287 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v301 = 136315906;
            *(_QWORD *)&v301[4] = "operator[]";
            *(_WORD *)&v301[12] = 1024;
            *(_DWORD *)&v301[14] = 789;
            v302 = 2048;
            v303 = v14;
            v304 = 2048;
            v305 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_693:
            v287 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v301 = 136315906;
            *(_QWORD *)&v301[4] = "operator[]";
            *(_WORD *)&v301[12] = 1024;
            *(_DWORD *)&v301[14] = 789;
            v302 = 2048;
            v303 = v14;
            v304 = 2048;
            v305 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_694:
            v287 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v301 = 136315906;
            *(_QWORD *)&v301[4] = "operator[]";
            *(_WORD *)&v301[12] = 1024;
            *(_DWORD *)&v301[14] = 789;
            v302 = 2048;
            v303 = v14;
            v304 = 2048;
            v305 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_695:
            v287 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v301 = 136315906;
            *(_QWORD *)&v301[4] = "operator[]";
            *(_WORD *)&v301[12] = 1024;
            *(_DWORD *)&v301[14] = 789;
            v302 = 2048;
            v303 = v14;
            v304 = 2048;
            v305 = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_696:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v15;
            v297 = 2048;
            *(_QWORD *)v298 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_697:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v15;
            v297 = 2048;
            *(_QWORD *)v298 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_698:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 797;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v15;
            v297 = 2048;
            *(_QWORD *)v298 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_699;
          }
          v281[v14] = 1;
          if ((v40 & 1) == 0)
          {
            v42 = 0;
            v5 = v290;
            v43 = v292;
            v6 = v284;
            v44 = v286;
            while (v5 != v42)
            {
              v4 = v43[v42];
              if (v6 <= v4)
                goto LABEL_517;
              *(_DWORD *)(v44 + 4 * v4) = v14;
              if (v39 == ++v42)
                goto LABEL_92;
            }
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v5;
            v297 = 2048;
            *(_QWORD *)v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_517:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v4;
            v297 = 2048;
            *(_QWORD *)v298 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_518:
            *(_QWORD *)v293 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v296 = 136315906;
            *(_QWORD *)&v296[4] = "operator[]";
            *(_WORD *)&v296[12] = 1024;
            *(_DWORD *)&v296[14] = 789;
            *(_WORD *)&v296[18] = 2048;
            *(_QWORD *)&v296[20] = v5;
            v297 = 2048;
            *(_QWORD *)v298 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_519;
          }
        }
LABEL_92:
        ++v14;
      }
      while (v14 != v16);
      if (v288 && v292)
        (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v288 + 40))(v288, v292);
LABEL_96:
      if (*(_QWORD *)&v299[1] && v300)
        (*(void (**)(_QWORD, uint64_t **))(**(_QWORD **)&v299[1] + 40))(*(_QWORD *)&v299[1], v300);
      *(_QWORD *)&v299[2] = 0;
      memset(v299, 0, 28);
      v292 = 0;
      v289 = 0;
      v290 = 0;
      v288 = 0;
      v291 = 0;
      v45 = (*((uint64_t (**)(char **))*v12 + 2))(v12);
      v46 = v45;
      if (v45)
      {
        v15 = v279;
        if (v279 <= v45 - 1)
          goto LABEL_696;
        LODWORD(v47) = 0;
        v48 = v281;
        v49 = v45;
        do
        {
          v50 = *v48++;
          v47 = (v47 + v50);
          --v49;
        }
        while (v49);
      }
      else
      {
        v47 = 0;
      }
      if ((*((unsigned int (**)(char **))*v12 + 2))(v12))
      {
        v14 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0);
        v17 = (*((unsigned int (**)(char **))*v12 + 2))(v12);
      }
      else
      {
        v17 = 0;
        v14 = 0;
      }
      re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v299, v47);
      v15 = v46;
      re::DynamicArray<unsigned int>::resize(&v288, v46, &re::kInvalidMeshIndex);
      if (v46)
      {
        v16 = 0;
        v100 = 0;
        do
        {
          v4 = v279;
          if (v279 <= v16)
            goto LABEL_626;
          if (v281[v16])
          {
            v4 = v290;
            if (v290 <= v16)
              goto LABEL_651;
            v292[v16] = v100;
            if (v17 <= v16)
            {
LABEL_652:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 601;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v16;
              v297 = 2048;
              *(_QWORD *)v298 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_653:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v5;
              v297 = 2048;
              *(_QWORD *)v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_654:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v16;
              v297 = 2048;
              *(_QWORD *)v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_655:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v16;
              v297 = 2048;
              *(_QWORD *)v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_656:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v17;
              v297 = 2048;
              *(_QWORD *)v298 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_657:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v17;
              v297 = 2048;
              *(_QWORD *)v298 = v6;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_658:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 601;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v16;
              v297 = 2048;
              *(_QWORD *)v298 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_659:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 601;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v16;
              v297 = 2048;
              *(_QWORD *)v298 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_660:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 601;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v17;
              v297 = 2048;
              *(_QWORD *)v298 = v5;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_661:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 601;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v17;
              v297 = 2048;
              *(_QWORD *)v298 = v5;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_662:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v5;
              v297 = 2048;
              *(_QWORD *)v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_663:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v5;
              v297 = 2048;
              *(_QWORD *)v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_664:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v4;
              v297 = 2048;
              *(_QWORD *)v298 = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_665:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v4;
              v297 = 2048;
              *(_QWORD *)v298 = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_666:
              *(_QWORD *)v293 = 0;
              v309 = 0u;
              v310 = 0u;
              v307 = 0u;
              v308 = 0u;
              v306 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v296 = 136315906;
              *(_QWORD *)&v296[4] = "operator[]";
              *(_WORD *)&v296[12] = 1024;
              *(_DWORD *)&v296[14] = 789;
              *(_WORD *)&v296[18] = 2048;
              *(_QWORD *)&v296[20] = v14;
              v297 = 2048;
              *(_QWORD *)v298 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_667;
            }
            v5 = v100;
            v4 = *(_QWORD *)&v299[1];
            if (*(_QWORD *)&v299[1] <= (unint64_t)v100)
              goto LABEL_653;
            *(_OWORD *)(*(_QWORD *)&v299[2] + 16 * v100++) = *(_OWORD *)v14;
          }
          ++v16;
          v14 += 16;
        }
        while (v15 != v16);
        v16 = 0;
        v17 = v279;
        v101 = v281;
        v5 = v284;
        v102 = v286;
        v14 = v290;
        v103 = v292;
        while (v17 != v16)
        {
          if (!v101[v16])
          {
            if (v5 <= v16)
              goto LABEL_668;
            v6 = *(unsigned int *)(v102 + 4 * v16);
            if (v14 <= v6)
              goto LABEL_669;
            if (v14 <= v16)
              goto LABEL_670;
            v103[v16] = v103[v6];
          }
          if (v15 == ++v16)
            goto LABEL_257;
        }
        goto LABEL_632;
      }
LABEL_257:
      v16 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v12, v99);
      v15 = *(_QWORD *)&v299[1];
      v6 = *(_QWORD *)(v16 + 24);
      v14 = v6;
      *(_QWORD *)&v298[2] = 0;
      memset(v296, 0, sizeof(v296));
      re::DynamicArray<re::GeomCell4>::resize(v296, v6);
      if (!(_DWORD)v6)
        goto LABEL_267;
      v104 = 0;
      v17 = *(_QWORD *)&v296[16];
      v105 = *(_QWORD *)&v298[2];
      v5 = *(_QWORD *)(v16 + 24);
      v106 = *(_QWORD *)(v16 + 40);
      v7 = v290;
      while (2)
      {
        if (v104 == v17)
          goto LABEL_641;
        if (v104 == v5)
        {
LABEL_642:
          *(_QWORD *)v301 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v293 = 136315906;
          *(_QWORD *)&v293[4] = "operator[]";
          *(_WORD *)&v293[12] = 1024;
          *(_DWORD *)&v293[14] = 797;
          *(_WORD *)&v293[18] = 2048;
          *(_QWORD *)&v293[20] = v5;
          v294 = 2048;
          *(_QWORD *)v295 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_643:
          *(_QWORD *)v301 = 0;
          v309 = 0u;
          v310 = 0u;
          v307 = 0u;
          v308 = 0u;
          v306 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v293 = 136315906;
          *(_QWORD *)&v293[4] = "operator[]";
          *(_WORD *)&v293[12] = 1024;
          *(_DWORD *)&v293[14] = 789;
          *(_WORD *)&v293[18] = 2048;
          *(_QWORD *)&v293[20] = v17;
          v294 = 2048;
          *(_QWORD *)v295 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_644;
        }
        v107 = 0;
        *(_OWORD *)v301 = *(_OWORD *)(v106 + 16 * v104);
        v108 = v292;
        if (*(_DWORD *)&v301[12] == -1)
          v109 = 3;
        else
          v109 = 4;
        while (2)
        {
          v4 = *(unsigned int *)&v301[4 * v107];
          if (v7 <= v4)
          {
            v273 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v293 = 136315906;
            *(_QWORD *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(_QWORD *)&v293[20] = v4;
            v294 = 2048;
            *(_QWORD *)v295 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_452:
            v273 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v293 = 136315906;
            *(_QWORD *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(_QWORD *)&v293[20] = v4;
            v294 = 2048;
            *(_QWORD *)v295 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_453:
            v273 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v293 = 136315906;
            *(_QWORD *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(_QWORD *)&v293[20] = v4;
            v294 = 2048;
            *(_QWORD *)v295 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_454:
            v273 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v293 = 136315906;
            *(_QWORD *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(_QWORD *)&v293[20] = v4;
            v294 = 2048;
            *(_QWORD *)v295 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_455:
            v273 = 0;
            v309 = 0u;
            v310 = 0u;
            v307 = 0u;
            v308 = 0u;
            v306 = 0u;
            v12 = (char **)MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v293 = 136315906;
            *(_QWORD *)&v293[4] = "operator[]";
            *(_WORD *)&v293[12] = 1024;
            *(_DWORD *)&v293[14] = 789;
            *(_WORD *)&v293[18] = 2048;
            *(_QWORD *)&v293[20] = v4;
            v294 = 2048;
            *(_QWORD *)v295 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_456:
            re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v274, (uint64_t *)(v16 + 64));
            LOBYTE(v273) = 2;
            v181 = *(unsigned __int8 *)(v16 + 60);
            if (*(_BYTE *)(v16 + 60))
            {
              if (v181 == 2)
              {
                LOBYTE(v270) = 2;
                v271 = v16 + 64;
                v272 = xmmword_2260E7ED0;
                goto LABEL_543;
              }
              if (v181 == 1)
              {
                v182 = *(_DWORD *)(v16 + 48);
                goto LABEL_538;
              }
              goto LABEL_711;
            }
            goto LABEL_460;
          }
          *(_DWORD *)(v105 + 4 * v107++) = v108[v4];
          if (v109 != v107)
            continue;
          break;
        }
        ++v104;
        v105 += 16;
        if (v104 != v6)
          continue;
        break;
      }
LABEL_267:
      if (*(_DWORD *)(v16 + 48))
        v110 = *(_BYTE *)(v16 + 60) == 0;
      else
        v110 = 1;
      if (v110 && *((_DWORD *)v9 + 10) == (_DWORD)v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t)v296);
        goto LABEL_547;
      }
      *(_QWORD *)&v295[2] = 0;
      memset(v293, 0, sizeof(v293));
      re::DynamicArray<unsigned int>::resize(v293, v6, &re::kInvalidMeshIndex);
      v113 = *(unsigned __int8 *)(v16 + 60);
      if (v113 == 2)
        goto LABEL_456;
      if (v113 != 1)
      {
        if (*(_BYTE *)(v16 + 60))
          goto LABEL_706;
        LOBYTE(v273) = 0;
        LODWORD(v274) = 0;
LABEL_460:
        v183 = *(_DWORD *)(v16 + 64);
        LOBYTE(v270) = 0;
        LODWORD(v271) = v183;
        goto LABEL_543;
      }
      v182 = *(_DWORD *)(v16 + 48);
      if (!v182)
        goto LABEL_526;
      v184 = *(uint64_t **)(v16 + 96);
      v185 = *(unsigned int *)(v16 + 52);
      v186 = *(_QWORD *)(v16 + 80);
      v187 = (char *)v184 + 4 * v186;
      LOBYTE(v273) = 1;
      if (v184)
      {
        v188 = (char *)v184 + 4 * v185;
        if (v186 != v185)
        {
          v188 -= 4;
          v189 = 4 * v186 - 4 * v185;
          do
          {
            v191 = *((_DWORD *)v188 + 1);
            v188 += 4;
            v190 = v191;
            if (!v189)
              break;
            v189 -= 4;
          }
          while (v190 == -1);
        }
      }
      else
      {
        v188 = 0;
      }
      v274 = v184;
      v275 = v188;
      v276 = v187;
LABEL_538:
      if (v182)
      {
        v240 = *(_QWORD *)(v16 + 96);
        v241 = v240 + 4 * *(_QWORD *)(v16 + 80);
        LOBYTE(v270) = 1;
        v271 = v240;
        *(_QWORD *)&v272 = v241;
        *((_QWORD *)&v272 + 1) = v241;
      }
      else
      {
        LOBYTE(v270) = 1;
        v272 = 0uLL;
        v271 = 0;
      }
LABEL_543:
      while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v273, &v270) & 1) == 0)
      {
        v16 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v243);
        v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v273, v242);
        v4 = *(_QWORD *)&v293[16];
        if (*(_QWORD *)&v293[16] <= v14)
          goto LABEL_691;
        *(_DWORD *)(*(_QWORD *)&v295[2] + 4 * v14) = HIDWORD(v16);
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v273);
      }
      re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v270, v243);
      re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v273, v244);
      re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v9, v12[1], v15, (uint64_t *)v296, (uint64_t *)v293);
      if (*(_QWORD *)v293 && *(_QWORD *)&v295[2])
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v293 + 40))(*(_QWORD *)v293, *(_QWORD *)&v295[2]);
LABEL_547:
      if (!(*((unsigned int (**)(char **))*v12 + 2))(v12)
        || (v9 = (re *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v12, 0),
            !(*((unsigned int (**)(char **))*v12 + 2))(v12)))
      {
        *(_QWORD *)v301 = 0;
        v309 = 0u;
        v310 = 0u;
        v307 = 0u;
        v308 = 0u;
        v306 = 0u;
        v12 = (char **)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v293 = 136315906;
        *(_QWORD *)&v293[4] = "operator[]";
        *(_WORD *)&v293[12] = 1024;
        *(_DWORD *)&v293[14] = 609;
        *(_WORD *)&v293[18] = 2048;
        *(_QWORD *)&v293[20] = 0;
        v294 = 2048;
        *(_QWORD *)v295 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_550:
        v200 = 0;
        goto LABEL_551;
      }
LABEL_577:
      v256 = *(const void **)&v299[2];
      v257 = 16 * v15;
LABEL_606:
      memcpy(v9, v256, v257);
      if (*(_QWORD *)v296 && *(_QWORD *)&v298[2])
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v296 + 40))(*(_QWORD *)v296, *(_QWORD *)&v298[2]);
      if (v288 && v292)
        (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v288 + 40))(v288, v292);
      if (*(_QWORD *)&v299[0] && *(_QWORD *)&v299[2])
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v299[0] + 40))(*(_QWORD *)&v299[0], *(_QWORD *)&v299[2]);
      if (v277 && v281)
        (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v277 + 40))(v277, v281);
      result = v282;
      if (v282)
      {
        if (v286)
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v282 + 40))(v282, v286);
      }
      return result;
    case 5:
      goto LABEL_17;
    case 6:
      goto LABEL_7;
    case 7:
      goto LABEL_22;
    case 8:
      goto LABEL_12;
    default:
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) The attribute is not a continuous (float or vector) type.", "!\"Unreachable code\"", "mergeContinuousFaceVaryingAttributeValues", 564);
      _os_crash();
      __break(1u);
      goto LABEL_702;
  }
}

uint64_t re::mergeDiscreteFaceVaryingAttributeValues(re *this, re::GeomMesh *a2, const char *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  re *v8;
  char **v9;
  uint64_t v10;
  char **v11;
  uint64_t result;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _OWORD *v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unint64_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  int v87;
  const re::GeomAttribute *v88;
  _OWORD *v89;
  unsigned int v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v106;
  int v107;
  const re::GeomAttribute *v108;
  _OWORD *v109;
  unsigned int v110;
  unsigned __int8 *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 *v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v126;
  int v127;
  const re::GeomAttribute *v128;
  _OWORD *v129;
  unsigned int v130;
  unsigned __int8 *v131;
  uint64_t v132;
  uint64_t v133;
  _OWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v143;
  int v144;
  const re::GeomAttribute *v145;
  _OWORD *v146;
  unsigned int v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  _OWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  BOOL v161;
  uint64_t v163;
  int v164;
  const re::GeomAttribute *v165;
  _OWORD *v166;
  unsigned int v167;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned __int8 *v171;
  uint64_t v172;
  uint64_t v173;
  _OWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v183;
  int v184;
  const re::GeomAttribute *v185;
  _OWORD *v186;
  unsigned int v187;
  unsigned __int8 *v188;
  uint64_t v189;
  uint64_t v190;
  _OWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  BOOL v198;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  int v204;
  int v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  int v224;
  int v225;
  uint64_t v226;
  int v227;
  int v228;
  int v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  int v236;
  int v237;
  uint64_t v238;
  int v239;
  int v240;
  int v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  int v251;
  int v252;
  int v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  int v260;
  int v261;
  uint64_t v262;
  int v263;
  int v264;
  int v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  int v272;
  int v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  unint64_t v280;
  unint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  const void *v286;
  size_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  __int128 v312;
  uint64_t v313;
  uint64_t *v314;
  char *v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  int v320;
  unsigned __int8 *v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  int v325;
  uint64_t v326;
  uint64_t v327;
  _BYTE v328[28];
  __int16 v329;
  _BYTE v330[10];
  _BYTE v331[28];
  __int16 v332;
  _BYTE v333[10];
  _BYTE v334[28];
  __int16 v335;
  _BYTE v336[10];
  _BYTE v337[28];
  __int16 v338;
  _BYTE v339[10];
  _BYTE v340[18];
  __int16 v341;
  unint64_t v342;
  __int16 v343;
  unint64_t v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;

  v8 = this;
  v350 = *MEMORY[0x24BDAC8D0];
  v9 = (char **)re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), (const char *)a2);
  v11 = v9;
  switch(*((_BYTE *)v9 + 17))
  {
    case 0:
      result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!(_DWORD)result)
        return result;
      v326 = 0;
      v323 = 0;
      v324 = 0;
      v321 = 0;
      v322 = 0;
      v325 = 0;
      v318 = 0;
      v319 = 0;
      v317 = 0;
      v320 = 0;
      v13 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v13)
        goto LABEL_21;
      LODWORD(v14) = v13;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_706;
      v15 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_706;
      v324 = 0;
      v325 = 1;
      v319 = 0;
      v320 = 1;
      v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      v16 = 0;
      v17 = *(_QWORD *)&v337[16];
      v18 = *(_QWORD *)&v339[2];
      do
      {
        if (v17 == v16)
        {
          *(_QWORD *)v331 = 0;
          v348 = 0u;
          v349 = 0u;
          v346 = 0u;
          v347 = 0u;
          v345 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_595:
          *(_QWORD *)v331 = 0;
          v348 = 0u;
          v349 = 0u;
          v346 = 0u;
          v347 = 0u;
          v345 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_596:
          *(_QWORD *)v331 = 0;
          v348 = 0u;
          v349 = 0u;
          v346 = 0u;
          v347 = 0u;
          v345 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_597:
          *(_QWORD *)v331 = 0;
          v348 = 0u;
          v349 = 0u;
          v346 = 0u;
          v347 = 0u;
          v345 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_598:
          *(_QWORD *)v331 = 0;
          v348 = 0u;
          v349 = 0u;
          v346 = 0u;
          v347 = 0u;
          v345 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_599:
          *(_QWORD *)v331 = 0;
          v348 = 0u;
          v349 = 0u;
          v346 = 0u;
          v347 = 0u;
          v345 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_600:
          *(_QWORD *)v331 = 0;
          v19[18] = 0u;
          v19[19] = 0u;
          v19[16] = 0u;
          v19[17] = 0u;
          v19[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v4;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_601:
          *(_QWORD *)v331 = 0;
          v31[18] = 0u;
          v31[19] = 0u;
          v31[16] = 0u;
          v31[17] = 0u;
          v31[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v4;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_602:
          *(_QWORD *)v331 = 0;
          v43[18] = 0u;
          v43[19] = 0u;
          v43[16] = 0u;
          v43[17] = 0u;
          v43[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v4;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_603:
          *(_QWORD *)v331 = 0;
          v55[18] = 0u;
          v55[19] = 0u;
          v55[16] = 0u;
          v55[17] = 0u;
          v55[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v4;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_604:
          *(_QWORD *)v331 = 0;
          v67[18] = 0u;
          v67[19] = 0u;
          v67[16] = 0u;
          v67[17] = 0u;
          v67[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v4;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_605:
          *(_QWORD *)v331 = 0;
          v79[18] = 0u;
          v79[19] = 0u;
          v79[16] = 0u;
          v79[17] = 0u;
          v79[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v4;
          v335 = 2048;
          *(_QWORD *)v336 = v17;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_606:
          *(_QWORD *)v331 = 0;
          v19[18] = 0u;
          v19[19] = 0u;
          v19[16] = 0u;
          v19[17] = 0u;
          v19[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_607:
          *(_QWORD *)v331 = 0;
          v31[18] = 0u;
          v31[19] = 0u;
          v31[16] = 0u;
          v31[17] = 0u;
          v31[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_608:
          *(_QWORD *)v331 = 0;
          v43[18] = 0u;
          v43[19] = 0u;
          v43[16] = 0u;
          v43[17] = 0u;
          v43[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_609:
          *(_QWORD *)v331 = 0;
          v55[18] = 0u;
          v55[19] = 0u;
          v55[16] = 0u;
          v55[17] = 0u;
          v55[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_610:
          *(_QWORD *)v331 = 0;
          v67[18] = 0u;
          v67[19] = 0u;
          v67[16] = 0u;
          v67[17] = 0u;
          v67[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_611:
          *(_QWORD *)v331 = 0;
          v79[18] = 0u;
          v79[19] = 0u;
          v79[16] = 0u;
          v79[17] = 0u;
          v79[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v334 = 136315906;
          *(_QWORD *)&v334[4] = "operator[]";
          *(_WORD *)&v334[12] = 1024;
          *(_DWORD *)&v334[14] = 789;
          *(_WORD *)&v334[18] = 2048;
          *(_QWORD *)&v334[20] = v17;
          v335 = 2048;
          *(_QWORD *)v336 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_612:
          *(_QWORD *)v328 = 0;
          v89[18] = 0u;
          v89[19] = 0u;
          v89[16] = 0u;
          v89[17] = 0u;
          v89[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(_QWORD *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(_QWORD *)&v331[20] = v14;
          v332 = 2048;
          *(_QWORD *)v333 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_613:
          *(_QWORD *)v328 = 0;
          v109[18] = 0u;
          v109[19] = 0u;
          v109[16] = 0u;
          v109[17] = 0u;
          v109[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(_QWORD *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(_QWORD *)&v331[20] = v14;
          v332 = 2048;
          *(_QWORD *)v333 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_614:
          *(_QWORD *)v328 = 0;
          v129[18] = 0u;
          v129[19] = 0u;
          v129[16] = 0u;
          v129[17] = 0u;
          v129[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(_QWORD *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(_QWORD *)&v331[20] = v14;
          v332 = 2048;
          *(_QWORD *)v333 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_615:
          *(_QWORD *)v328 = 0;
          v146[18] = 0u;
          v146[19] = 0u;
          v146[16] = 0u;
          v146[17] = 0u;
          v146[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(_QWORD *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(_QWORD *)&v331[20] = v14;
          v332 = 2048;
          *(_QWORD *)v333 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_616:
          *(_QWORD *)v328 = 0;
          v166[18] = 0u;
          v166[19] = 0u;
          v166[16] = 0u;
          v166[17] = 0u;
          v166[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(_QWORD *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(_QWORD *)&v331[20] = v14;
          v332 = 2048;
          *(_QWORD *)v333 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_617:
          *(_QWORD *)v328 = 0;
          v186[18] = 0u;
          v186[19] = 0u;
          v186[16] = 0u;
          v186[17] = 0u;
          v186[15] = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v331 = 136315906;
          *(_QWORD *)&v331[4] = "operator[]";
          *(_WORD *)&v331[12] = 1024;
          *(_DWORD *)&v331[14] = 797;
          *(_WORD *)&v331[18] = 2048;
          *(_QWORD *)&v331[20] = v14;
          v332 = 2048;
          *(_QWORD *)v333 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_618;
        }
        *(_DWORD *)(v18 + 4 * v16) = v16;
        ++v16;
      }
      while (v14 != v16);
      *(_QWORD *)&v345 = v15;
      if (!*(_QWORD *)&v337[16])
        goto LABEL_684;
      v5 = **(_DWORD **)&v339[2];
      v17 = v319;
      v19 = v328;
      if (v319 <= v5)
        goto LABEL_690;
      v4 = 0;
      v20 = *(unsigned __int16 *)(v15 + 2 * v5);
      v321[v5] = 1;
      do
      {
        v17 = *(_QWORD *)&v337[16];
        if (*(_QWORD *)&v337[16] <= v4)
          goto LABEL_600;
        v17 = *(unsigned int *)(*(_QWORD *)&v339[2] + 4 * v4);
        v21 = *(unsigned __int16 *)(v15 + 2 * v17);
        if (v21 != v20)
        {
          v3 = v319;
          if (v319 <= v17)
            goto LABEL_654;
          v321[v17] = 1;
          v5 = v17;
          v20 = v21;
        }
        v3 = v324;
        if (v324 <= v17)
          goto LABEL_606;
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(_QWORD *)v337 && *(_QWORD *)&v339[2])
        (*(void (**)(void))(**(_QWORD **)v337 + 40))();
LABEL_21:
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(_QWORD *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      v22 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      v23 = v22;
      if (v22)
      {
        v15 = v319;
        if (v319 > v22 - 1)
        {
          LODWORD(v24) = 0;
          v25 = v321;
          v26 = v22;
          do
          {
            v27 = *v25++;
            v24 = (v24 + v27);
            --v26;
          }
          while (v26);
          goto LABEL_147;
        }
LABEL_696:
        *(_QWORD *)v328 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v15;
        v332 = 2048;
        *(_QWORD *)v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_697:
        *(_QWORD *)v328 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v15;
        v332 = 2048;
        *(_QWORD *)v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_698:
        *(_QWORD *)v328 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v15;
        v332 = 2048;
        *(_QWORD *)v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_699:
        *(_QWORD *)v328 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v15;
        v332 = 2048;
        *(_QWORD *)v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_700:
        *(_QWORD *)v328 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v15;
        v332 = 2048;
        *(_QWORD *)v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_701:
        *(_QWORD *)v328 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v15;
        v332 = 2048;
        *(_QWORD *)v333 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v24 = 0;
LABEL_147:
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        v17 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0);
        v5 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        v5 = 0;
        v17 = 0;
      }
      re::DynamicArray<unsigned short>::resize((uint64_t)v337, v24);
      v15 = v23;
      re::DynamicArray<unsigned int>::resize(v334, v23, &re::kInvalidMeshIndex);
      v89 = v328;
      if (v23)
      {
        v4 = 0;
        v90 = 0;
        v14 = v319;
        v91 = v321;
        v6 = *(_QWORD *)&v334[16];
        v92 = *(_QWORD *)&v336[2];
        v7 = *(_QWORD *)&v337[16];
        v93 = *(_QWORD *)&v339[2];
        do
        {
          if (v14 == v4)
            goto LABEL_612;
          if (v91[v4])
          {
            if (v6 <= v4)
              goto LABEL_636;
            *(_DWORD *)(v92 + 4 * v4) = v90;
            if (v5 <= v4)
              goto LABEL_642;
            v3 = v90;
            if (v7 <= v90)
              goto LABEL_648;
            *(_WORD *)(v93 + 2 * v90++) = *(_WORD *)(v17 + 2 * v4);
          }
          ++v4;
        }
        while (v15 != v4);
        v17 = 0;
        v94 = v321;
        v5 = v324;
        v95 = v326;
        v4 = *(_QWORD *)&v334[16];
        v96 = *(_QWORD *)&v336[2];
        while (v14 != v17)
        {
          if (!v94[v17])
          {
            if (v5 <= v17)
              goto LABEL_660;
            v6 = *(unsigned int *)(v95 + 4 * v17);
            if (v4 <= v6)
              goto LABEL_666;
            if (v4 <= v17)
              goto LABEL_672;
            *(_DWORD *)(v96 + 4 * v17) = *(_DWORD *)(v96 + 4 * v6);
          }
          if (v15 == ++v17)
            goto LABEL_182;
        }
LABEL_618:
        *(_QWORD *)v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_619:
        *(_QWORD *)v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_620:
        *(_QWORD *)v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v4;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_621:
        *(_QWORD *)v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_622:
        *(_QWORD *)v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_623:
        *(_QWORD *)v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v4;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_624:
        *(_QWORD *)v340 = 0;
        v97[18] = 0u;
        v97[19] = 0u;
        v97[16] = 0u;
        v97[17] = 0u;
        v97[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v4;
        v329 = 2048;
        *(_QWORD *)v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_625:
        *(_QWORD *)v340 = 0;
        v117[18] = 0u;
        v117[19] = 0u;
        v117[16] = 0u;
        v117[17] = 0u;
        v117[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v4;
        v329 = 2048;
        *(_QWORD *)v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_626:
        *(_QWORD *)v340 = 0;
        v134[18] = 0u;
        v134[19] = 0u;
        v134[16] = 0u;
        v134[17] = 0u;
        v134[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v4;
        v329 = 2048;
        *(_QWORD *)v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_627:
        *(_QWORD *)v340 = 0;
        v154[18] = 0u;
        v154[19] = 0u;
        v154[16] = 0u;
        v154[17] = 0u;
        v154[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v4;
        v329 = 2048;
        *(_QWORD *)v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_628:
        *(_QWORD *)v340 = 0;
        v174[18] = 0u;
        v174[19] = 0u;
        v174[16] = 0u;
        v174[17] = 0u;
        v174[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v4;
        v329 = 2048;
        *(_QWORD *)v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_629:
        *(_QWORD *)v340 = 0;
        v191[18] = 0u;
        v191[19] = 0u;
        v191[16] = 0u;
        v191[17] = 0u;
        v191[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 789;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v4;
        v329 = 2048;
        *(_QWORD *)v330 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_630:
        *(_QWORD *)v340 = 0;
        v97[18] = 0u;
        v97[19] = 0u;
        v97[16] = 0u;
        v97[17] = 0u;
        v97[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v5;
        v329 = 2048;
        *(_QWORD *)v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_631:
        *(_QWORD *)v340 = 0;
        v117[18] = 0u;
        v117[19] = 0u;
        v117[16] = 0u;
        v117[17] = 0u;
        v117[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v5;
        v329 = 2048;
        *(_QWORD *)v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_632:
        *(_QWORD *)v340 = 0;
        v134[18] = 0u;
        v134[19] = 0u;
        v134[16] = 0u;
        v134[17] = 0u;
        v134[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v5;
        v329 = 2048;
        *(_QWORD *)v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_633:
        *(_QWORD *)v340 = 0;
        v154[18] = 0u;
        v154[19] = 0u;
        v154[16] = 0u;
        v154[17] = 0u;
        v154[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v5;
        v329 = 2048;
        *(_QWORD *)v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_634:
        *(_QWORD *)v340 = 0;
        v174[18] = 0u;
        v174[19] = 0u;
        v174[16] = 0u;
        v174[17] = 0u;
        v174[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v5;
        v329 = 2048;
        *(_QWORD *)v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_635:
        *(_QWORD *)v340 = 0;
        v191[18] = 0u;
        v191[19] = 0u;
        v191[16] = 0u;
        v191[17] = 0u;
        v191[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 797;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = v5;
        v329 = 2048;
        *(_QWORD *)v330 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_636:
        *(_QWORD *)v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v4;
        v332 = 2048;
        *(_QWORD *)v333 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_637:
        *(_QWORD *)v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v4;
        v332 = 2048;
        *(_QWORD *)v333 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_638:
        *(_QWORD *)v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_639:
        *(_QWORD *)v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v4;
        v332 = 2048;
        *(_QWORD *)v333 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_640:
        *(_QWORD *)v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v4;
        v332 = 2048;
        *(_QWORD *)v333 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_641:
        *(_QWORD *)v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_642:
        *(_QWORD *)v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v4;
        v332 = 2048;
        *(_QWORD *)v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_643:
        *(_QWORD *)v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v4;
        v332 = 2048;
        *(_QWORD *)v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_644:
        *(_QWORD *)v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_645:
        *(_QWORD *)v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v4;
        v332 = 2048;
        *(_QWORD *)v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_646:
        *(_QWORD *)v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v4;
        v332 = 2048;
        *(_QWORD *)v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_647:
        *(_QWORD *)v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 601;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_648:
        *(_QWORD *)v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v3;
        v332 = 2048;
        *(_QWORD *)v333 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_649:
        *(_QWORD *)v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v3;
        v332 = 2048;
        *(_QWORD *)v333 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_650:
        *(_QWORD *)v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v5;
        v332 = 2048;
        *(_QWORD *)v333 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_651:
        *(_QWORD *)v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v3;
        v332 = 2048;
        *(_QWORD *)v333 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_652:
        *(_QWORD *)v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v3;
        v332 = 2048;
        *(_QWORD *)v333 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_653:
        *(_QWORD *)v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v5;
        v332 = 2048;
        *(_QWORD *)v333 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_654:
        *(_QWORD *)v331 = 0;
        v19[18] = 0u;
        v19[19] = 0u;
        v19[16] = 0u;
        v19[17] = 0u;
        v19[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v17;
        v335 = 2048;
        *(_QWORD *)v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_655:
        *(_QWORD *)v331 = 0;
        v31[18] = 0u;
        v31[19] = 0u;
        v31[16] = 0u;
        v31[17] = 0u;
        v31[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v17;
        v335 = 2048;
        *(_QWORD *)v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_656:
        *(_QWORD *)v331 = 0;
        v43[18] = 0u;
        v43[19] = 0u;
        v43[16] = 0u;
        v43[17] = 0u;
        v43[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v17;
        v335 = 2048;
        *(_QWORD *)v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_657:
        *(_QWORD *)v331 = 0;
        v55[18] = 0u;
        v55[19] = 0u;
        v55[16] = 0u;
        v55[17] = 0u;
        v55[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v17;
        v335 = 2048;
        *(_QWORD *)v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_658:
        *(_QWORD *)v331 = 0;
        v67[18] = 0u;
        v67[19] = 0u;
        v67[16] = 0u;
        v67[17] = 0u;
        v67[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v17;
        v335 = 2048;
        *(_QWORD *)v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_659:
        *(_QWORD *)v331 = 0;
        v79[18] = 0u;
        v79[19] = 0u;
        v79[16] = 0u;
        v79[17] = 0u;
        v79[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v17;
        v335 = 2048;
        *(_QWORD *)v336 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_660:
        *(_QWORD *)v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v17;
        v332 = 2048;
        *(_QWORD *)v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_661:
        *(_QWORD *)v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v17;
        v332 = 2048;
        *(_QWORD *)v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_662:
        *(_QWORD *)v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_663:
        *(_QWORD *)v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v17;
        v332 = 2048;
        *(_QWORD *)v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_664:
        *(_QWORD *)v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v17;
        v332 = 2048;
        *(_QWORD *)v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_665:
        *(_QWORD *)v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 797;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_666:
        *(_QWORD *)v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v6;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_667:
        *(_QWORD *)v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v6;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_668:
        *(_QWORD *)v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v6;
        v332 = 2048;
        *(_QWORD *)v333 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_669:
        *(_QWORD *)v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v6;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_670:
        *(_QWORD *)v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v6;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_671:
        *(_QWORD *)v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v6;
        v332 = 2048;
        *(_QWORD *)v333 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_672:
        *(_QWORD *)v328 = 0;
        v89[18] = 0u;
        v89[19] = 0u;
        v89[16] = 0u;
        v89[17] = 0u;
        v89[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v17;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_673:
        *(_QWORD *)v328 = 0;
        v109[18] = 0u;
        v109[19] = 0u;
        v109[16] = 0u;
        v109[17] = 0u;
        v109[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v17;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_674:
        *(_QWORD *)v328 = 0;
        v129[18] = 0u;
        v129[19] = 0u;
        v129[16] = 0u;
        v129[17] = 0u;
        v129[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_675:
        *(_QWORD *)v328 = 0;
        v146[18] = 0u;
        v146[19] = 0u;
        v146[16] = 0u;
        v146[17] = 0u;
        v146[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v17;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_676:
        *(_QWORD *)v328 = 0;
        v166[18] = 0u;
        v166[19] = 0u;
        v166[16] = 0u;
        v166[17] = 0u;
        v166[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v17;
        v332 = 2048;
        *(_QWORD *)v333 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_677:
        *(_QWORD *)v328 = 0;
        v186[18] = 0u;
        v186[19] = 0u;
        v186[16] = 0u;
        v186[17] = 0u;
        v186[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v331 = 136315906;
        *(_QWORD *)&v331[4] = "operator[]";
        *(_WORD *)&v331[12] = 1024;
        *(_DWORD *)&v331[14] = 789;
        *(_WORD *)&v331[18] = 2048;
        *(_QWORD *)&v331[20] = v14;
        v332 = 2048;
        *(_QWORD *)v333 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_678:
        v327 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v340 = 136315906;
        *(_QWORD *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        v341 = 2048;
        v342 = v17;
        v343 = 2048;
        v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_679:
        v327 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v340 = 136315906;
        *(_QWORD *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        v341 = 2048;
        v342 = v17;
        v343 = 2048;
        v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_680:
        v327 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v340 = 136315906;
        *(_QWORD *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        v341 = 2048;
        v342 = v17;
        v343 = 2048;
        v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_681:
        v327 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v340 = 136315906;
        *(_QWORD *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        v341 = 2048;
        v342 = v17;
        v343 = 2048;
        v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_682:
        v327 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v340 = 136315906;
        *(_QWORD *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        v341 = 2048;
        v342 = v17;
        v343 = 2048;
        v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_683:
        v327 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v340 = 136315906;
        *(_QWORD *)&v340[4] = "operator[]";
        *(_WORD *)&v340[12] = 1024;
        *(_DWORD *)&v340[14] = 789;
        v341 = 2048;
        v342 = v17;
        v343 = 2048;
        v344 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_684:
        *(_QWORD *)v331 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = 0;
        v335 = 2048;
        *(_QWORD *)v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_685:
        *(_QWORD *)v331 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = 0;
        v335 = 2048;
        *(_QWORD *)v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_686:
        *(_QWORD *)v331 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = 0;
        v335 = 2048;
        *(_QWORD *)v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_687:
        *(_QWORD *)v331 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = 0;
        v335 = 2048;
        *(_QWORD *)v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_688:
        *(_QWORD *)v331 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = 0;
        v335 = 2048;
        *(_QWORD *)v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_689:
        *(_QWORD *)v331 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = 0;
        v335 = 2048;
        *(_QWORD *)v336 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_690:
        *(_QWORD *)v331 = 0;
        v19[18] = 0u;
        v19[19] = 0u;
        v19[16] = 0u;
        v19[17] = 0u;
        v19[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v5;
        v335 = 2048;
        *(_QWORD *)v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_691:
        *(_QWORD *)v331 = 0;
        v31[18] = 0u;
        v31[19] = 0u;
        v31[16] = 0u;
        v31[17] = 0u;
        v31[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v5;
        v335 = 2048;
        *(_QWORD *)v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_692:
        *(_QWORD *)v331 = 0;
        v43[18] = 0u;
        v43[19] = 0u;
        v43[16] = 0u;
        v43[17] = 0u;
        v43[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v5;
        v335 = 2048;
        *(_QWORD *)v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_693:
        *(_QWORD *)v331 = 0;
        v55[18] = 0u;
        v55[19] = 0u;
        v55[16] = 0u;
        v55[17] = 0u;
        v55[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v5;
        v335 = 2048;
        *(_QWORD *)v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_694:
        *(_QWORD *)v331 = 0;
        v67[18] = 0u;
        v67[19] = 0u;
        v67[16] = 0u;
        v67[17] = 0u;
        v67[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v5;
        v335 = 2048;
        *(_QWORD *)v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_695:
        *(_QWORD *)v331 = 0;
        v79[18] = 0u;
        v79[19] = 0u;
        v79[16] = 0u;
        v79[17] = 0u;
        v79[15] = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v334 = 136315906;
        *(_QWORD *)&v334[4] = "operator[]";
        *(_WORD *)&v334[12] = 1024;
        *(_DWORD *)&v334[14] = 789;
        *(_WORD *)&v334[18] = 2048;
        *(_QWORD *)&v334[20] = v5;
        v335 = 2048;
        *(_QWORD *)v336 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_696;
      }
LABEL_182:
      v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v88);
      v15 = *(_QWORD *)&v337[16];
      v6 = *(_QWORD *)(v14 + 24);
      v17 = v6;
      *(_QWORD *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      v97 = v328;
      if (!(_DWORD)v6)
        goto LABEL_192;
      v98 = 0;
      v4 = *(_QWORD *)&v331[16];
      v99 = *(_QWORD *)&v333[2];
      v5 = *(_QWORD *)(v14 + 24);
      v100 = *(_QWORD *)(v14 + 40);
      v7 = *(_QWORD *)&v334[16];
      while (2)
      {
        if (v98 == v4)
          goto LABEL_624;
        if (v98 == v5)
          goto LABEL_630;
        v101 = 0;
        *(_OWORD *)v340 = *(_OWORD *)(v100 + 16 * v98);
        v102 = *(_QWORD *)&v336[2];
        if (*(_DWORD *)&v340[12] == -1)
          v103 = 3;
        else
          v103 = 4;
        while (2)
        {
          v3 = *(unsigned int *)&v340[4 * v101];
          if (v7 <= v3)
          {
            v313 = 0;
            v348 = 0u;
            v349 = 0u;
            v346 = 0u;
            v347 = 0u;
            v345 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v328 = 136315906;
            *(_QWORD *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(_QWORD *)&v328[20] = v3;
            v329 = 2048;
            *(_QWORD *)v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_405:
            v313 = 0;
            v117[18] = 0u;
            v117[19] = 0u;
            v117[16] = 0u;
            v117[17] = 0u;
            v117[15] = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v328 = 136315906;
            *(_QWORD *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(_QWORD *)&v328[20] = v3;
            v329 = 2048;
            *(_QWORD *)v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_406:
            v313 = 0;
            v134[18] = 0u;
            v134[19] = 0u;
            v134[16] = 0u;
            v134[17] = 0u;
            v134[15] = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v328 = 136315906;
            *(_QWORD *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(_QWORD *)&v328[20] = v3;
            v329 = 2048;
            *(_QWORD *)v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_407:
            v313 = 0;
            v154[18] = 0u;
            v154[19] = 0u;
            v154[16] = 0u;
            v154[17] = 0u;
            v154[15] = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v328 = 136315906;
            *(_QWORD *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(_QWORD *)&v328[20] = v3;
            v329 = 2048;
            *(_QWORD *)v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_408:
            v313 = 0;
            v174[18] = 0u;
            v174[19] = 0u;
            v174[16] = 0u;
            v174[17] = 0u;
            v174[15] = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v328 = 136315906;
            *(_QWORD *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(_QWORD *)&v328[20] = v3;
            v329 = 2048;
            *(_QWORD *)v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_409:
            v313 = 0;
            v191[18] = 0u;
            v191[19] = 0u;
            v191[16] = 0u;
            v191[17] = 0u;
            v191[15] = 0u;
            v11 = (char **)MEMORY[0x24BDACB70];
            v8 = (re *)v328;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v328 = 136315906;
            *(_QWORD *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 789;
            *(_WORD *)&v328[18] = 2048;
            *(_QWORD *)&v328[20] = v3;
            v329 = 2048;
            *(_QWORD *)v330 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_410:
            re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
            LOBYTE(v313) = 2;
            v203 = *(unsigned __int8 *)(v14 + 60);
            if (!*(_BYTE *)(v14 + 60))
              goto LABEL_414;
            if (v203 == 2)
            {
              LOBYTE(v310) = 2;
              v311 = v14 + 64;
              v312 = xmmword_2260E7ED0;
              goto LABEL_501;
            }
            if (v203 != 1)
              goto LABEL_718;
            v204 = *(_DWORD *)(v14 + 48);
            goto LABEL_496;
          }
          *(_DWORD *)(v99 + 4 * v101++) = *(_DWORD *)(v102 + 4 * v3);
          if (v103 != v101)
            continue;
          break;
        }
        ++v98;
        v99 += 16;
        if (v98 != v6)
          continue;
        break;
      }
LABEL_192:
      if (*(_DWORD *)(v14 + 48))
        v104 = *(_BYTE *)(v14 + 60) == 0;
      else
        v104 = 1;
      if (v104 && *((_DWORD *)v8 + 10) == (_DWORD)v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
        goto LABEL_505;
      }
      *(_QWORD *)&v330[2] = 0;
      memset(v328, 0, sizeof(v328));
      re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
      v107 = *(unsigned __int8 *)(v14 + 60);
      if (v107 == 2)
        goto LABEL_410;
      if (v107 != 1)
      {
        if (!*(_BYTE *)(v14 + 60))
        {
          LOBYTE(v313) = 0;
          LODWORD(v314) = 0;
LABEL_414:
          v205 = *(_DWORD *)(v14 + 64);
          LOBYTE(v310) = 0;
          LODWORD(v311) = v205;
          goto LABEL_501;
        }
LABEL_712:
        re::internal::assertLog((re::internal *)4, v106, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_713:
        re::internal::assertLog((re::internal *)4, v126, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_714:
        re::internal::assertLog((re::internal *)4, v143, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_715:
        re::internal::assertLog((re::internal *)4, v163, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_716:
        re::internal::assertLog((re::internal *)4, v183, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_717:
        re::internal::assertLog((re::internal *)4, v200, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
        _os_crash();
        __break(1u);
LABEL_718:
        re::internal::assertLog((re::internal *)4, v202, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
LABEL_719:
        re::internal::assertLog((re::internal *)4, v214, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
LABEL_720:
        re::internal::assertLog((re::internal *)4, v226, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
LABEL_721:
        re::internal::assertLog((re::internal *)4, v238, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
LABEL_722:
        re::internal::assertLog((re::internal *)4, v250, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
LABEL_723:
        re::internal::assertLog((re::internal *)4, v262, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "end", 721);
        _os_crash();
        __break(1u);
        JUMPOUT(0x22588691CLL);
      }
      v204 = *(_DWORD *)(v14 + 48);
      if (v204)
      {
        v206 = *(uint64_t **)(v14 + 96);
        v207 = *(unsigned int *)(v14 + 52);
        v208 = *(_QWORD *)(v14 + 80);
        v209 = (char *)v206 + 4 * v208;
        LOBYTE(v313) = 1;
        if (v206)
        {
          v210 = (char *)v206 + 4 * v207;
          if (v208 != v207)
          {
            v210 -= 4;
            v211 = 4 * v208 - 4 * v207;
            do
            {
              v213 = *((_DWORD *)v210 + 1);
              v210 += 4;
              v212 = v213;
              if (!v211)
                break;
              v211 -= 4;
            }
            while (v212 == -1);
          }
        }
        else
        {
          v210 = 0;
        }
        v314 = v206;
        v315 = v210;
        v316 = v209;
      }
      else
      {
        LOBYTE(v313) = 1;
        v315 = 0;
        v316 = 0;
        v314 = 0;
      }
LABEL_496:
      if (v204)
      {
        v274 = *(_QWORD *)(v14 + 96);
        v275 = v274 + 4 * *(_QWORD *)(v14 + 80);
        LOBYTE(v310) = 1;
        v311 = v274;
        *(_QWORD *)&v312 = v275;
        *((_QWORD *)&v312 + 1) = v275;
      }
      else
      {
        LOBYTE(v310) = 1;
        v312 = 0uLL;
        v311 = 0;
      }
LABEL_501:
      while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
      {
        v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v277);
        v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v276);
        v3 = *(_QWORD *)&v328[16];
        if (*(_QWORD *)&v328[16] <= v17)
          goto LABEL_678;
        *(_DWORD *)(*(_QWORD *)&v330[2] + 4 * v17) = HIDWORD(v14);
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
      }
      re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v277);
      re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v278);
      re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
      if (*(_QWORD *)v328 && *(_QWORD *)&v330[2])
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v328 + 40))(*(_QWORD *)v328, *(_QWORD *)&v330[2]);
LABEL_505:
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)
        || (v279 = (void *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0),
            !(*((unsigned int (**)(char **))*v11 + 2))(v11)))
      {
        *(_QWORD *)v340 = 0;
        v8 = (re *)v328;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        v11 = (char **)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 609;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = 0;
        v329 = 2048;
        *(_QWORD *)v330 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_508:
        v222 = 0;
        goto LABEL_509;
      }
LABEL_521:
      v286 = *(const void **)&v339[2];
      v287 = 2 * v15;
LABEL_578:
      memcpy(v279, v286, v287);
      if (*(_QWORD *)v331 && *(_QWORD *)&v333[2])
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v331 + 40))(*(_QWORD *)v331, *(_QWORD *)&v333[2]);
      if (*(_QWORD *)v334 && *(_QWORD *)&v336[2])
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v334 + 40))(*(_QWORD *)v334, *(_QWORD *)&v336[2]);
      if (*(_QWORD *)v337 && *(_QWORD *)&v339[2])
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v337 + 40))(*(_QWORD *)v337, *(_QWORD *)&v339[2]);
      if (v317 && v321)
        (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v317 + 40))(v317, v321);
      result = v322;
      if (v322)
      {
        if (v326)
          return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v322 + 40))(v322, v326);
      }
      return result;
    case 1:
      result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!(_DWORD)result)
        return result;
      v326 = 0;
      v323 = 0;
      v324 = 0;
      v321 = 0;
      v322 = 0;
      v325 = 0;
      v318 = 0;
      v319 = 0;
      v317 = 0;
      v320 = 0;
      v28 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v28)
        goto LABEL_45;
      LODWORD(v14) = v28;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_707;
      v15 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_707;
      v324 = 0;
      v325 = 1;
      v319 = 0;
      v320 = 1;
      v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      v29 = 0;
      v17 = *(_QWORD *)&v337[16];
      v30 = *(_QWORD *)&v339[2];
      do
      {
        if (v17 == v29)
          goto LABEL_595;
        *(_DWORD *)(v30 + 4 * v29) = v29;
        ++v29;
      }
      while (v14 != v29);
      *(_QWORD *)&v345 = v15;
      if (!*(_QWORD *)&v337[16])
        goto LABEL_685;
      v5 = **(_DWORD **)&v339[2];
      v17 = v319;
      v31 = v328;
      if (v319 <= v5)
        goto LABEL_691;
      v4 = 0;
      v32 = *(unsigned __int16 *)(v15 + 2 * v5);
      v321[v5] = 1;
      do
      {
        v17 = *(_QWORD *)&v337[16];
        if (*(_QWORD *)&v337[16] <= v4)
          goto LABEL_601;
        v17 = *(unsigned int *)(*(_QWORD *)&v339[2] + 4 * v4);
        v33 = *(unsigned __int16 *)(v15 + 2 * v17);
        if (v33 != v32)
        {
          v3 = v319;
          if (v319 <= v17)
            goto LABEL_655;
          v321[v17] = 1;
          v5 = v17;
          v32 = v33;
        }
        v3 = v324;
        if (v324 <= v17)
          goto LABEL_607;
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(_QWORD *)v337 && *(_QWORD *)&v339[2])
        (*(void (**)(void))(**(_QWORD **)v337 + 40))();
LABEL_45:
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(_QWORD *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      v34 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      v35 = v34;
      if (v34)
      {
        v15 = v319;
        if (v319 <= v34 - 1)
          goto LABEL_697;
        LODWORD(v36) = 0;
        v37 = v321;
        v38 = v34;
        do
        {
          v39 = *v37++;
          v36 = (v36 + v39);
          --v38;
        }
        while (v38);
      }
      else
      {
        v36 = 0;
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        v17 = re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0);
        v5 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        v5 = 0;
        v17 = 0;
      }
      re::DynamicArray<unsigned short>::resize((uint64_t)v337, v36);
      v15 = v35;
      re::DynamicArray<unsigned int>::resize(v334, v35, &re::kInvalidMeshIndex);
      v109 = v328;
      if (v35)
      {
        v4 = 0;
        v110 = 0;
        v14 = v319;
        v111 = v321;
        v6 = *(_QWORD *)&v334[16];
        v112 = *(_QWORD *)&v336[2];
        v7 = *(_QWORD *)&v337[16];
        v113 = *(_QWORD *)&v339[2];
        do
        {
          if (v14 == v4)
            goto LABEL_613;
          if (v111[v4])
          {
            if (v6 <= v4)
              goto LABEL_637;
            *(_DWORD *)(v112 + 4 * v4) = v110;
            if (v5 <= v4)
              goto LABEL_643;
            v3 = v110;
            if (v7 <= v110)
              goto LABEL_649;
            *(_WORD *)(v113 + 2 * v110++) = *(_WORD *)(v17 + 2 * v4);
          }
          ++v4;
        }
        while (v15 != v4);
        v17 = 0;
        v114 = v321;
        v5 = v324;
        v115 = v326;
        v4 = *(_QWORD *)&v334[16];
        v116 = *(_QWORD *)&v336[2];
        do
        {
          if (v14 == v17)
            goto LABEL_619;
          if (!v114[v17])
          {
            if (v5 <= v17)
              goto LABEL_661;
            v6 = *(unsigned int *)(v115 + 4 * v17);
            if (v4 <= v6)
              goto LABEL_667;
            if (v4 <= v17)
              goto LABEL_673;
            *(_DWORD *)(v116 + 4 * v17) = *(_DWORD *)(v116 + 4 * v6);
          }
          ++v17;
        }
        while (v15 != v17);
      }
      v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v108);
      v15 = *(_QWORD *)&v337[16];
      v6 = *(_QWORD *)(v14 + 24);
      v17 = v6;
      *(_QWORD *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      v117 = v328;
      if ((_DWORD)v6)
      {
        v118 = 0;
        v4 = *(_QWORD *)&v331[16];
        v119 = *(_QWORD *)&v333[2];
        v5 = *(_QWORD *)(v14 + 24);
        v120 = *(_QWORD *)(v14 + 40);
        v7 = *(_QWORD *)&v334[16];
        do
        {
          if (v118 == v4)
            goto LABEL_625;
          if (v118 == v5)
            goto LABEL_631;
          v121 = 0;
          *(_OWORD *)v340 = *(_OWORD *)(v120 + 16 * v118);
          v122 = *(_QWORD *)&v336[2];
          if (*(_DWORD *)&v340[12] == -1)
            v123 = 3;
          else
            v123 = 4;
          do
          {
            v3 = *(unsigned int *)&v340[4 * v121];
            if (v7 <= v3)
              goto LABEL_405;
            *(_DWORD *)(v119 + 4 * v121++) = *(_DWORD *)(v122 + 4 * v3);
          }
          while (v123 != v121);
          ++v118;
          v119 += 16;
        }
        while (v118 != v6);
      }
      if (*(_DWORD *)(v14 + 48))
        v124 = *(_BYTE *)(v14 + 60) == 0;
      else
        v124 = 1;
      if (v124 && *((_DWORD *)v8 + 10) == (_DWORD)v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
      }
      else
      {
        *(_QWORD *)&v330[2] = 0;
        memset(v328, 0, sizeof(v328));
        re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
        v127 = *(unsigned __int8 *)(v14 + 60);
        if (v127 == 2)
        {
          re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
          LOBYTE(v313) = 2;
          v215 = *(unsigned __int8 *)(v14 + 60);
          if (!*(_BYTE *)(v14 + 60))
            goto LABEL_426;
          if (v215 == 2)
          {
            LOBYTE(v310) = 2;
            v311 = v14 + 64;
            v312 = xmmword_2260E7ED0;
            goto LABEL_515;
          }
          if (v215 != 1)
            goto LABEL_719;
          v216 = *(_DWORD *)(v14 + 48);
        }
        else
        {
          if (v127 != 1)
          {
            if (*(_BYTE *)(v14 + 60))
              goto LABEL_713;
            LOBYTE(v313) = 0;
            LODWORD(v314) = 0;
LABEL_426:
            v217 = *(_DWORD *)(v14 + 64);
            LOBYTE(v310) = 0;
            LODWORD(v311) = v217;
            goto LABEL_515;
          }
          v216 = *(_DWORD *)(v14 + 48);
          if (v216)
          {
            v218 = *(uint64_t **)(v14 + 96);
            v219 = *(unsigned int *)(v14 + 52);
            v220 = *(_QWORD *)(v14 + 80);
            v221 = (char *)v218 + 4 * v220;
            LOBYTE(v313) = 1;
            if (!v218)
              goto LABEL_508;
            v222 = (char *)v218 + 4 * v219;
            if (v220 != v219)
            {
              v222 -= 4;
              v223 = 4 * v220 - 4 * v219;
              do
              {
                v225 = *((_DWORD *)v222 + 1);
                v222 += 4;
                v224 = v225;
                if (!v223)
                  break;
                v223 -= 4;
              }
              while (v224 == -1);
            }
LABEL_509:
            v314 = v218;
            v315 = v222;
            v316 = v221;
          }
          else
          {
            LOBYTE(v313) = 1;
            v315 = 0;
            v316 = 0;
            v314 = 0;
          }
        }
        if (v216)
        {
          v280 = *(_QWORD *)(v14 + 96);
          v281 = v280 + 4 * *(_QWORD *)(v14 + 80);
          LOBYTE(v310) = 1;
          v311 = v280;
          *(_QWORD *)&v312 = v281;
          *((_QWORD *)&v312 + 1) = v281;
        }
        else
        {
          LOBYTE(v310) = 1;
          v312 = 0uLL;
          v311 = 0;
        }
LABEL_515:
        while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
        {
          v282 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v284) >> 32;
          v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v283);
          v3 = *(_QWORD *)&v328[16];
          if (*(_QWORD *)&v328[16] <= v17)
            goto LABEL_679;
          *(_DWORD *)(*(_QWORD *)&v330[2] + 4 * v17) = v282;
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
        }
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v284);
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v285);
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
        if (*(_QWORD *)v328 && *(_QWORD *)&v330[2])
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v328 + 40))(*(_QWORD *)v328, *(_QWORD *)&v330[2]);
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        v279 = (void *)re::internal::GeomTypedAttribute<short>::operator[]((uint64_t)v11, 0);
        if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
          goto LABEL_521;
      }
LABEL_703:
      *(_QWORD *)v340 = 0;
      v348 = 0u;
      v349 = 0u;
      v346 = 0u;
      v347 = 0u;
      v345 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v328 = 136315906;
      *(_QWORD *)&v328[4] = "operator[]";
      *(_WORD *)&v328[12] = 1024;
      *(_DWORD *)&v328[14] = 609;
      *(_WORD *)&v328[18] = 2048;
      *(_QWORD *)&v328[20] = 0;
      v329 = 2048;
      *(_QWORD *)v330 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_704;
    case 2:
      result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!(_DWORD)result)
        return result;
      v326 = 0;
      v323 = 0;
      v324 = 0;
      v321 = 0;
      v322 = 0;
      v325 = 0;
      v318 = 0;
      v319 = 0;
      v317 = 0;
      v320 = 0;
      v52 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v52)
        goto LABEL_93;
      LODWORD(v14) = v52;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_709;
      v15 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_709;
      v324 = 0;
      v325 = 1;
      v319 = 0;
      v320 = 1;
      v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      v53 = 0;
      v17 = *(_QWORD *)&v337[16];
      v54 = *(_QWORD *)&v339[2];
      do
      {
        if (v17 == v53)
          goto LABEL_597;
        *(_DWORD *)(v54 + 4 * v53) = v53;
        ++v53;
      }
      while (v14 != v53);
      *(_QWORD *)&v345 = v15;
      if (!*(_QWORD *)&v337[16])
        goto LABEL_687;
      v5 = **(_DWORD **)&v339[2];
      v17 = v319;
      v55 = v328;
      if (v319 <= v5)
        goto LABEL_693;
      v4 = 0;
      v56 = *(_DWORD *)(v15 + 4 * v5);
      v321[v5] = 1;
      do
      {
        v17 = *(_QWORD *)&v337[16];
        if (*(_QWORD *)&v337[16] <= v4)
          goto LABEL_603;
        v17 = *(unsigned int *)(*(_QWORD *)&v339[2] + 4 * v4);
        v57 = *(_DWORD *)(v15 + 4 * v17);
        if (v57 != v56)
        {
          v3 = v319;
          if (v319 <= v17)
            goto LABEL_657;
          v321[v17] = 1;
          v5 = v17;
          v56 = v57;
        }
        v3 = v324;
        if (v324 <= v17)
          goto LABEL_609;
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(_QWORD *)v337 && *(_QWORD *)&v339[2])
        (*(void (**)(void))(**(_QWORD **)v337 + 40))();
LABEL_93:
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(_QWORD *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      v58 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      v59 = v58;
      if (v58)
      {
        v15 = v319;
        if (v319 <= v58 - 1)
          goto LABEL_699;
        LODWORD(v60) = 0;
        v61 = v321;
        v62 = v58;
        do
        {
          v63 = *v61++;
          v60 = (v60 + v63);
          --v62;
        }
        while (v62);
      }
      else
      {
        v60 = 0;
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        v17 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v11, 0);
        v5 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        v5 = 0;
        v17 = 0;
      }
      re::DynamicArray<float>::resize((uint64_t)v337, v60);
      v15 = v59;
      re::DynamicArray<unsigned int>::resize(v334, v59, &re::kInvalidMeshIndex);
      v146 = v328;
      if (v59)
      {
        v4 = 0;
        v147 = 0;
        v14 = v319;
        v148 = v321;
        v6 = *(_QWORD *)&v334[16];
        v149 = *(_QWORD *)&v336[2];
        v7 = *(_QWORD *)&v337[16];
        v150 = *(_QWORD *)&v339[2];
        do
        {
          if (v14 == v4)
            goto LABEL_615;
          if (v148[v4])
          {
            if (v6 <= v4)
              goto LABEL_639;
            *(_DWORD *)(v149 + 4 * v4) = v147;
            if (v5 <= v4)
              goto LABEL_645;
            v3 = v147;
            if (v7 <= v147)
              goto LABEL_651;
            *(_DWORD *)(v150 + 4 * v147++) = *(_DWORD *)(v17 + 4 * v4);
          }
          ++v4;
        }
        while (v15 != v4);
        v17 = 0;
        v151 = v321;
        v5 = v324;
        v152 = v326;
        v4 = *(_QWORD *)&v334[16];
        v153 = *(_QWORD *)&v336[2];
        do
        {
          if (v14 == v17)
            goto LABEL_621;
          if (!v151[v17])
          {
            if (v5 <= v17)
              goto LABEL_663;
            v6 = *(unsigned int *)(v152 + 4 * v17);
            if (v4 <= v6)
              goto LABEL_669;
            if (v4 <= v17)
              goto LABEL_675;
            *(_DWORD *)(v153 + 4 * v17) = *(_DWORD *)(v153 + 4 * v6);
          }
          ++v17;
        }
        while (v15 != v17);
      }
      v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v145);
      v15 = *(_QWORD *)&v337[16];
      v6 = *(_QWORD *)(v14 + 24);
      v17 = v6;
      *(_QWORD *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      v154 = v328;
      if ((_DWORD)v6)
      {
        v155 = 0;
        v4 = *(_QWORD *)&v331[16];
        v156 = *(_QWORD *)&v333[2];
        v5 = *(_QWORD *)(v14 + 24);
        v157 = *(_QWORD *)(v14 + 40);
        v7 = *(_QWORD *)&v334[16];
        do
        {
          if (v155 == v4)
            goto LABEL_627;
          if (v155 == v5)
            goto LABEL_633;
          v158 = 0;
          *(_OWORD *)v340 = *(_OWORD *)(v157 + 16 * v155);
          v159 = *(_QWORD *)&v336[2];
          if (*(_DWORD *)&v340[12] == -1)
            v160 = 3;
          else
            v160 = 4;
          do
          {
            v3 = *(unsigned int *)&v340[4 * v158];
            if (v7 <= v3)
              goto LABEL_407;
            *(_DWORD *)(v156 + 4 * v158++) = *(_DWORD *)(v159 + 4 * v3);
          }
          while (v160 != v158);
          ++v155;
          v156 += 16;
        }
        while (v155 != v6);
      }
      if (*(_DWORD *)(v14 + 48))
        v161 = *(_BYTE *)(v14 + 60) == 0;
      else
        v161 = 1;
      if (v161 && *((_DWORD *)v8 + 10) == (_DWORD)v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
LABEL_547:
        if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
        {
          v279 = (void *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v11, 0);
          if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
            goto LABEL_563;
        }
        *(_QWORD *)v340 = 0;
        v8 = (re *)v328;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        v11 = (char **)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 609;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = 0;
        v329 = 2048;
        *(_QWORD *)v330 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_550;
      }
      *(_QWORD *)&v330[2] = 0;
      memset(v328, 0, sizeof(v328));
      re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
      v164 = *(unsigned __int8 *)(v14 + 60);
      if (v164 == 2)
      {
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
        LOBYTE(v313) = 2;
        v239 = *(unsigned __int8 *)(v14 + 60);
        if (!*(_BYTE *)(v14 + 60))
        {
LABEL_450:
          v241 = *(_DWORD *)(v14 + 64);
          LOBYTE(v310) = 0;
          LODWORD(v311) = v241;
LABEL_543:
          while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
          {
            v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v296);
            v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v295);
            v3 = *(_QWORD *)&v328[16];
            if (*(_QWORD *)&v328[16] <= v17)
              goto LABEL_681;
            *(_DWORD *)(*(_QWORD *)&v330[2] + 4 * v17) = HIDWORD(v14);
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
          }
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v296);
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v297);
          re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
          if (*(_QWORD *)v328 && *(_QWORD *)&v330[2])
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v328 + 40))(*(_QWORD *)v328, *(_QWORD *)&v330[2]);
          goto LABEL_547;
        }
        if (v239 == 2)
        {
          LOBYTE(v310) = 2;
          v311 = v14 + 64;
          v312 = xmmword_2260E7ED0;
          goto LABEL_543;
        }
        if (v239 != 1)
          goto LABEL_721;
        v240 = *(_DWORD *)(v14 + 48);
LABEL_538:
        if (v240)
        {
          v293 = *(_QWORD *)(v14 + 96);
          v294 = v293 + 4 * *(_QWORD *)(v14 + 80);
          LOBYTE(v310) = 1;
          v311 = v293;
          *(_QWORD *)&v312 = v294;
          *((_QWORD *)&v312 + 1) = v294;
        }
        else
        {
          LOBYTE(v310) = 1;
          v312 = 0uLL;
          v311 = 0;
        }
        goto LABEL_543;
      }
      if (v164 != 1)
      {
        if (*(_BYTE *)(v14 + 60))
          goto LABEL_715;
        LOBYTE(v313) = 0;
        LODWORD(v314) = 0;
        goto LABEL_450;
      }
      v240 = *(_DWORD *)(v14 + 48);
      if (!v240)
      {
        LOBYTE(v313) = 1;
        v315 = 0;
        v316 = 0;
        v314 = 0;
        goto LABEL_538;
      }
      v242 = *(uint64_t **)(v14 + 96);
      v243 = *(unsigned int *)(v14 + 52);
      v244 = *(_QWORD *)(v14 + 80);
      v245 = (char *)v242 + 4 * v244;
      LOBYTE(v313) = 1;
      if (!v242)
        goto LABEL_536;
      v246 = (char *)v242 + 4 * v243;
      if (v244 != v243)
      {
        v246 -= 4;
        v247 = 4 * v244 - 4 * v243;
        do
        {
          v249 = *((_DWORD *)v246 + 1);
          v246 += 4;
          v248 = v249;
          if (!v247)
            break;
          v247 -= 4;
        }
        while (v248 == -1);
      }
      goto LABEL_537;
    case 3:
      result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!(_DWORD)result)
        return result;
      v326 = 0;
      v323 = 0;
      v324 = 0;
      v321 = 0;
      v322 = 0;
      v325 = 0;
      v318 = 0;
      v319 = 0;
      v317 = 0;
      v320 = 0;
      v64 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v64)
        goto LABEL_117;
      LODWORD(v14) = v64;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_710;
      v15 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_710;
      v324 = 0;
      v325 = 1;
      v319 = 0;
      v320 = 1;
      v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      v65 = 0;
      v17 = *(_QWORD *)&v337[16];
      v66 = *(_QWORD *)&v339[2];
      do
      {
        if (v17 == v65)
          goto LABEL_598;
        *(_DWORD *)(v66 + 4 * v65) = v65;
        ++v65;
      }
      while (v14 != v65);
      *(_QWORD *)&v345 = v15;
      if (!*(_QWORD *)&v337[16])
        goto LABEL_688;
      v5 = **(_DWORD **)&v339[2];
      v17 = v319;
      v67 = v328;
      if (v319 <= v5)
        goto LABEL_694;
      v4 = 0;
      v68 = *(_DWORD *)(v15 + 4 * v5);
      v321[v5] = 1;
      do
      {
        v17 = *(_QWORD *)&v337[16];
        if (*(_QWORD *)&v337[16] <= v4)
          goto LABEL_604;
        v17 = *(unsigned int *)(*(_QWORD *)&v339[2] + 4 * v4);
        v69 = *(_DWORD *)(v15 + 4 * v17);
        if (v69 != v68)
        {
          v3 = v319;
          if (v319 <= v17)
            goto LABEL_658;
          v321[v17] = 1;
          v5 = v17;
          v68 = v69;
        }
        v3 = v324;
        if (v324 <= v17)
          goto LABEL_610;
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(_QWORD *)v337 && *(_QWORD *)&v339[2])
        (*(void (**)(void))(**(_QWORD **)v337 + 40))();
LABEL_117:
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(_QWORD *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      v70 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      v71 = v70;
      if (v70)
      {
        v15 = v319;
        if (v319 <= v70 - 1)
          goto LABEL_700;
        LODWORD(v72) = 0;
        v73 = v321;
        v74 = v70;
        do
        {
          v75 = *v73++;
          v72 = (v72 + v75);
          --v74;
        }
        while (v74);
      }
      else
      {
        v72 = 0;
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        v17 = re::internal::GeomTypedAttribute<int>::operator[]((uint64_t)v11, 0);
        v5 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        v5 = 0;
        v17 = 0;
      }
      re::DynamicArray<float>::resize((uint64_t)v337, v72);
      v15 = v71;
      re::DynamicArray<unsigned int>::resize(v334, v71, &re::kInvalidMeshIndex);
      v166 = v328;
      if (v71)
      {
        v4 = 0;
        v167 = 0;
        v14 = v319;
        v168 = v321;
        v6 = *(_QWORD *)&v334[16];
        v169 = *(_QWORD *)&v336[2];
        v7 = *(_QWORD *)&v337[16];
        v170 = *(_QWORD *)&v339[2];
        do
        {
          if (v14 == v4)
            goto LABEL_616;
          if (v168[v4])
          {
            if (v6 <= v4)
              goto LABEL_640;
            *(_DWORD *)(v169 + 4 * v4) = v167;
            if (v5 <= v4)
              goto LABEL_646;
            v3 = v167;
            if (v7 <= v167)
              goto LABEL_652;
            *(_DWORD *)(v170 + 4 * v167++) = *(_DWORD *)(v17 + 4 * v4);
          }
          ++v4;
        }
        while (v15 != v4);
        v17 = 0;
        v171 = v321;
        v5 = v324;
        v172 = v326;
        v4 = *(_QWORD *)&v334[16];
        v173 = *(_QWORD *)&v336[2];
        do
        {
          if (v14 == v17)
            goto LABEL_622;
          if (!v171[v17])
          {
            if (v5 <= v17)
              goto LABEL_664;
            v6 = *(unsigned int *)(v172 + 4 * v17);
            if (v4 <= v6)
              goto LABEL_670;
            if (v4 <= v17)
              goto LABEL_676;
            *(_DWORD *)(v173 + 4 * v17) = *(_DWORD *)(v173 + 4 * v6);
          }
          ++v17;
        }
        while (v15 != v17);
      }
      v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v165);
      v15 = *(_QWORD *)&v337[16];
      v6 = *(_QWORD *)(v14 + 24);
      v17 = v6;
      *(_QWORD *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      v174 = v328;
      if ((_DWORD)v6)
      {
        v175 = 0;
        v4 = *(_QWORD *)&v331[16];
        v176 = *(_QWORD *)&v333[2];
        v5 = *(_QWORD *)(v14 + 24);
        v177 = *(_QWORD *)(v14 + 40);
        v7 = *(_QWORD *)&v334[16];
        do
        {
          if (v175 == v4)
            goto LABEL_628;
          if (v175 == v5)
            goto LABEL_634;
          v178 = 0;
          *(_OWORD *)v340 = *(_OWORD *)(v177 + 16 * v175);
          v179 = *(_QWORD *)&v336[2];
          if (*(_DWORD *)&v340[12] == -1)
            v180 = 3;
          else
            v180 = 4;
          do
          {
            v3 = *(unsigned int *)&v340[4 * v178];
            if (v7 <= v3)
              goto LABEL_408;
            *(_DWORD *)(v176 + 4 * v178++) = *(_DWORD *)(v179 + 4 * v3);
          }
          while (v180 != v178);
          ++v175;
          v176 += 16;
        }
        while (v175 != v6);
      }
      if (*(_DWORD *)(v14 + 48))
        v181 = *(_BYTE *)(v14 + 60) == 0;
      else
        v181 = 1;
      if (v181 && *((_DWORD *)v8 + 10) == (_DWORD)v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
LABEL_561:
        if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
        {
          v279 = (void *)re::internal::GeomTypedAttribute<float>::operator[]((uint64_t)v11, 0);
          if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
          {
LABEL_563:
            v286 = *(const void **)&v339[2];
            v287 = 4 * v15;
            goto LABEL_578;
          }
        }
LABEL_704:
        *(_QWORD *)v340 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 609;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = 0;
        v329 = 2048;
        *(_QWORD *)v330 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_705:
        *(_QWORD *)v340 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v328 = 136315906;
        *(_QWORD *)&v328[4] = "operator[]";
        *(_WORD *)&v328[12] = 1024;
        *(_DWORD *)&v328[14] = 609;
        *(_WORD *)&v328[18] = 2048;
        *(_QWORD *)&v328[20] = 0;
        v329 = 2048;
        *(_QWORD *)v330 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_706:
        *(_QWORD *)v334 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = 0;
        v338 = 2048;
        *(_QWORD *)v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_707:
        *(_QWORD *)v334 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = 0;
        v338 = 2048;
        *(_QWORD *)v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_708:
        *(_QWORD *)v334 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = 0;
        v338 = 2048;
        *(_QWORD *)v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_709:
        *(_QWORD *)v334 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = 0;
        v338 = 2048;
        *(_QWORD *)v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_710:
        *(_QWORD *)v334 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = 0;
        v338 = 2048;
        *(_QWORD *)v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_711:
        *(_QWORD *)v334 = 0;
        v348 = 0u;
        v349 = 0u;
        v346 = 0u;
        v347 = 0u;
        v345 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 601;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = 0;
        v338 = 2048;
        *(_QWORD *)v339 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_712;
      }
      *(_QWORD *)&v330[2] = 0;
      memset(v328, 0, sizeof(v328));
      re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
      v184 = *(unsigned __int8 *)(v14 + 60);
      if (v184 == 2)
      {
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
        LOBYTE(v313) = 2;
        v251 = *(unsigned __int8 *)(v14 + 60);
        if (*(_BYTE *)(v14 + 60))
        {
          if (v251 != 2)
          {
            if (v251 != 1)
              goto LABEL_722;
            v252 = *(_DWORD *)(v14 + 48);
            goto LABEL_552;
          }
          LOBYTE(v310) = 2;
          v311 = v14 + 64;
          v312 = xmmword_2260E7ED0;
LABEL_557:
          while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
          {
            v300 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v302) >> 32;
            v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v301);
            v3 = *(_QWORD *)&v328[16];
            if (*(_QWORD *)&v328[16] <= v17)
              goto LABEL_682;
            *(_DWORD *)(*(_QWORD *)&v330[2] + 4 * v17) = v300;
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
          }
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v302);
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v303);
          re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
          if (*(_QWORD *)v328 && *(_QWORD *)&v330[2])
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v328 + 40))(*(_QWORD *)v328, *(_QWORD *)&v330[2]);
          goto LABEL_561;
        }
      }
      else
      {
        if (v184 == 1)
        {
          v252 = *(_DWORD *)(v14 + 48);
          if (!v252)
          {
            LOBYTE(v313) = 1;
            v315 = 0;
            v316 = 0;
            v314 = 0;
            goto LABEL_552;
          }
          v254 = *(uint64_t **)(v14 + 96);
          v255 = *(unsigned int *)(v14 + 52);
          v256 = *(_QWORD *)(v14 + 80);
          v257 = (char *)v254 + 4 * v256;
          LOBYTE(v313) = 1;
          if (v254)
          {
            v258 = (char *)v254 + 4 * v255;
            if (v256 != v255)
            {
              v258 -= 4;
              v259 = 4 * v256 - 4 * v255;
              do
              {
                v261 = *((_DWORD *)v258 + 1);
                v258 += 4;
                v260 = v261;
                if (!v259)
                  break;
                v259 -= 4;
              }
              while (v260 == -1);
            }
            goto LABEL_551;
          }
LABEL_550:
          v258 = 0;
LABEL_551:
          v314 = v254;
          v315 = v258;
          v316 = v257;
LABEL_552:
          if (v252)
          {
            v298 = *(_QWORD *)(v14 + 96);
            v299 = v298 + 4 * *(_QWORD *)(v14 + 80);
            LOBYTE(v310) = 1;
            v311 = v298;
            *(_QWORD *)&v312 = v299;
            *((_QWORD *)&v312 + 1) = v299;
          }
          else
          {
            LOBYTE(v310) = 1;
            v312 = 0uLL;
            v311 = 0;
          }
          goto LABEL_557;
        }
        if (*(_BYTE *)(v14 + 60))
          goto LABEL_716;
        LOBYTE(v313) = 0;
        LODWORD(v314) = 0;
      }
      v253 = *(_DWORD *)(v14 + 64);
      LOBYTE(v310) = 0;
      LODWORD(v311) = v253;
      goto LABEL_557;
    case 9:
      result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!(_DWORD)result)
        return result;
      v326 = 0;
      v323 = 0;
      v324 = 0;
      v321 = 0;
      v322 = 0;
      v325 = 0;
      v318 = 0;
      v319 = 0;
      v317 = 0;
      v320 = 0;
      v40 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v40)
        goto LABEL_69;
      LODWORD(v14) = v40;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_708;
      v15 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_708;
      v324 = 0;
      v325 = 1;
      v319 = 0;
      v320 = 1;
      v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      v41 = 0;
      v17 = *(_QWORD *)&v337[16];
      v42 = *(_QWORD *)&v339[2];
      do
      {
        if (v17 == v41)
          goto LABEL_596;
        *(_DWORD *)(v42 + 4 * v41) = v41;
        ++v41;
      }
      while (v14 != v41);
      *(_QWORD *)&v345 = v15;
      if (!*(_QWORD *)&v337[16])
        goto LABEL_686;
      v5 = **(_DWORD **)&v339[2];
      v17 = v319;
      v43 = v328;
      if (v319 <= v5)
        goto LABEL_692;
      v4 = 0;
      v44 = *(unsigned __int8 *)(v15 + v5);
      v321[v5] = 1;
      do
      {
        v17 = *(_QWORD *)&v337[16];
        if (*(_QWORD *)&v337[16] <= v4)
          goto LABEL_602;
        v17 = *(unsigned int *)(*(_QWORD *)&v339[2] + 4 * v4);
        v45 = *(unsigned __int8 *)(v15 + v17);
        if (v45 != v44)
        {
          v3 = v319;
          if (v319 <= v17)
            goto LABEL_656;
          v321[v17] = 1;
          v5 = v17;
          v44 = v45;
        }
        v3 = v324;
        if (v324 <= v17)
          goto LABEL_608;
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(_QWORD *)v337 && *(_QWORD *)&v339[2])
        (*(void (**)(void))(**(_QWORD **)v337 + 40))();
LABEL_69:
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(_QWORD *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      v46 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      v47 = v46;
      if (v46)
      {
        v15 = v319;
        if (v319 <= v46 - 1)
          goto LABEL_698;
        LODWORD(v48) = 0;
        v49 = v321;
        v50 = v46;
        do
        {
          v51 = *v49++;
          v48 = (v48 + v51);
          --v50;
        }
        while (v50);
      }
      else
      {
        v48 = 0;
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        v17 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0);
        v4 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        v4 = 0;
        v17 = 0;
      }
      re::DynamicArray<BOOL>::resize((uint64_t)v337, v48);
      v15 = v47;
      re::DynamicArray<unsigned int>::resize(v334, v47, &re::kInvalidMeshIndex);
      v129 = v328;
      if (v47)
      {
        v14 = 0;
        v130 = 0;
        do
        {
          v3 = v319;
          if (v319 <= v14)
            goto LABEL_614;
          if (v321[v14])
          {
            v3 = *(_QWORD *)&v334[16];
            if (*(_QWORD *)&v334[16] <= v14)
              goto LABEL_638;
            *(_DWORD *)(*(_QWORD *)&v336[2] + 4 * v14) = v130;
            if (v4 <= v14)
              goto LABEL_644;
            v5 = v130;
            v3 = *(_QWORD *)&v337[16];
            if (*(_QWORD *)&v337[16] <= (unint64_t)v130)
              goto LABEL_650;
            *(_BYTE *)(*(_QWORD *)&v339[2] + v130++) = *(_BYTE *)(v17 + v14);
          }
          ++v14;
        }
        while (v15 != v14);
        v14 = 0;
        v4 = v319;
        v131 = v321;
        v5 = v324;
        v132 = v326;
        v17 = *(_QWORD *)&v334[16];
        v133 = *(_QWORD *)&v336[2];
        do
        {
          if (v4 == v14)
            goto LABEL_620;
          if (!v131[v14])
          {
            if (v5 <= v14)
              goto LABEL_662;
            v6 = *(unsigned int *)(v132 + 4 * v14);
            if (v17 <= v6)
              goto LABEL_668;
            if (v17 <= v14)
              goto LABEL_674;
            *(_DWORD *)(v133 + 4 * v14) = *(_DWORD *)(v133 + 4 * v6);
          }
          ++v14;
        }
        while (v15 != v14);
      }
      v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v128);
      v15 = *(_QWORD *)&v337[16];
      v6 = *(_QWORD *)(v14 + 24);
      v17 = v6;
      *(_QWORD *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      v134 = v328;
      if ((_DWORD)v6)
      {
        v135 = 0;
        v4 = *(_QWORD *)&v331[16];
        v136 = *(_QWORD *)&v333[2];
        v5 = *(_QWORD *)(v14 + 24);
        v137 = *(_QWORD *)(v14 + 40);
        v7 = *(_QWORD *)&v334[16];
        do
        {
          if (v135 == v4)
            goto LABEL_626;
          if (v135 == v5)
            goto LABEL_632;
          v138 = 0;
          *(_OWORD *)v340 = *(_OWORD *)(v137 + 16 * v135);
          v139 = *(_QWORD *)&v336[2];
          if (*(_DWORD *)&v340[12] == -1)
            v140 = 3;
          else
            v140 = 4;
          do
          {
            v3 = *(unsigned int *)&v340[4 * v138];
            if (v7 <= v3)
              goto LABEL_406;
            *(_DWORD *)(v136 + 4 * v138++) = *(_DWORD *)(v139 + 4 * v3);
          }
          while (v140 != v138);
          ++v135;
          v136 += 16;
        }
        while (v135 != v6);
      }
      if (*(_DWORD *)(v14 + 48))
        v141 = *(_BYTE *)(v14 + 60) == 0;
      else
        v141 = 1;
      if (v141 && *((_DWORD *)v8 + 10) == (_DWORD)v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
        goto LABEL_533;
      }
      *(_QWORD *)&v330[2] = 0;
      memset(v328, 0, sizeof(v328));
      re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
      v144 = *(unsigned __int8 *)(v14 + 60);
      if (v144 == 2)
      {
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
        LOBYTE(v313) = 2;
        v227 = *(unsigned __int8 *)(v14 + 60);
        if (!*(_BYTE *)(v14 + 60))
        {
LABEL_438:
          v229 = *(_DWORD *)(v14 + 64);
          LOBYTE(v310) = 0;
          LODWORD(v311) = v229;
LABEL_529:
          while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
          {
            v14 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v291);
            v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v290);
            v3 = *(_QWORD *)&v328[16];
            if (*(_QWORD *)&v328[16] <= v17)
              goto LABEL_680;
            *(_DWORD *)(*(_QWORD *)&v330[2] + 4 * v17) = HIDWORD(v14);
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
          }
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v291);
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v292);
          re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
          if (*(_QWORD *)v328 && *(_QWORD *)&v330[2])
            (*(void (**)(void))(**(_QWORD **)v328 + 40))();
LABEL_533:
          if (!(*((unsigned int (**)(char **))*v11 + 2))(v11)
            || (v279 = (void *)re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0),
                !(*((unsigned int (**)(char **))*v11 + 2))(v11)))
          {
            *(_QWORD *)v340 = 0;
            v8 = (re *)v328;
            v348 = 0u;
            v349 = 0u;
            v346 = 0u;
            v347 = 0u;
            v345 = 0u;
            v11 = (char **)MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v328 = 136315906;
            *(_QWORD *)&v328[4] = "operator[]";
            *(_WORD *)&v328[12] = 1024;
            *(_DWORD *)&v328[14] = 609;
            *(_WORD *)&v328[18] = 2048;
            *(_QWORD *)&v328[20] = 0;
            v329 = 2048;
            *(_QWORD *)v330 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_536:
            v246 = 0;
LABEL_537:
            v314 = v242;
            v315 = v246;
            v316 = v245;
            goto LABEL_538;
          }
LABEL_577:
          v287 = v15;
          v286 = *(const void **)&v339[2];
          goto LABEL_578;
        }
        if (v227 == 2)
        {
          LOBYTE(v310) = 2;
          v311 = v14 + 64;
          v312 = xmmword_2260E7ED0;
          goto LABEL_529;
        }
        if (v227 != 1)
          goto LABEL_720;
        v228 = *(_DWORD *)(v14 + 48);
      }
      else
      {
        if (v144 != 1)
        {
          if (*(_BYTE *)(v14 + 60))
            goto LABEL_714;
          LOBYTE(v313) = 0;
          LODWORD(v314) = 0;
          goto LABEL_438;
        }
        v228 = *(_DWORD *)(v14 + 48);
        if (v228)
        {
          v230 = *(uint64_t **)(v14 + 96);
          v231 = *(unsigned int *)(v14 + 52);
          v232 = *(_QWORD *)(v14 + 80);
          v233 = (char *)v230 + 4 * v232;
          LOBYTE(v313) = 1;
          if (v230)
          {
            v234 = (char *)v230 + 4 * v231;
            if (v232 != v231)
            {
              v234 -= 4;
              v235 = 4 * v232 - 4 * v231;
              do
              {
                v237 = *((_DWORD *)v234 + 1);
                v234 += 4;
                v236 = v237;
                if (!v235)
                  break;
                v235 -= 4;
              }
              while (v236 == -1);
            }
          }
          else
          {
            v234 = 0;
          }
          v314 = v230;
          v315 = v234;
          v316 = v233;
        }
        else
        {
          LOBYTE(v313) = 1;
          v315 = 0;
          v316 = 0;
          v314 = 0;
        }
      }
      if (v228)
      {
        v288 = *(_QWORD *)(v14 + 96);
        v289 = v288 + 4 * *(_QWORD *)(v14 + 80);
        LOBYTE(v310) = 1;
        v311 = v288;
        *(_QWORD *)&v312 = v289;
        *((_QWORD *)&v312 + 1) = v289;
      }
      else
      {
        LOBYTE(v310) = 1;
        v312 = 0uLL;
        v311 = 0;
      }
      goto LABEL_529;
    case 0xA:
      result = (*((uint64_t (**)(char **))*v9 + 2))(v9);
      if (!(_DWORD)result)
        return result;
      v326 = 0;
      v323 = 0;
      v324 = 0;
      v321 = 0;
      v322 = 0;
      v325 = 0;
      v318 = 0;
      v319 = 0;
      v317 = 0;
      v320 = 0;
      v76 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      if (!v76)
        goto LABEL_141;
      LODWORD(v14) = v76;
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_711;
      v15 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0);
      if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
        goto LABEL_711;
      v324 = 0;
      v325 = 1;
      v319 = 0;
      v320 = 1;
      v14 = v14;
      re::DynamicArray<unsigned int>::resize(&v322, v14, &re::kInvalidMeshIndex);
      LOBYTE(v345) = 0;
      re::DynamicArray<unsigned char>::resize(&v317, v14, &v345);
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      re::DynamicArray<float>::resize((uint64_t)v337, v14);
      v77 = 0;
      v17 = *(_QWORD *)&v337[16];
      v78 = *(_QWORD *)&v339[2];
      do
      {
        if (v17 == v77)
          goto LABEL_599;
        *(_DWORD *)(v78 + 4 * v77) = v77;
        ++v77;
      }
      while (v14 != v77);
      *(_QWORD *)&v345 = v15;
      if (!*(_QWORD *)&v337[16])
        goto LABEL_689;
      v5 = **(_DWORD **)&v339[2];
      v17 = v319;
      v79 = v328;
      if (v319 <= v5)
        goto LABEL_695;
      v4 = 0;
      v80 = *(unsigned __int8 *)(v15 + v5);
      v321[v5] = 1;
      do
      {
        v17 = *(_QWORD *)&v337[16];
        if (*(_QWORD *)&v337[16] <= v4)
          goto LABEL_605;
        v17 = *(unsigned int *)(*(_QWORD *)&v339[2] + 4 * v4);
        v81 = *(unsigned __int8 *)(v15 + v17);
        if (v81 != v80)
        {
          v3 = v319;
          if (v319 <= v17)
            goto LABEL_659;
          v321[v17] = 1;
          v5 = v17;
          v80 = v81;
        }
        v3 = v324;
        if (v324 <= v17)
          goto LABEL_611;
        *(_DWORD *)(v326 + 4 * v17) = v5;
        ++v4;
      }
      while (v14 != v4);
      if (*(_QWORD *)v337 && *(_QWORD *)&v339[2])
        (*(void (**)(void))(**(_QWORD **)v337 + 40))();
LABEL_141:
      *(_QWORD *)&v339[2] = 0;
      memset(v337, 0, sizeof(v337));
      *(_QWORD *)&v336[2] = 0;
      memset(v334, 0, sizeof(v334));
      v82 = (*((uint64_t (**)(char **))*v11 + 2))(v11);
      v83 = v82;
      if (v82)
      {
        v15 = v319;
        if (v319 <= v82 - 1)
          goto LABEL_701;
        LODWORD(v84) = 0;
        v85 = v321;
        v86 = v82;
        do
        {
          v87 = *v85++;
          v84 = (v84 + v87);
          --v86;
        }
        while (v86);
      }
      else
      {
        v84 = 0;
      }
      if ((*((unsigned int (**)(char **))*v11 + 2))(v11))
      {
        v17 = re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0);
        v4 = (*((unsigned int (**)(char **))*v11 + 2))(v11);
      }
      else
      {
        v4 = 0;
        v17 = 0;
      }
      re::DynamicArray<BOOL>::resize((uint64_t)v337, v84);
      v15 = v83;
      re::DynamicArray<unsigned int>::resize(v334, v83, &re::kInvalidMeshIndex);
      v186 = v328;
      if (v83)
      {
        v14 = 0;
        v187 = 0;
        do
        {
          v3 = v319;
          if (v319 <= v14)
            goto LABEL_617;
          if (v321[v14])
          {
            v3 = *(_QWORD *)&v334[16];
            if (*(_QWORD *)&v334[16] <= v14)
              goto LABEL_641;
            *(_DWORD *)(*(_QWORD *)&v336[2] + 4 * v14) = v187;
            if (v4 <= v14)
              goto LABEL_647;
            v5 = v187;
            v3 = *(_QWORD *)&v337[16];
            if (*(_QWORD *)&v337[16] <= (unint64_t)v187)
              goto LABEL_653;
            *(_BYTE *)(*(_QWORD *)&v339[2] + v187++) = *(_BYTE *)(v17 + v14);
          }
          ++v14;
        }
        while (v15 != v14);
        v14 = 0;
        v4 = v319;
        v188 = v321;
        v5 = v324;
        v189 = v326;
        v17 = *(_QWORD *)&v334[16];
        v190 = *(_QWORD *)&v336[2];
        do
        {
          if (v4 == v14)
            goto LABEL_623;
          if (!v188[v14])
          {
            if (v5 <= v14)
              goto LABEL_665;
            v6 = *(unsigned int *)(v189 + 4 * v14);
            if (v17 <= v6)
              goto LABEL_671;
            if (v17 <= v14)
              goto LABEL_677;
            *(_DWORD *)(v190 + 4 * v14) = *(_DWORD *)(v190 + 4 * v6);
          }
          ++v14;
        }
        while (v15 != v14);
      }
      v14 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v11, v185);
      v15 = *(_QWORD *)&v337[16];
      v6 = *(_QWORD *)(v14 + 24);
      v17 = v6;
      *(_QWORD *)&v333[2] = 0;
      memset(v331, 0, sizeof(v331));
      re::DynamicArray<re::GeomCell4>::resize(v331, v6);
      v191 = v328;
      if ((_DWORD)v6)
      {
        v192 = 0;
        v4 = *(_QWORD *)&v331[16];
        v193 = *(_QWORD *)&v333[2];
        v5 = *(_QWORD *)(v14 + 24);
        v194 = *(_QWORD *)(v14 + 40);
        v7 = *(_QWORD *)&v334[16];
        do
        {
          if (v192 == v4)
            goto LABEL_629;
          if (v192 == v5)
            goto LABEL_635;
          v195 = 0;
          *(_OWORD *)v340 = *(_OWORD *)(v194 + 16 * v192);
          v196 = *(_QWORD *)&v336[2];
          if (*(_DWORD *)&v340[12] == -1)
            v197 = 3;
          else
            v197 = 4;
          do
          {
            v3 = *(unsigned int *)&v340[4 * v195];
            if (v7 <= v3)
              goto LABEL_409;
            *(_DWORD *)(v193 + 4 * v195++) = *(_DWORD *)(v196 + 4 * v3);
          }
          while (v197 != v195);
          ++v192;
          v193 += 16;
        }
        while (v192 != v6);
      }
      if (*(_DWORD *)(v14 + 48))
        v198 = *(_BYTE *)(v14 + 60) == 0;
      else
        v198 = 1;
      if (v198 && *((_DWORD *)v8 + 10) == (_DWORD)v6)
      {
        re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t)v331);
        goto LABEL_575;
      }
      *(_QWORD *)&v330[2] = 0;
      memset(v328, 0, sizeof(v328));
      re::DynamicArray<unsigned int>::resize(v328, v6, &re::kInvalidMeshIndex);
      v201 = *(unsigned __int8 *)(v14 + 60);
      if (v201 == 2)
      {
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator(&v314, (uint64_t *)(v14 + 64));
        LOBYTE(v313) = 2;
        v263 = *(unsigned __int8 *)(v14 + 60);
        if (!*(_BYTE *)(v14 + 60))
        {
LABEL_474:
          v265 = *(_DWORD *)(v14 + 64);
          LOBYTE(v310) = 0;
          LODWORD(v311) = v265;
LABEL_571:
          while ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v313, &v310) & 1) == 0)
          {
            v306 = (unint64_t)re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v308) >> 32;
            v17 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v313, v307);
            v3 = *(_QWORD *)&v328[16];
            if (*(_QWORD *)&v328[16] <= v17)
              goto LABEL_683;
            *(_DWORD *)(*(_QWORD *)&v330[2] + 4 * v17) = v306;
            re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v313);
          }
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v310, v308);
          re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v313, v309);
          re::GeomMesh::updateFaceVaryingAttribute((uint64_t)v8, v11[1], v15, (uint64_t *)v331, (uint64_t *)v328);
          if (*(_QWORD *)v328 && *(_QWORD *)&v330[2])
            (*(void (**)(void))(**(_QWORD **)v328 + 40))();
LABEL_575:
          if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
            goto LABEL_705;
          v279 = (void *)re::internal::GeomTypedAttribute<signed char>::operator[]((uint64_t)v11, 0);
          if (!(*((unsigned int (**)(char **))*v11 + 2))(v11))
            goto LABEL_705;
          goto LABEL_577;
        }
        if (v263 == 2)
        {
          LOBYTE(v310) = 2;
          v311 = v14 + 64;
          v312 = xmmword_2260E7ED0;
          goto LABEL_571;
        }
        if (v263 != 1)
          goto LABEL_723;
        v264 = *(_DWORD *)(v14 + 48);
      }
      else
      {
        if (v201 != 1)
        {
          if (*(_BYTE *)(v14 + 60))
            goto LABEL_717;
          LOBYTE(v313) = 0;
          LODWORD(v314) = 0;
          goto LABEL_474;
        }
        v264 = *(_DWORD *)(v14 + 48);
        if (v264)
        {
          v266 = *(uint64_t **)(v14 + 96);
          v267 = *(unsigned int *)(v14 + 52);
          v268 = *(_QWORD *)(v14 + 80);
          v269 = (char *)v266 + 4 * v268;
          LOBYTE(v313) = 1;
          if (v266)
          {
            v270 = (char *)v266 + 4 * v267;
            if (v268 != v267)
            {
              v270 -= 4;
              v271 = 4 * v268 - 4 * v267;
              do
              {
                v273 = *((_DWORD *)v270 + 1);
                v270 += 4;
                v272 = v273;
                if (!v271)
                  break;
                v271 -= 4;
              }
              while (v272 == -1);
            }
          }
          else
          {
            v270 = 0;
          }
          v314 = v266;
          v315 = v270;
          v316 = v269;
        }
        else
        {
          LOBYTE(v313) = 1;
          v315 = 0;
          v316 = 0;
          v314 = 0;
        }
      }
      if (v264)
      {
        v304 = *(_QWORD *)(v14 + 96);
        v305 = v304 + 4 * *(_QWORD *)(v14 + 80);
        LOBYTE(v310) = 1;
        v311 = v304;
        *(_QWORD *)&v312 = v305;
        *((_QWORD *)&v312 + 1) = v305;
      }
      else
      {
        LOBYTE(v310) = 1;
        v312 = 0uLL;
        v311 = 0;
      }
      goto LABEL_571;
    default:
      re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) The attribute is not an integer type.", "!\"Unreachable code\"", "mergeDiscreteFaceVaryingAttributeValues", 596);
      _os_crash();
      __break(1u);
      goto LABEL_703;
  }
}

uint64_t re::makeMeshFromFaces@<X0>(unint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  _DWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  unsigned int *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  _QWORD v60[2];
  unint64_t v61;
  int v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  unsigned int v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned int v77;
  uint64_t v78;
  _QWORD *v79;
  _BYTE v80[18];
  __int16 v81;
  _OWORD *v82;
  __int16 v83;
  _OWORD *v84;
  _QWORD v85[6];
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v10 = a1;
  v88 = *MEMORY[0x24BDAC8D0];
  v67 = 0;
  v64[1] = 0;
  v65 = 0;
  v63 = 0;
  v64[0] = 0;
  v66 = 0;
  v60[0] = 0;
  v60[1] = 0;
  v12 = *(unsigned int *)(a1 + 40);
  v13 = *((unsigned int *)a2 + 2);
  *(_QWORD *)(a5 + 16) = 0;
  ++*(_DWORD *)(a5 + 24);
  if (*(_QWORD *)(a5 + 8) < v13)
    re::DynamicArray<int>::setCapacity((_QWORD *)a5, v13);
  v14 = &v69;
  v61 = 0;
  v62 = 1;
  re::DynamicArray<unsigned int>::resize(v60, v12, &re::kInvalidMeshIndex);
  if (v13)
  {
    v16 = 0;
    while (1)
    {
      v17 = a2[1];
      if (v17 <= v16)
        break;
      v15 = (_DWORD *)(*a2 + 4 * v16);
      v6 = *v15;
      v7 = v61;
      if (v61 <= v6)
        goto LABEL_71;
      if (*(_DWORD *)(v63 + 4 * v6) == -1)
      {
        *(_DWORD *)(v63 + 4 * v6) = *(_QWORD *)(a5 + 16);
        re::DynamicArray<int>::add((_QWORD *)a5, v15);
      }
      if (++v16 == v13)
        goto LABEL_10;
    }
LABEL_70:
    re::internal::assertLog((re::internal *)6, (uint64_t)v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, v17, v57);
    _os_crash();
    __break(1u);
LABEL_71:
    *(_QWORD *)v80 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v85[0]) = 136315906;
    *(_QWORD *)((char *)v85 + 4) = "operator[]";
    WORD2(v85[1]) = 1024;
    *(_DWORD *)((char *)&v85[1] + 6) = 789;
    WORD1(v85[2]) = 2048;
    *(_QWORD *)((char *)&v85[2] + 4) = v6;
    WORD2(v85[3]) = 2048;
    *(_QWORD *)((char *)&v85[3] + 6) = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_72;
  }
LABEL_10:
  v57 = a6;
  v18 = v10 + 16;
  v13 = *(unsigned int *)(v10 + 16);
  v6 = *(unsigned int *)(a5 + 16);
  v65 = 0;
  ++v66;
  re::DynamicArray<unsigned int>::resize(v64, v13, &re::kInvalidMeshIndex);
  if (!v6)
  {
    v21 = 0;
    goto LABEL_24;
  }
  v20 = 0;
  v21 = 0;
  v12 = *(_QWORD *)(a5 + 16);
  a6 = (unint64_t)v65;
  v22 = *(_QWORD *)(a5 + 32);
  v23 = *(_QWORD *)(v10 + 40);
  v24 = *(_QWORD *)(v10 + 56);
  do
  {
    if (v20 == (_QWORD *)v12)
      goto LABEL_81;
    v7 = *(unsigned int *)(v22 + 4 * (_QWORD)v20);
    if (v23 <= v7)
    {
LABEL_82:
      *(_QWORD *)v80 = 0;
      v14[3] = 0u;
      v14[4] = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v85[0]) = 136315906;
      *(_QWORD *)((char *)v85 + 4) = "operator[]";
      WORD2(v85[1]) = 1024;
      *(_DWORD *)((char *)&v85[1] + 6) = 797;
      WORD1(v85[2]) = 2048;
      *(_QWORD *)((char *)&v85[2] + 4) = v7;
      WORD2(v85[3]) = 2048;
      *(_QWORD *)((char *)&v85[3] + 6) = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_83:
      *(_QWORD *)v80 = 0;
      v14[3] = 0u;
      v14[4] = 0u;
      v70 = 0u;
      v71 = 0u;
      v69 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v85[0]) = 136315906;
      *(_QWORD *)((char *)v85 + 4) = "operator[]";
      WORD2(v85[1]) = 1024;
      *(_DWORD *)((char *)&v85[1] + 6) = 789;
      WORD1(v85[2]) = 2048;
      *(_QWORD *)((char *)&v85[2] + 4) = v12;
      WORD2(v85[3]) = 2048;
      *(_QWORD *)((char *)&v85[3] + 6) = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_84:
      v68 = 0;
      v86 = 0u;
      v87 = 0u;
      memset(v85, 0, sizeof(v85));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v80 = 136315906;
      *(_QWORD *)&v80[4] = "operator[]";
      *(_WORD *)&v80[12] = 1024;
      *(_DWORD *)&v80[14] = 797;
      v81 = 2048;
      v82 = (_OWORD *)v6;
      v83 = 2048;
      v84 = (_OWORD *)v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v25 = 0;
    *(_OWORD *)v80 = *(_OWORD *)(v24 + 16 * v7);
    v26 = v67;
    if (*(_DWORD *)&v80[12] == -1)
      v27 = 3;
    else
      v27 = 4;
    do
    {
      v7 = *(unsigned int *)&v80[4 * v25];
      if (a6 <= v7)
      {
        v68 = 0;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v69 = 0u;
        v16 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v85[0]) = 136315906;
        *(_QWORD *)((char *)v85 + 4) = "operator[]";
        WORD2(v85[1]) = 1024;
        *(_DWORD *)((char *)&v85[1] + 6) = 789;
        WORD1(v85[2]) = 2048;
        *(_QWORD *)((char *)&v85[2] + 4) = v7;
        WORD2(v85[3]) = 2048;
        *(_QWORD *)((char *)&v85[3] + 6) = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_70;
      }
      if (*(_DWORD *)(v26 + 4 * v7) == -1)
        *(_DWORD *)(v26 + 4 * v7) = v21++;
      ++v25;
    }
    while (v27 != v25);
    v20 = (_QWORD *)((char *)v20 + 1);
  }
  while (v20 != (_QWORD *)v6);
LABEL_24:
  v28 = a3[1];
  if ((_DWORD)v28)
  {
    v29 = 0;
    v6 = (unint64_t)v65;
    v30 = v67;
    v31 = *a3;
    v32 = a4;
    while (v28 != v29)
    {
      v7 = *(unsigned int *)(v31 + 4 * v29);
      if (v6 <= v7)
        goto LABEL_73;
      if (*(_DWORD *)(v30 + 4 * v7) == -1)
        *(_DWORD *)(v30 + 4 * v7) = v21++;
      if (v28 == ++v29)
        goto LABEL_33;
    }
LABEL_72:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v28, v28);
    _os_crash();
    __break(1u);
LABEL_73:
    *(_QWORD *)v80 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v85[0]) = 136315906;
    *(_QWORD *)((char *)v85 + 4) = "operator[]";
    WORD2(v85[1]) = 1024;
    *(_DWORD *)((char *)&v85[1] + 6) = 789;
    WORD1(v85[2]) = 2048;
    *(_QWORD *)((char *)&v85[2] + 4) = v7;
    WORD2(v85[3]) = 2048;
    *(_QWORD *)((char *)&v85[3] + 6) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_74:
    *(_QWORD *)v80 = 0;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v85[0]) = 136315906;
    *(_QWORD *)((char *)v85 + 4) = "operator[]";
    WORD2(v85[1]) = 1024;
    *(_DWORD *)((char *)&v85[1] + 6) = 789;
    WORD1(v85[2]) = 2048;
    *(_QWORD *)((char *)&v85[2] + 4) = v6;
    WORD2(v85[3]) = 2048;
    *(_QWORD *)((char *)&v85[3] + 6) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_75:
    v68 = 0;
    v86 = 0u;
    v87 = 0u;
    memset(v85, 0, sizeof(v85));
    v45 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v80 = 136315906;
    *(_QWORD *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 789;
    v81 = 2048;
    v82 = v14;
    v83 = 2048;
    v84 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_76:
    v68 = 0;
    v86 = 0u;
    v87 = 0u;
    memset(v85, 0, sizeof(v85));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v80 = 136315906;
    *(_QWORD *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 797;
    v81 = 2048;
    v82 = (_OWORD *)v6;
    v83 = 2048;
    v84 = (_OWORD *)v45;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_77:
    v68 = 0;
    v86 = 0u;
    v87 = 0u;
    memset(v85, 0, sizeof(v85));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v80 = 136315906;
    *(_QWORD *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 797;
    v81 = 2048;
    v82 = (_OWORD *)v6;
    v83 = 2048;
    v84 = (_OWORD *)v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_78:
    v68 = 0;
    v86 = 0u;
    v87 = 0u;
    memset(v85, 0, sizeof(v85));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v80 = 136315906;
    *(_QWORD *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 797;
    v81 = 2048;
    v82 = (_OWORD *)v10;
    v83 = 2048;
    v84 = (_OWORD *)v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_79:
    v68 = 0;
    v86 = 0u;
    v87 = 0u;
    memset(v85, 0, sizeof(v85));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v80 = 136315906;
    *(_QWORD *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 797;
    v81 = 2048;
    v82 = (_OWORD *)v12;
    v83 = 2048;
    v84 = (_OWORD *)v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    v68 = 0;
    v86 = 0u;
    v87 = 0u;
    memset(v85, 0, sizeof(v85));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v80 = 136315906;
    *(_QWORD *)&v80[4] = "operator[]";
    *(_WORD *)&v80[12] = 1024;
    *(_DWORD *)&v80[14] = 789;
    v81 = 2048;
    v82 = (_OWORD *)a6;
    v83 = 2048;
    v84 = (_OWORD *)a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_81:
    *(_QWORD *)v80 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    v23 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v85[0]) = 136315906;
    *(_QWORD *)((char *)v85 + 4) = "operator[]";
    WORD2(v85[1]) = 1024;
    *(_DWORD *)((char *)&v85[1] + 6) = 789;
    WORD1(v85[2]) = 2048;
    *(_QWORD *)((char *)&v85[2] + 4) = v12;
    WORD2(v85[3]) = 2048;
    *(_QWORD *)((char *)&v85[3] + 6) = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_82;
  }
  v32 = a4;
LABEL_33:
  re::DynamicArray<float>::resize(v32, v21);
  if ((_DWORD)v13)
  {
    v33 = 0;
    v6 = (unint64_t)v65;
    v34 = v67;
    v7 = *(_QWORD *)(v32 + 16);
    v35 = *(_QWORD *)(v32 + 32);
    while ((_QWORD *)v6 != v33)
    {
      v12 = *(unsigned int *)(v34 + 4 * (_QWORD)v33);
      if ((_DWORD)v12 != -1)
      {
        if (v7 <= v12)
          goto LABEL_83;
        *(_DWORD *)(v35 + 4 * v12) = (_DWORD)v33;
      }
      v33 = (_QWORD *)((char *)v33 + 1);
      if ((_QWORD *)v13 == v33)
        goto LABEL_40;
    }
    goto LABEL_74;
  }
LABEL_40:
  v12 = (unint64_t)&v69;
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v69);
  v36 = *(_DWORD *)(v32 + 16);
  v37 = *(_QWORD *)(a5 + 16);
  v7 = v37;
  LODWORD(v69) = v36;
  v74 = v36;
  if (v75)
  {
    v6 = (unint64_t)v76;
    v38 = 8 * v75;
    do
    {
      v39 = *(_QWORD *)v6;
      v6 += 8;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v39 + 72))(v39, v74);
      v38 -= 8;
    }
    while (v38);
  }
  re::DynamicArray<re::GeomCell4>::resize((_QWORD *)&v69 + 1, v37);
  v77 = v37;
  if (v78)
  {
    v6 = (unint64_t)v79;
    v40 = 8 * v78;
    do
    {
      v41 = *(_QWORD *)v6;
      v6 += 8;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v41 + 72))(v41, v77);
      v40 -= 8;
    }
    while (v40);
  }
  if ((_DWORD)v37)
  {
    v42 = 0;
    v14 = *(__int128 **)(a5 + 16);
    v13 = (unint64_t)v65;
    v43 = v67;
    a6 = *((_QWORD *)&v70 + 1);
    v44 = *(_QWORD *)(a5 + 32);
    v45 = *(_QWORD *)(v10 + 40);
    v46 = *(_QWORD *)(v10 + 56);
    v47 = (_DWORD *)(*((_QWORD *)&v71 + 1) + 8);
    while (v14 != v42)
    {
      v6 = *(unsigned int *)(v44 + 4 * (_QWORD)v42);
      if (v45 <= v6)
        goto LABEL_76;
      v48 = (unsigned int *)(v46 + 16 * v6);
      v6 = *v48;
      if (v13 <= v6)
        goto LABEL_77;
      v10 = v48[1];
      if (v13 <= v10)
        goto LABEL_78;
      v12 = v48[2];
      if (v13 <= v12)
        goto LABEL_79;
      v49 = *(_DWORD *)(v43 + 4 * v6);
      v6 = v48[3];
      v50 = *(_DWORD *)(v43 + 4 * v10);
      v51 = *(_DWORD *)(v43 + 4 * v12);
      if ((_DWORD)v6 == -1)
      {
        v52 = -1;
      }
      else
      {
        if (v13 <= v6)
          goto LABEL_84;
        v52 = *(_DWORD *)(v43 + 4 * v6);
      }
      if ((__int128 *)a6 == v42)
        goto LABEL_80;
      *(v47 - 2) = v49;
      *(v47 - 1) = v50;
      *v47 = v51;
      v47[1] = v52;
      v47 += 4;
      v42 = (__int128 *)((char *)v42 + 1);
      if ((__int128 *)v7 == v42)
        goto LABEL_59;
    }
    goto LABEL_75;
  }
LABEL_59:
  re::internal::addAndCopyAttributeValues(v18, (_anonymous_namespace_ *)&v69, 0);
  re::internal::addAndCopyAttributeValues(v18, (_anonymous_namespace_ *)&v69, 4);
  v53 = *(_QWORD *)(a4 + 16);
  v85[0] = *(_QWORD *)(a4 + 32);
  v85[1] = v53;
  re::internal::addAndCopyVertexAttributes(v18, v85, (unsigned int *)&v69);
  v54 = *(_QWORD *)(a5 + 16);
  v85[0] = *(_QWORD *)(a5 + 32);
  v85[1] = v54;
  re::internal::addAndCopyFaceAttributes(v18, v85, (uint64_t)&v69);
  v55 = *(_QWORD *)(a5 + 16);
  v85[0] = *(_QWORD *)(a5 + 32);
  v85[1] = v55;
  re::internal::addAndCopyFaceVaryingAttributes(v18, v85, (_anonymous_namespace_ *)&v69);
  re::GeomMesh::GeomMesh(v57, (uint64_t)&v69);
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v72);
  if (*((_QWORD *)&v69 + 1) && *((_QWORD *)&v71 + 1))
    (*(void (**)(void))(**((_QWORD **)&v69 + 1) + 40))();
  if (v60[0] && v63)
    (*(void (**)(void))(*(_QWORD *)v60[0] + 40))();
  result = v64[0];
  if (v64[0])
  {
    if (v67)
      return (*(uint64_t (**)(void))(*(_QWORD *)v64[0] + 40))();
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _BYTE v13[12];
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  int v20;
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  uint64_t v24;

  v24 = 0;
  v21 = 0;
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  re::makeMeshFromFaces(a1, a2, a3, (uint64_t)v22, (uint64_t)v19, a6);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v13, (uint64_t)v22);
  re::GeomIndexMap::operator=(a4, (uint64_t)v13);
  if (!v14)
    goto LABEL_12;
  if (v14 == 2)
  {
    v9 = v18;
    if (!v18)
      goto LABEL_12;
    if (v16)
      v16 = 0;
    if (!v15)
      goto LABEL_12;
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    goto LABEL_12;
  }
  if (v14 != 1)
  {
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_31;
  }
  v9 = v15;
  if (v15 && v17)
    goto LABEL_11;
LABEL_12:
  re::GeomIndexMap::GeomIndexMap((uint64_t)v13, (uint64_t)v19);
  re::GeomIndexMap::operator=(a5, (uint64_t)v13);
  if (!v14)
    goto LABEL_23;
  if (v14 != 2)
  {
    if (v14 == 1)
    {
      v11 = v15;
      if (!v15 || !v17)
        goto LABEL_23;
      goto LABEL_22;
    }
LABEL_31:
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v11 = v18;
  if (!v18)
    goto LABEL_23;
  if (v16)
    v16 = 0;
  if (!v15)
    goto LABEL_23;
LABEL_22:
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
LABEL_23:
  if (v19[0] && v21)
    (*(void (**)(_QWORD))(*(_QWORD *)v19[0] + 40))(v19[0]);
  result = v22[0];
  if (v22[0])
  {
    if (v24)
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v22[0] + 40))(v22[0]);
  }
  return result;
}

unsigned int *re::remapIndexMap@<X0>(unsigned int *this@<X0>, const re::GeomIndexMap *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unsigned int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned __int16 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  _BYTE v86[34];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v5 = (uint64_t)this;
  v92 = *MEMORY[0x24BDAC8D0];
  v7 = *this;
  if (*((_BYTE *)this + 12))
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
    goto LABEL_15;
  v9 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
    v10 = *((_BYTE *)a2 + 12) == 0;
  else
    v10 = 1;
  if (v10 && v7 == v9)
  {
    v27 = 0;
    *(_QWORD *)a3 = 0xFFFFFFFF00000000;
    *(_DWORD *)(a3 + 8) = -1;
    *(_BYTE *)(a3 + 12) = 0;
    if (v7 - 1 <= 0xFFFFFFFD)
    {
      *(_DWORD *)(a3 + 4) = 0;
      *(_DWORD *)(a3 + 8) = v7 - 1;
      v27 = v7;
      *(_DWORD *)a3 = v7;
    }
    *(_DWORD *)(a3 + 16) = v27;
    return this;
  }
  if (v7)
  {
LABEL_15:
    if (this[1] || this[2] + 1 != v7)
    {
LABEL_27:
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v19 = v7;
      v21 = *(unsigned __int8 *)(v5 + 12);
      if (*(_BYTE *)(v5 + 12))
      {
        if (v21 == 2)
        {
          v80 = v5 + 16;
          v81 = 0;
          v29 = *(_QWORD *)(v5 + 32);
          if (v29 <= 0xF)
          {
LABEL_42:
            v34 = -1;
          }
          else
          {
            v30 = 0;
            v31 = *(_QWORD *)(v5 + 16);
            v32 = v29 >> 4;
            while (1)
            {
              v33 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v31 + v30)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
              v81 = (unsigned __int16)~v33;
              if (v33 != 0xFFFF)
                break;
              v30 += 16;
              if (!--v32)
                goto LABEL_42;
            }
            v34 = __clz(__rbit64((unsigned __int16)~v33)) + v30;
          }
          v82 = v34;
          LOBYTE(v79) = 2;
          LOBYTE(v85) = 2;
          *(_QWORD *)&v86[4] = v5 + 16;
          *(_OWORD *)&v86[12] = xmmword_2260E7ED0;
        }
        else
        {
          if (v21 != 1)
            goto LABEL_105;
          if (*(_DWORD *)v5)
          {
            v22 = *(_QWORD *)(v5 + 48);
            v23 = *(unsigned int *)(v5 + 4);
            v24 = *(_QWORD *)(v5 + 32);
            v25 = v22 + 4 * v24;
            LOBYTE(v79) = 1;
            if (v22)
            {
              if (v24 == v23)
              {
                v26 = v22 + 4 * v23;
              }
              else
              {
                v35 = 4 * v23;
                v36 = 4 * v24;
                do
                {
                  v37 = v35 + 4;
                  if (v36 == v35)
                    break;
                  v38 = *(_DWORD *)(v22 + v35);
                  v35 += 4;
                }
                while (v38 == -1);
                v26 = v22 + v37 - 4;
              }
            }
            else
            {
              v26 = 0;
            }
            v80 = v22;
            v81 = v26;
            v82 = v25;
            v39 = *(_QWORD *)(v5 + 48);
            v40 = v39 + 4 * *(_QWORD *)(v5 + 32);
            LOBYTE(v85) = 1;
            *(_QWORD *)&v86[4] = v39;
            *(_QWORD *)&v86[12] = v40;
            *(_QWORD *)&v86[20] = v40;
          }
          else
          {
            LOBYTE(v79) = 1;
            v81 = 0;
            v82 = 0;
            v80 = 0;
            LOBYTE(v85) = 1;
            memset(&v86[4], 0, 24);
          }
        }
      }
      else
      {
        LOBYTE(v79) = 0;
        LODWORD(v80) = 0;
        v28 = *(_DWORD *)(v5 + 16);
        LOBYTE(v85) = 0;
        *(_DWORD *)&v86[4] = v28;
      }
      if ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v79, &v85) & 1) != 0)
      {
LABEL_64:
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v85, v41);
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v79, v48);
        re::GeomIndexMap::GeomIndexMap((unsigned int *)a3, (uint64_t *)&v87);
        this = (unsigned int *)*((_QWORD *)&v90 + 1);
        if (!*((_QWORD *)&v90 + 1))
          return this;
        if (*((_QWORD *)&v87 + 1))
          *((_QWORD *)&v87 + 1) = 0;
        if (!(_QWORD)v87)
          return this;
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 40))(this);
      }
      while (1)
      {
        v75 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v79, v41);
        v43 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v79, v42);
        v45 = HIDWORD(v43);
        LODWORD(v72) = HIDWORD(v43);
        v46 = *((unsigned __int8 *)a2 + 12);
        if (v46 == 2)
        {
          v47 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)a2 + 2, (unsigned int *)&v72);
          if (v47 == -1)
            goto LABEL_62;
          LODWORD(v45) = *(_DWORD *)(*((_QWORD *)a2 + 3) + 8 * v47 + 4);
        }
        else
        {
          if (v46 != 1)
          {
            if (*((_BYTE *)a2 + 12))
              goto LABEL_103;
            if (*((_DWORD *)a2 + 4) <= HIDWORD(v43))
              LODWORD(v45) = -1;
            goto LABEL_63;
          }
          if (*((_QWORD *)a2 + 4) <= v45)
          {
LABEL_62:
            LODWORD(v45) = -1;
            goto LABEL_63;
          }
          LODWORD(v45) = *(_DWORD *)(*((_QWORD *)a2 + 6) + 4 * v45);
        }
LABEL_63:
        LODWORD(v72) = v45;
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addNew((_anonymous_namespace_ *)&v87, (unsigned int *)&v75, (unsigned int *)&v72);
        re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v79);
        if ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v79, &v85) & 1) != 0)
          goto LABEL_64;
      }
    }
    v9 = *(_DWORD *)a2;
  }
  if (v9 && (*((_DWORD *)a2 + 1) || *((_DWORD *)a2 + 2) + 1 != v9))
    goto LABEL_27;
  v83 = 0;
  v80 = 0;
  v81 = 0;
  v79 = 0;
  LODWORD(v82) = 0;
  re::DynamicArray<unsigned int>::resize(&v79, v7, &re::kInvalidMeshIndex);
  v13 = *(unsigned __int8 *)(v5 + 12);
  if (*(_BYTE *)(v5 + 12))
  {
    if (v13 == 2)
    {
      v76 = v5 + 16;
      v77 = 0;
      v50 = *(_QWORD *)(v5 + 32);
      if (v50 <= 0xF)
      {
LABEL_75:
        v55 = -1;
      }
      else
      {
        v51 = 0;
        v52 = *(_QWORD *)(v5 + 16);
        v53 = v50 >> 4;
        while (1)
        {
          v54 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v52 + v51)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v77 = (unsigned __int16)~v54;
          if (v54 != 0xFFFF)
            break;
          v51 += 16;
          if (!--v53)
            goto LABEL_75;
        }
        v55 = __clz(__rbit64((unsigned __int16)~v54)) + v51;
      }
      v78 = v55;
      LOBYTE(v75) = 2;
      LOBYTE(v72) = 2;
      v73 = v5 + 16;
      v74 = xmmword_2260E7ED0;
    }
    else
    {
      if (v13 != 1)
        goto LABEL_106;
      if (*(_DWORD *)v5)
      {
        v14 = *(_QWORD *)(v5 + 48);
        v15 = *(unsigned int *)(v5 + 4);
        v16 = *(_QWORD *)(v5 + 32);
        v17 = v14 + 4 * v16;
        LOBYTE(v75) = 1;
        if (v14)
        {
          if (v16 == v15)
          {
            v18 = v14 + 4 * v15;
          }
          else
          {
            v56 = 4 * v15;
            v57 = 4 * v16;
            do
            {
              v58 = v56 + 4;
              if (v57 == v56)
                break;
              v59 = *(_DWORD *)(v14 + v56);
              v56 += 4;
            }
            while (v59 == -1);
            v18 = v14 + v58 - 4;
          }
        }
        else
        {
          v18 = 0;
        }
        v76 = v14;
        v77 = v18;
        v78 = v17;
        v60 = *(_QWORD *)(v5 + 48);
        v61 = v60 + 4 * *(_QWORD *)(v5 + 32);
        LOBYTE(v72) = 1;
        v73 = v60;
        *(_QWORD *)&v74 = v61;
        *((_QWORD *)&v74 + 1) = v61;
      }
      else
      {
        LOBYTE(v75) = 1;
        v77 = 0;
        v78 = 0;
        v76 = 0;
        LOBYTE(v72) = 1;
        v74 = 0uLL;
        v73 = 0;
      }
    }
  }
  else
  {
    LOBYTE(v75) = 0;
    LODWORD(v76) = 0;
    v49 = *(_DWORD *)(v5 + 16);
    LOBYTE(v72) = 0;
    LODWORD(v73) = v49;
  }
  if ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v75, &v72) & 1) != 0)
  {
LABEL_99:
    re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v72, v62);
    re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *)&v75, v71);
    re::GeomIndexMap::GeomIndexMap(a3, (uint64_t)&v79);
    this = (unsigned int *)v79;
    if (!v79 || !v83)
      return this;
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 40))(this);
  }
  while (1)
  {
    v63 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v75, v62);
    v65 = HIDWORD(v63);
    LODWORD(v87) = HIDWORD(v63);
    v66 = *((unsigned __int8 *)a2 + 12);
    if (v66 == 2)
    {
      v68 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)a2 + 2, (unsigned int *)&v87);
      if (v68 != -1)
      {
        v67 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 8 * v68 + 4);
        goto LABEL_97;
      }
LABEL_96:
      v67 = -1;
      goto LABEL_97;
    }
    if (v66 == 1)
    {
      if (*((_QWORD *)a2 + 4) > v65)
      {
        v67 = *(_DWORD *)(*((_QWORD *)a2 + 6) + 4 * v65);
        goto LABEL_97;
      }
      goto LABEL_96;
    }
    if (*((_BYTE *)a2 + 12))
      break;
    if (*((_DWORD *)a2 + 4) <= HIDWORD(v63))
      v67 = -1;
    else
      v67 = HIDWORD(v63);
LABEL_97:
    v69 = re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*((unsigned __int8 *)&v75, v64);
    v70 = v81;
    if (v81 <= v69)
    {
      v84 = 0;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v87 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v85 = 136315906;
      *(_QWORD *)v86 = "operator[]";
      *(_WORD *)&v86[8] = 1024;
      *(_DWORD *)&v86[10] = 789;
      *(_WORD *)&v86[14] = 2048;
      *(_QWORD *)&v86[16] = v69;
      *(_WORD *)&v86[24] = 2048;
      *(_QWORD *)&v86[26] = v70;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_103:
      re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82);
      _os_crash();
      __break(1u);
    }
    *(_DWORD *)(v83 + 4 * v69) = v67;
    re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(&v75);
    if ((re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==((unsigned __int8 *)&v75, &v72) & 1) != 0)
      goto LABEL_99;
  }
  re::internal::assertLog((re::internal *)4, v64, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680, v72, v73);
  _os_crash();
  __break(1u);
LABEL_105:
  re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
  _os_crash();
  __break(1u);
LABEL_106:
  re::internal::assertLog((re::internal *)4, v12, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "begin", 699);
  this = (unsigned int *)_os_crash();
  __break(1u);
  return this;
}

uint64_t re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator*(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  unsigned int *v6;
  uint64_t result;

  v2 = *a1;
  if (v2 == 2)
  {
    v5 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) + 8 * *((_QWORD *)a1 + 3));
    LODWORD(v3) = *v5;
    v4 = v5[1];
    return v3 | (unint64_t)(v4 << 32);
  }
  if (v2 == 1)
  {
    v6 = (unsigned int *)*((_QWORD *)a1 + 2);
    v3 = ((unint64_t)v6 - *((_QWORD *)a1 + 1)) >> 2;
    v4 = *v6;
    return v3 | (unint64_t)(v4 << 32);
  }
  if (!*a1)
  {
    LODWORD(v3) = *((_DWORD *)a1 + 2);
    v4 = v3;
    return v3 | (unint64_t)(v4 << 32);
  }
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "operator*", 177);
  result = _os_crash();
  __break(1u);
  return result;
}

_DWORD *re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addNew(_anonymous_namespace_ *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::internalAdd(a1, a2, a3);
  else
    return (_DWORD *)(*((_QWORD *)a1 + 1) + 8 * v6 + 4);
}

float32x4_t re::`anonymous namespace'::transformTangentsArray(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2;
  unint64_t i;
  float32x4_t result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    for (i = 0; i != v2; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 8))
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)(*(_QWORD *)a1 + 16 * i))), a2[1], *(float32x2_t *)(*(_QWORD *)a1 + 16 * i), 1), a2[2], *(float32x4_t *)(*(_QWORD *)a1 + 16 * i), 2);
      *(float32x4_t *)(*(_QWORD *)a1 + 16 * i) = result;
    }
  }
  return result;
}

uint64_t re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::operator==(unsigned __int8 *a1, _QWORD *a2)
{
  int v2;
  uint64_t result;

  v2 = *a1;
  if (v2 != *(unsigned __int8 *)a2)
    return 0;
  if (v2 == 2)
    return *((_QWORD *)a1 + 3) == a2[3];
  if (v2 == 1)
  {
    if (*((_QWORD *)a1 + 1) != a2[1] || *((_QWORD *)a1 + 2) != a2[2])
      return 0;
    return *((_QWORD *)a1 + 3) == a2[3];
  }
  if (*a1)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "operator==", 197);
    result = _os_crash();
    __break(1u);
    return result;
  }
  return *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2);
}

_QWORD *re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::increment(_QWORD *this)
{
  int v1;
  int *v2;
  int *v3;
  int *v4;
  int v5;

  v1 = *(unsigned __int8 *)this;
  if (v1 == 2)
    return re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(this + 1);
  if (v1 == 1)
  {
    v2 = (int *)this[2];
    if (v2)
    {
      v3 = (int *)this[3];
      if (v2 != v3)
      {
        v4 = v2 + 1;
        do
        {
          this[2] = v4;
          if (v4 == v3)
            break;
          v5 = *v4++;
        }
        while (v5 == -1);
      }
    }
  }
  else if (!*(_BYTE *)this)
  {
    ++*((_DWORD *)this + 2);
  }
  return this;
}

void re::GeomIndexMap::ConstantOrHashTableOrArrayIterator::~ConstantOrHashTableOrArrayIterator(re::GeomIndexMap::ConstantOrHashTableOrArrayIterator *this, uint64_t a2)
{
  if (*(unsigned __int8 *)this >= 3u)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~ConstantOrHashTableOrArrayIterator", 147);
    _os_crash();
    __break(1u);
  }
}

unsigned int *re::GeomIndexMap::GeomIndexMap(unsigned int *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int16 v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  _QWORD v38[2];
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[28];
  __int16 v44;
  _BYTE v45[10];
  _BYTE v46[12];
  __int16 v47;
  int v48;
  __int16 v49;
  unint64_t v50;
  __int16 v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v2 = (unint64_t)a2;
  v58 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 1) = -1;
  *((_BYTE *)a1 + 12) = 2;
  v41 = 0;
  v38[1] = 0;
  v39 = 0;
  v38[0] = 0;
  v40 = 0;
  if (re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a2, &re::kInvalidMeshIndex) != -1)re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::remove((uint64_t *)v2, &re::kInvalidMeshIndex);
  *(_QWORD *)&v53 = v2;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 >= 0x10)
  {
    v5 = 0;
    v6 = *(_QWORD *)v2;
    v7 = v4 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      *((_QWORD *)&v53 + 1) = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v5 += 16;
      if (!--v7)
        goto LABEL_27;
    }
    v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    *(_QWORD *)&v54 = v9;
    if (v9 != -1)
    {
      do
      {
        *(_DWORD *)v43 = 0;
        v10 = (unsigned int *)(*(_QWORD *)(v53 + 8) + 8 * v9);
        v11 = *v10;
        *(_DWORD *)v43 = *v10;
        if (v10[1] == -1)
        {
          re::DynamicArray<int>::add(v38, v43);
        }
        else
        {
          v12 = a1[1];
          if (v12 == -1 || v11 < v12)
            a1[1] = v11;
          v14 = a1[2];
          if (v14 == -1 || v11 > v14)
            a1[2] = v11;
        }
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v53);
        v9 = v54;
      }
      while ((_QWORD)v54 != -1);
      v16 = v39;
      if ((_DWORD)v39)
      {
        v17 = 0;
        while (1)
        {
          v18 = v39;
          if (v39 <= v17)
            break;
          re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::remove((uint64_t *)v2, (unsigned int *)(v41 + 4 * v17++));
          if (v17 == v16)
            goto LABEL_27;
        }
        *(_QWORD *)v46 = 0;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v43 = 136315906;
        *(_QWORD *)&v43[4] = "operator[]";
        *(_WORD *)&v43[12] = 1024;
        *(_DWORD *)&v43[14] = 789;
        *(_WORD *)&v43[18] = 2048;
        *(_QWORD *)&v43[20] = v17;
        v44 = 2048;
        *(_QWORD *)v45 = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_56:
        v42 = 0;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v53 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v46 = 136315906;
        *(_QWORD *)&v46[4] = "operator[]";
        v47 = 1024;
        v48 = 789;
        v49 = 2048;
        v50 = v2;
        v51 = 2048;
        v52 = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
  }
LABEL_27:
  v19 = a1[1];
  if (v19 == -1)
  {
    *((_BYTE *)a1 + 12) = 0;
    a1[2] = -1;
    a1[4] = 0;
    *(_QWORD *)a1 = 0xFFFFFFFF00000000;
  }
  else
  {
    v20 = a1[2] - v19 + 1;
    *a1 = v20;
    v21 = *(_QWORD *)(v2 + 24);
    if (!v19 && v21 == v20)
    {
      *(_QWORD *)&v53 = v2;
      v22 = *(_QWORD *)(v2 + 16);
      if (v22 < 0x10)
        goto LABEL_41;
      v23 = 0;
      v24 = *(_QWORD *)v2;
      v25 = v22 >> 4;
      while (1)
      {
        v26 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v24 + v23)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        *((_QWORD *)&v53 + 1) = (unsigned __int16)~v26;
        if (v26 != 0xFFFF)
          break;
        v23 += 16;
        if (!--v25)
        {
LABEL_41:
          *((_BYTE *)a1 + 12) = 0;
          a1[4] = v20;
          goto LABEL_42;
        }
      }
      v27 = __clz(__rbit64((unsigned __int16)~v26)) + v23;
      *(_QWORD *)&v54 = v27;
      if (v27 == -1)
        goto LABEL_41;
      while (*(_DWORD *)(*(_QWORD *)(v53 + 8) + 8 * v27) == *(_DWORD *)(*(_QWORD *)(v53 + 8) + 8 * v27 + 4))
      {
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v53);
        v27 = v54;
        if ((_QWORD)v54 == -1)
        {
          LODWORD(v20) = *a1;
          goto LABEL_41;
        }
      }
      *(_QWORD *)&v45[2] = 0;
      memset(v43, 0, sizeof(v43));
      re::DynamicArray<unsigned int>::resize(v43, *a1, &re::kInvalidMeshIndex);
      v36[0] = v2;
      v29 = *(_QWORD *)(v2 + 16);
      if (v29 < 0x10)
        goto LABEL_54;
      v30 = 0;
      v31 = *(_QWORD *)v2;
      v32 = v29 >> 4;
      while (1)
      {
        v33 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v31 + v30)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        v36[1] = (unsigned __int16)~v33;
        if (v33 != 0xFFFF)
          break;
        v30 += 16;
        if (!--v32)
          goto LABEL_54;
      }
      v34 = __clz(__rbit64((unsigned __int16)~v33)) + v30;
      v37 = v34;
      if (v34 == -1)
      {
LABEL_54:
        *((_BYTE *)a1 + 12) = 1;
        *((_QWORD *)a1 + 2) = *(_QWORD *)v43;
        *(_OWORD *)(a1 + 6) = *(_OWORD *)&v43[8];
        *((_QWORD *)a1 + 6) = *(_QWORD *)&v45[2];
        a1[10] = 1;
        goto LABEL_42;
      }
      while (1)
      {
        v35 = *(_QWORD *)(v36[0] + 8);
        v2 = *(unsigned int *)(v35 + 8 * v34);
        v17 = *(_QWORD *)&v43[16];
        if (*(_QWORD *)&v43[16] <= v2)
          goto LABEL_56;
        *(_DWORD *)(*(_QWORD *)&v45[2] + 4 * v2) = *(_DWORD *)(v35 + 8 * v34 + 4);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v36);
        v34 = v37;
        if (v37 == -1)
          goto LABEL_54;
      }
    }
    *a1 = v21;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)a1 + 2, (uint64_t *)v2);
  }
LABEL_42:
  if (v38[0] && v41)
    (*(void (**)(void))(*(_QWORD *)v38[0] + 40))();
  return a1;
}

BOOL re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::remove(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    v9 = a1[2];
    v10 = *(unsigned int *)(a1[1] + 8 * v3);
    v11 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
    a1[5] ^= (v11 >> 31) ^ v11;
    v12 = a1[4];
    if (v7)
      ++v12;
    v13 = a1[3] - 1;
    a1[3] = v13;
    a1[4] = v12;
    if (v9 >= 0x11 && v13 < v9 >> 2)
      re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::resize(a1, 0);
  }
  return v4 != -1;
}

_QWORD *re::DynamicArray<unsigned char>::resize(_QWORD *result, unint64_t a2, _BYTE *a3)
{
  _QWORD *v4;
  unint64_t v5;

  v4 = result;
  v5 = result[2];
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<BOOL>::setCapacity(result, a2);
      v5 = v4[2];
    }
    if (v5 < a2)
    {
      do
        *(_BYTE *)(v4[4] + v5++) = *a3;
      while (a2 != v5);
    }
  }
  v4[2] = a2;
  ++*((_DWORD *)v4 + 6);
  return result;
}

_QWORD *re::internal::GeomKDTree<float>::buildHelper(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  float v44;
  float v45;
  float v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  unint64_t v64;
  uint64_t v66;
  unsigned int v67;

  if (a3 <= a2)
    return 0;
  v6 = *a5;
  *a5 = v6 + 1;
  if (a1[4] <= v6)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_81;
  }
  v9 = a1[6];
  v10 = (_QWORD *)(v9 + 24 * v6);
  if ((_DWORD)a3 - (_DWORD)a2 != 1)
  {
    v66 = a1[6];
    v67 = v6;
    v12 = (a3 + a2) >> 1;
    if ((_DWORD)v12 == (_DWORD)a3)
    {
      v13 = a3;
    }
    else
    {
      v14 = *(_QWORD *)(a4 + 32);
      v15 = (unsigned int *)(v14 + 4 * a3);
      v16 = (unsigned int *)(v14 + 4 * v12);
      v17 = (unsigned int *)(v14 + 4 * a2);
      v64 = (a3 + a2) >> 1;
      do
      {
        v18 = v15 - v17;
        if (v18 < 2)
          break;
        if (v18 == 3)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<float>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17, v17 + 1, v15 - 1, *a1);
          break;
        }
        if (v18 == 2)
        {
          v52 = *(v15 - 1);
          v53 = *v17;
          if (*(float *)(*a1 + 4 * v52) < *(float *)(*a1 + 4 * v53))
          {
            *v17 = v52;
            *(v15 - 1) = v53;
          }
          break;
        }
        if ((char *)v15 - (char *)v17 <= 31)
        {
          for (; v17 != v15 - 1; ++v17)
          {
            if (v17 != v15)
            {
              v54 = v17 + 1;
              if (v17 + 1 != v15)
              {
                v55 = *v17;
                v56 = *v17;
                v57 = v17;
                v58 = v17 + 1;
                do
                {
                  v60 = *v58++;
                  v59 = v60;
                  if (*(float *)(*a1 + 4 * v60) < *(float *)(*a1 + 4 * v56))
                  {
                    v56 = v59;
                    v57 = v54;
                  }
                  v54 = v58;
                }
                while (v58 != v15);
                if (v57 != v17)
                {
                  *v17 = *v57;
                  *v57 = v55;
                }
              }
            }
          }
          break;
        }
        v19 = &v17[v18 >> 1];
        v20 = v15 - 1;
        v21 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<float>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17, v19, v15 - 1, *a1);
        v22 = *v17;
        v23 = *a1;
        v24 = *(float *)(*a1 + 4 * v22);
        v25 = *(float *)(*a1 + 4 * *v19);
        if (v24 >= v25)
        {
          v26 = v15 - 1;
          while (--v26 != v17)
          {
            v27 = *v26;
            if (*(float *)(v23 + 4 * v27) < v25)
            {
              *v17 = v27;
              *v26 = v22;
              ++v21;
              goto LABEL_20;
            }
          }
          v40 = v17 + 1;
          v41 = *v20;
          if (v24 >= *(float *)(v23 + 4 * v41))
          {
            while (v40 != v20)
            {
              v42 = *v40;
              if (v24 < *(float *)(v23 + 4 * v42))
              {
                *v40++ = v41;
                *v20 = v42;
                goto LABEL_52;
              }
              ++v40;
            }
LABEL_62:
            v12 = v64;
            break;
          }
LABEL_52:
          if (v40 == v20)
            goto LABEL_62;
          while (1)
          {
            v46 = *(float *)(v23 + 4 * *v17);
            do
            {
              v48 = *v40++;
              v47 = v48;
            }
            while (v46 >= *(float *)(v23 + 4 * v48));
            v49 = v40 - 1;
            do
            {
              v51 = *--v20;
              v50 = v51;
            }
            while (v46 < *(float *)(v23 + 4 * v51));
            if (v49 >= v20)
              break;
            *v49 = v50;
            *v20 = v47;
          }
          v17 = v40 - 1;
          v12 = v64;
          if (v49 > v16)
            break;
        }
        else
        {
          v26 = v15 - 1;
LABEL_20:
          v28 = v17 + 1;
          v12 = v64;
          if (v17 + 1 >= v26)
          {
            v33 = v17 + 1;
          }
          else
          {
            v29 = v17 + 1;
            while (1)
            {
              v30 = *(float *)(v23 + 4 * *v19);
              do
              {
                v32 = *v29++;
                v31 = v32;
              }
              while (*(float *)(v23 + 4 * v32) < v30);
              v33 = v29 - 1;
              do
              {
                v35 = *--v26;
                v34 = v35;
              }
              while (*(float *)(v23 + 4 * v35) >= v30);
              if (v33 >= v26)
                break;
              *v33 = v34;
              *v26 = v31;
              ++v21;
              if (v33 == v19)
                v19 = v26;
            }
          }
          if (v33 != v19)
          {
            v36 = *v19;
            v37 = *v33;
            if (*(float *)(v23 + 4 * v36) < *(float *)(v23 + 4 * v37))
            {
              *v33 = v36;
              *v19 = v37;
              ++v21;
            }
          }
          if (v33 == v16)
            break;
          if (!v21)
          {
            if (v33 <= v16)
            {
              v43 = v33 + 1;
              while (v43 != v15)
              {
                v44 = *(float *)(v23 + 4 * *v43);
                v45 = *(float *)(v23 + 4 * *(v43++ - 1));
                if (v44 < v45)
                  goto LABEL_36;
              }
            }
            else
            {
              while (v28 != v33)
              {
                v38 = *(float *)(v23 + 4 * *v28);
                v39 = *(float *)(v23 + 4 * *(v28++ - 1));
                if (v38 < v39)
                  goto LABEL_36;
              }
            }
            break;
          }
LABEL_36:
          if (v33 > v16)
            v15 = v33;
          else
            v17 = v33 + 1;
        }
      }
      while (v15 != v16);
      v13 = v12;
    }
    if (*(_QWORD *)(a4 + 16) > v13)
    {
      v61 = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * v13);
      v62 = v66 + 24 * v67;
      *(_DWORD *)(v62 + 16) = v61;
      *v10 = re::internal::GeomKDTree<float>::buildHelper(a1, a2, v12, a4, a5);
      *(_QWORD *)(v62 + 8) = re::internal::GeomKDTree<float>::buildHelper(a1, (v12 + 1), a3, a4, a5);
      return v10;
    }
LABEL_82:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a4 + 16) <= (unint64_t)a2)
  {
LABEL_81:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_82;
  }
  *(_DWORD *)(v9 + 24 * v6 + 16) = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * a2);
  *v10 = 0;
  v10[1] = 0;
  return v10;
}

_QWORD *re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = result[1];
  if (v2 != a2)
  {
    v4 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v4)
      {
        if (!a2)
        {
          v6 = 0;
          if (!v2)
            goto LABEL_8;
          goto LABEL_7;
        }
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
        if (result)
        {
          v6 = result;
          if (!v4[1])
          {
LABEL_8:
            v4[4] = v6;
            v4[1] = a2;
            return result;
          }
LABEL_7:
          memcpy(v6, (const void *)v4[4], 24 * v4[2]);
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
          goto LABEL_8;
        }
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 24 * a2, *(_QWORD *)(*v4 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::internal::GeomKDTree<float>::Node>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<float>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *a1;
  v6 = *(float *)(a4 + 4 * v4);
  v7 = *(float *)(a4 + 4 * v5);
  v8 = *a3;
  v9 = *(float *)(a4 + 4 * v8);
  if (v6 < v7)
  {
    if (v9 < v6)
    {
      *a1 = v8;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    v12 = *a3;
    if (*(float *)(a4 + 4 * v12) >= v7)
      return 1;
    *a2 = v12;
    *a3 = v5;
    return 2;
  }
  if (v9 < v6)
  {
    *a2 = v8;
    *a3 = v4;
    v10 = *a2;
    v11 = *a1;
    if (*(float *)(a4 + 4 * v10) >= *(float *)(a4 + 4 * v11))
      return 1;
    *a1 = v10;
    *a2 = v11;
    return 2;
  }
  return 0;
}

uint64_t re::internal::GeomKDTree<float>::findWithinRadiusHelper(uint64_t result, uint64_t **a2, float *a3, _QWORD *a4, double a5)
{
  uint64_t **v8;
  _QWORD *v9;
  double v10;
  double v11;
  float v12;
  double v13;
  uint64_t *v14;

  if (a2)
  {
    v8 = a2;
    v9 = (_QWORD *)result;
    v10 = -a5;
    v11 = a5 * a5;
    do
    {
      v12 = *(float *)(*v9 + 4 * *((unsigned int *)v8 + 4));
      if (v12 == *a3)
        v13 = 0.0;
      else
        v13 = (float)(*a3 - v12);
      if (v13 >= v10)
      {
        if (v13 <= a5)
        {
          if (v13 * v13 <= v11)
            re::DynamicArray<int>::add(a4, (_DWORD *)v8 + 4);
          v14 = *v8++;
          result = re::internal::GeomKDTree<float>::findWithinRadiusHelper(v9, v14, a3, a4, a5);
        }
        else
        {
          ++v8;
        }
      }
      v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<float>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + 4 * a2;
}

uint64_t re::internal::GeomTypedAttribute<double>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + 8 * a2;
}

{
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + 8 * a2;
}

_QWORD *re::internal::GeomKDTree<double>::buildHelper(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  double v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  double v44;
  double v45;
  double v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  unint64_t v64;
  uint64_t v66;
  unsigned int v67;

  if (a3 <= a2)
    return 0;
  v6 = *a5;
  *a5 = v6 + 1;
  if (a1[4] <= v6)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_81;
  }
  v9 = a1[6];
  v10 = (_QWORD *)(v9 + 24 * v6);
  if ((_DWORD)a3 - (_DWORD)a2 != 1)
  {
    v66 = a1[6];
    v67 = v6;
    v12 = (a3 + a2) >> 1;
    if ((_DWORD)v12 == (_DWORD)a3)
    {
      v13 = a3;
    }
    else
    {
      v14 = *(_QWORD *)(a4 + 32);
      v15 = (unsigned int *)(v14 + 4 * a3);
      v16 = (unsigned int *)(v14 + 4 * v12);
      v17 = (unsigned int *)(v14 + 4 * a2);
      v64 = (a3 + a2) >> 1;
      do
      {
        v18 = v15 - v17;
        if (v18 < 2)
          break;
        if (v18 == 3)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<double>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17, v17 + 1, v15 - 1, *a1);
          break;
        }
        if (v18 == 2)
        {
          v52 = *(v15 - 1);
          v53 = *v17;
          if (*(double *)(*a1 + 8 * v52) < *(double *)(*a1 + 8 * v53))
          {
            *v17 = v52;
            *(v15 - 1) = v53;
          }
          break;
        }
        if ((char *)v15 - (char *)v17 <= 31)
        {
          for (; v17 != v15 - 1; ++v17)
          {
            if (v17 != v15)
            {
              v54 = v17 + 1;
              if (v17 + 1 != v15)
              {
                v55 = *v17;
                v56 = *v17;
                v57 = v17;
                v58 = v17 + 1;
                do
                {
                  v60 = *v58++;
                  v59 = v60;
                  if (*(double *)(*a1 + 8 * v60) < *(double *)(*a1 + 8 * v56))
                  {
                    v56 = v59;
                    v57 = v54;
                  }
                  v54 = v58;
                }
                while (v58 != v15);
                if (v57 != v17)
                {
                  *v17 = *v57;
                  *v57 = v55;
                }
              }
            }
          }
          break;
        }
        v19 = &v17[v18 >> 1];
        v20 = v15 - 1;
        v21 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<double>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17, v19, v15 - 1, *a1);
        v22 = *v17;
        v23 = *a1;
        v24 = *(double *)(*a1 + 8 * v22);
        v25 = *(double *)(*a1 + 8 * *v19);
        if (v24 >= v25)
        {
          v26 = v15 - 1;
          while (--v26 != v17)
          {
            v27 = *v26;
            if (*(double *)(v23 + 8 * v27) < v25)
            {
              *v17 = v27;
              *v26 = v22;
              ++v21;
              goto LABEL_20;
            }
          }
          v40 = v17 + 1;
          v41 = *v20;
          if (v24 >= *(double *)(v23 + 8 * v41))
          {
            while (v40 != v20)
            {
              v42 = *v40;
              if (v24 < *(double *)(v23 + 8 * v42))
              {
                *v40++ = v41;
                *v20 = v42;
                goto LABEL_52;
              }
              ++v40;
            }
LABEL_62:
            v12 = v64;
            break;
          }
LABEL_52:
          if (v40 == v20)
            goto LABEL_62;
          while (1)
          {
            v46 = *(double *)(v23 + 8 * *v17);
            do
            {
              v48 = *v40++;
              v47 = v48;
            }
            while (v46 >= *(double *)(v23 + 8 * v48));
            v49 = v40 - 1;
            do
            {
              v51 = *--v20;
              v50 = v51;
            }
            while (v46 < *(double *)(v23 + 8 * v51));
            if (v49 >= v20)
              break;
            *v49 = v50;
            *v20 = v47;
          }
          v17 = v40 - 1;
          v12 = v64;
          if (v49 > v16)
            break;
        }
        else
        {
          v26 = v15 - 1;
LABEL_20:
          v28 = v17 + 1;
          v12 = v64;
          if (v17 + 1 >= v26)
          {
            v33 = v17 + 1;
          }
          else
          {
            v29 = v17 + 1;
            while (1)
            {
              v30 = *(double *)(v23 + 8 * *v19);
              do
              {
                v32 = *v29++;
                v31 = v32;
              }
              while (*(double *)(v23 + 8 * v32) < v30);
              v33 = v29 - 1;
              do
              {
                v35 = *--v26;
                v34 = v35;
              }
              while (*(double *)(v23 + 8 * v35) >= v30);
              if (v33 >= v26)
                break;
              *v33 = v34;
              *v26 = v31;
              ++v21;
              if (v33 == v19)
                v19 = v26;
            }
          }
          if (v33 != v19)
          {
            v36 = *v19;
            v37 = *v33;
            if (*(double *)(v23 + 8 * v36) < *(double *)(v23 + 8 * v37))
            {
              *v33 = v36;
              *v19 = v37;
              ++v21;
            }
          }
          if (v33 == v16)
            break;
          if (!v21)
          {
            if (v33 <= v16)
            {
              v43 = v33 + 1;
              while (v43 != v15)
              {
                v44 = *(double *)(v23 + 8 * *v43);
                v45 = *(double *)(v23 + 8 * *(v43++ - 1));
                if (v44 < v45)
                  goto LABEL_36;
              }
            }
            else
            {
              while (v28 != v33)
              {
                v38 = *(double *)(v23 + 8 * *v28);
                v39 = *(double *)(v23 + 8 * *(v28++ - 1));
                if (v38 < v39)
                  goto LABEL_36;
              }
            }
            break;
          }
LABEL_36:
          if (v33 > v16)
            v15 = v33;
          else
            v17 = v33 + 1;
        }
      }
      while (v15 != v16);
      v13 = v12;
    }
    if (*(_QWORD *)(a4 + 16) > v13)
    {
      v61 = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * v13);
      v62 = v66 + 24 * v67;
      *(_DWORD *)(v62 + 16) = v61;
      *v10 = re::internal::GeomKDTree<double>::buildHelper(a1, a2, v12, a4, a5);
      *(_QWORD *)(v62 + 8) = re::internal::GeomKDTree<double>::buildHelper(a1, (v12 + 1), a3, a4, a5);
      return v10;
    }
LABEL_82:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a4 + 16) <= (unint64_t)a2)
  {
LABEL_81:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_82;
  }
  *(_DWORD *)(v9 + 24 * v6 + 16) = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * a2);
  *v10 = 0;
  v10[1] = 0;
  return v10;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<double>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *a1;
  v6 = *(double *)(a4 + 8 * v4);
  v7 = *(double *)(a4 + 8 * v5);
  v8 = *a3;
  v9 = *(double *)(a4 + 8 * v8);
  if (v6 < v7)
  {
    if (v9 < v6)
    {
      *a1 = v8;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    v12 = *a3;
    if (*(double *)(a4 + 8 * v12) >= v7)
      return 1;
    *a2 = v12;
    *a3 = v5;
    return 2;
  }
  if (v9 < v6)
  {
    *a2 = v8;
    *a3 = v4;
    v10 = *a2;
    v11 = *a1;
    if (*(double *)(a4 + 8 * v10) >= *(double *)(a4 + 8 * v11))
      return 1;
    *a1 = v10;
    *a2 = v11;
    return 2;
  }
  return 0;
}

uint64_t re::internal::GeomKDTree<double>::findWithinRadiusHelper(uint64_t result, uint64_t **a2, double *a3, _QWORD *a4, double a5)
{
  uint64_t **v8;
  _QWORD *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t *v14;

  if (a2)
  {
    v8 = a2;
    v9 = (_QWORD *)result;
    v10 = -a5;
    v11 = a5 * a5;
    do
    {
      v12 = *(double *)(*v9 + 8 * *((unsigned int *)v8 + 4));
      if (v12 == *a3)
        v13 = 0.0;
      else
        v13 = *a3 - v12;
      if (v13 >= v10)
      {
        if (v13 <= a5)
        {
          if (v13 * v13 <= v11)
            re::DynamicArray<int>::add(a4, (_DWORD *)v8 + 4);
          v14 = *v8++;
          result = re::internal::GeomKDTree<double>::findWithinRadiusHelper(v9, v14, a3, a4, a5);
        }
        else
        {
          ++v8;
        }
      }
      v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::internal::GeomKDTree<re::Vector2<float>>::buildHelper(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  float32x2_t v21;
  uint64_t v22;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  uint64_t v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  float v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int *v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v80;
  _QWORD *v81;

  if (a3 <= a2)
    return 0;
  v6 = *a5;
  *a5 = v6 + 1;
  if (a1[4] <= v6)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_85;
  }
  v9 = a1[6];
  v10 = (_QWORD *)(v9 + 24 * v6);
  if ((_DWORD)a3 - (_DWORD)a2 != 1)
  {
    v11 = *(_QWORD *)(a4 + 16);
    if (v11 > a2)
    {
      v13 = (a3 + a2) >> 1;
      if (v11 > v13)
      {
        v81 = (_QWORD *)(v9 + 24 * v6);
        v14 = (a3 - 1);
        if (v11 > v14)
        {
          v80 = v6;
          v78 = a1[6];
          v15 = v9 + 24 * v6;
          v16 = *(_QWORD *)(a4 + 32);
          v17 = *(unsigned int *)(v16 + 4 * a2);
          v18 = *(unsigned int *)(v16 + 4 * v13);
          v19 = *(unsigned int *)(v16 + 4 * v14);
          v20 = (unsigned __int8 *)(v15 + 20);
          v21 = vsub_f32(vmaxnm_f32(vmaxnm_f32(*(float32x2_t *)(*a1 + 8 * v17), *(float32x2_t *)(*a1 + 8 * v18)), *(float32x2_t *)(*a1 + 8 * v19)), vminnm_f32(vminnm_f32(*(float32x2_t *)(*a1 + 8 * v17), *(float32x2_t *)(*a1 + 8 * v18)), *(float32x2_t *)(*a1 + 8 * v19)));
          *(_BYTE *)(v15 + 20) = vmvn_s8((int8x8_t)vcge_f32(v21, (float32x2_t)vdup_lane_s32((int32x2_t)v21, 1))).u8[0] & 1;
          if ((_DWORD)v13 != (_DWORD)a3)
          {
            v24 = *(_QWORD *)(a4 + 32);
            v25 = (unsigned int *)(v24 + 4 * a3);
            v26 = (unsigned int *)(v24 + 4 * v13);
            v27 = (unsigned int *)(v24 + 4 * a2);
            v77 = (a3 + a2) >> 1;
            do
            {
              v28 = v25 - v27;
              if (v28 < 2)
                break;
              if (v28 == 3)
              {
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector2<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v27, v27 + 1, v25 - 1, *a1, v20);
                break;
              }
              if (v28 == 2)
              {
                v67 = *(v25 - 1);
                v68 = *v27;
                if (*(float *)(*a1 + 8 * v67 + 4 * *v20) < *(float *)(*a1 + 8 * v68 + 4 * *v20))
                {
                  *v27 = v67;
                  *(v25 - 1) = v68;
                }
                break;
              }
              if ((char *)v25 - (char *)v27 <= 31)
              {
                for (; v27 != v25 - 1; ++v27)
                {
                  if (v27 != v25)
                  {
                    v69 = v27 + 1;
                    if (v27 + 1 != v25)
                    {
                      v71 = *v27;
                      v72 = *v27;
                      v73 = v27;
                      v74 = v27 + 1;
                      do
                      {
                        v76 = *v74++;
                        v75 = v76;
                        v70 = *a1 + 4 * *v20;
                        if (*(float *)(v70 + 8 * v76) < *(float *)(v70 + 8 * v72))
                        {
                          v72 = v75;
                          v73 = v69;
                        }
                        v69 = v74;
                      }
                      while (v74 != v25);
                      if (v73 != v27)
                      {
                        *v27 = *v73;
                        *v73 = v71;
                      }
                    }
                  }
                }
                break;
              }
              v29 = &v27[v28 >> 1];
              v30 = v25 - 1;
              v31 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector2<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v27, v29, v25 - 1, *a1, v20);
              v32 = *v27;
              v33 = *a1;
              v34 = *v20;
              v35 = *(float *)(*a1 + 8 * v32 + 4 * v34);
              v36 = *(float *)(*a1 + 8 * *v29 + 4 * v34);
              if (v35 >= v36)
              {
                v38 = v33 + 4 * v34;
                v37 = v25 - 1;
                while (--v37 != v27)
                {
                  v39 = *v37;
                  if (*(float *)(v38 + 8 * v39) < v36)
                  {
                    *v27 = v39;
                    *v37 = v32;
                    ++v31;
                    goto LABEL_25;
                  }
                }
                v54 = v27 + 1;
                v55 = *v30;
                if (v35 >= *(float *)(v33 + 8 * v55 + 4 * v34))
                {
                  v13 = v77;
                  if (v54 == v30)
                    break;
                  while (1)
                  {
                    v59 = *v54;
                    if (v35 < *(float *)(v38 + 8 * v59))
                      break;
                    if (++v54 == v30)
                      goto LABEL_11;
                  }
                  *v54++ = v55;
                  *v30 = v59;
                }
                else
                {
                  v13 = v77;
                }
                if (v54 == v30)
                  break;
                while (1)
                {
                  v60 = v33 + 4 * *v20;
                  v61 = *(float *)(v60 + 8 * *v27);
                  do
                  {
                    v63 = *v54++;
                    v62 = v63;
                  }
                  while (v61 >= *(float *)(v60 + 8 * v63));
                  v64 = v54 - 1;
                  do
                  {
                    v66 = *--v30;
                    v65 = v66;
                  }
                  while (v61 < *(float *)(v60 + 8 * v66));
                  if (v64 >= v30)
                    break;
                  *v64 = v65;
                  *v30 = v62;
                }
                v27 = v54 - 1;
                if (v64 > v26)
                  break;
              }
              else
              {
                v37 = v25 - 1;
LABEL_25:
                v40 = v27 + 1;
                if (v27 + 1 >= v37)
                {
                  v46 = v27 + 1;
                }
                else
                {
                  v41 = v27 + 1;
                  while (1)
                  {
                    v42 = v33 + 4 * *v20;
                    v43 = *(float *)(v42 + 8 * *v29);
                    do
                    {
                      v45 = *v41++;
                      v44 = v45;
                    }
                    while (*(float *)(v42 + 8 * v45) < v43);
                    v46 = v41 - 1;
                    do
                    {
                      v48 = *--v37;
                      v47 = v48;
                    }
                    while (*(float *)(v42 + 8 * v48) >= v43);
                    if (v46 >= v37)
                      break;
                    *v46 = v47;
                    *v37 = v44;
                    ++v31;
                    if (v46 == v29)
                      v29 = v37;
                  }
                }
                if (v46 != v29)
                {
                  v49 = *v29;
                  v50 = *v46;
                  if (*(float *)(v33 + 8 * v49 + 4 * *v20) < *(float *)(v33 + 8 * v50 + 4 * *v20))
                  {
                    *v46 = v49;
                    *v29 = v50;
                    ++v31;
                  }
                }
                v13 = v77;
                if (v46 == v26)
                  break;
                if (!v31)
                {
                  v51 = v33 + 4 * *v20;
                  if (v46 <= v26)
                  {
                    v56 = v46 + 1;
                    while (v56 != v25)
                    {
                      v57 = *(float *)(v51 + 8 * *v56);
                      v58 = *(float *)(v51 + 8 * *(v56++ - 1));
                      if (v57 < v58)
                        goto LABEL_41;
                    }
                  }
                  else
                  {
                    while (v40 != v46)
                    {
                      v52 = *(float *)(v51 + 8 * *v40);
                      v53 = *(float *)(v51 + 8 * *(v40++ - 1));
                      if (v52 < v53)
                        goto LABEL_41;
                    }
                  }
                  break;
                }
LABEL_41:
                if (v46 > v26)
                  v25 = v46;
                else
                  v27 = v46 + 1;
              }
            }
            while (v25 != v26);
          }
LABEL_11:
          if (*(_QWORD *)(a4 + 16) > v13)
          {
            v22 = v78 + 24 * v80;
            *(_DWORD *)(v22 + 16) = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * v13);
            v10 = v81;
            *v81 = re::internal::GeomKDTree<re::Vector2<float>>::buildHelper(a1, a2, v13, a4, a5);
            *(_QWORD *)(v22 + 8) = re::internal::GeomKDTree<re::Vector2<float>>::buildHelper(a1, (v13 + 1), a3, a4, a5);
            return v10;
          }
LABEL_89:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_88:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_89;
      }
LABEL_87:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_88;
    }
LABEL_86:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_87;
  }
  if (*(_QWORD *)(a4 + 16) <= (unint64_t)a2)
  {
LABEL_85:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_86;
  }
  *(_DWORD *)(v9 + 24 * v6 + 16) = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * a2);
  *v10 = 0;
  v10[1] = 0;
  return v10;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector2<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  v6 = *a1;
  v7 = *a5;
  v8 = *(float *)(a4 + 8 * v5 + 4 * v7);
  v9 = a4 + 8 * v6;
  v10 = *a3;
  v11 = *(float *)(a4 + 8 * v10 + 4 * v7);
  if (v8 < *(float *)(v9 + 4 * v7))
  {
    if (v11 < v8)
    {
      *a1 = v10;
      *a3 = v6;
      return 1;
    }
    *a1 = v5;
    *a2 = v6;
    v14 = *a3;
    if (*(float *)(a4 + 8 * v14 + 4 * *a5) >= *(float *)(v9 + 4 * *a5))
      return 1;
    *a2 = v14;
    *a3 = v6;
    return 2;
  }
  if (v11 < v8)
  {
    *a2 = v10;
    *a3 = v5;
    v12 = *a2;
    v13 = *a1;
    if (*(float *)(a4 + 8 * v12 + 4 * *a5) >= *(float *)(a4 + 8 * v13 + 4 * *a5))
      return 1;
    *a1 = v12;
    *a2 = v13;
    return 2;
  }
  return 0;
}

uint64_t re::internal::GeomKDTree<re::Vector2<float>>::findWithinRadiusHelper(uint64_t result, uint64_t **a2, float32x2_t *a3, _QWORD *a4, double a5)
{
  uint64_t **v8;
  _QWORD *v9;
  double v10;
  double v11;
  float32x2_t *v12;
  uint64_t v13;
  float v14;
  float v15;
  double v16;
  uint32x2_t v17;
  float32x2_t v18;
  double v19;
  uint64_t *v20;

  if (a2)
  {
    v8 = a2;
    v9 = (_QWORD *)result;
    v10 = -a5;
    v11 = a5 * a5;
    do
    {
      v12 = (float32x2_t *)(*v9 + 8 * *((unsigned int *)v8 + 4));
      v13 = *((unsigned __int8 *)v8 + 20);
      v14 = a3->f32[v13];
      v15 = v12->f32[v13];
      if (v14 == v15)
        v16 = 0.0;
      else
        v16 = (float)(v14 - v15);
      if (v16 >= v10)
      {
        if (v16 <= a5)
        {
          v17 = (uint32x2_t)vceq_f32(*v12, *a3);
          if ((vpmin_u32(v17, v17).u32[0] & 0x80000000) != 0)
          {
            v19 = 0.0;
          }
          else
          {
            v18 = vsub_f32(*v12, *a3);
            v19 = vaddv_f32(vmul_f32(v18, v18));
          }
          if (v19 <= v11)
            re::DynamicArray<int>::add(a4, (_DWORD *)v8 + 4);
          v20 = *v8++;
          result = re::internal::GeomKDTree<re::Vector2<float>>::findWithinRadiusHelper(v9, v20, a3, a4, a5);
        }
        else
        {
          ++v8;
        }
      }
      v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  return result;
}

uint64_t re::internal::GeomKDTree<re::Vector3<float>>::build(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  _OWORD v23[5];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a3;
  *(_QWORD *)(a1 + 8) = a2;
  v13 = 0;
  v10[1] = 0;
  v11 = 0;
  v10[0] = 0;
  v12 = 0;
  re::DynamicArray<float>::resize((uint64_t)v10, a2);
  if (a2)
  {
    v5 = 0;
    v6 = 1;
    v7 = v11;
    v8 = v13;
    do
    {
      if (v7 <= v5)
      {
        v14 = 0;
        memset(v23, 0, sizeof(v23));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v15 = 136315906;
        v16 = "operator[]";
        v17 = 1024;
        v18 = 789;
        v19 = 2048;
        v20 = v5;
        v21 = 2048;
        v22 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v8 + 4 * v5) = v6 - 1;
      v5 = v6++;
    }
    while (v5 < a2);
  }
  *(_QWORD *)(a1 + 32) = 0;
  ++*(_DWORD *)(a1 + 40);
  re::DynamicArray<re::internal::GeomKDTree<re::Vector3<float>>::Node>::resize((_QWORD *)(a1 + 16), a2);
  if (*(_QWORD *)(a1 + 8))
  {
    LODWORD(v23[0]) = 0;
    re::internal::GeomKDTree<re::Vector3<float>>::buildHelper((_QWORD *)a1, 0, a2, (uint64_t)v10, v23);
  }
  if (v10[0] && v13)
    (*(void (**)(void))(*(_QWORD *)v10[0] + 40))();
  return 1;
}

_QWORD *re::DynamicArray<re::internal::GeomKDTree<re::Vector3<float>>::Node>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(result, a2);
      v4 = v3[2];
    }
    if (v4 < a2)
    {
      v5 = v3[4];
      v6 = v5 + 24 * v4;
      v7 = v5 + 24 * a2 - v6;
      if (v7 >= 1)
      {
        v8 = v7 / 0x18uLL + 1;
        do
        {
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          *(_DWORD *)(v6 + 16) = -1;
          *(_BYTE *)(v6 + 20) = 0;
          --v8;
          v6 += 24;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::internal::GeomKDTree<re::Vector3<float>>::buildHelper(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v7;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  if (a3 <= a2)
    return 0;
  v7 = *a5;
  *a5 = v7 + 1;
  if (a1[4] <= v7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v10 = a1[6];
  v11 = (_QWORD *)(v10 + 24 * v7);
  if ((_DWORD)a3 - (_DWORD)a2 != 1)
  {
    v13 = re::internal::GeomKDTree<re::Vector3<float>>::partition(a1, a2, a3, a4, (char *)(v10 + 24 * v7 + 20));
    v14 = v13;
    if (*(_QWORD *)(a4 + 16) > (unint64_t)v13)
    {
      v15 = v10 + 24 * v7;
      *(_DWORD *)(v15 + 16) = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * v13);
      *v11 = re::internal::GeomKDTree<re::Vector3<float>>::buildHelper(a1, a2, v13, a4, a5);
      *(_QWORD *)(v15 + 8) = re::internal::GeomKDTree<re::Vector3<float>>::buildHelper(a1, v14 + 1, a3, a4, a5);
      return v11;
    }
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a4 + 16) <= (unint64_t)a2)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  *(_DWORD *)(v10 + 24 * v7 + 16) = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * a2);
  *v11 = 0;
  v11[1] = 0;
  return v11;
}

uint64_t re::internal::GeomKDTree<re::Vector3<float>>::partition(_QWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, char *a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  char v15;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a4 + 16);
  if (v5 <= a2)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  v6 = (a3 + a2) >> 1;
  if (v5 <= v6)
  {
LABEL_16:
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v7 = a3 - 1;
  if (v5 <= v7)
    goto LABEL_17;
  v8 = *(_QWORD *)(a4 + 32);
  v9 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v8 + 4 * a2));
  v10 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v8 + 4 * v6));
  v9.i32[3] = 0;
  v10.i32[3] = 0;
  v11 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v8 + 4 * v7));
  v12 = vmaxnmq_f32(v9, v10);
  v12.i32[3] = 0;
  v11.i32[3] = 0;
  v13 = vminnmq_f32(v9, v10);
  v13.i32[3] = 0;
  v14 = vsubq_f32(vmaxnmq_f32(v12, v11), vminnmq_f32(v13, v11));
  if (v14.f32[1] >= v14.f32[2])
    v15 = 1;
  else
    v15 = 2;
  if (v14.f32[0] >= v14.f32[2] && v14.f32[0] >= v14.f32[1])
    v15 = 0;
  *a5 = v15;
  v17 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a5;
  if ((_DWORD)v6 != a3)
    std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17 + 4 * a2, (unsigned int *)(v17 + 4 * v6), (unsigned int *)(v17 + 4 * a3), (uint64_t **)&v19);
  return v6;
}

uint64_t std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(uint64_t result, unsigned int *a2, unsigned int *a3, uint64_t **a4)
{
  unsigned int *v5;
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  float v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  float v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;

  if (a3 != a2)
  {
    v5 = a3;
    v7 = (unsigned int *)result;
    do
    {
      v8 = v5 - v7;
      if (v8 < 2)
        break;
      if (v8 == 3)
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v7, v7 + 1, v5 - 1, a4);
      if (v8 == 2)
      {
        v48 = *(v5 - 1);
        v49 = *v7;
        if (*(float *)(**a4 + 16 * v48 + 4 * *(unsigned __int8 *)a4[1]) < *(float *)(**a4
                                                                                      + 16 * v49
                                                                                      + 4 * *(unsigned __int8 *)a4[1]))
        {
          *v7 = v48;
          *(v5 - 1) = v49;
        }
        return result;
      }
      if ((char *)v5 - (char *)v7 <= 31)
        return (uint64_t)std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v7, v5, (uint64_t)a4);
      v9 = &v7[v8 >> 1];
      v10 = v5 - 1;
      result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v7, v9, v5 - 1, a4);
      v11 = *v7;
      v12 = a4[1];
      v13 = **a4;
      v14 = *(unsigned __int8 *)v12;
      v15 = *(float *)(v13 + 16 * v11 + 4 * v14);
      v16 = *(float *)(v13 + 16 * *v9 + 4 * v14);
      if (v15 >= v16)
      {
        v18 = v13 + 4 * v14;
        v17 = v5 - 1;
        while (--v17 != v7)
        {
          v19 = *v17;
          if (*(float *)(v18 + 16 * v19) < v16)
          {
            *v7 = v19;
            *v17 = v11;
            result = (result + 1);
            goto LABEL_13;
          }
        }
        v34 = v7 + 1;
        v35 = *v10;
        if (v15 >= *(float *)(v13 + 16 * v35 + 4 * v14))
        {
          while (v34 != v10)
          {
            v36 = *v34;
            if (v15 < *(float *)(v18 + 16 * v36))
            {
              *v34++ = v35;
              *v10 = v36;
              goto LABEL_45;
            }
            ++v34;
          }
          return result;
        }
LABEL_45:
        if (v34 == v10)
          return result;
        while (1)
        {
          v41 = v13 + 4 * *(unsigned __int8 *)v12;
          v42 = *(float *)(v41 + 16 * *v7);
          do
          {
            v44 = *v34++;
            v43 = v44;
          }
          while (v42 >= *(float *)(v41 + 16 * v44));
          v45 = v34 - 1;
          do
          {
            v47 = *--v10;
            v46 = v47;
          }
          while (v42 < *(float *)(v41 + 16 * v47));
          if (v45 >= v10)
            break;
          *v45 = v46;
          *v10 = v43;
        }
        v7 = v34 - 1;
        if (v45 > a2)
          return result;
      }
      else
      {
        v17 = v5 - 1;
LABEL_13:
        v20 = v7 + 1;
        if (v7 + 1 >= v17)
        {
          v26 = v7 + 1;
        }
        else
        {
          v21 = v7 + 1;
          while (1)
          {
            v22 = v13 + 4 * *(unsigned __int8 *)v12;
            v23 = *(float *)(v22 + 16 * *v9);
            do
            {
              v25 = *v21++;
              v24 = v25;
            }
            while (*(float *)(v22 + 16 * v25) < v23);
            v26 = v21 - 1;
            do
            {
              v28 = *--v17;
              v27 = v28;
            }
            while (*(float *)(v22 + 16 * v28) >= v23);
            if (v26 >= v17)
              break;
            *v26 = v27;
            *v17 = v24;
            result = (result + 1);
            if (v26 == v9)
              v9 = v17;
          }
        }
        if (v26 != v9)
        {
          v29 = *v9;
          v30 = *v26;
          if (*(float *)(v13 + 16 * v29 + 4 * *(unsigned __int8 *)v12) < *(float *)(v13
                                                                                     + 16 * v30
                                                                                     + 4 * *(unsigned __int8 *)v12))
          {
            *v26 = v29;
            *v9 = v30;
            result = (result + 1);
          }
        }
        if (v26 == a2)
          return result;
        if (!(_DWORD)result)
        {
          if (v26 <= a2)
          {
            v37 = v26 + 1;
            while (v37 != v5)
            {
              v38 = *(unsigned __int8 *)v12;
              v39 = *(float *)(v13 + 16 * *v37 + 4 * v38);
              v40 = *(float *)(v13 + 16 * *(v37++ - 1) + 4 * v38);
              if (v39 < v40)
                goto LABEL_29;
            }
          }
          else
          {
            while (v20 != v26)
            {
              v31 = *(unsigned __int8 *)v12;
              v32 = *(float *)(v13 + 16 * *v20 + 4 * v31);
              v33 = *(float *)(v13 + 16 * *(v20++ - 1) + 4 * v31);
              if (v32 < v33)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v26 > a2)
          v5 = v26;
        else
          v7 = v26 + 1;
      }
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a2;
  v5 = *a1;
  v6 = (unsigned __int8 *)a4[1];
  v7 = **a4;
  v8 = *v6;
  v9 = *(float *)(v7 + 16 * v4 + 4 * v8);
  v10 = v7 + 16 * v5;
  v11 = *a3;
  v12 = *(float *)(v7 + 16 * v11 + 4 * v8);
  if (v9 < *(float *)(v10 + 4 * v8))
  {
    if (v12 < v9)
    {
      *a1 = v11;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    v15 = *a3;
    if (*(float *)(v7 + 16 * v15 + 4 * *v6) >= *(float *)(v10 + 4 * *v6))
      return 1;
    *a2 = v15;
    *a3 = v5;
    return 2;
  }
  if (v12 < v9)
  {
    *a2 = v11;
    *a3 = v4;
    v13 = *a2;
    v14 = *a1;
    if (*(float *)(v7 + 16 * v13 + 4 * *v6) >= *(float *)(v7 + 16 * v14 + 4 * *v6))
      return 1;
    *a1 = v13;
    *a2 = v14;
    return 2;
  }
  return 0;
}

unsigned int *std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int *v6;
  unsigned int v7;

  v3 = a2 - 1;
  if (a2 - 1 != result)
  {
    v6 = result;
    do
    {
      result = std::__min_element[abi:nn180100]<re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(v6, a2, a3);
      if (v6 != result)
      {
        v7 = *v6;
        *v6 = *result;
        *result = v7;
      }
      ++v6;
    }
    while (v6 != v3);
  }
  return result;
}

unsigned int *std::__min_element[abi:nn180100]<re::internal::GeomKDTree<re::Vector3<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v5 = *result;
      v6 = result + 1;
      do
      {
        v8 = *v6++;
        v7 = v8;
        v4 = **(_QWORD **)a3 + 4 * **(unsigned __int8 **)(a3 + 8);
        if (*(float *)(v4 + 16 * v8) < *(float *)(v4 + 16 * v5))
        {
          v5 = v7;
          result = v3;
        }
        v3 = v6;
      }
      while (v6 != a2);
    }
  }
  return result;
}

uint64_t re::internal::GeomKDTree<re::Vector3<float>>::findWithinRadiusHelper(uint64_t result, uint64_t **a2, float32x4_t *a3, _QWORD *a4, double a5)
{
  uint64_t **v8;
  _QWORD *v9;
  double v10;
  double v11;
  float32x4_t *v12;
  uint64_t v13;
  float v14;
  float v15;
  double v16;
  uint32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  uint64_t *v21;

  if (a2)
  {
    v8 = a2;
    v9 = (_QWORD *)result;
    v10 = -a5;
    v11 = a5 * a5;
    do
    {
      v12 = (float32x4_t *)(*v9 + 16 * *((unsigned int *)v8 + 4));
      v13 = *((unsigned __int8 *)v8 + 20);
      v14 = a3->f32[v13];
      v15 = v12->f32[v13];
      if (v14 == v15)
        v16 = 0.0;
      else
        v16 = (float)(v14 - v15);
      if (v16 >= v10)
      {
        if (v16 <= a5)
        {
          v17 = (uint32x4_t)vceqq_f32(*v12, *a3);
          v17.i32[3] = v17.i32[2];
          if ((vminvq_u32(v17) & 0x80000000) != 0)
          {
            v20 = 0.0;
          }
          else
          {
            v18 = vsubq_f32(*v12, *a3);
            v19 = vmulq_f32(v18, v18);
            v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
          }
          if (v20 <= v11)
            re::DynamicArray<int>::add(a4, (_DWORD *)v8 + 4);
          v21 = *v8++;
          result = re::internal::GeomKDTree<re::Vector3<float>>::findWithinRadiusHelper(v9, v21, a3, a4, a5);
        }
        else
        {
          ++v8;
        }
      }
      v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  return result;
}

_QWORD *re::internal::GeomKDTree<re::Vector4<float>>::buildHelper(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  BOOL v22;
  char v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  float v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  uint64_t v45;
  float v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  unsigned int *v58;
  uint64_t v59;
  unsigned int *v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v85;

  if (a3 <= a2)
    return 0;
  v6 = *a5;
  *a5 = v6 + 1;
  if (a1[4] <= v6)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_101;
  }
  v9 = a1[6];
  v10 = (_QWORD *)(v9 + 24 * v6);
  if ((_DWORD)a3 - (_DWORD)a2 != 1)
  {
    v11 = *(_QWORD *)(a4 + 16);
    if (v11 > a2)
    {
      v13 = (a3 + a2) >> 1;
      if (v11 > v13)
      {
        v14 = (a3 - 1);
        if (v11 > v14)
        {
          v85 = v6;
          v15 = (unsigned __int8 *)(v9 + 24 * v6 + 20);
          v16 = *(_QWORD *)(a4 + 32);
          v17 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v16 + 4 * a2));
          v18 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v16 + 4 * v13));
          v19 = *(float32x4_t *)(*a1 + 16 * *(unsigned int *)(v16 + 4 * v14));
          v20 = vsubq_f32(vmaxnmq_f32(vmaxnmq_f32(v17, v18), v19), vminnmq_f32(vminnmq_f32(v17, v18), v19));
          v22 = v20.f32[0] < v20.f32[3] || v20.f32[0] < v20.f32[1] || v20.f32[0] < v20.f32[2];
          v83 = a1[6];
          if (v22)
          {
            if (v20.f32[1] < v20.f32[2] || v20.f32[1] < v20.f32[3])
            {
              if (v20.f32[2] >= v20.f32[3])
                v24 = 2;
              else
                v24 = 3;
            }
            else
            {
              v24 = 1;
            }
          }
          else
          {
            v24 = 0;
          }
          *v15 = v24;
          if ((_DWORD)v13 != (_DWORD)a3)
          {
            v28 = *(_QWORD *)(a4 + 32);
            v29 = (unsigned int *)(v28 + 4 * a3);
            v30 = (unsigned int *)(v28 + 4 * a2);
            v81 = (unsigned int *)(v28 + 4 * v13);
            v82 = (a3 + a2) >> 1;
            do
            {
              v31 = v29 - v30;
              if (v31 < 2)
                break;
              if (v31 == 3)
              {
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector4<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v30, v30 + 1, v29 - 1, *a1, v15);
                v13 = v82;
                break;
              }
              if (v31 == 2)
              {
                v71 = *(v29 - 1);
                v72 = *v30;
                if (*(float *)(*a1 + 16 * v71 + 4 * *v15) < *(float *)(*a1 + 16 * v72 + 4 * *v15))
                {
                  *v30 = v71;
                  *(v29 - 1) = v72;
                }
                break;
              }
              if ((char *)v29 - (char *)v30 <= 31)
              {
                for (; v30 != v29 - 1; ++v30)
                {
                  if (v30 != v29)
                  {
                    v73 = v30 + 1;
                    if (v30 + 1 != v29)
                    {
                      v75 = *v30;
                      v76 = *v30;
                      v77 = v30;
                      v78 = v30 + 1;
                      do
                      {
                        v80 = *v78++;
                        v79 = v80;
                        v74 = *a1 + 4 * *v15;
                        if (*(float *)(v74 + 16 * v80) < *(float *)(v74 + 16 * v76))
                        {
                          v76 = v79;
                          v77 = v73;
                        }
                        v73 = v78;
                      }
                      while (v78 != v29);
                      if (v77 != v30)
                      {
                        *v30 = *v77;
                        *v77 = v75;
                      }
                    }
                  }
                }
                break;
              }
              v32 = &v30[v31 >> 1];
              v33 = v29 - 1;
              v34 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector4<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v30, v32, v29 - 1, *a1, v15);
              v35 = *v30;
              v36 = *a1;
              v37 = *v15;
              v38 = *(float *)(*a1 + 16 * v35 + 4 * v37);
              v39 = *(float *)(*a1 + 16 * *v32 + 4 * v37);
              if (v38 >= v39)
              {
                v41 = v36 + 4 * v37;
                v40 = v29 - 1;
                v13 = v82;
                while (--v40 != v30)
                {
                  v42 = *v40;
                  if (*(float *)(v41 + 16 * v42) < v39)
                  {
                    *v30 = v42;
                    *v40 = v35;
                    ++v34;
                    goto LABEL_41;
                  }
                }
                v58 = v30 + 1;
                v59 = *v33;
                if (v38 >= *(float *)(v36 + 16 * v59 + 4 * v37))
                {
                  v54 = (unint64_t)v81;
                  if (v58 == v33)
                    break;
                  while (1)
                  {
                    v63 = *v58;
                    if (v38 < *(float *)(v41 + 16 * v63))
                      break;
                    if (++v58 == v33)
                      goto LABEL_27;
                  }
                  *v58++ = v59;
                  *v33 = v63;
                }
                else
                {
                  v54 = (unint64_t)v81;
                }
                if (v58 == v33)
                  break;
                while (1)
                {
                  v64 = v36 + 4 * *v15;
                  v65 = *(float *)(v64 + 16 * *v30);
                  do
                  {
                    v67 = *v58++;
                    v66 = v67;
                  }
                  while (v65 >= *(float *)(v64 + 16 * v67));
                  v68 = v58 - 1;
                  do
                  {
                    v70 = *--v33;
                    v69 = v70;
                  }
                  while (v65 < *(float *)(v64 + 16 * v70));
                  if (v68 >= v33)
                    break;
                  *v68 = v69;
                  *v33 = v66;
                }
                v30 = v58 - 1;
                if ((unint64_t)v68 > v54)
                  break;
              }
              else
              {
                v40 = v29 - 1;
                v13 = v82;
LABEL_41:
                v43 = v30 + 1;
                if (v30 + 1 >= v40)
                {
                  v49 = v30 + 1;
                }
                else
                {
                  v44 = v30 + 1;
                  while (1)
                  {
                    v45 = v36 + 4 * *v15;
                    v46 = *(float *)(v45 + 16 * *v32);
                    do
                    {
                      v48 = *v44++;
                      v47 = v48;
                    }
                    while (*(float *)(v45 + 16 * v48) < v46);
                    v49 = v44 - 1;
                    do
                    {
                      v51 = *--v40;
                      v50 = v51;
                    }
                    while (*(float *)(v45 + 16 * v51) >= v46);
                    if (v49 >= v40)
                      break;
                    *v49 = v50;
                    *v40 = v47;
                    ++v34;
                    if (v49 == v32)
                      v32 = v40;
                  }
                }
                if (v49 != v32)
                {
                  v52 = *v32;
                  v53 = *v49;
                  if (*(float *)(v36 + 16 * v52 + 4 * *v15) < *(float *)(v36 + 16 * v53 + 4 * *v15))
                  {
                    *v49 = v52;
                    *v32 = v53;
                    ++v34;
                  }
                }
                v54 = (unint64_t)v81;
                if (v49 == v81)
                  break;
                if (!v34)
                {
                  v55 = v36 + 4 * *v15;
                  if (v49 <= v81)
                  {
                    v60 = v49 + 1;
                    while (v60 != v29)
                    {
                      v61 = *(float *)(v55 + 16 * *v60);
                      v62 = *(float *)(v55 + 16 * *(v60++ - 1));
                      if (v61 < v62)
                        goto LABEL_57;
                    }
                  }
                  else
                  {
                    while (v43 != v49)
                    {
                      v56 = *(float *)(v55 + 16 * *v43);
                      v57 = *(float *)(v55 + 16 * *(v43++ - 1));
                      if (v56 < v57)
                        goto LABEL_57;
                    }
                  }
                  break;
                }
LABEL_57:
                if (v49 > v81)
                  v29 = v49;
                else
                  v30 = v49 + 1;
              }
            }
            while (v29 != (unsigned int *)v54);
          }
LABEL_27:
          if (*(_QWORD *)(a4 + 16) > v13)
          {
            v25 = v83 + 24 * v85;
            *(_DWORD *)(v25 + 16) = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * v13);
            v26 = v13;
            *v10 = re::internal::GeomKDTree<re::Vector4<float>>::buildHelper(a1, a2, v13, a4, a5);
            *(_QWORD *)(v25 + 8) = re::internal::GeomKDTree<re::Vector4<float>>::buildHelper(a1, (v26 + 1), a3, a4, a5);
            return v10;
          }
LABEL_105:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_104:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_105;
      }
LABEL_103:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_104;
    }
LABEL_102:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_103;
  }
  if (*(_QWORD *)(a4 + 16) <= (unint64_t)a2)
  {
LABEL_101:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_102;
  }
  *(_DWORD *)(v9 + 24 * v6 + 16) = *(_DWORD *)(*(_QWORD *)(a4 + 32) + 4 * a2);
  *v10 = 0;
  v10[1] = 0;
  return v10;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::internal::GeomKDTree<re::Vector4<float>>::partition(unsigned int,unsigned int,re::DynamicArray<unsigned int> &,unsigned char &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a2;
  v6 = *a1;
  v7 = *a5;
  v8 = *(float *)(a4 + 16 * v5 + 4 * v7);
  v9 = a4 + 16 * v6;
  v10 = *a3;
  v11 = *(float *)(a4 + 16 * v10 + 4 * v7);
  if (v8 < *(float *)(v9 + 4 * v7))
  {
    if (v11 < v8)
    {
      *a1 = v10;
      *a3 = v6;
      return 1;
    }
    *a1 = v5;
    *a2 = v6;
    v14 = *a3;
    if (*(float *)(a4 + 16 * v14 + 4 * *a5) >= *(float *)(v9 + 4 * *a5))
      return 1;
    *a2 = v14;
    *a3 = v6;
    return 2;
  }
  if (v11 < v8)
  {
    *a2 = v10;
    *a3 = v5;
    v12 = *a2;
    v13 = *a1;
    if (*(float *)(a4 + 16 * v12 + 4 * *a5) >= *(float *)(a4 + 16 * v13 + 4 * *a5))
      return 1;
    *a1 = v12;
    *a2 = v13;
    return 2;
  }
  return 0;
}

uint64_t re::internal::GeomKDTree<re::Vector4<float>>::findWithinRadiusHelper(uint64_t result, uint64_t **a2, float32x4_t *a3, _QWORD *a4, double a5)
{
  uint64_t **v8;
  _QWORD *v9;
  double v10;
  double v11;
  float32x4_t *v12;
  uint64_t v13;
  float v14;
  float v15;
  double v16;
  float32x4_t v17;
  int8x16_t v18;
  double v19;
  uint64_t *v20;

  if (a2)
  {
    v8 = a2;
    v9 = (_QWORD *)result;
    v10 = -a5;
    v11 = a5 * a5;
    do
    {
      v12 = (float32x4_t *)(*v9 + 16 * *((unsigned int *)v8 + 4));
      v13 = *((unsigned __int8 *)v8 + 20);
      v14 = a3->f32[v13];
      v15 = v12->f32[v13];
      if (v14 == v15)
        v16 = 0.0;
      else
        v16 = (float)(v14 - v15);
      if (v16 >= v10)
      {
        if (v16 <= a5)
        {
          if ((vminvq_u32((uint32x4_t)vceqq_f32(*v12, *a3)) & 0x80000000) != 0)
          {
            v19 = 0.0;
          }
          else
          {
            v17 = vsubq_f32(*v12, *a3);
            v18 = (int8x16_t)vmulq_f32(v17, v17);
            v19 = vaddv_f32(vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)));
          }
          if (v19 <= v11)
            re::DynamicArray<int>::add(a4, (_DWORD *)v8 + 4);
          v20 = *v8++;
          result = re::internal::GeomKDTree<re::Vector4<float>>::findWithinRadiusHelper(v9, v20, a3, a4, a5);
        }
        else
        {
          ++v8;
        }
      }
      v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<signed char>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + a2;
}

{
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<signed char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  _BOOL4 v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  int v39;
  unsigned int v40;
  int v41;
  BOOL v42;
  BOOL v43;
  unsigned int v44;
  int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  unsigned int *v48;
  BOOL v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  int v54;
  BOOL v55;
  unsigned int *v56;
  uint64_t v57;
  int v58;
  _BOOL4 v59;
  unsigned int *v60;
  unsigned int v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  int v68;
  _BOOL4 v69;
  _BOOL4 v70;
  unsigned int v71;
  int v72;
  BOOL v73;
  BOOL v74;
  unsigned int *v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _BOOL4 v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  _BOOL4 v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  _BOOL4 v90;
  uint64_t v91;
  int v92;
  _BOOL4 v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  _BOOL4 v98;
  int v99;
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  unsigned int *v112;
  int64_t v113;
  uint64_t v114;
  int64_t v115;
  int64_t v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _BOOL4 v122;
  BOOL v123;
  uint64_t v124;
  unsigned int *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  _BOOL4 v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int *v137;
  unsigned int *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  _BOOL4 v143;
  uint64_t v144;
  unint64_t v145;
  unsigned int *v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  _BOOL4 v150;
  int v151;
  BOOL v152;
  unsigned int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  _BOOL4 v159;
  unsigned int *v160;
  int v161;
  BOOL v162;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v76 = *(a2 - 1);
        v77 = *v10;
        v78 = *(char *)(*a3 + v77);
        if (*(unsigned __int8 *)(*a3 + v76) == v78)
          v79 = v76 < v77;
        else
          v79 = *(char *)(*a3 + v76) < v78;
        if (v79)
        {
          *v10 = v76;
          *(a2 - 1) = v77;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v80 = v10 + 2;
        v81 = v10 + 3;
        v82 = *a3;
        v83 = *(a2 - 1);
        v84 = v10[3];
        v85 = *(char *)(*a3 + v84);
        v86 = *(char *)(*a3 + v83) < v85;
        if (*(unsigned __int8 *)(*a3 + v83) == v85)
          v86 = v83 < v84;
        if (v86)
        {
          *v81 = v83;
          *(a2 - 1) = v84;
          v87 = *v81;
          v88 = *v80;
          v89 = *(char *)(v82 + v88);
          v90 = *(char *)(v82 + v87) < v89;
          if (*(unsigned __int8 *)(v82 + v87) == v89)
            v90 = v87 < v88;
          if (v90)
          {
            *v80 = v87;
            *v81 = v88;
            v91 = v10[1];
            v92 = *(char *)(v82 + v91);
            v93 = *(char *)(v82 + v87) < v92;
            if (*(unsigned __int8 *)(v82 + v87) == v92)
              v93 = v87 < v91;
            if (v93)
            {
              v10[1] = v87;
              v10[2] = v91;
              v94 = *(char *)(v82 + v87);
              v95 = *(unsigned __int8 *)(v82 + v87);
              v96 = *v10;
              v97 = *(char *)(v82 + v96);
              v98 = v94 < v97;
              v99 = v95 == v97 ? v87 < v96 : v98;
              if (v99 == 1)
              {
                *v10 = v87;
                v10[1] = v96;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v100 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v101 = *a3;
                v102 = 4;
                v103 = v10;
                do
                {
                  v105 = *v103;
                  v104 = v103[1];
                  v103 = v100;
                  v106 = *(char *)(v101 + v105);
                  LODWORD(v100) = v105;
                  v107 = v104 < v105;
                  if (*(unsigned __int8 *)(v101 + v104) != v106)
                    v107 = *(char *)(v101 + v104) < v106;
                  if (v107)
                  {
                    v108 = v102;
                    while (1)
                    {
                      *(unsigned int *)((char *)v10 + v108) = v100;
                      v109 = v108 - 4;
                      if (v108 == 4)
                        break;
                      v100 = (unsigned int *)*(unsigned int *)((char *)v10 + v108 - 8);
                      v110 = *((char *)v100 + v101);
                      v111 = *(char *)(v101 + v104) < v110;
                      if (*(unsigned __int8 *)(v101 + v104) == v110)
                        v111 = v104 < v100;
                      v108 -= 4;
                      if (!v111)
                      {
                        v112 = (unsigned int *)((char *)v10 + v109);
                        goto LABEL_120;
                      }
                    }
                    v112 = v10;
LABEL_120:
                    *v112 = v104;
                  }
                  v100 = v103 + 1;
                  v102 += 4;
                }
                while (v103 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v154 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v155 = *a3;
              do
              {
                v157 = *v9;
                v156 = v9[1];
                v9 = v154;
                v158 = *(char *)(v155 + v157);
                LODWORD(v154) = v157;
                v159 = v156 < v157;
                if (*(unsigned __int8 *)(v155 + v156) != v158)
                  v159 = *(char *)(v155 + v156) < v158;
                if (v159)
                {
                  v160 = v9;
                  do
                  {
                    *v160 = v154;
                    v154 = (unsigned int *)*(v160 - 2);
                    v161 = *((char *)v154 + v155);
                    v162 = *(char *)(v155 + v156) < v161;
                    if (*(unsigned __int8 *)(v155 + v156) == v161)
                      v162 = v156 < v154;
                    --v160;
                  }
                  while (v162);
                  *v160 = v156;
                }
                v154 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v113 = (v12 - 2) >> 1;
            v114 = *a3;
            v115 = v113;
            do
            {
              v116 = v115;
              if (v113 >= v115)
              {
                v117 = (2 * v115) | 1;
                v118 = &v10[v117];
                if (2 * v116 + 2 >= (uint64_t)v12)
                {
                  LODWORD(v124) = *v118;
                }
                else
                {
                  v119 = *v118;
                  v120 = v118[1];
                  v121 = *(char *)(v114 + v120);
                  v122 = *(char *)(v114 + v119) < v121;
                  if (*(unsigned __int8 *)(v114 + v119) == v121)
                    v122 = v119 < v120;
                  v123 = !v122;
                  if (v122)
                    LODWORD(v124) = v118[1];
                  else
                    LODWORD(v124) = *v118;
                  if (!v123)
                  {
                    ++v118;
                    v117 = 2 * v116 + 2;
                  }
                }
                v125 = &v10[v116];
                v126 = *v125;
                v127 = *(char *)(v114 + v126);
                if (*(unsigned __int8 *)(v114 + v124) == v127)
                  result = v124 < v126;
                else
                  result = *(char *)(v114 + v124) < v127;
                if ((result & 1) == 0)
                {
                  do
                  {
                    *v125 = v124;
                    v125 = v118;
                    if (v113 < v117)
                      break;
                    v128 = (2 * v117) | 1;
                    v118 = &v10[v128];
                    v117 = 2 * v117 + 2;
                    if (v117 >= (uint64_t)v12)
                    {
                      LODWORD(v124) = *v118;
                      v117 = v128;
                    }
                    else
                    {
                      v124 = *v118;
                      v129 = v118[1];
                      v130 = *(char *)(v114 + v129);
                      v131 = *(char *)(v114 + v124) < v130;
                      if (*(unsigned __int8 *)(v114 + v124) == v130)
                        v131 = v124 < v129;
                      if (v131)
                      {
                        LODWORD(v124) = v118[1];
                        ++v118;
                      }
                      else
                      {
                        v117 = v128;
                      }
                    }
                    v132 = *(char *)(v114 + v126);
                    result = *(unsigned __int8 *)(v114 + v124) == v132
                           ? v124 < v126
                           : *(char *)(v114 + v124) < v132;
                  }
                  while ((_DWORD)result != 1);
                  *v125 = v126;
                }
              }
              v115 = v116 - 1;
            }
            while (v116);
            v133 = (unint64_t)v11 >> 2;
            do
            {
              v134 = 0;
              v135 = *v10;
              v136 = *a3;
              v137 = v10;
              do
              {
                v138 = &v137[v134 + 1];
                v139 = (2 * v134) | 1;
                v134 = 2 * v134 + 2;
                if (v134 >= v133)
                {
                  LODWORD(v140) = *v138;
                  v134 = v139;
                }
                else
                {
                  v140 = *v138;
                  result = *(unsigned __int8 *)(v136 + v140);
                  v141 = v138[1];
                  v142 = *(char *)(v136 + v141);
                  v143 = *(char *)(v136 + v140) < v142;
                  if ((_DWORD)result == v142)
                    v143 = v140 < v141;
                  if (v143)
                  {
                    LODWORD(v140) = v138[1];
                    ++v138;
                  }
                  else
                  {
                    v134 = v139;
                  }
                }
                *v137 = v140;
                v137 = v138;
              }
              while (v134 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
              if (v138 == --a2)
              {
                *v138 = v135;
              }
              else
              {
                *v138 = *a2;
                *a2 = v135;
                v144 = (char *)v138 - (char *)v10 + 4;
                if (v144 >= 5)
                {
                  v145 = (((unint64_t)v144 >> 2) - 2) >> 1;
                  v146 = &v10[v145];
                  v147 = *v146;
                  v148 = *v138;
                  v149 = *(char *)(v136 + v148);
                  result = v147 < v148;
                  v150 = *(char *)(v136 + v147) < v149;
                  if (*(unsigned __int8 *)(v136 + v147) == v149)
                    v150 = v147 < v148;
                  if (v150)
                  {
                    do
                    {
                      *v138 = v147;
                      v138 = v146;
                      if (!v145)
                        break;
                      v145 = (v145 - 1) >> 1;
                      v146 = &v10[v145];
                      v147 = *v146;
                      v151 = *(char *)(v136 + v148);
                      result = v147 < v148;
                      v152 = *(char *)(v136 + v147) < v151;
                      if (*(unsigned __int8 *)(v136 + v147) == v151)
                        v152 = v147 < v148;
                    }
                    while (v152);
                    *v138 = v148;
                  }
                }
              }
            }
            while (v133-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = *a3;
        if ((unint64_t)v11 < 0x201)
        {
        }
        else
        {
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(v9 - 1);
          v21 = *(char *)(v18 + v20);
          v19 = *(unsigned __int8 *)(v18 + v17);
          v22 = v20 < v17;
          if (v19 != v21)
            v22 = v21 < *(char *)(v18 + v17);
          if (v22)
            goto LABEL_14;
          v50 = *(a2 - 1);
          v51 = *(char *)(v18 + v50);
          v52 = v17 < v50;
          if (v19 != v51)
            v52 = v51 > (char)v19;
          if (v52)
          {
            v10 = v9;
            do
            {
              v53 = v10[1];
              ++v10;
              v54 = *(char *)(v18 + v53);
              v55 = v17 < v53;
              if (v19 != v54)
                v55 = v54 > (char)v19;
            }
            while (!v55);
          }
          else
          {
            v56 = v9 + 1;
            do
            {
              v10 = v56;
              if (v56 >= a2)
                break;
              ++v56;
              v57 = *v10;
              v58 = *(char *)(v18 + v57);
              v59 = v17 < v57;
              if (v19 != v58)
                v59 = v58 > (char)v19;
            }
            while (!v59);
          }
          v60 = a2;
          if (v10 < a2)
          {
            v60 = a2;
            do
            {
              v61 = *--v60;
              v62 = *(char *)(v18 + v61);
              v63 = v17 < v61;
              if (v19 != v62)
                v63 = v62 > (char)v19;
            }
            while (v63);
          }
          if (v10 < v60)
          {
            v64 = *v10;
            v65 = *v60;
            do
            {
              *v10 = v65;
              *v60 = v64;
              v66 = *(unsigned __int8 *)(v18 + v17);
              do
              {
                v67 = v10[1];
                ++v10;
                v64 = v67;
                v68 = *(char *)(v18 + v67);
                v69 = v17 < v67;
                if (v66 == v68)
                  v70 = v69;
                else
                  v70 = v68 > (char)v66;
              }
              while (!v70);
              do
              {
                v71 = *--v60;
                v65 = v71;
                v72 = *(char *)(v18 + v71);
                v73 = v17 < v71;
                if (v66 == v72)
                  v74 = v73;
                else
                  v74 = v72 > (char)v66;
              }
              while (v74);
            }
            while (v10 < v60);
          }
          v75 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v75;
          a5 = 0;
          *v75 = v17;
          continue;
        }
        v19 = *(unsigned __int8 *)(v18 + v17);
LABEL_14:
        v23 = 0;
        do
        {
          v24 = v9[v23 + 1];
          v25 = *(char *)(v18 + v24);
          if (v19 == v25)
            v26 = v24 < v17;
          else
            v26 = v25 < (char)v19;
          ++v23;
        }
        while (v26);
        v27 = &v9[v23];
        v28 = a2;
        if (v23 == 1)
        {
          v28 = a2;
          do
          {
            if (v27 >= v28)
              break;
            v32 = *--v28;
            v33 = *(char *)(v18 + v32);
            v34 = v32 < v17;
            if (v19 != v33)
              v34 = v33 < (char)v19;
          }
          while (!v34);
        }
        else
        {
          do
          {
            v29 = *--v28;
            v30 = *(char *)(v18 + v29);
            v31 = v29 < v17;
            if (v19 != v30)
              v31 = v30 < (char)v19;
          }
          while (!v31);
        }
        if (v27 >= v28)
        {
          v48 = v27 - 1;
        }
        else
        {
          v35 = *v28;
          v36 = v24;
          v37 = v27;
          v38 = v28;
          do
          {
            *v37 = v35;
            *v38 = v36;
            v39 = *(unsigned __int8 *)(v18 + v17);
            do
            {
              v40 = v37[1];
              ++v37;
              v36 = v40;
              v41 = *(char *)(v18 + v40);
              v42 = v40 < v17;
              if (v39 == v41)
                v43 = v42;
              else
                v43 = v41 < (char)v39;
            }
            while (v43);
            do
            {
              v44 = *--v38;
              v35 = v44;
              v45 = *(char *)(v18 + v44);
              v46 = v44 < v17;
              if (v39 == v45)
                v47 = v46;
              else
                v47 = v45 < (char)v39;
            }
            while (!v47);
          }
          while (v37 < v38);
          v48 = v37 - 1;
        }
        if (v48 != v9)
          *v9 = *v48;
        *v48 = v17;
        if (v27 < v28)
        {
LABEL_48:
          a5 = 0;
          v10 = v48 + 1;
          continue;
        }
        v10 = v48 + 1;
        if (!(_DWORD)result)
        {
          if (v49)
            continue;
          goto LABEL_48;
        }
        a2 = v48;
        if (!v49)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<signed char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  int v18;
  _BOOL4 v19;

  v4 = *a2;
  v5 = *(char *)(a4 + v4);
  v6 = *(unsigned __int8 *)(a4 + v4);
  v7 = *result;
  v8 = *(char *)(a4 + v7);
  v9 = v4 < v7;
  if (v6 != v8)
    v9 = v5 < v8;
  v10 = *a3;
  v11 = *(char *)(a4 + v10);
  v12 = v11 < v5;
  if (v6 == v11)
    v12 = v10 < v4;
  if (v9)
  {
    if (v12)
    {
      *result = v10;
LABEL_17:
      *a3 = v7;
      return result;
    }
    *result = v4;
    *a2 = v7;
    v17 = *a3;
    v18 = *(char *)(a4 + v7);
    v19 = *(char *)(a4 + v17) < v18;
    if (*(unsigned __int8 *)(a4 + v17) == v18)
      v19 = v17 < v7;
    if (v19)
    {
      *a2 = v17;
      goto LABEL_17;
    }
  }
  else if (v12)
  {
    *a2 = v10;
    *a3 = v4;
    v13 = *a2;
    v14 = *result;
    v15 = *(char *)(a4 + v14);
    v16 = *(char *)(a4 + v13) < v15;
    if (*(unsigned __int8 *)(a4 + v13) == v15)
      v16 = v13 < v14;
    if (v16)
    {
      *result = v13;
      *a2 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<signed char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  unsigned int *v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  _BOOL4 v44;
  int v45;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(char *)(*a3 + v9);
      if (*(unsigned __int8 *)(*a3 + v8) == v10)
        v11 = v8 < v9;
      else
        v11 = *(char *)(*a3 + v8) < v10;
      if (v11)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v26 = a1 + 2;
      v27 = a1 + 3;
      v28 = *a3;
      v29 = *(a2 - 1);
      v30 = a1[3];
      v31 = *(char *)(*a3 + v30);
      v32 = *(char *)(*a3 + v29) < v31;
      if (*(unsigned __int8 *)(*a3 + v29) == v31)
        v32 = v29 < v30;
      if (v32)
      {
        *v27 = v29;
        *(a2 - 1) = v30;
        v33 = *v27;
        v34 = *v26;
        v35 = *(char *)(v28 + v34);
        v36 = *(char *)(v28 + v33) < v35;
        if (*(unsigned __int8 *)(v28 + v33) == v35)
          v36 = v33 < v34;
        if (v36)
        {
          *v26 = v33;
          *v27 = v34;
          v37 = a1[1];
          v38 = *(char *)(v28 + v37);
          v39 = *(char *)(v28 + v33) < v38;
          if (*(unsigned __int8 *)(v28 + v33) == v38)
            v39 = v33 < v37;
          if (v39)
          {
            a1[1] = v33;
            a1[2] = v37;
            v40 = *(char *)(v28 + v33);
            v41 = *(unsigned __int8 *)(v28 + v33);
            v42 = *a1;
            v43 = *(char *)(v28 + v42);
            v44 = v40 < v43;
            v45 = v41 == v43 ? v33 < v42 : v44;
            if (v45 == 1)
            {
              *a1 = v33;
              a1[1] = v42;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 2;
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = *a3;
      v16 = 12;
      break;
  }
  while (1)
  {
    v17 = *v13;
    v18 = *v12;
    v19 = *(char *)(v15 + v18);
    v20 = *(char *)(v15 + v17) < v19;
    if (*(unsigned __int8 *)(v15 + v17) == v19)
      v20 = v17 < v18;
    if (v20)
    {
      v21 = v16;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v21) = v18;
        v22 = v21 - 4;
        if (v21 == 4)
          break;
        v18 = *(unsigned int *)((char *)a1 + v21 - 8);
        v23 = *(char *)(v15 + v18);
        v24 = *(char *)(v15 + v17) < v23;
        if (*(unsigned __int8 *)(v15 + v17) == v23)
          v24 = v17 < v18;
        v21 -= 4;
        if (!v24)
        {
          v25 = (unsigned int *)((char *)a1 + v22);
          goto LABEL_20;
        }
      }
      v25 = a1;
LABEL_20:
      *v25 = v17;
      if (++v14 == 8)
        return v13 + 1 == a2;
    }
    v12 = v13;
    v16 += 4;
    if (++v13 == a2)
      return 1;
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<signed char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _BOOL4 v25;
  _BOOL4 v26;

  v11 = *a5;
  v12 = *a4;
  v13 = *a3;
  v14 = *(char *)(*a5 + v13);
  v15 = *(char *)(*a5 + v12) < v14;
  if (*(unsigned __int8 *)(*a5 + v12) == v14)
    v15 = v12 < v13;
  if (v15)
  {
    *a3 = v12;
    *a4 = v13;
    v16 = *a3;
    v17 = *a2;
    v18 = *(char *)(v11 + v17);
    v19 = *(char *)(v11 + v16) < v18;
    if (*(unsigned __int8 *)(v11 + v16) == v18)
      v19 = v16 < v17;
    if (v19)
    {
      *a2 = v16;
      *a3 = v17;
      v20 = *a2;
      v21 = *(char *)(v11 + v20);
      v22 = *(unsigned __int8 *)(v11 + v20);
      v23 = *a1;
      v24 = *(char *)(v11 + v23);
      v25 = v21 < v24;
      if (v22 == v24)
        v26 = v20 < v23;
      else
        v26 = v25;
      if (v26)
      {
        *a1 = v20;
        *a2 = v23;
      }
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<short>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + 2 * a2;
}

{
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + 2 * a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  int v30;
  _BOOL4 v31;
  unsigned int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  BOOL v41;
  BOOL v42;
  unsigned int v43;
  int v44;
  _BOOL4 v45;
  _BOOL4 v46;
  unsigned int *v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  int v53;
  BOOL v54;
  unsigned int *v55;
  uint64_t v56;
  int v57;
  _BOOL4 v58;
  unsigned int *v59;
  unsigned int v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  _BOOL4 v67;
  _BOOL4 v68;
  unsigned int v69;
  int v70;
  BOOL v71;
  BOOL v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  _BOOL4 v77;
  _DWORD *v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _BOOL4 v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  _BOOL4 v89;
  uint64_t v90;
  int v91;
  uint64_t v93;
  int v94;
  unsigned int *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  BOOL v108;
  unsigned int *v109;
  int64_t v110;
  uint64_t v111;
  int64_t v112;
  int64_t v113;
  uint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  _BOOL4 v119;
  unsigned int *v120;
  int v121;
  uint64_t v122;
  int v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _BOOL4 v128;
  int v129;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  _BOOL4 v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  int v148;
  int v150;
  unsigned int *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  _BOOL4 v159;
  unsigned int *v160;
  int v161;
  BOOL v162;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v74 = *(a2 - 1);
        v75 = *v10;
        v76 = *(__int16 *)(*a3 + 2 * v75);
        if (*(unsigned __int16 *)(*a3 + 2 * v74) == (unsigned __int16)v76)
          v77 = v74 < v75;
        else
          v77 = *(__int16 *)(*a3 + 2 * v74) < v76;
        if (v77)
        {
          *v10 = v74;
          *(a2 - 1) = v75;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v78 = v10 + 2;
        v79 = v10 + 3;
        v80 = *a3;
        v81 = *(a2 - 1);
        v82 = v10[3];
        v83 = *(__int16 *)(*a3 + 2 * v82);
        v84 = *(__int16 *)(*a3 + 2 * v81) < v83;
        if (*(unsigned __int16 *)(*a3 + 2 * v81) == (unsigned __int16)v83)
          v84 = v81 < v82;
        if (v84)
        {
          *v79 = v81;
          *(a2 - 1) = v82;
          v85 = *v79;
          v86 = *(unsigned __int16 *)(v80 + 2 * v85);
          v87 = *v78;
          v88 = *(unsigned __int16 *)(v80 + 2 * v87);
          v89 = *(__int16 *)(v80 + 2 * v85) < (__int16)v88;
          if (v86 == v88)
            v89 = v85 < v87;
          if (v89)
          {
            *v78 = v85;
            *v79 = v87;
            v90 = v10[1];
            v91 = *(__int16 *)(v80 + 2 * v90);
            if (v86 == (unsigned __int16)v91 ? v85 < v90 : v91 > (__int16)v86)
            {
              v10[1] = v85;
              v10[2] = v90;
              v93 = *v10;
              v94 = *(__int16 *)(v80 + 2 * v93);
              if (v86 == (unsigned __int16)v94 ? v85 < v93 : v94 > (__int16)v86)
              {
                *v10 = v85;
                v10[1] = v93;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v96 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v97 = *a3;
                v98 = 4;
                v99 = v10;
                do
                {
                  v101 = *v99;
                  v100 = v99[1];
                  v99 = v96;
                  v102 = *(unsigned __int16 *)(v97 + 2 * v100);
                  v103 = *(__int16 *)(v97 + 2 * v101);
                  v104 = *(__int16 *)(v97 + 2 * v100) < v103;
                  if (v102 == (unsigned __int16)v103)
                    v104 = v100 < v101;
                  if (v104)
                  {
                    v105 = v98;
                    while (1)
                    {
                      *(unsigned int *)((char *)v10 + v105) = v101;
                      v106 = v105 - 4;
                      if (v105 == 4)
                        break;
                      v101 = *(unsigned int *)((char *)v10 + v105 - 8);
                      v107 = *(__int16 *)(v97 + 2 * v101);
                      v108 = v100 < v101;
                      if (v102 != (unsigned __int16)v107)
                        v108 = v107 > (__int16)v102;
                      v105 = v106;
                      if (!v108)
                      {
                        v109 = (unsigned int *)((char *)v10 + v106);
                        goto LABEL_121;
                      }
                    }
                    v109 = v10;
LABEL_121:
                    *v109 = v100;
                  }
                  v96 = v99 + 1;
                  v98 += 4;
                }
                while (v99 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v153 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v154 = *a3;
              do
              {
                v156 = *v9;
                v155 = v9[1];
                v9 = v153;
                v157 = *(unsigned __int16 *)(v154 + 2 * v155);
                v158 = *(__int16 *)(v154 + 2 * v156);
                v159 = *(__int16 *)(v154 + 2 * v155) < v158;
                if (v157 == (unsigned __int16)v158)
                  v159 = v155 < v156;
                if (v159)
                {
                  v160 = v9;
                  do
                  {
                    *v160 = v156;
                    v156 = *(v160 - 2);
                    v161 = *(__int16 *)(v154 + 2 * v156);
                    if (v157 == (unsigned __int16)v161)
                      v162 = v155 < v156;
                    else
                      v162 = v161 > (__int16)v157;
                    --v160;
                  }
                  while (v162);
                  *v160 = v155;
                }
                v153 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v110 = (v12 - 2) >> 1;
            v111 = *a3;
            v112 = v110;
            do
            {
              v113 = v112;
              if (v110 >= v112)
              {
                v114 = (2 * v112) | 1;
                v115 = &v10[v114];
                if (2 * v113 + 2 >= (uint64_t)v12)
                {
                  result = *v115;
                }
                else
                {
                  v116 = *v115;
                  v117 = v115[1];
                  v118 = *(__int16 *)(v111 + 2 * v117);
                  v119 = *(__int16 *)(v111 + 2 * v116) < v118;
                  if (*(unsigned __int16 *)(v111 + 2 * v116) == (unsigned __int16)v118)
                    v119 = v116 < v117;
                  if (v119)
                    result = v117;
                  else
                    result = v116;
                  if (v119)
                  {
                    ++v115;
                    v114 = 2 * v113 + 2;
                  }
                }
                v120 = &v10[v113];
                v121 = *(__int16 *)(v111 + 2 * result);
                v122 = *v120;
                v123 = *(unsigned __int16 *)(v111 + 2 * v122);
                if (v123 == (unsigned __int16)v121)
                  v124 = result < v122;
                else
                  v124 = v121 < *(__int16 *)(v111 + 2 * v122);
                if (!v124)
                {
                  do
                  {
                    *v120 = result;
                    v120 = v115;
                    if (v110 < v114)
                      break;
                    v125 = (2 * v114) | 1;
                    v115 = &v10[v125];
                    v114 = 2 * v114 + 2;
                    if (v114 >= (uint64_t)v12)
                    {
                      result = *v115;
                      v114 = v125;
                    }
                    else
                    {
                      result = *v115;
                      v126 = v115[1];
                      v127 = *(__int16 *)(v111 + 2 * v126);
                      v128 = *(__int16 *)(v111 + 2 * result) < v127;
                      if (*(unsigned __int16 *)(v111 + 2 * result) == (unsigned __int16)v127)
                        v128 = result < v126;
                      result = v128 ? v126 : result;
                      if (v128)
                        ++v115;
                      else
                        v114 = v125;
                    }
                    v129 = *(__int16 *)(v111 + 2 * result);
                  }
                  while (!(v123 == (unsigned __int16)v129
                          ? result < v122
                          : v129 < (__int16)v123));
                  *v120 = v122;
                }
              }
              v112 = v113 - 1;
            }
            while (v113);
            v131 = (unint64_t)v11 >> 2;
            do
            {
              v132 = 0;
              v133 = *v10;
              v134 = *a3;
              v135 = v10;
              do
              {
                v136 = &v135[v132 + 1];
                v137 = (2 * v132) | 1;
                v132 = 2 * v132 + 2;
                if (v132 >= v131)
                {
                  LODWORD(v138) = *v136;
                  v132 = v137;
                }
                else
                {
                  v138 = *v136;
                  result = *(unsigned __int16 *)(v134 + 2 * v138);
                  v139 = v136[1];
                  v140 = *(__int16 *)(v134 + 2 * v139);
                  v141 = *(__int16 *)(v134 + 2 * v138) < v140;
                  if ((_DWORD)result == (unsigned __int16)v140)
                    v141 = v138 < v139;
                  if (v141)
                  {
                    LODWORD(v138) = v136[1];
                    ++v136;
                  }
                  else
                  {
                    v132 = v137;
                  }
                }
                *v135 = v138;
                v135 = v136;
              }
              while (v132 <= (uint64_t)((unint64_t)(v131 - 2) >> 1));
              if (v136 == --a2)
              {
                *v136 = v133;
              }
              else
              {
                *v136 = *a2;
                *a2 = v133;
                v142 = (char *)v136 - (char *)v10 + 4;
                if (v142 >= 5)
                {
                  v143 = (((unint64_t)v142 >> 2) - 2) >> 1;
                  v144 = &v10[v143];
                  v145 = *v144;
                  v146 = *(__int16 *)(v134 + 2 * v145);
                  v147 = *v136;
                  v148 = *(unsigned __int16 *)(v134 + 2 * v147);
                  result = v145 < v147;
                  if (v148 == (unsigned __int16)v146
                     ? v145 < v147
                     : v146 < *(__int16 *)(v134 + 2 * v147))
                  {
                    do
                    {
                      *v136 = v145;
                      v136 = v144;
                      if (!v143)
                        break;
                      v143 = (v143 - 1) >> 1;
                      v144 = &v10[v143];
                      v145 = *v144;
                      v150 = *(__int16 *)(v134 + 2 * v145);
                      result = v150 < (__int16)v148;
                    }
                    while (v148 == (unsigned __int16)v150
                          ? v145 < v147
                          : v150 < (__int16)v148);
                    *v136 = v147;
                  }
                }
              }
            }
            while (v131-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = *a3;
        if ((unint64_t)v11 < 0x201)
        {
        }
        else
        {
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(v9 - 1);
          v21 = *(__int16 *)(v18 + 2 * v20);
          v19 = *(unsigned __int16 *)(v18 + 2 * v17);
          v22 = v20 < v17;
          if (v19 != (unsigned __int16)v21)
            v22 = v21 < *(__int16 *)(v18 + 2 * v17);
          if (v22)
            goto LABEL_14;
          v49 = *(a2 - 1);
          v50 = *(__int16 *)(v18 + 2 * v49);
          v51 = v17 < v49;
          if (v19 != (unsigned __int16)v50)
            v51 = v50 > (__int16)v19;
          if (v51)
          {
            v10 = v9;
            do
            {
              v52 = v10[1];
              ++v10;
              v53 = *(__int16 *)(v18 + 2 * v52);
              v54 = v17 < v52;
              if (v19 != (unsigned __int16)v53)
                v54 = v53 > (__int16)v19;
            }
            while (!v54);
          }
          else
          {
            v55 = v9 + 1;
            do
            {
              v10 = v55;
              if (v55 >= a2)
                break;
              ++v55;
              v56 = *v10;
              v57 = *(__int16 *)(v18 + 2 * v56);
              v58 = v17 < v56;
              if (v19 != (unsigned __int16)v57)
                v58 = v57 > (__int16)v19;
            }
            while (!v58);
          }
          v59 = a2;
          if (v10 < a2)
          {
            v59 = a2;
            do
            {
              v60 = *--v59;
              v61 = *(__int16 *)(v18 + 2 * v60);
              v62 = v17 < v60;
              if (v19 != (unsigned __int16)v61)
                v62 = v61 > (__int16)v19;
            }
            while (v62);
          }
          if (v10 < v59)
          {
            v63 = *v10;
            v64 = *v59;
            do
            {
              *v10 = v64;
              *v59 = v63;
              do
              {
                v65 = v10[1];
                ++v10;
                v63 = v65;
                v66 = *(__int16 *)(v18 + 2 * v65);
                v67 = v17 < v65;
                if (v19 == (unsigned __int16)v66)
                  v68 = v67;
                else
                  v68 = v66 > (__int16)v19;
              }
              while (!v68);
              do
              {
                v69 = *--v59;
                v64 = v69;
                v70 = *(__int16 *)(v18 + 2 * v69);
                v71 = v17 < v69;
                if (v19 == (unsigned __int16)v70)
                  v72 = v71;
                else
                  v72 = v70 > (__int16)v19;
              }
              while (v72);
            }
            while (v10 < v59);
          }
          v73 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v73;
          a5 = 0;
          *v73 = v17;
          continue;
        }
        v19 = *(unsigned __int16 *)(v18 + 2 * v17);
LABEL_14:
        v23 = 0;
        do
        {
          v24 = v9[v23 + 1];
          v25 = *(__int16 *)(v18 + 2 * v24);
          if (v19 == (unsigned __int16)v25)
            v26 = v24 < v17;
          else
            v26 = v25 < (__int16)v19;
          ++v23;
        }
        while (v26);
        v27 = &v9[v23];
        v28 = a2;
        if (v23 == 1)
        {
          v28 = a2;
          do
          {
            if (v27 >= v28)
              break;
            v32 = *--v28;
            v33 = *(__int16 *)(v18 + 2 * v32);
            v34 = v32 < v17;
            if (v19 != (unsigned __int16)v33)
              v34 = v33 < (__int16)v19;
          }
          while (!v34);
        }
        else
        {
          do
          {
            v29 = *--v28;
            v30 = *(__int16 *)(v18 + 2 * v29);
            v31 = v29 < v17;
            if (v19 != (unsigned __int16)v30)
              v31 = v30 < (__int16)v19;
          }
          while (!v31);
        }
        if (v27 >= v28)
        {
          v47 = v27 - 1;
        }
        else
        {
          v35 = *v28;
          v36 = v24;
          v37 = v27;
          v38 = v28;
          do
          {
            *v37 = v35;
            *v38 = v36;
            do
            {
              v39 = v37[1];
              ++v37;
              v36 = v39;
              v40 = *(__int16 *)(v18 + 2 * v39);
              v41 = v39 < v17;
              if (v19 == (unsigned __int16)v40)
                v42 = v41;
              else
                v42 = v40 < (__int16)v19;
            }
            while (v42);
            do
            {
              v43 = *--v38;
              v35 = v43;
              v44 = *(__int16 *)(v18 + 2 * v43);
              v45 = v43 < v17;
              if (v19 == (unsigned __int16)v44)
                v46 = v45;
              else
                v46 = v44 < (__int16)v19;
            }
            while (!v46);
          }
          while (v37 < v38);
          v47 = v37 - 1;
        }
        if (v47 != v9)
          *v9 = *v47;
        *v47 = v17;
        if (v27 < v28)
        {
LABEL_48:
          a5 = 0;
          v10 = v47 + 1;
          continue;
        }
        v10 = v47 + 1;
        if (!(_DWORD)result)
        {
          if (v48)
            continue;
          goto LABEL_48;
        }
        a2 = v47;
        if (!v48)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;

  v4 = *a2;
  v5 = *(__int16 *)(a4 + 2 * v4);
  v6 = *(unsigned __int16 *)(a4 + 2 * v4);
  v7 = *result;
  v8 = *(__int16 *)(a4 + 2 * v7);
  v9 = v5 < v8;
  if (v6 == (unsigned __int16)v8)
    v9 = v4 < v7;
  v10 = *a3;
  v11 = *(__int16 *)(a4 + 2 * v10);
  v12 = v11 < v5;
  if (v6 == (unsigned __int16)v11)
    v12 = v10 < v4;
  if (v9)
  {
    if (v12)
    {
      *result = v10;
LABEL_19:
      *a3 = v7;
      return result;
    }
    v18 = *(unsigned __int16 *)(a4 + 2 * v7);
    *result = v4;
    *a2 = v7;
    v19 = *a3;
    v20 = *(__int16 *)(a4 + 2 * v19);
    if (v18 == (unsigned __int16)v20)
      v21 = v19 < v7;
    else
      v21 = v20 < (__int16)v18;
    if (v21)
    {
      *a2 = v19;
      goto LABEL_19;
    }
  }
  else if (v12)
  {
    *a2 = v10;
    *a3 = v4;
    v13 = *a2;
    v14 = *(unsigned __int16 *)(a4 + 2 * v13);
    v15 = *result;
    v16 = *(unsigned __int16 *)(a4 + 2 * v15);
    if (v14 == v16 ? v13 < v15 : (__int16)v14 < (__int16)v16)
    {
      *result = v13;
      *a2 = v15;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BOOL4 v11;
  unsigned int *v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  int v40;
  uint64_t v42;
  int v43;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(__int16 *)(*a3 + 2 * v9);
      if (*(unsigned __int16 *)(*a3 + 2 * v8) == (unsigned __int16)v10)
        v11 = v8 < v9;
      else
        v11 = *(__int16 *)(*a3 + 2 * v8) < v10;
      if (v11)
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v27 = a1 + 2;
      v28 = a1 + 3;
      v29 = *a3;
      v30 = *(a2 - 1);
      v31 = a1[3];
      v32 = *(__int16 *)(*a3 + 2 * v31);
      v33 = *(__int16 *)(*a3 + 2 * v30) < v32;
      if (*(unsigned __int16 *)(*a3 + 2 * v30) == (unsigned __int16)v32)
        v33 = v30 < v31;
      if (v33)
      {
        *v28 = v30;
        *(a2 - 1) = v31;
        v34 = *v28;
        v35 = *(unsigned __int16 *)(v29 + 2 * v34);
        v36 = *v27;
        v37 = *(unsigned __int16 *)(v29 + 2 * v36);
        v38 = *(__int16 *)(v29 + 2 * v34) < (__int16)v37;
        if (v35 == v37)
          v38 = v34 < v36;
        if (v38)
        {
          *v27 = v34;
          *v28 = v36;
          v39 = a1[1];
          v40 = *(__int16 *)(v29 + 2 * v39);
          if (v35 == (unsigned __int16)v40 ? v34 < v39 : v40 > (__int16)v35)
          {
            a1[1] = v34;
            a1[2] = v39;
            v42 = *a1;
            v43 = *(__int16 *)(v29 + 2 * v42);
            if (v35 == (unsigned __int16)v43 ? v34 < v42 : v43 > (__int16)v35)
            {
              *a1 = v34;
              a1[1] = v42;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a1 + 2;
      v13 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v14 = 0;
      v15 = *a3;
      v16 = 12;
      break;
  }
  while (1)
  {
    v17 = *v13;
    v18 = *(unsigned __int16 *)(v15 + 2 * v17);
    v19 = *v12;
    v20 = *(__int16 *)(v15 + 2 * v19);
    v21 = *(__int16 *)(v15 + 2 * v17) < v20;
    if (v18 == (unsigned __int16)v20)
      v21 = v17 < v19;
    if (v21)
    {
      v22 = v16;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v22) = v19;
        v23 = v22 - 4;
        if (v22 == 4)
          break;
        v19 = *(unsigned int *)((char *)a1 + v22 - 8);
        v24 = *(__int16 *)(v15 + 2 * v19);
        v25 = v17 < v19;
        if (v18 != (unsigned __int16)v24)
          v25 = v24 > (__int16)v18;
        v22 = v23;
        if (!v25)
        {
          v26 = (unsigned int *)((char *)a1 + v23);
          goto LABEL_20;
        }
      }
      v26 = a1;
LABEL_20:
      *v26 = v17;
      if (++v14 == 8)
        return v13 + 1 == a2;
    }
    v12 = v13;
    v16 += 4;
    if (++v13 == a2)
      return 1;
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  _BOOL4 v25;

  v11 = *a5;
  v12 = *a4;
  v13 = *a3;
  v14 = *(__int16 *)(*a5 + 2 * v13);
  v15 = *(__int16 *)(*a5 + 2 * v12) < v14;
  if (*(unsigned __int16 *)(*a5 + 2 * v12) == (unsigned __int16)v14)
    v15 = v12 < v13;
  if (v15)
  {
    *a3 = v12;
    *a4 = v13;
    v16 = *a3;
    v17 = *(unsigned __int16 *)(v11 + 2 * v16);
    v18 = *a2;
    v19 = *(unsigned __int16 *)(v11 + 2 * v18);
    if (v17 == v19 ? v16 < v18 : (__int16)v17 < (__int16)v19)
    {
      *a2 = v16;
      *a3 = v18;
      v21 = *a2;
      v22 = *(unsigned __int16 *)(v11 + 2 * v21);
      v23 = *a1;
      v24 = *(unsigned __int16 *)(v11 + 2 * v23);
      if (v22 == v24)
        v25 = v21 < v23;
      else
        v25 = (__int16)v22 < (__int16)v24;
      if (v25)
      {
        *a1 = v21;
        *a2 = v23;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  _BOOL4 v50;
  unsigned int *v51;
  BOOL v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  BOOL v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  _BOOL4 v64;
  _BOOL4 v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  BOOL v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  _BOOL4 v76;
  _BOOL4 v77;
  unsigned int v78;
  unsigned int v79;
  BOOL v80;
  BOOL v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  _BOOL4 v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  _BOOL4 v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  _BOOL4 v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  _BOOL4 v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  _BOOL4 v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  _BOOL4 v117;
  _BOOL4 v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unsigned int v122;
  unsigned int v123;
  BOOL v124;
  BOOL v125;
  unsigned int *v126;
  int64_t v127;
  uint64_t v128;
  int64_t v129;
  int64_t v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  _BOOL4 v137;
  BOOL v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  _BOOL4 v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  _BOOL4 v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  _BOOL4 v170;
  unsigned int v171;
  unsigned int v172;
  BOOL v173;
  unsigned int *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  _BOOL4 v181;
  _BOOL4 v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int v185;
  BOOL v186;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v83 = *(a2 - 1);
        v84 = *(unsigned __int8 *)(*a3 + v83);
        v85 = *v10;
        v86 = *(unsigned __int8 *)(*a3 + v85);
        v138 = v84 == v86;
        v87 = v84 < v86;
        if (v138)
          v87 = v83 < v85;
        if (v87)
        {
          *v10 = v83;
          *(a2 - 1) = v85;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v88 = v10 + 2;
        v89 = v10 + 3;
        v90 = *a3;
        v91 = *(a2 - 1);
        v92 = *(unsigned __int8 *)(*a3 + v91);
        v93 = v10[3];
        v94 = *(unsigned __int8 *)(*a3 + v93);
        v138 = v92 == v94;
        v95 = v92 < v94;
        if (v138)
          v95 = v91 < v93;
        if (v95)
        {
          *v89 = v91;
          *(a2 - 1) = v93;
          v96 = *v89;
          v97 = *(unsigned __int8 *)(v90 + v96);
          v98 = *v88;
          v99 = *(unsigned __int8 *)(v90 + v98);
          v138 = v97 == v99;
          v100 = v97 < v99;
          if (v138)
            v100 = v96 < v98;
          if (v100)
          {
            *v88 = v96;
            *v89 = v98;
            v101 = *(unsigned __int8 *)(v90 + v96);
            v102 = v10[1];
            v103 = *(unsigned __int8 *)(v90 + v102);
            v138 = v101 == v103;
            v104 = v101 < v103;
            if (v138)
              v104 = v96 < v102;
            if (v104)
            {
              v10[1] = v96;
              v10[2] = v102;
              v105 = *(unsigned __int8 *)(v90 + v96);
              v106 = *v10;
              v107 = *(unsigned __int8 *)(v90 + v106);
              v138 = v105 == v107;
              v108 = v105 < v107;
              if (v138)
                v108 = v96 < v106;
              if (v108)
              {
                *v10 = v96;
                v10[1] = v106;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v109 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v110 = *a3;
                v111 = 4;
                v112 = v10;
                do
                {
                  v114 = *v112;
                  v113 = v112[1];
                  v112 = v109;
                  v115 = *(unsigned __int8 *)(v110 + v113);
                  v116 = *(unsigned __int8 *)(v110 + v114);
                  LODWORD(v109) = v114;
                  v117 = v113 < v114;
                  v138 = v115 == v116;
                  v118 = v115 < v116;
                  if (!v138)
                    v117 = v118;
                  if (v117)
                  {
                    v119 = v111;
                    while (1)
                    {
                      *(unsigned int *)((char *)v10 + v119) = v109;
                      v120 = v119 - 4;
                      if (v119 == 4)
                        break;
                      v121 = (char *)v10 + v119;
                      v122 = *(unsigned __int8 *)(v110 + v113);
                      v109 = (unsigned int *)*((unsigned int *)v121 - 2);
                      v123 = *((unsigned __int8 *)v109 + v110);
                      v138 = v122 == v123;
                      v124 = v122 < v123;
                      if (v138)
                        v125 = v113 < v109;
                      else
                        v125 = v124;
                      v119 = v120;
                      if (!v125)
                      {
                        v126 = (unsigned int *)((char *)v10 + v120);
                        goto LABEL_114;
                      }
                    }
                    v126 = v10;
LABEL_114:
                    *v126 = v113;
                  }
                  v109 = v112 + 1;
                  v111 += 4;
                }
                while (v112 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v175 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v176 = *a3;
              do
              {
                v178 = *v9;
                v177 = v9[1];
                v9 = v175;
                v179 = *(unsigned __int8 *)(v176 + v177);
                v180 = *(unsigned __int8 *)(v176 + v178);
                LODWORD(v175) = v178;
                v181 = v177 < v178;
                v138 = v179 == v180;
                v182 = v179 < v180;
                if (!v138)
                  v181 = v182;
                if (v181)
                {
                  v183 = v9;
                  do
                  {
                    *v183 = v175;
                    v184 = *(unsigned __int8 *)(v176 + v177);
                    v175 = (unsigned int *)*(v183 - 2);
                    v185 = *((unsigned __int8 *)v175 + v176);
                    v138 = v184 == v185;
                    v186 = v184 < v185;
                    if (v138)
                      v186 = v177 < v175;
                    --v183;
                  }
                  while (v186);
                  *v183 = v177;
                }
                v175 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v127 = (v12 - 2) >> 1;
            v128 = *a3;
            v129 = v127;
            do
            {
              v130 = v129;
              if (v127 >= v129)
              {
                v131 = (2 * v129) | 1;
                v132 = &v10[v131];
                if (2 * v130 + 2 >= (uint64_t)v12)
                {
                  LODWORD(v139) = *v132;
                }
                else
                {
                  v133 = *v132;
                  v134 = *(unsigned __int8 *)(v128 + v133);
                  v135 = v132[1];
                  v136 = *(unsigned __int8 *)(v128 + v135);
                  v138 = v134 == v136;
                  v137 = v134 < v136;
                  if (v138)
                    v137 = v133 < v135;
                  v138 = !v137;
                  if (v137)
                    LODWORD(v139) = v132[1];
                  else
                    LODWORD(v139) = *v132;
                  if (!v138)
                  {
                    ++v132;
                    v131 = 2 * v130 + 2;
                  }
                }
                v140 = &v10[v130];
                v141 = *(unsigned __int8 *)(v128 + v139);
                v142 = *v140;
                v143 = *(unsigned __int8 *)(v128 + v142);
                v138 = v141 == v143;
                LODWORD(result) = v141 < v143;
                if (v138)
                  result = v139 < v142;
                else
                  result = result;
                if ((result & 1) == 0)
                {
                  do
                  {
                    *v140 = v139;
                    v140 = v132;
                    if (v127 < v131)
                      break;
                    v144 = (2 * v131) | 1;
                    v132 = &v10[v144];
                    v131 = 2 * v131 + 2;
                    if (v131 >= (uint64_t)v12)
                    {
                      LODWORD(v139) = *v132;
                      v131 = v144;
                    }
                    else
                    {
                      v139 = *v132;
                      v145 = *(unsigned __int8 *)(v128 + v139);
                      v146 = v132[1];
                      v147 = *(unsigned __int8 *)(v128 + v146);
                      v138 = v145 == v147;
                      v148 = v145 < v147;
                      if (v138)
                        v148 = v139 < v146;
                      if (v148)
                      {
                        LODWORD(v139) = v132[1];
                        ++v132;
                      }
                      else
                      {
                        v131 = v144;
                      }
                    }
                    v149 = *(unsigned __int8 *)(v128 + v139);
                    v150 = *(unsigned __int8 *)(v128 + v142);
                    v138 = v149 == v150;
                    LODWORD(result) = v149 < v150;
                    result = v138 ? v139 < v142 : result;
                  }
                  while ((_DWORD)result != 1);
                  *v140 = v142;
                }
              }
              v129 = v130 - 1;
            }
            while (v130);
            v151 = (unint64_t)v11 >> 2;
            do
            {
              v152 = 0;
              v153 = *v10;
              v154 = *a3;
              v155 = v10;
              do
              {
                v156 = &v155[v152 + 1];
                v157 = (2 * v152) | 1;
                v152 = 2 * v152 + 2;
                if (v152 >= v151)
                {
                  LODWORD(v158) = *v156;
                  v152 = v157;
                }
                else
                {
                  v158 = *v156;
                  v159 = *(unsigned __int8 *)(v154 + v158);
                  result = (uint64_t)(v156 + 1);
                  v160 = v156[1];
                  v161 = *(unsigned __int8 *)(v154 + v160);
                  v138 = v159 == v161;
                  v162 = v159 < v161;
                  if (v138)
                    v162 = v158 < v160;
                  if (v162)
                  {
                    LODWORD(v158) = v156[1];
                    ++v156;
                  }
                  else
                  {
                    v152 = v157;
                  }
                }
                *v155 = v158;
                v155 = v156;
              }
              while (v152 <= (uint64_t)((unint64_t)(v151 - 2) >> 1));
              if (v156 == --a2)
              {
                *v156 = v153;
              }
              else
              {
                *v156 = *a2;
                *a2 = v153;
                v163 = (char *)v156 - (char *)v10 + 4;
                if (v163 >= 5)
                {
                  v164 = (((unint64_t)v163 >> 2) - 2) >> 1;
                  v165 = &v10[v164];
                  v166 = *v165;
                  v167 = *(unsigned __int8 *)(v154 + v166);
                  v168 = *v156;
                  v169 = *(unsigned __int8 *)(v154 + v168);
                  v138 = v167 == v169;
                  v170 = v167 < v169;
                  if (v138)
                    v170 = v166 < v168;
                  if (v170)
                  {
                    do
                    {
                      *v156 = v166;
                      v156 = v165;
                      if (!v164)
                        break;
                      v164 = (v164 - 1) >> 1;
                      v165 = &v10[v164];
                      v166 = *v165;
                      v171 = *(unsigned __int8 *)(v154 + v166);
                      v172 = *(unsigned __int8 *)(v154 + v168);
                      v138 = v171 == v172;
                      v173 = v171 < v172;
                      if (v138)
                        v173 = v166 < v168;
                    }
                    while (v173);
                    *v156 = v168;
                  }
                }
              }
            }
            while (v151-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = *a3;
        if ((unint64_t)v11 < 0x201)
        {
        }
        else
        {
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(v9 - 1);
          v21 = *(unsigned __int8 *)(v18 + v20);
          v19 = *(unsigned __int8 *)(v18 + v17);
          v22 = v20 < v17;
          v138 = v21 == v19;
          v23 = v21 < v19;
          if (!v138)
            v22 = v23;
          if (v22)
            goto LABEL_14;
          v53 = *(a2 - 1);
          v54 = *(unsigned __int8 *)(v18 + v53);
          v55 = v17 < v53;
          v138 = v19 == v54;
          v56 = v19 < v54;
          if (!v138)
            v55 = v56;
          if (v55)
          {
            v10 = v9;
            do
            {
              v57 = v10[1];
              ++v10;
              v58 = *(unsigned __int8 *)(v18 + v57);
              v59 = v17 < v57;
              v138 = v19 == v58;
              v60 = v19 < v58;
              if (!v138)
                v59 = v60;
            }
            while (!v59);
          }
          else
          {
            v61 = v9 + 1;
            do
            {
              v10 = v61;
              if (v61 >= a2)
                break;
              ++v61;
              v62 = *v10;
              v63 = *(unsigned __int8 *)(v18 + v62);
              v64 = v17 < v62;
              v138 = v19 == v63;
              v65 = v19 < v63;
              if (!v138)
                v64 = v65;
            }
            while (!v64);
          }
          v66 = a2;
          if (v10 < a2)
          {
            v66 = a2;
            do
            {
              v67 = *--v66;
              v68 = *(unsigned __int8 *)(v18 + v67);
              v69 = v17 < v67;
              v138 = v19 == v68;
              v70 = v19 < v68;
              if (!v138)
                v69 = v70;
            }
            while (v69);
          }
          if (v10 < v66)
          {
            v71 = *v10;
            v72 = *v66;
            do
            {
              *v10 = v72;
              *v66 = v71;
              v73 = *(unsigned __int8 *)(v18 + v17);
              do
              {
                v74 = v10[1];
                ++v10;
                v71 = v74;
                v75 = *(unsigned __int8 *)(v18 + v74);
                v76 = v17 < v74;
                v138 = v73 == v75;
                v77 = v73 < v75;
                if (v138)
                  v77 = v76;
              }
              while (!v77);
              do
              {
                v78 = *--v66;
                v72 = v78;
                v79 = *(unsigned __int8 *)(v18 + v78);
                v80 = v17 < v78;
                v138 = v73 == v79;
                v81 = v73 < v79;
                if (v138)
                  v81 = v80;
              }
              while (v81);
            }
            while (v10 < v66);
          }
          v82 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v82;
          a5 = 0;
          *v82 = v17;
          continue;
        }
        v19 = *(unsigned __int8 *)(v18 + v17);
LABEL_14:
        v24 = 0;
        do
        {
          v25 = v9[v24 + 1];
          v26 = *(unsigned __int8 *)(v18 + v25);
          v138 = v26 == v19;
          v27 = v26 < v19;
          if (v138)
            v27 = v25 < v17;
          ++v24;
        }
        while (v27);
        v28 = &v9[v24];
        v29 = a2;
        if (v24 == 1)
        {
          v29 = a2;
          do
          {
            if (v28 >= v29)
              break;
            v34 = *--v29;
            v35 = *(unsigned __int8 *)(v18 + v34);
            v36 = v34 < v17;
            v138 = v35 == v19;
            v37 = v35 < v19;
            if (!v138)
              v36 = v37;
          }
          while (!v36);
        }
        else
        {
          do
          {
            v30 = *--v29;
            v31 = *(unsigned __int8 *)(v18 + v30);
            v32 = v30 < v17;
            v138 = v31 == v19;
            v33 = v31 < v19;
            if (!v138)
              v32 = v33;
          }
          while (!v32);
        }
        if (v28 >= v29)
        {
          v51 = v28 - 1;
        }
        else
        {
          v38 = *v29;
          v39 = v25;
          v40 = v28;
          v41 = v29;
          do
          {
            *v40 = v38;
            *v41 = v39;
            v42 = *(unsigned __int8 *)(v18 + v17);
            do
            {
              v43 = v40[1];
              ++v40;
              v39 = v43;
              v44 = *(unsigned __int8 *)(v18 + v43);
              v45 = v43 < v17;
              v138 = v44 == v42;
              v46 = v44 < v42;
              if (v138)
                v46 = v45;
            }
            while (v46);
            do
            {
              v47 = *--v41;
              v38 = v47;
              v48 = *(unsigned __int8 *)(v18 + v47);
              v49 = v47 < v17;
              v138 = v48 == v42;
              v50 = v48 < v42;
              if (v138)
                v50 = v49;
            }
            while (!v50);
          }
          while (v40 < v41);
          v51 = v40 - 1;
        }
        if (v51 != v9)
          *v9 = *v51;
        *v51 = v17;
        if (v28 < v29)
        {
LABEL_45:
          a5 = 0;
          v10 = v51 + 1;
          continue;
        }
        v10 = v51 + 1;
        if (!(_DWORD)result)
        {
          if (v52)
            continue;
          goto LABEL_45;
        }
        a2 = v51;
        if (!v52)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  _BOOL4 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v22;

  v4 = *a2;
  v5 = *(unsigned __int8 *)(a4 + v4);
  v6 = *result;
  v7 = *(unsigned __int8 *)(a4 + v6);
  v8 = v4 < v6;
  v9 = v5 == v7;
  v10 = v5 < v7;
  v11 = *a3;
  v12 = *(unsigned __int8 *)(a4 + v11);
  if (!v9)
    v8 = v10;
  v9 = v12 == v5;
  v13 = v12 < v5;
  if (v9)
    v13 = v11 < v4;
  if (v8)
  {
    if (v13)
    {
      *result = v11;
LABEL_17:
      *a3 = v6;
      return result;
    }
    *result = v4;
    *a2 = v6;
    v19 = *a3;
    v20 = *(unsigned __int8 *)(a4 + v19);
    v21 = *(unsigned __int8 *)(a4 + v6);
    v9 = v20 == v21;
    v22 = v20 < v21;
    if (v9)
      v22 = v19 < v6;
    if (v22)
    {
      *a2 = v19;
      goto LABEL_17;
    }
  }
  else if (v13)
  {
    *a2 = v11;
    *a3 = v4;
    v14 = *a2;
    v15 = *(unsigned __int8 *)(a4 + v14);
    v16 = *result;
    v17 = *(unsigned __int8 *)(a4 + v16);
    v9 = v15 == v17;
    v18 = v15 < v17;
    if (v9)
      v18 = v14 < v16;
    if (v18)
    {
      *result = v14;
      *a2 = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v13;
  unsigned int *v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  BOOL v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  _BOOL4 v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  _BOOL4 v52;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(unsigned __int8 *)(*a3 + v8);
      v10 = *a1;
      v11 = *(unsigned __int8 *)(*a3 + v10);
      v12 = v9 == v11;
      v13 = v9 < v11;
      if (v12)
        v13 = v8 < v10;
      if (v13)
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v32 = a1 + 2;
      v33 = a1 + 3;
      v34 = *a3;
      v35 = *(a2 - 1);
      v36 = *(unsigned __int8 *)(*a3 + v35);
      v37 = a1[3];
      v38 = *(unsigned __int8 *)(*a3 + v37);
      v12 = v36 == v38;
      v39 = v36 < v38;
      if (v12)
        v39 = v35 < v37;
      if (v39)
      {
        *v33 = v35;
        *(a2 - 1) = v37;
        v40 = *v33;
        v41 = *(unsigned __int8 *)(v34 + v40);
        v42 = *v32;
        v43 = *(unsigned __int8 *)(v34 + v42);
        v12 = v41 == v43;
        v44 = v41 < v43;
        if (v12)
          v44 = v40 < v42;
        if (v44)
        {
          *v32 = v40;
          *v33 = v42;
          v45 = *(unsigned __int8 *)(v34 + v40);
          v46 = a1[1];
          v47 = *(unsigned __int8 *)(v34 + v46);
          v12 = v45 == v47;
          v48 = v45 < v47;
          if (v12)
            v48 = v40 < v46;
          if (v48)
          {
            a1[1] = v40;
            a1[2] = v46;
            v49 = *(unsigned __int8 *)(v34 + v40);
            v50 = *a1;
            v51 = *(unsigned __int8 *)(v34 + v50);
            v12 = v49 == v51;
            v52 = v49 < v51;
            if (v12)
              v52 = v40 < v50;
            if (v52)
            {
              *a1 = v40;
              a1[1] = v50;
            }
          }
        }
      }
      return 1;
    default:
      v14 = a1 + 2;
      v15 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v16 = 0;
      v17 = *a3;
      v18 = 12;
      break;
  }
  while (1)
  {
    v19 = *v15;
    v20 = *(unsigned __int8 *)(v17 + v19);
    v21 = *v14;
    v22 = *(unsigned __int8 *)(v17 + v21);
    v12 = v20 == v22;
    v23 = v20 < v22;
    if (v12)
      v23 = v19 < v21;
    if (v23)
    {
      v24 = v18;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v24) = v21;
        v25 = v24 - 4;
        if (v24 == 4)
          break;
        v26 = (char *)a1 + v24;
        v27 = *(unsigned __int8 *)(v17 + v19);
        v21 = *((unsigned int *)v26 - 2);
        v28 = *(unsigned __int8 *)(v17 + v21);
        v12 = v27 == v28;
        v29 = v27 < v28;
        if (v12)
          v30 = v19 < v21;
        else
          v30 = v29;
        v24 = v25;
        if (!v30)
        {
          v31 = (unsigned int *)((char *)a1 + v25);
          goto LABEL_20;
        }
      }
      v31 = a1;
LABEL_20:
      *v31 = v19;
      if (++v16 == 8)
        return v15 + 1 == a2;
    }
    v14 = v15;
    v18 += 4;
    if (++v15 == a2)
      return 1;
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned char>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL4 v27;

  v11 = *a5;
  v12 = *a4;
  v13 = *(unsigned __int8 *)(*a5 + v12);
  v14 = *a3;
  v15 = *(unsigned __int8 *)(*a5 + v14);
  v16 = v13 == v15;
  v17 = v13 < v15;
  if (v16)
    v17 = v12 < v14;
  if (v17)
  {
    *a3 = v12;
    *a4 = v14;
    v18 = *a3;
    v19 = *(unsigned __int8 *)(v11 + v18);
    v20 = *a2;
    v21 = *(unsigned __int8 *)(v11 + v20);
    v16 = v19 == v21;
    v22 = v19 < v21;
    if (v16)
      v22 = v18 < v20;
    if (v22)
    {
      *a2 = v18;
      *a3 = v20;
      v23 = *a2;
      v24 = *(unsigned __int8 *)(v11 + v23);
      v25 = *a1;
      v26 = *(unsigned __int8 *)(v11 + v25);
      v16 = v24 == v26;
      v27 = v24 < v26;
      if (v16)
        v27 = v23 < v25;
      if (v27)
      {
        *a1 = v23;
        *a2 = v25;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  _BOOL4 v50;
  unsigned int *v51;
  BOOL v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  BOOL v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  _BOOL4 v64;
  _BOOL4 v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  BOOL v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  _BOOL4 v75;
  _BOOL4 v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  BOOL v80;
  unsigned int *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  _BOOL4 v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BOOL4 v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  _BOOL4 v99;
  uint64_t v100;
  unsigned int v101;
  _BOOL4 v102;
  uint64_t v103;
  unsigned int v104;
  _BOOL4 v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  _BOOL4 v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  BOOL v118;
  BOOL v119;
  unsigned int *v120;
  int64_t v121;
  uint64_t v122;
  int64_t v123;
  int64_t v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  _BOOL4 v130;
  unsigned int *v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  BOOL v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  _BOOL4 v140;
  unsigned int v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  _BOOL4 v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int *v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  _BOOL4 v162;
  unsigned int v163;
  BOOL v164;
  unsigned int *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  _BOOL4 v172;
  unsigned int *v173;
  unsigned int v174;
  BOOL v175;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v82 = *(a2 - 1);
        v83 = *(unsigned __int16 *)(*a3 + 2 * v82);
        v84 = *v10;
        v85 = *(unsigned __int16 *)(*a3 + 2 * v84);
        v23 = v83 == v85;
        v86 = v83 < v85;
        if (v23)
          v86 = v82 < v84;
        if (v86)
        {
          *v10 = v82;
          *(a2 - 1) = v84;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v87 = v10 + 2;
        v88 = v10 + 3;
        v89 = *a3;
        v90 = *(a2 - 1);
        v91 = *(unsigned __int16 *)(*a3 + 2 * v90);
        v92 = v10[3];
        v93 = *(unsigned __int16 *)(*a3 + 2 * v92);
        v23 = v91 == v93;
        v94 = v91 < v93;
        if (v23)
          v94 = v90 < v92;
        if (v94)
        {
          *v88 = v90;
          *(a2 - 1) = v92;
          v95 = *v88;
          v96 = *(unsigned __int16 *)(v89 + 2 * v95);
          v97 = *v87;
          v98 = *(unsigned __int16 *)(v89 + 2 * v97);
          v23 = v96 == v98;
          v99 = v96 < v98;
          if (v23)
            v99 = v95 < v97;
          if (v99)
          {
            *v87 = v95;
            *v88 = v97;
            v100 = v10[1];
            v101 = *(unsigned __int16 *)(v89 + 2 * v100);
            v23 = v96 == v101;
            v102 = v96 < v101;
            if (v23)
              v102 = v95 < v100;
            if (v102)
            {
              v10[1] = v95;
              v10[2] = v100;
              v103 = *v10;
              v104 = *(unsigned __int16 *)(v89 + 2 * v103);
              v23 = v96 == v104;
              v105 = v96 < v104;
              if (v23)
                v105 = v95 < v103;
              if (v105)
              {
                *v10 = v95;
                v10[1] = v103;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v106 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v107 = *a3;
                v108 = 4;
                v109 = v10;
                do
                {
                  v111 = *v109;
                  v110 = v109[1];
                  v109 = v106;
                  v112 = *(unsigned __int16 *)(v107 + 2 * v110);
                  v113 = *(unsigned __int16 *)(v107 + 2 * v111);
                  v23 = v112 == v113;
                  v114 = v112 < v113;
                  if (v23)
                    v114 = v110 < v111;
                  if (v114)
                  {
                    v115 = v108;
                    while (1)
                    {
                      *(unsigned int *)((char *)v10 + v115) = v111;
                      v116 = v115 - 4;
                      if (v115 == 4)
                        break;
                      v111 = *(unsigned int *)((char *)v10 + v115 - 8);
                      v117 = *(unsigned __int16 *)(v107 + 2 * v111);
                      v118 = v110 < v111;
                      v23 = v112 == v117;
                      v119 = v112 < v117;
                      if (!v23)
                        v118 = v119;
                      v115 = v116;
                      if (!v118)
                      {
                        v120 = (unsigned int *)((char *)v10 + v116);
                        goto LABEL_113;
                      }
                    }
                    v120 = v10;
LABEL_113:
                    *v120 = v110;
                  }
                  v106 = v109 + 1;
                  v108 += 4;
                }
                while (v109 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v166 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v167 = *a3;
              do
              {
                v169 = *v9;
                v168 = v9[1];
                v9 = v166;
                v170 = *(unsigned __int16 *)(v167 + 2 * v168);
                v171 = *(unsigned __int16 *)(v167 + 2 * v169);
                v23 = v170 == v171;
                v172 = v170 < v171;
                if (v23)
                  v172 = v168 < v169;
                if (v172)
                {
                  v173 = v9;
                  do
                  {
                    *v173 = v169;
                    v169 = *(v173 - 2);
                    v174 = *(unsigned __int16 *)(v167 + 2 * v169);
                    v23 = v170 == v174;
                    v175 = v170 < v174;
                    if (v23)
                      v175 = v168 < v169;
                    --v173;
                  }
                  while (v175);
                  *v173 = v168;
                }
                v166 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v121 = (v12 - 2) >> 1;
            v122 = *a3;
            v123 = v121;
            do
            {
              v124 = v123;
              if (v121 >= v123)
              {
                v125 = (2 * v123) | 1;
                v126 = &v10[v125];
                if (2 * v124 + 2 >= (uint64_t)v12)
                {
                  result = *v126;
                }
                else
                {
                  v127 = *v126;
                  v128 = *(unsigned __int16 *)(v122 + 2 * v127);
                  result = v126[1];
                  v129 = *(unsigned __int16 *)(v122 + 2 * result);
                  v23 = v128 == v129;
                  v130 = v128 < v129;
                  if (v23)
                    v130 = v127 < result;
                  if (v130)
                    result = result;
                  else
                    result = v127;
                  if (v130)
                  {
                    ++v126;
                    v125 = 2 * v124 + 2;
                  }
                }
                v131 = &v10[v124];
                v132 = *(unsigned __int16 *)(v122 + 2 * result);
                v133 = *v131;
                v134 = *(unsigned __int16 *)(v122 + 2 * v133);
                v23 = v132 == v134;
                v135 = v132 < v134;
                if (v23)
                  v135 = result < v133;
                if (!v135)
                {
                  do
                  {
                    *v131 = result;
                    v131 = v126;
                    if (v121 < v125)
                      break;
                    v136 = (2 * v125) | 1;
                    v126 = &v10[v136];
                    v125 = 2 * v125 + 2;
                    if (v125 >= (uint64_t)v12)
                    {
                      result = *v126;
                      v125 = v136;
                    }
                    else
                    {
                      result = *v126;
                      v137 = *(unsigned __int16 *)(v122 + 2 * result);
                      v138 = v126[1];
                      v139 = *(unsigned __int16 *)(v122 + 2 * v138);
                      v23 = v137 == v139;
                      v140 = v137 < v139;
                      if (v23)
                        v140 = result < v138;
                      result = v140 ? v138 : result;
                      if (v140)
                        ++v126;
                      else
                        v125 = v136;
                    }
                    v141 = *(unsigned __int16 *)(v122 + 2 * result);
                    v23 = v141 == v134;
                    v142 = v141 < v134;
                    if (v23)
                      v142 = result < v133;
                  }
                  while (!v142);
                  *v131 = v133;
                }
              }
              v123 = v124 - 1;
            }
            while (v124);
            v143 = (unint64_t)v11 >> 2;
            do
            {
              v144 = 0;
              v145 = *v10;
              v146 = *a3;
              v147 = v10;
              do
              {
                v148 = &v147[v144 + 1];
                v149 = (2 * v144) | 1;
                v144 = 2 * v144 + 2;
                if (v144 >= v143)
                {
                  LODWORD(v150) = *v148;
                  v144 = v149;
                }
                else
                {
                  v150 = *v148;
                  v151 = *(unsigned __int16 *)(v146 + 2 * v150);
                  result = (uint64_t)(v148 + 1);
                  v152 = v148[1];
                  v153 = *(unsigned __int16 *)(v146 + 2 * v152);
                  v23 = v151 == v153;
                  v154 = v151 < v153;
                  if (v23)
                    v154 = v150 < v152;
                  if (v154)
                  {
                    LODWORD(v150) = v148[1];
                    ++v148;
                  }
                  else
                  {
                    v144 = v149;
                  }
                }
                *v147 = v150;
                v147 = v148;
              }
              while (v144 <= (uint64_t)((unint64_t)(v143 - 2) >> 1));
              if (v148 == --a2)
              {
                *v148 = v145;
              }
              else
              {
                *v148 = *a2;
                *a2 = v145;
                v155 = (char *)v148 - (char *)v10 + 4;
                if (v155 >= 5)
                {
                  v156 = (((unint64_t)v155 >> 2) - 2) >> 1;
                  v157 = &v10[v156];
                  v158 = *v157;
                  v159 = *(unsigned __int16 *)(v146 + 2 * v158);
                  v160 = *v148;
                  v161 = *(unsigned __int16 *)(v146 + 2 * v160);
                  v23 = v159 == v161;
                  v162 = v159 < v161;
                  if (v23)
                    v162 = v158 < v160;
                  if (v162)
                  {
                    do
                    {
                      *v148 = v158;
                      v148 = v157;
                      if (!v156)
                        break;
                      v156 = (v156 - 1) >> 1;
                      v157 = &v10[v156];
                      v158 = *v157;
                      v163 = *(unsigned __int16 *)(v146 + 2 * v158);
                      v23 = v163 == v161;
                      v164 = v163 < v161;
                      if (v23)
                        v164 = v158 < v160;
                    }
                    while (v164);
                    *v148 = v160;
                  }
                }
              }
            }
            while (v143-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = *a3;
        if ((unint64_t)v11 < 0x201)
        {
        }
        else
        {
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(v9 - 1);
          v21 = *(unsigned __int16 *)(v18 + 2 * v20);
          v19 = *(unsigned __int16 *)(v18 + 2 * v17);
          v22 = v20 < v17;
          v23 = v21 == v19;
          v24 = v21 < v19;
          if (!v23)
            v22 = v24;
          if (v22)
            goto LABEL_14;
          v53 = *(a2 - 1);
          v54 = *(unsigned __int16 *)(v18 + 2 * v53);
          v55 = v17 < v53;
          v23 = v19 == v54;
          v56 = v19 < v54;
          if (!v23)
            v55 = v56;
          if (v55)
          {
            v10 = v9;
            do
            {
              v57 = v10[1];
              ++v10;
              v58 = *(unsigned __int16 *)(v18 + 2 * v57);
              v59 = v17 < v57;
              v23 = v19 == v58;
              v60 = v19 < v58;
              if (!v23)
                v59 = v60;
            }
            while (!v59);
          }
          else
          {
            v61 = v9 + 1;
            do
            {
              v10 = v61;
              if (v61 >= a2)
                break;
              ++v61;
              v62 = *v10;
              v63 = *(unsigned __int16 *)(v18 + 2 * v62);
              v64 = v17 < v62;
              v23 = v19 == v63;
              v65 = v19 < v63;
              if (!v23)
                v64 = v65;
            }
            while (!v64);
          }
          v66 = a2;
          if (v10 < a2)
          {
            v66 = a2;
            do
            {
              v67 = *--v66;
              v68 = *(unsigned __int16 *)(v18 + 2 * v67);
              v69 = v17 < v67;
              v23 = v19 == v68;
              v70 = v19 < v68;
              if (!v23)
                v69 = v70;
            }
            while (v69);
          }
          if (v10 < v66)
          {
            v71 = *v10;
            v72 = *v66;
            do
            {
              *v10 = v72;
              *v66 = v71;
              do
              {
                v73 = v10[1];
                ++v10;
                v71 = v73;
                v74 = *(unsigned __int16 *)(v18 + 2 * v73);
                v75 = v17 < v73;
                v23 = v19 == v74;
                v76 = v19 < v74;
                if (v23)
                  v76 = v75;
              }
              while (!v76);
              do
              {
                v77 = *--v66;
                v72 = v77;
                v78 = *(unsigned __int16 *)(v18 + 2 * v77);
                v79 = v17 < v77;
                v23 = v19 == v78;
                v80 = v19 < v78;
                if (v23)
                  v80 = v79;
              }
              while (v80);
            }
            while (v10 < v66);
          }
          v81 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v81;
          a5 = 0;
          *v81 = v17;
          continue;
        }
        v19 = *(unsigned __int16 *)(v18 + 2 * v17);
LABEL_14:
        v25 = 0;
        do
        {
          v26 = v9[v25 + 1];
          v27 = *(unsigned __int16 *)(v18 + 2 * v26);
          v23 = v27 == v19;
          v28 = v27 < v19;
          if (v23)
            v28 = v26 < v17;
          ++v25;
        }
        while (v28);
        v29 = &v9[v25];
        v30 = a2;
        if (v25 == 1)
        {
          v30 = a2;
          do
          {
            if (v29 >= v30)
              break;
            v35 = *--v30;
            v36 = *(unsigned __int16 *)(v18 + 2 * v35);
            v37 = v35 < v17;
            v23 = v36 == v19;
            v38 = v36 < v19;
            if (!v23)
              v37 = v38;
          }
          while (!v37);
        }
        else
        {
          do
          {
            v31 = *--v30;
            v32 = *(unsigned __int16 *)(v18 + 2 * v31);
            v33 = v31 < v17;
            v23 = v32 == v19;
            v34 = v32 < v19;
            if (!v23)
              v33 = v34;
          }
          while (!v33);
        }
        if (v29 >= v30)
        {
          v51 = v29 - 1;
        }
        else
        {
          v39 = *v30;
          v40 = v26;
          v41 = v29;
          v42 = v30;
          do
          {
            *v41 = v39;
            *v42 = v40;
            do
            {
              v43 = v41[1];
              ++v41;
              v40 = v43;
              v44 = *(unsigned __int16 *)(v18 + 2 * v43);
              v45 = v43 < v17;
              v23 = v44 == v19;
              v46 = v44 < v19;
              if (v23)
                v46 = v45;
            }
            while (v46);
            do
            {
              v47 = *--v42;
              v39 = v47;
              v48 = *(unsigned __int16 *)(v18 + 2 * v47);
              v49 = v47 < v17;
              v23 = v48 == v19;
              v50 = v48 < v19;
              if (v23)
                v50 = v49;
            }
            while (!v50);
          }
          while (v41 < v42);
          v51 = v41 - 1;
        }
        if (v51 != v9)
          *v9 = *v51;
        *v51 = v17;
        if (v29 < v30)
        {
LABEL_45:
          a5 = 0;
          v10 = v51 + 1;
          continue;
        }
        v10 = v51 + 1;
        if (!(_DWORD)result)
        {
          if (v52)
            continue;
          goto LABEL_45;
        }
        a2 = v51;
        if (!v52)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  _BOOL4 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL4 v20;

  v4 = *a2;
  v5 = *(unsigned __int16 *)(a4 + 2 * v4);
  v6 = *result;
  v7 = *(unsigned __int16 *)(a4 + 2 * v6);
  v8 = v4 < v6;
  v9 = *a3;
  v10 = *(unsigned __int16 *)(a4 + 2 * v9);
  if (v5 != v7)
    v8 = v5 < v7;
  v11 = v10 == v5;
  v12 = v10 < v5;
  if (v11)
    v12 = v9 < v4;
  if (v8)
  {
    if (v12)
    {
      *result = v9;
LABEL_17:
      *a3 = v6;
      return result;
    }
    *result = v4;
    *a2 = v6;
    v18 = *a3;
    v19 = *(unsigned __int16 *)(a4 + 2 * v18);
    v11 = v19 == v7;
    v20 = v19 < v7;
    if (v11)
      v20 = v18 < v6;
    if (v20)
    {
      *a2 = v18;
      goto LABEL_17;
    }
  }
  else if (v12)
  {
    *a2 = v9;
    *a3 = v4;
    v13 = *a2;
    v14 = *(unsigned __int16 *)(a4 + 2 * v13);
    v15 = *result;
    v16 = *(unsigned __int16 *)(a4 + 2 * v15);
    v11 = v14 == v16;
    v17 = v14 < v16;
    if (v11)
      v17 = v13 < v15;
    if (v17)
    {
      *result = v13;
      *a2 = v15;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v13;
  unsigned int *v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  _BOOL4 v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  _BOOL4 v42;
  uint64_t v43;
  unsigned int v44;
  _BOOL4 v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL4 v48;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(unsigned __int16 *)(*a3 + 2 * v8);
      v10 = *a1;
      v11 = *(unsigned __int16 *)(*a3 + 2 * v10);
      v12 = v9 == v11;
      v13 = v9 < v11;
      if (v12)
        v13 = v8 < v10;
      if (v13)
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v30 = a1 + 2;
      v31 = a1 + 3;
      v32 = *a3;
      v33 = *(a2 - 1);
      v34 = *(unsigned __int16 *)(*a3 + 2 * v33);
      v35 = a1[3];
      v36 = *(unsigned __int16 *)(*a3 + 2 * v35);
      v12 = v34 == v36;
      v37 = v34 < v36;
      if (v12)
        v37 = v33 < v35;
      if (v37)
      {
        *v31 = v33;
        *(a2 - 1) = v35;
        v38 = *v31;
        v39 = *(unsigned __int16 *)(v32 + 2 * v38);
        v40 = *v30;
        v41 = *(unsigned __int16 *)(v32 + 2 * v40);
        v12 = v39 == v41;
        v42 = v39 < v41;
        if (v12)
          v42 = v38 < v40;
        if (v42)
        {
          *v30 = v38;
          *v31 = v40;
          v43 = a1[1];
          v44 = *(unsigned __int16 *)(v32 + 2 * v43);
          v12 = v39 == v44;
          v45 = v39 < v44;
          if (v12)
            v45 = v38 < v43;
          if (v45)
          {
            a1[1] = v38;
            a1[2] = v43;
            v46 = *a1;
            v47 = *(unsigned __int16 *)(v32 + 2 * v46);
            v12 = v39 == v47;
            v48 = v39 < v47;
            if (v12)
              v48 = v38 < v46;
            if (v48)
            {
              *a1 = v38;
              a1[1] = v46;
            }
          }
        }
      }
      return 1;
    default:
      v14 = a1 + 2;
      v15 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v16 = 0;
      v17 = *a3;
      v18 = 12;
      break;
  }
  while (1)
  {
    v19 = *v15;
    v20 = *(unsigned __int16 *)(v17 + 2 * v19);
    v21 = *v14;
    v22 = *(unsigned __int16 *)(v17 + 2 * v21);
    v12 = v20 == v22;
    v23 = v20 < v22;
    if (v12)
      v23 = v19 < v21;
    if (v23)
    {
      v24 = v18;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v24) = v21;
        v25 = v24 - 4;
        if (v24 == 4)
          break;
        v21 = *(unsigned int *)((char *)a1 + v24 - 8);
        v26 = *(unsigned __int16 *)(v17 + 2 * v21);
        v27 = v19 < v21;
        v12 = v20 == v26;
        v28 = v20 < v26;
        if (!v12)
          v27 = v28;
        v24 = v25;
        if (!v27)
        {
          v29 = (unsigned int *)((char *)a1 + v25);
          goto LABEL_19;
        }
      }
      v29 = a1;
LABEL_19:
      *v29 = v19;
      if (++v16 == 8)
        return v15 + 1 == a2;
    }
    v14 = v15;
    v18 += 4;
    if (++v15 == a2)
      return 1;
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned short>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL4 v27;

  v11 = *a5;
  v12 = *a4;
  v13 = *(unsigned __int16 *)(*a5 + 2 * v12);
  v14 = *a3;
  v15 = *(unsigned __int16 *)(*a5 + 2 * v14);
  v16 = v13 == v15;
  v17 = v13 < v15;
  if (v16)
    v17 = v12 < v14;
  if (v17)
  {
    *a3 = v12;
    *a4 = v14;
    v18 = *a3;
    v19 = *(unsigned __int16 *)(v11 + 2 * v18);
    v20 = *a2;
    v21 = *(unsigned __int16 *)(v11 + 2 * v20);
    v16 = v19 == v21;
    v22 = v19 < v21;
    if (v16)
      v22 = v18 < v20;
    if (v22)
    {
      *a2 = v18;
      *a3 = v20;
      v23 = *a2;
      v24 = *(unsigned __int16 *)(v11 + 2 * v23);
      v25 = *a1;
      v26 = *(unsigned __int16 *)(v11 + 2 * v25);
      v16 = v24 == v26;
      v27 = v24 < v26;
      if (v16)
        v27 = v23 < v25;
      if (v27)
      {
        *a1 = v23;
        *a2 = v25;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  int v35;
  BOOL v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  int v42;
  unsigned int v43;
  int v44;
  BOOL v45;
  BOOL v46;
  unsigned int v47;
  int v48;
  _BOOL4 v49;
  _BOOL4 v50;
  unsigned int *v51;
  BOOL v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  BOOL v56;
  unsigned int v57;
  int v58;
  BOOL v59;
  BOOL v60;
  unsigned int *v61;
  uint64_t v62;
  int v63;
  _BOOL4 v64;
  _BOOL4 v65;
  unsigned int *v66;
  unsigned int v67;
  int v68;
  BOOL v69;
  BOOL v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  int v75;
  _BOOL4 v76;
  _BOOL4 v77;
  unsigned int v78;
  int v79;
  BOOL v80;
  BOOL v81;
  unsigned int *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  _BOOL4 v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  _BOOL4 v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  _BOOL4 v100;
  int v101;
  uint64_t v102;
  int v103;
  _BOOL4 v104;
  int v105;
  uint64_t v106;
  int v107;
  _BOOL4 v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  _BOOL4 v117;
  _BOOL4 v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  int v122;
  int v123;
  BOOL v124;
  BOOL v125;
  unsigned int *v126;
  int64_t v127;
  uint64_t v128;
  int64_t v129;
  int64_t v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  _BOOL4 v137;
  BOOL v138;
  uint64_t v139;
  unsigned int *v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  _BOOL4 v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  _BOOL4 v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int *v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  _BOOL4 v170;
  int v171;
  int v172;
  BOOL v173;
  unsigned int *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  _BOOL4 v181;
  _BOOL4 v182;
  unsigned int *v183;
  int v184;
  int v185;
  BOOL v186;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v83 = *(a2 - 1);
        v84 = *(_DWORD *)(*a3 + 4 * v83);
        v85 = *v10;
        v86 = *(_DWORD *)(*a3 + 4 * v85);
        v138 = v84 == v86;
        v87 = v84 < v86;
        if (v138)
          v87 = v83 < v85;
        if (v87)
        {
          *v10 = v83;
          *(a2 - 1) = v85;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v88 = v10 + 2;
        v89 = v10 + 3;
        v90 = *a3;
        v91 = *(a2 - 1);
        v92 = *(_DWORD *)(*a3 + 4 * v91);
        v93 = v10[3];
        v94 = *(_DWORD *)(*a3 + 4 * v93);
        v138 = v92 == v94;
        v95 = v92 < v94;
        if (v138)
          v95 = v91 < v93;
        if (v95)
        {
          *v89 = v91;
          *(a2 - 1) = v93;
          v96 = *v89;
          v97 = *(_DWORD *)(v90 + 4 * v96);
          v98 = *v88;
          v99 = *(_DWORD *)(v90 + 4 * v98);
          v138 = v97 == v99;
          v100 = v97 < v99;
          if (v138)
            v100 = v96 < v98;
          if (v100)
          {
            *v88 = v96;
            *v89 = v98;
            v101 = *(_DWORD *)(v90 + 4 * v96);
            v102 = v10[1];
            v103 = *(_DWORD *)(v90 + 4 * v102);
            v138 = v101 == v103;
            v104 = v101 < v103;
            if (v138)
              v104 = v96 < v102;
            if (v104)
            {
              v10[1] = v96;
              v10[2] = v102;
              v105 = *(_DWORD *)(v90 + 4 * v96);
              v106 = *v10;
              v107 = *(_DWORD *)(v90 + 4 * v106);
              v138 = v105 == v107;
              v108 = v105 < v107;
              if (v138)
                v108 = v96 < v106;
              if (v108)
              {
                *v10 = v96;
                v10[1] = v106;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v109 = (unint64_t)(v10 + 1);
              if (v10 + 1 != a2)
              {
                v110 = *a3;
                v111 = 4;
                v112 = v10;
                do
                {
                  v114 = *v112;
                  v113 = v112[1];
                  v112 = (unsigned int *)v109;
                  v115 = *(_DWORD *)(v110 + 4 * v113);
                  v116 = *(_DWORD *)(v110 + 4 * v114);
                  LODWORD(v109) = v114;
                  v117 = v113 < v114;
                  v138 = v115 == v116;
                  v118 = v115 < v116;
                  if (!v138)
                    v117 = v118;
                  if (v117)
                  {
                    v119 = v111;
                    while (1)
                    {
                      *(unsigned int *)((char *)v10 + v119) = v109;
                      v120 = v119 - 4;
                      if (v119 == 4)
                        break;
                      v121 = (char *)v10 + v119;
                      v122 = *(_DWORD *)(v110 + 4 * v113);
                      v109 = *((unsigned int *)v121 - 2);
                      v123 = *(_DWORD *)(v110 + 4 * v109);
                      v138 = v122 == v123;
                      v124 = v122 < v123;
                      if (v138)
                        v125 = v113 < v109;
                      else
                        v125 = v124;
                      v119 = v120;
                      if (!v125)
                      {
                        v126 = (unsigned int *)((char *)v10 + v120);
                        goto LABEL_114;
                      }
                    }
                    v126 = v10;
LABEL_114:
                    *v126 = v113;
                  }
                  v109 = (unint64_t)(v112 + 1);
                  v111 += 4;
                }
                while (v112 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v175 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v176 = *a3;
              do
              {
                v178 = *v9;
                v177 = v9[1];
                v9 = v175;
                v179 = *(_DWORD *)(v176 + 4 * v177);
                v180 = *(_DWORD *)(v176 + 4 * v178);
                LODWORD(v175) = v178;
                v181 = v177 < v178;
                v138 = v179 == v180;
                v182 = v179 < v180;
                if (!v138)
                  v181 = v182;
                if (v181)
                {
                  v183 = v9;
                  do
                  {
                    *v183 = v175;
                    v184 = *(_DWORD *)(v176 + 4 * v177);
                    v175 = (unsigned int *)*(v183 - 2);
                    v185 = *(_DWORD *)(v176 + 4 * (_QWORD)v175);
                    v138 = v184 == v185;
                    v186 = v184 < v185;
                    if (v138)
                      v186 = v177 < v175;
                    --v183;
                  }
                  while (v186);
                  *v183 = v177;
                }
                v175 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v127 = (v12 - 2) >> 1;
            v128 = *a3;
            v129 = v127;
            do
            {
              v130 = v129;
              if (v127 >= v129)
              {
                v131 = (2 * v129) | 1;
                v132 = &v10[v131];
                if (2 * v130 + 2 >= (uint64_t)v12)
                {
                  LODWORD(v139) = *v132;
                }
                else
                {
                  v133 = *v132;
                  v134 = *(_DWORD *)(v128 + 4 * v133);
                  v135 = v132[1];
                  v136 = *(_DWORD *)(v128 + 4 * v135);
                  v138 = v134 == v136;
                  v137 = v134 < v136;
                  if (v138)
                    v137 = v133 < v135;
                  v138 = !v137;
                  if (v137)
                    LODWORD(v139) = v132[1];
                  else
                    LODWORD(v139) = *v132;
                  if (!v138)
                  {
                    ++v132;
                    v131 = 2 * v130 + 2;
                  }
                }
                v140 = &v10[v130];
                v141 = *(_DWORD *)(v128 + 4 * v139);
                v142 = *v140;
                v143 = *(_DWORD *)(v128 + 4 * v142);
                v138 = v141 == v143;
                LODWORD(result) = v141 < v143;
                if (v138)
                  result = v139 < v142;
                else
                  result = result;
                if ((result & 1) == 0)
                {
                  do
                  {
                    *v140 = v139;
                    v140 = v132;
                    if (v127 < v131)
                      break;
                    v144 = (2 * v131) | 1;
                    v132 = &v10[v144];
                    v131 = 2 * v131 + 2;
                    if (v131 >= (uint64_t)v12)
                    {
                      LODWORD(v139) = *v132;
                      v131 = v144;
                    }
                    else
                    {
                      v139 = *v132;
                      v145 = *(_DWORD *)(v128 + 4 * v139);
                      v146 = v132[1];
                      v147 = *(_DWORD *)(v128 + 4 * v146);
                      v138 = v145 == v147;
                      v148 = v145 < v147;
                      if (v138)
                        v148 = v139 < v146;
                      if (v148)
                      {
                        LODWORD(v139) = v132[1];
                        ++v132;
                      }
                      else
                      {
                        v131 = v144;
                      }
                    }
                    v149 = *(_DWORD *)(v128 + 4 * v139);
                    v150 = *(_DWORD *)(v128 + 4 * v142);
                    v138 = v149 == v150;
                    LODWORD(result) = v149 < v150;
                    result = v138 ? v139 < v142 : result;
                  }
                  while ((_DWORD)result != 1);
                  *v140 = v142;
                }
              }
              v129 = v130 - 1;
            }
            while (v130);
            v151 = (unint64_t)v11 >> 2;
            do
            {
              v152 = 0;
              v153 = *v10;
              v154 = *a3;
              v155 = v10;
              do
              {
                v156 = &v155[v152 + 1];
                v157 = (2 * v152) | 1;
                v152 = 2 * v152 + 2;
                if (v152 >= v151)
                {
                  LODWORD(v158) = *v156;
                  v152 = v157;
                }
                else
                {
                  v158 = *v156;
                  v159 = *(_DWORD *)(v154 + 4 * v158);
                  result = (uint64_t)(v156 + 1);
                  v160 = v156[1];
                  v161 = *(_DWORD *)(v154 + 4 * v160);
                  v138 = v159 == v161;
                  v162 = v159 < v161;
                  if (v138)
                    v162 = v158 < v160;
                  if (v162)
                  {
                    LODWORD(v158) = v156[1];
                    ++v156;
                  }
                  else
                  {
                    v152 = v157;
                  }
                }
                *v155 = v158;
                v155 = v156;
              }
              while (v152 <= (uint64_t)((unint64_t)(v151 - 2) >> 1));
              if (v156 == --a2)
              {
                *v156 = v153;
              }
              else
              {
                *v156 = *a2;
                *a2 = v153;
                v163 = (char *)v156 - (char *)v10 + 4;
                if (v163 >= 5)
                {
                  v164 = (((unint64_t)v163 >> 2) - 2) >> 1;
                  v165 = &v10[v164];
                  v166 = *v165;
                  v167 = *(_DWORD *)(v154 + 4 * v166);
                  v168 = *v156;
                  v169 = *(_DWORD *)(v154 + 4 * v168);
                  v138 = v167 == v169;
                  v170 = v167 < v169;
                  if (v138)
                    v170 = v166 < v168;
                  if (v170)
                  {
                    do
                    {
                      *v156 = v166;
                      v156 = v165;
                      if (!v164)
                        break;
                      v164 = (v164 - 1) >> 1;
                      v165 = &v10[v164];
                      v166 = *v165;
                      v171 = *(_DWORD *)(v154 + 4 * v166);
                      v172 = *(_DWORD *)(v154 + 4 * v168);
                      v138 = v171 == v172;
                      v173 = v171 < v172;
                      if (v138)
                        v173 = v166 < v168;
                    }
                    while (v173);
                    *v156 = v168;
                  }
                }
              }
            }
            while (v151-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = *a3;
        if ((unint64_t)v11 < 0x201)
        {
        }
        else
        {
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(v9 - 1);
          v21 = *(_DWORD *)(v18 + 4 * v20);
          v19 = *(_DWORD *)(v18 + 4 * v17);
          v22 = v20 < v17;
          v138 = v21 == v19;
          v23 = v21 < v19;
          if (!v138)
            v22 = v23;
          if (v22)
            goto LABEL_14;
          v53 = *(a2 - 1);
          v54 = *(_DWORD *)(v18 + 4 * v53);
          v55 = v17 < v53;
          v138 = v19 == v54;
          v56 = v19 < v54;
          if (!v138)
            v55 = v56;
          if (v55)
          {
            v10 = v9;
            do
            {
              v57 = v10[1];
              ++v10;
              v58 = *(_DWORD *)(v18 + 4 * v57);
              v59 = v17 < v57;
              v138 = v19 == v58;
              v60 = v19 < v58;
              if (!v138)
                v59 = v60;
            }
            while (!v59);
          }
          else
          {
            v61 = v9 + 1;
            do
            {
              v10 = v61;
              if (v61 >= a2)
                break;
              ++v61;
              v62 = *v10;
              v63 = *(_DWORD *)(v18 + 4 * v62);
              v64 = v17 < v62;
              v138 = v19 == v63;
              v65 = v19 < v63;
              if (!v138)
                v64 = v65;
            }
            while (!v64);
          }
          v66 = a2;
          if (v10 < a2)
          {
            v66 = a2;
            do
            {
              v67 = *--v66;
              v68 = *(_DWORD *)(v18 + 4 * v67);
              v69 = v17 < v67;
              v138 = v19 == v68;
              v70 = v19 < v68;
              if (!v138)
                v69 = v70;
            }
            while (v69);
          }
          if (v10 < v66)
          {
            v71 = *v10;
            v72 = *v66;
            do
            {
              *v10 = v72;
              *v66 = v71;
              v73 = *(_DWORD *)(v18 + 4 * v17);
              do
              {
                v74 = v10[1];
                ++v10;
                v71 = v74;
                v75 = *(_DWORD *)(v18 + 4 * v74);
                v76 = v17 < v74;
                v138 = v73 == v75;
                v77 = v73 < v75;
                if (v138)
                  v77 = v76;
              }
              while (!v77);
              do
              {
                v78 = *--v66;
                v72 = v78;
                v79 = *(_DWORD *)(v18 + 4 * v78);
                v80 = v17 < v78;
                v138 = v73 == v79;
                v81 = v73 < v79;
                if (v138)
                  v81 = v80;
              }
              while (v81);
            }
            while (v10 < v66);
          }
          v82 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v82;
          a5 = 0;
          *v82 = v17;
          continue;
        }
        v19 = *(_DWORD *)(v18 + 4 * v17);
LABEL_14:
        v24 = 0;
        do
        {
          v25 = v9[v24 + 1];
          v26 = *(_DWORD *)(v18 + 4 * v25);
          v138 = v26 == v19;
          v27 = v26 < v19;
          if (v138)
            v27 = v25 < v17;
          ++v24;
        }
        while (v27);
        v28 = &v9[v24];
        v29 = a2;
        if (v24 == 1)
        {
          v29 = a2;
          do
          {
            if (v28 >= v29)
              break;
            v34 = *--v29;
            v35 = *(_DWORD *)(v18 + 4 * v34);
            v36 = v34 < v17;
            v138 = v35 == v19;
            v37 = v35 < v19;
            if (!v138)
              v36 = v37;
          }
          while (!v36);
        }
        else
        {
          do
          {
            v30 = *--v29;
            v31 = *(_DWORD *)(v18 + 4 * v30);
            v32 = v30 < v17;
            v138 = v31 == v19;
            v33 = v31 < v19;
            if (!v138)
              v32 = v33;
          }
          while (!v32);
        }
        if (v28 >= v29)
        {
          v51 = v28 - 1;
        }
        else
        {
          v38 = *v29;
          v39 = v25;
          v40 = v28;
          v41 = v29;
          do
          {
            *v40 = v38;
            *v41 = v39;
            v42 = *(_DWORD *)(v18 + 4 * v17);
            do
            {
              v43 = v40[1];
              ++v40;
              v39 = v43;
              v44 = *(_DWORD *)(v18 + 4 * v43);
              v45 = v43 < v17;
              v138 = v44 == v42;
              v46 = v44 < v42;
              if (v138)
                v46 = v45;
            }
            while (v46);
            do
            {
              v47 = *--v41;
              v38 = v47;
              v48 = *(_DWORD *)(v18 + 4 * v47);
              v49 = v47 < v17;
              v138 = v48 == v42;
              v50 = v48 < v42;
              if (v138)
                v50 = v49;
            }
            while (!v50);
          }
          while (v40 < v41);
          v51 = v40 - 1;
        }
        if (v51 != v9)
          *v9 = *v51;
        *v51 = v17;
        if (v28 < v29)
        {
LABEL_45:
          a5 = 0;
          v10 = v51 + 1;
          continue;
        }
        v10 = v51 + 1;
        if (!(_DWORD)result)
        {
          if (v52)
            continue;
          goto LABEL_45;
        }
        a2 = v51;
        if (!v52)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  int v21;
  _BOOL4 v22;

  v4 = *a2;
  v5 = *(_DWORD *)(a4 + 4 * v4);
  v6 = *result;
  v7 = *(_DWORD *)(a4 + 4 * v6);
  v8 = v4 < v6;
  v9 = v5 == v7;
  v10 = v5 < v7;
  v11 = *a3;
  v12 = *(_DWORD *)(a4 + 4 * v11);
  if (!v9)
    v8 = v10;
  v9 = v12 == v5;
  v13 = v12 < v5;
  if (v9)
    v13 = v11 < v4;
  if (v8)
  {
    if (v13)
    {
      *result = v11;
LABEL_17:
      *a3 = v6;
      return result;
    }
    *result = v4;
    *a2 = v6;
    v19 = *a3;
    v20 = *(_DWORD *)(a4 + 4 * v19);
    v21 = *(_DWORD *)(a4 + 4 * v6);
    v9 = v20 == v21;
    v22 = v20 < v21;
    if (v9)
      v22 = v19 < v6;
    if (v22)
    {
      *a2 = v19;
      goto LABEL_17;
    }
  }
  else if (v13)
  {
    *a2 = v11;
    *a3 = v4;
    v14 = *a2;
    v15 = *(_DWORD *)(a4 + 4 * v14);
    v16 = *result;
    v17 = *(_DWORD *)(a4 + 4 * v16);
    v9 = v15 == v17;
    v18 = v15 < v17;
    if (v9)
      v18 = v14 < v16;
    if (v18)
    {
      *result = v14;
      *a2 = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  unsigned int *v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  BOOL v29;
  BOOL v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  _BOOL4 v44;
  int v45;
  uint64_t v46;
  int v47;
  _BOOL4 v48;
  int v49;
  uint64_t v50;
  int v51;
  _BOOL4 v52;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(_DWORD *)(*a3 + 4 * v8);
      v10 = *a1;
      v11 = *(_DWORD *)(*a3 + 4 * v10);
      v12 = v9 == v11;
      v13 = v9 < v11;
      if (v12)
        v13 = v8 < v10;
      if (v13)
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v32 = a1 + 2;
      v33 = a1 + 3;
      v34 = *a3;
      v35 = *(a2 - 1);
      v36 = *(_DWORD *)(*a3 + 4 * v35);
      v37 = a1[3];
      v38 = *(_DWORD *)(*a3 + 4 * v37);
      v12 = v36 == v38;
      v39 = v36 < v38;
      if (v12)
        v39 = v35 < v37;
      if (v39)
      {
        *v33 = v35;
        *(a2 - 1) = v37;
        v40 = *v33;
        v41 = *(_DWORD *)(v34 + 4 * v40);
        v42 = *v32;
        v43 = *(_DWORD *)(v34 + 4 * v42);
        v12 = v41 == v43;
        v44 = v41 < v43;
        if (v12)
          v44 = v40 < v42;
        if (v44)
        {
          *v32 = v40;
          *v33 = v42;
          v45 = *(_DWORD *)(v34 + 4 * v40);
          v46 = a1[1];
          v47 = *(_DWORD *)(v34 + 4 * v46);
          v12 = v45 == v47;
          v48 = v45 < v47;
          if (v12)
            v48 = v40 < v46;
          if (v48)
          {
            a1[1] = v40;
            a1[2] = v46;
            v49 = *(_DWORD *)(v34 + 4 * v40);
            v50 = *a1;
            v51 = *(_DWORD *)(v34 + 4 * v50);
            v12 = v49 == v51;
            v52 = v49 < v51;
            if (v12)
              v52 = v40 < v50;
            if (v52)
            {
              *a1 = v40;
              a1[1] = v50;
            }
          }
        }
      }
      return 1;
    default:
      v14 = a1 + 2;
      v15 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v16 = 0;
      v17 = *a3;
      v18 = 12;
      break;
  }
  while (1)
  {
    v19 = *v15;
    v20 = *(_DWORD *)(v17 + 4 * v19);
    v21 = *v14;
    v22 = *(_DWORD *)(v17 + 4 * v21);
    v12 = v20 == v22;
    v23 = v20 < v22;
    if (v12)
      v23 = v19 < v21;
    if (v23)
    {
      v24 = v18;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v24) = v21;
        v25 = v24 - 4;
        if (v24 == 4)
          break;
        v26 = (char *)a1 + v24;
        v27 = *(_DWORD *)(v17 + 4 * v19);
        v21 = *((unsigned int *)v26 - 2);
        v28 = *(_DWORD *)(v17 + 4 * v21);
        v12 = v27 == v28;
        v29 = v27 < v28;
        if (v12)
          v30 = v19 < v21;
        else
          v30 = v29;
        v24 = v25;
        if (!v30)
        {
          v31 = (unsigned int *)((char *)a1 + v25);
          goto LABEL_20;
        }
      }
      v31 = a1;
LABEL_20:
      *v31 = v19;
      if (++v16 == 8)
        return v15 + 1 == a2;
    }
    v14 = v15;
    v18 += 4;
    if (++v15 == a2)
      return 1;
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  _BOOL4 v27;

  v11 = *a5;
  v12 = *a4;
  v13 = *(_DWORD *)(*a5 + 4 * v12);
  v14 = *a3;
  v15 = *(_DWORD *)(*a5 + 4 * v14);
  v16 = v13 == v15;
  v17 = v13 < v15;
  if (v16)
    v17 = v12 < v14;
  if (v17)
  {
    *a3 = v12;
    *a4 = v14;
    v18 = *a3;
    v19 = *(_DWORD *)(v11 + 4 * v18);
    v20 = *a2;
    v21 = *(_DWORD *)(v11 + 4 * v20);
    v16 = v19 == v21;
    v22 = v19 < v21;
    if (v16)
      v22 = v18 < v20;
    if (v22)
    {
      *a2 = v18;
      *a3 = v20;
      v23 = *a2;
      v24 = *(_DWORD *)(v11 + 4 * v23);
      v25 = *a1;
      v26 = *(_DWORD *)(v11 + 4 * v25);
      v16 = v24 == v26;
      v27 = v24 < v26;
      if (v16)
        v27 = v23 < v25;
      if (v27)
      {
        *a1 = v23;
        *a2 = v25;
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  BOOL v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  _BOOL4 v50;
  unsigned int *v51;
  BOOL v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v59;
  BOOL v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  _BOOL4 v64;
  _BOOL4 v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  BOOL v69;
  BOOL v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  _BOOL4 v76;
  _BOOL4 v77;
  unsigned int v78;
  unsigned int v79;
  BOOL v80;
  BOOL v81;
  unsigned int *v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  _BOOL4 v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  _BOOL4 v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v99;
  _BOOL4 v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  _BOOL4 v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  _BOOL4 v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  _BOOL4 v117;
  _BOOL4 v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unsigned int v122;
  unsigned int v123;
  BOOL v124;
  BOOL v125;
  unsigned int *v126;
  int64_t v127;
  uint64_t v128;
  int64_t v129;
  int64_t v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  _BOOL4 v137;
  BOOL v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  _BOOL4 v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int *v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  uint64_t v160;
  unsigned int v161;
  _BOOL4 v162;
  uint64_t v163;
  unint64_t v164;
  unsigned int *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  _BOOL4 v170;
  unsigned int v171;
  unsigned int v172;
  BOOL v173;
  unsigned int *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  unsigned int v180;
  _BOOL4 v181;
  _BOOL4 v182;
  unsigned int *v183;
  unsigned int v184;
  unsigned int v185;
  BOOL v186;

  v9 = (unsigned int *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v83 = *(a2 - 1);
        v84 = *(_DWORD *)(*a3 + 4 * v83);
        v85 = *v10;
        v86 = *(_DWORD *)(*a3 + 4 * v85);
        v138 = v84 == v86;
        v87 = v84 < v86;
        if (v138)
          v87 = v83 < v85;
        if (v87)
        {
          *v10 = v83;
          *(a2 - 1) = v85;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v88 = v10 + 2;
        v89 = v10 + 3;
        v90 = *a3;
        v91 = *(a2 - 1);
        v92 = *(_DWORD *)(*a3 + 4 * v91);
        v93 = v10[3];
        v94 = *(_DWORD *)(*a3 + 4 * v93);
        v138 = v92 == v94;
        v95 = v92 < v94;
        if (v138)
          v95 = v91 < v93;
        if (v95)
        {
          *v89 = v91;
          *(a2 - 1) = v93;
          v96 = *v89;
          v97 = *(_DWORD *)(v90 + 4 * v96);
          v98 = *v88;
          v99 = *(_DWORD *)(v90 + 4 * v98);
          v138 = v97 == v99;
          v100 = v97 < v99;
          if (v138)
            v100 = v96 < v98;
          if (v100)
          {
            *v88 = v96;
            *v89 = v98;
            v101 = *(_DWORD *)(v90 + 4 * v96);
            v102 = v10[1];
            v103 = *(_DWORD *)(v90 + 4 * v102);
            v138 = v101 == v103;
            v104 = v101 < v103;
            if (v138)
              v104 = v96 < v102;
            if (v104)
            {
              v10[1] = v96;
              v10[2] = v102;
              v105 = *(_DWORD *)(v90 + 4 * v96);
              v106 = *v10;
              v107 = *(_DWORD *)(v90 + 4 * v106);
              v138 = v105 == v107;
              v108 = v105 < v107;
              if (v138)
                v108 = v96 < v106;
              if (v108)
              {
                *v10 = v96;
                v10[1] = v106;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v109 = (unint64_t)(v10 + 1);
              if (v10 + 1 != a2)
              {
                v110 = *a3;
                v111 = 4;
                v112 = v10;
                do
                {
                  v114 = *v112;
                  v113 = v112[1];
                  v112 = (unsigned int *)v109;
                  v115 = *(_DWORD *)(v110 + 4 * v113);
                  v116 = *(_DWORD *)(v110 + 4 * v114);
                  LODWORD(v109) = v114;
                  v117 = v113 < v114;
                  v138 = v115 == v116;
                  v118 = v115 < v116;
                  if (!v138)
                    v117 = v118;
                  if (v117)
                  {
                    v119 = v111;
                    while (1)
                    {
                      *(unsigned int *)((char *)v10 + v119) = v109;
                      v120 = v119 - 4;
                      if (v119 == 4)
                        break;
                      v121 = (char *)v10 + v119;
                      v122 = *(_DWORD *)(v110 + 4 * v113);
                      v109 = *((unsigned int *)v121 - 2);
                      v123 = *(_DWORD *)(v110 + 4 * v109);
                      v138 = v122 == v123;
                      v124 = v122 < v123;
                      if (v138)
                        v125 = v113 < v109;
                      else
                        v125 = v124;
                      v119 = v120;
                      if (!v125)
                      {
                        v126 = (unsigned int *)((char *)v10 + v120);
                        goto LABEL_114;
                      }
                    }
                    v126 = v10;
LABEL_114:
                    *v126 = v113;
                  }
                  v109 = (unint64_t)(v112 + 1);
                  v111 += 4;
                }
                while (v112 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v175 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v176 = *a3;
              do
              {
                v178 = *v9;
                v177 = v9[1];
                v9 = v175;
                v179 = *(_DWORD *)(v176 + 4 * v177);
                v180 = *(_DWORD *)(v176 + 4 * v178);
                LODWORD(v175) = v178;
                v181 = v177 < v178;
                v138 = v179 == v180;
                v182 = v179 < v180;
                if (!v138)
                  v181 = v182;
                if (v181)
                {
                  v183 = v9;
                  do
                  {
                    *v183 = v175;
                    v184 = *(_DWORD *)(v176 + 4 * v177);
                    v175 = (unsigned int *)*(v183 - 2);
                    v185 = *(_DWORD *)(v176 + 4 * (_QWORD)v175);
                    v138 = v184 == v185;
                    v186 = v184 < v185;
                    if (v138)
                      v186 = v177 < v175;
                    --v183;
                  }
                  while (v186);
                  *v183 = v177;
                }
                v175 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v127 = (v12 - 2) >> 1;
            v128 = *a3;
            v129 = v127;
            do
            {
              v130 = v129;
              if (v127 >= v129)
              {
                v131 = (2 * v129) | 1;
                v132 = &v10[v131];
                if (2 * v130 + 2 >= (uint64_t)v12)
                {
                  LODWORD(v139) = *v132;
                }
                else
                {
                  v133 = *v132;
                  v134 = *(_DWORD *)(v128 + 4 * v133);
                  v135 = v132[1];
                  v136 = *(_DWORD *)(v128 + 4 * v135);
                  v138 = v134 == v136;
                  v137 = v134 < v136;
                  if (v138)
                    v137 = v133 < v135;
                  v138 = !v137;
                  if (v137)
                    LODWORD(v139) = v132[1];
                  else
                    LODWORD(v139) = *v132;
                  if (!v138)
                  {
                    ++v132;
                    v131 = 2 * v130 + 2;
                  }
                }
                v140 = &v10[v130];
                v141 = *(_DWORD *)(v128 + 4 * v139);
                v142 = *v140;
                v143 = *(_DWORD *)(v128 + 4 * v142);
                v138 = v141 == v143;
                LODWORD(result) = v141 < v143;
                if (v138)
                  result = v139 < v142;
                else
                  result = result;
                if ((result & 1) == 0)
                {
                  do
                  {
                    *v140 = v139;
                    v140 = v132;
                    if (v127 < v131)
                      break;
                    v144 = (2 * v131) | 1;
                    v132 = &v10[v144];
                    v131 = 2 * v131 + 2;
                    if (v131 >= (uint64_t)v12)
                    {
                      LODWORD(v139) = *v132;
                      v131 = v144;
                    }
                    else
                    {
                      v139 = *v132;
                      v145 = *(_DWORD *)(v128 + 4 * v139);
                      v146 = v132[1];
                      v147 = *(_DWORD *)(v128 + 4 * v146);
                      v138 = v145 == v147;
                      v148 = v145 < v147;
                      if (v138)
                        v148 = v139 < v146;
                      if (v148)
                      {
                        LODWORD(v139) = v132[1];
                        ++v132;
                      }
                      else
                      {
                        v131 = v144;
                      }
                    }
                    v149 = *(_DWORD *)(v128 + 4 * v139);
                    v150 = *(_DWORD *)(v128 + 4 * v142);
                    v138 = v149 == v150;
                    LODWORD(result) = v149 < v150;
                    result = v138 ? v139 < v142 : result;
                  }
                  while ((_DWORD)result != 1);
                  *v140 = v142;
                }
              }
              v129 = v130 - 1;
            }
            while (v130);
            v151 = (unint64_t)v11 >> 2;
            do
            {
              v152 = 0;
              v153 = *v10;
              v154 = *a3;
              v155 = v10;
              do
              {
                v156 = &v155[v152 + 1];
                v157 = (2 * v152) | 1;
                v152 = 2 * v152 + 2;
                if (v152 >= v151)
                {
                  LODWORD(v158) = *v156;
                  v152 = v157;
                }
                else
                {
                  v158 = *v156;
                  v159 = *(_DWORD *)(v154 + 4 * v158);
                  result = (uint64_t)(v156 + 1);
                  v160 = v156[1];
                  v161 = *(_DWORD *)(v154 + 4 * v160);
                  v138 = v159 == v161;
                  v162 = v159 < v161;
                  if (v138)
                    v162 = v158 < v160;
                  if (v162)
                  {
                    LODWORD(v158) = v156[1];
                    ++v156;
                  }
                  else
                  {
                    v152 = v157;
                  }
                }
                *v155 = v158;
                v155 = v156;
              }
              while (v152 <= (uint64_t)((unint64_t)(v151 - 2) >> 1));
              if (v156 == --a2)
              {
                *v156 = v153;
              }
              else
              {
                *v156 = *a2;
                *a2 = v153;
                v163 = (char *)v156 - (char *)v10 + 4;
                if (v163 >= 5)
                {
                  v164 = (((unint64_t)v163 >> 2) - 2) >> 1;
                  v165 = &v10[v164];
                  v166 = *v165;
                  v167 = *(_DWORD *)(v154 + 4 * v166);
                  v168 = *v156;
                  v169 = *(_DWORD *)(v154 + 4 * v168);
                  v138 = v167 == v169;
                  v170 = v167 < v169;
                  if (v138)
                    v170 = v166 < v168;
                  if (v170)
                  {
                    do
                    {
                      *v156 = v166;
                      v156 = v165;
                      if (!v164)
                        break;
                      v164 = (v164 - 1) >> 1;
                      v165 = &v10[v164];
                      v166 = *v165;
                      v171 = *(_DWORD *)(v154 + 4 * v166);
                      v172 = *(_DWORD *)(v154 + 4 * v168);
                      v138 = v171 == v172;
                      v173 = v171 < v172;
                      if (v138)
                        v173 = v166 < v168;
                    }
                    while (v173);
                    *v156 = v168;
                  }
                }
              }
            }
            while (v151-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        v15 = *a3;
        if ((unint64_t)v11 < 0x201)
        {
        }
        else
        {
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *a3;
        if ((a5 & 1) == 0)
        {
          v20 = *(v9 - 1);
          v21 = *(_DWORD *)(v18 + 4 * v20);
          v19 = *(_DWORD *)(v18 + 4 * v17);
          v22 = v20 < v17;
          v138 = v21 == v19;
          v23 = v21 < v19;
          if (!v138)
            v22 = v23;
          if (v22)
            goto LABEL_14;
          v53 = *(a2 - 1);
          v54 = *(_DWORD *)(v18 + 4 * v53);
          v55 = v17 < v53;
          v138 = v19 == v54;
          v56 = v19 < v54;
          if (!v138)
            v55 = v56;
          if (v55)
          {
            v10 = v9;
            do
            {
              v57 = v10[1];
              ++v10;
              v58 = *(_DWORD *)(v18 + 4 * v57);
              v59 = v17 < v57;
              v138 = v19 == v58;
              v60 = v19 < v58;
              if (!v138)
                v59 = v60;
            }
            while (!v59);
          }
          else
          {
            v61 = v9 + 1;
            do
            {
              v10 = v61;
              if (v61 >= a2)
                break;
              ++v61;
              v62 = *v10;
              v63 = *(_DWORD *)(v18 + 4 * v62);
              v64 = v17 < v62;
              v138 = v19 == v63;
              v65 = v19 < v63;
              if (!v138)
                v64 = v65;
            }
            while (!v64);
          }
          v66 = a2;
          if (v10 < a2)
          {
            v66 = a2;
            do
            {
              v67 = *--v66;
              v68 = *(_DWORD *)(v18 + 4 * v67);
              v69 = v17 < v67;
              v138 = v19 == v68;
              v70 = v19 < v68;
              if (!v138)
                v69 = v70;
            }
            while (v69);
          }
          if (v10 < v66)
          {
            v71 = *v10;
            v72 = *v66;
            do
            {
              *v10 = v72;
              *v66 = v71;
              v73 = *(_DWORD *)(v18 + 4 * v17);
              do
              {
                v74 = v10[1];
                ++v10;
                v71 = v74;
                v75 = *(_DWORD *)(v18 + 4 * v74);
                v76 = v17 < v74;
                v138 = v73 == v75;
                v77 = v73 < v75;
                if (v138)
                  v77 = v76;
              }
              while (!v77);
              do
              {
                v78 = *--v66;
                v72 = v78;
                v79 = *(_DWORD *)(v18 + 4 * v78);
                v80 = v17 < v78;
                v138 = v73 == v79;
                v81 = v73 < v79;
                if (v138)
                  v81 = v80;
              }
              while (v81);
            }
            while (v10 < v66);
          }
          v82 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v82;
          a5 = 0;
          *v82 = v17;
          continue;
        }
        v19 = *(_DWORD *)(v18 + 4 * v17);
LABEL_14:
        v24 = 0;
        do
        {
          v25 = v9[v24 + 1];
          v26 = *(_DWORD *)(v18 + 4 * v25);
          v138 = v26 == v19;
          v27 = v26 < v19;
          if (v138)
            v27 = v25 < v17;
          ++v24;
        }
        while (v27);
        v28 = &v9[v24];
        v29 = a2;
        if (v24 == 1)
        {
          v29 = a2;
          do
          {
            if (v28 >= v29)
              break;
            v34 = *--v29;
            v35 = *(_DWORD *)(v18 + 4 * v34);
            v36 = v34 < v17;
            v138 = v35 == v19;
            v37 = v35 < v19;
            if (!v138)
              v36 = v37;
          }
          while (!v36);
        }
        else
        {
          do
          {
            v30 = *--v29;
            v31 = *(_DWORD *)(v18 + 4 * v30);
            v32 = v30 < v17;
            v138 = v31 == v19;
            v33 = v31 < v19;
            if (!v138)
              v32 = v33;
          }
          while (!v32);
        }
        if (v28 >= v29)
        {
          v51 = v28 - 1;
        }
        else
        {
          v38 = *v29;
          v39 = v25;
          v40 = v28;
          v41 = v29;
          do
          {
            *v40 = v38;
            *v41 = v39;
            v42 = *(_DWORD *)(v18 + 4 * v17);
            do
            {
              v43 = v40[1];
              ++v40;
              v39 = v43;
              v44 = *(_DWORD *)(v18 + 4 * v43);
              v45 = v43 < v17;
              v138 = v44 == v42;
              v46 = v44 < v42;
              if (v138)
                v46 = v45;
            }
            while (v46);
            do
            {
              v47 = *--v41;
              v38 = v47;
              v48 = *(_DWORD *)(v18 + 4 * v47);
              v49 = v47 < v17;
              v138 = v48 == v42;
              v50 = v48 < v42;
              if (v138)
                v50 = v49;
            }
            while (!v50);
          }
          while (v40 < v41);
          v51 = v40 - 1;
        }
        if (v51 != v9)
          *v9 = *v51;
        *v51 = v17;
        if (v28 < v29)
        {
LABEL_45:
          a5 = 0;
          v10 = v51 + 1;
          continue;
        }
        v10 = v51 + 1;
        if (!(_DWORD)result)
        {
          if (v52)
            continue;
          goto LABEL_45;
        }
        a2 = v51;
        if (!v52)
          goto LABEL_2;
        return result;
    }
  }
}

_DWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  _BOOL4 v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  _BOOL4 v22;

  v4 = *a2;
  v5 = *(_DWORD *)(a4 + 4 * v4);
  v6 = *result;
  v7 = *(_DWORD *)(a4 + 4 * v6);
  v8 = v4 < v6;
  v9 = v5 == v7;
  v10 = v5 < v7;
  v11 = *a3;
  v12 = *(_DWORD *)(a4 + 4 * v11);
  if (!v9)
    v8 = v10;
  v9 = v12 == v5;
  v13 = v12 < v5;
  if (v9)
    v13 = v11 < v4;
  if (v8)
  {
    if (v13)
    {
      *result = v11;
LABEL_17:
      *a3 = v6;
      return result;
    }
    *result = v4;
    *a2 = v6;
    v19 = *a3;
    v20 = *(_DWORD *)(a4 + 4 * v19);
    v21 = *(_DWORD *)(a4 + 4 * v6);
    v9 = v20 == v21;
    v22 = v20 < v21;
    if (v9)
      v22 = v19 < v6;
    if (v22)
    {
      *a2 = v19;
      goto LABEL_17;
    }
  }
  else if (v13)
  {
    *a2 = v11;
    *a3 = v4;
    v14 = *a2;
    v15 = *(_DWORD *)(a4 + 4 * v14);
    v16 = *result;
    v17 = *(_DWORD *)(a4 + 4 * v16);
    v9 = v15 == v17;
    v18 = v15 < v17;
    if (v9)
      v18 = v14 < v16;
    if (v18)
    {
      *result = v14;
      *a2 = v16;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v13;
  unsigned int *v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  BOOL v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  _BOOL4 v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  _BOOL4 v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  _BOOL4 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  _BOOL4 v52;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *(_DWORD *)(*a3 + 4 * v8);
      v10 = *a1;
      v11 = *(_DWORD *)(*a3 + 4 * v10);
      v12 = v9 == v11;
      v13 = v9 < v11;
      if (v12)
        v13 = v8 < v10;
      if (v13)
      {
        *a1 = v8;
        *(a2 - 1) = v10;
      }
      return result;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      v32 = a1 + 2;
      v33 = a1 + 3;
      v34 = *a3;
      v35 = *(a2 - 1);
      v36 = *(_DWORD *)(*a3 + 4 * v35);
      v37 = a1[3];
      v38 = *(_DWORD *)(*a3 + 4 * v37);
      v12 = v36 == v38;
      v39 = v36 < v38;
      if (v12)
        v39 = v35 < v37;
      if (v39)
      {
        *v33 = v35;
        *(a2 - 1) = v37;
        v40 = *v33;
        v41 = *(_DWORD *)(v34 + 4 * v40);
        v42 = *v32;
        v43 = *(_DWORD *)(v34 + 4 * v42);
        v12 = v41 == v43;
        v44 = v41 < v43;
        if (v12)
          v44 = v40 < v42;
        if (v44)
        {
          *v32 = v40;
          *v33 = v42;
          v45 = *(_DWORD *)(v34 + 4 * v40);
          v46 = a1[1];
          v47 = *(_DWORD *)(v34 + 4 * v46);
          v12 = v45 == v47;
          v48 = v45 < v47;
          if (v12)
            v48 = v40 < v46;
          if (v48)
          {
            a1[1] = v40;
            a1[2] = v46;
            v49 = *(_DWORD *)(v34 + 4 * v40);
            v50 = *a1;
            v51 = *(_DWORD *)(v34 + 4 * v50);
            v12 = v49 == v51;
            v52 = v49 < v51;
            if (v12)
              v52 = v40 < v50;
            if (v52)
            {
              *a1 = v40;
              a1[1] = v50;
            }
          }
        }
      }
      return 1;
    default:
      v14 = a1 + 2;
      v15 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v16 = 0;
      v17 = *a3;
      v18 = 12;
      break;
  }
  while (1)
  {
    v19 = *v15;
    v20 = *(_DWORD *)(v17 + 4 * v19);
    v21 = *v14;
    v22 = *(_DWORD *)(v17 + 4 * v21);
    v12 = v20 == v22;
    v23 = v20 < v22;
    if (v12)
      v23 = v19 < v21;
    if (v23)
    {
      v24 = v18;
      while (1)
      {
        *(unsigned int *)((char *)a1 + v24) = v21;
        v25 = v24 - 4;
        if (v24 == 4)
          break;
        v26 = (char *)a1 + v24;
        v27 = *(_DWORD *)(v17 + 4 * v19);
        v21 = *((unsigned int *)v26 - 2);
        v28 = *(_DWORD *)(v17 + 4 * v21);
        v12 = v27 == v28;
        v29 = v27 < v28;
        if (v12)
          v30 = v19 < v21;
        else
          v30 = v29;
        v24 = v25;
        if (!v30)
        {
          v31 = (unsigned int *)((char *)a1 + v25);
          goto LABEL_20;
        }
      }
      v31 = a1;
LABEL_20:
      *v31 = v19;
      if (++v16 == 8)
        return v15 + 1 == a2;
    }
    v14 = v15;
    v18 += 4;
    if (++v15 == a2)
      return 1;
  }
}

_DWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void re::`anonymous namespace'::computeRepresentativeValuesAndReducedIndicesDiscrete<unsigned int>(re::GeomAttribute const&,re::DynamicArray<unsigned int> &,re::DynamicArray<unsigned char> &)::CompareFunctor &,unsigned int *>(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  _DWORD *result;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  _BOOL4 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL4 v27;

  v11 = *a5;
  v12 = *a4;
  v13 = *(_DWORD *)(*a5 + 4 * v12);
  v14 = *a3;
  v15 = *(_DWORD *)(*a5 + 4 * v14);
  v16 = v13 == v15;
  v17 = v13 < v15;
  if (v16)
    v17 = v12 < v14;
  if (v17)
  {
    *a3 = v12;
    *a4 = v14;
    v18 = *a3;
    v19 = *(_DWORD *)(v11 + 4 * v18);
    v20 = *a2;
    v21 = *(_DWORD *)(v11 + 4 * v20);
    v16 = v19 == v21;
    v22 = v19 < v21;
    if (v16)
      v22 = v18 < v20;
    if (v22)
    {
      *a2 = v18;
      *a3 = v20;
      v23 = *a2;
      v24 = *(_DWORD *)(v11 + 4 * v23);
      v25 = *a1;
      v26 = *(_DWORD *)(v11 + 4 * v25);
      v16 = v24 == v26;
      v27 = v24 < v26;
      if (v16)
        v27 = v23 < v25;
      if (v27)
      {
        *a1 = v23;
        *a2 = v25;
      }
    }
  }
  return result;
}

float32x4_t *re::BoundingSphere::expandToIncludeSphere(float32x4_t *result, float32x4_t *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  float *v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;

  v8 = &a2->f32[3];
  v9 = vsubq_f32(*a2, *result);
  v10 = vmulq_f32(v9, v9);
  *(float *)&a8 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
  LODWORD(v11) = HIDWORD(*(unsigned __int128 *)a2);
  v12 = v11 + *(float *)&a8;
  LODWORD(v13) = HIDWORD(*(unsigned __int128 *)result);
  if ((float)(v11 + *(float *)&a8) >= v13)
  {
    if (v11 <= (float)(v13 + *(float *)&a8))
    {
      if (*(float *)&a8 >= 0.00001)
      {
        v15 = vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0));
        v16 = v11 - *(float *)&a8;
        if (v16 < v13)
          LODWORD(v16) = HIDWORD(*(unsigned __int128 *)result);
        v17 = vaddq_f32(vaddq_f32(*result, vmulq_n_f32(v15, v12)), vsubq_f32(*result, vmulq_n_f32(v15, v16)));
        v18.i64[0] = 0x3F0000003F000000;
        v18.i64[1] = 0x3F0000003F000000;
        *result = vmulq_f32(v17, v18);
        v14 = (float)(v12 + v16) * 0.5;
      }
      else
      {
        if (v13 >= v11)
          v8 = &result->f32[3];
        v14 = *v8;
      }
    }
    else
    {
      *result = *a2;
      v14 = a2->f32[3];
    }
    result->f32[3] = v14;
  }
  return result;
}

uint64_t re::internal::addCapsuleCap(unsigned int **a1, unsigned int a2, unsigned int a3, float32x4_t *a4, float a5)
{
  unsigned int v6;
  unsigned int v7;
  int v9;
  _QWORD *v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v41;
  float v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  float v46;
  unsigned int v47;
  __float2 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  unsigned int v53;
  uint64_t v54;
  float32x4_t v55;
  __float2 v56;
  unint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x2_t v62;
  float32x4_t v63;
  int8x16_t v64;
  unsigned int v65;
  float32x4_t v66;
  float32x4_t v67;
  int v68;
  uint64_t result;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  _DWORD *v79;
  int v80;
  unsigned int v81;
  int v82;
  int v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int *v90;
  int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  _QWORD *v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  _BOOL4 v106;
  unint64_t v107;
  int v108;
  unsigned int *v109;
  unsigned int *v110;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  unsigned int v118;

  v6 = a3;
  v7 = a2;
  if (a1[4])
    _ZF = a1[3] == 0;
  else
    _ZF = 1;
  v9 = !_ZF;
  v108 = v9;
  v10 = *a1;
  v109 = a1[1];
  v110 = a1[2];
  v12 = **a1;
  v93 = *((_QWORD *)*a1 + 3);
  v94 = v12 + 1;
  v92 = a3 * a2;
  v13 = v12 + 1 + a3 * a2;
  *(_DWORD *)v10 = v13;
  *((_DWORD *)v10 + 40) = v13;
  v14 = v10[23];
  if (v14)
  {
    v15 = (uint64_t *)v10[25];
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 72))(v17, *((unsigned int *)v10 + 40));
      v16 -= 8;
    }
    while (v16);
  }
  v18 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v10 + 6), "vertexPosition");
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
    goto LABEL_93;
  v19 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v18, 0);
  v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  if (v101 <= v12)
    goto LABEL_93;
  v20 = 0uLL;
  v21 = vaddq_f32(a4[3], vmlaq_f32(vmlaq_n_f32(vmulq_f32(*a4, (float32x4_t)0), a4[1], a5), (float32x4_t)0, a4[2]));
  *(float32x4_t *)(v19 + 16 * v12) = vdivq_f32(v21, (float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 3));
  if (v110)
  {
    v22 = (uint64_t)a1[2];
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
      goto LABEL_94;
    v23 = re::internal::GeomTypedAttribute<double>::operator[](v22, 0);
    v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    if (v118 <= v12)
      goto LABEL_94;
    *(_QWORD *)(v23 + 8 * v12) = 0x3F0000003F000000;
    v20 = 0uLL;
  }
  else
  {
    v23 = 0;
    v118 = -1;
  }
  if (v109)
  {
    v24 = v23;
    v112 = a4[1];
    v114 = *a4;
    v116 = a4[2];
    v25 = (uint64_t)a1[1];
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25)
      || (v26 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v25, 0),
          v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25),
          v27 <= v12))
    {
LABEL_95:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v28 = v112;
    v20 = v114;
    v29 = v116;
    v30 = vmlaq_f32(vaddq_f32(vmulq_f32(v114, (float32x4_t)0), v112), (float32x4_t)0, v116);
    *(float32x4_t *)(v26 + 16 * v12) = v30;
    v31 = vmulq_f32(v30, (float32x4_t)xmmword_2260E5F20);
    v106 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0] > 0.0;
    v107 = v27;
    v23 = v24;
  }
  else
  {
    v26 = 0;
    v106 = 0;
    v107 = 0xFFFFFFFFLL;
    v28 = 0uLL;
    v29 = 0uLL;
  }
  v115 = v20;
  v117 = v29;
  v113 = v28;
  v91 = v12;
  v100 = v19;
  if (!v108)
  {
    v102 = 0;
    v103 = 0;
    v34 = -1;
    v35 = -1;
    if (!v6)
      goto LABEL_57;
    goto LABEL_34;
  }
  v32 = (uint64_t)a1[3];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32))
  {
    v103 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v32, 0);
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  }
  else
  {
    v33 = 0;
    v103 = 0;
  }
  v36 = (uint64_t)a1[4];
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  if (v34)
  {
    v102 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v36, 0);
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  }
  else
  {
    v102 = 0;
  }
  v35 = v33;
  if (v33 <= v12)
    goto LABEL_91;
  *(float32x4_t *)(v103 + 16 * v12) = vmlaq_f32(vmlaq_f32(v115, (float32x4_t)0, v113), (float32x4_t)0, v117);
  if (v34 <= v12)
  {
LABEL_92:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_93:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_94:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_95;
  }
  __asm { FMOV            V0.4S, #-1.0 }
  *(float32x4_t *)(v102 + 16 * v12) = vmlaq_f32(vmlaq_f32(vmulq_f32(v115, (float32x4_t)0), (float32x4_t)0, v113), _Q0, v117);
  if (v6)
  {
LABEL_34:
    v41 = 0;
    v42 = 6.2832 / (float)v7;
    v43 = (float)v6;
    v104 = v34;
    v105 = v35;
    v44 = v7;
    v45 = v94;
    v46 = 1.5708 / (float)v6;
    v99 = v7;
    v98 = v10;
    v97 = v6;
    v95 = v26;
    v96 = v23;
    do
    {
      v47 = v41 + 1;
      v48 = __sincosf_stret(v46 * (float)(v41 + 1));
      if (v7)
      {
        v49 = 0;
        v50 = v103 + 16 * v45;
        v51 = v26 + 16 * v45;
        v52 = (float)((float)v41 + 1.0) / v43;
        if (v101 >= v45)
          v53 = v101 - v45;
        else
          v53 = 0;
        v54 = v23 + 8 * v45;
        do
        {
          v56 = __sincosf_stret(v42 * (float)v49);
          if (v53 == (_DWORD)v49)
            goto LABEL_85;
          v57 = v45 + v49;
          v55.f32[0] = v48.__sinval * v56.__cosval;
          v58 = v55;
          v58.i32[1] = LODWORD(v48.__cosval);
          v59 = v58;
          v59.f32[2] = v56.__sinval * (float)-v48.__sinval;
          v60 = vmulq_n_f32(v59, a5);
          v61 = vaddq_f32(a4[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*a4, v60.f32[0]), a4[1], *(float32x2_t *)v60.f32, 1), a4[2], v60, 2));
          *(float32x4_t *)(v100 + 16 * v45 + 16 * v49) = vdivq_f32(v61, (float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 3));
          if (v110)
          {
            if (v57 >= v118)
              goto LABEL_86;
            v62.f32[0] = (float)(v52 * v56.__cosval) + 1.0;
            v62.f32[1] = (float)(v52 * v56.__sinval) + 1.0;
            *(float32x2_t *)(v54 + 8 * v49) = vmul_f32(v62, (float32x2_t)0x3F0000003F000000);
          }
          if (v109)
          {
            if (v57 >= v107)
              goto LABEL_87;
            *(float32x4_t *)(v51 + 16 * v49) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v115, v55.f32[0]), v113, *(float32x2_t *)v58.f32, 1), v117, v59, 2);
          }
          if (v108)
          {
            if (v57 >= v105)
              goto LABEL_88;
            v63.i64[0] = LODWORD(v56.__sinval);
            v63.i64[1] = LODWORD(v56.__cosval);
            v64 = (int8x16_t)vnegq_f32(v63);
            if (v106)
              v65 = -1;
            else
              v65 = 0;
            v66 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v65), v64, (int8x16_t)v63);
            *(float32x4_t *)(v50 + 16 * v49) = v66;
            if (v57 >= v104)
              goto LABEL_89;
            v67 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL), vnegq_f32(v66)), v59, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v66, (int32x4_t)v66), (int8x16_t)v66, 0xCuLL));
            *(float32x4_t *)(v102 + 16 * v45 + 16 * v49) = vnegq_f32(vmlaq_lane_f32(vmlaq_n_f32(vmulq_laneq_f32(v115, v67, 2), v113, v67.f32[0]), v117, *(float32x2_t *)v67.f32, 1));
            *(float32x4_t *)(v50 + 16 * v49) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v115, COERCE_FLOAT(*(_OWORD *)(v50 + 16 * v49))), v113, *(float32x2_t *)(v50 + 16 * v49), 1), v117, *(float32x4_t *)(v50 + 16 * v49), 2);
          }
          ++v49;
        }
        while (v44 != (_DWORD)v49);
        v45 += v49;
        v7 = v99;
        v10 = v98;
        v6 = v97;
        v26 = v95;
        v23 = v96;
        v47 = v41 + 1;
      }
      v41 = v47;
    }
    while (v47 != v6);
  }
LABEL_57:
  v68 = v93;
  result = (uint64_t)re::DynamicArray<re::GeomCell4>::resize(v10 + 1, (v92 + v93));
  *((_DWORD *)v10 + 68) = v92 + v93;
  v70 = v10[37];
  if (v70)
  {
    v71 = (uint64_t *)v10[39];
    v72 = 8 * v70;
    do
    {
      v73 = *v71++;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v73 + 72))(v73, *((unsigned int *)v10 + 68));
      v72 -= 8;
    }
    while (v72);
  }
  v74 = v91;
  if (v7)
  {
    v75 = 0;
    v76 = v10[3];
    v68 = v93 + v7;
    while (1)
    {
      v77 = (v93 + v75);
      if (v76 <= v77)
        break;
      v78 = v91 + v75 + 2;
      if (v7 - 1 == v75)
        v78 = v94;
      v79 = (_DWORD *)(v10[5] + 16 * v77);
      *v79 = v91;
      v79[1] = v91 + v75 + 1;
      v79[2] = v78;
      v79[3] = -1;
      if (v7 == ++v75)
        goto LABEL_66;
    }
LABEL_90:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_91:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_92;
  }
LABEL_66:
  if (v6 == 1)
    return result;
  v80 = 0;
  v81 = v7 - 1;
  v82 = v91 + v7;
  do
  {
    if (!v7)
      goto LABEL_82;
    v83 = 0;
    v84 = v94 + v80 * v7;
    v85 = v10[3];
    do
    {
      v86 = (v68 + v83);
      v87 = v82 + v83 + 2;
      LODWORD(result) = v74 + v83 + 2;
      if (v83 - v7 == -1)
        result = v84;
      else
        result = result;
      if (v83 - v7 == -1)
      {
        v87 = v84 + v7;
        v88 = v84 + v81 + v7;
      }
      else
      {
        v88 = v82 + v83 + 1;
      }
      if (v83 - v7 == -1)
        v89 = v84 + v81;
      else
        v89 = v74 + v83 + 1;
      if (v85 <= v86)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_85:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_86:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_87:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_88:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_89:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_90;
      }
      v90 = (int *)(v10[5] + 16 * v86);
      *v90 = v89;
      v90[1] = v88;
      v90[2] = v87;
      v90[3] = result;
      ++v83;
    }
    while (v83 != v7);
    v68 += v83;
LABEL_82:
    ++v80;
    v74 += v7;
    v82 += v7;
  }
  while (v80 != v6 - 1);
  return result;
}

uint64_t re::buildCapsule(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v4;
  _BYTE *v5;
  re::GeomAttribute *v6;
  uint64_t result;
  uint64_t v8;
  re::GeomAttribute *v9;
  float v10;
  float32_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  float32x4_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  int v33;
  unint64_t v34;
  BOOL v35;
  int v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  float v67;
  unsigned int v68;
  unsigned int v69;
  float32x4_t *v70;
  uint64_t v71;
  int32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  int8x16_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  unsigned int **v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  _DWORD *v87;
  re::internal *v88;
  re::GeomMesh *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int16 *v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t v97;
  float32x4_t v98;
  uint64_t v99;
  unsigned int v100;
  float32x4_t v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  re::GeomAttribute *v105;
  uint64_t v106;
  _QWORD v107[2];
  unint64_t v108;
  int v109;
  _DWORD *v110;
  float32x4_t v111[4];
  unsigned int v112;
  uint64_t v113;
  unsigned int **v114;
  uint64_t v115;
  _BYTE v116[112];
  unsigned int v117;
  uint64_t v118;
  uint64_t *v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t *v122;
  unsigned int *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  float32x4_t v129;
  uint64_t v130;
  int v131;
  const char *v132;
  __int16 v133;
  int v134;
  __int16 v135;
  unint64_t v136;
  __int16 v137;
  uint64_t v138;
  float32x4_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v4 = (unint64_t)&v123;
  v144 = *MEMORY[0x24BDAC8D0];
  v125 = 0u;
  v124 = 0u;
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v112);
  if (*a2 < 3u || !a2[1] || !a2[2])
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v116, "vertexPosition", 1, 7);
    if (*((_BYTE *)a2 + 16))
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v116, "vertexUV", 1, 6);
    if (*((_BYTE *)a2 + 17))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v116, "vertexNormal", 1, 7);
      if (*((_BYTE *)a2 + 16))
      {
        if (*((_BYTE *)a2 + 17))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v116, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v116, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=(a1, &v112);
    goto LABEL_13;
  }
  v123 = &v112;
  v5 = v116;
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v116, "vertexPosition", 1, 7);
  if (*((_BYTE *)a2 + 17))
  {
    v6 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v116, "vertexNormal", 1, 7);
    *(_QWORD *)&v124 = v6;
  }
  else
  {
    v6 = 0;
  }
  v105 = v6;
  v93 = a1;
  if (*((_BYTE *)a2 + 16))
  {
    v8 = 0;
    *((_QWORD *)&v124 + 1) = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v116, "vertexUV", 1, 6);
    v106 = *((_QWORD *)&v124 + 1);
    if (*((_BYTE *)a2 + 16) && *((_BYTE *)a2 + 17))
    {
      v8 = (uint64_t)re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v116, "vertexTangent", 1, 7);
      *(_QWORD *)&v125 = v8;
      v9 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v116, "vertexBitangent", 1, 7);
      *((_QWORD *)&v125 + 1) = v9;
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v106 = 0;
  }
  v10 = *((float *)a2 + 2);
  v11 = (float)(*((float *)a2 + 3) + (float)(v10 * -2.0)) * 0.5;
  v111[0] = (float32x4_t)xmmword_2260E5F10;
  v111[1] = (float32x4_t)xmmword_2260E5F20;
  v12.i32[0] = 0;
  v12.f32[1] = v11;
  v12.i32[2] = 0;
  v12.i32[3] = 1.0;
  v101 = v12;
  v111[2] = (float32x4_t)xmmword_2260E5F40;
  v111[3] = v12;
  *(float32x2_t *)v12.f32 = vrsqrte_f32((float32x2_t)1065353216);
  *(float32x2_t *)v12.f32 = vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32)));
  v13 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32))).f32[0]);
  v14 = vmulq_f32(v13, v13).f32[0];
  v15 = vmuls_lane_f32(v13.f32[1], *(float32x2_t *)v13.f32, 1);
  v16 = vmuls_lane_f32(v13.f32[2], v13, 2);
  v17 = vmuls_lane_f32(v13.f32[0], *(float32x2_t *)v13.f32, 1);
  v18 = vmuls_lane_f32(v13.f32[0], v13, 2);
  v12.f32[0] = vmuls_lane_f32(v13.f32[1], v13, 2);
  v19 = -0.000000087423 * v13.f32[0];
  v20 = vmuls_lane_f32(-0.000000087423, *(float32x2_t *)v13.f32, 1);
  v13.f32[0] = vmuls_lane_f32(-0.000000087423, v13, 2);
  *(float *)&v21 = v16 - (float)(1.0 - v16);
  v22.i32[3] = 0;
  v22.f32[0] = v14 - (float)(1.0 - v14);
  v22.f32[1] = v13.f32[0] + (float)(v17 * 2.0);
  v22.f32[2] = -(float)(v20 - (float)(v18 * 2.0));
  v13.i32[3] = 0;
  v13.f32[0] = -(float)(v13.f32[0] - (float)(v17 * 2.0));
  v13.f32[1] = v15 - (float)(1.0 - v15);
  v13.f32[2] = v19 + (float)(v12.f32[0] * 2.0);
  v96 = v13;
  v98 = v22;
  v13.f32[0] = v20 + (float)(v18 * 2.0);
  v13.f32[1] = -(float)(v19 - (float)(v12.f32[0] * 2.0));
  v13.i64[1] = v21;
  v95 = v13;
  v23 = *a2;
  v24 = a2[2];
  re::internal::addCapsuleCap(&v123, *a2, v24, v111, v10);
  v25 = 0;
  v126 = xmmword_2260E5F10;
  v127 = xmmword_2260E5F20;
  v128 = xmmword_2260E5F40;
  v129 = v101;
  do
  {
    *(float32x4_t *)((char *)&v139 + v25) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v98, COERCE_FLOAT(*(__int128 *)((char *)&v126 + v25))), v96, *(float32x2_t *)((char *)&v126 + v25), 1), v95, *(float32x4_t *)((char *)&v126 + v25), 2), (float32x4_t)xmmword_2260E5D70, *(float32x4_t *)((char *)&v126 + v25), 3);
    v25 += 16;
  }
  while (v25 != 64);
  re::internal::addCapsuleCap(&v123, v23, v24, &v139, v10);
  *(_QWORD *)&v128 = 0;
  *(_QWORD *)&v127 = 0;
  v126 = 0uLL;
  DWORD2(v127) = 0;
  v110 = 0;
  v107[1] = 0;
  v108 = 0;
  v107[0] = 0;
  v109 = 0;
  re::DynamicArray<float>::resize((uint64_t)&v126, v23);
  re::DynamicArray<float>::resize((uint64_t)v107, v23);
  v26 = v127;
  if ((_DWORD)v23)
  {
    v27 = 0;
    v28 = (v24 - 1) * v23;
    v29 = (2 * v24 - 1) * v23 + 2;
    v30 = v128;
    v31 = v108;
    v32 = v110;
    v33 = v28 + 1;
    v34 = v23;
    while (v26 != v27)
    {
      *(_DWORD *)(v30 + 4 * v27) = v29 + v34 % v23;
      if (v31 == v27)
        goto LABEL_111;
      *v32++ = v33;
      ++v27;
      ++v33;
      if (!--v34)
        goto LABEL_31;
    }
LABEL_110:
    v130 = 0;
    v143 = 0u;
    v142 = 0u;
    v141 = 0u;
    v140 = 0u;
    v139 = 0u;
    v31 = v26;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v131 = 136315906;
    v132 = "operator[]";
    v133 = 1024;
    v134 = 789;
    v135 = 2048;
    v136 = v31;
    v137 = 2048;
    v138 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_111:
    v130 = 0;
    v143 = 0u;
    v142 = 0u;
    v141 = 0u;
    v140 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v131 = 136315906;
    v132 = "operator[]";
    v133 = 1024;
    v134 = 789;
    v135 = 2048;
    v136 = v31;
    v137 = 2048;
    v138 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_112:
    v130 = 0;
    v143 = 0u;
    v142 = 0u;
    v141 = 0u;
    v140 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v131 = 136315906;
    v132 = "operator[]";
    v133 = 1024;
    v134 = 797;
    v135 = 2048;
    v136 = v4;
    v137 = 2048;
    v138 = v31;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_113:
    v130 = 0;
    v4 = (unint64_t)&v123;
    v143 = 0u;
    v142 = 0u;
    v141 = 0u;
    v140 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v131 = 136315906;
    v132 = "operator[]";
    v133 = 1024;
    v134 = 609;
    v135 = 2048;
    v136 = v31;
    v137 = 2048;
    v138 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v130 = 0;
    v143 = 0u;
    v142 = 0u;
    v141 = 0u;
    v140 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v131 = 136315906;
    v132 = "operator[]";
    v133 = 1024;
    v134 = 797;
    v135 = 2048;
    v136 = v4;
    v137 = 2048;
    v138 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v130 = 0;
    v143 = 0u;
    v142 = 0u;
    v141 = 0u;
    v140 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v131 = 136315906;
    v132 = "operator[]";
    v133 = 1024;
    v134 = 609;
    v135 = 2048;
    v136 = v4;
    v137 = 2048;
    v138 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_31:
  v99 = (uint64_t)v9;
  if (v9)
    v35 = v8 == 0;
  else
    v35 = 1;
  v36 = !v35;
  v102 = v36;
  v104 = v26;
  v37 = v26 + 1;
  v103 = a2[1];
  v100 = v112;
  v112 += v37 + v37 * v103;
  v117 = v112;
  if (v118)
  {
    v38 = v119;
    v39 = 8 * v118;
    do
    {
      v40 = *v38++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 72))(v40, v117);
      v39 -= 8;
    }
    while (v39);
  }
  v41 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v116, "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41))
  {
    v43 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v41, 0);
    LODWORD(v5) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
  }
  else
  {
    LODWORD(v5) = 0;
    v43 = 0;
  }
  v44 = (uint64_t)v105;
  v45 = v106;
  if (v106)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v106 + 16))(v106))
    {
      v46 = re::internal::GeomTypedAttribute<double>::operator[](v106, 0);
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v106 + 16))(v106);
      v48 = v46;
      v49 = v47;
    }
    else
    {
      v48 = 0;
      v49 = 0;
    }
    v44 = (uint64_t)v105;
    v45 = v106;
  }
  else
  {
    v48 = 0;
    v49 = -1;
  }
  v94 = a2;
  if (v44)
  {
    v50 = v48;
    v51 = v49;
    v52 = v44;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44))
    {
      v53 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v52, 0);
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
    }
    else
    {
      v53 = 0;
      v54 = 0;
    }
    v44 = v52;
    v45 = v106;
    v49 = v51;
    v48 = v50;
  }
  else
  {
    v53 = 0;
    v54 = -1;
  }
  v55 = v104;
  v56 = v103;
  v57 = v102;
  if (v102)
  {
    v97 = v48;
    v58 = v49;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8))
    {
      v59 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v8, 0);
      v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
    else
    {
      v60 = 0;
      v59 = 0;
    }
    v8 = v99;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99))
    {
      v62 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v99, 0);
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99);
    }
    else
    {
      v64 = 0;
      v62 = 0;
    }
    v44 = (uint64_t)v105;
    v45 = v106;
    v55 = v104;
    v56 = v103;
    v65 = v100;
    v57 = v102;
    v49 = v58;
    v48 = v97;
    v63 = v60;
    v61 = v59;
  }
  else
  {
    v61 = 0;
    v62 = 0;
    v63 = -1;
    v64 = -1;
    v65 = v100;
  }
  v66 = 0;
  v67 = 1.0 / (float)v103;
  do
  {
    v4 = v66 % v55;
    v31 = v127;
    if ((unint64_t)v127 <= v4)
      goto LABEL_112;
    v31 = *(unsigned int *)(v128 + 4 * v4);
    if (v5 <= v31)
      goto LABEL_113;
    v8 = v108;
    if (v108 <= v4)
      goto LABEL_114;
    v4 = v110[v4];
    if (v5 <= v4)
      goto LABEL_115;
    v68 = 0;
    v69 = v66 + v65;
    do
    {
      if (v5 <= v69)
      {
        v130 = 0;
        v143 = 0u;
        v142 = 0u;
        v141 = 0u;
        v140 = 0u;
        v139 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v131 = 136315906;
        v132 = "operator[]";
        v133 = 1024;
        v134 = 609;
        v135 = 2048;
        v136 = v69;
        v137 = 2048;
        v138 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_104:
        v130 = 0;
        v143 = 0u;
        v142 = 0u;
        v141 = 0u;
        v140 = 0u;
        v139 = 0u;
        v90 = v49;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v131 = 136315906;
        v132 = "operator[]";
        v133 = 1024;
        v134 = 609;
        v135 = 2048;
        v136 = v8;
        v137 = 2048;
        v138 = v90;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_105:
        v130 = 0;
        v143 = 0u;
        v142 = 0u;
        v141 = 0u;
        v140 = 0u;
        v139 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v131 = 136315906;
        v132 = "operator[]";
        v133 = 1024;
        v134 = 609;
        v135 = 2048;
        v136 = v8;
        v137 = 2048;
        v138 = v54;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_106:
        v130 = 0;
        v143 = 0u;
        v142 = 0u;
        v141 = 0u;
        v140 = 0u;
        v139 = 0u;
        v91 = v64;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v131 = 136315906;
        v132 = "operator[]";
        v133 = 1024;
        v134 = 609;
        v135 = 2048;
        v136 = v8;
        v137 = 2048;
        v138 = v91;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_107:
        v130 = 0;
        v143 = 0u;
        v142 = 0u;
        v141 = 0u;
        v140 = 0u;
        v139 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v131 = 136315906;
        v132 = "operator[]";
        v133 = 1024;
        v134 = 609;
        v135 = 2048;
        v136 = v8;
        v137 = 2048;
        v138 = v54;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_108:
        v130 = 0;
        v83 = &v123;
        v143 = 0u;
        v142 = 0u;
        v141 = 0u;
        v140 = 0u;
        v139 = 0u;
        v92 = v63;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v131 = 136315906;
        v132 = "operator[]";
        v133 = 1024;
        v134 = 609;
        v135 = 2048;
        v136 = v8;
        v137 = 2048;
        v138 = v92;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_109:
        v130 = 0;
        v4 = (unint64_t)&v123;
        v143 = 0u;
        v142 = 0u;
        v141 = 0u;
        v140 = 0u;
        v139 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v131 = 136315906;
        v132 = "operator[]";
        v133 = 1024;
        v134 = 789;
        v135 = 2048;
        v136 = v62;
        v137 = 2048;
        v138 = (uint64_t)v83;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_110;
      }
      v8 = v69;
      v70 = (float32x4_t *)(v43 + 16 * v69);
      *v70 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v43 + 16 * v31), 1.0 - (float)(v67 * (float)v68)), vmulq_n_f32(*(float32x4_t *)(v43 + 16 * v4), v67 * (float)v68));
      if (v45)
      {
        if (v49 <= v69)
          goto LABEL_104;
        *(float *)&v71 = (float)(1.0 / (float)v104) * (float)v66;
        *((float *)&v71 + 1) = v67 * (float)v68;
        *(_QWORD *)(v48 + 8 * v69) = v71;
      }
      if (v44)
      {
        if (v54 <= v69)
          goto LABEL_105;
        v42.i32[0] = v70->i32[0];
        v42.i32[2] = v70->i32[2];
        v72 = (int32x4_t)vmulq_f32(v42, v42);
        v72.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v72, 2), vadd_f32(*(float32x2_t *)v72.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v72.i8, 1))).u32[0];
        v73 = vrsqrte_f32((float32x2_t)v72.u32[0]);
        v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(v73, v73)));
        v42 = vmulq_n_f32(v42, vmul_f32(v74, vrsqrts_f32((float32x2_t)v72.u32[0], vmul_f32(v74, v74))).f32[0]);
        *(float32x4_t *)(v53 + 16 * v69) = v42;
      }
      if (v57)
      {
        if (v64 <= v69)
          goto LABEL_106;
        *(_OWORD *)(v62 + 16 * v69) = xmmword_2260E5F20;
        if (v54 <= v69)
          goto LABEL_107;
        if (v63 <= v69)
          goto LABEL_108;
        v75 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v53 + 16 * v69), *(int32x4_t *)(v53 + 16 * v69)), *(int8x16_t *)(v53 + 16 * v69), 0xCuLL), (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)(v53 + 16 * v69));
        v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), v75, 0xCuLL);
        *(float32x4_t *)(v61 + 16 * v69) = v42;
      }
      v69 += v37;
      ++v68;
    }
    while (v56 + 1 != v68);
    ++v66;
  }
  while (v66 <= v55);
  v76 = v114;
  v77 = (_DWORD)v114 + v55 * v56;
  re::DynamicArray<re::GeomCell4>::resize(&v113, v77);
  v120 = v77;
  if (v121)
  {
    v78 = v122;
    v79 = 8 * v121;
    do
    {
      v80 = *v78++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v80 + 72))(v80, v120);
      v79 -= 8;
    }
    while (v79);
  }
  v81 = v100;
  if (v103)
  {
    v82 = 0;
    v83 = v114;
    do
    {
      if (v104)
      {
        v84 = v115;
        v85 = v81 + 1;
        v86 = v104;
        do
        {
          v62 = v76;
          if ((unint64_t)v83 <= v76)
            goto LABEL_109;
          v87 = (_DWORD *)(v84 + 16 * v76);
          *v87 = v85 - 1;
          v87[1] = v85;
          v87[2] = v104 + v85 + 1;
          v87[3] = v104 + v85;
          ++v76;
          ++v85;
          --v86;
        }
        while (v86);
        v81 = v85 - 1;
      }
      ++v81;
      ++v82;
    }
    while (v82 != v103);
  }
  v88 = (re::internal *)re::GeomMesh::operator=(v93, &v112);
  if (*((_BYTE *)v94 + 18))
    re::internal::mergeVertexPositions(v88, v89);
  if (v107[0] && v110)
    (*(void (**)(void))(*(_QWORD *)v107[0] + 40))();
  if ((_QWORD)v126 && (_QWORD)v128)
    (*(void (**)(void))(*(_QWORD *)v126 + 40))();
LABEL_13:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v116);
  result = v113;
  if (v113)
  {
    if (v115)
      return (*(uint64_t (**)(void))(*(_QWORD *)v113 + 40))();
  }
  return result;
}

void re::buildCapsule(re::GeomMesh *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  unsigned __int16 *v3;
  re::GeomAttribute *v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  re::GeomAttribute *v15;
  re::GeomAttribute *v16;
  uint64_t v17;
  re::GeomAttribute *v18;
  re::GeomAttribute *v19;
  re::GeomAttribute *v20;
  uint64_t v21;
  uint64_t v22;
  re::GeomAttribute *v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  int v27;
  re::GeomAttribute *v28;
  _QWORD v29[3];
  int v30;
  re::GeomAttribute *v31;
  _QWORD v32[3];
  int v33;
  re::GeomAttribute *v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[12];
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  unsigned __int16 *v49;
  _DWORD v50[12];
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v3 = a2;
  v53 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 18))
  {
    v36 = *((_DWORD *)a2 + 4);
    v35 = *(_OWORD *)a2;
    BYTE2(v36) = 0;
    re::buildCapsule(a1, &v35);
    return;
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)&v35, 0);
  re::buildCapsule((uint64_t)&v35, v3);
  re::DynamicArray<re::GeomMesh>::clear(a1, v5);
  re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 3uLL);
  v6 = v3[2];
  if (!v3[2] || (v7 = *v3, v7 < 3) || !v3[1])
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 3uLL, (re::GeomMesh *)&v35);
    goto LABEL_27;
  }
  v34 = 0;
  v31 = 0;
  memset(v32, 0, sizeof(v32));
  v33 = 0;
  v28 = 0;
  memset(v29, 0, sizeof(v29));
  v30 = 0;
  v25[1] = 0;
  v26 = 0;
  v25[0] = 0;
  v8 = v7 * v6;
  v27 = 0;
  re::DynamicArray<float>::resize((uint64_t)v25, v8);
  v9 = 0;
  v10 = 1;
  v11 = 736;
  do
  {
    v12 = 0;
    v13 = v10;
    v14 = v26;
    v15 = v28;
    do
    {
      if (v14 == v12)
      {
        *(_QWORD *)v43 = 0;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v38 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v50[0] = 136315906;
        *(_QWORD *)&v50[1] = "operator[]";
        LOWORD(v50[3]) = 1024;
        *(_DWORD *)((char *)&v50[3] + 2) = 789;
        HIWORD(v50[4]) = 2048;
        *(_QWORD *)&v50[5] = v14;
        LOWORD(v50[7]) = 2048;
        *(_QWORD *)((char *)&v50[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_30:
        v37 = 0;
        v51 = 0u;
        v52 = 0u;
        memset(v50, 0, sizeof(v50));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v43 = 136315906;
        *(_QWORD *)&v43[4] = "operator[]";
        v44 = 1024;
        v45 = 789;
        v46 = 2048;
        v47 = v14;
        v48 = 2048;
        v49 = (unsigned __int16 *)v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_31;
      }
      *((_DWORD *)v15 + v12) = v9 * v8 + v12;
      ++v12;
    }
    while (v8 != v12);
    v23 = v15;
    v24 = v14;
    v21 = 0;
    v22 = 0;
    re::makeMeshFromFaces((unint64_t)&v35, &v23, &v21, (uint64_t)v32, (uint64_t)v29, (unint64_t)&v38);
    v14 = v9;
    v2 = *((_QWORD *)a1 + 2);
    if (v2 <= v9)
      goto LABEL_30;
    re::GeomMesh::operator=((uint64_t *)(*((_QWORD *)a1 + 4) + 736 * v9), (uint64_t *)&v38);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v38, v16);
    v10 = 0;
    v9 = 1;
  }
  while ((v13 & 1) != 0);
  v3 = (unsigned __int16 *)(v3[1] * *v3);
  re::DynamicArray<float>::resize((uint64_t)v25, (unint64_t)v3);
  v11 = v26;
  if ((_DWORD)v3)
  {
    v17 = 0;
    v18 = v28;
    while (v11 != v17)
    {
      *((_DWORD *)v18 + v17) = 2 * v8 + v17;
      if (v3 == (unsigned __int16 *)++v17)
        goto LABEL_16;
    }
LABEL_31:
    *(_QWORD *)v43 = 0;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v38 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v50[0] = 136315906;
    *(_QWORD *)&v50[1] = "operator[]";
    LOWORD(v50[3]) = 1024;
    *(_DWORD *)((char *)&v50[3] + 2) = 789;
    HIWORD(v50[4]) = 2048;
    *(_QWORD *)&v50[5] = v11;
    LOWORD(v50[7]) = 2048;
    *(_QWORD *)((char *)&v50[7] + 2) = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_32:
    v37 = 0;
    v51 = 0u;
    v52 = 0u;
    memset(v50, 0, sizeof(v50));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v43 = 136315906;
    *(_QWORD *)&v43[4] = "operator[]";
    v44 = 1024;
    v45 = 789;
    v46 = 2048;
    v47 = 2;
    v48 = 2048;
    v49 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_16:
  v23 = v28;
  v24 = v11;
  v21 = 0;
  v22 = 0;
  re::makeMeshFromFaces((unint64_t)&v35, &v23, &v21, (uint64_t)v32, (uint64_t)v29, (unint64_t)&v38);
  v3 = (unsigned __int16 *)*((_QWORD *)a1 + 2);
  if ((unint64_t)v3 <= 2)
    goto LABEL_32;
  re::GeomMesh::operator=((uint64_t *)(*((_QWORD *)a1 + 4) + 1472), (uint64_t *)&v38);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v38, v19);
  if (v25[0])
  {
    v20 = v28;
    if (v28)
      (*(void (**)(void))(*(_QWORD *)v25[0] + 40))();
  }
  if (v29[0])
  {
    v20 = v31;
    if (v31)
      (*(void (**)(void))(*(_QWORD *)v29[0] + 40))();
  }
  if (v32[0])
  {
    v20 = v34;
    if (v34)
      (*(void (**)(void))(*(_QWORD *)v32[0] + 40))();
  }
LABEL_27:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v35, v20);
}

void re::DynamicArray<re::GeomMesh>::resize(uint64_t a1, unint64_t a2, re::GeomMesh *a3)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return;
    v10 = 736 * a2;
    v11 = a2;
    do
    {
      re::GeomMesh::~GeomMesh((re::GeomMesh *)(*(_QWORD *)(a1 + 32) + v10), (re::GeomAttribute *)a2);
      ++v11;
      v10 += 736;
    }
    while (v11 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::GeomMesh>::setCapacity((_QWORD *)a1, a2);
      v5 = *(_QWORD *)(a1 + 16);
    }
    v7 = a2 - v5;
    if (a2 > v5)
    {
      v8 = 736 * v5;
      do
      {
        v9 = *(_QWORD *)(a1 + 32) + v8;
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
        bzero((void *)(v9 + 16), 0x2C8uLL);
        re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)(v9 + 16));
        *(_QWORD *)(v9 + 728) = 0;
        re::GeomMesh::copy(a3, (re::GeomMesh *)v9);
        v8 += 736;
        --v7;
      }
      while (v7);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::internal::vertexInFace(unint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 a4)
{
  _OWORD v5[5];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (a3 >= a1)
  {
    memset(v5, 0, sizeof(v5));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5[0] = *(_OWORD *)(a2 + 16 * a3);
  return *((unsigned int *)v5 + a4);
}

uint64_t re::internal::findSubmeshFaceVertex(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;

  v6 = *a2;
  v10 = *a2;
  v7 = *(unsigned __int8 *)(a1 + 140);
  if (v7 == 2)
  {
    v8 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(a1 + 144), &v10);
    if (v8 == -1)
      return 0;
    v6 = *(_QWORD *)(a1 + 152) + 8 * v8 + 4;
    goto LABEL_10;
  }
  if (v7 == 1)
  {
    if (*(_QWORD *)(a1 + 160) <= v6)
      return 0;
    v6 = *(_QWORD *)(a1 + 176) + 4 * v6;
LABEL_10:
    LODWORD(v6) = *(_DWORD *)v6;
    if ((_DWORD)v6 == -1)
      return 0;
LABEL_11:
    *(_DWORD *)a3 = v6;
    *(_BYTE *)(a3 + 4) = *((_BYTE *)a2 + 4);
    return 1;
  }
  if (*(_BYTE *)(a1 + 140))
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    result = _os_crash();
    __break(1u);
    return result;
  }
  if (*(_DWORD *)(a1 + 144) > v6)
    goto LABEL_11;
  return 0;
}

uint64_t re::internal::calculateCompatibleFaceVertexTopology(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t i;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v48;
  unsigned int v49;
  int v51;
  unsigned int v52;
  _QWORD v53[2];
  unint64_t v54;
  int v55;
  unsigned int *v56;
  _QWORD v57[2];
  unint64_t v58;
  int v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  int v63;
  _QWORD *v64;
  _QWORD v65[5];
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  __int16 v87;
  _QWORD *v88;
  int v89;
  const char *v90;
  __int16 v91;
  int v92;
  __int16 v93;
  unint64_t v94;
  __int16 v95;
  _QWORD *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;

  v7 = (unint64_t)&v83;
  v102 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 16;
  re::internal::GeomVertexConnectivity::buildVertexConnectivity((unsigned int *)(a1 + 16), (uint64_t)v65);
  v9 = *(unsigned int *)(a1 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  ++*(_DWORD *)(a3 + 24);
  re::DynamicArray<unsigned int>::resize((_QWORD *)a3, (4 * *(_DWORD *)(a1 + 40)), &re::kInvalidMeshIndex);
  v10 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v3 = *(_QWORD *)(a3 + 16);
    v13 = *(_QWORD *)(a3 + 32);
    v14 = *(_QWORD *)(a1 + 56);
    do
    {
      v15 = (4 * v12);
      if (v3 <= v15)
        goto LABEL_111;
      if (v12 == v10)
        goto LABEL_112;
      for (i = 0; i != 16; i += 4)
        *(_DWORD *)(v13 + 4 * v11 + i) = *(_DWORD *)(v14 + i);
      if (*(_DWORD *)(v13 + 4 * v15 + 12) == -1)
      {
        v15 = v15 | 3;
        if (v3 <= v15)
          goto LABEL_114;
        *(_DWORD *)(v13 + 4 * v15) = -1;
      }
      ++v12;
      v11 += 4;
      v14 += 16;
    }
    while (v12 != v10);
  }
  v88 = 0;
  v84 = 0;
  v85 = 0;
  v83 = 0;
  v86 = 0;
  v64 = 0;
  v61[1] = 0;
  v62 = 0;
  v60 = 0;
  v61[0] = 0;
  v63 = 0;
  v57[1] = 0;
  v58 = 0;
  v56 = 0;
  v57[0] = 0;
  v59 = 0;
  v53[1] = 0;
  v54 = 0;
  v53[0] = 0;
  v55 = 0;
  re::DynamicArray<float *>::setCapacity(&v83, 0x40uLL);
  re::DynamicArray<float *>::setCapacity(v61, 0x40uLL);
  re::DynamicArray<float *>::setCapacity(v57, 0x40uLL);
  re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v53, 0x40uLL);
  v48 = *(_DWORD *)v8;
  if (!*(_DWORD *)v8)
    goto LABEL_84;
  v17 = 0;
  do
  {
    v54 = 0;
    ++v55;
    re::internal::GeomVertexConnectivity::faceVertices((re::internal::GeomVertexConnectivity *)v65, v17, v53);
    v52 = v17;
    if (re::internal::GeomVertexConnectivity::faceCount((re::internal::GeomVertexConnectivity *)v65, v17) > 0x3F)
    {
      if (!*(_QWORD *)(a2 + 16))
        goto LABEL_83;
      v19 = 0;
      v20 = 0;
      v21 = v54;
      while (1)
      {
        if (!v21)
          goto LABEL_116;
        v22 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v19);
        if (!re::internal::findSubmeshFaceVertex(v22, v56, (uint64_t)&v81))
          goto LABEL_29;
        v23 = re::internal::vertexInFace(*(_QWORD *)(v22 + 24), *(_QWORD *)(v22 + 40), v81, BYTE4(v81));
        v21 = v54;
        if (v54 >= 2)
          break;
LABEL_27:
        v19 = ++v20;
        if (*(_QWORD *)(a2 + 16) <= (unint64_t)v20)
          goto LABEL_83;
      }
      v24 = v23;
      v3 = 2;
      v25 = 1;
      while (re::internal::findSubmeshFaceVertex(v22, &v56[2 * v25], (uint64_t)&v81)
           && re::internal::vertexInFace(*(_QWORD *)(v22 + 24), *(_QWORD *)(v22 + 40), v81, BYTE4(v81)) == v24)
      {
        v25 = v3;
        v21 = v54;
        v26 = v54 > v3;
        v3 = (v3 + 1);
        if (!v26)
          goto LABEL_27;
      }
LABEL_29:
      v27 = re::internal::GeomVertexConnectivity::faceCount((re::internal::GeomVertexConnectivity *)v65, v52);
      if (v27 < 2)
        goto LABEL_83;
      v15 = v27;
      v28 = 1;
      while (1)
      {
        v29 = re::internal::GeomVertexConnectivity::faceVertex((re::internal::GeomVertexConnectivity *)v65, v52, v28);
        v3 = 4 * (_DWORD)v29 + BYTE4(v29);
        v8 = *(_QWORD *)(a3 + 16);
        if (v8 <= v3)
          break;
        *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4 * v3) = v9 + v28++ - 1;
        if ((_DWORD)v15 == v28)
        {
          v9 = (v9 + v28 - 1);
          goto LABEL_83;
        }
      }
LABEL_113:
      v82 = 0;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v97 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v89 = 136315906;
      v90 = "operator[]";
      v91 = 1024;
      v92 = 789;
      v93 = 2048;
      v94 = v3;
      v95 = 2048;
      v96 = (_QWORD *)v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_114:
      v61[0] = 0;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v97 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v83) = 136315906;
      *(_QWORD *)(v7 + 4) = "operator[]";
      WORD2(v84) = 1024;
      *(_DWORD *)(v7 + 14) = 789;
      WORD1(v85) = 2048;
      *(_QWORD *)(v7 + 20) = v15;
      v87 = 2048;
      *(_QWORD *)(v7 + 30) = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_115:
      v82 = 0;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v97 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v89 = 136315906;
      v90 = "operator[]";
      v91 = 1024;
      v92 = 789;
      v93 = 2048;
      v94 = v3;
      v95 = 2048;
      v96 = (_QWORD *)v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_116:
      v82 = 0;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v97 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v89 = 136315906;
      v90 = "operator[]";
      v91 = 1024;
      v92 = 797;
      v93 = 2048;
      v94 = 0;
      v95 = 2048;
      v96 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v18 = a2;
    if (v85 != 1)
    {
      if (!v85)
      {
        if (v84 || (re::DynamicArray<float *>::setCapacity(&v83, 1uLL), !v85))
          *v88 = 0;
      }
      v85 = 1;
      ++v86;
    }
    v30 = (uint64_t)v88;
    *v88 = 0;
    if (v54)
    {
      v31 = 0;
      v32 = 1;
      do
      {
        v3 = 1 << v31;
        v33 = re::Bitset<64>::toWordIndex(v30, v31);
        *(_QWORD *)(v30 + 8 * v33) |= v3;
        v31 = v32;
        v26 = v54 > v32++;
      }
      while (v26);
    }
    ++v63;
    v58 = 0;
    ++v59;
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_83;
    v34 = 0;
    v35 = 0;
    v49 = v9;
    do
    {
      v51 = v35;
      v10 = *(_QWORD *)(*(_QWORD *)(v18 + 32) + 8 * v34);
      v62 = 0;
      ++v63;
      v36 = v54;
      v80 = 0;
      v81 = 0;
      if (!(_DWORD)v54)
        goto LABEL_58;
      v15 = 0;
      v37 = 1;
      do
      {
        v8 = v54;
        if (v54 <= v15)
          goto LABEL_109;
        v79 = *(_QWORD *)&v56[2 * v15];
        re::Bitset<64>::toWordIndex((uint64_t)&v80, v15);
        v8 = 1 << v15;
        if ((v80 & (1 << v15)) == 0)
        {
          if ((re::internal::findSubmeshFaceVertex(v10, (unsigned int *)&v79, (uint64_t)&v77) & 1) != 0)
          {
            v76 = 0;
            re::Bitset<64>::toWordIndex((uint64_t)&v76, v15);
            v76 |= v8;
            v4 = (_QWORD *)re::internal::vertexInFace(*(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 40), v77, v78);
            v7 = v37;
            if (v15 + 1 < v36)
            {
              while (1)
              {
                v3 = v54;
                if (v54 <= v7)
                  break;
                *(_QWORD *)&v97 = *(_QWORD *)&v56[2 * v7];
                if (re::internal::findSubmeshFaceVertex(v10, (unsigned int *)&v97, (uint64_t)&v77)
                  && (_DWORD)v4 == re::internal::vertexInFace(*(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 40), v77, v78))
                {
                  v3 = 1 << v7;
                  re::Bitset<64>::toWordIndex((uint64_t)&v76, v7);
                  v76 |= 1 << v7;
                  re::Bitset<64>::toWordIndex((uint64_t)&v80, v7);
                  v80 |= 1 << v7;
                }
                if (v36 == ++v7)
                  goto LABEL_52;
              }
              v82 = 0;
              v100 = 0u;
              v101 = 0u;
              v98 = 0u;
              v99 = 0u;
              v97 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v89 = 136315906;
              v90 = "operator[]";
              v91 = 1024;
              v92 = 797;
              v93 = 2048;
              v94 = v7;
              v95 = 2048;
              v96 = (_QWORD *)v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_109:
              v82 = 0;
              v100 = 0u;
              v101 = 0u;
              v98 = 0u;
              v99 = 0u;
              v97 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v89 = 136315906;
              v90 = "operator[]";
              v91 = 1024;
              v92 = 797;
              v93 = 2048;
              v94 = v15;
              v95 = 2048;
              v96 = (_QWORD *)v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_110:
              v82 = 0;
              v100 = 0u;
              v101 = 0u;
              v98 = 0u;
              v99 = 0u;
              v97 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v89 = 136315906;
              v90 = "operator[]";
              v91 = 1024;
              v92 = 789;
              v93 = 2048;
              v94 = v7;
              v95 = 2048;
              v96 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_111:
              v61[0] = 0;
              v100 = 0u;
              v101 = 0u;
              v98 = 0u;
              v99 = 0u;
              v97 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v83) = 136315906;
              *(_QWORD *)(v7 + 4) = "operator[]";
              WORD2(v84) = 1024;
              *(_DWORD *)(v7 + 14) = 789;
              WORD1(v85) = 2048;
              *(_QWORD *)(v7 + 20) = v15;
              v87 = 2048;
              *(_QWORD *)(v7 + 30) = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_112:
              v61[0] = 0;
              v100 = 0u;
              v101 = 0u;
              v98 = 0u;
              v99 = 0u;
              v97 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v83) = 136315906;
              *(_QWORD *)(v7 + 4) = "operator[]";
              WORD2(v84) = 1024;
              *(_DWORD *)(v7 + 14) = 797;
              WORD1(v85) = 2048;
              *(_QWORD *)(v7 + 20) = v10;
              v87 = 2048;
              *(_QWORD *)(v7 + 30) = v10;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_113;
            }
LABEL_52:
            re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorImpl>>::add((_anonymous_namespace_ *)v61, &v76);
          }
          else
          {
            re::Bitset<64>::toWordIndex((uint64_t)&v81, v15);
            v81 |= v8;
          }
          re::Bitset<64>::toWordIndex((uint64_t)&v80, v15);
          v80 |= v8;
        }
        ++v15;
        ++v37;
      }
      while (v15 != v36);
      if (v81)
        re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorImpl>>::add((_anonymous_namespace_ *)v61, &v81);
LABEL_58:
      v58 = 0;
      ++v59;
      v9 = v49;
      if (v85)
      {
        v38 = v88;
        v39 = &v88[v85];
        v40 = v64;
        v41 = v62;
        v3 = 8 * v62;
        do
        {
          v7 = v3;
          v4 = v40;
          if (v41)
          {
            do
            {
              *(_QWORD *)&v97 = *v4 & *v38;
              if ((_QWORD)v97)
                re::DynamicArray<re::DataArrayHandle<re::PerFrameAllocatorImpl>>::add((_anonymous_namespace_ *)v57, &v97);
              ++v4;
              v7 -= 8;
            }
            while (v7);
          }
          ++v38;
        }
        while (v38 != v39);
      }
      if (v83)
      {
        v18 = a2;
        v42 = v51;
        if (v57[0])
          re::DynamicArray<char const*>::copy(&v83, (uint64_t)v57);
        else
          v85 = 0;
        ++v86;
      }
      else
      {
        v18 = a2;
        v42 = v51;
        if (v57[0])
        {
          v83 = (void *)v57[0];
          re::DynamicArray<float *>::setCapacity(&v83, v58);
          ++v86;
          re::DynamicArray<char const*>::copy(&v83, (uint64_t)v57);
        }
      }
      v34 = (v42 + 1);
      v35 = v42 + 1;
    }
    while (*(_QWORD *)(v18 + 16) > v34);
    v3 = v85;
    if ((v85 & 0xFFFFFFFE) != 0)
    {
      v43 = v88;
      v8 = v85;
      v10 = 1;
      while (1)
      {
        if (v10 == v3)
          goto LABEL_115;
        v44 = v43[v10];
        if (v44)
          break;
LABEL_82:
        v9 = (v9 + 1);
        if (++v10 == v8)
          goto LABEL_83;
      }
      v15 = __clz(__rbit64(v44));
      while (1)
      {
        v45 = re::internal::GeomVertexConnectivity::faceVertex((re::internal::GeomVertexConnectivity *)v65, v52, v15);
        v7 = 4 * (_DWORD)v45 + BYTE4(v45);
        v4 = *(_QWORD **)(a3 + 16);
        if ((unint64_t)v4 <= v7)
          goto LABEL_110;
        *(_DWORD *)(*(_QWORD *)(a3 + 32) + 4 * v7) = v9;
        if (v15 <= 0x3E)
        {
          v46 = (v43[v10] & (-2 << v15)) == 0;
          v15 = __clz(__rbit64(v43[v10] & (-2 << v15)));
          if (!v46)
            continue;
        }
        goto LABEL_82;
      }
    }
LABEL_83:
    v17 = v52 + 1;
  }
  while (v52 + 1 != v48);
LABEL_84:
  if (v53[0] && v56)
    (*(void (**)(void))(*(_QWORD *)v53[0] + 40))();
  if (v57[0] && v60)
    (*(void (**)(void))(*(_QWORD *)v57[0] + 40))();
  if (v61[0] && v64)
    (*(void (**)(void))(*(_QWORD *)v61[0] + 40))();
  if (v83 && v88)
    (*(void (**)(void))(*(_QWORD *)v83 + 40))();
  if (v71)
  {
    if (v75)
      (*(void (**)(void))(*(_QWORD *)v71 + 40))();
    v75 = 0;
    v72 = 0;
    v73 = 0;
    v71 = 0;
    ++v74;
  }
  if (v66)
  {
    if (v70)
      (*(void (**)(void))(*(_QWORD *)v66 + 40))();
    v70 = 0;
    v67 = 0;
    v68 = 0;
    v66 = 0;
    ++v69;
  }
  if (v65[0] && v65[4])
    (*(void (**)(void))(*(_QWORD *)v65[0] + 40))();
  return v9;
}

unint64_t re::internal::GeomVertexConnectivity::faceVertices(re::internal::GeomVertexConnectivity *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*((_QWORD *)a1 + 2) <= (unint64_t)a2)
    goto LABEL_8;
  v6 = *(unsigned int *)(*((_QWORD *)a1 + 4) + 4 * a2);
  re::DynamicArray<re::internal::GeomVertexConnectivity::FaceVertex>::resize(a3, v6);
  if ((_DWORD)v6)
  {
    v7 = 0;
    while (1)
    {
      v8 = re::internal::GeomVertexConnectivity::faceVertex(a1, a2, v7);
      if (a3[2] <= v7)
        break;
      v9 = a3[4] + 8 * v7;
      *(_BYTE *)(v9 + 4) = BYTE4(v8);
      *(_DWORD *)v9 = v8;
      if (++v7 == v6)
        return v6;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v6;
}

uint64_t re::internal::GeomVertexConnectivity::faceCount(re::internal::GeomVertexConnectivity *this, unsigned int a2)
{
  if (*((_QWORD *)this + 2) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((_QWORD *)this + 4) + 4 * a2);
}

re::GeomAttribute *re::internal::createAndCopyVertexAttribute(re::GeomAttribute *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  re::GeomAttribute *v6;

  if ((*((unsigned __int8 *)result + 16) | 2) == 3)
  {
    v6 = result;
    result = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)(a4 + 48), *((char **)result + 1), 1, *((unsigned __int8 *)result + 17));
    if (result)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        if (*(_QWORD *)(a3 + 16))
          return (re::GeomAttribute *)(*(uint64_t (**)(re::GeomAttribute *, re::GeomAttribute *))(*(_QWORD *)v6 + 40))(v6, result);
      }
      else
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomBaseMesh::addFaceVaryingAttribute(_anonymous_namespace_ *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  re::GeomAttribute *v19;
  uint64_t v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t result;
  unsigned int v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int v41[3];
  char v42;
  _anonymous_namespace_ *v43;
  uint64_t v44;
  _anonymous_namespace_ *v45;
  _anonymous_namespace_ *v46;
  int v47;
  const char *v48;
  __int16 v49;
  _BYTE v50[24];
  _QWORD v51[3];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[14];

  v58[11] = *MEMORY[0x24BDAC8D0];
  v11 = *(_QWORD *)(a4 + 24);
  v12 = v11;
  if ((_DWORD)v11 != *((_QWORD *)a1 + 3))
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v36 = 0;
    if ((_DWORD)v11)
    {
      v23 = 0;
      while (1)
      {
        v35 = 0;
        v24 = v23;
        v16 = *(_QWORD *)(a5 + 16);
        if (v16 <= v23)
          break;
        v35 = *(_DWORD *)(*(_QWORD *)(a5 + 32) + 4 * v23);
        re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addOrReplace((_anonymous_namespace_ *)&v37, &v35, &v36);
        v23 = v36 + 1;
        v36 = v23;
        if (v23 >= v11)
          goto LABEL_17;
      }
      *(_QWORD *)v41 = 0;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v53 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v47 = 136315906;
      v48 = "operator[]";
      v49 = 1024;
      *(_DWORD *)v50 = 789;
      *(_WORD *)&v50[4] = 2048;
      *(_QWORD *)&v50[6] = v24;
      *(_WORD *)&v50[14] = 2048;
      *(_QWORD *)&v50[16] = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      *(_QWORD *)v41 = 0;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v53 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v47 = 136315906;
      v48 = "operator[]";
      v49 = 1024;
      *(_DWORD *)v50 = 789;
      *(_WORD *)&v50[4] = 2048;
      *(_QWORD *)&v50[6] = v11;
      *(_WORD *)&v50[14] = 2048;
      *(_QWORD *)&v50[16] = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      *(_QWORD *)v41 = 0;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v53 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v47 = 136315906;
      v48 = "operator[]";
      v49 = 1024;
      *(_DWORD *)v50 = 789;
      *(_WORD *)&v50[4] = 2048;
      *(_QWORD *)&v50[6] = v5;
      *(_WORD *)&v50[14] = 2048;
      *(_QWORD *)&v50[16] = v16;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_17:
    re::GeomIndexMap::GeomIndexMap((uint64_t)&v47, a5);
    re::GeomIndexMap::GeomIndexMap(v41, (uint64_t *)&v37);
    LODWORD(v53) = *(_DWORD *)a4;
    *((_QWORD *)&v53 + 1) = *(_QWORD *)(a4 + 8);
    v54 = *(_OWORD *)(a4 + 16);
    *((_QWORD *)&v55 + 1) = *(_QWORD *)(a4 + 40);
    *(_QWORD *)(a4 + 40) = 0;
    v25 = *(_DWORD *)(a4 + 32);
    LODWORD(v55) = 1;
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 32) = v25 + 2;
    *(_QWORD *)(a4 + 24) = 0;
    re::GeomIndexMap::GeomIndexMap((uint64_t)&v56, (uint64_t)&v47);
    re::GeomIndexMap::GeomIndexMap((uint64_t)v58, (uint64_t)v41);
    v19 = re::internal::GeomAttributeManager::addFaceVaryingAttribute((uint64_t)a1 + 48, a2, a3, (re::internal::GeomAttributeFaceVaryingSubmesh *)&v53);
    re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v53, v26);
    switch(v42)
    {
      case 0:
        goto LABEL_28;
      case 2:
        v28 = v46;
        if (!v46)
          goto LABEL_28;
        if (v44)
          v44 = 0;
        v27 = v43;
        if (!v43)
          goto LABEL_28;
        break;
      case 1:
        v28 = v43;
        if (!v43 || (v27 = v45) == 0)
        {
LABEL_28:
          if ((_BYTE)v49)
          {
            if (v49 == 2)
            {
              v29 = v52;
              if (v52)
              {
                if (*(_QWORD *)&v50[10])
                  *(_QWORD *)&v50[10] = 0;
                if (*(_QWORD *)&v50[2])
                {
                  v30 = &v50[2];
LABEL_39:
                  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
LABEL_40:
                  *v30 = 0;
                }
              }
            }
            else
            {
              if (v49 != 1)
              {
LABEL_73:
                re::internal::assertLog((re::internal *)4, (uint64_t)v27, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
                _os_crash();
                __break(1u);
                goto LABEL_74;
              }
              v29 = *(_QWORD *)&v50[2];
              if (*(_QWORD *)&v50[2])
              {
                v30 = v51;
                if (!v51[0])
                  goto LABEL_40;
                goto LABEL_39;
              }
            }
          }
          v31 = *((_QWORD *)&v40 + 1);
          if (!*((_QWORD *)&v40 + 1))
            return (uint64_t)v19;
          if (*((_QWORD *)&v37 + 1))
            *((_QWORD *)&v37 + 1) = 0;
          if (!(_QWORD)v37)
            return (uint64_t)v19;
LABEL_66:
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
          return (uint64_t)v19;
        }
        break;
      default:
LABEL_72:
        re::internal::assertLog((re::internal *)4, (uint64_t)v27, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
        _os_crash();
        __break(1u);
        goto LABEL_73;
    }
    (*(void (**)(_anonymous_namespace_ *))(*(_QWORD *)v28 + 40))(v28);
    goto LABEL_28;
  }
  v13 = *((_QWORD *)a1 + 3);
  *(_QWORD *)&v39 = 0;
  *(_QWORD *)&v38 = 0;
  v37 = 0uLL;
  DWORD2(v38) = 0;
  re::DynamicArray<unsigned int>::resize(&v37, v13, &re::kInvalidMeshIndex);
  if ((_DWORD)v11)
  {
    v14 = 0;
    v11 = *(_QWORD *)(a5 + 16);
    v15 = *(_QWORD *)(a5 + 32);
    v16 = v38;
    v17 = v39;
    while (v11 != v14)
    {
      v5 = *(unsigned int *)(v15 + 4 * v14);
      if (v16 <= v5)
        goto LABEL_70;
      *(_DWORD *)(v17 + 4 * v5) = v14++;
      if (v12 == v14)
        goto LABEL_7;
    }
    goto LABEL_69;
  }
LABEL_7:
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v47, a5);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v41, (uint64_t)&v37);
  LODWORD(v53) = *(_DWORD *)a4;
  *((_QWORD *)&v53 + 1) = *(_QWORD *)(a4 + 8);
  v54 = *(_OWORD *)(a4 + 16);
  *((_QWORD *)&v55 + 1) = *(_QWORD *)(a4 + 40);
  *(_QWORD *)(a4 + 40) = 0;
  v18 = *(_DWORD *)(a4 + 32);
  LODWORD(v55) = 1;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 32) = v18 + 2;
  *(_QWORD *)(a4 + 24) = 0;
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v56, (uint64_t)&v47);
  re::GeomIndexMap::GeomIndexMap((uint64_t)v58, (uint64_t)v41);
  v19 = re::internal::GeomAttributeManager::addFaceVaryingAttribute((uint64_t)a1 + 48, a2, a3, (re::internal::GeomAttributeFaceVaryingSubmesh *)&v53);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v53, v20);
  if (!v42)
    goto LABEL_51;
  if (v42 != 2)
  {
    if (v42 == 1)
    {
      v22 = v43;
      if (!v43)
        goto LABEL_51;
      v21 = v45;
      if (!v45)
        goto LABEL_51;
      goto LABEL_50;
    }
    re::internal::assertLog((re::internal *)4, (uint64_t)v21, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    _os_crash();
    __break(1u);
    goto LABEL_72;
  }
  v22 = v46;
  if (!v46)
    goto LABEL_51;
  if (v44)
    v44 = 0;
  v21 = v43;
  if (!v43)
    goto LABEL_51;
LABEL_50:
  (*(void (**)(_anonymous_namespace_ *))(*(_QWORD *)v22 + 40))(v22);
LABEL_51:
  if (!(_BYTE)v49)
    goto LABEL_64;
  if (v49 == 2)
  {
    v32 = v52;
    if (v52)
    {
      if (*(_QWORD *)&v50[10])
        *(_QWORD *)&v50[10] = 0;
      if (*(_QWORD *)&v50[2])
      {
        v33 = &v50[2];
LABEL_62:
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
LABEL_63:
        *v33 = 0;
      }
    }
LABEL_64:
    v31 = v37;
    if (!(_QWORD)v37 || !(_QWORD)v39)
      return (uint64_t)v19;
    goto LABEL_66;
  }
  if (v49 == 1)
  {
    v32 = *(_QWORD *)&v50[2];
    if (*(_QWORD *)&v50[2])
    {
      v33 = v51;
      if (!v51[0])
        goto LABEL_63;
      goto LABEL_62;
    }
    goto LABEL_64;
  }
LABEL_74:
  re::internal::assertLog((re::internal *)4, (uint64_t)v21, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::createAndCopyAttributesWithRate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  re::internal::GeomAttributeContainer *v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  re::internal::GeomAttributeManager *v9;
  uint64_t v10;
  re::GeomAttribute *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a3;
  v5 = (re::internal::GeomAttributeContainer *)(a1 + 48);
  result = re::internal::GeomAttributeManager::attributeCount(a1 + 48, a3);
  if ((_DWORD)result)
  {
    v7 = result;
    v8 = 0;
    v9 = (re::internal::GeomAttributeManager *)(a2 + 48);
    do
    {
      v10 = re::internal::GeomAttributeManager::attributeByIndex(v5, v8, v3);
      v11 = re::internal::GeomAttributeManager::addAttribute(v9, *(char **)(v10 + 8), *(unsigned __int8 *)(v10 + 16), *(unsigned __int8 *)(v10 + 17));
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      (*(void (**)(re::GeomAttribute *, uint64_t))(*(_QWORD *)v11 + 72))(v11, v12);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      result = (*(uint64_t (**)(uint64_t, re::GeomAttribute *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 40))(v10, v11, v13, 0, 0);
      v8 = (v8 + 1);
    }
    while (v7 != (_DWORD)v8);
  }
  return result;
}

uint64_t re::internal::buildMeshWithNewFaceVertexTopology(unint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  _DWORD *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int i;
  re::GeomAttribute *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  int v69;
  int *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  _BYTE *v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  re::internal *v84;
  const re::internal::GeomAttributeFaceVaryingSubmesh *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  re *v97;
  uint64_t result;
  uint64_t v99;
  const char **v100;
  uint64_t v101;
  uint64_t v102;
  re::internal *v104;
  unint64_t v105;
  unsigned int v107;
  _QWORD v109[3];
  int v110;
  uint64_t v111;
  _QWORD v112[3];
  int v113;
  uint64_t v114;
  _QWORD v115[3];
  int v116;
  uint64_t v117;
  _QWORD v118[3];
  int v119;
  uint64_t v120;
  uint64_t v121[2];
  unint64_t v122;
  int v123;
  _DWORD *v124;
  uint64_t v125[2];
  _BYTE *v126;
  int v127;
  uint64_t v128;
  unsigned int v129;
  _QWORD v130[4];
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t *v138;
  _QWORD v139[2];
  unint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE v144[28];
  __int16 v145;
  _BYTE v146[10];
  uint64_t v147;
  _BYTE v148[28];
  __int16 v149;
  _BYTE v150[10];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  unint64_t v156;
  uint64_t v157;
  int v158;
  const char *v159;
  __int16 v160;
  int v161;
  __int16 v162;
  unint64_t v163;
  __int16 v164;
  unint64_t v165;
  uint64_t v166[6];
  __int128 v167;
  __int128 v168;
  uint64_t v169;

  v169 = *MEMORY[0x24BDAC8D0];
  v14 = (unint64_t)&v129;
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v129);
  v129 = a4;
  v107 = a4;
  v133 = a4;
  if (v134)
  {
    v15 = v135;
    v16 = 8 * v134;
    do
    {
      v17 = *v15++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 72))(v17, v133);
      v16 -= 8;
    }
    while (v16);
  }
  v18 = *(_QWORD *)(a1 + 40);
  re::DynamicArray<re::GeomCell4>::resize(v130, v18);
  v136 = v18;
  if (v137)
  {
    v19 = v138;
    v20 = 8 * v137;
    do
    {
      v21 = *v19++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 72))(v21, v136);
      v20 -= 8;
    }
    while (v20);
  }
  v22 = *(_QWORD *)(a1 + 40);
  if ((_DWORD)v22)
  {
    v23 = 0;
    v24 = 0;
    v14 = *(_QWORD *)(a5 + 16);
    v25 = *(_QWORD *)(a5 + 32);
    v8 = v130[2];
    v26 = (_DWORD *)(v131 + 12);
    v27 = *(_QWORD *)(a1 + 56) + 12;
    while (1)
    {
      if (v22 == v24)
        goto LABEL_170;
      v7 = v23 & 0xFFFFFFFC;
      if (v14 <= v7)
        break;
      v28 = *(_DWORD *)(v27 + 4 * v23);
      v29 = (uint64_t *)(v25 + 4 * v7);
      if (v28 != -1)
        v28 = *((_DWORD *)v29 + 3);
      if (v8 == v24)
        goto LABEL_172;
      v30 = *v29;
      v31 = *((_DWORD *)v29 + 2);
      *(_QWORD *)(v26 - 3) = v30;
      *(v26 - 1) = v31;
      *v26 = v28;
      ++v24;
      v26 += 4;
      v23 += 4;
      if (v22 == v24)
        goto LABEL_15;
    }
LABEL_171:
    *(_QWORD *)v144 = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 797;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + 4) = v7;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_172:
    *(_QWORD *)v144 = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 789;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + 4) = v8;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_173:
    *(_QWORD *)v144 = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 789;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + 4) = v22;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v22;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_174:
    *(_QWORD *)v144 = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 789;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + 4) = v14;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_175:
    *(_QWORD *)v144 = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 797;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + 4) = v22;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v22;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_176:
    *(_QWORD *)v144 = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 797;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + 4) = v22;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_177;
  }
LABEL_15:
  re::internal::createAndCopyAttributesWithRate(a1 + 16, (uint64_t)&v129, 0);
  re::internal::createAndCopyAttributesWithRate(a1 + 16, (uint64_t)&v129, 2);
  re::internal::createAndCopyAttributesWithRate(a1 + 16, (uint64_t)&v129, 4);
  v128 = 0;
  v125[1] = 0;
  v126 = 0;
  v124 = 0;
  v125[0] = 0;
  v127 = 0;
  v121[1] = 0;
  v122 = 0;
  v121[0] = 0;
  v123 = 1;
  v9 = (unint64_t)&re::kInvalidMeshIndex;
  re::DynamicArray<unsigned int>::resize(v121, v107, &re::kInvalidMeshIndex);
  v126 = 0;
  ++v127;
  re::DynamicArray<unsigned int>::resize(v125, v107, &re::kInvalidMeshIndex);
  v33 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v33)
  {
    v34 = 0;
    v22 = v122;
    v35 = v124;
    v14 = (unint64_t)v126;
    v36 = v128;
    while (v22 != v34)
    {
      v35[v34] = v34;
      if (v14 == v34)
        goto LABEL_174;
      *(_DWORD *)(v36 + 4 * v34) = v34;
      if (v33 == ++v34)
        goto LABEL_20;
    }
    goto LABEL_173;
  }
LABEL_20:
  v22 = *(_QWORD *)(a1 + 40);
  if (!(_DWORD)v22)
    goto LABEL_32;
  v37 = 0;
  v38 = 0;
  v39 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a5 + 16);
  do
  {
    if (v38 == v22)
      goto LABEL_175;
    v40 = 0;
    *(_OWORD *)v144 = *(_OWORD *)(v39 + 16 * v38);
    if (*(_DWORD *)&v144[12] == -1)
      v41 = 3;
    else
      v41 = 4;
    v42 = *(_QWORD *)(a5 + 32);
    v43 = v122;
    v44 = v124;
    v7 = (unint64_t)v126;
    v45 = v128;
    do
    {
      v46 = (v37 + v40);
      if (v8 <= v46)
      {
        *(_QWORD *)v148 = 0;
        v154 = 0u;
        v155 = 0u;
        v152 = 0u;
        v153 = 0u;
        v151 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 797;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + 4) = v46;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_46;
      }
      v14 = *(unsigned int *)(v42 + 4 * v46);
      if (v43 <= v14)
      {
        *(_QWORD *)v148 = 0;
        v154 = 0u;
        v155 = 0u;
        v152 = 0u;
        v153 = 0u;
        v151 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 789;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + 4) = v14;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = v43;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_165:
        *(_QWORD *)v148 = 0;
        v154 = 0u;
        v155 = 0u;
        v152 = 0u;
        v153 = 0u;
        v151 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 789;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + 4) = v14;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_166:
        *(_QWORD *)v148 = 0;
        v154 = 0u;
        v155 = 0u;
        v152 = 0u;
        v153 = 0u;
        v151 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 797;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + 4) = a6;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_167:
        *(_QWORD *)v148 = 0;
        v154 = 0u;
        v155 = 0u;
        v152 = 0u;
        v153 = 0u;
        v151 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 789;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + 4) = a6;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = a7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_168:
        *(_QWORD *)v148 = 0;
        v154 = 0u;
        v155 = 0u;
        v152 = 0u;
        v153 = 0u;
        v151 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v166[0]) = 136315906;
        *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
        WORD2(v166[1]) = 1024;
        *(_DWORD *)((char *)&v166[1] + 6) = 789;
        WORD1(v166[2]) = 2048;
        *(uint64_t *)((char *)&v166[2] + 4) = a6;
        WORD2(v166[3]) = 2048;
        *(uint64_t *)((char *)&v166[3] + 6) = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_169;
      }
      v32 = *(unsigned int *)&v144[4 * v40];
      v44[v14] = v32;
      if (v7 <= v14)
        goto LABEL_165;
      *(_DWORD *)(v45 + 4 * v14) = v14;
      ++v40;
    }
    while (v41 != v40);
    ++v38;
    v37 += 4;
  }
  while (v38 != v22);
LABEL_32:
  if (!a6)
    goto LABEL_54;
  v166[4] = 0;
  memset(v166, 0, 28);
  re::DynamicArray<float>::resize((uint64_t)v166, v107);
  if (v107)
  {
    v47 = 0;
    v22 = v122;
    v48 = v124;
    v49 = v126;
    v50 = v128;
    v7 = v166[2];
    v51 = v166[4];
    while ((_BYTE *)v22 != v47)
    {
      if (v49 == v47)
        goto LABEL_178;
      v8 = *(unsigned int *)(v50 + 4 * (_QWORD)v47);
      if (v7 <= v8)
        goto LABEL_179;
      *(_DWORD *)(v51 + 4 * v8) = v48[(_QWORD)v47++];
      if ((_BYTE *)v107 == v47)
        goto LABEL_39;
    }
LABEL_177:
    *(_QWORD *)v148 = 0;
    v49 = v144;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v144 = 136315906;
    *(_QWORD *)&v144[4] = "operator[]";
    *(_WORD *)&v144[12] = 1024;
    *(_DWORD *)&v144[14] = 789;
    *(_WORD *)&v144[18] = 2048;
    *(_QWORD *)&v144[20] = v22;
    v145 = 2048;
    *(_QWORD *)v146 = v22;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_178:
    *(_QWORD *)v148 = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v144 = 136315906;
    *(_QWORD *)&v144[4] = "operator[]";
    *(_WORD *)&v144[12] = 1024;
    *(_DWORD *)&v144[14] = 789;
    *(_WORD *)&v144[18] = 2048;
    *(_QWORD *)&v144[20] = v49;
    v145 = 2048;
    *(_QWORD *)v146 = v49;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_179:
    *(_QWORD *)v148 = 0;
    v76 = v144;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v144 = 136315906;
    *(_QWORD *)&v144[4] = "operator[]";
    *(_WORD *)&v144[12] = 1024;
    *(_DWORD *)&v144[14] = 789;
    *(_WORD *)&v144[18] = 2048;
    *(_QWORD *)&v144[20] = v8;
    v145 = 2048;
    *(_QWORD *)v146 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_180:
    v139[0] = 0;
    v74 = (unint64_t)v144;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v148 = 136315906;
    *(_QWORD *)&v148[4] = "operator[]";
    *(_WORD *)&v148[12] = 1024;
    *(_DWORD *)&v148[14] = 789;
    *(_WORD *)&v148[18] = 2048;
    *(_QWORD *)&v148[20] = v76;
    v149 = 2048;
    *(_QWORD *)v150 = v76;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_181:
    v139[0] = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v148 = 136315906;
    *(_QWORD *)&v148[4] = "operator[]";
    *(_WORD *)&v148[12] = 1024;
    *(_DWORD *)&v148[14] = 789;
    *(_WORD *)&v148[18] = 2048;
    *(_QWORD *)&v148[20] = v8;
    v149 = 2048;
    *(_QWORD *)v150 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_182:
    v139[0] = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    v80 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v148 = 136315906;
    *(_QWORD *)&v148[4] = "operator[]";
    *(_WORD *)&v148[12] = 1024;
    *(_DWORD *)&v148[14] = 789;
    *(_WORD *)&v148[18] = 2048;
    *(_QWORD *)&v148[20] = v74;
    v149 = 2048;
    *(_QWORD *)v150 = a1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_183:
    v139[0] = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    v58 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v148 = 136315906;
    *(_QWORD *)&v148[4] = "operator[]";
    *(_WORD *)&v148[12] = 1024;
    *(_DWORD *)&v148[14] = 789;
    *(_WORD *)&v148[18] = 2048;
    *(_QWORD *)&v148[20] = v8;
    v149 = 2048;
    *(_QWORD *)v150 = v80;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_184:
    *(_QWORD *)v144 = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    v99 = v57;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 797;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + 4) = v99;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_185:
    *(_QWORD *)v144 = 0;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v166[0]) = 136315906;
    *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
    WORD2(v166[1]) = 1024;
    *(_DWORD *)((char *)&v166[1] + 6) = 789;
    WORD1(v166[2]) = 2048;
    *(uint64_t *)((char *)&v166[2] + 4) = v58;
    WORD2(v166[3]) = 2048;
    *(uint64_t *)((char *)&v166[3] + 6) = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_186:
    re::internal::assertLog((re::internal *)4, v87, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
LABEL_187:
    re::internal::assertLog((re::internal *)4, v59, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
    _os_crash();
    __break(1u);
  }
LABEL_39:
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v151, (uint64_t)v166);
  re::GeomIndexMap::operator=(a6, (uint64_t)&v151);
  if (!BYTE12(v151))
    goto LABEL_51;
  if (BYTE12(v151) == 2)
  {
LABEL_46:
    v52 = *((_QWORD *)&v155 + 1);
    if (*((_QWORD *)&v155 + 1))
    {
      if (*((_QWORD *)&v152 + 1))
        *((_QWORD *)&v152 + 1) = 0;
      v32 = v152;
      if ((_QWORD)v152)
        goto LABEL_50;
    }
    goto LABEL_51;
  }
  if (BYTE12(v151) == 1)
  {
    v52 = v152;
    if (!(_QWORD)v152)
      goto LABEL_51;
    v32 = v154;
    if (!(_QWORD)v154)
      goto LABEL_51;
LABEL_50:
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 40))(v52);
LABEL_51:
    if (v166[0])
    {
      v32 = v166[4];
      if (v166[4])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v166[0] + 40))(v166[0], v166[4]);
    }
LABEL_54:
    v101 = a7;
    v53 = *(_DWORD *)(a1 + 200);
    if (v53)
    {
      for (i = 0; i != v53; ++i)
      {
        v55 = (re::GeomAttribute *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a1 + 176), i);
        re::DynamicArray<float>::DynamicArray((uint64_t)v118, v121);
        re::DynamicArray<float>::DynamicArray((uint64_t)v115, v125);
        re::internal::createAndCopyVertexAttribute(v55, (uint64_t)v118, (uint64_t)v115, (uint64_t)&v129);
        if (v115[0])
        {
          v32 = v117;
          if (v117)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v115[0] + 40))(v115[0], v117);
          v117 = 0;
          memset(v115, 0, sizeof(v115));
          ++v116;
        }
        if (v118[0])
        {
          v32 = v120;
          if (v120)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v118[0] + 40))(v118[0], v120);
          v120 = 0;
          memset(v118, 0, sizeof(v118));
          ++v119;
        }
      }
    }
    v56 = a2;
    v100 = (const char **)a1;
    v102 = *(unsigned int *)(a2 + 16);
    if (*(_DWORD *)(a2 + 16))
    {
      v57 = 0;
      while (1)
      {
        v58 = *(_QWORD *)(v56 + 16);
        if (v58 <= v57)
          goto LABEL_184;
        v104 = *(re::internal **)(*(_QWORD *)(v56 + 32) + 8 * v57);
        v105 = v57;
        a1 = re::internal::accessFaceVaryingAttributeSubmesh(v104, (const re::GeomAttribute *)v32);
        v122 = 0;
        ++v123;
        re::DynamicArray<unsigned int>::resize(v121, v107, &re::kInvalidMeshIndex);
        v126 = 0;
        ++v127;
        re::DynamicArray<unsigned int>::resize(v125, v107, &re::kInvalidMeshIndex);
        v9 = *(unsigned int *)(a1 + 24);
        if (*(_DWORD *)(a1 + 24))
          break;
LABEL_91:
        if (v107)
        {
          v58 = v122;
          if (v122 <= v107 - 1)
            goto LABEL_185;
          v69 = 0;
          v70 = v124;
          v71 = v107;
          do
          {
            v72 = *v70++;
            if (v72 == -1)
              ++v69;
            --v71;
          }
          while (v71);
          if (v69)
          {
            v166[4] = 0;
            memset(v166, 0, 28);
            *(_QWORD *)&v146[2] = 0;
            memset(v144, 0, sizeof(v144));
            v73 = v107 - v69;
            re::DynamicArray<float>::resize((uint64_t)v166, v73);
            re::DynamicArray<float>::resize((uint64_t)v144, v73);
            v74 = 0;
            v75 = 0;
            v76 = (_BYTE *)v122;
            v77 = v124;
            v9 = v166[2];
            v78 = v166[4];
            a1 = (unint64_t)v126;
            v79 = v128;
            v80 = *(_QWORD *)&v144[16];
            v81 = *(_QWORD *)&v146[2];
            do
            {
              if (v76 == (_BYTE *)v74)
                goto LABEL_180;
              v82 = v77[v74];
              if (v82 != -1)
              {
                v8 = v75;
                if (v9 <= v75)
                  goto LABEL_181;
                *(_DWORD *)(v78 + 4 * v75) = v82;
                if (a1 <= v74)
                  goto LABEL_182;
                if (v80 <= v75)
                  goto LABEL_183;
                *(_DWORD *)(v81 + 4 * v75++) = *(_DWORD *)(v79 + 4 * v74);
              }
              ++v74;
            }
            while (v107 != v74);
            re::DynamicArray<float>::operator=((uint64_t)v121, v166);
            re::DynamicArray<float>::operator=((uint64_t)v125, (uint64_t *)v144);
            if (*(_QWORD *)v144 && *(_QWORD *)&v146[2])
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v144 + 40))(*(_QWORD *)v144, *(_QWORD *)&v146[2]);
            if (v166[0] && v166[4])
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v166[0] + 40))(v166[0], v166[4]);
          }
        }
        re::DynamicArray<float>::DynamicArray((uint64_t)v112, v121);
        re::DynamicArray<float>::DynamicArray((uint64_t)v109, v125);
        re::internal::createAndCopyVertexAttribute(v104, (uint64_t)v112, (uint64_t)v109, (uint64_t)&v129);
        if (v109[0])
        {
          v32 = v111;
          if (v111)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v109[0] + 40))(v109[0], v111);
          v111 = 0;
          memset(v109, 0, sizeof(v109));
          ++v110;
        }
        if (v112[0])
        {
          v32 = v114;
          if (v114)
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v112[0] + 40))(v112[0], v114);
          v114 = 0;
          memset(v112, 0, sizeof(v112));
          ++v113;
        }
        v56 = a2;
        v57 = v105 + 1;
        if (v105 + 1 == v102)
          goto LABEL_121;
      }
      v22 = 0;
      while (2)
      {
        v14 = *(_QWORD *)(a1 + 24);
        if (v14 <= v22)
          goto LABEL_176;
        *(_OWORD *)v144 = *(_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v22);
        if (*(_DWORD *)&v144[12] == -1)
          v60 = 3;
        else
          v60 = 4;
        LODWORD(v151) = v22;
        v61 = *(unsigned __int8 *)(a1 + 60);
        if (v61 == 2)
        {
          v63 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(a1 + 64), (unsigned int *)&v151);
          if (v63 != -1)
          {
            v62 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 8 * v63 + 4);
            goto LABEL_85;
          }
        }
        else
        {
          if (v61 != 1)
          {
            if (*(_BYTE *)(a1 + 60))
              goto LABEL_187;
            if (v22 >= *(unsigned int *)(a1 + 64))
              v62 = -1;
            else
              v62 = v22;
LABEL_85:
            v64 = 0;
            v65 = 4 * v62;
            v8 = *(_QWORD *)(a5 + 16);
            v66 = *(_QWORD *)(a5 + 32);
            a7 = v122;
            v67 = v124;
            v7 = (unint64_t)v126;
            v68 = v128;
            do
            {
              a6 = (v65 + v64);
              if (v8 <= a6)
                goto LABEL_166;
              a6 = *(unsigned int *)(v66 + 4 * a6);
              if (a7 <= a6)
                goto LABEL_167;
              v67[a6] = *(_DWORD *)&v144[4 * v64];
              if (v7 <= a6)
                goto LABEL_168;
              *(_DWORD *)(v68 + 4 * a6) = a6;
              ++v64;
            }
            while (v60 != v64);
            if (++v22 == v9)
              goto LABEL_91;
            continue;
          }
          if (*(_QWORD *)(a1 + 80) > v22)
          {
            v62 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v22);
            goto LABEL_85;
          }
        }
        break;
      }
      v62 = -1;
      goto LABEL_85;
    }
LABEL_121:
    v83 = *(_QWORD *)(a3 + 16);
    if (v83)
    {
      v9 = *(_QWORD *)(a3 + 32);
      a1 = v9 + 8 * v83;
      v7 = (unint64_t)&v144[8];
      v8 = (unint64_t)&v151 + 8;
      while (1)
      {
        v84 = *(re::internal **)v9;
        v85 = (const re::internal::GeomAttributeFaceVaryingSubmesh *)re::internal::accessFaceVaryingAttributeSubmesh(*(re::internal **)v9, (const re::GeomAttribute *)v32);
        re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v151, v85);
        v86 = DWORD2(v152);
        *(_QWORD *)&v150[2] = 0;
        memset(v148, 0, sizeof(v148));
        if (DWORD2(v152))
          break;
LABEL_137:
        *(_DWORD *)v144 = v151;
        re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v144[8], (uint64_t *)&v151 + 1);
        if (!*(_QWORD *)&v144[16])
          re::DynamicArray<re::BlendNode>::setCapacity(&v144[8], 1uLL);
        v91 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((_anonymous_namespace_ *)&v129, *((const char **)v84 + 1), *((unsigned __int8 *)v84 + 17), (uint64_t)v144, (uint64_t)v148);
        if (v91)
        {
          v93 = v91;
          v142 = 0;
          v140 = 0;
          v139[0] = 0;
          v139[1] = 0;
          v141 = 0;
          v94 = (*(uint64_t (**)(re::internal *))(*(_QWORD *)v84 + 16))(v84);
          re::DynamicArray<float>::resize((uint64_t)v139, v94);
          if (v94)
          {
            v95 = 0;
            v22 = v140;
            v96 = v142;
            while (v22 != v95)
            {
              *(_DWORD *)(v96 + 4 * v95) = v95;
              if (v94 == ++v95)
                goto LABEL_144;
            }
LABEL_169:
            v143 = 0;
            v14 = (unint64_t)&v158;
            v167 = 0u;
            v168 = 0u;
            memset(v166, 0, sizeof(v166));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v158 = 136315906;
            v159 = "operator[]";
            v160 = 1024;
            v161 = 789;
            v162 = 2048;
            v163 = v22;
            v164 = 2048;
            v165 = v22;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_170:
            *(_QWORD *)v144 = 0;
            v154 = 0u;
            v155 = 0u;
            v152 = 0u;
            v153 = 0u;
            v151 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v166[0]) = 136315906;
            *(uint64_t *)((char *)v166 + 4) = (uint64_t)"operator[]";
            WORD2(v166[1]) = 1024;
            *(_DWORD *)((char *)&v166[1] + 6) = 797;
            WORD1(v166[2]) = 2048;
            *(uint64_t *)((char *)&v166[2] + 4) = v22;
            WORD2(v166[3]) = 2048;
            *(uint64_t *)((char *)&v166[3] + 6) = v22;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_171;
          }
LABEL_144:
          (*(void (**)(re::internal *, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v84 + 40))(v84, v93, v94, v142, v142);
          if (v139[0])
          {
            v92 = v142;
            if (v142)
              (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v139[0] + 40))(v139[0], v142);
          }
        }
        if (*(_QWORD *)&v144[8])
        {
          v92 = v147;
          if (v147)
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)&v144[8] + 40))(*(_QWORD *)&v144[8], v147);
        }
        if (*(_QWORD *)v148)
        {
          v92 = *(_QWORD *)&v150[2];
          if (*(_QWORD *)&v150[2])
            (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v148 + 40))(*(_QWORD *)v148, *(_QWORD *)&v150[2]);
        }
        re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v151, v92);
        v9 += 8;
        if (v9 == a1)
          goto LABEL_154;
      }
      re::DynamicArray<int>::setCapacity(v148, DWORD2(v152));
      v88 = 0;
      while (2)
      {
        *(_DWORD *)v144 = 0;
        LODWORD(v166[0]) = v88;
        if (BYTE12(v154) == 2)
        {
          v90 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(&v155, (unsigned int *)v166);
          if (v90 == -1)
            goto LABEL_136;
          v89 = (_DWORD *)(*((_QWORD *)&v155 + 1) + 8 * v90 + 4);
        }
        else
        {
          if (BYTE12(v154) != 1)
          {
            if (BYTE12(v154))
              goto LABEL_186;
            if (v88 < v155)
            {
              *(_DWORD *)v144 = v88;
              goto LABEL_135;
            }
            goto LABEL_136;
          }
          if (v156 <= v88)
            goto LABEL_136;
          v89 = (_DWORD *)(v157 + 4 * v88);
        }
        *(_DWORD *)v144 = *v89;
        if (*(_DWORD *)v144 != -1)
LABEL_135:
          re::DynamicArray<int>::add(v148, v144);
LABEL_136:
        if (++v88 == v86)
          goto LABEL_137;
        continue;
      }
    }
LABEL_154:
    v97 = (re *)re::GeomMesh::operator=(v101, &v129);
    re::GeomMesh::setName(v97, *v100);
    if (v121[0] && v124)
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v121[0] + 40))(v121[0], v124);
    if (v125[0] && v128)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v125[0] + 40))(v125[0], v128);
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v132);
    if (v130[0])
    {
      if (v131)
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v130[0] + 40))(v130[0], v131);
    }
    return 1;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::buildMeshFromNewFaceVertices(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v13;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[3];
  int v23;
  uint64_t v24;

  v24 = 0;
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  if (*(_DWORD *)(a1 + 640))
  {
    v6 = 0;
    do
    {
      v21 = 0;
      v21 = re::internal::GeomAttributeManager::attributeByIndex((re::internal::GeomAttributeManager *)(a1 + 64), v6);
      if (*(_BYTE *)(v21 + 16) == 3)
        re::DynamicArray<re::TransitionCondition *>::add(v22, &v21);
      ++v6;
    }
    while (v6 < *(_DWORD *)(a1 + 640));
  }
  v7 = *(unsigned int *)(a2 + 16);
  if (*(_DWORD *)(a2 + 16))
  {
    v8 = *(unsigned int **)(a2 + 32);
    v9 = -1;
    do
    {
      v11 = *v8++;
      v10 = v11;
      if (v11 >= v9 || v9 == -1)
        v13 = v10 + 1;
      else
        v13 = v9;
      if (v10 != -1)
        v9 = v13;
      --v7;
    }
    while (v7);
  }
  else
  {
    v9 = -1;
  }
  re::DynamicArray<char const*>::DynamicArray((uint64_t)v18, v22);
  v17 = 0;
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  re::internal::buildMeshWithNewFaceVertexTopology(a1, (uint64_t)v18, (uint64_t)v15, v9, a2, 0, a3);
  if (v18[0])
  {
    if (v20)
      (*(void (**)(void))(*(_QWORD *)v18[0] + 40))();
    v20 = 0;
    memset(v18, 0, sizeof(v18));
    ++v19;
  }
  if (v22[0] && v24)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  return 1;
}

uint64_t re::internal::buildMeshFromNewVertices(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  re::internal::GeomAttributeContainer *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t j;
  unsigned int v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  re::internal::GeomAttributeContainer *v35;
  uint64_t v36;
  int v37;
  unsigned int i;
  re::GeomAttribute *v39;
  int v40;
  unsigned int v41;
  const re::GeomAttribute *v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  re *v52;
  _QWORD v56[3];
  int v57;
  uint64_t v58;
  _QWORD v59[3];
  int v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t *v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  __int128 v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[28];
  __int16 v85;
  _BYTE v86[10];
  _BYTE v87[12];
  __int16 v88;
  int v89;
  __int16 v90;
  unint64_t v91;
  __int16 v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v62);
  v5 = a2[2];
  v62 = v5;
  v66 = v5;
  if (v67)
  {
    v6 = v68;
    v7 = 8 * v67;
    do
    {
      v8 = *v6++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 72))(v8, v66);
      v7 -= 8;
    }
    while (v7);
  }
  v9 = (re::internal::GeomAttributeContainer *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 40);
  re::DynamicArray<re::GeomCell4>::resize(v63, v10);
  v69 = v10;
  if (v70)
  {
    v11 = v71;
    v12 = 8 * v70;
    do
    {
      v13 = *v11++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 72))(v13, v69);
      v12 -= 8;
    }
    while (v12);
  }
  v14 = &v77;
  v82 = 0;
  v79 = 0;
  v77 = 0;
  v78 = 0;
  v80 = 0;
  re::DynamicArray<unsigned int>::resize(&v77, *(unsigned int *)v9, &re::kInvalidMeshIndex);
  v15 = a2[2];
  if (v15)
  {
    v16 = 0;
    v17 = a2[4];
    v18 = 1;
    v19 = (unint64_t)v79;
    v20 = v82;
    while (1)
    {
      j = *(unsigned int *)(v17 + 4 * v16);
      if (v19 <= j)
        break;
      v22 = v18 - 1;
      v16 = v18;
      v23 = v15 > v18++;
      *(_DWORD *)(v20 + 4 * j) = v22;
      if (!v23)
        goto LABEL_11;
    }
LABEL_85:
    *(_QWORD *)&v73 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v84 = 136315906;
    *(uint64_t *)((char *)v14 + 52) = (uint64_t)"operator[]";
    *(_WORD *)&v84[12] = 1024;
    *(_DWORD *)((char *)v14 + 62) = 789;
    *(_WORD *)&v84[18] = 2048;
    *(uint64_t *)((char *)v14 + 68) = j;
    v85 = 2048;
    *(uint64_t *)((char *)v14 + 78) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_86;
  }
LABEL_11:
  v19 = *(_QWORD *)(a1 + 40);
  if (!(_DWORD)v19)
    goto LABEL_25;
  v24 = 0;
  v25 = *(_QWORD *)(a1 + 56);
  j = (unint64_t)v79;
  v3 = v63[2];
  v26 = v64;
  do
  {
    if (v24 == (_QWORD *)v19)
      goto LABEL_87;
    v27 = 0;
    v73 = *(_OWORD *)(v25 + 16 * (_QWORD)v24);
    v28 = HIDWORD(v73);
    if (HIDWORD(v73) == -1)
      v29 = 3;
    else
      v29 = 4;
    v30 = v82;
    do
    {
      v31 = *((unsigned int *)&v73 + v27);
      if (j <= v31)
      {
        *(_QWORD *)v87 = 0;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v94 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v84 = 136315906;
        *(_QWORD *)&v84[4] = "operator[]";
        *(_WORD *)&v84[12] = 1024;
        *(_DWORD *)&v84[14] = 789;
        *(_WORD *)&v84[18] = 2048;
        *(_QWORD *)&v84[20] = v31;
        v85 = 2048;
        *(_QWORD *)v86 = j;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_84:
        v72 = 0;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v94 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v87 = 136315906;
        *(_QWORD *)&v87[4] = "operator[]";
        v88 = 1024;
        v89 = 789;
        v90 = 2048;
        v91 = j;
        v92 = 2048;
        v93 = v31;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_85;
      }
      *((_DWORD *)&v73 + v27++) = *(_DWORD *)(v30 + 4 * v31);
    }
    while (v29 != v27);
    if (v24 == (_QWORD *)v3)
      goto LABEL_88;
    v43 = v28 == -1;
    v32 = HIDWORD(v73);
    v33 = DWORD2(v73);
    if (v43)
      v32 = -1;
    v34 = v26 + 16 * (_QWORD)v24;
    *(_QWORD *)v34 = v73;
    *(_DWORD *)(v34 + 8) = v33;
    *(_DWORD *)(v34 + 12) = v32;
    v24 = (_QWORD *)((char *)v24 + 1);
  }
  while (v24 != (_QWORD *)v19);
LABEL_25:
  v19 = v5;
  if (v77 && v82)
    (*(void (**)(void))(*(_QWORD *)v77 + 40))();
  re::internal::createAndCopyAttributesWithRate((uint64_t)v9, (uint64_t)&v62, 0);
  re::internal::createAndCopyAttributesWithRate((uint64_t)v9, (uint64_t)&v62, 2);
  re::internal::createAndCopyAttributesWithRate((uint64_t)v9, (uint64_t)&v62, 4);
  *(_QWORD *)&v86[2] = 0;
  memset(v84, 0, sizeof(v84));
  re::DynamicArray<float>::resize((uint64_t)v84, v5);
  if ((_DWORD)v5)
  {
    v35 = 0;
    v9 = *(re::internal::GeomAttributeContainer **)&v84[16];
    v36 = *(_QWORD *)&v86[2];
    while (v9 != v35)
    {
      *(_DWORD *)(v36 + 4 * (_QWORD)v35) = (_DWORD)v35;
      v35 = (re::internal::GeomAttributeContainer *)((char *)v35 + 1);
      if ((re::internal::GeomAttributeContainer *)v5 == v35)
        goto LABEL_32;
    }
LABEL_86:
    *(_QWORD *)&v73 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v77) = 136315906;
    *(uint64_t *)((char *)v14 + 4) = (uint64_t)"operator[]";
    WORD2(v78) = 1024;
    *(_DWORD *)((char *)v14 + 14) = 789;
    WORD1(v79) = 2048;
    *(uint64_t *)((char *)v14 + 20) = (uint64_t)v9;
    v81 = 2048;
    *(uint64_t *)((char *)v14 + 30) = (uint64_t)v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_87:
    *(_QWORD *)&v73 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v84 = 136315906;
    *(uint64_t *)((char *)v14 + 52) = (uint64_t)"operator[]";
    *(_WORD *)&v84[12] = 1024;
    *(_DWORD *)((char *)v14 + 62) = 797;
    *(_WORD *)&v84[18] = 2048;
    *(uint64_t *)((char *)v14 + 68) = v19;
    v85 = 2048;
    *(uint64_t *)((char *)v14 + 78) = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_88:
    *(_QWORD *)v87 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v84 = 136315906;
    *(uint64_t *)((char *)v14 + 52) = (uint64_t)"operator[]";
    *(_WORD *)&v84[12] = 1024;
    *(_DWORD *)((char *)v14 + 62) = 789;
    *(_WORD *)&v84[18] = 2048;
    *(uint64_t *)((char *)v14 + 68) = v3;
    v85 = 2048;
    *(uint64_t *)((char *)v14 + 78) = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_89:
    re::internal::assertLog((re::internal *)4, v46, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680, a3);
    _os_crash();
    __break(1u);
  }
LABEL_32:
  v37 = *(_DWORD *)(a1 + 200);
  if (v37)
  {
    for (i = 0; i != v37; ++i)
    {
      v39 = (re::GeomAttribute *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a1 + 176), i);
      re::DynamicArray<float>::DynamicArray((uint64_t)v59, a2);
      re::DynamicArray<float>::DynamicArray((uint64_t)v56, (uint64_t *)v84);
      re::internal::createAndCopyVertexAttribute(v39, (uint64_t)v59, (uint64_t)v56, (uint64_t)&v62);
      if (v56[0])
      {
        if (v58)
          (*(void (**)(void))(*(_QWORD *)v56[0] + 40))();
        v58 = 0;
        memset(v56, 0, sizeof(v56));
        ++v57;
      }
      if (v59[0])
      {
        if (v61)
          (*(void (**)(void))(*(_QWORD *)v59[0] + 40))();
        v61 = 0;
        memset(v59, 0, sizeof(v59));
        ++v60;
      }
    }
  }
  v40 = *(_DWORD *)(a1 + 424);
  if (v40)
  {
    v41 = 0;
    v9 = (re::internal::GeomAttributeContainer *)(a1 + 400);
    v19 = (unint64_t)&v78;
    do
    {
      v3 = re::internal::GeomAttributeContainer::attributeByIndex(v9, v41);
      v14 = (uint64_t *)re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v3, v42);
      LODWORD(v77) = *(_DWORD *)v14;
      re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v78, v14 + 1);
      if (!v79)
        re::DynamicArray<re::BlendNode>::setCapacity(&v78, 1uLL);
      if (*((_BYTE *)v14 + 60))
        v43 = *((_DWORD *)v14 + 12) == 0;
      else
        v43 = 1;
      if (v43)
      {
        v45 = *((unsigned int *)v14 + 6);
        if (*(_DWORD *)(a1 + 40) == v45)
        {
          v44 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((uint64_t)&v62, *(const char **)(v3 + 8), *(unsigned __int8 *)(v3 + 17), (uint64_t)&v77);
          goto LABEL_72;
        }
      }
      else
      {
        v45 = *((unsigned int *)v14 + 6);
      }
      v76 = 0;
      v74 = 0;
      v73 = 0uLL;
      v75 = 0;
      re::DynamicArray<unsigned int>::resize(&v73, v45, &re::kInvalidMeshIndex);
      if (v45)
      {
        for (j = 0; v45 != j; ++j)
        {
          LODWORD(v94) = j;
          v47 = *((unsigned __int8 *)v14 + 60);
          if (v47 == 2)
          {
            v49 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v14 + 8, (unsigned int *)&v94);
            if (v49 == -1)
              goto LABEL_66;
            v48 = *(_DWORD *)(v14[9] + 8 * v49 + 4);
          }
          else
          {
            if (v47 != 1)
            {
              if (*((_BYTE *)v14 + 60))
                goto LABEL_89;
              if (j >= *((unsigned int *)v14 + 16))
                v48 = -1;
              else
                v48 = j;
              goto LABEL_67;
            }
            if (v14[10] <= j)
            {
LABEL_66:
              v48 = -1;
              goto LABEL_67;
            }
            v48 = *(_DWORD *)(v14[12] + 4 * j);
          }
LABEL_67:
          v31 = v74;
          if (v74 <= j)
            goto LABEL_84;
          *(_DWORD *)(v76 + 4 * j) = v48;
        }
      }
      v44 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((_anonymous_namespace_ *)&v62, *(const char **)(v3 + 8), *(unsigned __int8 *)(v3 + 17), (uint64_t)&v77, (uint64_t)&v73);
      if ((_QWORD)v73 && v76)
        (*(void (**)(void))(*(_QWORD *)v73 + 40))();
LABEL_72:
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 72))(v44, v50);
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 40))(v3, v44, v51, 0, 0);
      if (v78 && v83)
        (*(void (**)(void))(*(_QWORD *)v78 + 40))();
      ++v41;
    }
    while (v41 != v40);
  }
  v52 = (re *)re::GeomMesh::operator=(a3, &v62);
  re::GeomMesh::setName(v52, *(const char **)a1);
  if (*(_QWORD *)v84 && *(_QWORD *)&v86[2])
    (*(void (**)(void))(**(_QWORD **)v84 + 40))();
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v65);
  if (v63[0] && v64)
    (*(void (**)(void))(*(_QWORD *)v63[0] + 40))();
  return 1;
}

uint64_t re::internal::GeomBaseMesh::addFaceVaryingAttribute(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  re::GeomAttribute *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = *(_QWORD *)(a4 + 24);
  v7 = 0xFFFFFFFF00000000;
  v32 = 0xFFFFFFFF00000000;
  v33 = -1;
  v34 = 0;
  v8 = v6 - 1;
  if ((v6 - 1) >= 0xFFFFFFFE)
  {
    LODWORD(v35) = 0;
    v8 = -1;
  }
  else
  {
    v32 = v6;
    v33 = v6 - 1;
    LODWORD(v35) = v6;
    v7 = v6;
  }
  v27 = 0;
  v26 = v8;
  v25 = v7;
  LODWORD(v28) = v7;
  v9 = a1 + 48;
  LODWORD(v17) = *(_DWORD *)a4;
  v10 = *(_QWORD *)(a4 + 16);
  v18 = *(_QWORD *)(a4 + 8);
  v19 = v10;
  v20 = v6;
  v22 = *(_QWORD *)(a4 + 40);
  *(_QWORD *)(a4 + 40) = 0;
  v11 = *(_DWORD *)(a4 + 32);
  LODWORD(v21) = 1;
  *(_DWORD *)a4 = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 32) = v11 + 2;
  *(_QWORD *)(a4 + 8) = 0;
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v23, (uint64_t)&v32);
  re::GeomIndexMap::GeomIndexMap((uint64_t)&v24, (uint64_t)&v25);
  v12 = re::internal::GeomAttributeManager::addFaceVaryingAttribute(v9, a2, a3, (re::internal::GeomAttributeFaceVaryingSubmesh *)&v17);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)&v17, v13);
  if (!v27)
    goto LABEL_15;
  if (v27 == 2)
  {
    v15 = v31;
    if (!v31)
      goto LABEL_15;
    if (v29)
      v29 = 0;
    v14 = v28;
    if (!v28)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (v27 != 1)
  {
    re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625, v17, v18, v19, v20, v21, v22);
    _os_crash();
    __break(1u);
    goto LABEL_30;
  }
  v15 = v28;
  if (v28)
  {
    v14 = v30;
    if (v30)
LABEL_14:
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
LABEL_15:
  switch(v34)
  {
    case 2:
      if (v39)
      {
        if (v36)
          v36 = 0;
        if (v35)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
          v35 = 0;
        }
      }
      return (uint64_t)v12;
    case 1:
      if (v35)
      {
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
        v35 = 0;
        v36 = 0;
        v37 = 0;
      }
      return (uint64_t)v12;
    case 0:
      LODWORD(v35) = 0;
      return (uint64_t)v12;
  }
LABEL_30:
  re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::buildMeshByConvertingFaceVaryingToVertexHelper(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char **v11;
  uint64_t v12;
  const char *v13;
  const re::GeomAttribute *v14;
  unsigned int v15;
  _QWORD v17[3];
  int v18;
  uint64_t v19;
  _QWORD v20[3];
  int v21;
  uint64_t v22;
  re::internal *v23[3];
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  int v28;
  uint64_t v29;
  uint64_t v30[3];
  int v31;
  uint64_t v32;

  v32 = 0;
  memset(v30, 0, sizeof(v30));
  v31 = 0;
  v29 = 0;
  memset(v27, 0, sizeof(v27));
  v28 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    re::DynamicArray<float *>::setCapacity(v30, v8);
    v9 = *(_QWORD *)(a2 + 16);
    if (v9)
    {
      re::DynamicArray<float *>::setCapacity(v27, v9);
      v10 = *(_QWORD *)(a2 + 16);
      if (v10)
      {
        v11 = *(const char ***)(a2 + 32);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          v23[0] = 0;
          v23[0] = (re::internal *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), v13);
          if (*((_BYTE *)v23[0] + 16) == 3)
          {
            re::DynamicArray<re::TransitionCondition *>::add(v30, v23);
            v26 = re::internal::accessFaceVaryingAttributeSubmesh(v23[0], v14);
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v27, &v26);
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
  v25 = 0;
  memset(v23, 0, sizeof(v23));
  v24 = 0;
  v15 = re::internal::calculateCompatibleFaceVertexTopology(a1, (uint64_t)v27, (uint64_t)v23);
  re::DynamicArray<char const*>::DynamicArray((uint64_t)v20, v30);
  v19 = 0;
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  re::internal::buildMeshWithNewFaceVertexTopology(a1, (uint64_t)v20, (uint64_t)v17, v15, (uint64_t)v23, a3, a4);
  if (v20[0])
  {
    if (v22)
      (*(void (**)(void))(*(_QWORD *)v20[0] + 40))();
    v22 = 0;
    memset(v20, 0, sizeof(v20));
    ++v21;
  }
  if (v23[0] && v25)
    (*(void (**)(void))(*(_QWORD *)v23[0] + 40))();
  if (v27[0] && v29)
    (*(void (**)(void))(*(_QWORD *)v27[0] + 40))();
  if (v30[0] && v32)
    (*(void (**)(void))(*(_QWORD *)v30[0] + 40))();
  return 1;
}

uint64_t re::internal::buildMeshBySplittingFaceVaryingToVertexHelper(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char **v11;
  uint64_t v12;
  const char *v13;
  const re::GeomAttribute *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  _QWORD v33[3];
  int v34;
  uint64_t v35;
  _QWORD v36[3];
  int v37;
  uint64_t v38;
  re::internal *v39[3];
  int v40;
  uint64_t v41;
  _QWORD v42[3];
  int v43;
  uint64_t v44;
  uint64_t v45[2];
  uint64_t v46;
  int v47;
  _QWORD *v48;

  v48 = 0;
  v45[1] = 0;
  v46 = 0;
  v44 = 0;
  v45[0] = 0;
  v47 = 0;
  memset(v42, 0, sizeof(v42));
  v43 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    re::DynamicArray<float *>::setCapacity(v45, v8);
    v9 = *(_QWORD *)(a2 + 16);
    if (v9)
    {
      re::DynamicArray<float *>::setCapacity(v42, v9);
      v10 = *(_QWORD *)(a2 + 16);
      if (v10)
      {
        v11 = *(const char ***)(a2 + 32);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          v39[0] = 0;
          v39[0] = (re::internal *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 8), v13);
          if (*((_BYTE *)v39[0] + 16) == 3)
          {
            re::DynamicArray<re::TransitionCondition *>::add(v45, v39);
            v36[0] = re::internal::accessFaceVaryingAttributeSubmesh(v39[0], v14);
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v42, v36);
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
    }
  }
  v15 = a1[53];
  v41 = 0;
  memset(v39, 0, sizeof(v39));
  v40 = 0;
  if ((_DWORD)v15)
  {
    re::DynamicArray<float *>::setCapacity(v39, v15);
    v16 = 0;
    do
    {
      v36[0] = 0;
      v17 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a1 + 50), v16);
      v36[0] = v17;
      if (v46)
      {
        v18 = v48;
        v19 = 8 * v46;
        while (*v18 != v17)
        {
          ++v18;
          v19 -= 8;
          if (!v19)
            goto LABEL_14;
        }
      }
      else
      {
LABEL_14:
        re::DynamicArray<re::TransitionCondition *>::add(v39, v36);
      }
      ++v16;
    }
    while (v16 != (_DWORD)v15);
  }
  v38 = 0;
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v20 = re::internal::calculateCompatibleFaceVertexTopology((uint64_t)a1, (uint64_t)v42, (uint64_t)v36);
  re::DynamicArray<char const*>::DynamicArray((uint64_t)v33, v45);
  re::DynamicArray<char const*>::DynamicArray((uint64_t)&v28, (uint64_t *)v39);
  re::internal::buildMeshWithNewFaceVertexTopology((unint64_t)a1, (uint64_t)v33, (uint64_t)&v28, v20, (uint64_t)v36, a3, a4);
  if (v28)
  {
    if (v32)
      (*(void (**)(void))(*(_QWORD *)v28 + 40))();
    v32 = 0;
    v29 = 0;
    v30 = 0;
    v28 = 0;
    ++v31;
  }
  if (v33[0])
  {
    if (v35)
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33[0] + 40))(v33[0], v35, v21, v22, v23);
    v35 = 0;
    memset(v33, 0, sizeof(v33));
    ++v34;
  }
  if (v36[0] && v38)
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36[0] + 40))(v36[0], v38, v21, v22, v23, v24, v25, v26, v28, v29);
  if (v39[0] && v41)
    (*(void (**)(void))(*(_QWORD *)v39[0] + 40))();
  if (v42[0] && v44)
    (*(void (**)(void))(*(_QWORD *)v42[0] + 40))();
  if (v45[0] && v48)
    (*(void (**)(void))(*(_QWORD *)v45[0] + 40))();
  return 1;
}

_QWORD *re::internal::GeomVertexConnectivity::buildVertexConnectivity@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _QWORD *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a2 + 32) = 0u;
  v6 = (uint64_t *)(a2 + 32);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  v7 = a2 + 72;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_DWORD *)(a2 + 104) = 0;
  v8 = a1[6];
  v9 = *a1;
  LODWORD(v32) = 0;
  re::DynamicArray<unsigned int>::resize((_QWORD *)a2, v9, &v32);
  if (!v8)
  {
    v11 = 0;
    goto LABEL_13;
  }
  v10 = 0;
  v11 = 0;
  v12 = *((_QWORD *)a1 + 3);
  v13 = *((_QWORD *)a1 + 5);
  v2 = *(_QWORD *)(a2 + 16);
  do
  {
    if (v10 == v12)
      goto LABEL_42;
    v14 = 0;
    v23 = *(_OWORD *)(v13 + 16 * v10);
    v15 = *v6;
    if (HIDWORD(v23) == -1)
      v16 = 3;
    else
      v16 = 4;
    v11 = (v11 + v16);
    do
    {
      v3 = *((unsigned int *)&v23 + v14);
      if (v2 <= v3)
      {
        v36 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v24 = 136315906;
        v25 = "operator[]";
        v26 = 1024;
        v27 = 789;
        v28 = 2048;
        v29 = v3;
        v30 = 2048;
        v31 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_38:
        v36 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v24 = 136315906;
        v25 = "operator[]";
        v26 = 1024;
        v27 = 789;
        v28 = 2048;
        v29 = v11;
        v30 = 2048;
        v31 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_39:
        v36 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v24 = 136315906;
        v25 = "operator[]";
        v26 = 1024;
        v27 = 789;
        v28 = 2048;
        v29 = v11;
        v30 = 2048;
        v31 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_40:
        v36 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v24 = 136315906;
        v25 = "operator[]";
        v26 = 1024;
        v27 = 789;
        v28 = 2048;
        v29 = v7;
        v30 = 2048;
        v31 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        v36 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v24 = 136315906;
        v25 = "operator[]";
        v26 = 1024;
        v27 = 789;
        v28 = 2048;
        v29 = v11;
        v30 = 2048;
        v31 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_42:
        *(_QWORD *)&v23 = 0;
        v36 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v24 = 136315906;
        v25 = "operator[]";
        v26 = 1024;
        v27 = 797;
        v28 = 2048;
        v29 = v12;
        v30 = 2048;
        v31 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_43;
      }
      ++*(_DWORD *)(v15 + 4 * v3);
      ++v14;
    }
    while (v16 != v14);
    ++v10;
  }
  while (v10 != v8);
LABEL_13:
  v12 = *a1;
  re::DynamicArray<float>::resize(a2 + 40, v12);
  if ((_DWORD)v12)
  {
    v2 = *(_QWORD *)(a2 + 56);
    if (!v2)
      goto LABEL_46;
    **(_DWORD **)v7 = 0;
    if (v12 > 1)
    {
      v3 = 0;
      v7 = *(_QWORD *)(a2 + 16);
      v17 = *(_QWORD *)(a2 + 32);
      v18 = (_DWORD *)(*(_QWORD *)(a2 + 72) + 4);
      while (v7 != v3)
      {
        if (v2 - 1 == v3)
          goto LABEL_44;
        *v18 = *(_DWORD *)(v17 + 4 * v3) + *(v18 - 1);
        ++v18;
        *(_DWORD *)(v17 + 4 * v3++) = 0;
        if (v12 - 1 == v3)
          goto LABEL_22;
      }
LABEL_43:
      *(_QWORD *)&v23 = 0;
      v36 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v24 = 136315906;
      v25 = "operator[]";
      v26 = 1024;
      v27 = 789;
      v28 = 2048;
      v29 = v3;
      v30 = 2048;
      v31 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      *(_QWORD *)&v23 = 0;
      v36 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v24 = 136315906;
      v25 = "operator[]";
      v26 = 1024;
      v27 = 789;
      v28 = 2048;
      v29 = v2;
      v30 = 2048;
      v31 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      *(_QWORD *)&v23 = 0;
      v36 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v24 = 136315906;
      v25 = "operator[]";
      v26 = 1024;
      v27 = 797;
      v28 = 2048;
      v29 = v12;
      v30 = 2048;
      v31 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      *(_QWORD *)&v23 = 0;
      v36 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v24 = 136315906;
      v25 = "operator[]";
      v26 = 1024;
      v27 = 789;
      v28 = 2048;
      v29 = 0;
      v30 = 2048;
      v31 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_47:
      *(_QWORD *)&v23 = 0;
      v36 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v24 = 136315906;
      v25 = "operator[]";
      v26 = 1024;
      v27 = 789;
      v28 = 2048;
      v29 = v2;
      v30 = 2048;
      v31 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v7 = *(_QWORD *)(a2 + 16);
LABEL_22:
    v2 = (v12 - 1);
    if (v7 <= v2)
      goto LABEL_47;
    *(_DWORD *)(*v6 + 4 * v2) = 0;
  }
  v7 = a2 + 80;
  *(_QWORD *)(a2 + 16) = 0;
  ++*(_DWORD *)(a2 + 24);
  LODWORD(v32) = 0;
  re::DynamicArray<unsigned int>::resize((_QWORD *)a2, v12, &v32);
  result = re::DynamicArray<re::internal::GeomVertexConnectivity::FaceVertex>::resize((_QWORD *)(a2 + 80), v11);
  if (v8)
  {
    v12 = 0;
    while (1)
    {
      v11 = *((_QWORD *)a1 + 3);
      if (v11 <= v12)
        goto LABEL_45;
      v20 = 0;
      v23 = *(_OWORD *)(*((_QWORD *)a1 + 5) + 16 * v12);
      if (HIDWORD(v23) == -1)
        v21 = 3;
      else
        v21 = 4;
      do
      {
        v11 = *((unsigned int *)&v23 + v20);
        v7 = *(_QWORD *)(a2 + 56);
        if (v7 <= v11)
          goto LABEL_38;
        v7 = *(_QWORD *)(a2 + 16);
        if (v7 <= v11)
          goto LABEL_39;
        v7 = (*(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v11) + *(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v11));
        v2 = *(_QWORD *)(a2 + 96);
        if (v2 <= v7)
          goto LABEL_40;
        v22 = *(_QWORD *)(a2 + 112) + 8 * v7;
        *(_DWORD *)v22 = v12;
        *(_BYTE *)(v22 + 4) = v20;
        v7 = *(_QWORD *)(a2 + 16);
        if (v7 <= v11)
          goto LABEL_41;
        ++*(_DWORD *)(*v6 + 4 * v11);
        ++v20;
      }
      while (v21 != v20);
      if (++v12 == v8)
        return result;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::internal::GeomVertexConnectivity::FaceVertex>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else if (result[1] < a2)
  {
    result = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(result, a2);
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::internal::GeomVertexConnectivity::faceVertex(re::internal::GeomVertexConnectivity *this, unsigned int a2, int a3)
{
  unint64_t v3;

  if (*((_QWORD *)this + 7) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = (*(_DWORD *)(*((_QWORD *)this + 9) + 4 * a2) + a3);
  if (*((_QWORD *)this + 12) <= v3)
    goto LABEL_5;
  return *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v3);
}

re::internal::GeomAttributeFaceVaryingSubmesh *re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(re::internal::GeomAttributeFaceVaryingSubmesh *this, const re::internal::GeomAttributeFaceVaryingSubmesh *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  re::internal::GeomAttributeFaceVaryingSubmesh *result;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = (_QWORD *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)this + 8, (uint64_t *)a2 + 1);
  if (!*((_QWORD *)this + 2))
    re::DynamicArray<re::BlendNode>::setCapacity(v4, 1uLL);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_BYTE *)this + 60) = *((_BYTE *)a2 + 60);
  v6 = (_DWORD *)((char *)this + 64);
  v7 = *((unsigned __int8 *)a2 + 60);
  if (v7 == 2)
  {
    re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)v6, (uint64_t *)a2 + 8);
  }
  else if (v7 == 1)
  {
    re::DynamicArray<float>::DynamicArray((uint64_t)v6, (uint64_t *)a2 + 8);
  }
  else
  {
    if (*((_BYTE *)a2 + 60))
    {
      re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
      _os_crash();
      __break(1u);
      goto LABEL_17;
    }
    *v6 = *((_DWORD *)a2 + 16);
  }
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_BYTE *)this + 140) = *((_BYTE *)a2 + 140);
  v8 = (_DWORD *)((char *)this + 144);
  v9 = *((unsigned __int8 *)a2 + 140);
  if (v9 == 2)
  {
    re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrown((uint64_t)v8, (uint64_t *)a2 + 18);
    return this;
  }
  if (v9 == 1)
  {
    re::DynamicArray<float>::DynamicArray((uint64_t)v8, (uint64_t *)a2 + 18);
    return this;
  }
  if (!*((_BYTE *)a2 + 140))
  {
    *v8 = *((_DWORD *)a2 + 36);
    return this;
  }
LABEL_17:
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "GeomIndexMap", 433);
  result = (re::internal::GeomAttributeFaceVaryingSubmesh *)_os_crash();
  __break(1u);
  return result;
}

_DWORD *re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::addOrReplace(_anonymous_namespace_ *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::internalAdd(a1, a2, a3);
  v7 = *((_QWORD *)a1 + 1) + 8 * v6;
  *(_DWORD *)(v7 + 4) = *a3;
  return (_DWORD *)(v7 + 4);
}

uint64_t re::Bitset<64>::toWordIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a2 < 0x40)
    return 0;
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %d.", "b < kBitCount", "toWordIndex", 345, a2, 64, v2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::triangulatePolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5[6];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  re::internal::PolygonTriangulator<re::Vector3<float>>::PolygonTriangulator((uint64_t)v5, a1, a2);
  re::internal::PolygonTriangulator<re::Vector3<float>>::triangulateByPerimeter(v5, a3);
  if (v8)
  {
    if (v12)
      (*(void (**)(void))(*(_QWORD *)v8 + 40))();
    v12 = 0;
    v9 = 0;
    v10 = 0;
    v8 = 0;
    ++v11;
  }
  result = v6;
  if (v6)
  {
    if (v7)
      return (*(uint64_t (**)(void))(*(_QWORD *)v6 + 40))();
  }
  return result;
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::triangulateByPerimeter(int *a1, uint64_t a2)
{
  re::internal::PolygonTriangulator<re::Vector3<float>>::resetCost(a1);
  re::internal::PolygonTriangulator<re::Vector3<float>>::evalPerimeterCost((uint64_t)a1, 0, (*(_DWORD *)(*((_QWORD *)a1 + 2) + 8) - 1));
  return re::internal::PolygonTriangulator<re::Vector3<float>>::retrieveTriangulation(a1, a2);
}

_QWORD *re::DynamicArray<float>::resize(_QWORD *result, unint64_t a2, _DWORD *a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v7;
  _DWORD *v8;

  v4 = result;
  v5 = result[2];
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<int>::setCapacity(result, a2);
      v5 = v4[2];
    }
    v7 = a2 - v5;
    if (a2 > v5)
    {
      v8 = (_DWORD *)(v4[4] + 4 * v5);
      do
      {
        *v8++ = *a3;
        --v7;
      }
      while (v7);
    }
  }
  v4[2] = a2;
  ++*((_DWORD *)v4 + 6);
  return result;
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::PolygonTriangulator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  _QWORD *v5;
  unint64_t v6;
  int v8;
  int v9;

  v4 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  v9 = -1;
  re::DynamicArray<unsigned int>::resize((_QWORD *)(a1 + 64), (v4 * v4), &v9);
  v6 = (*(_DWORD *)a1 * *(_DWORD *)a1);
  v8 = 0;
  re::DynamicArray<float>::resize(v5, v6, &v8);
  return a1;
}

_QWORD *re::internal::PolygonTriangulator<re::Vector3<float>>::resetCost(_QWORD *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = result[5];
  if ((_DWORD)v1)
  {
    v2 = 0;
    do
    {
      if (v1 == v2)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(result[7] + 4 * v2) = -1082130432;
      if (result[10] <= v2)
        goto LABEL_8;
      *(_DWORD *)(result[12] + 4 * v2++) = -1;
    }
    while (v1 != v2);
  }
  return result;
}

float re::internal::PolygonTriangulator<re::Vector3<float>>::evalPerimeterCost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;

  if ((int)a2 + 2 > a3)
  {
    v6 = 0.0;
    v7 = -1;
LABEL_17:
    *(_DWORD *)re::internal::PolygonTriangulator<re::Vector3<float>>::vertex(a1, a2, a3) = v7;
    *(float *)re::internal::PolygonTriangulator<re::Vector3<float>>::cost(a1, a2, a3) = v6;
    return v6;
  }
  if (*(float *)re::internal::PolygonTriangulator<re::Vector3<float>>::cost(a1, a2, a3) < 0.0)
  {
    if ((int)a2 + 1 >= a3)
    {
      v7 = -1;
      v6 = INFINITY;
    }
    else
    {
      v7 = -1;
      v8 = 1;
      v6 = INFINITY;
      do
      {
        re::internal::PolygonTriangulator<re::Vector3<float>>::evalTrianglePerimeter(a1, a2, a2 + v8, a3);
        if (v9 <= v6)
        {
          v10 = v9
              + re::internal::PolygonTriangulator<re::Vector3<float>>::evalPerimeterCost(a1, a2, (a2 + v8));
          if (v10 <= v6)
          {
            v11 = v10
                + re::internal::PolygonTriangulator<re::Vector3<float>>::evalPerimeterCost(a1, (a2 + v8), a3);
            if (v11 < v6 || v8 == 1)
            {
              v7 = a2 + v8;
              v6 = v11;
            }
          }
        }
        ++v8;
      }
      while ((_DWORD)a3 - (_DWORD)a2 != v8);
    }
    goto LABEL_17;
  }
  return *(float *)re::internal::PolygonTriangulator<re::Vector3<float>>::cost(a1, a2, a3);
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::retrieveTriangulation(int *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;

  *(_QWORD *)(a2 + 16) = 0;
  ++*(_DWORD *)(a2 + 24);
  v4 = *a1;
  v5 = (3 * *a1 - 6);
  if (*(_QWORD *)(a2 + 8) < v5)
  {
    re::DynamicArray<int>::setCapacity((_QWORD *)a2, v5);
    v4 = *a1;
  }
  return re::internal::PolygonTriangulator<re::Vector3<float>>::addTriangles((uint64_t)a1, 0, v4 - 1, (_QWORD *)a2);
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::cost(uint64_t a1, int a2, int a3)
{
  unint64_t v3;

  v3 = (a3 + *(_DWORD *)a1 * a2);
  if (*(_QWORD *)(a1 + 40) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + 4 * v3;
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::evalTrianglePerimeter(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = *(uint64_t **)(result + 16);
  v5 = v4[1];
  if (v5 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a2, v5);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v6 = *v4;
  v7 = *(unsigned int *)(*v4 + 4 * a2);
  v8 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (v8 <= v7)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v7, v8);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  v9 = a3;
  if (v5 <= a3)
  {
LABEL_10:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v5);
    _os_crash();
    __break(1u);
    goto LABEL_11;
  }
  v10 = *(unsigned int *)(v6 + 4 * a3);
  if (v8 <= v10)
  {
LABEL_11:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, v8);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  v11 = a4;
  if (v5 <= a4)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v11, v5);
    _os_crash();
    __break(1u);
    goto LABEL_13;
  }
  v12 = *(unsigned int *)(v6 + 4 * a4);
  if (v8 <= v12)
  {
LABEL_13:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v12, v8);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::vertex(uint64_t a1, int a2, int a3)
{
  unint64_t v3;

  v3 = (a3 + *(_DWORD *)a1 * a2);
  if (*(_QWORD *)(a1 + 80) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 96) + 4 * v3;
}

{
  unint64_t v3;

  v3 = (a3 + *(_DWORD *)a1 * a2);
  if (*(_QWORD *)(a1 + 80) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*(_QWORD *)(a1 + 96) + 4 * v3);
}

uint64_t re::internal::PolygonTriangulator<re::Vector3<float>>::addTriangles(uint64_t a1, int a2, unsigned int a3, _QWORD *a4)
{
  unsigned int v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = a2;
  result = re::internal::PolygonTriangulator<re::Vector3<float>>::vertex(a1, a2, a3);
  if ((result & 0x80000000) == 0)
  {
    while (1)
    {
      v9 = re::internal::PolygonTriangulator<re::Vector3<float>>::vertex(a1, v6, a3);
      v11 = *(_QWORD **)(a1 + 16);
      v12 = v11[1];
      if (v12 <= v6)
        break;
      v13 = v9;
      re::DynamicArray<int>::add(a4, (_DWORD *)(*v11 + 4 * v6));
      v15 = *(_QWORD **)(a1 + 16);
      v16 = (int)v13;
      v17 = v15[1];
      if (v17 <= (int)v13)
        goto LABEL_8;
      re::DynamicArray<int>::add(a4, (_DWORD *)(*v15 + 4 * (int)v13));
      v19 = *(_QWORD **)(a1 + 16);
      v20 = v19[1];
      if (v20 <= a3)
        goto LABEL_9;
      re::DynamicArray<int>::add(a4, (_DWORD *)(*v19 + 4 * a3));
      re::internal::PolygonTriangulator<re::Vector3<float>>::addTriangles(a1, v6, v13, a4);
      result = re::internal::PolygonTriangulator<re::Vector3<float>>::vertex(a1, v13, a3);
      v6 = v13;
      if ((result & 0x80000000) != 0)
        return result;
    }
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v6, v12);
    _os_crash();
    __break(1u);
LABEL_8:
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v16, v17);
    _os_crash();
    __break(1u);
LABEL_9:
    re::internal::assertLog((re::internal *)6, v18, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, a3, v20);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::add(_anonymous_namespace_ *result, _DWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationCommand>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationCommand>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  *(_DWORD *)(*((_QWORD *)v3 + 4) + 4 * v5) = *a2;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::GeomConnectivityManifold::buildIfManifold(re::GeomConnectivityManifold *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int16 v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v79;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  __int128 v86;
  __int128 v87;
  int v88;
  unint64_t v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  _BYTE v96[28];
  __int16 v97;
  _BYTE v98[10];
  _BYTE v99[28];
  __int16 v100;
  unint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 3);
  v7 = 0;
  v8 = v6;
  if ((_DWORD)v6)
  {
    v9 = *((_QWORD *)this + 5);
    v10 = (_DWORD *)(v9 + 8);
    v11 = *((_QWORD *)this + 3);
    do
    {
      if (*(v10 - 2) != -1 && *(v10 - 1) != -1 && *v10 != -1 && v10[1] != -1)
        ++v7;
      v10 += 4;
      --v11;
    }
    while (v11);
    v12 = 0;
    v13 = (_DWORD *)(v9 + 8);
    do
    {
      if (*(v13 - 2) != -1 && *(v13 - 1) != -1 && *v13 != -1 && v13[1] == -1)
        ++v12;
      v13 += 4;
      --v8;
    }
    while (v8);
  }
  else
  {
    v12 = 0;
  }
  v14 = *(unsigned int *)this;
  v83 = 0;
  v84 = 0;
  v15 = (6 * v12 + 8 * v7);
  v82 = 0;
  v85 = 0;
  v89 = 0;
  v16 = (unint64_t)&v91;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0;
  re::DynamicArray<unsigned int>::resize(&v82, (4 * v6), &re::kInvalidMeshIndex);
  LODWORD(v103) = 0;
  re::DynamicArray<unsigned int>::resize((_QWORD *)&v86 + 1, v14, &v103);
  v17 = *((_QWORD *)this + 3);
  v18 = v17;
  if ((_DWORD)v17)
  {
    v19 = 0;
    v20 = *((_QWORD *)this + 5);
    v21 = 1;
    while (v19 != v17)
    {
      v22 = 0;
      *(_OWORD *)v99 = *(_OWORD *)(v20 + 16 * v19);
      if (*(_DWORD *)&v99[12] == -1)
        v23 = 3;
      else
        v23 = 4;
      v24 = 1;
      do
      {
        v25 = v24;
        while (v25 < v23)
        {
          v26 = *(_DWORD *)&v99[4 * v25++];
          if (*(_DWORD *)&v99[4 * v22] == v26)
          {
            if (!v21)
            {
LABEL_33:
              v27 = 0;
              v17 = 0;
              v6 = 0;
              v2 = (unint64_t)v99;
              v3 = 0x20000000;
              v81 = v18;
LABEL_34:
              v1 = *((_QWORD *)this + 3);
              if (v1 <= v17)
                goto LABEL_202;
              v28 = 0;
              v4 = v27 & 0x1FFFFFFF;
              *(_OWORD *)v99 = *(_OWORD *)(*((_QWORD *)this + 5) + 16 * v17);
              if (*(_DWORD *)&v99[12] == -1)
                v1 = 3;
              else
                v1 = 4;
              v29 = v27 & 0x1FFFFFFF;
              while (1)
              {
                v14 = v28 + 1;
                v30 = *(_DWORD *)&v99[4 * ((v28 + 1) % v1)];
                LODWORD(v103) = *(_DWORD *)&v99[4 * v28];
                DWORD1(v103) = v30;
                *(_DWORD *)v96 = v29 | 0x80000000;
                v29 += 0x20000000;
                v28 = v14;
                if (v1 == v14)
                {
                  ++v17;
                  v27 = v4 + 1;
                  v6 = v17 >= v81;
                  if (v17 == v81)
                    goto LABEL_44;
                  goto LABEL_34;
                }
              }
              if ((v6 & 1) != 0)
                goto LABEL_44;
            }
LABEL_152:
            v79 = 0;
            *((_QWORD *)this + 8) = 0;
            ++*((_DWORD *)this + 18);
            *((_QWORD *)this + 13) = 0;
            ++*((_DWORD *)this + 28);
            *((_QWORD *)this + 18) = 0;
            ++*((_DWORD *)this + 38);
            goto LABEL_155;
          }
        }
        ++v22;
        ++v24;
      }
      while (v22 != (_DWORD)v23 - 1);
      v21 = ++v19 < (unint64_t)v17;
      if (v19 == v17)
        goto LABEL_33;
    }
LABEL_201:
    *(_QWORD *)&v102 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v96 = 136315906;
    *(_QWORD *)&v96[4] = "operator[]";
    *(_WORD *)&v96[12] = 1024;
    *(_DWORD *)&v96[14] = 797;
    *(_WORD *)&v96[18] = 2048;
    *(_QWORD *)&v96[20] = v17;
    v97 = 2048;
    *(_QWORD *)v98 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_202:
    *(_QWORD *)&v102 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v96 = 136315906;
    *(_QWORD *)&v96[4] = "operator[]";
    *(_WORD *)&v96[12] = 1024;
    *(_DWORD *)&v96[14] = 797;
    *(_WORD *)&v96[18] = 2048;
    *(_QWORD *)&v96[20] = v17;
    v97 = 2048;
    *(_QWORD *)v98 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_203:
    *(_QWORD *)&v102 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v96 = 136315906;
    *(_QWORD *)&v96[4] = "operator[]";
    *(_WORD *)&v96[12] = 1024;
    *(_DWORD *)&v96[14] = 797;
    *(_WORD *)&v96[18] = 2048;
    *(_QWORD *)&v96[20] = v17;
    v97 = 2048;
    *(_QWORD *)v98 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_204:
    v95 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v96 = 136315906;
    *(_QWORD *)&v96[4] = "operator[]";
    *(_WORD *)&v96[12] = 1024;
    *(_DWORD *)&v96[14] = 789;
    *(_WORD *)&v96[18] = 2048;
    *(_QWORD *)&v96[20] = v14;
    v97 = 2048;
    *(_QWORD *)v98 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_205:
    v95 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v96 = 136315906;
    *(_QWORD *)&v96[4] = "operator[]";
    *(_WORD *)&v96[12] = 1024;
    *(_DWORD *)&v96[14] = 789;
    *(_WORD *)&v96[18] = 2048;
    *(_QWORD *)&v96[20] = v14;
    v97 = 2048;
    *(_QWORD *)v98 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_206:
    *(_QWORD *)&v102 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v96 = 136315906;
    *(_QWORD *)&v96[4] = "operator[]";
    *(_WORD *)&v96[12] = 1024;
    *(_DWORD *)&v96[14] = 789;
    *(_WORD *)&v96[18] = 2048;
    *(_QWORD *)&v96[20] = v17;
    v97 = 2048;
    *(_QWORD *)v98 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_207:
    *(_QWORD *)&v102 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v96 = 136315906;
    *(_QWORD *)&v96[4] = "operator[]";
    *(_WORD *)&v96[12] = 1024;
    *(_DWORD *)&v96[14] = 789;
    *(_WORD *)&v96[18] = 2048;
    *(_QWORD *)&v96[20] = v14;
    v97 = 2048;
    *(_QWORD *)v98 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_208:
    *(_QWORD *)&v102 = 0;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v103 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v96 = 136315906;
    *(_QWORD *)&v96[4] = "operator[]";
    *(_WORD *)&v96[12] = 1024;
    *(_DWORD *)&v96[14] = 789;
    *(_WORD *)&v96[18] = 2048;
    *(_QWORD *)&v96[20] = v17;
    v97 = 2048;
    *(_QWORD *)v98 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_44:
  v14 = (unint64_t)this + 48;
  *((_QWORD *)this + 8) = 0;
  ++*((_DWORD *)this + 18);
  if (*((_QWORD *)this + 7) < *((_QWORD *)&v92 + 1))
    re::DynamicArray<re::EvaluationCommand>::setCapacity((_QWORD *)this + 6, *((unint64_t *)&v92 + 1));
  *((_QWORD *)this + 18) = 0;
  ++*((_DWORD *)this + 38);
  *((_QWORD *)this + 13) = 0;
  ++*((_DWORD *)this + 28);
  re::DynamicArray<float>::resize((uint64_t)this + 128, *(unsigned int *)this);
  re::DynamicArray<float>::resize((uint64_t)this + 88, (4 * *((_DWORD *)this + 6)));
  v90 = 0;
  *(_QWORD *)v99 = &v91;
  if ((unint64_t)v92 >= 0x10)
  {
    v31 = 0;
    v32 = (unint64_t)v92 >> 4;
    while (1)
    {
      v33 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v91 + v31)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v33 != 0xFFFF)
        break;
      v31 += 16;
      if (!--v32)
        goto LABEL_72;
    }
    v34 = __clz(__rbit64((unsigned __int16)~v33)) + v31;
    *(_QWORD *)&v99[8] = (unsigned __int16)~v33;
    *(_QWORD *)&v99[16] = v34;
    if (v34 != -1)
    {
      LODWORD(v2) = 0;
      v3 = 12;
      do
      {
        v35 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)v99 + 8) + 12 * v34);
        v17 = *v35;
        v1 = v35[2];
        v4 = v1 >> 29;
        v6 = (v1 >> 29) & 3 | (4 * (v1 & 0x1FFFFFFF));
        if (v36 == -1)
        {
          if ((v1 & 0x80000000) == 0)
            v40 = v1 & 0xFFFFFFF | ((_DWORD)v4 << 28) & 0x7FFFFFFF | 0x40000000;
          else
            v40 = v1 & 0xFFFFFFF | ((_DWORD)v4 << 28) | 0xC0000000;
          LODWORD(v95) = v40;
          re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::add((re::GeomConnectivityManifold *)((char *)this + 48), &v95);
          v1 = *((_QWORD *)this + 13);
          if (v1 <= v6)
            goto LABEL_197;
          *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v6) = v40;
          v1 = *((_QWORD *)this + 18);
          if (v1 <= v17)
            goto LABEL_198;
          *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v17) = v40;
          v1 = v84;
          if (v84 <= v6)
            goto LABEL_199;
          *(_DWORD *)(v86 + 4 * v6) = v2;
          v1 = *((_QWORD *)&v87 + 1);
          if (*((_QWORD *)&v87 + 1) <= v17)
            goto LABEL_200;
          ++*(_DWORD *)(v89 + 4 * v17);
          ++v90;
        }
        else
        {
          v37 = *(_DWORD *)(*((_QWORD *)&v91 + 1) + 12 * v36 + 8);
          if (((v37 & v1 & 0x80000000) != 0) != __OFSUB__(v36, -1))
            v38 = v37 & 0xFFFFFFF | (((v37 >> 29) & 3) << 28) | 0x80000000;
          else
            v38 = v37 & 0xFFFFFFF | (((v37 >> 29) & 3) << 28);
          LODWORD(v95) = v38;
          re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::add((re::GeomConnectivityManifold *)((char *)this + 48), &v95);
          v39 = *((_QWORD *)this + 13);
          if (v39 <= v6)
            goto LABEL_194;
          *(_DWORD *)(*((_QWORD *)this + 15) + 4 * v6) = v38;
          v6 = (v38 >> 28) & 3 | (4 * (v38 & 0xFFFFFFF));
          v39 = v84;
          if (v84 <= v6)
            goto LABEL_195;
          *(_DWORD *)(v86 + 4 * v6) = v2;
          v6 = *((_QWORD *)&v87 + 1);
          if (*((_QWORD *)&v87 + 1) <= v17)
            goto LABEL_196;
          v3 = 12;
          if (!*(_DWORD *)(v89 + 4 * v17))
          {
            *(_DWORD *)(v89 + 4 * v17) = 1;
            v6 = *((_QWORD *)this + 18);
            if (v6 <= v17)
              goto LABEL_206;
            *(_DWORD *)(*((_QWORD *)this + 20) + 4 * v17) = v1 & 0xFFFFFFF | (((v1 >> 29) & 3) << 28) | 0x80000000;
          }
        }
        v2 = (v2 + 1);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v99);
        v34 = *(_QWORD *)&v99[16];
      }
      while (*(_QWORD *)&v99[16] != -1);
    }
  }
LABEL_72:
  v17 = *((_QWORD *)this + 8);
  if (v17)
  {
    v41 = 0;
    v42 = 0;
    while ((*(_DWORD *)(*((_QWORD *)this + 10) + 4 * v41) & 0x80000000) != 0)
    {
      v41 = ++v42;
      if (v17 <= v42)
        goto LABEL_76;
    }
  }
  else
  {
LABEL_76:
    v42 = -1;
  }
  v14 = *((_QWORD *)this + 3);
  v43 = *((_QWORD *)this + 18);
  if (v43)
  {
    v44 = 0;
    v45 = *((_QWORD *)this + 20);
    v46 = 1;
    v1 = v84;
    v47 = v86;
    do
    {
      v48 = *(_DWORD *)(v45 + 4 * v44);
      v49 = v42;
      if ((v48 & 0x80000000) != 0)
      {
        v6 = (v48 >> 28) & 3 | (4 * (v48 & 0xFFFFFFF));
        if (v1 <= v6)
          goto LABEL_186;
        v49 = *(_DWORD *)(v47 + 4 * v6);
      }
      *(_DWORD *)(v45 + 4 * v44) = v49;
      v44 = v46;
    }
    while (v43 > v46++);
  }
  if (!(_DWORD)v14)
    goto LABEL_96;
  v51 = 0;
  v52 = 0;
  while (2)
  {
    if (v52 == v14)
      goto LABEL_185;
    if (*(_DWORD *)(*((_QWORD *)this + 5) + 16 * v52 + 12) == -1)
      v53 = 3;
    else
      v53 = 4;
    v1 = *((_QWORD *)this + 13);
    v6 = v84;
    v54 = v86;
    v55 = v51;
    do
    {
      v2 = v55;
      if (v1 <= v55)
      {
        *(_QWORD *)v99 = 0;
        v106 = 0u;
        v107 = 0u;
        v104 = 0u;
        v105 = 0u;
        v103 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v96 = 136315906;
        *(_QWORD *)&v96[4] = "operator[]";
        *(_WORD *)&v96[12] = 1024;
        *(_DWORD *)&v96[14] = 789;
        *(_WORD *)&v96[18] = 2048;
        *(_QWORD *)&v96[20] = v2;
        v97 = 2048;
        *(_QWORD *)v98 = v1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        v4 = __clz(__rbit64(v70)) + v67;
        *(_QWORD *)&v99[8] = v70;
        *(_QWORD *)&v99[16] = v4;
        if (v4 != -1)
        {
          v6 = *((_QWORD *)&v87 + 1);
          v2 = v89;
          while (1)
          {
            v71 = *(_QWORD *)(*(_QWORD *)v99 + 8);
            v72 = (unsigned int *)(v71 + 12 * v4);
            v14 = *v72;
            v17 = v72[1];
            {
              v73 = *(_DWORD *)(v71 + 12 * v4 + 8);
              v17 = v73 & 0x1FFFFFFF;
              v4 = *((_QWORD *)this + 3);
              if (v4 <= v17)
                goto LABEL_203;
              v102 = *(_OWORD *)(*((_QWORD *)this + 5) + 16 * v17);
              if (v6 <= v14)
                goto LABEL_204;
              v74 = (v73 >> 29) & 3;
              if (HIDWORD(v102) == -1)
                v75 = 3;
              else
                v75 = 4;
              ++*(_DWORD *)(v2 + 4 * v14);
              v76 = v74 + 1;
              if (v76 < v75)
                v75 = 0;
              v14 = *((unsigned int *)&v102 + v76 - v75);
              if (v6 <= v14)
                goto LABEL_205;
              ++*(_DWORD *)(v2 + 4 * v14);
            }
            else if (v17 > v14)
            {
              if (v6 <= v14)
                goto LABEL_207;
              ++*(_DWORD *)(v2 + 4 * v14);
              if (v6 <= v17)
                goto LABEL_208;
              ++*(_DWORD *)(v2 + 4 * v17);
            }
            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v99);
            v4 = *(_QWORD *)&v99[16];
            if (*(_QWORD *)&v99[16] == -1)
              goto LABEL_135;
          }
        }
        goto LABEL_135;
      }
      v56 = *((_QWORD *)this + 15);
      v57 = *(_DWORD *)(v56 + 4 * v55);
      v58 = v42;
      if ((v57 & 0x80000000) != 0)
      {
        v3 = (v57 >> 28) & 3 | (4 * (v57 & 0xFFFFFFF));
        if (v6 <= v3)
        {
          *(_QWORD *)v99 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 797;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v3;
          v97 = 2048;
          *(_QWORD *)v98 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_184:
          *(_QWORD *)v99 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v6;
          v97 = 2048;
          *(_QWORD *)v98 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_185:
          *(_QWORD *)v99 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 797;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v14;
          v97 = 2048;
          *(_QWORD *)v98 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_186:
          *(_QWORD *)v99 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 797;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v6;
          v97 = 2048;
          *(_QWORD *)v98 = v1;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_187:
          *(_QWORD *)v99 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v1;
          v97 = 2048;
          *(_QWORD *)v98 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_188:
          *(_QWORD *)v99 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v6;
          v97 = 2048;
          *(_QWORD *)v98 = v1;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_189:
          *(_QWORD *)v99 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v1;
          v97 = 2048;
          *(_QWORD *)v98 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_190:
          *(_QWORD *)&v102 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v99 = 136315906;
          *(_QWORD *)&v99[4] = "operator[]";
          *(_WORD *)&v99[12] = 1024;
          *(_DWORD *)&v99[14] = 797;
          *(_WORD *)&v99[18] = 2048;
          *(_QWORD *)&v99[20] = v16;
          v100 = 2048;
          v101 = v1;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_191:
          *(_QWORD *)&v102 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v99 = 136315906;
          *(_QWORD *)&v99[4] = "operator[]";
          *(_WORD *)&v99[12] = 1024;
          *(_DWORD *)&v99[14] = 789;
          *(_WORD *)&v99[18] = 2048;
          *(_QWORD *)&v99[20] = v16;
          v100 = 2048;
          v101 = v1;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_192:
          *(_QWORD *)v99 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v6;
          v97 = 2048;
          *(_QWORD *)v98 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_193:
          *(_QWORD *)v99 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          v39 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v1;
          v97 = 2048;
          *(_QWORD *)v98 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_194:
          *(_QWORD *)&v102 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v6;
          v97 = 2048;
          *(_QWORD *)v98 = v39;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_195:
          *(_QWORD *)&v102 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v6;
          v97 = 2048;
          *(_QWORD *)v98 = v39;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_196:
          *(_QWORD *)&v102 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v17;
          v97 = 2048;
          *(_QWORD *)v98 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_197:
          *(_QWORD *)&v102 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v6;
          v97 = 2048;
          *(_QWORD *)v98 = v1;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_198:
          *(_QWORD *)&v102 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v17;
          v97 = 2048;
          *(_QWORD *)v98 = v1;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_199:
          *(_QWORD *)&v102 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v6;
          v97 = 2048;
          *(_QWORD *)v98 = v1;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_200:
          *(_QWORD *)&v102 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v103 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v96 = 136315906;
          *(_QWORD *)&v96[4] = "operator[]";
          *(_WORD *)&v96[12] = 1024;
          *(_DWORD *)&v96[14] = 789;
          *(_WORD *)&v96[18] = 2048;
          *(_QWORD *)&v96[20] = v17;
          v97 = 2048;
          *(_QWORD *)v98 = v1;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_201;
        }
        v58 = *(_DWORD *)(v54 + 4 * v3);
      }
      *(_DWORD *)(v56 + 4 * v55++) = v58;
      --v53;
    }
    while (v53);
    ++v52;
    v51 += 4;
    if (v52 != v14)
      continue;
    break;
  }
LABEL_96:
  *((_QWORD *)this + 23) = 0;
  ++*((_DWORD *)this + 48);
  v14 = (unint64_t)this + 208;
  *((_QWORD *)this + 28) = 0;
  ++*((_DWORD *)this + 58);
  re::DynamicArray<float>::resize((uint64_t)this + 168, v17);
  v59 = (v90 + v17) >> 1;
  if (*((_QWORD *)this + 27) < v59)
    re::DynamicArray<int>::setCapacity((_QWORD *)this + 26, v59);
  LODWORD(v102) = 0;
  if ((_DWORD)v17)
  {
    v60 = 0;
    while (1)
    {
      v6 = v60;
      v2 = *((_QWORD *)this + 8);
      if (v2 <= v60)
        goto LABEL_184;
      v61 = *((_QWORD *)this + 10);
      v62 = *(_DWORD *)(v61 + 4 * v60);
      v63 = *((_DWORD *)this + 56);
      if ((v62 & 0x40000000) != 0)
        break;
      v1 = (v62 >> 28) & 3 | (4 * (v62 & 0xFFFFFFF));
      v3 = *((_QWORD *)this + 13);
      if (v3 <= v1)
        goto LABEL_187;
      v1 = *(unsigned int *)(*((_QWORD *)this + 15) + 4 * v1);
      if (v2 <= v1)
        goto LABEL_189;
      if ((v62 & 0xFFFFFFF) < (*(_DWORD *)(v61 + 4 * v1) & 0xFFFFFFFu))
      {
        v2 = *((_QWORD *)this + 23);
        if (v2 <= v60)
          goto LABEL_192;
        v64 = *((_QWORD *)this + 25);
        *(_DWORD *)(v64 + 4 * v6) = v63;
        if (v2 <= v1)
          goto LABEL_193;
        v65 = (_DWORD *)(v64 + 4 * v1);
        goto LABEL_110;
      }
LABEL_111:
      LODWORD(v102) = ++v60;
      if (v60 >= v17)
        goto LABEL_112;
    }
    v1 = *((_QWORD *)this + 23);
    if (v1 <= v60)
      goto LABEL_188;
    v65 = (_DWORD *)(*((_QWORD *)this + 25) + 4 * v60);
LABEL_110:
    *v65 = v63;
    re::DynamicArray<int>::add((_QWORD *)this + 26, &v102);
    v60 = v102;
    goto LABEL_111;
  }
LABEL_112:
  v66 = *(unsigned int *)this;
  *((_QWORD *)&v87 + 1) = 0;
  ++v88;
  LODWORD(v103) = 0;
  re::DynamicArray<unsigned int>::resize((_QWORD *)&v86 + 1, v66, &v103);
  *(_QWORD *)v99 = &v91;
  if ((unint64_t)v92 >= 0x10)
  {
    v67 = 0;
    v68 = (unint64_t)v92 >> 4;
    do
    {
      v69 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v91 + v67)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v70 = (unsigned __int16)~v69;
      if (v69 != 0xFFFF)
        goto LABEL_118;
      v67 += 16;
    }
    while (--v68);
  }
LABEL_135:
  v14 = *(unsigned int *)this;
  *(_QWORD *)&v98[2] = 0;
  memset(v96, 0, sizeof(v96));
  if ((_DWORD)v14)
  {
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v1 = *((_QWORD *)this + 18);
      if (v1 <= v16)
        goto LABEL_190;
      if (*(_DWORD *)(*((_QWORD *)this + 20) + 4 * v16) == -1)
        break;
      re::GeomConnectivityManifold::fetchVertexOneRing(this, v16, (uint64_t)v96);
      v1 = *((_QWORD *)&v87 + 1);
      if (*((_QWORD *)&v87 + 1) <= v16)
        goto LABEL_191;
      v77 = *(unsigned int *)(v89 + 4 * v16);
      if (!(_DWORD)v77 || *(_QWORD *)&v96[16] != v77)
        break;
      v17 = ++v16 >= v14;
      if (v14 == v16)
      {
        if (*(_QWORD *)v96 && *(_QWORD *)&v98[2])
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v96 + 40))(*(_QWORD *)v96, *(_QWORD *)&v98[2]);
        goto LABEL_154;
      }
    }
    if (*(_QWORD *)v96 && *(_QWORD *)&v98[2])
    {
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v96 + 40))(*(_QWORD *)v96, *(_QWORD *)&v98[2]);
      if ((v17 & 1) != 0)
        goto LABEL_154;
      goto LABEL_152;
    }
    if ((v17 & 1) == 0)
      goto LABEL_152;
  }
LABEL_154:
  v79 = 1;
LABEL_155:
  if (*((_QWORD *)&v94 + 1))
  {
    if (*((_QWORD *)&v91 + 1))
      *((_QWORD *)&v91 + 1) = 0;
    if ((_QWORD)v91)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v94 + 1) + 40))(*((_QWORD *)&v94 + 1), v91);
      *(_QWORD *)&v91 = 0;
    }
    v94 = 0u;
    v93 = 0u;
    v92 = 0u;
  }
  if (*((_QWORD *)&v86 + 1))
  {
    if (v89)
      (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)&v86 + 1) + 40))(*((_QWORD *)&v86 + 1), v89);
    v89 = 0;
    v87 = 0uLL;
    *((_QWORD *)&v86 + 1) = 0;
    ++v88;
  }
  if (v82)
  {
    if ((_QWORD)v86)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 40))(v82, v86);
    *(_QWORD *)&v86 = 0;
    v83 = 0;
    v84 = 0;
    v82 = 0;
    ++v85;
  }
  if (*((_QWORD *)&v94 + 1))
  {
    if (*((_QWORD *)&v91 + 1))
      *((_QWORD *)&v91 + 1) = 0;
    if ((_QWORD)v91)
    {
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v94 + 1) + 40))(*((_QWORD *)&v94 + 1), v91);
      *(_QWORD *)&v91 = 0;
    }
    v94 = 0u;
    v93 = 0u;
    v92 = 0u;
  }
  if (*((_QWORD *)&v86 + 1))
  {
    if (v89)
      (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)&v86 + 1) + 40))(*((_QWORD *)&v86 + 1), v89);
    v89 = 0;
    v87 = 0uLL;
    *((_QWORD *)&v86 + 1) = 0;
    ++v88;
  }
  if (v82 && (_QWORD)v86)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v82 + 40))(v82, v86);
  return v79;
}

uint64_t re::GeomConnectivityManifold::buildIfManifold(re::GeomConnectivityManifold *this, const re::GeomMesh *a2, re::GeomConnectivityManifold *a3)
{
  uint64_t v5;
  int v7;
  _QWORD v8[37];

  re::GeomConnectivityManifold::GeomConnectivityManifold((re::GeomConnectivityManifold *)&v7);
  v7 = *((_DWORD *)this + 4);
  re::DynamicArray<re::GeomCell4>::operator=((uint64_t)v8, (uint64_t *)this + 3);
  if (!v8[1])
    re::DynamicArray<re::BlendNode>::setCapacity(v8, 1uLL);
  v5 = re::GeomConnectivityManifold::buildIfManifold((re::GeomConnectivityManifold *)&v7);
  if ((_DWORD)v5)
    re::GeomConnectivityManifold::operator=((uint64_t)a2, (uint64_t)&v7);
  re::GeomConnectivityManifold::~GeomConnectivityManifold((re::GeomConnectivityManifold *)&v7);
  return v5;
}

uint64_t re::GeomConnectivityManifold::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2 + 208;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = a1 + 208;
  re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::operator=(a1 + 8, a2 + 8);
  re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::operator=(a1 + 48, a2 + 48);
  re::DynamicArray<re::RigComponentConstraint>::operator=(a1 + 88, a2 + 88);
  re::DynamicArray<re::RigComponentConstraint>::operator=(a1 + 128, a2 + 128);
  re::DynamicArray<re::RigComponentConstraint>::operator=(a1 + 168, a2 + 168);
  re::DynamicArray<re::RigComponentConstraint>::operator=(v5, v4);
  if (a1 != a2)
  {
    re::DynamicOverflowArray<unsigned long long,3ul>::operator=(a1 + 248, a2 + 248);
    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a2 + 256) = 0;
    *(_DWORD *)(a2 + 264) += 2;
    *(_QWORD *)(a2 + 296) = 0;
  }
  return a1;
}

_QWORD *re::HashBrown<re::`anonymous namespace'::VertexPair,re::`anonymous namespace'::FaceVertex,re::`anonymous namespace'::HashEdge,re::`anonymous namespace'::HashEdge,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v7 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 13 * v6, 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v8 = 0;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v7];
    v6 = v3[2];
    if (v6)
    {
      v10 = 0;
      for (i = 0; i < v6; ++i)
      {
        v12 = v3[1] + v10;
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        v6 = v3[2];
        v10 += 12;
      }
    }
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

uint64_t re::HashBrown<re::`anonymous namespace'::VertexPair,re::`anonymous namespace'::FaceVertex,re::`anonymous namespace'::HashEdge,re::`anonymous namespace'::HashEdge,void,false>::find(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int *v23;
  int v24;
  int v25;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t v29;

  if (!a1[7])
    return -1;
  v4 = a1[2];
  if (v4 < 0x10 || !a1[3])
    return -1;
  v7 = v4 >> 4;
  v8 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                        * (a3 ^ ((unint64_t)a3 >> 30))) >> 27));
  v11 = v10 ^ (v10 >> 31);
  if (v9 == v11)
    v11 = 0;
  v12 = v11 ^ v9;
  v13 = v12 % v7;
  v14 = *a1;
  v15 = vdupq_n_s8(v12 & 0x7F);
  v16 = (int8x16_t)xmmword_2260EE390;
  v17.i64[0] = -1;
  for (v17.i64[1] = -1; ; v17.i64[1] = -1)
  {
    v18 = *(int8x16_t *)(v14 + 16 * v13);
    v19 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v15, v18), v16)))), (int8x8_t)0x3830282018100800);
    v20 = __clz(__rbit64(v19));
    if (v20 <= 0x3F)
      break;
LABEL_15:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v18, v17), v16)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    v28 = v16;
    v29 = v15;
    if (++v13 == v7)
      v13 = 0;
    result = -1;
    v16 = v28;
    v15 = v29;
    v17.i64[0] = -1;
    if (v13 == v27)
      return result;
  }
  v21 = 16 * v13;
  while (1)
  {
    result = v20 + v21;
    v23 = (int *)(a1[1] + 12 * (v20 + v21));
    v25 = *v23;
    v24 = v23[1];
    if (v25 == a2 && v24 == a3)
      return result;
    if (v20 <= 0x3E)
    {
      v20 = __clz(__rbit64((-2 << v20) & v19));
      if (v20 < 0x40)
        continue;
    }
    goto LABEL_15;
  }
}

unint64_t re::HashBrown<re::`anonymous namespace'::VertexPair,re::`anonymous namespace'::FaceVertex,re::`anonymous namespace'::HashEdge,re::`anonymous namespace'::HashEdge,void,false>::h1(unsigned int a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xBF58476D1CE4E5B9 * (a1 ^ ((unint64_t)a1 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                       * (a2 ^ ((unint64_t)a2 >> 30))) >> 27));
  v5 = v4 ^ (v4 >> 31);
  if (v3 == v5)
    v5 = 0;
  return v5 ^ v3;
}

re::GeomConnectivityManifold *re::GeomConnectivityManifold::GeomConnectivityManifold(re::GeomConnectivityManifold *this)
{
  _QWORD *v2;
  int v3;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)((char *)this + 8);
  re::DynamicArray<re::BlendNode>::setCapacity(v2, 1uLL);
  v3 = *((_DWORD *)this + 8);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 66) = 1;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 37) = 0;
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = v3 + 2;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 1;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 28) = 1;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 38) = 1;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 1;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 58) = 1;
  return this;
}

uint64_t re::DynamicArray<re::GeomCell4>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
        re::DynamicArray<re::GeomCell4>::copy((void **)a1, (uint64_t)a2);
      else
        *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::GeomCell4>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<unsigned long long,3ul>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const void *v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t result;

  if (a1 == a2)
    return a1;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)a2 && v4 != *(_QWORD *)a2)
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
      result = _os_crash();
      __break(1u);
      return result;
    }
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v10 = *(_QWORD *)(a2 + 8);
    if (v10)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      if (v10 >= *(_QWORD *)(a1 + 8))
      {
        re::DynamicOverflowArray<unsigned long long,3ul>::setCapacity((_QWORD *)a1, v10);
        if ((*(_BYTE *)(a2 + 16) & 1) != 0)
          v13 = (const void *)(a2 + 24);
        else
          v13 = *(const void **)(a2 + 32);
        v14 = *(_QWORD *)(a1 + 8);
        v15 = *(_DWORD *)(a1 + 16);
        if ((v15 & 1) != 0)
          v16 = (void *)(a1 + 24);
        else
          v16 = *(void **)(a1 + 32);
        if (v14)
        {
          memmove(v16, v13, 8 * v14);
          v15 = *(_DWORD *)(a1 + 16);
        }
        if ((v15 & 1) != 0)
          v17 = a1 + 24;
        else
          v17 = *(_QWORD *)(a1 + 32);
        v18 = *(_QWORD *)(a1 + 8);
        v19 = (void *)(v17 + 8 * v18);
        if ((*(_DWORD *)(a2 + 16) & 1) != 0)
          v20 = a2 + 24;
        else
          v20 = *(_QWORD *)(a2 + 32);
        memcpy(v19, (const void *)(v20 + 8 * v18), 8 * v10 - 8 * v18);
      }
      else
      {
        if ((*(_BYTE *)(a2 + 16) & 1) != 0)
          v11 = (const void *)(a2 + 24);
        else
          v11 = *(const void **)(a2 + 32);
        if ((*(_BYTE *)(a1 + 16) & 1) != 0)
          v12 = (void *)(a1 + 24);
        else
          v12 = *(void **)(a1 + 32);
        memmove(v12, v11, 8 * v10);
      }
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) += 4;
      v6 = (_DWORD *)(a1 + 16);
      goto LABEL_37;
    }
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v6 = (_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v6 = (_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) += 2;
    v7 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)a2 = v4;
    *(_QWORD *)(a2 + 8) = 0;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v8;
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(a2 + 16) & 0xFFFFFFFE | *(_DWORD *)(a1 + 16) & 1;
    *(_DWORD *)(a1 + 16) &= ~1u;
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v9;
  }
  *(_DWORD *)(a2 + 16) += 2;
LABEL_37:
  *v6 += 2;
  return a1;
}

void re::GeomConnectivityManifold::~GeomConnectivityManifold(re::GeomConnectivityManifold *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 248);
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    if (*((_QWORD *)this + 30))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 30) = 0;
    *((_QWORD *)this + 27) = 0;
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 26) = 0;
    ++*((_DWORD *)this + 58);
  }
  v3 = *((_QWORD *)this + 21);
  if (v3)
  {
    if (*((_QWORD *)this + 25))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 22) = 0;
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 21) = 0;
    ++*((_DWORD *)this + 48);
  }
  v4 = *((_QWORD *)this + 16);
  if (v4)
  {
    if (*((_QWORD *)this + 20))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 16) = 0;
    ++*((_DWORD *)this + 38);
  }
  v5 = *((_QWORD *)this + 11);
  if (v5)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 11) = 0;
    ++*((_DWORD *)this + 28);
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 6) = 0;
    ++*((_DWORD *)this + 18);
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

uint64_t *re::HashBrown<re::`anonymous namespace'::VertexPair,re::`anonymous namespace'::FaceVertex,re::`anonymous namespace'::HashEdge,re::`anonymous namespace'::HashEdge,void,false>::internalAdd(uint64_t *result, unsigned int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  v5 = result;
  if (!result[7])
  {
  }
  v6 = v5[4];
  if (!v6 || (v7 = v5[2], v7 > 8 * v6))
  {
    v7 = v5[2];
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = 0xBF58476D1CE4E5B9 * (a2[1] ^ ((unint64_t)a2[1] >> 30));
  v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  if (v9 == v11)
    v11 = 0;
  v12 = v11 ^ v9;
  v13 = v7 >> 4;
  v14 = v12 % (v7 >> 4);
  v15 = *v5;
  v16 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*v5 + 16 * v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v16 >= 0x40)
  {
    do
    {
      if (v14 + 1 == v13)
        v14 = 0;
      else
        ++v14;
      v16 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v15 + 16 * v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v16 > 0x3F);
  }
  v17 = v15 + 16 * v14;
  v18 = *(unsigned __int8 *)(v17 + v16) == 255;
  *(_BYTE *)(v17 + v16) = v12 & 0x7F;
  LODWORD(v17) = *a3;
  v19 = 3 * (v16 + 16 * v14);
  v20 = v5[1] + 4 * v19;
  *(_QWORD *)v20 = *(_QWORD *)a2;
  *(_DWORD *)(v20 + 8) = v17;
  v21 = v5[4] - v18;
  ++v5[3];
  v5[4] = v21;
  v22 = (unsigned int *)(v5[1] + 4 * v19);
  v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (*v22 ^ ((unint64_t)*v22 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                            * (*v22 ^ ((unint64_t)*v22 >> 30))) >> 27));
  v24 = v23 ^ (v23 >> 31);
  v25 = v22[1] ^ ((unint64_t)v22[1] >> 30);
  v26 = (0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v25) ^ ((0xBF58476D1CE4E5B9 * v25) >> 27))) ^ ((0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v25) ^ ((0xBF58476D1CE4E5B9 * v25) >> 27))) >> 31);
  if (v24 == v26)
    v26 = 0;
  v5[5] ^= v24 ^ v26;
  return result;
}

uint64_t re::HashBrown<re::`anonymous namespace'::VertexPair,re::`anonymous namespace'::FaceVertex,re::`anonymous namespace'::HashEdge,re::`anonymous namespace'::HashEdge,void,false>::resize(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[2];
  uint64_t v26;
  __int128 v27;
  _BYTE v28[48];

  v3 = a1[2];
  v2 = a1[3];
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = a1[7];
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v28[16], 0, 32);
  v25[0] = a1;
  v10 = a1[2];
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = v10 >> 4;
    v13 = (__n128)xmmword_2260EE390;
    v9.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v14 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v14 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_14;
    }
    v15 = __clz(__rbit64((unsigned __int16)~v14)) + v11;
    v25[1] = (unsigned __int16)~v14;
    v26 = v15;
    if (v15 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v25);
        v15 = v26;
      }
      while (v26 != -1);
      v10 = a1[2];
    }
  }
LABEL_14:
  v17 = *(_QWORD *)&v28[40];
  *(_QWORD *)&v28[40] = a1[7];
  result = *(_QWORD *)&v28[40];
  v18 = v27;
  v19 = *(_OWORD *)v28;
  *(_QWORD *)v28 = v10;
  v20 = *a1;
  v21 = a1[1];
  *(_QWORD *)&v27 = *a1;
  *((_QWORD *)&v27 + 1) = v21;
  v22 = *(_OWORD *)&v28[16];
  v23 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v28[32];
  a1[7] = v17;
  *(_OWORD *)&v28[24] = v23;
  v24 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v18;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v22;
  *(_OWORD *)&v28[8] = v24;
  if (result)
  {
    if (v21)
      *((_QWORD *)&v27 + 1) = 0;
    if (v20)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t re::GeomMeshBVHTree::buildTree(uint64_t a1, _QWORD *a2, unsigned int a3, char *a4, unint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  unint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  unint64_t v25;
  unsigned int *v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t *v36;
  float32x4_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  char *v47;
  float v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v53;
  _BYTE v54[12];
  __int16 v55;
  int v56;
  __int16 v57;
  unint64_t v58;
  __int16 v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v6 + 1;
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 <= v6)
    goto LABEL_50;
  v13 = *(_QWORD *)(a1 + 48);
  v14 = (_QWORD *)(v13 + 48 * v6);
  result = re::GeomMesh::accessVertexPositions(*(re::GeomMesh **)a1);
  if (!a3)
  {
    v39 = v13 + 48 * v6;
    *(_QWORD *)&v40 = 0x7F0000007FLL;
    *((_QWORD *)&v40 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(v39 + 16) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(v39 + 32) = v40;
    v37 = (float32x4_t *)(v39 + 16);
    *a2 = v14;
    goto LABEL_15;
  }
  v7 = v16;
  v17 = a2;
  v18 = (_DWORD *)(v13 + 48 * v6);
  v19 = a5;
  v20 = v13;
  v21 = 0;
  v22 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v23 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  v24.i64[0] = 0x7F0000007FLL;
  v24.i32[2] = 127;
  do
  {
    v25 = *(unsigned int *)&a4[v21];
    if (v22 <= v25)
    {
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v54 = 136315906;
      *(_QWORD *)&v54[4] = "operator[]";
      v55 = 1024;
      v56 = 797;
      v57 = 2048;
      v58 = v25;
      v59 = 2048;
      v60 = v22;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      v27 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v54 = 136315906;
      *(_QWORD *)&v54[4] = "operator[]";
      v55 = 1024;
      v56 = 601;
      v57 = 2048;
      v58 = v25;
      v59 = 2048;
      v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v54 = 136315906;
      *(_QWORD *)&v54[4] = "operator[]";
      v55 = 1024;
      v56 = 601;
      v57 = 2048;
      v58 = v27;
      v59 = 2048;
      v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v54 = 136315906;
      *(_QWORD *)&v54[4] = "operator[]";
      v55 = 1024;
      v56 = 601;
      v57 = 2048;
      v58 = v5;
      v59 = 2048;
      v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_47:
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v54 = 136315906;
      *(_QWORD *)&v54[4] = "operator[]";
      v55 = 1024;
      v56 = 601;
      v57 = 2048;
      v58 = a5;
      v59 = 2048;
      v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_48:
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v54 = 136315906;
      *(_QWORD *)&v54[4] = "operator[]";
      v55 = 1024;
      v56 = 797;
      v57 = 2048;
      v58 = v25;
      v59 = 2048;
      v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_49:
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v54 = 136315906;
      *(_QWORD *)&v54[4] = "operator[]";
      v55 = 1024;
      v56 = 797;
      v57 = 2048;
      v58 = v5;
      v59 = 2048;
      v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_50:
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v61 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v54 = 136315906;
      *(_QWORD *)&v54[4] = "operator[]";
      v55 = 1024;
      v56 = 789;
      v57 = 2048;
      v58 = v6;
      v59 = 2048;
      v60 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v26 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 56) + 16 * v25);
    v25 = *v26;
    v27 = v26[1];
    v5 = v26[2];
    a5 = v26[3];
    if ((_DWORD)a5 != -1)
    {
      if (a5 >= v16)
        goto LABEL_47;
      v28 = *(float32x4_t *)(result + 16 * a5);
      v23.i32[3] = 0;
      v28.i32[3] = 0;
      v23 = vminnmq_f32(v23, v28);
      v24.i32[3] = 0;
      v24 = vmaxnmq_f32(v24, v28);
    }
    if (v25 >= v16)
      goto LABEL_44;
    if (v27 >= v16)
      goto LABEL_45;
    if (v5 >= v16)
      goto LABEL_46;
    v24.i32[3] = 0;
    v29 = *(float32x4_t *)(result + 16 * v25);
    v29.i32[3] = 0;
    v30 = vmaxnmq_f32(v24, v29);
    v30.i32[3] = 0;
    v31 = *(float32x4_t *)(result + 16 * v27);
    v31.i32[3] = 0;
    v32 = vmaxnmq_f32(v30, v31);
    v23.i32[3] = 0;
    v33 = vminnmq_f32(v23, v29);
    v33.i32[3] = 0;
    v34 = vminnmq_f32(v33, v31);
    v35 = *(float32x4_t *)(result + 16 * v5);
    v34.i32[3] = 0;
    v35.i32[3] = 0;
    v23 = vminnmq_f32(v34, v35);
    v32.i32[3] = 0;
    v24 = vmaxnmq_f32(v32, v35);
    v21 += 4;
  }
  while (4 * a3 != v21);
  v13 = v20;
  v36 = (float32x4_t *)(v20 + 48 * v6);
  v36[1] = v23;
  v36[2] = v24;
  v37 = v36 + 1;
  v14 = v18;
  *v17 = v18;
  a5 = v19;
  if (a3 == 1)
  {
    v38 = 0;
    *v18 = *(_DWORD *)a4;
    goto LABEL_42;
  }
LABEL_15:
  v41 = (float32x4_t *)(v13 + 48 * v6);
  v43 = v41[2];
  v42 = v41 + 2;
  v44 = vsubq_f32(v43, *v37);
  v45 = 2;
  if (v44.f32[1] >= v44.f32[2])
    v45 = 1;
  if (v44.f32[0] >= v44.f32[2] && v44.f32[0] >= v44.f32[1])
    v45 = 0;
  v47 = a4;
  if (a3)
  {
    v48 = (float)(v42->f32[v45] + *(float *)(v13 + 48 * v6 + 4 * v45 + 16)) * 0.5;
    v47 = &a4[4 * a3];
    v7 = *(_QWORD *)(a5 + 16);
    v49 = a4;
    do
    {
      v50 = *(_QWORD *)(a5 + 32) + 4 * v45;
      while (1)
      {
        v25 = *(unsigned int *)v49;
        if (v7 <= v25)
          goto LABEL_48;
        if (*(float *)(v50 + 16 * v25) >= v48)
          break;
        v49 += 4;
        if (v49 == v47)
          goto LABEL_35;
      }
      do
      {
        v47 -= 4;
        if (v47 == v49)
        {
          v47 = v49;
          goto LABEL_35;
        }
        v5 = *(unsigned int *)v47;
        if (v7 <= v5)
          goto LABEL_49;
      }
      while (*(float *)(v50 + 16 * v5) >= v48);
      *(_DWORD *)v49 = v5;
      v49 += 4;
      *(_DWORD *)v47 = v25;
    }
    while (v47 != v49);
  }
LABEL_35:
  v51 = (unint64_t)(v47 - a4) >> 2;
  if ((_DWORD)v51 == a3 || (_DWORD)v51 == 0)
    v53 = a3 >> 1;
  else
    v53 = v51;
  *(_QWORD *)&v61 = 0;
  *(_QWORD *)v54 = 0;
  re::GeomMeshBVHTree::buildTree(a1, &v61, v53, a4, a5);
  result = re::GeomMeshBVHTree::buildTree(a1, v54, a3 - v53, &a4[4 * v53], a5);
  v38 = v61;
  *v14 = *(_QWORD *)v54;
LABEL_42:
  *(_QWORD *)(v13 + 48 * v6 + 8) = v38;
  return result;
}

uint64_t re::GeomMeshBVHTree::init(uint64_t this, const re::GeomMesh *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const re::GeomMesh *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v17;
  unsigned int *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  const re::GeomMesh *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int32x4_t v31;
  __int128 v32;
  _QWORD v33[2];
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[28];
  __int16 v39;
  _BYTE v40[10];
  _BYTE v41[12];
  __int16 v42;
  int v43;
  __int16 v44;
  const re::GeomMesh *v45;
  __int16 v46;
  const re::GeomMesh *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v4 = this;
  v53 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(this + 8) = 0;
  v5 = *((_QWORD *)a2 + 5);
  v36 = 0;
  v33[1] = 0;
  v34 = 0;
  v33[0] = 0;
  v35 = 0;
  if (!(_DWORD)v5)
  {
    *(_QWORD *)this = 0;
    *(_QWORD *)(this + 32) = 0;
    ++*(_DWORD *)(this + 40);
    return this;
  }
  v6 = a2;
  *(_QWORD *)this = a2;
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v33, v5);
  v7 = re::GeomMesh::accessVertexPositions(v6);
  v9 = v8;
  v10 = 0;
  __asm
  {
    FMOV            V0.4S, #3.0
    FMOV            V1.4S, #0.25
  }
  do
  {
    v17 = *((_QWORD *)v6 + 5);
    if (v17 <= v10)
    {
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v38 = 136315906;
      *(_QWORD *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 797;
      *(_WORD *)&v38[18] = 2048;
      *(_QWORD *)&v38[20] = v10;
      v39 = 2048;
      *(_QWORD *)v40 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v38 = 136315906;
      *(_QWORD *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 601;
      *(_WORD *)&v38[18] = 2048;
      *(_QWORD *)&v38[20] = v17;
      v39 = 2048;
      *(_QWORD *)v40 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v38 = 136315906;
      *(_QWORD *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 601;
      *(_WORD *)&v38[18] = 2048;
      *(_QWORD *)&v38[20] = v2;
      v39 = 2048;
      *(_QWORD *)v40 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v38 = 136315906;
      *(_QWORD *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 601;
      *(_WORD *)&v38[18] = 2048;
      *(_QWORD *)&v38[20] = v3;
      v39 = 2048;
      *(_QWORD *)v40 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      v37 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v41 = 136315906;
      *(_QWORD *)&v41[4] = "operator[]";
      v42 = 1024;
      v43 = 789;
      v44 = 2048;
      v45 = v6;
      v46 = 2048;
      v47 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_41:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v38 = 136315906;
      *(_QWORD *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 601;
      *(_WORD *)&v38[18] = 2048;
      *(_QWORD *)&v38[20] = v17;
      v39 = 2048;
      *(_QWORD *)v40 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_42:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v38 = 136315906;
      *(_QWORD *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 789;
      *(_WORD *)&v38[18] = 2048;
      *(_QWORD *)&v38[20] = v10;
      v39 = 2048;
      *(_QWORD *)v40 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_43:
      *(_QWORD *)v41 = 0;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v38 = 136315906;
      *(_QWORD *)&v38[4] = "operator[]";
      *(_WORD *)&v38[12] = 1024;
      *(_DWORD *)&v38[14] = 789;
      *(_WORD *)&v38[18] = 2048;
      *(_QWORD *)&v38[20] = v10;
      v39 = 2048;
      *(_QWORD *)v40 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_44;
    }
    v18 = (unsigned int *)(*((_QWORD *)v6 + 7) + 16 * v10);
    v17 = *v18;
    if (v17 >= v8)
      goto LABEL_37;
    v2 = v18[1];
    if (v2 >= v8)
      goto LABEL_38;
    v3 = v18[2];
    if (v3 >= v8)
      goto LABEL_39;
    v19 = *(float32x4_t *)(v7 + 16 * v17);
    v17 = v18[3];
    v20 = *(float32x4_t *)(v7 + 16 * v2);
    v21 = *(float32x4_t *)(v7 + 16 * v3);
    if ((_DWORD)v17 == -1)
    {
      v17 = v34;
      if (v34 <= v10)
        goto LABEL_43;
      v22 = vdivq_f32(vaddq_f32(vaddq_f32(v19, v20), v21), _Q0);
    }
    else
    {
      if (v17 >= v8)
        goto LABEL_41;
      v2 = v34;
      if (v34 <= v10)
        goto LABEL_42;
      v22 = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v19, v20), v21), *(float32x4_t *)(v7 + 16 * v17)), _Q1);
    }
    *(float32x4_t *)(v36 + 16 * v10++) = v22;
  }
  while (v10 != v5);
  *(_QWORD *)&v40[2] = 0;
  memset(v38, 0, sizeof(v38));
  re::DynamicArray<float>::resize((uint64_t)v38, v5);
  v23 = 0;
  v6 = *(const re::GeomMesh **)&v38[16];
  v24 = *(_QWORD *)&v40[2];
  do
  {
    if (v6 == v23)
      goto LABEL_40;
    *(_DWORD *)(v24 + 4 * (_QWORD)v23) = (_DWORD)v23;
    v23 = (const re::GeomMesh *)((char *)v23 + 1);
  }
  while ((const re::GeomMesh *)v5 != v23);
  v25 = (2 * v5 - 1);
  v26 = *(_QWORD *)(v4 + 32);
  if (v26 >= v25)
  {
    if (v26 > v25)
      goto LABEL_27;
  }
  else
  {
    if (*(_QWORD *)(v4 + 24) < v25)
    {
      re::DynamicArray<re::GeomMeshBVHTree::Node>::setCapacity((_QWORD *)(v4 + 16), (2 * v5 - 1));
      v26 = *(_QWORD *)(v4 + 32);
    }
    if (v26 < v25)
    {
      v27 = *(_QWORD *)(v4 + 48);
      v28 = v27 + 48 * v26;
      v29 = v27 + 48 * v25 - v28;
      if (v29 >= 1)
      {
        v30 = v29 / 0x30uLL + 1;
        v31 = vdupq_n_s32(0x7F800000u);
        *(_QWORD *)&v32 = 0x7F0000007FLL;
        *((_QWORD *)&v32 + 1) = 0x7F0000007FLL;
        do
        {
          *(_QWORD *)v28 = 0;
          *(_QWORD *)(v28 + 8) = 0;
          *(int32x4_t *)(v28 + 16) = v31;
          *(_OWORD *)(v28 + 32) = v32;
          --v30;
          v28 += 48;
        }
        while (v30 > 1);
      }
    }
LABEL_27:
    *(_QWORD *)(v4 + 32) = v25;
    ++*(_DWORD *)(v4 + 40);
    v6 = *(const re::GeomMesh **)&v38[16];
  }
  if (!v6)
  {
LABEL_44:
    v37 = 0;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v41 = 136315906;
    *(_QWORD *)&v41[4] = "operator[]";
    v42 = 1024;
    v43 = 789;
    v44 = 2048;
    v45 = 0;
    v46 = 2048;
    v47 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  re::GeomMeshBVHTree::buildTree(v4, &v48, v5, *(char **)&v40[2], (unint64_t)v33);
  if (*(_QWORD *)v38 && *(_QWORD *)&v40[2])
    (*(void (**)(void))(**(_QWORD **)v38 + 40))();
  this = v33[0];
  if (v33[0])
  {
    if (v36)
      return (*(uint64_t (**)(void))(*(_QWORD *)v33[0] + 40))();
  }
  return this;
}

void re::GeomMeshBVHTree::computeClosestPointHelper(re::GeomMesh **a1, _QWORD *a2, float32x4_t *a3, float *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v11;
  _QWORD *i;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  re::GeomMesh *v34;
  unint64_t v35;
  unsigned int *v36;
  __int128 v37;
  float v38;
  __int128 v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __int128 v44;
  float32x4_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v11 = a2;
  v60 = *MEMORY[0x24BDAC8D0];
  for (i = a2; ; i = v11)
  {
    v16 = i[1];
    v15 = i + 1;
    v14 = v16;
    if (!v16)
      break;
    v17 = 0;
    v18 = 0.0;
    do
    {
      v19 = a3->f32[v17];
      v20 = *(float *)(v14 + v17 * 4 + 16);
      if (v19 >= v20)
      {
        v22 = *(float *)(v14 + v17 * 4 + 32);
        v21 = 0.0;
        if (v19 > v22)
          v21 = v19 - v22;
      }
      else
      {
        v21 = v19 - v20;
      }
      v18 = v18 + (float)(v21 * v21);
      ++v17;
    }
    while (v17 != 3);
    v23 = 0;
    v24 = *v11;
    v25 = 0.0;
    do
    {
      v26 = a3->f32[v23];
      v27 = *(float *)(v24 + v23 * 4 + 16);
      if (v26 >= v27)
      {
        v29 = *(float *)(v24 + v23 * 4 + 32);
        v28 = 0.0;
        if (v26 > v29)
          v28 = v26 - v29;
      }
      else
      {
        v28 = v26 - v27;
      }
      v25 = v25 + (float)(v28 * v28);
      ++v23;
    }
    while (v23 != 3);
    v30 = *a4;
    if (v18 >= v25)
    {
      if (v25 < v30)
      {
        re::GeomMeshBVHTree::computeClosestPointHelper(a1, *v11, a3, a4, a5);
        v30 = *a4;
      }
      v11 = v15;
      if (v18 >= v30)
        return;
    }
    else
    {
      if (v18 < v30)
      {
        re::GeomMeshBVHTree::computeClosestPointHelper(a1, v14, a3, a4, a5);
        v30 = *a4;
      }
      if (v25 >= v30)
        return;
    }
    v11 = (_QWORD *)*v11;
  }
  v31 = re::GeomMesh::accessVertexPositions(*a1);
  v33 = *(unsigned int *)v11;
  v34 = *a1;
  v35 = *((_QWORD *)*a1 + 5);
  if (v35 <= v33)
  {
    v45.i64[0] = 0;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v55 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v47 = 136315906;
    v48 = "operator[]";
    v49 = 1024;
    v50 = 797;
    v51 = 2048;
    v52 = v33;
    v53 = 2048;
    v54 = v35;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_36;
  }
  LODWORD(v15) = v32;
  v36 = (unsigned int *)(*((_QWORD *)v34 + 7) + 16 * v33);
  v35 = *v36;
  if (v35 >= v32)
  {
LABEL_36:
    v45.i64[0] = 0;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v55 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v47 = 136315906;
    v48 = "operator[]";
    v49 = 1024;
    v50 = 601;
    v51 = 2048;
    v52 = v35;
    v53 = 2048;
    v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_37;
  }
  v6 = v36[1];
  if (v6 >= v32)
  {
LABEL_37:
    v45.i64[0] = 0;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v55 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v47 = 136315906;
    v48 = "operator[]";
    v49 = 1024;
    v50 = 601;
    v51 = 2048;
    v52 = v6;
    v53 = 2048;
    v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_38;
  }
  v7 = v36[2];
  if (v7 >= v32)
  {
LABEL_38:
    v45.i64[0] = 0;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v55 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v47 = 136315906;
    v48 = "operator[]";
    v49 = 1024;
    v50 = 601;
    v51 = 2048;
    v52 = v7;
    v53 = 2048;
    v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_39;
  }
  v5 = v36[3];
  v37 = 0uLL;
  v44 = 0u;
  v45 = 0u;
  if ((_DWORD)v5 != -1)
  {
    if (v5 < v32)
    {
      *(_QWORD *)&v55 = 0;
      v38 = re::computeDistanceSquaredFromPointToQuad(a3, (float32x4_t *)(v31 + 16 * v35), (float32x4_t *)(v31 + 16 * v6), (float32x4_t *)(v31 + 16 * v7), (float32x4_t *)(v31 + 16 * v5), &v45, (uint64_t *)&v55);
      *(_QWORD *)&v39 = v55;
      DWORD2(v39) = 0;
      v44 = v39;
      goto LABEL_32;
    }
LABEL_39:
    v46 = 0;
    v58 = v37;
    v59 = v37;
    v56 = v37;
    v57 = v37;
    v55 = v37;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v47 = 136315906;
    v48 = "operator[]";
    v49 = 1024;
    v50 = 601;
    v51 = 2048;
    v52 = v5;
    v53 = 2048;
    v54 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  geom_closest_point_to_triangle_3f();
  v45 = v40;
  v41 = vsubq_f32(v40, *a3);
  v42 = vmulq_f32(v41, v41);
  LODWORD(v38) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).u32[0];
LABEL_32:
  if (v38 < *a4)
  {
    *a4 = v38;
    *(_DWORD *)a5 = v33;
    v43 = v45;
    *(_OWORD *)(a5 + 16) = v44;
    *(float32x4_t *)(a5 + 32) = v43;
  }
}

float re::GeomMeshBVHTree::computeClosestPoint(re::GeomMeshBVHTree *a1, float32x4_t *a2, _DWORD *a3)
{
  _QWORD *v6;
  float v8;

  v8 = INFINITY;
  *a3 = -1;
  if (!*((_QWORD *)a1 + 4))
    return INFINITY;
  v6 = (_QWORD *)re::GeomMeshBVHTree::root(a1);
  re::GeomMeshBVHTree::computeClosestPointHelper((re::GeomMesh **)a1, v6, a2, &v8, (uint64_t)a3);
  return v8;
}

uint64_t re::GeomMeshBVHTree::root(re::GeomMeshBVHTree *this)
{
  if (!*((_QWORD *)this + 4))
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 6);
}

_QWORD *re::DynamicArray<re::GeomMeshBVHTree::Node>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = result[1];
  if (v2 != a2)
  {
    v4 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v4)
      {
        if (!a2)
        {
          v6 = 0;
          if (!v2)
            goto LABEL_8;
          goto LABEL_7;
        }
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 16);
        if (result)
        {
          v6 = result;
          if (!v4[1])
          {
LABEL_8:
            v4[4] = v6;
            v4[1] = a2;
            return result;
          }
LABEL_7:
          memcpy(v6, (const void *)v4[4], 48 * v4[2]);
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
          goto LABEL_8;
        }
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 48 * a2, *(_QWORD *)(*v4 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::GeomMeshBVHTree::Node>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  return result;
}

uint64_t re::internal::accessFaceVaryingAttributeSubmesh(re::internal *this, const re::GeomAttribute *a2)
{
  switch(*((_BYTE *)this + 17))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
      return (uint64_t)this + 64;
    default:
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute type", "!\"Unreachable code\"", "accessFaceVaryingAttributeSubmesh", 168);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2258A0884);
  }
}

char *re::GeomAttribute::setName(re::GeomAttribute *this, const char *__s)
{
  uint64_t v4;
  uint64_t *v5;
  re *v6;
  char *v7;
  uint64_t *v8;
  char *v9;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5[2] + 40))(v5[2], v4);
  }
  v6 = (re *)strlen(__s);
  v7 = (char *)v6 + 1;
  v8 = re::globalAllocators(v6);
  v9 = (char *)(*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v8[2] + 32))(v8[2], v7, 0);
  *((_QWORD *)this + 1) = v9;
  return strcpy(v9, __s);
}

void re::GeomAttribute::~GeomAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  uint64_t *v3;

  *(_QWORD *)this = off_24ED720D8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = re::globalAllocators(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3[2] + 40))(v3[2], v2);
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t re::GeomAttribute::createAttribute(re::GeomAttribute *this, const re::GeomAttribute *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  re::internal::GeomAttributeFaceVaryingSubmesh *v6;
  uint64_t FaceVaryingAttribute;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((unsigned __int8 *)this + 16);
  v4 = (const char *)*((_QWORD *)this + 1);
  v5 = *((unsigned __int8 *)this + 17);
  if ((_DWORD)v3 == 3)
  {
    v6 = (re::internal::GeomAttributeFaceVaryingSubmesh *)re::internal::accessFaceVaryingAttributeSubmesh(this, (const re::GeomAttribute *)v3);
    FaceVaryingAttribute = (uint64_t)re::GeomAttribute::createFaceVaryingAttribute(v4, v5, v6);
  }
  else
  {
    FaceVaryingAttribute = re::GeomAttribute::createAttribute(*((re **)this + 1), v3, v5, 0);
  }
  v8 = FaceVaryingAttribute;
  v9 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)this + 16))(this);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v8, v9);
  v10 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)this + 16))(this);
  (*(void (**)(re::GeomAttribute *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, v8, v10, 0, 0);
  return v8;
}

uint64_t re::GeomAttribute::createAttribute(re *a1, uint64_t a2, int a3, uint64_t a4)
{
  char v5;
  char v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;

  v5 = a3;
  v6 = a2;
  switch(a3)
  {
    case 0:
      v8 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED721E0;
      break;
    case 1:
      v12 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED72378;
      break;
    case 2:
      v13 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED72268;
      break;
    case 3:
      v14 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED72400;
      break;
    case 4:
      v15 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED72488;
      break;
    case 5:
      v16 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED72510;
      break;
    case 6:
      v17 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17[2] + 32))(v17[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED72598;
      break;
    case 7:
      v18 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED72620;
      break;
    case 8:
      v19 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED726A8;
      break;
    case 9:
      v20 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED722F0;
      break;
    case 10:
      v21 = re::globalAllocators(a1);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[2] + 32))(v21[2], 64, 8);
      v10 = v9;
      v11 = &off_24ED72158;
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute type", "!\"Unreachable code\"", "createAttribute", 353);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2258A0D08);
  }
  *(_QWORD *)v9 = v11;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v10 + 56) = 0;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  re::GeomAttribute::setName((re::GeomAttribute *)v10, (const char *)a1);
  *(_BYTE *)(v10 + 16) = v6;
  *(_BYTE *)(v10 + 17) = v5;
  if ((_DWORD)a4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 72))(v10, a4);
  return v10;
}

re::GeomAttribute *re::GeomAttribute::createFaceVaryingAttribute(const char *a1, uint64_t a2, re::internal::GeomAttributeFaceVaryingSubmesh *a3)
{
  re::GeomAttribute *FaceVaryingAttribute;
  uint64_t v6;
  _BYTE v8[208];

  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)v8, a3);
  FaceVaryingAttribute = re::GeomAttribute::createFaceVaryingAttribute(a1, a2, (re *)v8);
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)v8, v6);
  return FaceVaryingAttribute;
}

uint64_t re::GeomAttribute::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)
    && !strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8)))
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2);
  }
  else
  {
    return 0;
  }
}

re::GeomAttribute *re::GeomAttribute::createFaceVaryingAttribute(const char *a1, uint64_t a2, re *a3)
{
  char v3;
  re::GeomAttribute *v5;
  re::GeomAttribute *v6;

  v3 = a2;
  switch((int)a2)
  {
    case 0:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<short>(a3);
      break;
    case 1:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<unsigned short>(a3);
      break;
    case 2:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<int>(a3);
      break;
    case 3:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<unsigned int>(a3);
      break;
    case 4:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<float>(a3);
      break;
    case 5:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<double>(a3);
      break;
    case 6:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<re::Vector2<float>>(a3);
      break;
    case 7:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<re::Vector3<float>>(a3);
      break;
    case 8:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<re::Vector4<float>>(a3);
      break;
    case 9:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<unsigned char>(a3);
      break;
    case 10:
      v5 = (re::GeomAttribute *)re::internal::newFaceVaryingAttributePtr<signed char>(a3);
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute type", "!\"Unreachable code\"", "createFaceVaryingAttribute", 406);
      _os_crash();
      __break(1u);
      JUMPOUT(0x2258A0F2CLL);
  }
  v6 = v5;
  if (v5)
  {
    re::GeomAttribute::setName(v5, a1);
    *((_BYTE *)v6 + 16) = 3;
    *((_BYTE *)v6 + 17) = v3;
  }
  return v6;
}

uint64_t re::internal::newFaceVaryingAttributePtr<signed char>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED72730;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<short>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED727B8;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<int>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED72840;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<unsigned char>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED728C8;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<unsigned short>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED72950;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<unsigned int>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED729D8;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<float>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED72A60;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<double>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED72AE8;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<re::Vector2<float>>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED72B70;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<re::Vector3<float>>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED72BF8;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::internal::newFaceVaryingAttributePtr<re::Vector4<float>>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 272, 8);
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  *(_QWORD *)v3 = &off_24ED72C80;
  *(_QWORD *)(v3 + 8) = 0;
  re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(v3 + 64, (uint64_t)a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 72))(v3, *(unsigned int *)(v3 + 64));
  return v3;
}

uint64_t re::GeomAttribute::freeAttribute(re::GeomAttribute *this, re::GeomAttribute *a2)
{
  uint64_t v3;
  uint64_t result;

  if (*((unsigned __int8 *)this + 17) >= 0xBu)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Unexpected attribute type", "!\"Unreachable code\"", "freeAttribute", 477);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v3 = re::globalAllocators(this)[2];
    (**(void (***)(re::GeomAttribute *))this)(this);
    return (*(uint64_t (**)(uint64_t, re::GeomAttribute *))(*(_QWORD *)v3 + 40))(v3, this);
  }
  return result;
}

void re::GeomAttribute::updateSubmesh(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Call to update a submesh on a non face-varying attribute", "!\"Unreachable code\"", "updateSubmesh", 421);
  _os_crash();
  __break(1u);
}

void re::internal::GeomTypedAttribute<signed char>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<signed char>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<signed char>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<signed char>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<BOOL>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<signed char>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

_QWORD *re::internal::GeomTypedAttribute<signed char>::copyValuesHelper(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;

  v6 = result;
  if (a4)
  {
    if (a3)
    {
      v7 = a3;
      while (1)
      {
        v9 = *a4++;
        v8 = v9;
        if (result[5] <= (unint64_t)v9)
          break;
        v10 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v10)
          goto LABEL_15;
        *(_BYTE *)(*(_QWORD *)(a2 + 56) + v10) = *(_BYTE *)(result[7] + v8);
        ++a5;
        if (!--v7)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    if ((_DWORD)result)
    {
      v11 = 0;
      while (v6[5] > v11)
      {
        if (*(_QWORD *)(a2 + 40) <= v11)
          goto LABEL_17;
        *(_BYTE *)(*(_QWORD *)(a2 + 56) + v11) = *(_BYTE *)(v6[7] + v11);
        if (result == ++v11)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<signed char>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v5 <= v3)
        goto LABEL_22;
      v6 = *(_QWORD *)(a2 + 32);
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        if (*(_QWORD *)(result + 40) <= v3)
          goto LABEL_23;
        v7 = *(_BYTE *)(*(_QWORD *)(result + 56) + v3);
        v8 = v4;
        v9 = v4;
        while (1)
        {
          v10 = *(unsigned int *)(v6 + 4 * v8);
          if (v4 == (_DWORD)v10)
            break;
          v11 = *(_QWORD *)(result + 40);
          if (v11 <= v10)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_21:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_25;
          }
          if (v11 <= v8)
            goto LABEL_19;
          *(_BYTE *)(*(_QWORD *)(result + 56) + v8) = *(_BYTE *)(*(_QWORD *)(result + 56) + v10);
          v12 = *(_QWORD *)(a2 + 16);
          if (v12 <= v8)
            goto LABEL_20;
          v6 = *(_QWORD *)(a2 + 32);
          *(_DWORD *)(v6 + 4 * v8) = v9;
          v8 = v10;
          v9 = v10;
          if (v12 <= v10)
            goto LABEL_21;
        }
        if (*(_QWORD *)(result + 40) <= v8)
          goto LABEL_24;
        *(_BYTE *)(*(_QWORD *)(result + 56) + v8) = v7;
        v5 = *(_QWORD *)(a2 + 16);
        if (v5 <= v8)
        {
LABEL_25:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v8) = v9;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<signed char>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  size_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  return v2 == *(_QWORD *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), v2) == 0;
}

void re::internal::GeomTypedAttribute<signed char>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<BOOL>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<signed char>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<BOOL>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<signed char>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<signed char>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED72158;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedAttribute<short>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<short>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<short>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<short>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<unsigned short>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<short>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

_QWORD *re::internal::GeomTypedAttribute<short>::copyValuesHelper(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a4)
  {
    if (a3)
    {
      v7 = result[5];
      v8 = a3;
      while (1)
      {
        v10 = *a4++;
        v9 = v10;
        if (v7 <= v10)
          break;
        v11 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v11)
          goto LABEL_15;
        *(_WORD *)(*(_QWORD *)(a2 + 56) + 2 * v11) = *(_WORD *)(result[7] + 2 * v9);
        ++a5;
        if (!--v8)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    if ((_DWORD)result)
    {
      v12 = 0;
      v13 = v6[5];
      while (v13 != v12)
      {
        if (*(_QWORD *)(a2 + 40) <= v12)
          goto LABEL_17;
        *(_WORD *)(*(_QWORD *)(a2 + 56) + 2 * v12) = *(_WORD *)(v6[7] + 2 * v12);
        if (result == ++v12)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<short>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  unint64_t v11;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v5 <= v3)
        goto LABEL_18;
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        v7 = v4;
        if (v5 <= v4)
          goto LABEL_19;
        v8 = *(_QWORD *)(result + 56);
        v9 = *(_WORD *)(v8 + 2 * v3);
        v10 = v4;
        while (1)
        {
          v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == (_DWORD)v11)
            break;
          if (v2 <= v11)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7)
            goto LABEL_17;
          *(_WORD *)(v8 + 2 * v7) = *(_WORD *)(v8 + 2 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          v7 = v11;
          v10 = v11;
          if (v5 <= v11)
            goto LABEL_19;
        }
        if (v2 <= v7)
          goto LABEL_20;
        *(_WORD *)(v8 + 2 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<short>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  return v2 == *(_QWORD *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 2 * v2) == 0;
}

void re::internal::GeomTypedAttribute<short>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<unsigned short>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<short>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<unsigned short>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<short>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<short>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED721E0;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedAttribute<int>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<int>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<int>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<int>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<float>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<int>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

_QWORD *re::internal::GeomTypedAttribute<int>::copyValuesHelper(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a4)
  {
    if (a3)
    {
      v7 = result[5];
      v8 = a3;
      while (1)
      {
        v10 = *a4++;
        v9 = v10;
        if (v7 <= v10)
          break;
        v11 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v11)
          goto LABEL_15;
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v11) = *(_DWORD *)(result[7] + 4 * v9);
        ++a5;
        if (!--v8)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    if ((_DWORD)result)
    {
      v12 = 0;
      v13 = v6[5];
      while (v13 != v12)
      {
        if (*(_QWORD *)(a2 + 40) <= v12)
          goto LABEL_17;
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v12) = *(_DWORD *)(v6[7] + 4 * v12);
        if (result == ++v12)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<int>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v5 <= v3)
        goto LABEL_18;
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        v7 = v4;
        if (v5 <= v4)
          goto LABEL_19;
        v8 = *(_QWORD *)(result + 56);
        v9 = *(_DWORD *)(v8 + 4 * v3);
        v10 = v4;
        while (1)
        {
          v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == (_DWORD)v11)
            break;
          if (v2 <= v11)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7)
            goto LABEL_17;
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v8 + 4 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          v7 = v11;
          v10 = v11;
          if (v5 <= v11)
            goto LABEL_19;
        }
        if (v2 <= v7)
          goto LABEL_20;
        *(_DWORD *)(v8 + 4 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<int>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  return v2 == *(_QWORD *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 4 * v2) == 0;
}

void re::internal::GeomTypedAttribute<int>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<float>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<int>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<int>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<int>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<int>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED72268;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedAttribute<unsigned char>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<unsigned char>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<unsigned char>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<unsigned char>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<BOOL>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<unsigned char>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

_QWORD *re::internal::GeomTypedAttribute<unsigned char>::copyValuesHelper(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;

  v6 = result;
  if (a4)
  {
    if (a3)
    {
      v7 = a3;
      while (1)
      {
        v9 = *a4++;
        v8 = v9;
        if (result[5] <= (unint64_t)v9)
          break;
        v10 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v10)
          goto LABEL_15;
        *(_BYTE *)(*(_QWORD *)(a2 + 56) + v10) = *(_BYTE *)(result[7] + v8);
        ++a5;
        if (!--v7)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    if ((_DWORD)result)
    {
      v11 = 0;
      while (v6[5] > v11)
      {
        if (*(_QWORD *)(a2 + 40) <= v11)
          goto LABEL_17;
        *(_BYTE *)(*(_QWORD *)(a2 + 56) + v11) = *(_BYTE *)(v6[7] + v11);
        if (result == ++v11)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned char>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v5 <= v3)
        goto LABEL_22;
      v6 = *(_QWORD *)(a2 + 32);
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        if (*(_QWORD *)(result + 40) <= v3)
          goto LABEL_23;
        v7 = *(_BYTE *)(*(_QWORD *)(result + 56) + v3);
        v8 = v4;
        v9 = v4;
        while (1)
        {
          v10 = *(unsigned int *)(v6 + 4 * v8);
          if (v4 == (_DWORD)v10)
            break;
          v11 = *(_QWORD *)(result + 40);
          if (v11 <= v10)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_21:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_25;
          }
          if (v11 <= v8)
            goto LABEL_19;
          *(_BYTE *)(*(_QWORD *)(result + 56) + v8) = *(_BYTE *)(*(_QWORD *)(result + 56) + v10);
          v12 = *(_QWORD *)(a2 + 16);
          if (v12 <= v8)
            goto LABEL_20;
          v6 = *(_QWORD *)(a2 + 32);
          *(_DWORD *)(v6 + 4 * v8) = v9;
          v8 = v10;
          v9 = v10;
          if (v12 <= v10)
            goto LABEL_21;
        }
        if (*(_QWORD *)(result + 40) <= v8)
          goto LABEL_24;
        *(_BYTE *)(*(_QWORD *)(result + 56) + v8) = v7;
        v5 = *(_QWORD *)(a2 + 16);
        if (v5 <= v8)
        {
LABEL_25:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v8) = v9;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<unsigned char>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  size_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  return v2 == *(_QWORD *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), v2) == 0;
}

void re::internal::GeomTypedAttribute<unsigned char>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<BOOL>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<unsigned char>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<BOOL>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned char>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<unsigned char>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED722F0;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedAttribute<unsigned short>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<unsigned short>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<unsigned short>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<unsigned short>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<unsigned short>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<unsigned short>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

_QWORD *re::internal::GeomTypedAttribute<unsigned short>::copyValuesHelper(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a4)
  {
    if (a3)
    {
      v7 = result[5];
      v8 = a3;
      while (1)
      {
        v10 = *a4++;
        v9 = v10;
        if (v7 <= v10)
          break;
        v11 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v11)
          goto LABEL_15;
        *(_WORD *)(*(_QWORD *)(a2 + 56) + 2 * v11) = *(_WORD *)(result[7] + 2 * v9);
        ++a5;
        if (!--v8)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    if ((_DWORD)result)
    {
      v12 = 0;
      v13 = v6[5];
      while (v13 != v12)
      {
        if (*(_QWORD *)(a2 + 40) <= v12)
          goto LABEL_17;
        *(_WORD *)(*(_QWORD *)(a2 + 56) + 2 * v12) = *(_WORD *)(v6[7] + 2 * v12);
        if (result == ++v12)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned short>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  unint64_t v11;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v5 <= v3)
        goto LABEL_18;
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        v7 = v4;
        if (v5 <= v4)
          goto LABEL_19;
        v8 = *(_QWORD *)(result + 56);
        v9 = *(_WORD *)(v8 + 2 * v3);
        v10 = v4;
        while (1)
        {
          v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == (_DWORD)v11)
            break;
          if (v2 <= v11)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7)
            goto LABEL_17;
          *(_WORD *)(v8 + 2 * v7) = *(_WORD *)(v8 + 2 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          v7 = v11;
          v10 = v11;
          if (v5 <= v11)
            goto LABEL_19;
        }
        if (v2 <= v7)
          goto LABEL_20;
        *(_WORD *)(v8 + 2 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<unsigned short>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  return v2 == *(_QWORD *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 2 * v2) == 0;
}

void re::internal::GeomTypedAttribute<unsigned short>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<unsigned short>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<unsigned short>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<unsigned short>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned short>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<unsigned short>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED72378;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedAttribute<unsigned int>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<unsigned int>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<unsigned int>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<unsigned int>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<float>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<unsigned int>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

_QWORD *re::internal::GeomTypedAttribute<unsigned int>::copyValuesHelper(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a4)
  {
    if (a3)
    {
      v7 = result[5];
      v8 = a3;
      while (1)
      {
        v10 = *a4++;
        v9 = v10;
        if (v7 <= v10)
          break;
        v11 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v11)
          goto LABEL_15;
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v11) = *(_DWORD *)(result[7] + 4 * v9);
        ++a5;
        if (!--v8)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    if ((_DWORD)result)
    {
      v12 = 0;
      v13 = v6[5];
      while (v13 != v12)
      {
        if (*(_QWORD *)(a2 + 40) <= v12)
          goto LABEL_17;
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v12) = *(_DWORD *)(v6[7] + 4 * v12);
        if (result == ++v12)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned int>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v5 <= v3)
        goto LABEL_18;
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        v7 = v4;
        if (v5 <= v4)
          goto LABEL_19;
        v8 = *(_QWORD *)(result + 56);
        v9 = *(_DWORD *)(v8 + 4 * v3);
        v10 = v4;
        while (1)
        {
          v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == (_DWORD)v11)
            break;
          if (v2 <= v11)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7)
            goto LABEL_17;
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v8 + 4 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          v7 = v11;
          v10 = v11;
          if (v5 <= v11)
            goto LABEL_19;
        }
        if (v2 <= v7)
          goto LABEL_20;
        *(_DWORD *)(v8 + 4 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<unsigned int>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  return v2 == *(_QWORD *)(a2 + 40) && memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 4 * v2) == 0;
}

void re::internal::GeomTypedAttribute<unsigned int>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<float>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<unsigned int>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<int>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<unsigned int>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<unsigned int>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED72400;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedAttribute<float>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<float>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<float>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<float>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<float>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<float>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

float re::internal::GeomTypedAttribute<float>::copyValuesHelper(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  float result;
  int v13;
  unint64_t v14;
  uint64_t v15;

  if (a4)
  {
    if (a3)
    {
      v7 = a1[5];
      v8 = a3;
      while (1)
      {
        v10 = *a4++;
        v9 = v10;
        if (v7 <= v10)
          break;
        v11 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v11)
          goto LABEL_15;
        result = *(float *)(a1[7] + 4 * v9);
        *(float *)(*(_QWORD *)(a2 + 56) + 4 * v11) = result;
        ++a5;
        if (!--v8)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    if (v13)
    {
      v14 = 0;
      v15 = a1[5];
      while (v15 != v14)
      {
        if (*(_QWORD *)(a2 + 40) <= v14)
          goto LABEL_17;
        result = *(float *)(a1[7] + 4 * v14);
        *(float *)(*(_QWORD *)(a2 + 56) + 4 * v14++) = result;
        if (v13 == v14)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<float>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v5 <= v3)
        goto LABEL_18;
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        v7 = v4;
        if (v5 <= v4)
          goto LABEL_19;
        v8 = *(_QWORD *)(result + 56);
        v9 = *(_DWORD *)(v8 + 4 * v3);
        v10 = v4;
        while (1)
        {
          v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == (_DWORD)v11)
            break;
          if (v2 <= v11)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7)
            goto LABEL_17;
          *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v8 + 4 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          v7 = v11;
          v10 = v11;
          if (v5 <= v11)
            goto LABEL_19;
        }
        if (v2 <= v7)
          goto LABEL_20;
        *(_DWORD *)(v8 + 4 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<float>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  _BOOL8 result;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 != *(_QWORD *)(a2 + 40))
    return 0;
  if (!v2)
    return 1;
  v3 = *(float **)(a1 + 56);
  v4 = *(float **)(a2 + 56);
  v5 = 4 * v2 - 4;
  do
  {
    v6 = *v3++;
    v7 = v6;
    v8 = *v4++;
    result = v7 == v8;
    v10 = v7 != v8 || v5 == 0;
    v5 -= 4;
  }
  while (!v10);
  return result;
}

void re::internal::GeomTypedAttribute<float>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<float>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<float>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<int>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<float>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<float>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED72488;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedAttribute<double>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<double>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<double>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<double>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<double>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<double>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

double re::internal::GeomTypedAttribute<double>::copyValuesHelper(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  double result;
  int v13;
  unint64_t v14;
  uint64_t v15;

  if (a4)
  {
    if (a3)
    {
      v7 = a1[5];
      v8 = a3;
      while (1)
      {
        v10 = *a4++;
        v9 = v10;
        if (v7 <= v10)
          break;
        v11 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v11)
          goto LABEL_15;
        result = *(double *)(a1[7] + 8 * v9);
        *(double *)(*(_QWORD *)(a2 + 56) + 8 * v11) = result;
        ++a5;
        if (!--v8)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    v13 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    if (v13)
    {
      v14 = 0;
      v15 = a1[5];
      while (v15 != v14)
      {
        if (*(_QWORD *)(a2 + 40) <= v14)
          goto LABEL_17;
        result = *(double *)(a1[7] + 8 * v14);
        *(double *)(*(_QWORD *)(a2 + 56) + 8 * v14++) = result;
        if (v13 == v14)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<double>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    do
    {
      if (v5 <= v3)
        goto LABEL_18;
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        v7 = v4;
        if (v5 <= v4)
          goto LABEL_19;
        v8 = *(_QWORD *)(result + 56);
        v9 = *(_QWORD *)(v8 + 8 * v3);
        v10 = v4;
        while (1)
        {
          v11 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == (_DWORD)v11)
            break;
          if (v2 <= v11)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_17:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_18:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v2 <= v7)
            goto LABEL_17;
          *(_QWORD *)(v8 + 8 * v7) = *(_QWORD *)(v8 + 8 * v11);
          *(_DWORD *)(v6 + 4 * v7) = v10;
          v7 = v11;
          v10 = v11;
          if (v5 <= v11)
            goto LABEL_19;
        }
        if (v2 <= v7)
          goto LABEL_20;
        *(_QWORD *)(v8 + 8 * v7) = v9;
        *(_DWORD *)(v6 + 4 * v7) = v10;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

BOOL re::internal::GeomTypedAttribute<double>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  _BOOL8 result;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 != *(_QWORD *)(a2 + 40))
    return 0;
  if (!v2)
    return 1;
  v3 = *(double **)(a1 + 56);
  v4 = *(double **)(a2 + 56);
  v5 = 8 * v2 - 8;
  do
  {
    v6 = *v3++;
    v7 = v6;
    v8 = *v4++;
    result = v7 == v8;
    v10 = v7 != v8 || v5 == 0;
    v5 -= 8;
  }
  while (!v10);
  return result;
}

void re::internal::GeomTypedAttribute<double>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<double>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<double>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<float *>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<double>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<double>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED72510;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedAttribute<re::Vector2<float>>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<re::Vector2<float>>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<unsigned long>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

_QWORD *re::internal::GeomTypedAttribute<re::Vector2<float>>::copyValuesHelper(_QWORD *result, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;

  v6 = result;
  if (a4)
  {
    if (a3)
    {
      v7 = a3;
      while (1)
      {
        v9 = *a4++;
        v8 = v9;
        if (result[5] <= (unint64_t)v9)
          break;
        v10 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v10)
          goto LABEL_15;
        *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v10) = *(_QWORD *)(result[7] + 8 * v8);
        ++a5;
        if (!--v7)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
    if ((_DWORD)result)
    {
      v11 = 0;
      while (v6[5] > v11)
      {
        if (*(_QWORD *)(a2 + 40) <= v11)
          goto LABEL_17;
        *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v11) = *(_QWORD *)(v6[7] + 8 * v11);
        if (result == ++v11)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v5 <= v3)
        goto LABEL_22;
      v6 = *(_QWORD *)(a2 + 32);
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        if (*(_QWORD *)(result + 40) <= v3)
          goto LABEL_23;
        v7 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v3);
        v8 = v4;
        v9 = v4;
        while (1)
        {
          v10 = *(unsigned int *)(v6 + 4 * v8);
          if (v4 == (_DWORD)v10)
            break;
          v11 = *(_QWORD *)(result + 40);
          if (v11 <= v10)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_21:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_25;
          }
          if (v11 <= v8)
            goto LABEL_19;
          *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v8) = *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v10);
          v12 = *(_QWORD *)(a2 + 16);
          if (v12 <= v8)
            goto LABEL_20;
          v6 = *(_QWORD *)(a2 + 32);
          *(_DWORD *)(v6 + 4 * v8) = v9;
          v8 = v10;
          v9 = v10;
          if (v12 <= v10)
            goto LABEL_21;
        }
        if (*(_QWORD *)(result + 40) <= v8)
          goto LABEL_24;
        *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v8) = v7;
        v5 = *(_QWORD *)(a2 + 16);
        if (v5 <= v8)
        {
LABEL_25:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v8) = v9;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x2_t *v3;
  float32x2_t *v4;
  uint64_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t v8;
  uint32x2_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 != *(_QWORD *)(a2 + 40))
    return 0;
  if (!v2)
    return 1;
  v3 = *(float32x2_t **)(a1 + 56);
  v4 = *(float32x2_t **)(a2 + 56);
  v5 = 8 * v2 - 8;
  do
  {
    v6 = *v3++;
    v7 = v6;
    v8 = *v4++;
    v9 = (uint32x2_t)vceq_f32(v7, v8);
    v9.i32[0] = vpmin_u32(v9, v9).u32[0];
    result = (unsigned __int32)v9.i32[0] >> 31;
    if ((v9.i32[0] & 0x80000000) == 0)
      break;
    v11 = v5;
    v5 -= 8;
  }
  while (v11);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector2<float>>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<unsigned long>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<re::Vector2<float>>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector2<float>>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector2<float>>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED72598;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedAttribute<re::Vector3<float>>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<re::Vector3<float>>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<re::Vector3<float>>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

__n128 re::internal::GeomTypedAttribute<re::Vector3<float>>::copyValuesHelper(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __n128 result;
  int v12;
  unint64_t v13;

  if (a4)
  {
    if (a3)
    {
      v7 = a3;
      while (1)
      {
        v9 = *a4++;
        v8 = v9;
        if (a1[5] <= (unint64_t)v9)
          break;
        v10 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v10)
          goto LABEL_15;
        result = *(__n128 *)(a1[7] + 16 * v8);
        *(__n128 *)(*(_QWORD *)(a2 + 56) + 16 * v10) = result;
        ++a5;
        if (!--v7)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    if (v12)
    {
      v13 = 0;
      while (a1[5] > v13)
      {
        if (*(_QWORD *)(a2 + 40) <= v13)
          goto LABEL_17;
        result = *(__n128 *)(a1[7] + 16 * v13);
        *(__n128 *)(*(_QWORD *)(a2 + 56) + 16 * v13++) = result;
        if (v13 == v12)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v5 <= v3)
        goto LABEL_22;
      v6 = *(_QWORD *)(a2 + 32);
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        if (*(_QWORD *)(result + 40) <= v3)
          goto LABEL_23;
        v12 = *(_OWORD *)(*(_QWORD *)(result + 56) + 16 * v3);
        v7 = v4;
        v8 = v4;
        while (1)
        {
          v9 = *(unsigned int *)(v6 + 4 * v7);
          if (v4 == (_DWORD)v9)
            break;
          v10 = *(_QWORD *)(result + 40);
          if (v10 <= v9)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_21:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_25;
          }
          if (v10 <= v7)
            goto LABEL_19;
          *(_OWORD *)(*(_QWORD *)(result + 56) + 16 * v7) = *(_OWORD *)(*(_QWORD *)(result + 56) + 16 * v9);
          v11 = *(_QWORD *)(a2 + 16);
          if (v11 <= v7)
            goto LABEL_20;
          v6 = *(_QWORD *)(a2 + 32);
          *(_DWORD *)(v6 + 4 * v7) = v8;
          v7 = v9;
          v8 = v9;
          if (v11 <= v9)
            goto LABEL_21;
        }
        if (*(_QWORD *)(result + 40) <= v7)
          goto LABEL_24;
        *(_OWORD *)(*(_QWORD *)(result + 56) + 16 * v7) = v12;
        v5 = *(_QWORD *)(a2 + 16);
        if (v5 <= v7)
        {
LABEL_25:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v7) = v8;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x4_t *v3;
  float32x4_t *v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint32x4_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 != *(_QWORD *)(a2 + 40))
    return 0;
  if (!v2)
    return 1;
  v3 = *(float32x4_t **)(a1 + 56);
  v4 = *(float32x4_t **)(a2 + 56);
  v5 = 16 * v2 - 16;
  do
  {
    v6 = *v3++;
    v7 = v6;
    v8 = *v4++;
    v9 = (uint32x4_t)vceqq_f32(v7, v8);
    v9.i32[3] = v9.i32[2];
    v9.i32[0] = vminvq_u32(v9);
    result = (unsigned __int32)v9.i32[0] >> 31;
    if ((v9.i32[0] & 0x80000000) == 0)
      break;
    v11 = v5;
    v5 -= 16;
  }
  while (v11);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector3<float>>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<re::Vector3<float>>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<re::Vector3<float>>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<re::Quaternion<float>>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector3<float>>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED72620;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedAttribute<re::Vector4<float>>::~GeomTypedAttribute(re::GeomAttribute *a1)
{
  re::internal::GeomTypedAttribute<re::Vector4<float>>::~GeomTypedAttribute(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::resize(_BYTE *a1, unsigned int a2)
{
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1) == a2)
    return 1;
  if (a1[16] == 4)
  {
    re::DynamicArray<re::Vector4<float>>::resize((uint64_t)(a1 + 24), a2);
    return 1;
  }
  return 0;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::clear(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    *(_QWORD *)(a1 + 40) = 0;
    ++*(_DWORD *)(a1 + 48);
    return 1;
  }
  return 0;
}

__n128 re::internal::GeomTypedAttribute<re::Vector4<float>>::copyValuesHelper(_QWORD *a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  __n128 result;
  int v12;
  unint64_t v13;

  if (a4)
  {
    if (a3)
    {
      v7 = a3;
      while (1)
      {
        v9 = *a4++;
        v8 = v9;
        if (a1[5] <= (unint64_t)v9)
          break;
        v10 = *a5;
        if (*(_QWORD *)(a2 + 40) <= v10)
          goto LABEL_15;
        result = *(__n128 *)(a1[7] + 16 * v8);
        *(__n128 *)(*(_QWORD *)(a2 + 56) + 16 * v10) = result;
        ++a5;
        if (!--v7)
          return result;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_15:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_16;
    }
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
    if (v12)
    {
      v13 = 0;
      while (a1[5] > v13)
      {
        if (*(_QWORD *)(a2 + 40) <= v13)
          goto LABEL_17;
        result = *(__n128 *)(a1[7] + 16 * v13);
        *(__n128 *)(*(_QWORD *)(a2 + 56) + 16 * v13++) = result;
        if (v13 == v12)
          return result;
      }
LABEL_16:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_17:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::reorderHelper(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    do
    {
      if (v5 <= v3)
        goto LABEL_22;
      v6 = *(_QWORD *)(a2 + 32);
      if (v4 != *(_DWORD *)(v6 + 4 * v3))
      {
        if (*(_QWORD *)(result + 40) <= v3)
          goto LABEL_23;
        v7 = *(_OWORD *)(*(_QWORD *)(result + 56) + 16 * v3);
        v8 = v4;
        v9 = v4;
        while (1)
        {
          v10 = *(unsigned int *)(v6 + 4 * v8);
          if (v4 == (_DWORD)v10)
            break;
          v11 = *(_QWORD *)(result + 40);
          if (v11 <= v10)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_20:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_21:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_22:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_23:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_24:
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_25;
          }
          if (v11 <= v8)
            goto LABEL_19;
          *(_OWORD *)(*(_QWORD *)(result + 56) + 16 * v8) = *(_OWORD *)(*(_QWORD *)(result + 56) + 16 * v10);
          v12 = *(_QWORD *)(a2 + 16);
          if (v12 <= v8)
            goto LABEL_20;
          v6 = *(_QWORD *)(a2 + 32);
          *(_DWORD *)(v6 + 4 * v8) = v9;
          v8 = v10;
          v9 = v10;
          if (v12 <= v10)
            goto LABEL_21;
        }
        if (*(_QWORD *)(result + 40) <= v8)
          goto LABEL_24;
        *(_OWORD *)(*(_QWORD *)(result + 56) + 16 * v8) = v7;
        v5 = *(_QWORD *)(a2 + 16);
        if (v5 <= v8)
        {
LABEL_25:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4 * v8) = v9;
      }
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x4_t *v3;
  float32x4_t *v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 != *(_QWORD *)(a2 + 40))
    return 0;
  if (!v2)
    return 1;
  v3 = *(float32x4_t **)(a1 + 56);
  v4 = *(float32x4_t **)(a2 + 56);
  v5 = 16 * v2 - 16;
  do
  {
    v6 = *v3++;
    v7 = v6;
    v8 = *v4++;
    v7.i32[0] = vminvq_u32((uint32x4_t)vceqq_f32(v7, v8));
    result = (unsigned __int32)v7.i32[0] >> 31;
    if ((v7.i32[0] & 0x80000000) == 0)
      break;
    v10 = v5;
    v5 -= 16;
  }
  while (v10);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector4<float>>::resizeInternal(uint64_t a1, unsigned int a2)
{
  re::DynamicArray<re::Vector4<float>>::resize(a1 + 24, a2);
}

_QWORD *re::internal::GeomTypedAttribute<re::Vector4<float>>::reserveInternal(_QWORD *result, unsigned int a2)
{
  if (result[4] < (unint64_t)a2)
    return re::DynamicArray<re::Vector4<float>>::setCapacity(result + 3, a2);
  return result;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector4<float>>::clearInternal(uint64_t result)
{
  *(_QWORD *)(result + 40) = 0;
  ++*(_DWORD *)(result + 48);
  return result;
}

void re::internal::GeomTypedAttribute<re::Vector4<float>>::~GeomTypedAttribute(re::GeomAttribute *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED726A8;
  v3 = (_QWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 7) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 12);
  }
  re::GeomAttribute::~GeomAttribute(this);
}

void re::internal::GeomTypedFaceVaryingAttribute<signed char>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED72730;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<signed char>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED72730;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<signed char>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<signed char>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  size_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40)
    && !memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), v2)
    && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
    && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
  }
  else
  {
    return 0;
  }
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<signed char>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

uint64_t re::internal::GeomAttributeFaceVaryingSubmesh::GeomAttributeFaceVaryingSubmesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v5;
  ++*(_DWORD *)(a2 + 32);
  ++*(_DWORD *)(a1 + 32);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  ++*(_DWORD *)(a2 + 32);
  re::GeomIndexMap::GeomIndexMap(a1 + 48, a2 + 48);
  re::GeomIndexMap::GeomIndexMap(a1 + 128, a2 + 128);
  return a1;
}

uint64_t re::GeomIndexMap::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v5;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a1 == a2)
    return 1;
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
  {
    return 0;
  }
  v2 = *(unsigned __int8 *)(a1 + 12);
  v3 = *(unsigned __int8 *)(a2 + 12);
  if (v2 != v3)
  {
    v5 = 0;
    v7 = v2 != 1 && v3 != 1;
    v8 = v3 == 2 || v2 == 2;
    if (!v8 || v7)
      return v5;
    if (v2 == 1)
      v9 = a1 + 16;
    else
      v9 = a2 + 16;
    if (v2 == 2)
      v10 = (_QWORD *)(a1 + 16);
    else
      v10 = (_QWORD *)(a2 + 16);
    v11 = *(_DWORD *)(v9 + 16);
    v20 = 0;
    if (v11)
    {
      v12 = 0;
      while (1)
      {
        v13 = *(_QWORD *)(v9 + 16);
        if (v13 <= v12)
        {
          v21 = 0;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v30 = 0u;
          v18 = v12;
          v19 = v13;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v22 = 136315906;
          v23 = "operator[]";
          v24 = 1024;
          v25 = 797;
          v26 = 2048;
          v27 = v18;
          v28 = 2048;
          v29 = v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v14 = *(_DWORD *)(*(_QWORD *)(v9 + 32) + 4 * v12);
        v15 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v10, &v20);
        if (v15 == -1)
        {
          if (v14 != -1)
            return 0;
        }
        else if (v14 == -1 || *(_DWORD *)(v10[1] + 8 * v15 + 4) != v14)
        {
          return 0;
        }
        v12 = v20 + 1;
        v20 = v12;
        if (v12 >= v11)
          return 1;
      }
    }
    return 1;
  }
  if (v2 == 2)
    return re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::operator==((uint64_t *)(a1 + 16), (_QWORD *)(a2 + 16));
  if (v2 == 1)
  {
    v17 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(a1 + 32) == v17)
      return memcmp(*(const void **)(a1 + 48), *(const void **)(a2 + 48), 4 * v17) == 0;
    return 0;
  }
  if (!*(_BYTE *)(a1 + 12))
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "operator==", 748);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::DynamicArray<re::GeomCell4>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *i;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2)
      return 1;
    v3 = *(_DWORD **)(a1 + 32);
    v4 = &v3[4 * v2];
    for (i = *(_DWORD **)(a2 + 32); *v3 == *i; i += 4)
    {
      v6 = 1;
      while (v6 != 4)
      {
        v7 = v3[v6];
        v8 = i[v6++];
        if (v7 != v8)
        {
          if ((unint64_t)(v6 - 2) < 3)
            return 0;
          break;
        }
      }
      v3 += 4;
      if (v3 == v4)
        return 1;
    }
  }
  return 0;
}

uint64_t re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::operator==(uint64_t *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;

  if (a1[3] == a2[3] && a1[5] == a2[5] && a1[6] == a2[6])
  {
    v12[0] = a1;
    v3 = a1[2];
    if (v3 < 0x10)
      return 1;
    v4 = 0;
    v5 = *a1;
    v6 = v3 >> 4;
    while (1)
    {
      v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v12[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF)
        break;
      v4 += 16;
      if (!--v6)
        return 1;
    }
    v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    v13 = v8;
    if (v8 == -1)
      return 1;
    while (1)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v12[0] + 8) + 8 * v8);
      v9 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(a2, (unsigned int *)&v11);
      if (v9 == -1 || *(_DWORD *)(a2[1] + 8 * v9 + 4) != HIDWORD(v11))
        break;
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v12);
      v8 = v13;
      if (v13 == -1)
        return 1;
    }
  }
  return 0;
}

_DWORD *re::internal::GeomAttributeFaceVaryingSubmesh::operator=(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (uint64_t)(a2 + 32);
  *a1 = *a2;
  v5 = (uint64_t)(a1 + 32);
  re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::operator=((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  re::GeomIndexMap::operator=((uint64_t)(a1 + 12), (uint64_t)(a2 + 12));
  re::GeomIndexMap::operator=(v5, v4);
  return a1;
}

void re::internal::GeomTypedFaceVaryingAttribute<short>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED727B8;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<short>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED727B8;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<short>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<short>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40)
    && !memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 2 * v2)
    && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
    && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
  }
  else
  {
    return 0;
  }
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<short>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

void re::internal::GeomTypedFaceVaryingAttribute<int>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED72840;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<int>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED72840;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<int>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<int>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40)
    && !memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 4 * v2)
    && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
    && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
  }
  else
  {
    return 0;
  }
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<int>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

void re::internal::GeomTypedFaceVaryingAttribute<unsigned char>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED728C8;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<unsigned char>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED728C8;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<unsigned char>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned char>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  size_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40)
    && !memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), v2)
    && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
    && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
  }
  else
  {
    return 0;
  }
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned char>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

void re::internal::GeomTypedFaceVaryingAttribute<unsigned short>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED72950;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<unsigned short>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED72950;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<unsigned short>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned short>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40)
    && !memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 2 * v2)
    && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
    && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
  }
  else
  {
    return 0;
  }
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned short>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

void re::internal::GeomTypedFaceVaryingAttribute<unsigned int>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED729D8;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<unsigned int>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED729D8;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<unsigned int>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned int>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40)
    && !memcmp(*(const void **)(a1 + 56), *(const void **)(a2 + 56), 4 * v2)
    && *(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
    && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
    && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
  {
    return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
  }
  else
  {
    return 0;
  }
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<unsigned int>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

void re::internal::GeomTypedFaceVaryingAttribute<float>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED72A60;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<float>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED72A60;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<float>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<float>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float *v5;
  float *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40))
  {
    if (v2)
    {
      v5 = *(float **)(a1 + 56);
      v6 = *(float **)(a2 + 56);
      v7 = 4 * v2;
      while (*v5 == *v6)
      {
        ++v5;
        ++v6;
        v7 -= 4;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
        && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
        && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
      {
        return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
      }
    }
  }
  return 0;
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<float>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

void re::internal::GeomTypedFaceVaryingAttribute<double>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED72AE8;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<double>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED72AE8;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<double>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<double>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v5;
  double *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40))
  {
    if (v2)
    {
      v5 = *(double **)(a1 + 56);
      v6 = *(double **)(a2 + 56);
      v7 = 8 * v2;
      while (*v5 == *v6)
      {
        ++v5;
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
        && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
        && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
      {
        return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
      }
    }
  }
  return 0;
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<double>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

void re::internal::GeomTypedFaceVaryingAttribute<re::Vector2<float>>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED72B70;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<re::Vector2<float>>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED72B70;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<re::Vector2<float>>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector2<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x2_t *v5;
  float32x2_t *v6;
  uint64_t v7;
  uint32x2_t v8;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40))
  {
    if (v2)
    {
      v5 = *(float32x2_t **)(a1 + 56);
      v6 = *(float32x2_t **)(a2 + 56);
      v7 = 8 * v2;
      while (1)
      {
        v8 = (uint32x2_t)vceq_f32(*v5, *v6);
        if ((vpmin_u32(v8, v8).u32[0] & 0x80000000) == 0)
          break;
        ++v5;
        ++v6;
        v7 -= 8;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
        && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
        && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
      {
        return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
      }
    }
  }
  return 0;
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector2<float>>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

void re::internal::GeomTypedFaceVaryingAttribute<re::Vector3<float>>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED72BF8;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<re::Vector3<float>>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED72BF8;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<re::Vector3<float>>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector3<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x4_t *v5;
  float32x4_t *v6;
  uint64_t v7;
  uint32x4_t v8;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40))
  {
    if (v2)
    {
      v5 = *(float32x4_t **)(a1 + 56);
      v6 = *(float32x4_t **)(a2 + 56);
      v7 = 16 * v2;
      while (1)
      {
        v8 = (uint32x4_t)vceqq_f32(*v5, *v6);
        v8.i32[3] = v8.i32[2];
        if ((vminvq_u32(v8) & 0x80000000) == 0)
          break;
        ++v5;
        ++v6;
        v7 -= 16;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
        && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
        && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
      {
        return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
      }
    }
  }
  return 0;
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector3<float>>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

void re::internal::GeomTypedFaceVaryingAttribute<re::Vector4<float>>::~GeomTypedFaceVaryingAttribute(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_24ED72C80;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<re::Vector4<float>>::~GeomTypedAttribute((re::GeomAttribute *)a1);
}

{
  *(_QWORD *)a1 = &off_24ED72C80;
  re::internal::GeomAttributeFaceVaryingSubmesh::~GeomAttributeFaceVaryingSubmesh((re::internal::GeomAttributeFaceVaryingSubmesh *)(a1 + 64), a2);
  re::internal::GeomTypedAttribute<re::Vector4<float>>::~GeomTypedAttribute((re::GeomAttribute *)a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector4<float>>::isEqualHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float32x4_t *v5;
  float32x4_t *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == *(_QWORD *)(a2 + 40))
  {
    if (v2)
    {
      v5 = *(float32x4_t **)(a1 + 56);
      v6 = *(float32x4_t **)(a2 + 56);
      v7 = 16 * v2;
      while ((vminvq_u32((uint32x4_t)vceqq_f32(*v5, *v6)) & 0x80000000) != 0)
      {
        ++v5;
        ++v6;
        v7 -= 16;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64)
        && re::DynamicArray<re::GeomCell4>::operator==(a1 + 72, a2 + 72)
        && re::GeomIndexMap::operator==(a1 + 112, a2 + 112))
      {
        return re::GeomIndexMap::operator==(a1 + 192, a2 + 192);
      }
    }
  }
  return 0;
}

uint64_t re::internal::GeomTypedFaceVaryingAttribute<re::Vector4<float>>::updateSubmesh(_DWORD *a1, _DWORD *a2)
{
  re::internal::GeomAttributeFaceVaryingSubmesh::operator=(a1 + 16, a2);
  return (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 72))(a1, a1[16]);
}

uint64_t re::buildTube(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  float32x4_t v17;
  __int128 v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  float32x4_t *v37;
  unint64_t v38;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  __float2 v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  __float2 v50;
  float v51;
  float v52;
  float v53;
  unint64_t v54;
  unint64_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  int32x4_t v60;
  float32x4_t v61;
  float v62;
  float32x4_t v63;
  int32x4_t v64;
  unsigned __int32 v65;
  float32x4_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x4_t v69;
  int32x4_t v70;
  float32x4_t v71;
  unint64_t v72;
  int8x16_t v73;
  int8x16_t v74;
  unint64_t v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  unint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  BOOL v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _OWORD *v113;
  re::internal::GeomAttributeManager *v114;
  uint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  _OWORD *v123;
  char *v124;
  char *v125;
  _QWORD *v126;
  _QWORD *v127;
  unint64_t v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _OWORD *v133;
  unint64_t v134;
  re::internal::GeomAttributeManager *v135;
  unint64_t v136;
  uint64_t v137;
  _OWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _OWORD *v145;
  char *v146;
  char *v147;
  _QWORD *v148;
  _QWORD *v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  int v154;
  _DWORD *v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  _DWORD *v161;
  re::internal *v162;
  re::GeomMesh *v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int v188;
  int v189;
  __int128 v190;
  uint64_t v191;
  unint64_t v192;
  unsigned int v193;
  float v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  _BYTE v200[112];
  unsigned int v201;
  uint64_t v202;
  uint64_t *v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  int v208;
  const char *v209;
  __int16 v210;
  int v211;
  __int16 v212;
  unint64_t v213;
  __int16 v214;
  unint64_t v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;

  v221 = *MEMORY[0x24BDAC8D0];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v196);
  v4 = *a2;
  if (v4 < 3 || (v5 = a2[1]) == 0)
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v200, "vertexPosition", 1, 7);
    if (*((_BYTE *)a2 + 16))
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v200, "vertexUV", 1, 6);
    if (*((_BYTE *)a2 + 17))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v200, "vertexNormal", 1, 7);
      if (*((_BYTE *)a2 + 16))
      {
        if (*((_BYTE *)a2 + 17))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v200, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v200, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=(a1, &v196);
    goto LABEL_24;
  }
  v165 = a1;
  v6 = v5 + 1;
  v196 = 2 * (v4 + 1) * (v5 + 1) + 4 * (v4 + 1);
  v201 = v196;
  if (v202)
  {
    v7 = v203;
    v8 = 8 * v202;
    do
    {
      v9 = *v7++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 72))(v9, v201);
      v8 -= 8;
    }
    while (v8);
  }
  v10 = 2 * v4 * v6;
  re::DynamicArray<re::GeomCell4>::resize(&v197, v10);
  v204 = v10;
  if (v205)
  {
    v11 = v206;
    v12 = 8 * v205;
    do
    {
      v13 = *v11++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 72))(v13, v204);
      v12 -= 8;
    }
    while (v12);
  }
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v200, "vertexPosition", 1, 7);
  if (*((_BYTE *)a2 + 17))
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v200, "vertexNormal", 1, 7);
  if (*((_BYTE *)a2 + 16))
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v200, "vertexUV", 1, 6);
    if (*((_BYTE *)a2 + 17))
    {
      if (*((_BYTE *)a2 + 16))
      {
        re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v200, "vertexTangent", 1, 7);
        re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v200, "vertexBitangent", 1, 7);
      }
    }
  }
  v14 = *a2;
  v15 = a2[1];
  v16 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v200, "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16))
  {
    v172 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v16, 0);
    v173 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  }
  else
  {
    v173 = 0;
    v172 = 0;
  }
  if (*((_BYTE *)a2 + 17))
  {
    v20 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v200, "vertexNormal");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20))
    {
      v171 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v20, 0);
      v21 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
    else
    {
      v171 = 0;
      v21 = 0;
    }
  }
  else
  {
    v171 = 0;
    v21 = 0xFFFFFFFFLL;
  }
  v181 = v21;
  if (*((_BYTE *)a2 + 16))
  {
    v22 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v200, "vertexUV");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
    {
      v170 = re::internal::GeomTypedAttribute<double>::operator[](v22, 0);
      v23 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    }
    else
    {
      v170 = 0;
      v23 = 0;
    }
  }
  else
  {
    v170 = 0;
    v23 = 0xFFFFFFFFLL;
  }
  v179 = v23;
  v24 = v14 + 1 + (v14 + 1) * v15;
  if (*((_BYTE *)a2 + 16))
    v25 = *((_BYTE *)a2 + 17) == 0;
  else
    v25 = 1;
  v26 = !v25;
  v188 = v26;
  if (v25)
  {
    v168 = 0;
    v169 = 0;
    v29 = -1;
    v30 = 0xFFFFFFFFLL;
  }
  else
  {
    v27 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v200, "vertexTangent");
    v28 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v200, "vertexBitangent");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27))
    {
      v169 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v27, 0);
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
    }
    else
    {
      v29 = 0;
      v169 = 0;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28))
    {
      v187 = 0;
      v168 = 0;
      goto LABEL_53;
    }
    v168 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v28, 0);
    v30 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  }
  v187 = v30;
LABEL_53:
  v31 = 0;
  v32 = 0;
  LOWORD(v33) = a2[1];
  v167 = v14;
  v34 = v14 + 1;
  v166 = v24;
  v35 = v24;
  do
  {
    v36 = 0;
    v174 = v32;
    v17.f32[0] = (float)(unsigned __int16)v33;
    v191 = v35;
    v192 = v31;
    v175 = v168 + 16 * v35;
    v176 = v169 + 16 * v35;
    v182 = v170 + 8 * v35;
    v184 = v171 + 16 * v35;
    v37 = (float32x4_t *)(v172 + 16 * v35);
    v177 = v168 + 16 * v31;
    if (v173 >= v31)
      v38 = v173 - v31;
    else
      v38 = 0;
    v39 = v173 >= v35;
    v40 = v173 - v35;
    if (v39)
      v41 = v40;
    else
      v41 = 0;
    v178 = v169 + 16 * v31;
    v42 = v170 + 8 * v31;
    v43 = v171 + 16 * v31;
    v33 = v172 + 16 * v31;
    *(float *)&v18 = (float)v32 / v17.f32[0];
    v190 = v18;
    do
    {
      v17.i16[0] = *a2;
      v17.f32[0] = (float)v36 / (float)v17.u32[0];
      v194 = *((float *)a2 + 1);
      v195 = v17.i64[0];
      v44 = *((float *)a2 + 3);
      v45 = __sincosf_stret(v17.f32[0] * 6.2832);
      v46 = *((float *)a2 + 2);
      v50 = __sincosf_stret((float)(1.0 - *(float *)&v195) * 6.2832);
      if ((_DWORD)v38 == (_DWORD)v36)
      {
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (v192 + v36);
        v214 = 2048;
        v215 = v173;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_92:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (v191 + v36);
        v214 = 2048;
        v215 = v173;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_93:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        v93 = v72;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v192 + v36;
        v214 = 2048;
        v215 = v93;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_94:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v191 + v36;
        v214 = 2048;
        v215 = v181;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_95:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        v94 = v75;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v191 + v36;
        v214 = 2048;
        v215 = v94;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_96:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        a2 = (unsigned __int16 *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v192 + v36;
        v214 = 2048;
        v215 = v179;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_97;
      }
      v51 = v44 - v44;
      v18 = v190;
      v52 = (float)(*(float *)&v190 * v194) + v194 * -0.5;
      v53 = v44 + (float)(*(float *)&v190 * (float)(v44 - v44));
      *(float *)&v49 = v45.__cosval * v53;
      *((float *)&v49 + 1) = v52;
      *((float *)&v49 + 2) = -(float)(v53 * v45.__sinval);
      *(_OWORD *)(v33 + 16 * v36) = v49;
      if (v41 == (_DWORD)v36)
        goto LABEL_92;
      v54 = v191 + v36;
      v55 = v192 + v36;
      v56.i32[1] = 0;
      v56.i32[3] = 0;
      v56.f32[0] = -v45.__sinval;
      v56.f32[2] = -v45.__cosval;
      v48.f32[0] = v51 * v45.__cosval;
      v48.f32[1] = v194;
      v48.f32[2] = -(float)(v45.__sinval * v51);
      v57 = (int32x4_t)vmulq_f32(v56, v56);
      v57.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v57, 2), vadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1))).u32[0];
      v58 = vrsqrte_f32((float32x2_t)v57.u32[0]);
      v59 = vmul_f32(v58, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(v58, v58)));
      v57.i32[0] = vmul_f32(v59, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(v59, v59))).u32[0];
      v60 = (int32x4_t)vmulq_f32(v48, v48);
      v61 = vmulq_n_f32(v56, *(float *)v57.i32);
      v56.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v60, 2), vadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v60.i8, 1))).u32[0];
      *(float32x2_t *)v60.i8 = vrsqrte_f32((float32x2_t)v56.u32[0]);
      *(float32x2_t *)v60.i8 = vmul_f32(*(float32x2_t *)v60.i8, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8)));
      v60.i32[0] = vmul_f32(*(float32x2_t *)v60.i8, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8))).u32[0];
      v62 = v46 + (float)(*(float *)&v190 * (float)(v46 - v46));
      v56.f32[0] = v50.__cosval * v62;
      v56.f32[1] = (float)(*(float *)&v190 * v194) + v194 * -0.5;
      v56.f32[2] = -(float)(v62 * v50.__sinval);
      v63.i32[1] = 0;
      v63.i32[3] = 0;
      v63.f32[0] = -v50.__sinval;
      v63.f32[2] = -v50.__cosval;
      v47.f32[0] = v50.__cosval * (float)(v46 - v46);
      v47.f32[1] = v194;
      v47.f32[2] = -(float)(v50.__sinval * (float)(v46 - v46));
      v64 = (int32x4_t)vmulq_f32(v63, v63);
      v65 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v64, 2), vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.i8, 1))).u32[0];
      v66 = vmulq_n_f32(v48, *(float *)v60.i32);
      v67 = vrsqrte_f32((float32x2_t)v65);
      v68 = vmul_f32(v67, vrsqrts_f32((float32x2_t)v65, vmul_f32(v67, v67)));
      v69 = vmulq_n_f32(v63, vmul_f32(v68, vrsqrts_f32((float32x2_t)v65, vmul_f32(v68, v68))).f32[0]);
      v70 = (int32x4_t)vmulq_f32(v47, v47);
      v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
      *(float32x2_t *)v60.i8 = vrsqrte_f32((float32x2_t)v70.u32[0]);
      *(float32x2_t *)v60.i8 = vmul_f32(*(float32x2_t *)v60.i8, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8)));
      v17 = vmulq_n_f32(v47, vmul_f32(*(float32x2_t *)v60.i8, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8))).f32[0]);
      v71 = vnegq_f32(v69);
      v37[v36] = v56;
      if (*((_BYTE *)a2 + 17))
      {
        v72 = v181;
        if (v181 <= v55)
          goto LABEL_93;
        v73 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v66, (int32x4_t)v66), (int8x16_t)v66, 0xCuLL), vnegq_f32(v61)), v66, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v61, (int32x4_t)v61), (int8x16_t)v61, 0xCuLL));
        *(int8x16_t *)(v43 + 16 * v36) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), v73, 0xCuLL);
        if (v181 <= v54)
          goto LABEL_94;
        v74 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL), v71), v17, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v69, (int32x4_t)v69), (int8x16_t)v69, 0xCuLL));
        *(float32x4_t *)(v184 + 16 * v36) = vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), v74, 0xCuLL));
      }
      if (*((_BYTE *)a2 + 16))
      {
        v75 = v179;
        if (v179 <= v54)
          goto LABEL_95;
        *(_QWORD *)(v182 + 8 * v36) = __PAIR64__(v190, v195);
        if (v179 <= v55)
          goto LABEL_96;
        *(_QWORD *)(v42 + 8 * v36) = __PAIR64__(v190, v195);
      }
      if (v188)
      {
        if (v55 >= v29)
        {
          v207 = 0;
          v219 = 0u;
          v220 = 0u;
          v217 = 0u;
          v218 = 0u;
          v216 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v208 = 136315906;
          v209 = "operator[]";
          v210 = 1024;
          v211 = 609;
          v212 = 2048;
          v213 = v192 + v36;
          v214 = 2048;
          v215 = v29;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_103:
          v207 = 0;
          v219 = 0u;
          v220 = 0u;
          v217 = 0u;
          v218 = 0u;
          v216 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v208 = 136315906;
          v209 = "operator[]";
          v210 = 1024;
          v211 = 609;
          v212 = 2048;
          v213 = v192 + v36;
          v214 = 2048;
          v215 = v187;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_104:
          v207 = 0;
          v219 = 0u;
          v220 = 0u;
          v217 = 0u;
          v218 = 0u;
          v216 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v208 = 136315906;
          v209 = "operator[]";
          v210 = 1024;
          v211 = 609;
          v212 = 2048;
          v213 = v191 + v36;
          v214 = 2048;
          v215 = v29;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_105:
          v207 = 0;
          v219 = 0u;
          v220 = 0u;
          v217 = 0u;
          v218 = 0u;
          v216 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v208 = 136315906;
          v209 = "operator[]";
          v210 = 1024;
          v211 = 609;
          v212 = 2048;
          v213 = v191 + v36;
          v214 = 2048;
          v215 = v187;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_106:
          v191 = 0;
          v183 = 0;
          goto LABEL_107;
        }
        *(float32x4_t *)(v178 + 16 * v36) = v61;
        if (v187 <= v55)
          goto LABEL_103;
        *(float32x4_t *)(v177 + 16 * v36) = v66;
        if (v54 >= v29)
          goto LABEL_104;
        *(float32x4_t *)(v176 + 16 * v36) = v71;
        if (v187 <= v54)
          goto LABEL_105;
        *(float32x4_t *)(v175 + 16 * v36) = v17;
      }
      ++v36;
    }
    while (v34 != (_DWORD)v36);
    v35 = v191 + v36;
    v31 = v192 + v36;
    v32 = v174 + 1;
    v33 = a2[1];
  }
  while (v174 < v33);
  v42 = *a2;
  v76 = v167;
  v37 = (float32x4_t *)v200;
  v77 = v166;
  if (!a2[1])
    goto LABEL_88;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = v42 * v33;
  v82 = v198;
  v83 = v167 + 1;
  v84 = v166 + v167;
  v85 = 8;
  do
  {
    if (!(_DWORD)v42)
      goto LABEL_87;
    v86 = 0;
    v87 = v199;
    v88 = (_DWORD *)(v199 + v85);
    do
    {
      v89 = v79 + v86;
      if (v82 <= v79 + v86)
      {
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 789;
        v212 = 2048;
        v213 = v89;
        v214 = 2048;
        v215 = v82;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_195:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        v122 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 789;
        v212 = 2048;
        v213 = v89;
        v214 = 2048;
        v215 = v82;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_196:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v208 = 136315906;
        v212 = 2048;
        v213 = (v36 + v122);
        v214 = 2048;
        v215 = v182;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_197:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v178;
        v214 = 2048;
        v215 = v182;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_198:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v177;
        v214 = 2048;
        v215 = v182;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_199:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v176;
        v214 = 2048;
        v215 = v182;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_200:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v178;
        v214 = 2048;
        v215 = v182;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_201:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v187;
        v214 = 2048;
        v215 = v182;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_202:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v42;
        v214 = 2048;
        v215 = v182;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_203:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = v181;
        v214 = 2048;
        v215 = v182;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_204:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v36;
        v214 = 2048;
        v215 = v38;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_205:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v89;
        v214 = 2048;
        v215 = v38;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_206:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v36;
        v214 = 2048;
        v215 = v82;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_207:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v89;
        v214 = 2048;
        v215 = v82;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_208:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v191;
        v214 = 2048;
        v215 = v38;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_209:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v89;
        v214 = 2048;
        v215 = v38;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_210:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v191;
        v214 = 2048;
        v215 = v82;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_211:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v89;
        v214 = 2048;
        v215 = v82;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_212:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 789;
        v212 = 2048;
        v213 = v89;
        v214 = 2048;
        v215 = v82;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_213:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 789;
        v212 = 2048;
        v213 = v89;
        v214 = 2048;
        v215 = v82;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_214:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v36;
        v214 = 2048;
        v215 = v33;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_215:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v89;
        v214 = 2048;
        v215 = v33;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_216:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        v164 = v128;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v36;
        v214 = 2048;
        v215 = v164;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_217:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v89;
        v214 = 2048;
        v215 = v192;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_218:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v89;
        v214 = 2048;
        v215 = v33;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_219:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v191;
        v214 = 2048;
        v215 = v33;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_220:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v190;
        v214 = 2048;
        v215 = v89;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_221:
        v207 = 0;
        v219 = 0u;
        v220 = 0u;
        v217 = 0u;
        v218 = 0u;
        v216 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v208 = 136315906;
        v209 = "operator[]";
        v210 = 1024;
        v211 = 609;
        v212 = 2048;
        v213 = (unint64_t)v37 + v191;
        v214 = 2048;
        v215 = v192;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(v88 - 2) = v78 + v86;
      *(v88 - 1) = v78 + v86 + 1;
      *v88 = v76 + v86 + 2;
      v88[1] = v76 + v86 + 1;
      v89 = (v81 + v86);
      if (v82 <= v89)
        goto LABEL_195;
      v90 = (_DWORD *)(v87 + 16 * v89);
      *v90 = v77 + v86;
      v90[1] = v77 + v86 + 1;
      v90[2] = v84 + v86 + 2;
      v90[3] = v84 + v86++ + 1;
      v88 += 4;
    }
    while (v42 != v86);
    v81 += v86;
LABEL_87:
    ++v80;
    v79 += v42;
    v78 += v83;
    v85 += 16 * v42;
    v84 += v83;
    v77 += v83;
    v76 += v83;
  }
  while (v80 != (_DWORD)v33);
LABEL_88:
  v91 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v200, "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91))
  {
    v195 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v91, 0);
    LODWORD(v194) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 16))(v91);
    goto LABEL_98;
  }
LABEL_97:
  v194 = 0.0;
  v195 = 0;
LABEL_98:
  LODWORD(v38) = v42 + 1;
  if (!*((_BYTE *)a2 + 17))
  {
    v191 = 0;
    v183 = -1;
    goto LABEL_107;
  }
  v95 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v37, "vertexNormal");
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95))
    goto LABEL_106;
  v191 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v95, 0);
  v183 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 16))(v95);
LABEL_107:
  v96 = v38 + v38 * v33;
  if (*((_BYTE *)a2 + 16))
  {
    v97 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v37, "vertexUV");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v97 + 16))(v97))
    {
      v187 = re::internal::GeomTypedAttribute<double>::operator[](v97, 0);
      v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 16))(v97);
    }
    else
    {
      v187 = 0;
      v98 = 0;
    }
  }
  else
  {
    v187 = 0;
    v98 = -1;
  }
  v99 = v96 + v38;
  v36 = (2 * v96);
  if (*((_BYTE *)a2 + 16))
    v100 = *((_BYTE *)a2 + 17) == 0;
  else
    v100 = 1;
  v101 = !v100;
  v189 = v38;
  v181 = (v38 + v38 * v33);
  if (v100)
  {
    v105 = 0;
    v106 = 0;
    v107 = -1;
    v104 = -1;
  }
  else
  {
    v193 = v98;
    v102 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v37, "vertexTangent");
    v103 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v37, "vertexBitangent");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v102 + 16))(v102))
    {
      v185 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v102, 0);
      v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 16))(v102);
    }
    else
    {
      v104 = 0;
      v185 = 0;
    }
    v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
    LODWORD(v38) = v189;
    if (v107)
    {
      v108 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v103, 0);
      v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
      v105 = v108;
    }
    else
    {
      v105 = 0;
    }
    v106 = v185;
    v98 = v193;
  }
  v37 = 0;
  *(_QWORD *)&v190 = (2 * v99);
  v109 = (v38 * v33);
  v192 = v107;
  v89 = (v36 + v38);
  v33 = v104;
  v82 = v98;
  v38 = v183;
  if (LODWORD(v194) <= v89)
    v110 = v89;
  else
    v110 = LODWORD(v194);
  if (LODWORD(v194) <= v109)
    v111 = v109;
  else
    v111 = LODWORD(v194);
  v182 = LODWORD(v194);
  v186 = v106;
  if (LODWORD(v194) <= (unint64_t)v36)
    v112 = v36;
  else
    v112 = LODWORD(v194);
  v113 = (_OWORD *)(v195 + 16 * v109);
  v176 = v112;
  v177 = v111;
  v114 = (re::internal::GeomAttributeManager *)(v111 - v109);
  v115 = v105 + 16 * v36;
  v116 = v106 + 16 * v36;
  v117 = (_OWORD *)(v195 + 16 * v36);
  v118 = v36 - v112;
  v178 = v110;
  v180 = v105;
  v119 = v105 + 16 * v89;
  v120 = v106 + 16 * v89;
  v121 = v89 - v110;
  v122 = -1;
  v123 = (_OWORD *)(v195 + 16 * v89);
  do
  {
    if (LODWORD(v194) <= (v36 + v122))
      goto LABEL_196;
    if (!(float32x4_t *)((char *)v37 + v121))
      goto LABEL_197;
    LOWORD(v92) = *a2;
    *v123 = *(_OWORD *)(v195 + 16 * (v36 + v122));
    if (v114 == (re::internal::GeomAttributeManager *)v37)
      goto LABEL_198;
    if (!(float32x4_t *)((char *)v37 + v118))
      goto LABEL_199;
    v124 = (char *)v37 + v36;
    v125 = (char *)v37 + v89;
    *v117 = *v113;
    if (*((_BYTE *)a2 + 17))
    {
      if ((unint64_t)v124 >= v38)
        goto LABEL_204;
      v126 = (_QWORD *)(v191 + 16 * v36 + 16 * (_QWORD)v37);
      *v126 = 0x3F80000000000000;
      v126[1] = 0;
      if ((unint64_t)v125 >= v38)
        goto LABEL_205;
      v127 = (_QWORD *)(v191 + 16 * v89 + 16 * (_QWORD)v37);
      *v127 = 0x3F80000000000000;
      v127[1] = 0;
    }
    if (*((_BYTE *)a2 + 16))
    {
      if ((unint64_t)v124 >= v82)
        goto LABEL_206;
      *(float *)&v92 = (float)v37 / (float)v92;
      *(_QWORD *)(v187 + 8 * v36 + 8 * (_QWORD)v37) = v92;
      if ((unint64_t)v125 >= v82)
        goto LABEL_207;
      HIDWORD(v92) = 1.0;
      *(_QWORD *)(v187 + 8 * v89 + 8 * (_QWORD)v37) = v92;
    }
    if (v101)
    {
      if ((unint64_t)v124 >= v33)
        goto LABEL_214;
      *(_OWORD *)(v116 + 16 * (_QWORD)v37) = xmmword_2260E5F10;
      if ((unint64_t)v125 >= v33)
        goto LABEL_215;
      *(_OWORD *)(v120 + 16 * (_QWORD)v37) = xmmword_2260E5F10;
      v39 = (unint64_t)v124 >= v192;
      v128 = v192;
      if (v39)
        goto LABEL_216;
      *(_OWORD *)(v115 + 16 * (_QWORD)v37) = xmmword_226108EE0;
      if ((unint64_t)v125 >= v192)
        goto LABEL_217;
      *(_OWORD *)(v119 + 16 * (_QWORD)v37) = xmmword_226108EE0;
    }
    ++v113;
    v37 = (float32x4_t *)((char *)v37 + 1);
    ++v117;
    ++v123;
    --v122;
  }
  while ((_DWORD)v42 + 1 != (_DWORD)v37);
  v129 = 0;
  v37 = 0;
  v89 = v190;
  v130 = (v190 + v189);
  if (LODWORD(v194) <= (unint64_t)v181)
    v131 = v181;
  else
    v131 = LODWORD(v194);
  if (LODWORD(v194) <= v130)
    v132 = (v190 + v189);
  else
    v132 = LODWORD(v194);
  v133 = (_OWORD *)(v195 + 16 * v181);
  if (LODWORD(v194) <= (unint64_t)v190)
    v134 = v190;
  else
    v134 = LODWORD(v194);
  v178 = v131;
  v135 = (re::internal::GeomAttributeManager *)(v131 - v181);
  v136 = v187 + 8 * v190;
  v137 = v191 + 16 * v190;
  v138 = (_OWORD *)(v195 + 16 * v190);
  v181 = v134;
  v139 = v190 - v134;
  v140 = v180 + 16 * v130;
  v141 = v186 + 16 * v130;
  v142 = v187 + 8 * v130;
  v187 = v132;
  v143 = v130 - v132;
  v144 = v191 + 16 * v130;
  v191 = (v190 + v189);
  v145 = (_OWORD *)(v195 + 16 * v130);
  do
  {
    if (v135 == (re::internal::GeomAttributeManager *)v37)
      goto LABEL_200;
    if (!(float32x4_t *)((char *)v37 + v143))
      goto LABEL_201;
    LOWORD(v92) = *a2;
    *v145 = *v133;
    if (LODWORD(v194) <= v42)
      goto LABEL_202;
    if (!(float32x4_t *)((char *)v37 + v139))
      goto LABEL_203;
    v146 = (char *)v37 + v89;
    v147 = (char *)v37 + v191;
    *v138 = *(_OWORD *)(v195 + 16 * (v42 + v129));
    if (*((_BYTE *)a2 + 17))
    {
      if ((unint64_t)v147 >= v38)
        goto LABEL_208;
      v148 = (_QWORD *)(v144 + 16 * (_QWORD)v37);
      *v148 = 0xBF80000000000000;
      v148[1] = 0;
      if ((unint64_t)v146 >= v38)
        goto LABEL_209;
      v149 = (_QWORD *)(v137 + 16 * (_QWORD)v37);
      *v149 = 0xBF80000000000000;
      v149[1] = 0;
    }
    if (*((_BYTE *)a2 + 16))
    {
      if ((unint64_t)v147 >= v82)
        goto LABEL_210;
      *(float *)&v92 = (float)v37 / (float)v92;
      *(_QWORD *)(v142 + 8 * (_QWORD)v37) = __PAIR64__(1.0, v92);
      if ((unint64_t)v146 >= v82)
        goto LABEL_211;
      *(_QWORD *)(v136 + 8 * (_QWORD)v37) = v92;
    }
    if (v101)
    {
      if ((unint64_t)v146 >= v33)
        goto LABEL_218;
      *(_OWORD *)(v186 + 16 * v190 + 16 * (_QWORD)v37) = xmmword_2260E5F10;
      if ((unint64_t)v147 >= v33)
        goto LABEL_219;
      *(_OWORD *)(v141 + 16 * (_QWORD)v37) = xmmword_2260E5F10;
      v89 = v192;
      if ((unint64_t)v146 >= v192)
        goto LABEL_220;
      *(_OWORD *)(v180 + 16 * v190 + 16 * (_QWORD)v37) = xmmword_2260E5F40;
      if ((unint64_t)v147 >= v192)
        goto LABEL_221;
      *(_OWORD *)(v140 + 16 * (_QWORD)v37) = xmmword_2260E5F40;
      v89 = v190;
    }
    ++v133;
    v37 = (float32x4_t *)((char *)v37 + 1);
    ++v138;
    ++v145;
    --v129;
  }
  while ((_DWORD)v42 + 1 != (_DWORD)v37);
  v150 = *a2;
  if (*a2)
  {
    v151 = 0;
    v152 = 2 * v150 * a2[1];
    v82 = v198;
    v153 = v199;
    v154 = v42 + v36;
    do
    {
      v89 = (v152 + v151);
      if (v82 <= v89)
        goto LABEL_212;
      v155 = (_DWORD *)(v153 + 16 * v89);
      *v155 = v36 + v151;
      v155[1] = v36 + v151 + 1;
      v155[2] = v154 + v151 + 2;
      v155[3] = v154 + v151++ + 1;
    }
    while (v150 != v151);
    v156 = 0;
    v157 = v199;
    v158 = v36 + 2 * v42;
    v159 = v158 + v42;
    v160 = v152 + v151;
    do
    {
      v89 = (v160 + v156);
      if (v82 <= v89)
        goto LABEL_213;
      v161 = (_DWORD *)(v157 + 16 * v89);
      *v161 = v158 + v156 + 2;
      v161[1] = v158 + v156 + 3;
      v161[2] = v159 + v156 + 4;
      v161[3] = v159 + v156++ + 3;
    }
    while (v150 != v156);
  }
  v162 = (re::internal *)re::GeomMesh::operator=(v165, &v196);
  if (*((_BYTE *)a2 + 18))
    re::internal::mergeVertexPositions(v162, v163);
LABEL_24:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v200);
  result = v197;
  if (v197)
  {
    if (v199)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v197 + 40))(v197, v199);
  }
  return result;
}

void re::buildTube(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  unint64_t i;
  re::GeomAttribute *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  re::GeomAttribute *v15;
  re::GeomAttribute *v16;
  unint64_t v17;
  uint64_t v18;
  re::GeomAttribute *v19;
  re::GeomAttribute *v20;
  re::GeomAttribute *v21;
  uint64_t v22;
  uint64_t v23;
  re::GeomAttribute *v24;
  unint64_t v25;
  _QWORD v26[2];
  unint64_t v27;
  int v28;
  re::GeomAttribute *v29;
  _QWORD v30[3];
  int v31;
  re::GeomAttribute *v32;
  _QWORD v33[3];
  int v34;
  re::GeomAttribute *v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[12];
  __int16 v45;
  int v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  _DWORD v51[12];
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v2 = a2;
  v54 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 18))
  {
    v37 = *((_DWORD *)a2 + 4);
    v36 = *(_OWORD *)a2;
    BYTE2(v37) = 0;
    re::buildTube(a1, &v36);
    return;
  }
  i = (unint64_t)v44;
  re::GeomMesh::GeomMesh((re::GeomMesh *)&v36, 0);
  re::buildTube((uint64_t)&v36, v2);
  re::DynamicArray<re::GeomMesh>::clear((re::GeomMesh *)a1, v5);
  re::DynamicArray<re::GeomMesh>::resize(a1, 4uLL);
  v6 = v2[1];
  if (!v2[1] || (v7 = *v2, v7 < 3))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      re::GeomMesh::copy((re::GeomMesh *)&v36, *(re::GeomMesh **)(a1 + 32));
      v2 = *(unsigned __int16 **)(a1 + 16);
      if ((unint64_t)v2 > 1)
      {
        re::GeomMesh::copy((re::GeomMesh *)&v36, (re::GeomMesh *)(*(_QWORD *)(a1 + 32) + 736));
        v2 = *(unsigned __int16 **)(a1 + 16);
        if ((unint64_t)v2 > 2)
        {
          re::GeomMesh::copy((re::GeomMesh *)&v36, (re::GeomMesh *)(*(_QWORD *)(a1 + 32) + 1472));
          v2 = *(unsigned __int16 **)(a1 + 16);
          if ((unint64_t)v2 > 3)
          {
            re::GeomMesh::operator=((uint64_t *)(*(_QWORD *)(a1 + 32) + 2208), (uint64_t *)&v36);
            goto LABEL_33;
          }
LABEL_42:
          v33[0] = 0;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v39 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v51[0] = 136315906;
          *(_QWORD *)(i + 52) = "operator[]";
          LOWORD(v51[3]) = 1024;
          *(_DWORD *)(i + 62) = 789;
          HIWORD(v51[4]) = 2048;
          *(_QWORD *)(i + 68) = 3;
          LOWORD(v51[7]) = 2048;
          *(_QWORD *)(i + 78) = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_41:
        v33[0] = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v51[0] = 136315906;
        *(_QWORD *)(i + 52) = "operator[]";
        LOWORD(v51[3]) = 1024;
        *(_DWORD *)(i + 62) = 789;
        HIWORD(v51[4]) = 2048;
        *(_QWORD *)(i + 68) = 2;
        LOWORD(v51[7]) = 2048;
        *(_QWORD *)(i + 78) = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_42;
      }
LABEL_40:
      v33[0] = 0;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v51[0] = 136315906;
      *(_QWORD *)(i + 52) = "operator[]";
      LOWORD(v51[3]) = 1024;
      *(_DWORD *)(i + 62) = 789;
      HIWORD(v51[4]) = 2048;
      *(_QWORD *)(i + 68) = 1;
      LOWORD(v51[7]) = 2048;
      *(_QWORD *)(i + 78) = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_41;
    }
LABEL_39:
    v33[0] = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v51[0] = 136315906;
    *(_QWORD *)(i + 52) = "operator[]";
    LOWORD(v51[3]) = 1024;
    *(_DWORD *)(i + 62) = 789;
    HIWORD(v51[4]) = 2048;
    *(_QWORD *)(i + 68) = 0;
    LOWORD(v51[7]) = 2048;
    *(_QWORD *)(i + 78) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_40;
  }
  v35 = 0;
  v32 = 0;
  memset(v33, 0, sizeof(v33));
  v34 = 0;
  v29 = 0;
  memset(v30, 0, sizeof(v30));
  v31 = 0;
  v26[1] = 0;
  v27 = 0;
  v26[0] = 0;
  i = v7 * (unint64_t)v6;
  v28 = 0;
  re::DynamicArray<float>::resize((uint64_t)v26, i);
  v8 = 0;
  v9 = 0;
  v10 = 1;
  do
  {
    v11 = 0;
    v12 = v10;
    v13 = v8;
    v14 = v27;
    v15 = v29;
    do
    {
      if (v14 == v11)
      {
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v51[0] = 136315906;
        *(_QWORD *)&v51[1] = "operator[]";
        LOWORD(v51[3]) = 1024;
        *(_DWORD *)((char *)&v51[3] + 2) = 789;
        HIWORD(v51[4]) = 2048;
        *(_QWORD *)&v51[5] = v14;
        LOWORD(v51[7]) = 2048;
        *(_QWORD *)((char *)&v51[7] + 2) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        *(_QWORD *)v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v51[0] = 136315906;
        *(_QWORD *)&v51[1] = "operator[]";
        LOWORD(v51[3]) = 1024;
        *(_DWORD *)((char *)&v51[3] + 2) = 789;
        HIWORD(v51[4]) = 2048;
        *(_QWORD *)&v51[5] = v13;
        LOWORD(v51[7]) = 2048;
        *(_QWORD *)((char *)&v51[7] + 2) = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_37:
        v38 = 0;
        v52 = 0u;
        v53 = 0u;
        memset(v51, 0, sizeof(v51));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v44 = 136315906;
        *(_QWORD *)&v44[4] = "operator[]";
        v45 = 1024;
        v46 = 789;
        v47 = 2048;
        v48 = v9;
        v49 = 2048;
        v50 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_38:
        v38 = 0;
        v2 = (unsigned __int16 *)v44;
        v52 = 0u;
        v53 = 0u;
        memset(v51, 0, sizeof(v51));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v44 = 136315906;
        *(_QWORD *)&v44[4] = "operator[]";
        v45 = 1024;
        v46 = 789;
        v47 = 2048;
        v48 = i;
        v49 = 2048;
        v50 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_39;
      }
      *((_DWORD *)v15 + v11) = v13 + v11;
      ++v11;
    }
    while (i != v11);
    v24 = v15;
    v25 = v14;
    v22 = 0;
    v23 = 0;
    re::makeMeshFromFaces((unint64_t)&v36, &v24, &v22, (uint64_t)v33, (uint64_t)v30, (unint64_t)&v39);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 <= v9)
      goto LABEL_37;
    v14 = v13 + v11;
    re::GeomMesh::operator=((uint64_t *)(*(_QWORD *)(a1 + 32) + 736 * v9), (uint64_t *)&v39);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v39, v16);
    v10 = 0;
    v8 = (v13 + v11);
    v9 = 1;
  }
  while ((v12 & 1) != 0);
  v17 = *v2;
  re::DynamicArray<float>::resize((uint64_t)v26, v17);
  v9 = (v13 + v11);
  for (i = 2; i != 4; ++i)
  {
    v13 = v27;
    if ((_DWORD)v17)
    {
      v18 = 0;
      v19 = v29;
      do
      {
        if (v13 == v18)
          goto LABEL_36;
        *((_DWORD *)v19 + v18) = v9 + v18;
        ++v18;
      }
      while (v17 != v18);
      v9 = (v9 + v18);
    }
    v24 = v29;
    v25 = v13;
    v22 = 0;
    v23 = 0;
    re::makeMeshFromFaces((unint64_t)&v36, &v24, &v22, (uint64_t)v33, (uint64_t)v30, (unint64_t)&v39);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 <= i)
      goto LABEL_38;
    re::GeomMesh::operator=((uint64_t *)(*(_QWORD *)(a1 + 32) + 736 * i), (uint64_t *)&v39);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v39, v20);
  }
  if (v26[0])
  {
    v21 = v29;
    if (v29)
      (*(void (**)(void))(*(_QWORD *)v26[0] + 40))();
  }
  if (v30[0])
  {
    v21 = v32;
    if (v32)
      (*(void (**)(void))(*(_QWORD *)v30[0] + 40))();
  }
  if (v33[0])
  {
    v21 = v35;
    if (v35)
      (*(void (**)(void))(*(_QWORD *)v33[0] + 40))();
  }
LABEL_33:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v36, v21);
}

void re::internal::fillFaces(uint64_t a1, int a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;

  re::DynamicArray<float>::resize(a1, a3);
  if (a3)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 32);
    v9 = 1;
    do
    {
      if (v7 <= v6)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v8 + 4 * v6) = a2 + v9 - 1;
      v6 = v9++;
    }
    while (v6 < a3);
  }
}

uint64_t re::internal::makeSubmesh(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v5[2];
  _QWORD v6[2];
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  _QWORD v10[3];
  int v11;
  uint64_t v12;

  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  v9 = 0;
  v6[1] = a3;
  memset(v7, 0, sizeof(v7));
  v8 = 0;
  v5[1] = 0;
  v6[0] = a4;
  v5[0] = 0;
  re::makeMeshFromFaces(a2, v6, v5, (uint64_t)v10, (uint64_t)v7, a1);
  if (v7[0] && v9)
    (*(void (**)(void))(*(_QWORD *)v7[0] + 40))();
  result = v10[0];
  if (v10[0])
  {
    if (v12)
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10[0] + 40))(v10[0]);
  }
  return result;
}

void re::internal::capBoundary(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  re::internal::GeomAttributeManager *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  float32x4_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  float32x4_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int32x4_t v43;
  float32x2_t v44;
  float32x2_t v45;
  uint64_t v46;
  unsigned int v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;
  int8x16_t *v62;
  int v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  __float2 v76;
  float v77;
  float32x4_t v78;
  uint64_t v79;
  float32x4_t v81;

  v9 = *(_QWORD *)(a2 + 16);
  v10 = *a1;
  v11 = *((_QWORD *)a1 + 3);
  v12 = v10 + v9 + 1;
  *a1 = v12;
  v13 = (re::internal::GeomAttributeManager *)(a1 + 12);
  a1[40] = v12;
  v14 = *((_QWORD *)a1 + 23);
  if (v14)
  {
    v15 = (uint64_t *)*((_QWORD *)a1 + 25);
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 72))(v17, a1[40]);
      v16 -= 8;
    }
    while (v16);
  }
  re::DynamicArray<re::GeomCell4>::resize((_QWORD *)a1 + 1, (v11 + v9));
  a1[68] = v11 + v9;
  v18 = *((_QWORD *)a1 + 37);
  if (v18)
  {
    v19 = (uint64_t *)*((_QWORD *)a1 + 39);
    v20 = 8 * v18;
    do
    {
      v21 = *v19++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 72))(v21, a1[68]);
      v20 -= 8;
    }
    while (v20);
  }
  v22 = re::internal::GeomAttributeManager::attributeByName(v13, "vertexPosition");
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22)
    || (v79 = a3,
        v23 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v22, 0),
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22),
        v24 <= v10))
  {
LABEL_84:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v25 = 0uLL;
  *(_OWORD *)(v23 + 16 * v10) = 0u;
  if ((_DWORD)v9)
  {
    v26 = 0;
    while (1)
    {
      v27 = (v11 + v26);
      if (*((_QWORD *)a1 + 3) <= v27)
        break;
      v28 = v10 + v26 + 1;
      if ((_DWORD)v9 - 1 == v26)
        v29 = v10;
      else
        v29 = v10 + v26 + 1;
      v30 = (_DWORD *)(*((_QWORD *)a1 + 5) + 16 * v27);
      *v30 = v10;
      v30[1] = v28;
      v30[2] = v29 + 1;
      v30[3] = -1;
      if (*(_QWORD *)(a2 + 16) <= v26)
        goto LABEL_72;
      v31 = *(unsigned int *)(*(_QWORD *)(a2 + 32) + 4 * v26);
      if (v24 <= v31)
        goto LABEL_73;
      if (v24 + ~(_DWORD)v10 == v26)
        goto LABEL_74;
      *(_OWORD *)(v23 + 16 * v28) = *(_OWORD *)(v23 + 16 * v31);
      v25 = vaddq_f32(*(float32x4_t *)(v23 + 16 * v10), *(float32x4_t *)(v23 + 16 * v28));
      *(float32x4_t *)(v23 + 16 * v10) = v25;
      if (v9 == ++v26)
        goto LABEL_19;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_72:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_73:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_74:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_75:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_76;
  }
LABEL_19:
  v32 = vmulq_n_f32(v25, 1.0 / (float)v9);
  *(float32x4_t *)(v23 + 16 * v10) = v32;
  if (a4)
  {
    if ((_DWORD)v9)
    {
      v33 = 0;
      v34 = *(_QWORD *)(a2 + 16);
      v35 = *(_QWORD *)(a2 + 32);
      v36 = 0uLL;
      while (v34 != v33)
      {
        if (v9 - 1 == v33)
          v37 = 0;
        else
          v37 = v33 + 1;
        if (v34 <= v37)
          goto LABEL_78;
        v38 = *(unsigned int *)(v35 + 4 * v33);
        if (v24 <= v38)
          goto LABEL_79;
        v39 = *(unsigned int *)(v35 + 4 * v37);
        if (v24 <= v39)
          goto LABEL_80;
        ++v33;
        v40 = vsubq_f32(*(float32x4_t *)(v23 + 16 * v38), v32);
        v41 = vsubq_f32(*(float32x4_t *)(v23 + 16 * v39), v32);
        v42 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL), vnegq_f32(v40)), v41, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL));
        v36 = vaddq_f32(v36, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), v42, 0xCuLL));
        if (v9 == v33)
          goto LABEL_32;
      }
      goto LABEL_77;
    }
    v36 = 0uLL;
LABEL_32:
    v43 = (int32x4_t)vmulq_f32(v36, v36);
    v43.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v43, 2), vadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v43.i8, 1))).u32[0];
    v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    v45 = vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44)));
    LODWORD(v77) = vmul_f32(v45, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v45, v45))).u32[0];
    v78 = v36;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4))
    {
      v46 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a4, 0);
      v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    }
    else
    {
      v47 = 0;
      v46 = 0;
    }
    v48 = vmulq_n_f32(v78, v77);
    LODWORD(v49) = v47 - v10;
    if (v47 >= v10)
      v49 = v49;
    else
      v49 = 0;
    v50 = v9 + 1;
    v51 = v10;
    do
    {
      if (!v49)
        goto LABEL_75;
      *(float32x4_t *)(v46 + 16 * v51) = v48;
      --v49;
      ++v51;
      --v50;
    }
    while (v50);
    if (a5 && a6)
    {
      v81 = v48;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5))
      {
        v52 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a5, 0);
        v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
      }
      else
      {
        v53 = 0;
        v52 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6))
      {
        v54 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a6, 0);
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a6 + 16))(a6);
      }
      else
      {
        v55 = 0;
        v54 = 0;
      }
      if (v10 < (int)v10 + (int)v9 + 1)
      {
        v56 = vmulq_f32(v81, (float32x4_t)xmmword_2260E5F20);
        v57 = vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1));
        v58 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), v57);
        v57.i32[0] = 0;
        v59 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v58, v57), 0), (int8x16_t)xmmword_226108EE0, (int8x16_t)xmmword_2260E5F40);
        if (v53 <= v10)
          v60 = v10;
        else
          v60 = v53;
        if (v55 <= v10)
          v61 = v10;
        else
          v61 = v55;
        v62 = (int8x16_t *)(v54 + 16 * v10);
        v63 = v9 + 1;
        v64 = (_OWORD *)(v52 + 16 * v10);
        v65 = v61 - v10;
        v66 = v60 - v10;
        while (v66)
        {
          *v64 = xmmword_2260E5F10;
          if (!v65)
            goto LABEL_82;
          *v62++ = v59;
          ++v64;
          --v65;
          --v66;
          if (!--v63)
            goto LABEL_60;
        }
LABEL_81:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_82:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_83;
      }
    }
  }
LABEL_60:
  if (v79)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79))
    {
      v67 = re::internal::GeomTypedAttribute<double>::operator[](v79, 0);
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 16))(v79);
      if (!(_DWORD)v9)
        goto LABEL_68;
    }
    else
    {
      v68 = 0;
      v67 = 0;
      if (!(_DWORD)v9)
      {
LABEL_68:
        if (v68 <= v10)
        {
LABEL_83:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_84;
        }
        *(_QWORD *)(v67 + 8 * v10) = 0x3F0000003F000000;
        return;
      }
    }
    v69 = 0;
    v70 = v10 + 1;
    __asm { FMOV            V9.2S, #1.0 }
    while (v68 > v70 + v69)
    {
      v76 = __sincosf_stret((float)(6.2832 / (float)v9) * (float)v69);
      *(float32x2_t *)(v67 + 8 * v70 + 8 * v69++) = vmul_f32(vadd_f32((float32x2_t)__PAIR64__(LODWORD(v76.__sinval), LODWORD(v76.__cosval)), _D9), (float32x2_t)0x3F0000003F000000);
      if ((int)v69 + 1 > v9)
        goto LABEL_68;
    }
LABEL_76:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_77:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_78:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_79:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_81;
  }
}

uint64_t re::buildCone(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  re::GeomAttribute *v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int8x16_t v23;
  re::GeomAttribute *v24;
  unsigned int v25;
  re::GeomAttribute *v26;
  unsigned int v27;
  re::GeomAttribute *v28;
  re::GeomAttribute *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  float v36;
  unint64_t v37;
  unint64_t v38;
  float v39;
  float32x4_t v40;
  __float2 v41;
  unint64_t v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x2_t v45;
  float32x2_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  unsigned int v51;
  int v52;
  __int128 v53;
  unint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  int v57;
  _OWORD *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  int v70;
  _DWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  re::internal *v75;
  re::GeomMesh *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  float32x2_t v96;
  int8x16_t v97;
  float v98;
  int v99;
  float v100;
  float v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _BYTE v106[112];
  unsigned int v107;
  uint64_t v108;
  uint64_t *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  _BYTE v114[28];
  __int16 v115;
  _BYTE v116[10];
  _BYTE v117[12];
  __int16 v118;
  int v119;
  __int16 v120;
  unint64_t v121;
  __int16 v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v102);
  v7 = *a2;
  if (v7 < 3 || (v8 = a2[1]) == 0)
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexPosition", 1, 7);
    if (*((_BYTE *)a2 + 13))
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexUV", 1, 6);
    if (*((_BYTE *)a2 + 14))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexNormal", 1, 7);
      if (*((_BYTE *)a2 + 13))
      {
        if (*((_BYTE *)a2 + 14))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=(a1, &v102);
    goto LABEL_14;
  }
  v79 = a1;
  v81 = v7 + 1;
  v9 = (uint64_t)v106;
  v102 = v7 + (v7 + 1) * v8;
  v107 = v102;
  if (v108)
  {
    v10 = v109;
    v11 = 8 * v108;
    do
    {
      v12 = *v10++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 72))(v12, v107);
      v11 -= 8;
    }
    while (v11);
    v8 = a2[1];
    v13 = *a2;
  }
  else
  {
    v13 = v7;
  }
  v15 = v13 * v8;
  re::DynamicArray<re::GeomCell4>::resize(&v103, (v13 * v8));
  v110 = v15;
  if (v111)
  {
    v16 = v112;
    v17 = 8 * v111;
    do
    {
      v18 = *v16++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 72))(v18, v110);
      v17 -= 8;
    }
    while (v17);
  }
  v19 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexPosition", 1, 7);
  v20 = (uint64_t)v19;
  if (*((_BYTE *)a2 + 13))
    v21 = *((_BYTE *)a2 + 14) == 0;
  else
    v21 = 1;
  v22 = !v21;
  v99 = v22;
  if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v19 + 16))(v19))
  {
    v85 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v20, 0);
    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  }
  else
  {
    v86 = 0;
    v85 = 0;
  }
  if (*((_BYTE *)a2 + 14))
  {
    v24 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexNormal", 1, 7);
    v25 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v24 + 16))(v24);
    if (v25)
    {
      v91 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v24, 0);
      v25 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v24 + 16))(v24);
    }
    else
    {
      v91 = 0;
    }
  }
  else
  {
    v91 = 0;
    v25 = -1;
  }
  v84 = v25;
  if (*((_BYTE *)a2 + 13))
  {
    v26 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexUV", 1, 6);
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v26 + 16))(v26))
    {
      v90 = re::internal::GeomTypedAttribute<double>::operator[]((uint64_t)v26, 0);
      v27 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v26 + 16))(v26);
    }
    else
    {
      v90 = 0;
      v27 = 0;
    }
    v25 = v84;
  }
  else
  {
    v90 = 0;
    v27 = -1;
  }
  if (v99)
  {
    v28 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexTangent", 1, 7);
    v29 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v106, "vertexBitangent", 1, 7);
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v28 + 16))(v28))
    {
      v88 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v28, 0);
      v30 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v28 + 16))(v28);
    }
    else
    {
      v30 = 0;
      v88 = 0;
    }
    if ((*(unsigned int (**)(re::GeomAttribute *))(*(_QWORD *)v29 + 16))(v29))
    {
      v87 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v29, 0);
      v83 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v29 + 16))(v29);
    }
    else
    {
      v83 = 0;
      v87 = 0;
    }
    v25 = v84;
  }
  else
  {
    v87 = 0;
    v88 = 0;
    v83 = -1;
    v30 = -1;
  }
  v31 = a2[1];
  v82 = v7;
  v77 = v27;
  v78 = v30;
  v80 = v31;
  if (a2[1])
  {
    v32 = 0;
    v33 = 0;
    v92 = v83;
    v93 = v30;
    v34 = v7 + 1;
    v94 = v27;
    v95 = v25;
    do
    {
      v35 = 0;
      v89 = v32;
      v36 = (float)v32 / (float)(unsigned __int16)v31;
      *(float *)v23.i32 = v36 * 0.5;
      *(float *)&v23.i32[1] = v36;
      v97 = v23;
      v98 = v36;
      v37 = v33;
      v38 = v87 + 16 * v33;
      v2 = v88 + 16 * v33;
      v9 = v90 + 8 * v33;
      *(float *)v23.i32 = 1.0 - v36;
      v96 = (float32x2_t)COERCE_UNSIGNED_INT(1.0 - v36);
      if (v86 >= v33)
        v3 = v86 - v33;
      else
        v3 = 0;
      v7 = v91 + 16 * v33;
      v4 = v85 + 16 * v33;
      do
      {
        v23.i16[0] = *a2;
        v39 = *((float *)a2 + 2);
        v100 = (float)v35 / (float)v23.u32[0];
        v101 = *((float *)a2 + 1);
        v41 = __sincosf_stret(v100 * 6.2832);
        if ((_DWORD)v3 == (_DWORD)v35)
        {
          *(_QWORD *)v117 = 0;
          v127 = 0u;
          v128 = 0u;
          v125 = 0u;
          v126 = 0u;
          v124 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v114 = 136315906;
          *(_QWORD *)&v114[4] = "operator[]";
          *(_WORD *)&v114[12] = 1024;
          *(_DWORD *)&v114[14] = 609;
          *(_WORD *)&v114[18] = 2048;
          *(_QWORD *)&v114[20] = (v37 + v35);
          v115 = 2048;
          *(_QWORD *)v116 = v86;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_114;
        }
        v42 = v37 + v35;
        v43.i32[1] = 0;
        v43.i32[3] = 0;
        v43.f32[0] = -v41.__sinval;
        v43.f32[2] = -v41.__cosval;
        v40.f32[0] = (float)(0.0 - v39) * v41.__cosval;
        v40.f32[1] = v101;
        v40.f32[2] = -(float)(v41.__sinval * (float)(0.0 - v39));
        v44 = (int32x4_t)vmulq_f32(v43, v43);
        v44.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v44, 2), vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1))).u32[0];
        v45 = vrsqrte_f32((float32x2_t)v44.u32[0]);
        v46 = vmul_f32(v45, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v45, v45)));
        v44.i32[0] = vmul_f32(v46, vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(v46, v46))).u32[0];
        v47 = (int32x4_t)vmulq_f32(v40, v40);
        v47.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), vadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1))).u32[0];
        v48 = vmulq_n_f32(v43, *(float *)v44.i32);
        *(float32x2_t *)v43.f32 = vrsqrte_f32((float32x2_t)v47.u32[0]);
        *(float32x2_t *)v43.f32 = vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32)));
        v49 = vmulq_n_f32(v40, vmul_f32(*(float32x2_t *)v43.f32, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v43.f32))).f32[0]);
        v50 = v39 + (float)(v98 * (float)(0.0 - v39));
        *(float *)v23.i32 = v41.__cosval * v50;
        v43.f32[0] = (float)(v98 * v101) + v101 * -0.5;
        v23.i32[1] = v43.i32[0];
        *(float *)&v23.i32[2] = -(float)(v50 * v41.__sinval);
        *(int8x16_t *)(v4 + 16 * v35) = v23;
        if (*((_BYTE *)a2 + 14))
        {
          if (v42 >= v95)
            goto LABEL_115;
          v23 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL), vnegq_f32(v48)), v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL));
          *(int8x16_t *)(v7 + 16 * v35) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), v23, 0xCuLL);
        }
        if (*((_BYTE *)a2 + 13))
        {
          if (v42 >= v94)
            goto LABEL_116;
          v23 = v97;
          *(float32x2_t *)(v9 + 8 * v35) = vadd_f32(*(float32x2_t *)v97.i8, vmul_n_f32(v96, v100));
        }
        if (v99)
        {
          if (v42 >= v93)
            goto LABEL_117;
          *(float32x4_t *)(v2 + 16 * v35) = v48;
          if (v42 >= v83)
            goto LABEL_118;
          *(float32x4_t *)(v38 + 16 * v35) = v49;
        }
        ++v35;
      }
      while ((_DWORD)v34 != (_DWORD)v35);
      v33 = v37 + v35;
      v32 = v89 + 1;
      v31 = a2[1];
    }
    while (v89 + 1 < v31);
  }
  v51 = v81 * v80;
  v52 = *a2;
  if (*a2)
  {
    LODWORD(v53) = 0;
    *((_QWORD *)&v53 + 1) = 0;
    v38 = v83;
    *((float *)&v53 + 1) = *((float *)a2 + 1) * 0.5;
    v54 = v51 + v52;
    v34 = v78;
    v7 = v84;
    v9 = v77;
    v2 = v86;
    if (v86 <= (unint64_t)v51)
      v3 = v81 * v80;
    else
      v3 = v86;
    v55 = (_OWORD *)(v87 + 16 * v51);
    v56 = (_OWORD *)(v88 + 16 * v51);
    v37 = v81 * v80;
    v58 = (_OWORD *)(v91 + 16 * v51);
    do
    {
      if (v3 == v37)
        goto LABEL_119;
      *(_OWORD *)(v85 + 16 * v37) = v53;
      if (*((_BYTE *)a2 + 13))
      {
        if (v37 >= v77)
          goto LABEL_122;
        *(_QWORD *)(v90 + 8 * v37) = 0x3F8000003F000000;
      }
      v57 = -(int)v82 - 1;
      v59 = v57 + v37;
      if (*((_BYTE *)a2 + 14))
      {
        if (v84 <= v59)
          goto LABEL_123;
        if (v37 >= v84)
          goto LABEL_124;
        *v58 = *(_OWORD *)(v91 + 16 * v59);
      }
      if (v99)
      {
        if (v78 <= v59)
          goto LABEL_125;
        if (v37 >= v78)
          goto LABEL_126;
        v4 = (v57 + v37);
        *v56 = *(_OWORD *)(v88 + 16 * v4);
        if (v83 <= v59)
          goto LABEL_127;
        if (v37 >= v83)
          goto LABEL_128;
        *v55 = *(_OWORD *)(v87 + 16 * v4);
      }
      ++v37;
      ++v55;
      ++v56;
      ++v58;
    }
    while (v37 < v54);
    v31 = a2[1];
    v52 = *a2;
  }
  v60 = v31 - 1;
  v37 = v82;
  if (v31 == 1)
  {
    v65 = 0;
    if (!v52)
      goto LABEL_104;
    goto LABEL_101;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v34 = v104;
  v64 = v82;
  do
  {
    v65 = v61;
    if (v52)
    {
      v66 = 0;
      v67 = v105;
      v65 = v61 + v52;
      while (1)
      {
        v38 = v61 + v66;
        if (v34 <= v38)
          break;
        v68 = (_DWORD *)(v67 + 16 * v38);
        *v68 = v62 + v66;
        v68[1] = v62 + v66 + 1;
        v68[2] = v64 + v66 + 2;
        v68[3] = v64 + v66++ + 1;
        if (v52 == v66)
          goto LABEL_97;
      }
LABEL_114:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      v35 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 789;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v38;
      v115 = 2048;
      *(_QWORD *)v116 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_115:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v37 + v35;
      v115 = 2048;
      *(_QWORD *)v116 = v95;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_116:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v37 + v35;
      v115 = 2048;
      *(_QWORD *)v116 = v94;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_117:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v37 + v35;
      v115 = 2048;
      *(_QWORD *)v116 = v93;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_118:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v37 + v35;
      v115 = 2048;
      *(_QWORD *)v116 = v92;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_119:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v3;
      v115 = 2048;
      *(_QWORD *)v116 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_120:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 789;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v38;
      v115 = 2048;
      *(_QWORD *)v116 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_121:
      v113 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v117 = 136315906;
      *(_QWORD *)&v117[4] = "operator[]";
      v118 = 1024;
      v119 = 789;
      v120 = 2048;
      v121 = v34;
      v122 = 2048;
      v123 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_122:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v37;
      v115 = 2048;
      *(_QWORD *)v116 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_123:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_DWORD *)v114 = 136315906;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = (~(_DWORD)v82 + v37);
      v115 = 2048;
      *(_QWORD *)v116 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_124:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v37;
      v115 = 2048;
      *(_QWORD *)v116 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_125:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_DWORD *)v114 = 136315906;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = (~(_DWORD)v82 + v37);
      v115 = 2048;
      *(_QWORD *)v116 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_126:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v37;
      v115 = 2048;
      *(_QWORD *)v116 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_127:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v4;
      v115 = 2048;
      *(_QWORD *)v116 = v38;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_128:
      *(_QWORD *)v117 = 0;
      v127 = 0u;
      v128 = 0u;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v114 = 136315906;
      *(_QWORD *)&v114[4] = "operator[]";
      *(_WORD *)&v114[12] = 1024;
      *(_DWORD *)&v114[14] = 609;
      *(_WORD *)&v114[18] = 2048;
      *(_QWORD *)&v114[20] = v37;
      v115 = 2048;
      *(_QWORD *)v116 = v38;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_97:
    ++v63;
    v64 += v81;
    v62 += v81;
    v61 += v52;
  }
  while (v63 != v60);
  if (v52)
  {
LABEL_101:
    v34 = v104;
    v69 = v105;
    v70 = v51 - v82;
    do
    {
      v38 = v65;
      if (v34 <= v65)
        goto LABEL_120;
      v71 = (_DWORD *)(v69 + 16 * v65);
      *v71 = v70 - 1;
      v71[1] = v70;
      v71[2] = v51;
      v71[3] = -1;
      ++v65;
      ++v51;
      ++v70;
    }
    while (--v52);
  }
LABEL_104:
  if (*((_BYTE *)a2 + 12))
  {
    v72 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexUV");
    v38 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexNormal");
    v7 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexTangent");
    v9 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v106, "vertexBitangent");
    *(_QWORD *)&v116[2] = 0;
    memset(v114, 0, sizeof(v114));
    re::DynamicArray<float>::resize((uint64_t)v114, v82);
    v73 = 0;
    v34 = *(_QWORD *)&v114[16];
    v74 = *(_QWORD *)&v116[2];
    do
    {
      if (v34 == v73)
        goto LABEL_121;
      *(_DWORD *)(v74 + 4 * v73++) = v37;
      v37 = (v37 - 1);
    }
    while (v82 != v73);
    re::internal::capBoundary(&v102, (uint64_t)v114, v72, v38, v7, v9);
    if (*(_QWORD *)v114 && *(_QWORD *)&v116[2])
      (*(void (**)(void))(**(_QWORD **)v114 + 40))();
  }
  v75 = (re::internal *)re::GeomMesh::operator=(v79, &v102);
  if (*((_BYTE *)a2 + 15))
    re::internal::mergeVertexPositions(v75, v76);
LABEL_14:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v106);
  result = v103;
  if (v103)
  {
    if (v105)
      return (*(uint64_t (**)(void))(*(_QWORD *)v103 + 40))();
  }
  return result;
}

void re::buildCone(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 *v2;
  re::GeomAttribute *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  re::GeomAttribute *v8;
  re::GeomAttribute *v9;
  re::GeomAttribute *v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  int v14;
  re::GeomAttribute *v15;
  _OWORD v16[46];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[12];
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  unsigned __int16 *v29;
  _DWORD v30[12];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 15))
  {
    v16[0] = *(_OWORD *)a2;
    HIBYTE(v16[0]) = 0;
    re::buildCone(a1, v16);
    return;
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)v16, 0);
  re::buildCone((uint64_t)v16, v2);
  re::DynamicArray<re::GeomMesh>::clear((re::GeomMesh *)a1, v4);
  if (*((_BYTE *)v2 + 12))
    v5 = 2;
  else
    v5 = 1;
  re::DynamicArray<re::GeomMesh>::resize(a1, v5);
  v6 = *v2;
  if (v6 >= 3)
  {
    v7 = v2[1];
    if (v2[1])
    {
      v15 = 0;
      v12[1] = 0;
      v13 = 0;
      v12[0] = 0;
      v14 = 0;
      re::internal::fillFaces((uint64_t)v12, 0, v7 * (unint64_t)v6);
      re::internal::makeSubmesh((unint64_t)&v18, (unint64_t)v16, v13, (uint64_t)v15);
      if (*(_QWORD *)(a1 + 16))
      {
        re::GeomMesh::operator=(*(uint64_t **)(a1 + 32), (uint64_t *)&v18);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)&v18, v8);
        if (!*((_BYTE *)v2 + 12))
          goto LABEL_13;
        if (*(_QWORD *)(a1 + 16))
        {
          re::internal::fillFaces((uint64_t)v12, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40), *v2);
          re::internal::makeSubmesh((unint64_t)&v18, (unint64_t)v16, v13, (uint64_t)v15);
          v2 = *(unsigned __int16 **)(a1 + 16);
          if ((unint64_t)v2 > 1)
          {
            re::GeomMesh::operator=((uint64_t *)(*(_QWORD *)(a1 + 32) + 736), (uint64_t *)&v18);
            re::GeomMesh::~GeomMesh((re::GeomMesh *)&v18, v10);
LABEL_13:
            if (v12[0])
            {
              v9 = v15;
              if (v15)
                (*(void (**)(void))(*(_QWORD *)v12[0] + 40))();
            }
            goto LABEL_21;
          }
LABEL_28:
          v17 = 0;
          v31 = 0u;
          v32 = 0u;
          memset(v30, 0, sizeof(v30));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v23 = 136315906;
          *(_QWORD *)&v23[4] = "operator[]";
          v24 = 1024;
          v25 = 789;
          v26 = 2048;
          v27 = 1;
          v28 = 2048;
          v29 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_27:
        *(_QWORD *)v23 = 0;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v18 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v30[0] = 136315906;
        *(_QWORD *)&v30[1] = "operator[]";
        LOWORD(v30[3]) = 1024;
        *(_DWORD *)((char *)&v30[3] + 2) = 789;
        HIWORD(v30[4]) = 2048;
        *(_QWORD *)&v30[5] = 0;
        LOWORD(v30[7]) = 2048;
        *(_QWORD *)((char *)&v30[7] + 2) = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_28;
      }
LABEL_26:
      v17 = 0;
      v31 = 0u;
      v32 = 0u;
      memset(v30, 0, sizeof(v30));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v23 = 136315906;
      *(_QWORD *)&v23[4] = "operator[]";
      v24 = 1024;
      v25 = 789;
      v26 = 2048;
      v27 = 0;
      v28 = 2048;
      v29 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_27;
    }
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    v12[0] = 0;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v30[0] = 136315906;
    *(_QWORD *)&v30[1] = "operator[]";
    LOWORD(v30[3]) = 1024;
    *(_DWORD *)((char *)&v30[3] + 2) = 789;
    HIWORD(v30[4]) = 2048;
    *(_QWORD *)&v30[5] = 0;
    LOWORD(v30[7]) = 2048;
    *(_QWORD *)((char *)&v30[7] + 2) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  re::GeomMesh::operator=(*(uint64_t **)(a1 + 32), (uint64_t *)v16);
  if (*((_BYTE *)v2 + 12))
  {
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
    {
      if (v11 != 1)
      {
        re::GeomMesh::copy(*(re::GeomMesh **)(a1 + 32), (re::GeomMesh *)(*(_QWORD *)(a1 + 32) + 736));
        goto LABEL_21;
      }
LABEL_25:
      v12[0] = 0;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v18 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v30[0] = 136315906;
      *(_QWORD *)&v30[1] = "operator[]";
      LOWORD(v30[3]) = 1024;
      *(_DWORD *)((char *)&v30[3] + 2) = 789;
      HIWORD(v30[4]) = 2048;
      *(_QWORD *)&v30[5] = 1;
      LOWORD(v30[7]) = 2048;
      *(_QWORD *)((char *)&v30[7] + 2) = 1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_26;
    }
LABEL_24:
    v12[0] = 0;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v30[0] = 136315906;
    *(_QWORD *)&v30[1] = "operator[]";
    LOWORD(v30[3]) = 1024;
    *(_DWORD *)((char *)&v30[3] + 2) = 789;
    HIWORD(v30[4]) = 2048;
    *(_QWORD *)&v30[5] = 0;
    LOWORD(v30[7]) = 2048;
    *(_QWORD *)((char *)&v30[7] + 2) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_25;
  }
LABEL_21:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v16, v9);
}

uint64_t re::buildCylinder(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  char v8;
  re::GeomMesh *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  unsigned __int8 v32;
  char v33;
  char v34;
  char v35;
  __int16 v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  re::GeomMesh *v41;
  _BYTE v42[664];
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  _QWORD *v46;
  int v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (*a2 >= 3u && a2[1])
  {
    v4 = re::globalAllocators((re *)a1)[2];
    v44[0] = &off_24ED72D08;
    v44[1] = a2;
    v45 = v4;
    v46 = v44;
    LODWORD(v4) = *a2;
    v5 = a2[1];
    v32 = 0;
    v36 = 0;
    v37 = v4;
    v38 = v5;
    v33 = *((_BYTE *)a2 + 18);
    v6 = *((unsigned __int8 *)a2 + 19);
    v34 = *((_BYTE *)a2 + 19);
    if (v33)
      v7 = v6 == 0;
    else
      v7 = 1;
    v8 = !v7;
    v35 = v8;
    re::buildParametricSurface((_QWORD *)a1, (re::GeomAttribute *)v44, &v32);
    if (*((unsigned __int8 *)a2 + 16) | *((unsigned __int8 *)a2 + 17))
    {
      v10 = *a2;
      re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v39, (const re::internal::GeomBaseMesh *)(a1 + 16));
      if (*((_BYTE *)a2 + 17))
      {
        v11 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexUV");
        v12 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexNormal");
        v13 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexTangent");
        v14 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexBitangent");
        v31 = 0;
        v28 = 0;
        v29 = 0;
        v27 = 0;
        v30 = 0;
        re::DynamicArray<float>::resize((uint64_t)&v27, v10);
        if ((_DWORD)v10)
        {
          v15 = 0;
          v16 = v29;
          v17 = v31;
          while (v16 + v15)
          {
            *v17++ = v10 + v15--;
            if (!(v10 + v15))
              goto LABEL_15;
          }
          v43 = 0;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v55 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v47 = 136315906;
          v48 = "operator[]";
          v49 = 1024;
          v50 = 789;
          v51 = 2048;
          v52 = v16;
          v53 = 2048;
          v54 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_45:
          v43 = 0;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v55 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v47 = 136315906;
          v48 = "operator[]";
          v49 = 1024;
          v50 = 789;
          v51 = 2048;
          v52 = v16;
          v53 = 2048;
          v54 = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_15:
        re::internal::capBoundary(&v39, (uint64_t)&v27, v11, v12, v13, v14);
        if (v27 && v31)
          (*(void (**)(void))(*(_QWORD *)v27 + 40))();
      }
      if (*((_BYTE *)a2 + 16))
      {
        v18 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexUV");
        v19 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexNormal");
        v20 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexTangent");
        v21 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v42, "vertexBitangent");
        v22 = a2[1];
        v31 = 0;
        v28 = 0;
        v29 = 0;
        v27 = 0;
        v30 = 0;
        re::DynamicArray<float>::resize((uint64_t)&v27, v10);
        if ((_DWORD)v10)
        {
          v23 = 0;
          v24 = (v10 + 1) * v22;
          v16 = v29;
          v25 = v31;
          while (v16 != v23)
          {
            v25[v23] = v24 + v23;
            if (v10 == ++v23)
              goto LABEL_23;
          }
          goto LABEL_45;
        }
LABEL_23:
        re::internal::capBoundary(&v39, (uint64_t)&v27, v18, v19, v20, v21);
        if (v27 && v31)
          (*(void (**)(void))(*(_QWORD *)v27 + 40))();
      }
      re::GeomMesh::operator=(a1, &v39);
      re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v42);
      if (v40)
      {
        v9 = v41;
        if (v41)
          (*(void (**)(void))(*(_QWORD *)v40 + 40))();
      }
    }
    if (*((_BYTE *)a2 + 20))
      re::internal::mergeVertexPositions((re::internal *)a1, v9);
    result = (uint64_t)v46;
    if (v46)
    {
      result = (*(uint64_t (**)(_QWORD *))*v46)(v46);
      if (v46 != v44)
      {
        result = v45;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      }
    }
  }
  else
  {
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v39);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v42, "vertexPosition", 1, 7);
    if (*((_BYTE *)a2 + 18))
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v42, "vertexUV", 1, 6);
    if (*((_BYTE *)a2 + 19))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v42, "vertexNormal", 1, 7);
      if (*((_BYTE *)a2 + 18))
      {
        if (*((_BYTE *)a2 + 19))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v42, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v42, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=(a1, &v39);
    re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v42);
    result = v40;
    if (v40 && v41)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

void re::buildCylinder(uint64_t a1, unsigned __int16 *a2)
{
  re::GeomAttribute *v4;
  unsigned int v5;
  unsigned int v6;
  re::GeomAttribute *v7;
  re::GeomAttribute *v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  re::GeomAttribute *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  re::GeomAttribute *v19;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  int v23;
  re::GeomAttribute *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[12];
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  unint64_t v39;
  _DWORD v40[12];
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 20))
  {
    v26 = *((_QWORD *)a2 + 2);
    v25 = *(_OWORD *)a2;
    BYTE4(v26) = 0;
    re::buildCylinder(a1, &v25);
    return;
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)&v25, 0);
  re::buildCylinder((uint64_t)&v25, a2);
  re::DynamicArray<re::GeomMesh>::clear((re::GeomMesh *)a1, v4);
  re::DynamicArray<re::GeomMesh>::resize(a1, *((unsigned __int8 *)a2 + 16) + (unint64_t)*((unsigned __int8 *)a2 + 17) + 1);
  v5 = a2[1];
  if (a2[1])
  {
    v6 = *a2;
    if (v6 >= 3)
    {
      v24 = 0;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v23 = 0;
      re::internal::fillFaces((uint64_t)v21, 0, v6 * (unint64_t)v5);
      re::internal::makeSubmesh((unint64_t)&v28, (unint64_t)&v25, v22, (uint64_t)v24);
      if (*(_QWORD *)(a1 + 16))
      {
        re::GeomMesh::operator=(*(uint64_t **)(a1 + 32), (uint64_t *)&v28);
        re::GeomMesh::~GeomMesh((re::GeomMesh *)&v28, v7);
        v9 = *((unsigned __int8 *)a2 + 16);
        if (!*((_BYTE *)a2 + 16))
        {
          v10 = 0;
LABEL_16:
          if (!*((_BYTE *)a2 + 17))
            goto LABEL_20;
          v15 = v9;
          v16 = *(_QWORD *)(a1 + 16);
          if (v16 > v9)
          {
            v17 = v10 + *(_DWORD *)(*(_QWORD *)(a1 + 32) + 736 * v9 + 40);
            v14 = v9 + 1;
            re::internal::fillFaces((uint64_t)v21, v17, *a2);
            re::internal::makeSubmesh((unint64_t)&v28, (unint64_t)&v25, v22, (uint64_t)v24);
            v18 = *(_QWORD *)(a1 + 16);
            if (v18 > v14)
            {
              re::GeomMesh::operator=((uint64_t *)(*(_QWORD *)(a1 + 32) + 736 * v14), (uint64_t *)&v28);
              re::GeomMesh::~GeomMesh((re::GeomMesh *)&v28, v19);
LABEL_20:
              if (v21[0])
              {
                v8 = v24;
                if (v24)
                  (*(void (**)(void))(*(_QWORD *)v21[0] + 40))();
              }
              goto LABEL_28;
            }
            goto LABEL_38;
          }
          goto LABEL_36;
        }
        if (*(_QWORD *)(a1 + 16))
        {
          v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 40);
          re::internal::fillFaces((uint64_t)v21, v10, *a2);
          re::internal::makeSubmesh((unint64_t)&v28, (unint64_t)&v25, v22, (uint64_t)v24);
          v11 = *(_QWORD *)(a1 + 16);
          if (v11 > 1)
          {
            re::GeomMesh::operator=((uint64_t *)(*(_QWORD *)(a1 + 32) + 736), (uint64_t *)&v28);
            re::GeomMesh::~GeomMesh((re::GeomMesh *)&v28, v12);
            v9 = 1;
            goto LABEL_16;
          }
          goto LABEL_33;
        }
LABEL_32:
        *(_QWORD *)v33 = 0;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v40[0] = 136315906;
        *(_QWORD *)&v40[1] = "operator[]";
        LOWORD(v40[3]) = 1024;
        *(_DWORD *)((char *)&v40[3] + 2) = 789;
        HIWORD(v40[4]) = 2048;
        *(_QWORD *)&v40[5] = 0;
        LOWORD(v40[7]) = 2048;
        *(_QWORD *)((char *)&v40[7] + 2) = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        v27 = 0;
        v41 = 0u;
        v42 = 0u;
        memset(v40, 0, sizeof(v40));
        v20 = v11;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v33 = 136315906;
        *(_QWORD *)&v33[4] = "operator[]";
        v34 = 1024;
        v35 = 789;
        v36 = 2048;
        v37 = 1;
        v38 = 2048;
        v39 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_34;
      }
      v27 = 0;
      v41 = 0u;
      v42 = 0u;
      memset(v40, 0, sizeof(v40));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v33 = 136315906;
      *(_QWORD *)&v33[4] = "operator[]";
      v34 = 1024;
      v35 = 789;
      v36 = 2048;
      v37 = 0;
      v38 = 2048;
      v39 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_31:
      v21[0] = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v40[0] = 136315906;
      *(_QWORD *)&v40[1] = "operator[]";
      LOWORD(v40[3]) = 1024;
      *(_DWORD *)((char *)&v40[3] + 2) = 789;
      HIWORD(v40[4]) = 2048;
      *(_QWORD *)&v40[5] = 0;
      LOWORD(v40[7]) = 2048;
      *(_QWORD *)((char *)&v40[7] + 2) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_32;
    }
  }
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_31;
  re::GeomMesh::operator=(*(uint64_t **)(a1 + 32), (uint64_t *)&v25);
  if (*((_BYTE *)a2 + 16))
  {
    v13 = *(_QWORD *)(a1 + 16);
    if (!v13)
    {
LABEL_34:
      v21[0] = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v40[0] = 136315906;
      *(_QWORD *)&v40[1] = "operator[]";
      LOWORD(v40[3]) = 1024;
      *(_DWORD *)((char *)&v40[3] + 2) = 789;
      HIWORD(v40[4]) = 2048;
      *(_QWORD *)&v40[5] = 0;
      LOWORD(v40[7]) = 2048;
      *(_QWORD *)((char *)&v40[7] + 2) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_35;
    }
    if (v13 == 1)
    {
LABEL_35:
      v21[0] = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v40[0] = 136315906;
      *(_QWORD *)&v40[1] = "operator[]";
      LOWORD(v40[3]) = 1024;
      *(_DWORD *)((char *)&v40[3] + 2) = 789;
      HIWORD(v40[4]) = 2048;
      *(_QWORD *)&v40[5] = 1;
      LOWORD(v40[7]) = 2048;
      *(_QWORD *)((char *)&v40[7] + 2) = 1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_36:
      *(_QWORD *)v33 = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
      v18 = v15;
      v14 = v16;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v40[0] = 136315906;
      *(_QWORD *)&v40[1] = "operator[]";
      LOWORD(v40[3]) = 1024;
      *(_DWORD *)((char *)&v40[3] + 2) = 789;
      HIWORD(v40[4]) = 2048;
      *(_QWORD *)&v40[5] = v18;
      LOWORD(v40[7]) = 2048;
      *(_QWORD *)((char *)&v40[7] + 2) = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_37;
    }
    re::GeomMesh::copy(*(re::GeomMesh **)(a1 + 32), (re::GeomMesh *)(*(_QWORD *)(a1 + 32) + 736));
    v14 = 2;
  }
  else
  {
    v14 = 1;
  }
  if (*((_BYTE *)a2 + 17))
  {
    v18 = *(_QWORD *)(a1 + 16);
    if (!v18)
    {
LABEL_37:
      v21[0] = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v40[0] = 136315906;
      *(_QWORD *)&v40[1] = "operator[]";
      LOWORD(v40[3]) = 1024;
      *(_DWORD *)((char *)&v40[3] + 2) = 789;
      HIWORD(v40[4]) = 2048;
      *(_QWORD *)&v40[5] = 0;
      LOWORD(v40[7]) = 2048;
      *(_QWORD *)((char *)&v40[7] + 2) = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      v27 = 0;
      v41 = 0u;
      v42 = 0u;
      memset(v40, 0, sizeof(v40));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v33 = 136315906;
      *(_QWORD *)&v33[4] = "operator[]";
      v34 = 1024;
      v35 = 789;
      v36 = 2048;
      v37 = v14;
      v38 = 2048;
      v39 = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      v21[0] = 0;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v28 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v40[0] = 136315906;
      *(_QWORD *)&v40[1] = "operator[]";
      LOWORD(v40[3]) = 1024;
      *(_DWORD *)((char *)&v40[3] + 2) = 789;
      HIWORD(v40[4]) = 2048;
      *(_QWORD *)&v40[5] = v14;
      LOWORD(v40[7]) = 2048;
      *(_QWORD *)((char *)&v40[7] + 2) = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v18 <= v14)
      goto LABEL_39;
    re::GeomMesh::copy(*(re::GeomMesh **)(a1 + 32), (re::GeomMesh *)(*(_QWORD *)(a1 + 32) + 736 * v14));
  }
LABEL_28:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)&v25, v8);
}

uint64_t re::buildSphere(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  re::GeomAttribute *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  re::GeomAttribute *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  float64x2_t v33;
  __double2 v34;
  unint64_t v35;
  float32x4_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int8x16_t v44;
  __double2 v45;
  float sinval;
  uint64_t v47;
  float32x4_t *v48;
  float64x2_t v49;
  float32x4_t v50;
  __double2 v51;
  float32_t v52;
  float32x4_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  float v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  float v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x2_t v74;
  float32x2_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  _DWORD *v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  _DWORD *v91;
  re::internal *v92;
  re::GeomMesh *v93;
  uint64_t result;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unint64_t v107;
  unsigned int v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t *v112;
  unint64_t v113;
  uint64_t v114;
  float v115;
  unsigned int v116;
  _QWORD v117[4];
  uint64_t v118;
  _BYTE v119[112];
  unsigned int v120;
  uint64_t v121;
  uint64_t *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  int v127;
  const char *v128;
  __int16 v129;
  int v130;
  __int16 v131;
  unint64_t v132;
  __int16 v133;
  unint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v116);
  v4 = *a2;
  if (*((_BYTE *)a2 + 9))
    v5 = *((_BYTE *)a2 + 8) == 0;
  else
    v5 = 1;
  v6 = !v5;
  if (v4 <= 2)
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexPosition", 1, 7);
    if (*((_BYTE *)a2 + 8))
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexUV", 1, 6);
    if (*((_BYTE *)a2 + 9))
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexNormal", 1, 7);
    if (v6)
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexTangent", 1, 7);
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexBitangent", 1, 7);
    }
    re::GeomMesh::operator=(a1, &v116);
    goto LABEL_112;
  }
  v104 = v4 + 1;
  v7 = (v4 - 1) * (v4 + 1);
  v116 = v7 + 2 * v4;
  v120 = v116;
  v8 = v4;
  if (v121)
  {
    v9 = v122;
    v10 = 8 * v121;
    do
    {
      v11 = *v9++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 72))(v11, v120);
      v10 -= 8;
    }
    while (v10);
    v8 = *a2;
  }
  v12 = v8 * v8;
  re::DynamicArray<re::GeomCell4>::resize(v117, v8 * v8);
  v123 = v12;
  if (v124)
  {
    v13 = v125;
    v14 = 8 * v124;
    do
    {
      v15 = *v13++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 72))(v15, v123);
      v14 -= 8;
    }
    while (v14);
  }
  v16 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexPosition", 1, 7);
  v17 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v16 + 16))(v16);
  if (v17)
  {
    v18 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v16, 0);
    v17 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v16 + 16))(v16);
  }
  else
  {
    v18 = 0;
  }
  v106 = v4;
  v103 = (v4 - 1) * (v4 + 1);
  v19 = v7 + v4;
  v20 = v17;
  v102 = a1;
  v105 = v4 - 1;
  v109 = v7 + v4;
  if (v6)
  {
    v21 = (uint64_t)re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexTangent", 1, 7);
    v22 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexBitangent", 1, 7);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
    {
      v23 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v21, 0);
      LODWORD(v21) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    }
    else
    {
      LODWORD(v21) = 0;
      v23 = 0;
    }
    v26 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v22 + 16))(v22);
    v19 = v109;
    if (v26)
    {
      v24 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)v22, 0);
      v26 = (*(uint64_t (**)(re::GeomAttribute *))(*(_QWORD *)v22 + 16))(v22);
    }
    else
    {
      v24 = 0;
    }
    v25 = v23;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v26 = -1;
    LODWORD(v21) = -1;
  }
  v27 = 0;
  v21 = v21;
  if (v20 >= v19)
    v28 = v20 - v19;
  else
    v28 = 0;
  v110 = v24;
  v111 = v25;
  v113 = v26;
  v114 = v24 + 16 * v19;
  v29 = v25 + 16 * v19;
  v30 = xmmword_2260E5F50;
  v31 = xmmword_2260E5F20;
  v32 = v18 + 16 * v19;
  do
  {
    if (v20 == v27)
      goto LABEL_121;
    *(_OWORD *)(v18 + 16 * v27) = v30;
    if (v28 == v27)
      goto LABEL_122;
    *(_OWORD *)(v32 + 16 * v27) = v31;
    if (v6)
    {
      LOWORD(v31) = *a2;
      v34 = __sincos_stret((double)v27 * 6.28318531 / (double)(unint64_t)v31);
      v33.f64[0] = v34.__sinval;
      v35 = v21;
      if (v27 >= v21)
        goto LABEL_125;
      v33.f64[1] = v34.__cosval;
      *(float32x2_t *)&v33.f64[0] = vcvt_f32_f64(v33);
      v36 = vnegq_f32((float32x4_t)vzip1q_s32((int32x4_t)v33, (int32x4_t)v33));
      v36.i32[1] = 0;
      *(float32x4_t *)(v111 + 16 * v27) = v36;
      if (v109 + v27 >= v21)
        goto LABEL_126;
      *(float32x4_t *)(v29 + 16 * v27) = v36;
      v37 = v113;
      if (v27 >= v113)
        goto LABEL_127;
      v38 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v111 + 16 * v27), *(int32x4_t *)(v111 + 16 * v27)), *(int8x16_t *)(v111 + 16 * v27), 0xCuLL), vnegq_f32(*(float32x4_t *)(v18 + 16 * v27))), *(float32x4_t *)(v111 + 16 * v27), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v18 + 16 * v27), *(int32x4_t *)(v18 + 16 * v27)), *(int8x16_t *)(v18 + 16 * v27), 0xCuLL));
      *(int8x16_t *)(v110 + 16 * v27) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), v38, 0xCuLL);
      if (v109 + v27 >= v113)
        goto LABEL_128;
      v39 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v29 + 16 * v27), *(int32x4_t *)(v29 + 16 * v27)), *(int8x16_t *)(v29 + 16 * v27), 0xCuLL), vnegq_f32(*(float32x4_t *)(v32 + 16 * v27))), *(float32x4_t *)(v29 + 16 * v27), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v32 + 16 * v27), *(int32x4_t *)(v32 + 16 * v27)), *(int8x16_t *)(v32 + 16 * v27), 0xCuLL));
      *(int8x16_t *)(v114 + 16 * v27) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), v39, 0xCuLL);
      v30 = xmmword_2260E5F50;
      v31 = xmmword_2260E5F20;
    }
    ++v27;
  }
  while (v106 != v27);
  v112 = (float32x4_t *)v18;
  v40 = *a2;
  v41 = v111;
  if (v40 < 2)
    goto LABEL_68;
  v42 = 1;
  v43 = v106;
  v107 = v20;
  do
  {
    v27 = v43;
    v108 = v42;
    v45 = __sincos_stret((double)v42 * 3.14159265 / (double)(unsigned __int16)v40 + -1.57079633);
    *(double *)v44.i64 = v45.__cosval;
    v28 = 0;
    v32 = v110 + 16 * v43;
    sinval = v45.__sinval;
    v115 = sinval;
    if (v20 >= v43)
      v20 = v20 - v43;
    else
      v20 = 0;
    v47 = v41 + 16 * v43;
    v48 = &v112[v43];
    do
    {
      v44.i16[0] = *a2;
      v51 = __sincos_stret((double)v28 * 6.28318531 / (double)v44.u64[0]);
      *(double *)v44.i64 = v51.__cosval;
      v49.f64[0] = v51.__sinval;
      if ((_DWORD)v20 == (_DWORD)v28)
      {
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v127 = 136315906;
        v131 = 2048;
        v132 = (v27 + v28);
        v133 = 2048;
        v134 = v107;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_117:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v127 = 136315906;
        v131 = 2048;
        v132 = (v21 + v32);
        v133 = 2048;
        v134 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 789;
        v131 = 2048;
        v132 = v28;
        v133 = 2048;
        v134 = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_119:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v27 + v28;
        v133 = 2048;
        v134 = v21;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_120:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v27 + v28;
        v133 = 2048;
        v134 = v113;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_121:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v20;
        v133 = 2048;
        v134 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_122:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v127 = 136315906;
        v131 = 2048;
        v132 = (v109 + v27);
        v133 = 2048;
        v134 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_123:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 789;
        v131 = 2048;
        v132 = v32;
        v133 = 2048;
        v134 = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_124:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 789;
        v131 = 2048;
        v132 = v28;
        v133 = 2048;
        v134 = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_125:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        v95 = v35;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v27;
        v133 = 2048;
        v134 = v95;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_126:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        v96 = v35;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v109 + v27;
        v133 = 2048;
        v134 = v96;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_127:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        v97 = v37;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v27;
        v133 = 2048;
        v134 = v97;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_128:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        v98 = v37;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v109 + v27;
        v133 = 2048;
        v134 = v98;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_129:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v28;
        v133 = 2048;
        v134 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_130:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v32;
        v133 = 2048;
        v134 = v28;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_131:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v20;
        v133 = 2048;
        v134 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_132:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v127 = 136315906;
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v131 = 2048;
        v132 = v27;
        v133 = 2048;
        v134 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_133:
        v126 = 0;
        v138 = 0u;
        v139 = 0u;
        v136 = 0u;
        v137 = 0u;
        v135 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v128 = "operator[]";
        v129 = 1024;
        v130 = 609;
        v127 = 136315906;
        v131 = 2048;
        v132 = (v27 + v28);
        v133 = 2048;
        v134 = v20;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_134;
      }
      v50.f32[0] = v45.__cosval * v51.__cosval;
      v52 = v51.__sinval * -v45.__cosval;
      v50.f32[1] = v115;
      v50.f32[2] = v52;
      v48[v28] = v50;
      if (v6)
      {
        if (v27 + v28 >= v21)
          goto LABEL_119;
        v49.f64[1] = v51.__cosval;
        *(float32x2_t *)&v49.f64[0] = vcvt_f32_f64(v49);
        v53 = vnegq_f32((float32x4_t)vzip1q_s32((int32x4_t)v49, (int32x4_t)v49));
        v53.i32[1] = 0;
        *(float32x4_t *)(v47 + 16 * v28) = v53;
        if (v27 + v28 >= v113)
          goto LABEL_120;
        v44 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL), vnegq_f32(v48[v28])), v53, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48[v28], (int32x4_t)v48[v28]), (int8x16_t)v48[v28], 0xCuLL));
        *(int8x16_t *)(v32 + 16 * v28) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), v44, 0xCuLL);
      }
      ++v28;
    }
    while (v106 != (_DWORD)v28);
    v20 = v107;
    if (v107 <= v27)
      goto LABEL_132;
    v54 = v27 + v28;
    if (v107 <= (int)v27 + (int)v28)
      goto LABEL_133;
    v41 = v111;
    v112[v54] = v112[v27];
    if ((v6 & 1) == 0)
      goto LABEL_67;
    v55 = v21;
    if (v21 <= v27)
      goto LABEL_136;
    v32 = (v27 + v28);
    if (v21 <= v54)
    {
LABEL_137:
      v126 = 0;
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v135 = 0u;
      v100 = v55;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v127 = 136315906;
      v128 = "operator[]";
      v129 = 1024;
      v130 = 609;
      v131 = 2048;
      v132 = v32;
      v133 = 2048;
      v134 = v100;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_138:
      v126 = 0;
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v135 = 0u;
      v101 = v56;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v127 = 136315906;
      v128 = "operator[]";
      v129 = 1024;
      v130 = 609;
      v131 = 2048;
      v132 = v27;
      v133 = 2048;
      v134 = v101;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_139:
      v126 = 0;
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v135 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v127 = 136315906;
      v128 = "operator[]";
      v129 = 1024;
      v130 = 609;
      v131 = 2048;
      v132 = v32;
      v133 = 2048;
      v134 = v113;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_OWORD *)(v111 + 16 * v32) = *(_OWORD *)(v111 + 16 * v27);
    v56 = v113;
    if (v113 <= v27)
      goto LABEL_138;
    if (v113 <= v54)
      goto LABEL_139;
    *(_OWORD *)(v110 + 16 * v32) = *(_OWORD *)(v110 + 16 * v27);
LABEL_67:
    v43 = v27 + v28 + 1;
    v42 = v108 + 1;
    v40 = *a2;
  }
  while (v108 + 1 < v40);
LABEL_68:
  if (*((_BYTE *)a2 + 8))
  {
    v21 = (uint64_t)re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexUV", 1, 6);
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    if (v57)
    {
      v27 = re::internal::GeomTypedAttribute<double>::operator[](v21, 0);
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    }
    else
    {
      v27 = 0;
    }
    v32 = v109;
    v60 = 0;
    v61 = 0;
    LOWORD(v58) = *a2;
    v28 = v57;
    v62 = v57 - v109;
    if (v57 < v109)
      v62 = 0;
    do
    {
      if (8 * v57 == v60)
        goto LABEL_129;
      LOWORD(v59) = *a2;
      *(float *)&v63 = (float)(0.5 / (float)v58) + (float)((float)v61 / (float)LODWORD(v59));
      HIWORD(v59) = WORD1(v63);
      *(_QWORD *)(v27 + v60) = v63;
      if (!v62)
        goto LABEL_130;
      HIDWORD(v63) = 1.0;
      *(_QWORD *)(v27 + 8 * v32++) = v63;
      --v62;
      ++v61;
      v60 += 8;
    }
    while (8 * v106 != v60);
    if (v105)
    {
      v64 = 0;
      v65 = v106;
      do
      {
        v32 = 0;
        LOWORD(v63) = *a2;
        v66 = 1.0 - (float)((float)(v105 - v64) / (float)v63);
        v21 = v65;
        v67 = v57 - v65;
        if (v57 < v65)
          v67 = 0;
        v68 = v27 + 8 * v65;
        do
        {
          if (v67 == (_DWORD)v32)
            goto LABEL_117;
          LOWORD(v59) = *a2;
          v59 = (float)LODWORD(v59);
          *(float *)&v63 = (float)v32 / v59;
          *((float *)&v63 + 1) = v66;
          *(_QWORD *)(v68 + 8 * v32++) = v63;
        }
        while (v106 + 1 != (_DWORD)v32);
        v65 = v21 + v32;
        ++v64;
      }
      while (v64 != v105);
    }
  }
  if (!*((_BYTE *)a2 + 9))
  {
LABEL_94:
    v76 = v116;
    v70 = v106;
    if (!v116)
      goto LABEL_98;
    v77 = v20;
    while (v77)
    {
      *v112 = vmulq_n_f32(*v112, *((float *)a2 + 1));
      ++v112;
      --v77;
      if (!--v76)
        goto LABEL_98;
    }
    goto LABEL_131;
  }
  v27 = (unint64_t)re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v119, "vertexNormal", 1, 7);
  if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v27 + 16))(v27))
  {
    v28 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v27, 0);
    v32 = (*(unsigned int (**)(unint64_t))(*(_QWORD *)v27 + 16))(v27);
  }
  else
  {
    v32 = 0;
    v28 = 0;
  }
  v69 = v116;
  v70 = v106;
  if (v116)
  {
    v71 = 0;
    while (v20 != v71)
    {
      if (v32 == v71)
        goto LABEL_135;
      v72 = v112[v71];
      v73 = (int32x4_t)vmulq_f32(v72, v72);
      v73.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v73, 2), vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.i8, 1))).u32[0];
      v74 = vrsqrte_f32((float32x2_t)v73.u32[0]);
      v75 = vmul_f32(v74, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v74, v74)));
      *(float32x4_t *)(v28 + 16 * v71++) = vmulq_n_f32(v72, vmul_f32(v75, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v75, v75))).f32[0]);
      if (v69 == v71)
        goto LABEL_94;
    }
LABEL_134:
    v126 = 0;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v135 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v127 = 136315906;
    v128 = "operator[]";
    v129 = 1024;
    v130 = 609;
    v131 = 2048;
    v132 = v20;
    v133 = 2048;
    v134 = v20;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_135:
    v126 = 0;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v135 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v127 = 136315906;
    v128 = "operator[]";
    v129 = 1024;
    v130 = 609;
    v131 = 2048;
    v132 = v32;
    v133 = 2048;
    v134 = v32;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_136:
    v126 = 0;
    v138 = 0u;
    v139 = 0u;
    v136 = 0u;
    v137 = 0u;
    v135 = 0u;
    v99 = v55;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v127 = 136315906;
    v128 = "operator[]";
    v129 = 1024;
    v130 = 609;
    v131 = 2048;
    v132 = v27;
    v133 = 2048;
    v134 = v99;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_137;
  }
LABEL_98:
  v78 = 0;
  v32 = v117[2];
  v79 = (_DWORD *)(v118 + 8);
  v80 = v103;
  do
  {
    if (v32 == v78)
      goto LABEL_123;
    *(v79 - 2) = v78;
    *(v79 - 1) = v70 + v78 + 1;
    *v79 = v70 + v78;
    v79[1] = -1;
    v79 += 4;
    ++v78;
  }
  while (v106 != v78);
  v81 = (*a2 - 1) * v70;
  v82 = v118;
  v83 = v106;
  do
  {
    v28 = v81;
    if (v32 <= v81)
      goto LABEL_124;
    v84 = (_DWORD *)(v82 + 16 * v81);
    *v84 = v80 - 1;
    v84[1] = v80;
    v84[2] = v70 + v80;
    v84[3] = -1;
    ++v81;
    ++v80;
    --v83;
  }
  while (v83);
  if (v105)
  {
    v85 = v70 - 2;
    v86 = 0;
    v87 = 2 * v70;
    v88 = v70;
    do
    {
      v89 = 0;
      v90 = v118;
      do
      {
        v28 = v88 + v89;
        if (v32 <= v28)
          goto LABEL_118;
        v91 = (_DWORD *)(v90 + 16 * v28);
        *v91 = v70 + v89;
        v91[1] = v70 + v89 + 1;
        v91[2] = v87 + v89 + 2;
        v91[3] = v87 + v89++ + 1;
      }
      while (v106 != v89);
      ++v86;
      v87 += v104;
      v70 += v104;
      v88 += v89;
    }
    while (v86 != v85);
  }
  v92 = (re::internal *)re::GeomMesh::operator=(v102, &v116);
  if (*((_BYTE *)a2 + 10))
    re::internal::mergeVertexPositions(v92, v93);
LABEL_112:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v119);
  result = v117[0];
  if (v117[0])
  {
    if (v118)
      return (*(uint64_t (**)(void))(*(_QWORD *)v117[0] + 40))();
  }
  return result;
}

void re::buildSphere(re::GeomMesh *a1, unsigned __int16 *a2)
{
  re::GeomAttribute *v4;
  re::GeomAttribute *v5;
  _BYTE v6[736];

  re::GeomMesh::GeomMesh((re::GeomMesh *)v6, 0);
  re::buildSphere((uint64_t)v6, a2);
  re::DynamicArray<re::GeomMesh>::clear(a1, v4);
  re::DynamicArray<re::GeomMesh>::add((uint64_t)a1, (uint64_t)v6);
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v6, v5);
}

void re::internal::Callable<re::buildCylinder(re::GeomMesh &,re::GeomBuildCylinderOptions const&)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::buildCylinder(re::GeomMesh &,re::GeomBuildCylinderOptions const&)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::operator()(uint64_t a1, float *a2, float *a3, float32x4_t *a4, float32x4_t *a5)
{
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  __float2 v13;
  uint64_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float v26;

  v7 = *a3;
  v8 = *(float **)(a1 + 8);
  v26 = v8[1];
  v9 = v8[2];
  v10 = v8[3];
  v11 = v9 - v10;
  v12 = v10 + (float)(*a3 * (float)(v9 - v10));
  v13 = __sincosf_stret(*a2 * 6.2832);
  *(float *)&v14 = v13.__cosval * v12;
  v15 = (float)(v7 * v26) + v26 * -0.5;
  *((float *)&v14 + 1) = v15;
  v16.i32[1] = 0;
  v16.i32[3] = 0;
  v16.f32[0] = -v13.__sinval;
  v16.f32[2] = -v13.__cosval;
  v17.f32[0] = v13.__cosval * v11;
  v17.f32[1] = v26;
  v17.f32[2] = -(float)(v13.__sinval * v11);
  v18 = (int32x4_t)vmulq_f32(v16, v16);
  v18.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2), vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1))).u32[0];
  v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
  v21 = vmulq_n_f32(v16, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
  v22 = (int32x4_t)vmulq_f32(v17, v17);
  v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
  v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
  v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
  *a4 = v21;
  *a5 = vmulq_n_f32(v17, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
  return v14;
}

_QWORD *re::internal::Callable<re::buildCylinder(re::GeomMesh &,re::GeomBuildCylinderOptions const&)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED72D08;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::buildCylinder(re::GeomMesh &,re::GeomBuildCylinderOptions const&)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED72D08;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::buildCylinder(re::GeomMesh &,re::GeomBuildCylinderOptions const&)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::size()
{
  return 16;
}

re::internal::GeomBaseMesh *re::internal::GeomBaseMesh::GeomBaseMesh(re::internal::GeomBaseMesh *this, const re::internal::GeomBaseMesh *a2)
{
  _QWORD *v4;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = (_QWORD *)re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)this + 8, (uint64_t *)a2 + 1);
  if (!*((_QWORD *)this + 2))
    re::DynamicArray<re::BlendNode>::setCapacity(v4, 1uLL);
  re::internal::GeomAttributeManager::GeomAttributeManager((re::internal::GeomBaseMesh *)((char *)this + 48), (const re::internal::GeomBaseMesh *)((char *)a2 + 48));
  return this;
}

re::GeomAttribute *re::`anonymous namespace'::getOrAddVector3Attribute(uint64_t a1, char *a2, int a3)
{
  re::GeomAttribute *result;

  result = (re::GeomAttribute *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  if (!result)
    return re::GeomMesh::addAttribute(a1, a2, a3, 7);
  return result;
}

uint64_t re::`anonymous namespace'::accessVector3Attribute(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  if (!v2)
    return 0;
  v3 = v2;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
    return 0;
  v4 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v3, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return v4;
}

uint64_t re::`anonymous namespace'::modifyVector3Attribute(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 64), a2);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2))
    return 0;
  v3 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v2, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return v3;
}

re::GeomAttribute *re::computeSmoothVertexNormals(re *this, re::GeomMesh *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  re::GeomAttribute *result;
  float32x4_t *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x4_t v23;
  float32x2_t v24;
  float32x2_t v25;
  re::GeomAttribute *v26;
  __int128 v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v4 = (uint64_t)this;
  v41 = *MEMORY[0x24BDAC8D0];
  v5 = re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "vertexNormal");
  if (v5
        (v5 = (unint64_t)result) != 0))
  {
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5))
    {
      v7 = (float32x4_t *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v5, 0);
      v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    v9 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v4);
    v11 = v10;
    v12 = *(unsigned int *)(v4 + 16);
    if ((_DWORD)v12)
    {
      v13 = v8;
      v14 = *(unsigned int *)(v4 + 16);
      v15 = v7;
      while (v13)
      {
        *v15++ = 0uLL;
        --v13;
        if (!--v14)
          goto LABEL_10;
      }
      *(_QWORD *)&v27 = 0;
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v28 = 136315906;
      v29 = "operator[]";
      v30 = 1024;
      v31 = 609;
      v32 = 2048;
      v33 = v8;
      v34 = 2048;
      v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_31;
    }
LABEL_10:
    v26 = (re::GeomAttribute *)v5;
    v16 = *(unsigned int *)(v4 + 40);
    if (*(_DWORD *)(v4 + 40))
    {
      v2 = 0;
      while (1)
      {
        v5 = *(_QWORD *)(v4 + 40);
        if (v5 <= v2)
          break;
        v27 = *(_OWORD *)(*(_QWORD *)(v4 + 56) + 16 * v2);
        v3 = HIDWORD(v27);
        if (HIDWORD(v27) == -1)
        {
          v3 = v27;
          if (v8 <= v27)
            goto LABEL_37;
          v19.i64[0] = v20;
          v19.i64[1] = v21;
          v7[v27] = vaddq_f32(v7[v27], v19);
          v3 = DWORD1(v27);
          if (v8 <= DWORD1(v27))
            goto LABEL_38;
          v7[DWORD1(v27)] = vaddq_f32(v7[DWORD1(v27)], v19);
          v3 = DWORD2(v27);
          if (v8 <= DWORD2(v27))
            goto LABEL_39;
        }
        else
        {
          v5 = v27;
          if (v8 <= v27)
            goto LABEL_33;
          v19.i64[0] = v17;
          v19.i64[1] = v18;
          v7[v27] = vaddq_f32(v7[v27], v19);
          v5 = DWORD1(v27);
          if (v8 <= DWORD1(v27))
            goto LABEL_34;
          v7[DWORD1(v27)] = vaddq_f32(v7[DWORD1(v27)], v19);
          v5 = DWORD2(v27);
          if (v8 <= DWORD2(v27))
            goto LABEL_35;
          v7[DWORD2(v27)] = vaddq_f32(v7[DWORD2(v27)], v19);
          if (v8 <= v3)
            goto LABEL_36;
        }
        v7[v3] = vaddq_f32(v19, v7[v3]);
        if (++v2 == v16)
          goto LABEL_23;
      }
LABEL_32:
      *(_QWORD *)&v27 = 0;
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v8 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v28 = 136315906;
      v29 = "operator[]";
      v30 = 1024;
      v31 = 797;
      v32 = 2048;
      v33 = v2;
      v34 = 2048;
      v35 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_33:
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v28 = 136315906;
      v29 = "operator[]";
      v30 = 1024;
      v31 = 609;
      v32 = 2048;
      v33 = v5;
      v34 = 2048;
      v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_34:
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v28 = 136315906;
      v29 = "operator[]";
      v30 = 1024;
      v31 = 609;
      v32 = 2048;
      v33 = v5;
      v34 = 2048;
      v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_35:
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v28 = 136315906;
      v29 = "operator[]";
      v30 = 1024;
      v31 = 609;
      v32 = 2048;
      v33 = v5;
      v34 = 2048;
      v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_36:
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v28 = 136315906;
      v29 = "operator[]";
      v30 = 1024;
      v31 = 609;
      v32 = 2048;
      v33 = v3;
      v34 = 2048;
      v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v28 = 136315906;
      v29 = "operator[]";
      v30 = 1024;
      v31 = 609;
      v32 = 2048;
      v33 = v3;
      v34 = 2048;
      v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v28 = 136315906;
      v29 = "operator[]";
      v30 = 1024;
      v31 = 609;
      v32 = 2048;
      v33 = v3;
      v34 = 2048;
      v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v28 = 136315906;
      v29 = "operator[]";
      v30 = 1024;
      v31 = 609;
      v32 = 2048;
      v33 = v3;
      v34 = 2048;
      v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_23:
    if ((_DWORD)v12)
    {
      v4 = v8;
      v22 = v8;
      result = v26;
      while (v22)
      {
        v23 = (int32x4_t)vmulq_f32(*v7, *v7);
        v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
        v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
        v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
        *v7 = vmulq_n_f32(*v7, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
        ++v7;
        --v22;
        if (!--v12)
          return result;
      }
LABEL_31:
      *(_QWORD *)&v27 = 0;
      v40 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v28 = 136315906;
      v29 = "operator[]";
      v30 = 1024;
      v31 = 609;
      v32 = 2048;
      v33 = v4;
      v34 = 2048;
      v35 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_32;
    }
    return v26;
  }
  return result;
}

uint64_t re::computeSmoothFaceVaryingNormals(re *this, re::GeomMesh *a2, float a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  re::internal::GeomAttributeManager *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  float32x2_t v35;
  float32x2_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  uint64_t *v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int8x8_t *v48;
  unint64_t i;
  int8x8_t *v50;
  int8x8_t *v51;
  uint64_t v52;
  int8x8_t v53;
  uint8x8_t v54;
  unsigned int v55;
  uint64_t v56;
  float v57;
  float32x4_t v58;
  float v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  _BYTE *v67;
  int32x4_t v68;
  float32x2_t v69;
  float32x2_t v70;
  int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  uint64_t v90;
  unsigned int v91;
  float32x4_t v92;
  uint64_t v93[2];
  uint64_t *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[28];
  __int16 v104;
  _BYTE v105[10];
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  __int16 v110;
  __int128 v111;
  __int128 v112;
  int v113;
  __int128 v114;
  __int128 v115;
  int v116;
  __int128 v117;
  __int128 v118;
  int v119;
  uint64_t v120;
  float v121;
  re::GeomMesh *v122;
  _QWORD v123[2];
  unint64_t v124;
  int v125;
  __int128 v126;
  __int128 v127;
  int v128;
  __int128 v129;
  __int128 v130;
  int v131;
  __int128 v132;
  __int128 v133;
  int v134;
  __int128 v135;
  __int128 v136;
  int v137;
  __int128 v138;
  __int128 v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int8x8_t *v146;
  unint64_t v147;
  _BYTE v148[12];
  __int16 v149;
  int v150;
  __int16 v151;
  unint64_t v152;
  __int16 v153;
  unint64_t v154;
  __n128 v155[3];
  __int128 v156;
  __int128 v157;
  uint64_t v158;

  v8 = (unint64_t)this;
  v158 = *MEMORY[0x24BDAC8D0];
  v9 = (re *)((char *)this + 64);
  if (re::internal::GeomAttributeManager::attributeByName((re *)((char *)this + 64), "vertexNormal"))
    re::internal::GeomAttributeManager::deleteAttribute(v9, "vertexNormal");
  v10 = (unint64_t)&v121;
  v101 = 0;
  v11 = &v106;
  v98 = 0;
  v99 = 0;
  v96 = 0;
  v97 = 0;
  v100 = 0;
  v93[1] = 0;
  v94 = 0;
  v93[0] = 0;
  v95 = 0;
  re::DynamicArray<re::GeomCell4>::resize(v93, *(unsigned int *)(v8 + 40));
  v12 = *(unsigned int *)(v8 + 40);
  if (*(_DWORD *)(v8 + 40))
  {
    v13 = 0;
    v14 = (unint64_t)v94;
    v15 = (_DWORD *)(v96 + 12);
    do
    {
      if (v14 == v13)
        goto LABEL_192;
      *v15 = -1;
      v15 += 4;
      ++v13;
    }
    while (v12 != v13);
  }
  v16 = (_DWORD *)(v8 + 16);
  v17 = (unint64_t)(float)((float)*(unsigned int *)(v8 + 16) * 1.3);
  if (v98 < v17)
    re::DynamicArray<re::Quaternion<float>>::setCapacity(&v97, v17);
  v122 = (re::GeomMesh *)v8;
  v123[0] = 0;
  v123[1] = 0;
  v124 = 0;
  v4 = (unint64_t)&v132 + 8;
  v132 = 0u;
  v133 = 0u;
  v135 = 0u;
  v136 = 0u;
  v126 = 0u;
  v127 = 0u;
  v125 = 0;
  v128 = 0;
  v129 = 0u;
  v130 = 0u;
  v134 = 0;
  v131 = 0;
  v138 = 0u;
  v139 = 0u;
  v137 = 0;
  v140 = 0;
  v142 = 0;
  v141 = 0;
  v143 = 0;
  v144 = 1;
  v146 = 0;
  v145 = 0;
  v147 = 0;
  v121 = cosf(a3);
  re::internal::GeomVertexConnectivity::buildVertexConnectivity((unsigned int *)(v8 + 16), (uint64_t)&v106);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v129 + 8, (uint64_t)&v106);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v132 + 8, (uint64_t)&v111 + 8);
  v19 = *((_QWORD *)&v135 + 1);
  if (*((_QWORD *)&v135 + 1) && *((_QWORD *)&v114 + 1) && *((_QWORD *)&v135 + 1) != *((_QWORD *)&v114 + 1))
  {
LABEL_208:
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    _os_crash();
    __break(1u);
  }
  *((_QWORD *)&v135 + 1) = *((_QWORD *)&v114 + 1);
  *((_QWORD *)&v114 + 1) = v19;
  v20 = v136;
  v136 = v115;
  v115 = v20;
  v21 = v138;
  *(_QWORD *)&v138 = v117;
  *(_QWORD *)&v117 = v21;
  v22 = ++v116;
  ++v137;
  if (v19)
  {
    if (v21)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
      v22 = v116;
    }
    *(_QWORD *)&v117 = 0;
    v115 = 0uLL;
    *((_QWORD *)&v114 + 1) = 0;
    v116 = v22 + 1;
  }
  if (*((_QWORD *)&v111 + 1))
  {
    if ((_QWORD)v114)
      (*(void (**)(void))(**((_QWORD **)&v111 + 1) + 40))();
    *(_QWORD *)&v114 = 0;
    v112 = 0uLL;
    *((_QWORD *)&v111 + 1) = 0;
    ++v113;
  }
  v90 = v8;
  v6 = (unint64_t)&v126 + 8;
  if (v106 && (_QWORD)v111)
    (*(void (**)(void))(*(_QWORD *)v106 + 40))();
  v14 = *((unsigned int *)v122 + 10);
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)&v126 + 8, v14);
  re::DynamicArray<re::Vector3<float>>::resize((uint64_t)v123, v14);
  v23 = re::GeomMesh::accessVertexPositions(v122);
  if (v14)
  {
    v3 = v23;
    v8 = (unint64_t)v24;
    v25 = 0;
    v4 = 0;
    while (1)
    {
      v5 = *((_QWORD *)v122 + 5);
      if (v5 <= v4)
        goto LABEL_193;
      *(_OWORD *)v103 = *(_OWORD *)(*((_QWORD *)v122 + 7) + v25);
      v5 = v124;
      if (v124 <= v4)
        break;
      v5 = *((_QWORD *)&v127 + 1);
      if (*((_QWORD *)&v127 + 1) <= v4)
        goto LABEL_195;
      v26 = v126;
      v27 = v129;
      if (*(_DWORD *)&v103[12] == -1)
      else
      v30 = (unint64_t *)(v26 + 16 * v4);
      v31.i64[0] = v28;
      v31.i64[1] = v29;
      v32 = vmulq_f32(v31, v31);
      *v30 = v28;
      v30[1] = v29;
      v33 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0];
      if (v33 <= 0.0)
      {
        v37 = 0;
        v38 = 0;
      }
      else
      {
        v34 = v33;
        v35 = vrsqrte_f32((float32x2_t)LODWORD(v33));
        v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)LODWORD(v34), vmul_f32(v35, v35)));
        v39 = vmulq_n_f32(v31, vmul_f32(v36, vrsqrts_f32((float32x2_t)LODWORD(v34), vmul_f32(v36, v36))).f32[0]);
        v38 = v39.i64[1];
        v37 = v39.i64[0];
      }
      v40 = (uint64_t *)(v27 + 16 * v4);
      *v40 = v37;
      v40[1] = v38;
      ++v4;
      v25 += 16;
      if (v14 == v4)
        goto LABEL_35;
    }
LABEL_194:
    *(_QWORD *)v148 = 0;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    *((_OWORD *)v11 + 2) = 0u;
    *(_OWORD *)v11 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v155[0].n128_u32[0] = 136315906;
    *(unint64_t *)((char *)v155[0].n128_u64 + 4) = (unint64_t)"operator[]";
    v155[0].n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&v155[0].n128_u32[3] + 2) = 789;
    v155[1].n128_u16[1] = 2048;
    *(unint64_t *)((char *)v155[1].n128_u64 + 4) = v4;
    v155[1].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&v155[1].n128_u64[1] + 6) = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_195:
    *(_QWORD *)v148 = 0;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    *((_OWORD *)v11 + 2) = 0u;
    *(_OWORD *)v11 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v155[0].n128_u32[0] = 136315906;
    *(unint64_t *)((char *)v155[0].n128_u64 + 4) = (unint64_t)"operator[]";
    v155[0].n128_u16[6] = 1024;
    *(unsigned __int32 *)((char *)&v155[0].n128_u32[3] + 2) = 789;
    v155[1].n128_u16[1] = 2048;
    *(unint64_t *)((char *)v155[1].n128_u64 + 4) = v4;
    v155[1].n128_u16[6] = 2048;
    *(unint64_t *)((char *)&v155[1].n128_u64[1] + 6) = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_196:
    *(_QWORD *)v148 = 0;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315906;
    *(_QWORD *)&v103[4] = "operator[]";
    *(_WORD *)&v103[12] = 1024;
    *(_DWORD *)&v103[14] = 789;
    *(_WORD *)&v103[18] = 2048;
    *(_QWORD *)&v103[20] = v3;
    v104 = 2048;
    *(_QWORD *)v105 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_197:
    *(_QWORD *)v148 = 0;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315906;
    *(_QWORD *)&v103[4] = "operator[]";
    *(_WORD *)&v103[12] = 1024;
    *(_DWORD *)&v103[14] = 789;
    *(_WORD *)&v103[18] = 2048;
    *(_QWORD *)&v103[20] = v3;
    v104 = 2048;
    *(_QWORD *)v105 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_198:
    *(_QWORD *)v148 = 0;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315906;
    *(_QWORD *)&v103[4] = "operator[]";
    *(_WORD *)&v103[12] = 1024;
    *(_DWORD *)&v103[14] = 789;
    *(_WORD *)&v103[18] = 2048;
    *(_QWORD *)&v103[20] = v3;
    v104 = 2048;
    *(_QWORD *)v105 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_199:
    *(_QWORD *)v148 = 0;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315906;
    *(_QWORD *)&v103[4] = "operator[]";
    *(_WORD *)&v103[12] = 1024;
    *(_DWORD *)&v103[14] = 789;
    *(_WORD *)&v103[18] = 2048;
    *(_QWORD *)&v103[20] = v3;
    v104 = 2048;
    *(_QWORD *)v105 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_200:
    *(_QWORD *)v148 = 0;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315906;
    *(_QWORD *)&v103[4] = "operator[]";
    *(_WORD *)&v103[12] = 1024;
    *(_DWORD *)&v103[14] = 789;
    *(_WORD *)&v103[18] = 2048;
    *(_QWORD *)&v103[20] = v3;
    v104 = 2048;
    *(_QWORD *)v105 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_201:
    *(_QWORD *)v148 = 0;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315906;
    *(_QWORD *)&v103[4] = "operator[]";
    *(_WORD *)&v103[12] = 1024;
    *(_DWORD *)&v103[14] = 789;
    *(_WORD *)&v103[18] = 2048;
    *(_QWORD *)&v103[20] = v4;
    v104 = 2048;
    *(_QWORD *)v105 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_202:
    *(_QWORD *)v148 = 0;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    v64 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315906;
    *(_QWORD *)&v103[4] = "operator[]";
    *(_WORD *)&v103[12] = 1024;
    *(_DWORD *)&v103[14] = 789;
    *(_WORD *)&v103[18] = 2048;
    *(_QWORD *)&v103[20] = v3;
    v104 = 2048;
    *(_QWORD *)v105 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_203:
    *(_QWORD *)v148 = 0;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    v14 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315906;
    *(_QWORD *)&v103[4] = "operator[]";
    *(_WORD *)&v103[12] = 1024;
    *(_DWORD *)&v103[14] = 789;
    *(_WORD *)&v103[18] = 2048;
    *(_QWORD *)&v103[20] = v6;
    v104 = 2048;
    *(_QWORD *)v105 = v64;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_204:
    *(_QWORD *)v148 = 0;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315906;
    *(_QWORD *)&v103[4] = "operator[]";
    *(_WORD *)&v103[12] = 1024;
    *(_DWORD *)&v103[14] = 789;
    *(_WORD *)&v103[18] = 2048;
    *(_QWORD *)&v103[20] = v4;
    v104 = 2048;
    *(_QWORD *)v105 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_205;
  }
LABEL_35:
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v120 = 0;
  v111 = 0u;
  v112 = 0u;
  v109 = 0;
  v113 = 0;
  v114 = 0u;
  v115 = 0u;
  v117 = 0u;
  v118 = 0u;
  v116 = 0;
  v119 = 0;
  if (*v16)
  {
    v41 = 0;
    do
    {
      ++v109;
      ++v113;
      ++v116;
      v108 = 0;
      *((_QWORD *)&v112 + 1) = 0;
      *((_QWORD *)&v115 + 1) = 0;
      *((_QWORD *)&v118 + 1) = 0;
      ++v119;
      re::internal::GeomVertexConnectivity::faceVertices((re::internal::GeomVertexConnectivity *)((char *)&v129 + 8), v41, (_QWORD *)&v138 + 1);
      v42 = v147;
      v11 = (uint64_t *)DWORD2(v139);
      if ((BYTE8(v139) & 0x3F) != 0)
        v43 = (DWORD2(v139) >> 6) + 1;
      else
        v43 = DWORD2(v139) >> 6;
      v147 = DWORD2(v139);
      v155[0].n128_u64[0] = 0;
      re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)&v142, v43, v155);
      v91 = v41;
      if (v11 && v42 > (unint64_t)v11)
      {
        v44 = v147 & 0x3F;
        if ((v147 & 0x3F) != 0)
        {
          v45 = v44 == 63;
          v46 = -1 << v44;
          if (v45)
            v47 = 63;
          else
            v47 = ~v46;
        }
        else
        {
          v47 = 63;
        }
        v48 = (int8x8_t *)&v145;
        if ((v144 & 1) == 0)
          v48 = v146;
        *(_QWORD *)&v48[v143 - 1] &= v47;
      }
      else if (!v11)
      {
        v5 = 1;
        goto LABEL_55;
      }
      for (i = 0; (uint64_t *)i != v11; ++i)
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)&v142, i);
      v5 = 0;
LABEL_55:
      if (v143)
      {
        v50 = v146;
        if ((v144 & 1) != 0)
          v50 = (int8x8_t *)&v145;
        v51 = &v50[v143];
        do
        {
          v52 = 0;
          do
          {
            v53 = *v50++;
            v54 = (uint8x8_t)vcnt_s8(v53);
            v54.i16[0] = vaddlv_u8(v54);
            v52 += v54.u32[0];
          }
          while (v50 != v51);
          if (!v52)
            break;
          if ((v5 & 1) == 0)
          {
            v56 = 0;
            v3 = 0;
            v55 = -1;
            v57 = -1.0;
            while (1)
            {
              if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)&v142, v3))
              {
                v4 = *((_QWORD *)&v139 + 1);
                if (*((_QWORD *)&v139 + 1) <= v3)
                  goto LABEL_185;
                v4 = v124;
                v8 = *(unsigned int *)(v141 + v56);
                if (v124 <= v8)
                  goto LABEL_186;
                v58 = vmulq_f32(*(float32x4_t *)(v126 + 16 * v8), *(float32x4_t *)(v126 + 16 * v8));
                v59 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0];
                if (v59 > v57)
                {
                  v55 = v3;
                  v57 = v59;
                }
              }
              ++v3;
              v56 += 8;
              if (v11 == (uint64_t *)v3)
                goto LABEL_71;
            }
          }
          v55 = -1;
LABEL_71:
          v3 = v55;
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)&v142, v55);
          v14 = *((_QWORD *)&v139 + 1);
          if (*((_QWORD *)&v139 + 1) <= (unint64_t)v55)
            goto LABEL_198;
          re::DynamicArray<int>::add((_QWORD *)&v114 + 1, (_DWORD *)(v141 + 8 * v55));
          v14 = *((_QWORD *)&v139 + 1);
          if (*((_QWORD *)&v139 + 1) <= (unint64_t)v55)
            goto LABEL_199;
          re::DynamicArray<unsigned char>::add((_QWORD *)&v117 + 1, (_BYTE *)(v141 + 8 * v55 + 4));
          v14 = *((_QWORD *)&v139 + 1);
          if (*((_QWORD *)&v139 + 1) <= (unint64_t)v55)
            goto LABEL_200;
          v14 = v124;
          v4 = *(unsigned int *)(v141 + 8 * v55);
          if (v124 <= v4)
            goto LABEL_201;
          v92 = *(float32x4_t *)(v126 + 16 * v4);
          if ((v5 & 1) == 0)
          {
            v60 = 0;
            v3 = 0;
            v8 = 1;
            while (1)
            {
              if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)&v142, v3))
              {
                LODWORD(v102) = 0;
                v6 = *((_QWORD *)&v139 + 1);
                if (*((_QWORD *)&v139 + 1) <= v3)
                  goto LABEL_187;
                v6 = v124;
                v10 = *(unsigned int *)(v141 + v60);
                LODWORD(v102) = *(_DWORD *)(v141 + v60);
                if (v124 <= v4)
                  goto LABEL_188;
                v61 = vmulq_f32(*(float32x4_t *)(v126 + 16 * v4), *(float32x4_t *)(v126 + 16 * v4));
                if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0] > 0.0)
                {
                  if (v124 <= v10)
                    goto LABEL_189;
                  v62 = vmulq_f32(*(float32x4_t *)(v126 + 16 * v10), *(float32x4_t *)(v126 + 16 * v10));
                  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).f32[0] > 0.0)
                  {
                    v6 = *((_QWORD *)&v127 + 1);
                    if (*((_QWORD *)&v127 + 1) <= v4)
                      goto LABEL_190;
                    if (*((_QWORD *)&v127 + 1) <= v10)
                      goto LABEL_191;
                    v63 = vmulq_f32(*(float32x4_t *)(v129 + 16 * v4), *(float32x4_t *)(v129 + 16 * v10));
                    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0] >= v121)
                    {
                      re::DynamicArray<int>::add((_QWORD *)&v114 + 1, &v102);
                      v6 = *((_QWORD *)&v139 + 1);
                      if (*((_QWORD *)&v139 + 1) <= v3)
                        goto LABEL_202;
                      re::DynamicArray<unsigned char>::add((_QWORD *)&v117 + 1, (_BYTE *)(v141 + v60 + 4));
                      v6 = v102;
                      v64 = v124;
                      if (v124 <= v102)
                        goto LABEL_203;
                      v92 = vaddq_f32(v92, *(float32x4_t *)(v126 + 16 * v102));
                      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)&v142, v3);
                      v8 = (v8 + 1);
                    }
                  }
                }
              }
              ++v3;
              v60 += 8;
              if (v11 == (uint64_t *)v3)
                goto LABEL_91;
            }
          }
          v8 = 1;
LABEL_91:
          v65 = DWORD2(v112);
          if (DWORD2(v112))
          {
            v66 = (DWORD2(v112) - 1);
            v67 = (_BYTE *)v108;
            if (v108 <= v66)
              goto LABEL_207;
            v65 = *(_DWORD *)(v111 + 4 * v66);
          }
          v155[0].n128_u32[0] = v65 + v8;
          re::DynamicArray<int>::add(&v106, v155);
          v68 = (int32x4_t)vmulq_f32(v92, v92);
          v68.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v68, 2), vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v68.i8, 1))).u32[0];
          v69 = vrsqrte_f32((float32x2_t)v68.u32[0]);
          v70 = vmul_f32(v69, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(v69, v69)));
          v155[0] = (__n128)vmulq_n_f32(v92, vmul_f32(v70, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(v70, v70))).f32[0]);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)((char *)&v111 + 8), v155);
          v50 = v146;
          if ((v144 & 1) != 0)
            v50 = (int8x8_t *)&v145;
          v51 = &v50[v143];
        }
        while (v143);
      }
      v14 = *((_QWORD *)&v112 + 1);
      if (DWORD2(v112))
      {
        v3 = 0;
        while (1)
        {
          if (v14 <= v3)
            goto LABEL_196;
          v71 = v99;
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)&v97, (__n128 *)(v114 + 16 * v3));
          v14 = v108;
          if (v3)
          {
            v4 = v3 - 1;
            if (v108 <= v3 - 1)
              goto LABEL_204;
            v72 = *(unsigned int *)(v111 + 4 * v4);
          }
          else
          {
            v72 = 0;
          }
          if (v108 <= v3)
            goto LABEL_197;
          v73 = *(unsigned int *)(v111 + 4 * v3);
          if (v72 < v73)
            break;
LABEL_117:
          ++v3;
          v14 = *((_QWORD *)&v112 + 1);
          if (v3 >= DWORD2(v112))
            goto LABEL_118;
        }
        v74 = *((_QWORD *)&v115 + 1);
        v4 = *((_QWORD *)&v118 + 1);
        if (*((_QWORD *)&v115 + 1) <= v72)
          v5 = v72;
        else
          v5 = *((_QWORD *)&v115 + 1);
        if (*((_QWORD *)&v118 + 1) <= v72)
          v8 = v72;
        else
          v8 = *((_QWORD *)&v118 + 1);
        v75 = (unsigned int *)(v117 + 4 * v72);
        v11 = v94;
        v76 = v96;
        v77 = (unsigned __int8 *)(v120 + v72);
        v78 = v73 - v72;
        v79 = (char *)(v8 - v72);
        v80 = v5 - v72;
        while (v80)
        {
          if (!v79)
            goto LABEL_183;
          v6 = *v75;
          if ((unint64_t)v11 <= v6)
            goto LABEL_184;
          v81 = *v77++;
          *(_DWORD *)(v76 + 16 * v6 + 4 * v81) = v71;
          ++v75;
          --v79;
          --v80;
          if (!--v78)
            goto LABEL_117;
        }
        *(_QWORD *)v148 = 0;
        v156 = 0u;
        v157 = 0u;
        memset(v155, 0, sizeof(v155));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v103 = 136315906;
        *(_QWORD *)&v103[4] = "operator[]";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 789;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v5;
        v104 = 2048;
        *(_QWORD *)v105 = v74;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_183:
        *(_QWORD *)v148 = 0;
        v156 = 0u;
        v157 = 0u;
        memset(v155, 0, sizeof(v155));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v103 = 136315906;
        *(_QWORD *)&v103[4] = "operator[]";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 789;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v8;
        v104 = 2048;
        *(_QWORD *)v105 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_184:
        *(_QWORD *)v148 = 0;
        v156 = 0u;
        v157 = 0u;
        memset(v155, 0, sizeof(v155));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v103 = 136315906;
        *(_QWORD *)&v103[4] = "operator[]";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 789;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v6;
        v104 = 2048;
        *(_QWORD *)v105 = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_185:
        *(_QWORD *)v148 = 0;
        v156 = 0u;
        v157 = 0u;
        memset(v155, 0, sizeof(v155));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v103 = 136315906;
        *(_QWORD *)&v103[4] = "operator[]";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 789;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v3;
        v104 = 2048;
        *(_QWORD *)v105 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_186:
        *(_QWORD *)v148 = 0;
        v156 = 0u;
        v157 = 0u;
        memset(v155, 0, sizeof(v155));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v103 = 136315906;
        *(_QWORD *)&v103[4] = "operator[]";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 789;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v8;
        v104 = 2048;
        *(_QWORD *)v105 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_187:
        *(_QWORD *)v148 = 0;
        v156 = 0u;
        v157 = 0u;
        memset(v155, 0, sizeof(v155));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v103 = 136315906;
        *(_QWORD *)&v103[4] = "operator[]";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 789;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v3;
        v104 = 2048;
        *(_QWORD *)v105 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_188:
        *(_QWORD *)v148 = 0;
        v156 = 0u;
        v157 = 0u;
        memset(v155, 0, sizeof(v155));
        v10 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v103 = 136315906;
        *(_QWORD *)&v103[4] = "operator[]";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 797;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v4;
        v104 = 2048;
        *(_QWORD *)v105 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_189:
        *(_QWORD *)v148 = 0;
        v156 = 0u;
        v157 = 0u;
        memset(v155, 0, sizeof(v155));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v103 = 136315906;
        *(_QWORD *)&v103[4] = "operator[]";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 797;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v10;
        v104 = 2048;
        *(_QWORD *)v105 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_190:
        *(_QWORD *)v148 = 0;
        v156 = 0u;
        v157 = 0u;
        memset(v155, 0, sizeof(v155));
        v10 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v103 = 136315906;
        *(_QWORD *)&v103[4] = "operator[]";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 797;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v4;
        v104 = 2048;
        *(_QWORD *)v105 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_191:
        *(_QWORD *)v148 = 0;
        v156 = 0u;
        v157 = 0u;
        memset(v155, 0, sizeof(v155));
        v14 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v103 = 136315906;
        *(_QWORD *)&v103[4] = "operator[]";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 797;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v10;
        v104 = 2048;
        *(_QWORD *)v105 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_192:
        v155[0].n128_u64[0] = 0;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)v10 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v106) = 136315906;
        *(uint64_t *)((char *)v11 + 4) = (uint64_t)"operator[]";
        WORD2(v107) = 1024;
        *(_DWORD *)((char *)v11 + 14) = 789;
        WORD1(v108) = 2048;
        *(uint64_t *)((char *)v11 + 20) = v14;
        v110 = 2048;
        *(uint64_t *)((char *)v11 + 30) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_193:
        *(_QWORD *)v103 = 0;
        *((_OWORD *)v11 + 3) = 0u;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 1) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *(_OWORD *)v11 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v155[0].n128_u32[0] = 136315906;
        *(unint64_t *)((char *)v155[0].n128_u64 + 4) = (unint64_t)"operator[]";
        v155[0].n128_u16[6] = 1024;
        *(unsigned __int32 *)((char *)&v155[0].n128_u32[3] + 2) = 797;
        v155[1].n128_u16[1] = 2048;
        *(unint64_t *)((char *)v155[1].n128_u64 + 4) = v4;
        v155[1].n128_u16[6] = 2048;
        *(unint64_t *)((char *)&v155[1].n128_u64[1] + 6) = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_194;
      }
LABEL_118:
      v41 = v91 + 1;
    }
    while (v91 + 1 < *v16);
  }
  *(_QWORD *)&v105[2] = 0;
  memset(v103, 0, sizeof(v103));
  re::DynamicArray<float>::resize((uint64_t)v103, *(unsigned int *)(v90 + 40));
  v82 = *(unsigned int *)(v90 + 40);
  if (*(_DWORD *)(v90 + 40))
  {
    v83 = 0;
    v14 = *(_QWORD *)&v103[16];
    v84 = *(_QWORD *)&v105[2];
    while (v14 != v83)
    {
      *(_DWORD *)(v84 + 4 * v83) = v83;
      if (v82 == ++v83)
        goto LABEL_123;
    }
LABEL_205:
    v102 = 0;
    v67 = v148;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v148 = 136315906;
    *(_QWORD *)&v148[4] = "operator[]";
    v149 = 1024;
    v150 = 789;
    v151 = 2048;
    v152 = v14;
    v153 = 2048;
    v154 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_206;
  }
LABEL_123:
  v85 = re::GeomMesh::addFaceVaryingAttribute(v90, "vertexNormal", 7, v99, v93, (uint64_t *)v103);
  v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 16))(v85);
  if (v86)
  {
    v67 = (_BYTE *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v85, 0);
    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 16))(v85);
  }
  else
  {
    v67 = 0;
  }
  if (v99)
  {
    v87 = 0;
    v4 = v86;
    while (v87 != v86)
    {
      *(_OWORD *)&v67[16 * v87] = *(_OWORD *)(v101 + 16 * v87);
      if (v99 <= ++v87)
        goto LABEL_130;
    }
LABEL_206:
    v102 = 0;
    v66 = (unint64_t)v148;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v148 = 136315906;
    *(_QWORD *)&v148[4] = "operator[]";
    v149 = 1024;
    v150 = 609;
    v151 = 2048;
    v152 = v4;
    v153 = 2048;
    v154 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_207:
    *(_QWORD *)v148 = 0;
    v156 = 0u;
    v157 = 0u;
    memset(v155, 0, sizeof(v155));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v103 = 136315906;
    *(_QWORD *)&v103[4] = "operator[]";
    *(_WORD *)&v103[12] = 1024;
    *(_DWORD *)&v103[14] = 789;
    *(_WORD *)&v103[18] = 2048;
    *(_QWORD *)&v103[20] = v66;
    v104 = 2048;
    *(_QWORD *)v105 = v67;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_208;
  }
LABEL_130:
  if (*(_QWORD *)v103 && *(_QWORD *)&v105[2])
    (*(void (**)(void))(**(_QWORD **)v103 + 40))();
  if (*((_QWORD *)&v117 + 1))
  {
    if (v120)
      (*(void (**)(void))(**((_QWORD **)&v117 + 1) + 40))();
    v120 = 0;
    v118 = 0uLL;
    *((_QWORD *)&v117 + 1) = 0;
    ++v119;
  }
  if (*((_QWORD *)&v114 + 1))
  {
    if ((_QWORD)v117)
      (*(void (**)(void))(**((_QWORD **)&v114 + 1) + 40))();
    *(_QWORD *)&v117 = 0;
    v115 = 0uLL;
    *((_QWORD *)&v114 + 1) = 0;
    ++v116;
  }
  if (*((_QWORD *)&v111 + 1))
  {
    if ((_QWORD)v114)
      (*(void (**)(void))(**((_QWORD **)&v111 + 1) + 40))();
    *(_QWORD *)&v114 = 0;
    v112 = 0uLL;
    *((_QWORD *)&v111 + 1) = 0;
    ++v113;
  }
  if (v106 && (_QWORD)v111)
    (*(void (**)(void))(*(_QWORD *)v106 + 40))();
  if (v142)
  {
    v88 = v144;
    if ((v144 & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v142 + 40))();
      v88 = v144;
    }
    v142 = 0;
    v143 = 0;
    v144 = (v88 | 1) + 2;
  }
  if (*((_QWORD *)&v138 + 1))
  {
    if (v141)
      (*(void (**)(void))(**((_QWORD **)&v138 + 1) + 40))();
    v141 = 0;
    v139 = 0uLL;
    *((_QWORD *)&v138 + 1) = 0;
    ++v140;
  }
  if (*((_QWORD *)&v135 + 1))
  {
    if ((_QWORD)v138)
      (*(void (**)(void))(**((_QWORD **)&v135 + 1) + 40))();
    *(_QWORD *)&v138 = 0;
    v136 = 0uLL;
    *((_QWORD *)&v135 + 1) = 0;
    ++v137;
  }
  if (*((_QWORD *)&v132 + 1))
  {
    if ((_QWORD)v135)
      (*(void (**)(void))(**((_QWORD **)&v132 + 1) + 40))();
    *(_QWORD *)&v135 = 0;
    v133 = 0uLL;
    *((_QWORD *)&v132 + 1) = 0;
    ++v134;
  }
  if (*((_QWORD *)&v129 + 1))
  {
    if ((_QWORD)v132)
      (*(void (**)(void))(**((_QWORD **)&v129 + 1) + 40))();
    *(_QWORD *)&v132 = 0;
    v130 = 0uLL;
    *((_QWORD *)&v129 + 1) = 0;
    ++v131;
  }
  if (*((_QWORD *)&v126 + 1))
  {
    if ((_QWORD)v129)
      (*(void (**)(void))(**((_QWORD **)&v126 + 1) + 40))();
    *(_QWORD *)&v129 = 0;
    v127 = 0uLL;
    *((_QWORD *)&v126 + 1) = 0;
    ++v128;
  }
  if (v123[0] && (_QWORD)v126)
    (*(void (**)(void))(*(_QWORD *)v123[0] + 40))();
  if (v93[0] && v96)
    (*(void (**)(void))(*(_QWORD *)v93[0] + 40))();
  if (v97 && v101)
    (*(void (**)(void))(*(_QWORD *)v97 + 40))();
  return v85;
}

uint64_t re::GeomAttribute::modifyValues<re::Vector3<float>>(uint64_t a1)
{
  uint64_t v2;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 0;
  v2 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return v2;
}

uint64_t re::GeomAttribute::accessValues<re::Vector3<float>>(uint64_t a1)
{
  uint64_t v2;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 0;
  v2 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return v2;
}

uint64_t re::computeVertexTangentsAndBitangentsInternal(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unint64_t FirstBitSet;
  unsigned int v33;
  uint64_t v34;
  float32x4_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  float32x4_t *v41;
  _BOOL4 v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x2_t v60;
  float v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x4_t v82;
  uint64_t v83;
  float v84;
  float32x4_t v85;
  float32x4_t v86;
  uint64_t v87;
  unint64_t v88;
  float v89;
  float v90;
  int v91;
  int v92;
  int32x4_t *v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  float32x4_t v99;
  unint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float v105;
  float v106;
  float32x4_t v107;
  float32x4_t v108;
  _QWORD *v109;
  float32x4_t v110;
  int32x4_t v111;
  float32x2_t v112;
  float32x2_t v113;
  int8x16_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  float32x2_t v121;
  float32x2_t v122;
  __int128 *v123;
  __int128 *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float v136;
  float v137;
  float32x2_t v138;
  float32x2_t v139;
  uint64_t v140;
  uint64_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float v145;
  float v146;
  float32x2_t v147;
  float32x2_t v148;
  uint64_t v149;
  uint64_t v150;
  float32x4_t v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  _BOOL4 v160;
  int *v161;
  uint64_t v163;
  unsigned int v165;
  _QWORD v166[2];
  unint64_t v167;
  int v168;
  uint64_t v169;
  _QWORD v170[2];
  unint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE v175[28];
  __int16 v176;
  _BYTE v177[10];
  __int128 v178;
  unint64_t v179;
  int v180;
  uint64_t v181;
  _BYTE v182[28];
  __int16 v183;
  _BYTE v184[10];
  _BYTE v185[40];
  uint64_t v186;
  _BYTE v187[12];
  __int16 v188;
  int v189;
  __int16 v190;
  unint64_t v191;
  __int16 v192;
  unint64_t v193;
  float32x4_t v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = a2;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4))
    {
      v12 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a4, 0);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5))
    {
      v37 = (float32x4_t *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a5, 0);
      a5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
    }
    else
    {
      a5 = 0;
      v37 = 0;
    }
    if (*(_DWORD *)(a1 + 16))
    {
      v38 = 0;
      v39 = v13;
      v26 = a5;
      while (v13 != v38)
      {
        v40 = (_QWORD *)(v12 + 16 * v38);
        *v40 = 0;
        v40[1] = 0;
        if (a5 == v38)
          goto LABEL_205;
        v41 = &v37[v38];
        v41->i64[0] = 0;
        v41->i64[1] = 0;
        if (++v38 >= (unint64_t)*(unsigned int *)(a1 + 16))
          goto LABEL_67;
      }
      goto LABEL_204;
    }
LABEL_67:
    v42 = 0;
    if (a3 && *(_BYTE *)(a6 + 4))
      v42 = a3[16] == 1;
    v160 = v42;
    v7 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)a1);
    v44 = v43;
    v161 = (int *)a6;
    v163 = (uint64_t)a3;
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v6 + 16))(v6))
    {
      v26 = re::internal::GeomTypedAttribute<double>::operator[](v6, 0);
      v165 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
    else
    {
      v165 = 0;
      v26 = 0;
    }
    *(_QWORD *)&v185[32] = 0;
    memset(v185, 0, 28);
    v45 = *(unsigned int *)(a1 + 16);
    v194.i32[0] = 0;
    re::DynamicArray<float>::resize(v185, v45, &v194);
    v46 = a1;
    a6 = *(_QWORD *)(a1 + 40);
    if (!(_DWORD)a6)
    {
LABEL_98:
      v88 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v88)
      {
        v49 = 0;
        v26 = a5;
        a6 = v13;
        do
        {
          v6 = *(_QWORD *)&v185[16];
          if (*(_QWORD *)&v185[16] <= v49)
            goto LABEL_206;
          v89 = *(float *)(*(_QWORD *)&v185[32] + 4 * v49);
          if (v89 > 0.0)
          {
            if (v49 >= v13)
              goto LABEL_214;
            v90 = 1.0 / v89;
            *(float32x4_t *)(v12 + 16 * v49) = vmulq_n_f32(*(float32x4_t *)(v12 + 16 * v49), v90);
            if (v49 >= a5)
              goto LABEL_215;
            v37[v49] = vmulq_n_f32(v37[v49], v90);
            v88 = *(unsigned int *)(a1 + 16);
          }
        }
        while (++v49 < v88);
      }
      v91 = *v161;
      if (*v161 != 2)
      {
        if (v160)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 16))(v163))
          {
            v26 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v163, 0);
            v94 = (__int128 *)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 16))(v163);
          }
          else
          {
            v94 = 0;
            v26 = 0;
          }
          v46 = a1;
          v123 = (__int128 *)*(unsigned int *)(a1 + 16);
          if ((_DWORD)v123)
          {
            v124 = 0;
            a6 = v13;
            v6 = a5;
            while ((__int128 *)v13 != v124)
            {
              if (v94 == v124)
                goto LABEL_224;
              v125 = *(float32x4_t *)(v12 + 16 * (_QWORD)v124);
              v126 = *(float32x4_t *)(v26 + 16 * (_QWORD)v124);
              v127 = vmulq_f32(v125, v126);
              *(float32x4_t *)(v12 + 16 * (_QWORD)v124) = vsubq_f32(v125, vmulq_n_f32(v126, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))).f32[0]));
              if ((__int128 *)a5 == v124)
                goto LABEL_225;
              v128 = v37[(_QWORD)v124];
              v129 = *(float32x4_t *)(v26 + 16 * (_QWORD)v124);
              v130 = vmulq_f32(v128, v129);
              v37[(_QWORD)v124] = vsubq_f32(v128, vmulq_n_f32(v129, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v130, 2), vaddq_f32(v130, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.f32, 1))).f32[0]));
              v124 = (__int128 *)((char *)v124 + 1);
              if (v123 == v124)
                goto LABEL_185;
            }
            goto LABEL_222;
          }
LABEL_185:
          v91 = *v161;
        }
        if (v91 == 1)
        {
          v131 = *(unsigned int *)(v46 + 16);
          if ((_DWORD)v131)
          {
            v19 = v13;
            v13 = a5;
            v132 = v19;
            v133 = a5;
            while (v132)
            {
              v134 = *(float32x4_t *)v12;
              v135 = vmulq_f32(v134, v134);
              LODWORD(v136) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).u32[0];
              if (fabsf(v136) < 1.0e-10)
              {
                v140 = 0;
                v141 = 0;
              }
              else
              {
                v137 = v136;
                v138 = vrsqrte_f32((float32x2_t)LODWORD(v136));
                v139 = vmul_f32(v138, vrsqrts_f32((float32x2_t)LODWORD(v137), vmul_f32(v138, v138)));
                v142 = vmulq_n_f32(v134, vmul_f32(v139, vrsqrts_f32((float32x2_t)LODWORD(v137), vmul_f32(v139, v139))).f32[0]);
                v141 = v142.i64[1];
                v140 = v142.i64[0];
              }
              *(_QWORD *)v12 = v140;
              *(_QWORD *)(v12 + 8) = v141;
              if (!v133)
                goto LABEL_223;
              v143 = *v37;
              v144 = vmulq_f32(v143, v143);
              LODWORD(v145) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1))).u32[0];
              if (fabsf(v145) < 1.0e-10)
              {
                v149 = 0;
                v150 = 0;
              }
              else
              {
                v146 = v145;
                v147 = vrsqrte_f32((float32x2_t)LODWORD(v145));
                v148 = vmul_f32(v147, vrsqrts_f32((float32x2_t)LODWORD(v146), vmul_f32(v147, v147)));
                v151 = vmulq_n_f32(v143, vmul_f32(v148, vrsqrts_f32((float32x2_t)LODWORD(v146), vmul_f32(v148, v148))).f32[0]);
                v150 = v151.i64[1];
                v149 = v151.i64[0];
              }
              v37->i64[0] = v149;
              v37->i64[1] = v150;
              ++v37;
              --v133;
              v12 += 16;
              --v132;
              if (!--v131)
                goto LABEL_198;
            }
            goto LABEL_221;
          }
        }
LABEL_198:
        v115 = *(_QWORD *)v185;
        if (!*(_QWORD *)v185)
          return 1;
        v116 = *(_QWORD *)&v185[32];
        if (!*(_QWORD *)&v185[32])
          return 1;
        goto LABEL_200;
      }
      if (v163)
      {
        v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 16))(v163);
        if (v92)
        {
          v93 = (int32x4_t *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v163, 0);
          v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 16))(v163);
        }
        else
        {
          v93 = 0;
        }
LABEL_167:
        if ((_DWORD)v13 == v92)
        {
          if ((_DWORD)v13)
          {
            v13 = v13;
            v19 = a5;
            a5 = a5;
            while (a5)
            {
              v12 += 16;
              ++v93;
              --a5;
              if (!--v13)
                goto LABEL_198;
            }
            goto LABEL_219;
          }
        }
        else if ((_DWORD)v13)
        {
          v117 = v13;
          v19 = a5;
          v13 = a5;
          while (v13)
          {
            a5 = v12 + 16;
            v26 = (uint64_t)&v37[1];
            v118 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v37, *(int32x4_t *)v37), *(int8x16_t *)v37, 0xCuLL), vnegq_f32(*(float32x4_t *)v12)), *v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v12, *(int32x4_t *)v12), *(int8x16_t *)v12, 0xCuLL));
            v119 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), (int8x16_t)v118, 0xCuLL);
            v120 = (int32x4_t)vmulq_f32(v118, v118);
            v120.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v120.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v120, 2), *(float32x2_t *)v120.i8)).u32[0];
            v121 = vrsqrte_f32((float32x2_t)v120.u32[0]);
            v122 = vmul_f32(v121, vrsqrts_f32((float32x2_t)v120.u32[0], vmul_f32(v121, v121)));
            v194 = vmulq_n_f32(v119, vmul_f32(v122, vrsqrts_f32((float32x2_t)v120.u32[0], vmul_f32(v122, v122))).f32[0]);
            --v13;
            v12 += 16;
            ++v37;
            if (!--v117)
              goto LABEL_198;
          }
          goto LABEL_220;
        }
        goto LABEL_198;
      }
LABEL_116:
      v93 = 0;
      v92 = -1;
      goto LABEL_167;
    }
    v47 = v44;
    v48 = v7;
    v49 = 0;
LABEL_75:
    if (a6 <= v49)
      goto LABEL_207;
    v178 = *(_OWORD *)(*(_QWORD *)(a1 + 56) + 16 * v49);
    v50 = v178;
    if (v178 >= v47)
      goto LABEL_208;
    a6 = DWORD1(v178);
    if (DWORD1(v178) >= v47)
      goto LABEL_209;
    v6 = DWORD2(v178);
    if (DWORD2(v178) >= v47)
      goto LABEL_210;
    v51 = v165;
    if (v165 <= v178)
      goto LABEL_211;
    if (v165 <= DWORD1(v178))
      goto LABEL_212;
    if (v165 <= DWORD2(v178))
      goto LABEL_213;
    v7 = HIDWORD(v178);
    if (HIDWORD(v178) == -1)
    {
      v73 = *(float32x4_t *)(v48 + 16 * v178);
      v74 = vsubq_f32(*(float32x4_t *)(v48 + 16 * DWORD1(v178)), v73);
      v75 = vsubq_f32(*(float32x4_t *)(v48 + 16 * DWORD2(v178)), v73);
      v76 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), (int8x16_t)v75, 0xCuLL), vnegq_f32(v74)), v75, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL));
      v77 = vmulq_f32(v76, v76);
      v81 = *(float32x2_t *)(v26 + 8 * DWORD1(v178));
      v78 = *(float32x2_t *)(v26 + 8 * v178);
      v61 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), v77)).f32[0]);
      v79 = vsub_f32(v81, v78);
      v80 = vsub_f32(*(float32x2_t *)(v26 + 8 * DWORD2(v178)), v78);
      v81.f32[0] = vmlas_n_f32((float)-v79.f32[1] * v80.f32[0], v80.f32[1], v79.f32[0]);
      if ((float)(v81.f32[0] * v81.f32[0]) > 0.0)
      {
        v82 = (float32x4_t)vdupq_lane_s32((int32x2_t)v81, 0);
        v70 = vdivq_f32(vsubq_f32(vmulq_lane_f32(v74, v80, 1), vmulq_lane_f32(v75, v79, 1)), v82);
        v71 = vdivq_f32(vsubq_f32(vmulq_n_f32(v75, v79.f32[0]), vmulq_n_f32(v74, v80.f32[0])), v82);
        v72 = 3;
        goto LABEL_92;
      }
      v71 = 0uLL;
      v72 = 3;
    }
    else
    {
      if (HIDWORD(v178) >= v47)
        goto LABEL_216;
      if (v165 <= HIDWORD(v178))
        goto LABEL_217;
      v52 = *(float32x4_t *)(v48 + 16 * HIDWORD(v178));
      v53 = *(float32x4_t *)(v48 + 16 * DWORD1(v178));
      v54 = vsubq_f32(v52, v53);
      v55 = *(float32x4_t *)(v48 + 16 * DWORD2(v178));
      v56 = *(float32x4_t *)(v48 + 16 * v178);
      v57 = vsubq_f32(v55, v56);
      v58 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL), vnegq_f32(v54)), v57, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL));
      v59 = vmulq_f32(v58, v58);
      v60 = *(float32x2_t *)(v26 + 8 * v178);
      v66 = *(float32x2_t *)(v26 + 8 * DWORD1(v178));
      v61 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), v59)).f32[0]);
      v62 = *(float32x2_t *)(v26 + 8 * DWORD2(v178));
      v63 = *(float32x2_t *)(v26 + 8 * HIDWORD(v178));
      v64 = vsub_f32(vadd_f32(vsub_f32(v66, v60), v62), v63);
      v65 = vsub_f32(vadd_f32(v62, vsub_f32(v63, v60)), v66);
      v66.f32[0] = vmlas_n_f32((float)-v64.f32[1] * v65.f32[0], v65.f32[1], v64.f32[0]);
      if ((float)(v66.f32[0] * v66.f32[0]) > 0.0)
      {
        v67 = vsubq_f32(vaddq_f32(v55, vsubq_f32(v52, v56)), v53);
        v68 = vsubq_f32(vaddq_f32(v55, vsubq_f32(v53, v56)), v52);
        v69 = (float32x4_t)vdupq_lane_s32((int32x2_t)v66, 0);
        v70 = vdivq_f32(vsubq_f32(vmulq_lane_f32(v68, v65, 1), vmulq_lane_f32(v67, v64, 1)), v69);
        v71 = vdivq_f32(vsubq_f32(vmulq_n_f32(v67, v64.f32[0]), vmulq_n_f32(v68, v65.f32[0])), v69);
        v72 = 4;
        goto LABEL_92;
      }
      v71 = 0uLL;
      v72 = 4;
    }
    v70 = 0uLL;
LABEL_92:
    v83 = 0;
    v84 = v61 * 0.5;
    v85 = vmulq_n_f32(v70, v84);
    v86 = vmulq_n_f32(v71, v84);
    v87 = 4 * v72;
    while (1)
    {
      a6 = *(unsigned int *)((char *)&v178 + v83);
      v6 = *(_QWORD *)&v185[16];
      if (*(_QWORD *)&v185[16] <= a6)
        break;
      *(float *)(*(_QWORD *)&v185[32] + 4 * a6) = v84 + *(float *)(*(_QWORD *)&v185[32] + 4 * a6);
      if (v13 <= a6)
        goto LABEL_114;
      *(float32x4_t *)(v12 + 16 * a6) = vaddq_f32(v85, *(float32x4_t *)(v12 + 16 * a6));
      if (a5 <= a6)
        goto LABEL_115;
      v37[a6] = vaddq_f32(v86, v37[a6]);
      v83 += 4;
      if (v87 == v83)
      {
        ++v49;
        a6 = *(_QWORD *)(a1 + 40);
        if (v49 >= a6)
          goto LABEL_98;
        goto LABEL_75;
      }
    }
    v170[0] = 0;
    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v182 = 136315906;
    *(_QWORD *)&v182[4] = "operator[]";
    *(_WORD *)&v182[12] = 1024;
    *(_DWORD *)&v182[14] = 789;
    *(_WORD *)&v182[18] = 2048;
    *(_QWORD *)&v182[20] = a6;
    v183 = 2048;
    *(_QWORD *)v184 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_114:
    v170[0] = 0;
    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v182 = 136315906;
    *(_QWORD *)&v182[4] = "operator[]";
    *(_WORD *)&v182[12] = 1024;
    *(_DWORD *)&v182[14] = 609;
    *(_WORD *)&v182[18] = 2048;
    *(_QWORD *)&v182[20] = a6;
    v183 = 2048;
    *(_QWORD *)v184 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_115:
    v170[0] = 0;
    v197 = 0u;
    v198 = 0u;
    v195 = 0u;
    v196 = 0u;
    v194 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v182 = 136315906;
    *(_QWORD *)&v182[4] = "operator[]";
    *(_WORD *)&v182[12] = 1024;
    *(_DWORD *)&v182[14] = 609;
    *(_WORD *)&v182[18] = 2048;
    *(_QWORD *)&v182[20] = a6;
    v183 = 2048;
    *(_QWORD *)v184 = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_116;
  }
  if (!a3 || a3[16] != 1)
    return 0;
  *(_QWORD *)v185 = 0;
  *(_QWORD *)&v185[8] = 0;
  *(_DWORD *)&v185[16] = 1;
  *(_QWORD *)&v185[24] = 0;
  *(_QWORD *)&v185[32] = 0;
  v14 = *(unsigned int *)(a1 + 16);
  if ((v14 & 0x3F) != 0)
    v15 = (v14 >> 6) + 1;
  else
    v15 = v14 >> 6;
  v186 = *(unsigned int *)(a1 + 16);
  v194.i64[0] = 0;
  re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)v185, v15, &v194);
  v16 = a1;
  if (*(_DWORD *)(a1 + 16))
  {
    v17 = 0;
    v16 = a1;
    do
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v185, v17++);
    while (v17 < *(unsigned int *)(a1 + 16));
  }
  *(_QWORD *)&v184[2] = 0;
  memset(v182, 0, sizeof(v182));
  v181 = 0;
  v179 = 0;
  v178 = 0uLL;
  v180 = 0;
  re::computeVertexFaceConnectivity(v16, (uint64_t)v182, (unint64_t)&v178);
  v173 = 0;
  v170[1] = 0;
  v171 = 0;
  v170[0] = 0;
  v172 = 0;
  re::DynamicArray<float>::resize((uint64_t)v170, *(unsigned int *)(v16 + 16));
  v169 = 0;
  v166[1] = 0;
  v167 = 0;
  v166[0] = 0;
  v168 = 0;
  v18 = *(_QWORD *)&v185[8];
  if ((*(_QWORD *)&v185[8] & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    v19 = (unint64_t)&v185[24];
    v20 = *(_BYTE **)&v185[32];
    if ((v185[16] & 1) != 0)
      v20 = &v185[24];
    a6 = 2139095040;
    do
    {
      v21 = 0;
      while (1)
      {
        v23 = *(_QWORD *)v20;
        v20 += 8;
        v22 = v23;
        if (v23)
          break;
        v21 -= 64;
        if (!--v18)
          goto LABEL_55;
      }
      v24 = __clz(__rbit64(v22));
      if (v24 + 1 == v21)
        break;
      v13 = v24 - v21;
      v12 = 0xFFFFFFFFLL;
      v25 = -1;
      do
      {
        v26 = v13;
        v6 = v179;
        if (v179 <= v13)
          goto LABEL_218;
        if ((_DWORD)v13)
        {
          v7 = (v13 - 1);
          if (v179 <= v7)
            goto LABEL_230;
          v27 = *(_DWORD *)(v181 + 4 * v7);
        }
        else
        {
          v27 = 0;
        }
        v28 = *(_DWORD *)(v181 + 4 * v13) - v27;
        if (v28)
        {
          if ((_DWORD)v12 == -1 || v28 < v25)
          {
            v25 = v28;
            v12 = v13;
          }
          else
          {
            v12 = v12;
          }
        }
        else
        {
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v185, v13);
        }
        FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v185, v13 + 1);
        v13 = FirstBitSet;
      }
      while (v25 >= 2 && FirstBitSet != -1);
      if ((_DWORD)v12 == -1)
        break;
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v185, v12);
      v194.i64[0] = *(_QWORD *)&v184[2];
      v194.i64[1] = *(_QWORD *)&v182[16];
      *(_QWORD *)v175 = v181;
      *(_QWORD *)&v175[8] = v179;
      re::computeManhattanDistanceToVertex(a1, v12, &v194, v175, (uint64_t)v166);
      v13 = v167;
      if (v167)
      {
        v12 = 0;
        v33 = 1;
        v34 = v169;
        do
        {
          if (*(float *)(v34 + 4 * v12) != INFINITY)
          {
            re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v185, v12);
            v13 = v167;
            if (v167 <= v12)
              goto LABEL_232;
            v26 = v171;
            if (v171 <= v12)
            {
LABEL_233:
              *(_QWORD *)v187 = 0;
              v197 = 0u;
              v198 = 0u;
              v195 = 0u;
              v196 = 0u;
              v194 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v175 = 136315906;
              *(_QWORD *)&v175[4] = "operator[]";
              *(_WORD *)&v175[12] = 1024;
              *(_DWORD *)&v175[14] = 789;
              *(_WORD *)&v175[18] = 2048;
              *(_QWORD *)&v175[20] = v12;
              v176 = 2048;
              *(_QWORD *)v177 = v26;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v34 = v169;
            *(_DWORD *)(v173 + 4 * v12) = *(_DWORD *)(v169 + 4 * v12);
          }
          v12 = v33;
        }
        while (v13 > v33++);
      }
      v20 = (v185[16] & 1) != 0 ? &v185[24] : *(_BYTE **)&v185[32];
      v18 = *(_QWORD *)&v185[8];
    }
    while ((*(_QWORD *)&v185[8] & 0x3FFFFFFFFFFFFFFLL) != 0);
  }
LABEL_55:
  *(_QWORD *)&v177[2] = 0;
  memset(v175, 0, sizeof(v175));
  v194.i64[0] = v173;
  v194.i64[1] = v171;
  re::computeGradientField((unint64_t *)a1, &v194, (uint64_t)v175);
  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a3 + 16))(a3))
  {
    v12 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[]((uint64_t)a3, 0);
    LODWORD(v13) = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a3 + 16))(a3);
  }
  else
  {
    LODWORD(v13) = 0;
    v12 = 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4))
  {
    v95 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a4, 0);
    LODWORD(v26) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  }
  else
  {
    LODWORD(v26) = 0;
    v95 = 0;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5))
  {
    v96 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a5, 0);
    a5 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
  }
  else
  {
    a5 = 0;
    v96 = 0;
  }
  if (*(_DWORD *)(a1 + 16))
  {
    a6 = 0;
    v13 = v13;
    v26 = v26;
    while (1)
    {
      if (a6 == v13)
        goto LABEL_226;
      if (a6 == v26)
        goto LABEL_227;
      if (a6 == a5)
        goto LABEL_228;
      v97 = (_QWORD *)(v95 + 16 * a6);
      *v97 = 0;
      v97[1] = 0;
      v6 = v179;
      if (a6)
      {
        v7 = a6 - 1;
        if (v179 <= a6 - 1)
          goto LABEL_231;
        v7 = *(unsigned int *)(v181 + 4 * v7);
      }
      else
      {
        v7 = 0;
      }
      if (v179 <= a6)
        goto LABEL_229;
      v98 = *(unsigned int *)(v181 + 4 * a6);
      v99 = 0uLL;
      if (v7 < v98)
      {
        while (1)
        {
          v6 = *(_QWORD *)&v182[16];
          if (*(_QWORD *)&v182[16] <= v7)
            break;
          v6 = *(unsigned int *)(*(_QWORD *)&v184[2] + 4 * v7);
          v100 = *(_QWORD *)&v175[16];
          if (*(_QWORD *)&v175[16] <= v6)
            goto LABEL_203;
          v99 = vaddq_f32(v99, *(float32x4_t *)(*(_QWORD *)&v177[2] + 16 * v6));
          *(float32x4_t *)(v95 + 16 * a6) = v99;
          if (v98 == ++v7)
            goto LABEL_138;
        }
        v174 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v100 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(_QWORD *)&v187[4] = "operator[]";
        v188 = 1024;
        v189 = 789;
        v190 = 2048;
        v191 = v7;
        v192 = 2048;
        v193 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_203:
        v174 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v39 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(_QWORD *)&v187[4] = "operator[]";
        v188 = 1024;
        v189 = 789;
        v190 = 2048;
        v191 = v6;
        v192 = 2048;
        v193 = v100;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_204:
        *(_QWORD *)v182 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v185 = 136315906;
        *(_QWORD *)&v185[4] = "operator[]";
        *(_WORD *)&v185[12] = 1024;
        *(_DWORD *)&v185[14] = 609;
        *(_WORD *)&v185[18] = 2048;
        *(_QWORD *)&v185[20] = v39;
        *(_WORD *)&v185[28] = 2048;
        *(_QWORD *)&v185[30] = v39;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_205:
        *(_QWORD *)v182 = 0;
        v49 = (unint64_t)&v178;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v185 = 136315906;
        *(_QWORD *)&v185[4] = "operator[]";
        *(_WORD *)&v185[12] = 1024;
        *(_DWORD *)&v185[14] = 609;
        *(_WORD *)&v185[18] = 2048;
        *(_QWORD *)&v185[20] = v26;
        *(_WORD *)&v185[28] = 2048;
        *(_QWORD *)&v185[30] = v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_206:
        *(_QWORD *)&v178 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 789;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v49;
        v183 = 2048;
        *(_QWORD *)v184 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_207:
        *(_QWORD *)&v178 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v50 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 797;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v49;
        v183 = 2048;
        *(_QWORD *)v184 = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_208:
        v170[0] = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v152 = v47;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v50;
        v183 = 2048;
        *(_QWORD *)v184 = v152;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_209:
        v170[0] = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v153 = v47;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = a6;
        v183 = 2048;
        *(_QWORD *)v184 = v153;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_210:
        v170[0] = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v50 = MEMORY[0x24BDACB70];
        v154 = v47;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v6;
        v183 = 2048;
        *(_QWORD *)v184 = v154;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_211:
        v170[0] = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v155 = v51;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v50;
        v183 = 2048;
        *(_QWORD *)v184 = v155;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_212:
        v170[0] = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v156 = v51;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = a6;
        v183 = 2048;
        *(_QWORD *)v184 = v156;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_213:
        v170[0] = 0;
        v49 = (unint64_t)&v178;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v157 = v51;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v6;
        v183 = 2048;
        *(_QWORD *)v184 = v157;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_214:
        *(_QWORD *)&v178 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v49;
        v183 = 2048;
        *(_QWORD *)v184 = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_215:
        *(_QWORD *)&v178 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v49;
        v183 = 2048;
        *(_QWORD *)v184 = v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_216:
        v170[0] = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v158 = v47;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v7;
        v183 = 2048;
        *(_QWORD *)v184 = v158;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_217:
        v170[0] = 0;
        v19 = (unint64_t)&v178;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        v159 = v51;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v7;
        v183 = 2048;
        *(_QWORD *)v184 = v159;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_218:
        *(_QWORD *)v187 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v175 = 136315906;
        *(_QWORD *)&v175[4] = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)&v175[14] = 789;
        *(_WORD *)&v175[18] = 2048;
        *(_QWORD *)&v175[20] = v26;
        v176 = 2048;
        *(_QWORD *)v177 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_219:
        *(_QWORD *)&v178 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v19;
        v183 = 2048;
        *(_QWORD *)v184 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_220:
        *(_QWORD *)&v178 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v19;
        v183 = 2048;
        *(_QWORD *)v184 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_221:
        *(_QWORD *)&v178 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v19;
        v183 = 2048;
        *(_QWORD *)v184 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_222:
        *(_QWORD *)&v178 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = a6;
        v183 = 2048;
        *(_QWORD *)v184 = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_223:
        *(_QWORD *)&v178 = 0;
        v94 = &v178;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v13;
        v183 = 2048;
        *(_QWORD *)v184 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_224:
        *(_QWORD *)&v178 = 0;
        v12 = (unint64_t)&v178;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 601;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v94;
        v183 = 2048;
        *(_QWORD *)v184 = v94;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_225:
        *(_QWORD *)&v178 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v182 = 136315906;
        *(_QWORD *)&v182[4] = "operator[]";
        *(_WORD *)&v182[12] = 1024;
        *(_DWORD *)&v182[14] = 609;
        *(_WORD *)&v182[18] = 2048;
        *(_QWORD *)&v182[20] = v6;
        v183 = 2048;
        *(_QWORD *)v184 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_226:
        v174 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(_QWORD *)&v187[4] = "operator[]";
        v188 = 1024;
        v189 = 601;
        v190 = 2048;
        v191 = v13;
        v192 = 2048;
        v193 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_227:
        v174 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(_QWORD *)&v187[4] = "operator[]";
        v188 = 1024;
        v189 = 609;
        v190 = 2048;
        v191 = v26;
        v192 = 2048;
        v193 = v26;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_228:
        v174 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(_QWORD *)&v187[4] = "operator[]";
        v188 = 1024;
        v189 = 609;
        v190 = 2048;
        v191 = a5;
        v192 = 2048;
        v193 = a5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_229:
        v174 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(_QWORD *)&v187[4] = "operator[]";
        v188 = 1024;
        v189 = 789;
        v190 = 2048;
        v191 = a6;
        v192 = 2048;
        v193 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_230:
        *(_QWORD *)v187 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v175 = 136315906;
        *(_QWORD *)&v175[4] = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)&v175[14] = 789;
        *(_WORD *)&v175[18] = 2048;
        *(_QWORD *)&v175[20] = v7;
        v176 = 2048;
        *(_QWORD *)v177 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_231:
        v174 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v187 = 136315906;
        *(_QWORD *)&v187[4] = "operator[]";
        v188 = 1024;
        v189 = 789;
        v190 = 2048;
        v191 = v7;
        v192 = 2048;
        v193 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_232:
        *(_QWORD *)v187 = 0;
        v197 = 0u;
        v198 = 0u;
        v195 = 0u;
        v196 = 0u;
        v194 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v175 = 136315906;
        *(_QWORD *)&v175[4] = "operator[]";
        *(_WORD *)&v175[12] = 1024;
        *(_DWORD *)&v175[14] = 789;
        *(_WORD *)&v175[18] = 2048;
        *(_QWORD *)&v175[20] = v12;
        v176 = 2048;
        *(_QWORD *)v177 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_233;
      }
LABEL_138:
      v101 = *(float32x4_t *)(v12 + 16 * a6);
      v102 = vmulq_f32(v99, v101);
      v103 = vsubq_f32(v99, vmulq_n_f32(v101, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 2), vaddq_f32(v102, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v102.f32, 1))).f32[0]));
      *(float32x4_t *)(v95 + 16 * a6) = v103;
      v104 = vmulq_f32(v103, v103);
      v105 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 2), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1))).f32[0]);
      if (v105 > 0.00001)
        break;
      v107 = *(float32x4_t *)(v12 + 16 * a6);
      v108 = vmulq_f32(v107, v107);
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2), vaddq_f32(v108, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1))).f32[0] > 0.0)
      {
        if (fabsf(v107.f32[2]) >= 0.00001)
        {
          v103.i32[0] = 0;
          v103.f32[1] = -v107.f32[2];
          v103.i64[1] = v107.u32[1];
        }
        else
        {
          v103 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v107.f32[1]), (int32x4_t)v107);
        }
        v111 = (int32x4_t)vmulq_f32(v103, v103);
        v111.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v111, 2), vadd_f32(*(float32x2_t *)v111.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1))).u32[0];
        v112 = vrsqrte_f32((float32x2_t)v111.u32[0]);
        v113 = vmul_f32(v112, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v112, v112)));
        LODWORD(v106) = vmul_f32(v113, vrsqrts_f32((float32x2_t)v111.u32[0], vmul_f32(v113, v113))).u32[0];
        goto LABEL_146;
      }
      v109 = (_QWORD *)(v95 + 16 * a6);
      *v109 = 0;
      v109[1] = 0;
      v110 = 0uLL;
LABEL_147:
      v114 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), (int8x16_t)v110, 0xCuLL), vnegq_f32(*(float32x4_t *)(v12 + 16 * a6))), v110, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(v12 + 16 * a6), *(int32x4_t *)(v12 + 16 * a6)), *(int8x16_t *)(v12 + 16 * a6), 0xCuLL));
      *(int8x16_t *)(v96 + 16 * a6++) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v114, (int32x4_t)v114), v114, 0xCuLL);
      if (a6 >= *(unsigned int *)(a1 + 16))
        goto LABEL_148;
    }
    v106 = 1.0 / v105;
LABEL_146:
    v110 = vmulq_n_f32(v103, v106);
    *(float32x4_t *)(v95 + 16 * a6) = v110;
    goto LABEL_147;
  }
LABEL_148:
  if (*(_QWORD *)v175 && *(_QWORD *)&v177[2])
    (*(void (**)(void))(**(_QWORD **)v175 + 40))();
  if (v166[0] && v169)
    (*(void (**)(void))(*(_QWORD *)v166[0] + 40))();
  if (v170[0] && v173)
    (*(void (**)(void))(*(_QWORD *)v170[0] + 40))();
  if ((_QWORD)v178 && v181)
    (*(void (**)(void))(*(_QWORD *)v178 + 40))();
  if (*(_QWORD *)v182 && *(_QWORD *)&v184[2])
    (*(void (**)(void))(**(_QWORD **)v182 + 40))();
  v115 = *(_QWORD *)v185;
  if (!*(_QWORD *)v185 || (v185[16] & 1) != 0)
    return 1;
  v116 = *(_QWORD *)&v185[32];
LABEL_200:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v115 + 40))(v115, v116);
  return 1;
}

uint64_t re::computeTangentsAndBitangents(unsigned int *a1, const char *a2, char *a3, char *a4, char *a5, unint64_t a6)
{
  uint64_t v12;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  re::GeomAttribute *v17;
  re::GeomAttribute *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  re::GeomAttribute *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  re::GeomAttribute *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  unsigned int v34;
  unsigned int v35;
  _OWORD *v36;
  int v37;
  _OWORD *v38;
  int v39;
  __int128 *v40;
  re::GeomAttribute *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47[2];
  uint64_t v48;
  int v49;
  re::GeomAttribute *v50;
  uint64_t v51[2];
  uint64_t v52;
  int v53;
  re::GeomAttribute *v54;
  _BYTE v55[16];
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[672];
  _QWORD v60[2];
  uint64_t v61;
  int v62;
  uint64_t v63;
  _BYTE v64[16];
  char *v65;
  const char *v66;
  uint64_t v67;
  int v68;
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v66 = a2;
  v65 = a5;
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v64, 4522, a1[4]);
  if (a2 && a3 && !strcmp(a2, a3)
    || a2 && a4 && !strcmp(a2, a4)
    || a2 && a5 && !strcmp(a2, a5)
    || a3 && a4 && !strcmp(a3, a4)
    || a3 && a5 && !strcmp(a3, a5)
    || a4 && a5 && !strcmp(a4, a5)
    || re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 16), a3)
    || re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 16), a4))
  {
    v12 = 0;
    goto LABEL_22;
  }
  if (v66)
    v14 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 16), v66);
  else
    v14 = 0;
  if (v65)
    v15 = (unsigned __int8 *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a1 + 16), v65);
  else
    v15 = 0;
  v63 = 0;
  v61 = 0;
  v60[0] = 0;
  v60[1] = 0;
  v62 = 0;
  if (v14 && *(_BYTE *)(v14 + 16) == 3)
    re::DynamicArray<re::TransitionCondition *>::add(v60, &v66);
  if (v15)
  {
    if (v15[16] == 3)
      re::DynamicArray<re::TransitionCondition *>::add(v60, &v65);
  }
  else
  {
    v12 = 0;
    if (!v14 || *(_BYTE *)(a6 + 4))
      goto LABEL_62;
  }
  if (v61)
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)v55, 0);
    re::internal::buildMeshByConvertingFaceVaryingToVertexHelper((unint64_t)a1, (uint64_t)v60, 0, (unint64_t)v55);
    if (v15)
      v16 = (unsigned __int8 *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v59, v65);
    else
      v16 = 0;
    v19 = (uint64_t)re::GeomMesh::addAttribute((uint64_t)v55, a3, 1, 7);
    v20 = (uint64_t)re::GeomMesh::addAttribute((uint64_t)v55, a4, 1, 7);
    v21 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v59, v66);
    re::computeVertexTangentsAndBitangentsInternal((uint64_t)v55, v21, v16, v19, v20, a6);
    v22 = a1[10];
    v54 = 0;
    v51[1] = 0;
    v52 = 0;
    v50 = 0;
    v51[0] = 0;
    v53 = 0;
    v47[1] = 0;
    v48 = 0;
    v47[0] = 0;
    v49 = 0;
    re::DynamicArray<re::GeomCell4>::resize(v51, v22);
    re::DynamicArray<float>::resize((uint64_t)v47, v22);
    if (v22)
    {
      v23 = 0;
      v24 = v48;
      v25 = v50;
      v26 = v57;
      v27 = v58;
      v28 = v52;
      v29 = v54;
      while (v24 != v23)
      {
        *((_DWORD *)v25 + v23) = v23;
        if (v26 == v23)
          goto LABEL_66;
        if (v28 == v23)
          goto LABEL_67;
        *((_OWORD *)v29 + v23) = *(_OWORD *)(v27 + 16 * v23);
        if (v22 == ++v23)
          goto LABEL_48;
      }
      v67 = 0;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v76 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v68 = 136315906;
      v69 = "operator[]";
      v70 = 1024;
      v71 = 789;
      v72 = 2048;
      v73 = v24;
      v74 = 2048;
      v75 = v24;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_66:
      v67 = 0;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v76 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v68 = 136315906;
      v69 = "operator[]";
      v70 = 1024;
      v71 = 797;
      v72 = 2048;
      v73 = v26;
      v74 = 2048;
      v75 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_67:
      v67 = 0;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v76 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v68 = 136315906;
      v69 = "operator[]";
      v70 = 1024;
      v71 = 789;
      v72 = 2048;
      v73 = v28;
      v74 = 2048;
      v75 = v28;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_68:
      v67 = 0;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v76 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v68 = 136315906;
      v69 = "operator[]";
      v70 = 1024;
      v71 = 601;
      v72 = 2048;
      v73 = v19;
      v74 = 2048;
      v75 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      v67 = 0;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v76 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v68 = 136315906;
      v69 = "operator[]";
      v70 = 1024;
      v71 = 609;
      v72 = 2048;
      v73 = v20;
      v74 = 2048;
      v75 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      v67 = 0;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v76 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v68 = 136315906;
      v69 = "operator[]";
      v70 = 1024;
      v71 = 601;
      v72 = 2048;
      v73 = v24;
      v74 = 2048;
      v75 = v24;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_71:
      v67 = 0;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v76 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v68 = 136315906;
      v69 = "operator[]";
      v70 = 1024;
      v71 = 609;
      v72 = 2048;
      v73 = v26;
      v74 = 2048;
      v75 = v26;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_48:
    v30 = v56;
    v31 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)a1, a3, 7, v56, v51, v47);
    v32 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)a1, a4, 7, v30, v51, v47);
    v33 = (_OWORD *)re::GeomAttribute::modifyValues<re::Vector3<float>>(v31);
    v35 = v34;
    v36 = (_OWORD *)re::GeomAttribute::modifyValues<re::Vector3<float>>(v32);
    LODWORD(v26) = v37;
    v38 = (_OWORD *)re::GeomAttribute::accessValues<re::Vector3<float>>(v19);
    LODWORD(v19) = v39;
    v40 = (__int128 *)re::GeomAttribute::accessValues<re::Vector3<float>>(v20);
    if ((_DWORD)v30)
    {
      v19 = v19;
      v20 = v35;
      v24 = v41;
      v26 = v26;
      v42 = v19;
      v43 = v20;
      v44 = v41;
      v45 = v26;
      while (v42)
      {
        if (!v43)
          goto LABEL_69;
        *v33 = *v38;
        if (!v44)
          goto LABEL_70;
        if (!v45)
          goto LABEL_71;
        v46 = *v40++;
        *v36++ = v46;
        --v45;
        ++v38;
        ++v33;
        --v44;
        --v43;
        --v42;
        if (!--v30)
          goto LABEL_55;
      }
      goto LABEL_68;
    }
LABEL_55:
    if (v47[0])
    {
      v41 = v50;
      if (v50)
        (*(void (**)(void))(*(_QWORD *)v47[0] + 40))();
    }
    if (v51[0])
    {
      v41 = v54;
      if (v54)
        (*(void (**)(void))(*(_QWORD *)v51[0] + 40))();
    }
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v55, v41);
    v12 = 1;
  }
  else
  {
    v17 = re::GeomMesh::addAttribute((uint64_t)a1, a3, 1, 7);
    v18 = re::GeomMesh::addAttribute((uint64_t)a1, a4, 1, 7);
    v12 = re::computeVertexTangentsAndBitangentsInternal((uint64_t)a1, v14, v15, (uint64_t)v17, (uint64_t)v18, a6);
  }
LABEL_62:
  if (v60[0] && v63)
    (*(void (**)(void))(*(_QWORD *)v60[0] + 40))();
LABEL_22:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v64);
  return v12;
}

unint64_t re::`anonymous namespace'::evalAreaWeightedTriangleNormal(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;

  v3 = *a3;
  if (v3 >= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_6;
  }
  v4 = a3[1];
  if (v4 >= a2)
  {
LABEL_6:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_7:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = a3[2];
  if (v5 >= a2)
    goto LABEL_7;
  v6 = *(float32x4_t *)(a1 + 16 * v3);
  v7 = vsubq_f32(*(float32x4_t *)(a1 + 16 * v4), v6);
  v8 = vsubq_f32(*(float32x4_t *)(a1 + 16 * v5), v6);
  v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), vnegq_f32(v7)), v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  v8.i64[0] = 0x3F0000003F000000;
  v8.i64[1] = 0x3F0000003F000000;
  v10 = (int8x16_t)vmulq_f32(v9, v8);
  return vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL).u64[0];
}

unint64_t re::`anonymous namespace'::evalAreaWeightedQuadrilateralNormal(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;

  v3 = *a3;
  if (v3 >= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_7;
  }
  v4 = a3[1];
  if (v4 >= a2)
  {
LABEL_7:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_8;
  }
  v5 = a3[2];
  if (v5 >= a2)
  {
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = a3[3];
  if (v6 >= a2)
    goto LABEL_9;
  v7 = vsubq_f32(*(float32x4_t *)(a1 + 16 * v5), *(float32x4_t *)(a1 + 16 * v3));
  v8 = vsubq_f32(*(float32x4_t *)(a1 + 16 * v6), *(float32x4_t *)(a1 + 16 * v4));
  v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), vnegq_f32(v7)), v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  v8.i64[0] = 0x3F0000003F000000;
  v8.i64[1] = 0x3F0000003F000000;
  v10 = (int8x16_t)vmulq_f32(v9, v8);
  return vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL).u64[0];
}

int32x4_t *re::`anonymous namespace'::makeOrthonormalFrame(int32x4_t *result, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  float v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;

  v3 = *(float32x4_t *)result;
  v4 = vmulq_f32(v3, v3);
  v5 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1)));
  v6 = *a2;
  v7 = *a2;
  if (v5.f32[0] > 0.0)
  {
    v8 = vmulq_f32(v3, v6);
    v7 = vmulq_n_f32(v3, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))), v5).f32[0]);
  }
  v9 = vsubq_f32(v6, v7);
  v10 = vmulq_f32(v9, v9);
  *a2 = v9;
  v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
  if (v11 <= 0.0)
  {
    v17 = *(float32x4_t *)result;
    v18 = vmulq_f32(v17, v17);
    v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1)));
    v20 = *a3;
    v21 = *a3;
    if (v19.f32[0] > 0.0)
    {
      v22 = vmulq_f32(v17, v20);
      v21 = vmulq_n_f32(v17, vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))), v19).f32[0]);
    }
    v23 = vsubq_f32(v20, v21);
    v24 = vmulq_f32(v23, v23);
    v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0];
    if (v25 <= 0.0)
    {
      a3->i64[0] = 0;
      a3->i64[1] = 0;
      v31 = *(int8x16_t *)a3;
    }
    else
    {
      v26 = v25;
      v27 = vrsqrte_f32((float32x2_t)LODWORD(v25));
      v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)LODWORD(v26), vmul_f32(v27, v27)));
      v29 = vmulq_n_f32(v23, vmul_f32(v28, vrsqrts_f32((float32x2_t)LODWORD(v26), vmul_f32(v28, v28))).f32[0]);
      *a3 = v29;
      v30 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*result, *result), *(int8x16_t *)result, 0xCuLL), vnegq_f32(v29)), *(float32x4_t *)result, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL));
      v31 = vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL);
    }
    *a2 = (float32x4_t)v31;
  }
  else
  {
    v12 = v11;
    v13 = vrsqrte_f32((float32x2_t)LODWORD(v11));
    v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
    v15 = vmulq_n_f32(v9, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
    *a2 = v15;
    v16 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), vnegq_f32(*(float32x4_t *)result)), v15, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*result, *result), *(int8x16_t *)result, 0xCuLL));
    *(int8x16_t *)a3 = vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL);
  }
  return result;
}

void re::`anonymous namespace'::triangulateHelper(uint64_t a1, re::GeomMesh *a2, uint64_t a3)
{
  unint64_t v3;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  re::GeomAttribute *v34;
  re::GeomAttribute *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  const re::GeomAttribute *v42;
  uint64_t v43;
  _anonymous_namespace_ *v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  re *v65;
  _BYTE *v66;
  uint64_t v67;
  re::GeomMesh *v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80[3];
  int v81;
  uint64_t v82;
  _QWORD v83[2];
  unint64_t v84;
  int v85;
  uint64_t v86;
  _QWORD v87[3];
  int v88;
  uint64_t v89;
  _BYTE v90[16];
  _QWORD v91[2];
  unint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t *v106;
  _BYTE v107[40];
  uint64_t v108;
  _BYTE v109[28];
  __int16 v110;
  _BYTE v111[10];
  _DWORD v112[6];
  _DWORD v113[6];
  int v114;
  const char *v115;
  __int16 v116;
  int v117;
  __int16 v118;
  unint64_t v119;
  __int16 v120;
  unint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v7 = (_anonymous_namespace_ *)(a1 + 16);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v90, 4524, *(unsigned int *)(a1 + 16));
  v8 = *((_QWORD *)v7 + 3);
  if (*((_DWORD *)v7 - 2) != (_DWORD)v8)
  {
    v12 = (unint64_t)v107;
    v89 = 0;
    v13 = v8;
    v86 = 0;
    memset(v87, 0, sizeof(v87));
    v88 = 0;
    v83[1] = 0;
    v84 = 0;
    v83[0] = 0;
    v85 = 0;
    LODWORD(v96) = 0;
    re::DynamicArray<unsigned int>::resize(v83, v8, &v96);
    LOBYTE(v96) = 0;
    v14 = (_anonymous_namespace_ *)re::DynamicArray<unsigned char>::resize(v87, v8, &v96);
    v69 = v8;
    if ((_DWORD)v8)
    {
      v15 = 0;
      v16 = 0;
      v17 = v84;
      v18 = v86;
      v19 = *(_QWORD *)(a1 + 40);
      v20 = (int *)(*(_QWORD *)(a1 + 56) + 12);
      while (1)
      {
        if (v17 == v15)
          goto LABEL_120;
        *(_DWORD *)(v18 + 4 * v15) = v16;
        if (v19 == v15)
          break;
        v21 = *v20;
        v20 += 4;
        if (v21 == -1)
          v22 = 1;
        else
          v22 = 2;
        v16 += v22;
        if (v13 == ++v15)
          goto LABEL_19;
      }
LABEL_121:
      *(_QWORD *)v107 = 0;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v96 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v122) = 136315906;
      *(_QWORD *)(v12 + 196) = "operator[]";
      WORD6(v122) = 1024;
      *(_DWORD *)(v12 + 206) = 797;
      WORD1(v123) = 2048;
      *(_QWORD *)(v12 + 212) = v19;
      WORD6(v123) = 2048;
      *(_QWORD *)(v12 + 222) = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_122:
      v91[0] = 0;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v122 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v109 = 136315906;
      *(_QWORD *)&v109[4] = "operator[]";
      *(_WORD *)&v109[12] = 1024;
      *(_DWORD *)&v109[14] = 789;
      *(_WORD *)&v109[18] = 2048;
      *(_QWORD *)&v109[20] = a3;
      v110 = 2048;
      *(_QWORD *)v111 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_123:
      v91[0] = 0;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v122 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v109 = 136315906;
      *(_QWORD *)&v109[4] = "operator[]";
      *(_WORD *)&v109[12] = 1024;
      *(_DWORD *)&v109[14] = 797;
      *(_WORD *)&v109[18] = 2048;
      *(_QWORD *)&v109[20] = v12;
      v110 = 2048;
      *(_QWORD *)v111 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_124:
      v91[0] = 0;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v122 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v109 = 136315906;
      *(_QWORD *)&v109[4] = "operator[]";
      *(_WORD *)&v109[12] = 1024;
      *(_DWORD *)&v109[14] = 789;
      *(_WORD *)&v109[18] = 2048;
      *(_QWORD *)&v109[20] = v19;
      v110 = 2048;
      *(_QWORD *)v111 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_125:
      re::internal::assertLog((re::internal *)4, v45, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
      _os_crash();
      __break(1u);
    }
LABEL_19:
    v68 = a2;
    v79 = 0;
    v82 = 0;
    v80[1] = 0;
    v80[2] = 0;
    v81 = 0;
    re::DynamicArray<re::BlendNode>::setCapacity(v80, 1uLL);
    ++v81;
    v73 = v79;
    re::DynamicArray<re::GeomCell4>::DynamicArray((uint64_t)&v74, v80);
    v23 = v75;
    if (!v75)
    {
      re::DynamicArray<re::BlendNode>::setCapacity(&v74, 1uLL);
      v23 = v75;
    }
    v24 = *(unsigned int *)(a1 + 40);
    LODWORD(v96) = v73;
    *((_QWORD *)&v96 + 1) = v74;
    *(_QWORD *)&v97 = v23;
    *((_QWORD *)&v97 + 1) = v76;
    *((_QWORD *)&v98 + 1) = v78;
    v78 = 0;
    LODWORD(v98) = 1;
    v75 = 0;
    v76 = 0;
    v74 = 0;
    v77 += 2;
    re::internal::GeomAttributeManager::GeomAttributeManager((re::internal::GeomAttributeManager *)&v99);
    v101 = v96;
    if (v102)
    {
      v25 = v103;
      v26 = 8 * v102;
      do
      {
        v27 = *v25++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v27 + 72))(v27, v101);
        v26 -= 8;
      }
      while (v26);
    }
    v66 = (_BYTE *)v13;
    v67 = a3;
    v104 = DWORD2(v97);
    if (v105)
    {
      v28 = v106;
      v29 = 8 * v105;
      do
      {
        v30 = *v28++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v30 + 72))(v30, v104);
        v29 -= 8;
      }
      while (v29);
    }
    re::internal::addAndCopyAttributeValues((uint64_t)v7, (_anonymous_namespace_ *)&v96, 0);
    re::internal::addAndCopyAttributeValues((uint64_t)v7, (_anonymous_namespace_ *)&v96, 1);
    re::internal::addAndCopyAttributeValues((uint64_t)v7, (_anonymous_namespace_ *)&v96, 4);
    v31 = *(_DWORD *)(a1 + 312);
    if (v31)
    {
      v32 = 0;
      while (1)
      {
        v33 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a1 + 288), v32);
        v34 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v99, *(char **)(v33 + 8), 2, *(unsigned __int8 *)(v33 + 17));
        if (v24)
          break;
LABEL_36:
        if (++v32 == v31)
          goto LABEL_37;
      }
      v35 = v34;
      v36 = 0;
      v37 = 0;
      v38 = 12;
      while (1)
      {
        v39 = *(_QWORD *)(a1 + 40);
        if (v39 <= v36)
          break;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) == -1)
        {
          v3 = (v37 + 1);
          v40 = 1;
        }
        else
        {
          v113[1] = v36;
          v3 = (v37 + 2);
          v112[1] = v37 + 1;
          v40 = 2;
        }
        v113[0] = v36;
        v112[0] = v37;
        (*(void (**)(uint64_t, re::GeomAttribute *, uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)v33 + 40))(v33, v35, v40, v113, v112);
        ++v36;
        v38 += 16;
        v37 = v3;
        if (v24 == v36)
          goto LABEL_36;
      }
      *(_QWORD *)v109 = 0;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      v122 = 0u;
      v58 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v107 = 136315906;
      *(_QWORD *)&v107[4] = "operator[]";
      *(_WORD *)&v107[12] = 1024;
      *(_DWORD *)&v107[14] = 797;
      *(_WORD *)&v107[18] = 2048;
      *(_QWORD *)&v107[20] = v36;
      *(_WORD *)&v107[28] = 2048;
      *(_QWORD *)&v107[30] = v39;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_95;
    }
LABEL_37:
    v70 = *(_DWORD *)(a1 + 424);
    if (!v70)
    {
LABEL_70:
      v58 = (uint64_t)v68;
      if (v74)
      {
        if (v78)
          (*(void (**)(void))(*(_QWORD *)v74 + 40))();
        v78 = 0;
        v75 = 0;
        v76 = 0;
        v74 = 0;
        ++v77;
      }
      if (!v67)
      {
LABEL_103:
        v65 = (re *)re::GeomMesh::operator=(v58, &v96);
        re::GeomMesh::setName(v65, *(const char **)a1);
        re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)&v99);
        if (*((_QWORD *)&v96 + 1) && *((_QWORD *)&v98 + 1))
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v96 + 1) + 40))(*((_QWORD *)&v96 + 1), *((_QWORD *)&v98 + 1));
        if (v80[0] && v82)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v80[0] + 40))(v80[0], v82);
        if (v83[0] && v86)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v83[0] + 40))(v83[0], v86);
        v11 = v87[0];
        if (!v87[0] || !v89)
          goto LABEL_115;
LABEL_114:
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
LABEL_115:
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v90);
        return;
      }
      v59 = (*(_DWORD *)(a1 + 8) + 2 * (*(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 8)));
      *(_QWORD *)&v107[32] = 0;
      memset(v107, 0, 28);
      re::DynamicArray<unsigned int>::resize(v107, v59, &re::kInvalidMeshIndex);
      if (v69)
      {
        v60 = 0;
        v19 = 0;
        v17 = *(_QWORD *)&v107[16];
        v61 = *(_QWORD *)&v107[32];
        v12 = *(_QWORD *)(a1 + 40);
        v62 = (_DWORD *)(*(_QWORD *)(a1 + 56) + 12);
        do
        {
          a3 = v19;
          if (v17 <= v19)
            goto LABEL_122;
          *(_DWORD *)(v61 + 4 * v19) = (_DWORD)v60;
          if ((_BYTE *)v12 == v60)
            goto LABEL_123;
          if (*v62 != -1)
          {
            v19 = (v19 + 1);
            if (v17 <= v19)
              goto LABEL_124;
            *(_DWORD *)(v61 + 4 * v19) = (_DWORD)v60;
          }
          ++v60;
          v19 = (v19 + 1);
          v62 += 4;
        }
        while (v66 != v60);
      }
      re::GeomIndexMap::GeomIndexMap((uint64_t)&v122, (uint64_t)v107);
      re::GeomIndexMap::operator=(v67, (uint64_t)&v122);
      if (!BYTE12(v122))
      {
LABEL_100:
        if (*(_QWORD *)v107 && *(_QWORD *)&v107[32])
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v107 + 40))(*(_QWORD *)v107, *(_QWORD *)&v107[32]);
        goto LABEL_103;
      }
      if (BYTE12(v122) != 2)
      {
        if (BYTE12(v122) != 1)
          goto LABEL_127;
        v64 = v123;
        if (!(_QWORD)v123 || !(_QWORD)v125)
          goto LABEL_100;
LABEL_99:
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
        goto LABEL_100;
      }
LABEL_95:
      v64 = *((_QWORD *)&v126 + 1);
      if (!*((_QWORD *)&v126 + 1))
        goto LABEL_100;
      if (*((_QWORD *)&v123 + 1))
        *((_QWORD *)&v123 + 1) = 0;
      if (!(_QWORD)v123)
        goto LABEL_100;
      goto LABEL_99;
    }
    v41 = 0;
    while (1)
    {
      v72 = v41;
      v71 = re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)(a1 + 400), v41);
      v43 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v71, v42);
      v17 = *(unsigned int *)(v43 + 24);
      *(_QWORD *)&v111[2] = 0;
      memset(v109, 0, sizeof(v109));
      v94 = 0;
      v91[1] = 0;
      v92 = 0;
      v91[0] = 0;
      v93 = 0;
      LOBYTE(v122) = 0;
      v44 = (_anonymous_namespace_ *)re::DynamicArray<unsigned char>::resize(v109, v17, &v122);
      *(_DWORD *)v107 = 0;
      v108 = 0;
      memset(&v107[8], 0, 28);
      re::DynamicArray<re::BlendNode>::setCapacity(&v107[8], 1uLL);
      ++*(_DWORD *)&v107[32];
      re::DynamicArray<float>::resize((uint64_t)v91, *(unsigned int *)&v107[24]);
      if (v17)
        break;
LABEL_60:
      v54 = v71;
      v55 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((_anonymous_namespace_ *)&v96, *(const char **)(v71 + 8), *(unsigned __int8 *)(v71 + 17), (uint64_t)v107, (uint64_t)v91);
      v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 72))(v55, v56);
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 16))(v54);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v54 + 40))(v54, v55, v57, 0, 0);
      if (*(_QWORD *)&v107[8] && v108)
        (*(void (**)(void))(**(_QWORD **)&v107[8] + 40))();
      if (v91[0] && v94)
        (*(void (**)(void))(*(_QWORD *)v91[0] + 40))();
      if (*(_QWORD *)v109 && *(_QWORD *)&v111[2])
        (*(void (**)(void))(**(_QWORD **)v109 + 40))();
      v41 = v72 + 1;
      if (v72 + 1 == v70)
        goto LABEL_70;
    }
    v46 = 0;
    v12 = 0;
    a3 = v43 + 64;
    v19 = 12;
    while (1)
    {
      LODWORD(v122) = v46;
      v47 = *(unsigned __int8 *)(v43 + 60);
      if (v47 == 2)
        break;
      if (v47 == 1)
      {
        if (*(_QWORD *)(v43 + 80) > v46)
        {
          v48 = *(_DWORD *)(*(_QWORD *)(v43 + 96) + 4 * v46);
          goto LABEL_52;
        }
LABEL_51:
        v48 = -1;
        goto LABEL_52;
      }
      if (*(_BYTE *)(v43 + 60))
        goto LABEL_125;
      if (v46 >= *(unsigned int *)a3)
        v48 = -1;
      else
        v48 = v46;
LABEL_52:
      v50 = v48;
      v51 = v84;
      if (v84 <= v48)
      {
        v95 = 0;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v122 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v114 = 136315906;
        v115 = "operator[]";
        v116 = 1024;
        v117 = 797;
        v118 = 2048;
        v119 = v50;
        v120 = 2048;
        v121 = v51;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_117:
        v95 = 0;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v122 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v114 = 136315906;
        v115 = "operator[]";
        v116 = 1024;
        v117 = 789;
        v118 = 2048;
        v119 = v3;
        v120 = 2048;
        v121 = v51;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        v95 = 0;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v122 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v114 = 136315906;
        v115 = "operator[]";
        v116 = 1024;
        v117 = 797;
        v118 = 2048;
        v119 = v46;
        v120 = 2048;
        v121 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_119:
        v95 = 0;
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v122 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v114 = 136315906;
        v115 = "operator[]";
        v116 = 1024;
        v117 = 789;
        v118 = 2048;
        v119 = v3;
        v120 = 2048;
        v121 = v51;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_120:
        *(_QWORD *)v107 = 0;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v96 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v122) = 136315906;
        *(_QWORD *)(v12 + 196) = "operator[]";
        WORD6(v122) = 1024;
        *(_DWORD *)(v12 + 206) = 789;
        WORD1(v123) = 2048;
        *(_QWORD *)(v12 + 212) = v17;
        WORD6(v123) = 2048;
        *(_QWORD *)(v12 + 222) = v17;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_121;
      }
      v3 = v12;
      v51 = v92;
      if (v92 <= v12)
        goto LABEL_117;
      v52 = v86;
      v53 = v94;
      *(_DWORD *)(v94 + 4 * v12) = *(_DWORD *)(v86 + 4 * v50);
      v3 = *(_QWORD *)(v43 + 24);
      if (v3 <= v46)
        goto LABEL_118;
      v3 = (v12 + 1);
      if (*(_DWORD *)(*(_QWORD *)(v43 + 40) + v19) == -1)
      {
        v12 = (v12 + 1);
      }
      else
      {
        if (v51 <= v3)
          goto LABEL_119;
        *(_DWORD *)(v53 + 4 * v3) = *(_DWORD *)(v52 + 4 * v50) + 1;
        v12 = (v12 + 2);
      }
      ++v46;
      v19 += 16;
      if (v17 == v46)
        goto LABEL_60;
    }
    v49 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v43 + 64), (unsigned int *)&v122);
    if (v49 != -1)
    {
      v48 = *(_DWORD *)(*(_QWORD *)(v43 + 72) + 8 * v49 + 4);
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  re::GeomMesh::copy((re::GeomMesh *)a1, a2);
  if (!a3)
    goto LABEL_115;
  v9 = 0;
  *(_QWORD *)&v96 = 0xFFFFFFFF00000000;
  DWORD2(v96) = -1;
  BYTE12(v96) = 0;
  if ((v8 - 1) <= 0xFFFFFFFD)
  {
    DWORD2(v96) = v8 - 1;
    v9 = v8;
    *(_QWORD *)&v96 = v8;
  }
  LODWORD(v97) = v9;
  re::GeomIndexMap::operator=(a3, (uint64_t)&v96);
  if (!BYTE12(v96))
    goto LABEL_115;
  if (BYTE12(v96) == 2)
  {
    v11 = *((_QWORD *)&v100 + 1);
    if (!*((_QWORD *)&v100 + 1))
      goto LABEL_115;
    if (*((_QWORD *)&v97 + 1))
      *((_QWORD *)&v97 + 1) = 0;
    if (!(_QWORD)v97)
      goto LABEL_115;
    goto LABEL_114;
  }
  if (BYTE12(v96) == 1)
  {
    v11 = v97;
    if (!(_QWORD)v97 || !(_QWORD)v99)
      goto LABEL_115;
    goto LABEL_114;
  }
  re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  _os_crash();
  __break(1u);
LABEL_127:
  re::internal::assertLog((re::internal *)4, v63, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "~GeomIndexMap", 625);
  _os_crash();
  __break(1u);
}

uint64_t re::`anonymous namespace'::triangluateTopologyHelper(_anonymous_namespace_ *a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  __int128 *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t result;
  int v30;
  _QWORD v31[2];
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v31[1] = 0;
  v32 = 0;
  v33 = 0;
  re::DynamicArray<re::BlendNode>::setCapacity(v31, 1uLL);
  ++v33;
  v7 = *((_QWORD *)a1 + 3);
  v8 = 0;
  v9 = v7;
  if ((_DWORD)v7)
  {
    v10 = (_DWORD *)(*((_QWORD *)a1 + 5) + 8);
    v11 = *((_QWORD *)a1 + 3);
    do
    {
      if (*(v10 - 2) != -1 && *(v10 - 1) != -1 && *v10 != -1 && v10[1] == -1)
        ++v8;
      v10 += 4;
      --v11;
    }
    while (v11);
  }
  v30 = *(_DWORD *)a1;
  re::DynamicArray<re::GeomCell4>::resize(v31, (v8 + 2 * (v7 - v8)));
  if ((_DWORD)v7)
  {
    v12 = 0;
    v13 = 0;
    v14 = &v44;
    v15 = *((_QWORD *)a1 + 3);
    v16 = *((_QWORD *)a1 + 5);
    v17 = *(_QWORD *)(a2 + 16);
    v18 = *(_QWORD *)(a2 + 32);
    v19 = v32;
    v20 = v34;
    v21 = (int *)(v16 + 8);
    while (v15 != v12)
    {
      v23 = *(v21 - 2);
      v22 = *(v21 - 1);
      v24 = *v21;
      v25 = v21[1];
      if (v25 == -1)
      {
        v3 = v13;
        if (v19 <= v13)
          goto LABEL_33;
        ++v13;
        v27 = (_DWORD *)(v20 + 16 * v3);
        *v27 = v23;
      }
      else
      {
        if (v17 <= v12)
          goto LABEL_30;
        v3 = v13;
        if (*(_BYTE *)(v18 + v12))
        {
          if (v19 <= v13)
            goto LABEL_31;
          v26 = (_DWORD *)(v20 + 16 * v13);
          *v26 = v23;
          v26[1] = v22;
          v3 = v13 + 1;
          v26[2] = v25;
          v26[3] = -1;
          if (v19 <= v3)
            goto LABEL_32;
          v13 += 2;
          v27 = (_DWORD *)(v20 + 16 * v3);
          *v27 = v22;
        }
        else
        {
          if (v19 <= v13)
            goto LABEL_34;
          v28 = (_DWORD *)(v20 + 16 * v13);
          *v28 = v23;
          v28[1] = v22;
          v3 = v13 + 1;
          v28[2] = v24;
          v28[3] = -1;
          if (v19 <= v3)
            goto LABEL_35;
          v13 += 2;
          v27 = (_DWORD *)(v20 + 16 * v3);
          *v27 = v23;
        }
        v22 = v24;
        v24 = v25;
      }
      v27[1] = v22;
      v27[2] = v24;
      v27[3] = -1;
      ++v12;
      v21 += 4;
      if (v9 == v12)
        goto LABEL_25;
    }
    v35 = 0;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    v44 = 0u;
    v45 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 797;
    v40 = 2048;
    v41 = v15;
    v42 = 2048;
    v43 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    v44 = 0u;
    v45 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 797;
    v40 = 2048;
    v41 = v12;
    v42 = 2048;
    v43 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    v44 = 0u;
    v45 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 789;
    v40 = 2048;
    v41 = v3;
    v42 = 2048;
    v43 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_32:
    v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    v44 = 0u;
    v45 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 789;
    v40 = 2048;
    v41 = v3;
    v42 = 2048;
    v43 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_33:
    v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    v44 = 0u;
    v45 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 789;
    v40 = 2048;
    v41 = v3;
    v42 = 2048;
    v43 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_34:
    v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    v44 = 0u;
    v45 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 789;
    v40 = 2048;
    v41 = v3;
    v42 = 2048;
    v43 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_35:
    v35 = 0;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[2] = 0u;
    v44 = 0u;
    v45 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 789;
    v40 = 2048;
    v41 = v3;
    v42 = 2048;
    v43 = v19;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_25:
  *a3 = v30;
  re::DynamicArray<re::GeomConnectivityManifold::HalfEdge>::operator=((uint64_t)(a3 + 2), (uint64_t)v31);
  result = v31[0];
  if (v31[0])
  {
    if (v34)
      return (*(uint64_t (**)(void))(*(_QWORD *)v31[0] + 40))();
  }
  return result;
}

uint64_t re::internal::addGrid(int **a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, unsigned int a6, unsigned int a7)
{
  int *v7;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t *v29;
  float32x4_t *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x2_t v49;
  float32x2_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  int32x4_t v54;
  float32x2_t v55;
  float32x2_t v56;
  int32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  uint64_t v60;
  unsigned int v61;
  float32x4_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  float v67;
  unint64_t v68;
  unsigned int v69;
  float v70;
  uint64_t result;
  uint64_t v72;
  float v73;
  float32x4_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float32x4_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  int i;
  int v88;
  unint64_t v89;
  unint64_t v90;
  int32x2_t *v91;
  float v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  unsigned int v96;
  float32x4_t v97;
  float v98;
  float32x4_t v99;
  uint64_t v100;
  int v101;
  unsigned int v103;
  uint64_t v104;
  float32x4_t v109;
  uint64_t v110;

  v7 = *a1;
  if (!*a1)
    goto LABEL_70;
  v10 = a6 + 1 + (a6 + 1) * a7;
  v11 = v7[6];
  v12 = *v7;
  v13 = v11 + a7 * a6;
  re::DynamicArray<re::GeomCell4>::resize((_QWORD *)v7 + 1, v13);
  v7[68] = v13;
  v14 = *((_QWORD *)v7 + 37);
  if (v14)
  {
    v15 = (uint64_t *)*((_QWORD *)v7 + 39);
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 72))(v17, v7[68]);
      v16 -= 8;
    }
    while (v16);
  }
  *v7 = v12 + v10;
  v7[40] = v12 + v10;
  v18 = *((_QWORD *)v7 + 23);
  if (v18)
  {
    v19 = (uint64_t *)*((_QWORD *)v7 + 25);
    v20 = 8 * v18;
    do
    {
      v21 = *v19++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 72))(v21, v7[40]);
      v20 -= 8;
    }
    while (v20);
  }
  v22 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v7 + 12), "vertexPosition");
  v103 = v12;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
  {
    v23 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v22, 0);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    v25 = v23;
    v26 = v24;
  }
  else
  {
    v26 = 0;
    v25 = 0;
  }
  v28 = a5;
  v27 = a4;
  v30 = a2;
  v29 = a3;
  v31 = (uint64_t)a1[2];
  v32 = v26;
  v104 = v25;
  if (v31)
  {
    if ((*(unsigned int (**)(uint64_t, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v31 + 16))(v31, a4, a3, a2))
    {
      v33 = re::internal::GeomTypedAttribute<double>::operator[](v31, 0);
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      v35 = v33;
      v36 = v34;
    }
    else
    {
      v35 = 0;
      v36 = 0;
    }
    v28 = a5;
    v27 = a4;
    v30 = a2;
    v29 = a3;
    v26 = v32;
    v25 = v104;
  }
  else
  {
    v35 = 0;
    v36 = 0xFFFFFFFFLL;
  }
  v37 = (uint64_t)a1[1];
  v38 = 0uLL;
  if (v37)
  {
    v39 = v35;
    v40 = (*(uint64_t (**)(int *, float32x4_t *, float32x4_t *, float32x4_t *))(*(_QWORD *)v37 + 16))(a1[1], v27, v29, v30);
    if (v40)
    {
      v41 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v37, 0);
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
      v42 = v41;
    }
    else
    {
      v42 = 0;
    }
    v25 = v104;
    v28 = a5;
    v30 = a2;
    v29 = a3;
    v44 = vsubq_f32(*a3, *a5);
    v27 = a4;
    v45 = vsubq_f32(*a4, *a2);
    v46 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL), vnegq_f32(v44)), v45, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), (int8x16_t)v44, 0xCuLL));
    v47 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL);
    v48 = (int32x4_t)vmulq_f32(v46, v46);
    v48.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), *(float32x2_t *)v48.i8)).u32[0];
    v49 = vrsqrte_f32((float32x2_t)v48.u32[0]);
    v50 = vmul_f32(v49, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v49, v49)));
    v43 = vmulq_n_f32(v47, vmul_f32(v50, vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(v50, v50))).f32[0]);
    v26 = v32;
    v35 = v39;
    v38 = 0uLL;
  }
  else
  {
    v42 = 0;
    v40 = -1;
    v43 = 0uLL;
  }
  v51 = (uint64_t)a1[3];
  if (v51)
    v52 = a1[4] == 0;
  else
    v52 = 1;
  v53 = !v52;
  v101 = v11;
  if (v52)
  {
    v60 = 0;
    v110 = 0;
    v61 = -1;
    v62 = 0uLL;
    v63 = 0xFFFFFFFFLL;
    v64 = a7;
  }
  else
  {
    v96 = v40;
    v100 = v42;
    v95 = v35;
    v109 = vsubq_f32(*v29, *v30);
    v54 = (int32x4_t)vmulq_f32(v109, v109);
    v54.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v54, 2), vadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v54.i8, 1))).u32[0];
    v55 = vrsqrte_f32((float32x2_t)v54.u32[0]);
    v56 = vmul_f32(v55, vrsqrts_f32((float32x2_t)v54.u32[0], vmul_f32(v55, v55)));
    v97 = v43;
    LODWORD(v98) = vmul_f32(v56, vrsqrts_f32((float32x2_t)v54.u32[0], vmul_f32(v56, v56))).u32[0];
    v93 = vsubq_f32(*v28, *v30);
    v57 = (int32x4_t)vmulq_f32(v93, v93);
    v57.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v57, 2), vadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1))).u32[0];
    v58 = vrsqrte_f32((float32x2_t)v57.u32[0]);
    v59 = vmul_f32(v58, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(v58, v58)));
    LODWORD(v92) = vmul_f32(v59, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(v59, v59))).u32[0];
    if ((*(unsigned int (**)(uint64_t, float32x4_t *))(*(_QWORD *)v51 + 16))(v51, v27))
    {
      v60 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v51, 0);
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
    }
    else
    {
      v61 = 0;
      v60 = 0;
    }
    v99 = vmulq_n_f32(v109, v98);
    v94 = vmulq_n_f32(v93, v92);
    v65 = (uint64_t)a1[4];
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65))
    {
      v110 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v65, 0);
      v63 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
    }
    else
    {
      v63 = 0;
      v110 = 0;
    }
    v64 = a7;
    v28 = a5;
    v27 = a4;
    v30 = a2;
    v29 = a3;
    v26 = v32;
    v25 = v104;
    v35 = v95;
    v42 = v100;
    v43 = v97;
    v38 = v99;
    v40 = v96;
    v62 = v94;
  }
  v66 = 0;
  v68 = v40;
  v69 = v103;
  v70 = 1.0 / (float)v64;
  result = v60;
  do
  {
    v72 = 0;
    v73 = v70 * (float)v66;
    v74 = vaddq_f32(vmulq_n_f32(*v28, v73), vmulq_n_f32(*v30, 1.0 - v73));
    v75 = v69;
    v76 = v110 + 16 * v69;
    v77 = result + 16 * v69;
    v78 = vaddq_f32(vmulq_n_f32(*v29, 1.0 - v73), vmulq_n_f32(*v27, v73));
    v79 = v26 - v69;
    if (v26 < v69)
      v79 = 0;
    v80 = v42 + 16 * v69;
    v81 = v35 + 8 * v69;
    v82 = v25 + 16 * v69;
    do
    {
      v83 = v75 + v72;
      v67 = 1.0 / (float)a6;
      if (a1[2])
      {
        if (v36 <= v83)
          goto LABEL_65;
        *(float *)&v84 = v67 * (float)v72;
        *((float *)&v84 + 1) = v70 * (float)v66;
        *(_QWORD *)(v81 + 8 * v72) = v84;
      }
      if (a1[1])
      {
        if (v83 >= v68)
          goto LABEL_66;
        *(float32x4_t *)(v80 + 16 * v72) = v43;
      }
      if (v53)
      {
        if (v83 >= v61)
          goto LABEL_67;
        *(float32x4_t *)(v77 + 16 * v72) = v38;
        if (v63 <= v83)
          goto LABEL_68;
        *(float32x4_t *)(v76 + 16 * v72) = v62;
      }
      if (v79 == (_DWORD)v72)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_65:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_66:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_67:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_68:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_69:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_70:
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "meshData.baseMesh != nullptr", "addGrid", 79);
        _os_crash();
        __break(1u);
      }
      *(float32x4_t *)(v82 + 16 * v72) = vaddq_f32(vmulq_n_f32(v78, v67 * (float)v72), vmulq_n_f32(v74, 1.0 - (float)(v67 * (float)v72)));
      ++v72;
    }
    while (v72 <= a6);
    v69 = v75 + v72;
    ++v66;
  }
  while (v66 <= v64);
  v85 = v101;
  v86 = v103;
  if (v64)
  {
    for (i = 0; i != v64; ++i)
    {
      if (a6)
      {
        v88 = 0;
        v89 = *((_QWORD *)v7 + 3);
        do
        {
          v90 = (v85 + v88);
          if (v89 <= v90)
            goto LABEL_69;
          v91 = (int32x2_t *)(*((_QWORD *)v7 + 5) + 16 * v90);
          v91->i32[0] = v86 + v88;
          v91->i32[1] = v86 + v88 + 1;
          v91[1] = vadd_s32(vdup_n_s32(a6 + v86 + v88++), (int32x2_t)0x100000002);
        }
        while (a6 != v88);
        v85 += v88;
        v86 += v88;
      }
      ++v86;
    }
  }
  return result;
}

uint64_t re::internal::setCornerVertexValues(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  unsigned int v22;
  unsigned int v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x2_t v38;
  float32x2_t v39;
  unsigned int v40;
  unsigned int v41;

  if (!*a1)
    goto LABEL_42;
  v4 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(*a1 + 48), "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
  {
    v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v4, 0);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = a1[1];
  if (v7)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 16))(a1[1]);
    if ((_DWORD)result)
    {
      v9 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v7, 0);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 0;
    result = 0xFFFFFFFFLL;
  }
  v10 = a1[3];
  if (v10)
    v11 = a1[4] == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v11)
  {
    v13 = 0;
    v15 = 0;
    v16 = -1;
    v17 = -1;
  }
  else
  {
    v41 = result;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
    {
      v13 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v10, 0);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v18 = a1[4];
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
    {
      v15 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v18, 0);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    }
    else
    {
      v17 = 0;
      v15 = 0;
    }
    result = v41;
    v16 = v14;
  }
  v19 = 0;
  v20 = *(_DWORD *)(a2 + 88);
  v21 = 1.0 / (float)*(unsigned int *)(a2 + 84);
  do
  {
    v22 = 0;
    v23 = v20;
    do
    {
      if (v6 <= v23)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_39:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_40:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_42:
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "meshData.baseMesh != nullptr", "setCornerVertexValues", 160);
        _os_crash();
        __break(1u);
      }
      v24 = vaddq_f32(vmulq_n_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)a2, 1.0 - (float)(v21 * (float)v19)), vmulq_n_f32(*(float32x4_t *)(a2 + 48), v21 * (float)v19)), 1.0 - (float)(v21 * (float)v22)), vmulq_n_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(a2 + 16), 1.0 - (float)(v21 * (float)v19)), vmulq_n_f32(*(float32x4_t *)(a2 + 32), v21 * (float)v19)), v21 * (float)v22));
      v25 = (int32x4_t)vmulq_f32(v24, v24);
      v25.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v25, 2), vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 1))).u32[0];
      v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
      v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
      v28 = vmulq_n_f32(v24, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
      *(float32x4_t *)(v5 + 16 * v23) = vaddq_f32(*(float32x4_t *)(a2 + 64), vmulq_n_f32(v28, COERCE_FLOAT(*(_OWORD *)(a2 + 80))));
      if (a1[1])
      {
        if (result <= v23)
          goto LABEL_39;
        *(float32x4_t *)(v9 + 16 * v23) = v28;
      }
      if (v12)
      {
        if (v16 <= v23)
          goto LABEL_40;
        v29 = vmulq_f32(v28, (float32x4_t)xmmword_2260E5F10);
        v30 = vsubq_f32((float32x4_t)xmmword_2260E5F10, vmulq_n_f32(v28, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]));
        v31 = (int32x4_t)vmulq_f32(v30, v30);
        v31.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1))).u32[0];
        v32 = vrsqrte_f32((float32x2_t)v31.u32[0]);
        v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v32, v32)));
        v34 = vmulq_n_f32(v30, vmul_f32(v33, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v33, v33))).f32[0]);
        *(float32x4_t *)(v13 + 16 * v23) = v34;
        if (v17 <= v23)
          goto LABEL_41;
        v35 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL), vnegq_f32(v28)), v34, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL));
        v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL);
        v37 = (int32x4_t)vmulq_f32(v35, v35);
        v37.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v37.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v37, 2), *(float32x2_t *)v37.i8)).u32[0];
        v38 = vrsqrte_f32((float32x2_t)v37.u32[0]);
        v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v38, v38)));
        *(float32x4_t *)(v15 + 16 * v23) = vmulq_n_f32(v36, vmul_f32(v39, vrsqrts_f32((float32x2_t)v37.u32[0], vmul_f32(v39, v39))).f32[0]);
      }
      v23 += *(_DWORD *)(a2 + 92);
      ++v22;
      v40 = *(_DWORD *)(a2 + 84);
    }
    while (v22 <= v40);
    v20 += *(_DWORD *)(a2 + 96);
    ++v19;
  }
  while (v19 <= v40);
  return result;
}

uint64_t re::internal::addFace(unint64_t *a1, float32x4_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  __int32 v21;
  unint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  float32x4_t *v44;
  float v45;
  float v46;
  unsigned int v47;
  float32x4_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  float v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  float32x4_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  unsigned int v73;
  float v74;
  float v75;
  float v76;
  float v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t result;
  int v93;
  int v94;
  int v95;
  _DWORD *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  float v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  unsigned int v116;
  _QWORD v117[2];
  unint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE v122[28];
  __int16 v123;
  _BYTE v124[10];
  __int128 v125;
  __int128 v126;
  int32x4_t v127;
  __int128 v128;
  __int128 v129;
  float v130;
  __int32 v131;
  int v132;
  int v133;
  int v134;
  int v135;
  __int16 v136;
  __int16 v137;
  __int16 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v144 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  if (!*a1)
  {
LABEL_164:
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "meshData.baseMesh != nullptr", "addFace", 222);
    _os_crash();
    __break(1u);
    goto LABEL_165;
  }
  v7 = *(_DWORD *)(v6 + 24);
  v9 = a2->u32[3];
  v8 = a2[1].u32[0];
  v102 = 2 * a2[1].i32[1];
  v107 = v9 - 1;
  v116 = v8 - 1;
  v110 = *(unsigned int *)v6;
  v112 = (v102 + 2 + v9 - 1);
  v113 = v102 + 2 + v8 - 1;
  v10 = v110 + v112 * v113;
  *(_DWORD *)v6 = v10;
  *(_DWORD *)(v6 + 160) = v10;
  v11 = *(_QWORD *)(v6 + 184);
  if (v11)
  {
    v12 = *(uint64_t **)(v6 + 200);
    v13 = 8 * v11;
    do
    {
      v14 = *v12++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 72))(v14, *(unsigned int *)(v6 + 160));
      v13 -= 8;
    }
    while (v13);
  }
  v99 = v7;
  v100 = (v112 - 1);
  v101 = (v113 - 1);
  v15 = v7 + (_DWORD)v100 * (_DWORD)v101;
  re::DynamicArray<re::GeomCell4>::resize((_QWORD *)(v6 + 8), v15);
  *(_DWORD *)(v6 + 272) = v15;
  v16 = *(_QWORD *)(v6 + 296);
  if (v16)
  {
    v17 = *(uint64_t **)(v6 + 312);
    v18 = 8 * v16;
    do
    {
      v19 = *v17++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 72))(v19, *(unsigned int *)(v6 + 272));
      v18 -= 8;
    }
    while (v18);
  }
  v20 = a2->f32[1];
  v130 = a2->f32[0];
  v21 = a2[1].i32[1];
  v133 = 1;
  v134 = v102 + 2 + v9 - 1;
  *(float *)&v104 = (float)(v20 + (float)(v130 * -2.0)) * 0.5;
  v108 = (float)(a2->f32[2] + (float)(v130 * -2.0)) * 0.5;
  v125 = xmmword_2261325D0;
  v126 = xmmword_2261325E0;
  v127 = (int32x4_t)xmmword_2260E5F40;
  v128 = xmmword_2261325F0;
  v131 = v21;
  v132 = v110;
  *(float *)&v22 = -*(float *)&v104;
  *((float *)&v22 + 1) = -v108;
  v129 = v22;
  v3 = (uint64_t)a1;
  re::internal::setCornerVertexValues(a1, (uint64_t)&v125);
  v125 = xmmword_2261325E0;
  v126 = xmmword_226132600;
  v127 = (int32x4_t)xmmword_226132610;
  v128 = xmmword_2260E5F40;
  v132 = a2[1].i32[1] + v9 + v110;
  v129 = __PAIR64__(-v108, v104);
  re::internal::setCornerVertexValues(a1, (uint64_t)&v125);
  v125 = xmmword_2261325F0;
  v126 = xmmword_2260E5F40;
  v127 = (int32x4_t)xmmword_226132620;
  v128 = xmmword_226132630;
  v132 = v110 + (a2[1].i32[1] + v8) * v112;
  v23 = v132;
  v24 = COERCE_UNSIGNED_INT(-*(float *)&v104);
  *((float *)&v24 + 1) = v108;
  v129 = v24;
  re::internal::setCornerVertexValues(a1, (uint64_t)&v125);
  v125 = xmmword_2260E5F40;
  v126 = xmmword_226132610;
  v127 = vdupq_n_s32(0x3F13CD3Au);
  v128 = xmmword_226132620;
  v132 = v23 + v9 + a2[1].i32[1];
  v25 = v104;
  *((float *)&v25 + 1) = v108;
  v129 = v25;
  re::internal::setCornerVertexValues(a1, (uint64_t)&v125);
  v26 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v6 + 48), "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26))
  {
    v27 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v26, 0);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
  }
  else
  {
    v4 = 0;
    v27 = 0;
  }
  v29 = v102 + 2 + v8 - 1;
  v28 = a1;
  v30 = a1[1];
  v98 = v8;
  if (v30)
  {
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
    if ((_DWORD)v31)
    {
      v32 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v30, 0);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
    }
    else
    {
      v32 = 0;
    }
    v29 = v113;
    v28 = a1;
  }
  else
  {
    v32 = 0;
    v31 = 0xFFFFFFFFLL;
  }
  v33 = v28[3];
  if (v33)
    v34 = v28[4] == 0;
  else
    v34 = 1;
  v35 = !v34;
  v111 = v31;
  if (v34)
  {
    v37 = 0;
    v38 = 0;
    v39 = 0xFFFFFFFFLL;
    v40 = 0xFFFFFFFFLL;
    v41 = v110;
    v42 = (v102 + 2 + v9 - 1);
    v43 = v9 - 1;
    v44 = a2;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33))
    {
      v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v33, 0);
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
    }
    else
    {
      v36 = 0;
      v5 = 0;
    }
    v3 = a1[4];
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3))
    {
      v37 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v3, 0);
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
    else
    {
      v37 = 0;
      v39 = 0;
    }
    v41 = v110;
    v42 = (v102 + 2 + v9 - 1);
    v29 = v113;
    v28 = a1;
    v44 = a2;
    v43 = v9 - 1;
    v31 = v111;
    v38 = v5;
    v40 = v36;
  }
  v45 = v44->f32[0];
  if (v43)
  {
    v3 = 0;
    v46 = (float)(v44->f32[1] + (float)(v45 * -2.0)) / (float)((float)v43 + 1.0);
    while (1)
    {
      v47 = v3 + 1;
      if (v29)
        break;
LABEL_49:
      v3 = (v3 + 1);
      if (v47 == v43)
      {
        v106 = v39;
        v109 = v40;
        v105 = v9;
        v103 = v6;
        v45 = v44->f32[0];
        goto LABEL_52;
      }
    }
    v48.i32[1] = 0;
    v48.i64[1] = 0;
    v5 = (v44[1].i32[1] + v41);
    v49 = v29;
    while (1)
    {
      v50 = v5;
      if (v4 <= v5)
        break;
      v51 = (v3 + v5 + 1);
      if (v4 <= v51)
        goto LABEL_135;
      v48.f32[0] = v46 * (float)v47;
      *(float32x4_t *)(v27 + 16 * v51) = vaddq_f32(v48, *(float32x4_t *)(v27 + 16 * v5));
      if (v28[1])
      {
        if (v31 <= v5)
          goto LABEL_136;
        if (v31 <= v51)
          goto LABEL_137;
        *(_OWORD *)(v32 + 16 * v51) = *(_OWORD *)(v32 + 16 * v5);
      }
      if (v35)
      {
        if (v40 <= v5)
          goto LABEL_141;
        if (v40 <= v51)
          goto LABEL_142;
        *(_OWORD *)(v38 + 16 * v51) = *(_OWORD *)(v38 + 16 * v5);
        if (v39 <= v5)
          goto LABEL_143;
        if (v39 <= v51)
          goto LABEL_144;
        *(_OWORD *)(v37 + 16 * v51) = *(_OWORD *)(v37 + 16 * v5);
      }
      v5 = (v5 + v42);
      if (!--v49)
        goto LABEL_49;
    }
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v5;
    v123 = 2048;
    *(_QWORD *)v124 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_135:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = (v3 + v5 + 1);
    v123 = 2048;
    *(_QWORD *)v124 = v4;
    _os_log_send_and_compose_impl();
    v31 = _os_crash_msg();
    __break(1u);
LABEL_136:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    v51 = v31;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v5;
    v123 = 2048;
    *(_QWORD *)v124 = v51;
    _os_log_send_and_compose_impl();
    v31 = _os_crash_msg();
    __break(1u);
LABEL_137:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    v50 = v31;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v51;
    v123 = 2048;
    *(_QWORD *)v124 = v50;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_138;
  }
  v106 = v39;
  v109 = v40;
  v105 = v9;
  v103 = v6;
LABEL_52:
  if (v116)
  {
    v52 = 0;
    v53 = v106;
    v6 = v109;
    v54 = (float)(a2->f32[2] + (float)(v45 * -2.0)) / (float)((float)v116 + 1.0);
    v55 = v9 + v110 + v102 + 1;
    v5 = v111;
    v3 = v4;
    while (1)
    {
      ++v52;
      if ((_DWORD)v42)
        break;
LABEL_72:
      v55 += v42;
      if (v52 == v116)
        goto LABEL_73;
    }
    v56 = 0;
    v57 = a2[1].i32[1] * v42;
    v50 = (v57 + v41);
    v58 = v37 + 16 * v50;
    v59.i32[0] = 0;
    v59.i64[1] = 0;
    v60 = v38 + 16 * v50;
    v51 = (v57 + v55);
    v61 = v32 + 16 * v50;
    if (v4 <= v50)
      v9 = v50;
    else
      v9 = v4;
    v62 = v27 + 16 * v50;
    v63 = v37 + 16 * v51;
    v64 = v38 + 16 * v51;
    v65 = v32 + 16 * v51;
    v66 = v27 + 16 * v51;
    v67 = v42;
    while (v9 != v50)
    {
      if (v51 >= v4)
        goto LABEL_139;
      v59.f32[1] = v54 * (float)v52;
      *(float32x4_t *)(v66 + v56) = vaddq_f32(v59, *(float32x4_t *)(v62 + v56));
      if (v28[1])
      {
        if (v50 >= v111)
          goto LABEL_145;
        if (v51 >= v111)
          goto LABEL_146;
        *(_OWORD *)(v65 + v56) = *(_OWORD *)(v61 + v56);
      }
      if (v35)
      {
        if (v50 >= v109)
          goto LABEL_147;
        if (v51 >= v109)
          goto LABEL_148;
        *(_OWORD *)(v64 + v56) = *(_OWORD *)(v60 + v56);
        if (v50 >= v106)
          goto LABEL_149;
        if (v51 >= v106)
          goto LABEL_150;
        *(_OWORD *)(v63 + v56) = *(_OWORD *)(v58 + v56);
      }
      ++v50;
      ++v51;
      v56 += 16;
      if (!--v67)
        goto LABEL_72;
    }
LABEL_138:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v9;
    v123 = 2048;
    *(_QWORD *)v124 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_139:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v51;
    v123 = 2048;
    *(_QWORD *)v124 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_140:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 789;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v51;
    v123 = 2048;
    *(_QWORD *)v124 = v50;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_141:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    v51 = v40;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v50;
    v123 = 2048;
    *(_QWORD *)v124 = v51;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_142:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    v50 = v40;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v51;
    v123 = 2048;
    *(_QWORD *)v124 = v50;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_143:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    v51 = v39;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v50;
    v123 = 2048;
    *(_QWORD *)v124 = v51;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_144:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    v50 = v39;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v51;
    v123 = 2048;
    *(_QWORD *)v124 = v50;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_145:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v50;
    v123 = 2048;
    *(_QWORD *)v124 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_146:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v51;
    v123 = 2048;
    *(_QWORD *)v124 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_147:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v50;
    v123 = 2048;
    *(_QWORD *)v124 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_148:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v51;
    v123 = 2048;
    *(_QWORD *)v124 = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_149:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    v51 = v53;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v50;
    v123 = 2048;
    *(_QWORD *)v124 = v51;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_150:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    v2 = v53;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v51;
    v123 = 2048;
    *(_QWORD *)v124 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_151:
    v121 = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v135 = 136315906;
    *(_QWORD *)(v3 + 4) = "operator[]";
    v136 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    v137 = 2048;
    *(_QWORD *)(v3 + 20) = v4;
    v138 = 2048;
    *(_QWORD *)(v3 + 30) = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_152:
    v121 = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v135 = 136315906;
    *(_QWORD *)(v3 + 4) = "operator[]";
    v136 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    v137 = 2048;
    *(_QWORD *)(v3 + 20) = v27;
    v138 = 2048;
    *(_QWORD *)(v3 + 30) = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_153:
    v121 = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v135 = 136315906;
    *(_QWORD *)(v3 + 4) = "operator[]";
    v136 = 1024;
    *(_DWORD *)(v3 + 14) = 609;
    v137 = 2048;
    *(_QWORD *)(v3 + 20) = (v32 + v4);
    v138 = 2048;
    *(_QWORD *)(v3 + 30) = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_154:
    v121 = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v135 = 136315906;
    *(_QWORD *)(v3 + 4) = "operator[]";
    v136 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    v137 = 2048;
    *(_QWORD *)(v3 + 20) = v51;
    v138 = 2048;
    *(_QWORD *)(v3 + 30) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_155:
    v121 = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v135 = 136315906;
    *(_QWORD *)(v3 + 4) = "operator[]";
    v136 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    v137 = 2048;
    *(_QWORD *)(v3 + 20) = v27;
    v138 = 2048;
    *(_QWORD *)(v3 + 30) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_156:
    v121 = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v135 = 136315906;
    *(_QWORD *)(v3 + 4) = "operator[]";
    v136 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    v137 = 2048;
    *(_QWORD *)(v3 + 20) = v51;
    v138 = 2048;
    *(_QWORD *)(v3 + 30) = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_157:
    v121 = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v135 = 136315906;
    *(_QWORD *)(v3 + 4) = "operator[]";
    v136 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    v137 = 2048;
    *(_QWORD *)(v3 + 20) = v27;
    v138 = 2048;
    *(_QWORD *)(v3 + 30) = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_158;
  }
LABEL_73:
  v68 = *(_DWORD *)v103 - v41;
  if (*(_DWORD *)v103 > v41)
  {
    v70 = a2[3];
    v69 = a2[4];
    v51 = v106;
    v71 = a2[2];
    v3 = v109;
    if (v4 <= v41)
      v5 = v41;
    else
      v5 = v4;
    v2 = v41;
    v6 = v111;
    while (v5 != v2)
    {
      v72 = vaddq_f32(a2[5], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2[2], COERCE_FLOAT(*(_OWORD *)(v27 + 16 * v2))), a2[3], *(float32x2_t *)(v27 + 16 * v2), 1), a2[4], *(float32x4_t *)(v27 + 16 * v2), 2));
      *(float32x4_t *)(v27 + 16 * v2) = vdivq_f32(v72, (float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 3));
      if (v28[1])
      {
        if (v2 >= v111)
          goto LABEL_161;
        *(float32x4_t *)(v32 + 16 * v2) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v71, COERCE_FLOAT(*(_OWORD *)(v32 + 16 * v2))), v70, *(float32x2_t *)(v32 + 16 * v2), 1), v69, *(float32x4_t *)(v32 + 16 * v2), 2);
      }
      if (v35)
      {
        if (v2 >= v109)
          goto LABEL_162;
        *(float32x4_t *)(v38 + 16 * v2) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v71, COERCE_FLOAT(*(_OWORD *)(v38 + 16 * v2))), v70, *(float32x2_t *)(v38 + 16 * v2), 1), v69, *(float32x4_t *)(v38 + 16 * v2), 2);
        if (v2 >= v106)
          goto LABEL_163;
        *(float32x4_t *)(v37 + 16 * v2) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v71, COERCE_FLOAT(*(_OWORD *)(v37 + 16 * v2))), v70, *(float32x2_t *)(v37 + 16 * v2), 1), v69, *(float32x4_t *)(v37 + 16 * v2), 2);
      }
      ++v2;
      if (!--v68)
        goto LABEL_87;
    }
LABEL_158:
    v117[0] = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v122 = 136315906;
    *(_QWORD *)&v122[4] = "operator[]";
    *(_WORD *)&v122[12] = 1024;
    *(_DWORD *)&v122[14] = 609;
    *(_WORD *)&v122[18] = 2048;
    *(_QWORD *)&v122[20] = v5;
    v123 = 2048;
    *(_QWORD *)v124 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_159:
    v121 = 0;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v135 = 136315906;
    *(_QWORD *)(v3 + 4) = "operator[]";
    v136 = 1024;
    *(_DWORD *)(v3 + 14) = 789;
    v137 = 2048;
    *(_QWORD *)(v3 + 20) = v51;
    v138 = 2048;
    *(_QWORD *)(v3 + 30) = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_160;
  }
LABEL_87:
  v6 = (v112 - 1);
  if (v28[2])
  {
    v3 = (uint64_t)&v135;
    *(_QWORD *)&v124[2] = 0;
    memset(v122, 0, sizeof(v122));
    v120 = 0;
    v117[1] = 0;
    v118 = 0;
    v117[0] = 0;
    v119 = 0;
    v73 = a2[1].u32[1];
    v74 = a2->f32[0] / a2->f32[1];
    v75 = (float)(v74 * -2.0) + 1.0;
    v76 = a2->f32[0] / a2->f32[2];
    v77 = (float)(v76 * -2.0) + 1.0;
    re::DynamicArray<float>::resize((uint64_t)v122, v42);
    re::DynamicArray<float>::resize((uint64_t)v117, v113);
    v78 = 0;
    v4 = *(_QWORD *)&v122[16];
    v79 = *(_QWORD *)&v124[2];
    v2 = v118;
    v80 = v120;
    do
    {
      v51 = v78;
      if (v4 <= v78)
        goto LABEL_154;
      v81 = (float)(v74 / (float)v73) * (float)v78;
      *(float *)(v79 + 4 * v78) = v81;
      v27 = v73 + v105 + v78;
      if (v4 <= v27)
        goto LABEL_155;
      *(float *)(v79 + 4 * v27) = v74 + (float)(v75 + v81);
      if (v2 <= v78)
        goto LABEL_156;
      v82 = (float)(v76 / (float)v73) * (float)v78;
      *(float *)(v80 + 4 * v78) = v82;
      v27 = v73 + v98 + v78;
      if (v2 <= v27)
        goto LABEL_157;
      *(float *)(v80 + 4 * v27) = v76 + (float)(v77 + v82);
      ++v78;
    }
    while ((int)v51 + 1 <= v73);
    if (v107)
    {
      v83 = 1;
      v84 = *(_QWORD *)&v124[2];
      do
      {
        v51 = v73 + v83;
        if (v4 <= v51)
          goto LABEL_159;
        *(float *)(v84 + 4 * v51) = v74 + (float)((float)(v75 / (float)v105) * (float)v83++);
      }
      while (v83 <= v107);
    }
    if (v4 <= v100)
    {
LABEL_165:
      v121 = 0;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v139 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      *(_QWORD *)(v3 + 4) = "operator[]";
      v136 = 1024;
      *(_DWORD *)(v3 + 14) = 789;
      v137 = 2048;
      *(_QWORD *)(v3 + 20) = v6;
      v138 = 2048;
      *(_QWORD *)(v3 + 30) = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_166:
      v121 = 0;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v139 = 0u;
      v97 = v87;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      *(_QWORD *)(v3 + 4) = "operator[]";
      v136 = 1024;
      *(_DWORD *)(v3 + 14) = 789;
      v137 = 2048;
      *(_QWORD *)(v3 + 20) = v97;
      v138 = 2048;
      *(_QWORD *)(v3 + 30) = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(v79 + 4 * v100) = 1065353216;
    if (v116)
    {
      v85 = 1;
      v86 = v120;
      while (1)
      {
        v51 = v73 + v85;
        if (v2 <= v51)
          break;
        *(float *)(v86 + 4 * v51) = v76 + (float)((float)(v77 / (float)v98) * (float)v85++);
        if (v85 > v116)
          goto LABEL_103;
      }
LABEL_160:
      v121 = 0;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v139 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v135 = 136315906;
      *(_QWORD *)(v3 + 4) = "operator[]";
      v136 = 1024;
      *(_DWORD *)(v3 + 14) = 789;
      v137 = 2048;
      *(_QWORD *)(v3 + 20) = v51;
      v138 = 2048;
      *(_QWORD *)(v3 + 30) = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_161:
      v117[0] = 0;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v139 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 609;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v2;
      v123 = 2048;
      *(_QWORD *)v124 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_162:
      v117[0] = 0;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v139 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 609;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v2;
      v123 = 2048;
      *(_QWORD *)v124 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_163:
      v117[0] = 0;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v139 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v122 = 136315906;
      *(_QWORD *)&v122[4] = "operator[]";
      *(_WORD *)&v122[12] = 1024;
      *(_DWORD *)&v122[14] = 609;
      *(_WORD *)&v122[18] = 2048;
      *(_QWORD *)&v122[20] = v2;
      v123 = 2048;
      *(_QWORD *)v124 = v51;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_164;
    }
LABEL_103:
    v87 = (v113 - 1);
    if (v2 <= v101)
      goto LABEL_166;
    *(_DWORD *)(v80 + 4 * v101) = 1065353216;
    v88 = a1[2];
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v88 + 16))(v88))
    {
      v51 = re::internal::GeomTypedAttribute<double>::operator[](v88, 0);
      v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v88 + 16))(v88);
    }
    else
    {
      v2 = 0;
      v51 = 0;
    }
    LODWORD(v41) = v110;
    if ((_DWORD)v113)
    {
      v27 = 0;
      LODWORD(v32) = v110;
      do
      {
        if ((_DWORD)v112)
        {
          v4 = 0;
          LODWORD(v89) = v2 - v32;
          if (v2 >= v32)
            v89 = v89;
          else
            v89 = 0;
          do
          {
            v5 = *(_QWORD *)&v122[16];
            if (*(_QWORD *)&v122[16] <= v4)
              goto LABEL_151;
            v5 = v118;
            if (v118 <= v27)
              goto LABEL_152;
            if (v89 == v4)
              goto LABEL_153;
            LODWORD(v90) = *(_DWORD *)(*(_QWORD *)&v124[2] + 4 * v4);
            HIDWORD(v90) = *(_DWORD *)(v120 + 4 * v27);
            *(_QWORD *)(v51 + 8 * v32 + 8 * v4++) = v90;
          }
          while (v112 != v4);
          LODWORD(v32) = v32 + v4;
        }
        ++v27;
      }
      while (v27 != v113);
    }
    if (v117[0] && v120)
    {
      (*(void (**)(void))(*(_QWORD *)v117[0] + 40))();
      LODWORD(v41) = v110;
    }
    if (*(_QWORD *)v122)
    {
      if (*(_QWORD *)&v124[2])
      {
        (*(void (**)(void))(**(_QWORD **)v122 + 40))();
        LODWORD(v41) = v110;
      }
    }
  }
  v91 = v99;
  result = (v113 - 1);
  if ((_DWORD)v113 != 1)
  {
    v93 = 0;
    do
    {
      if ((_DWORD)v112 != 1)
      {
        v94 = 0;
        v50 = *(_QWORD *)(v103 + 24);
        v95 = v105 + v102 + v41;
        do
        {
          v51 = v91 + v94;
          if (v50 <= v51)
            goto LABEL_140;
          v96 = (_DWORD *)(*(_QWORD *)(v103 + 40) + 16 * v51);
          *v96 = v41 + v94;
          v96[1] = v41 + v94 + 1;
          v96[2] = v95 + v94 + 2;
          v96[3] = v95 + v94++ + 1;
        }
        while ((_DWORD)v100 != v94);
        v91 += v94;
        LODWORD(v41) = v41 + v94;
      }
      LODWORD(v41) = v41 + 1;
      ++v93;
    }
    while (v93 != (_DWORD)v101);
  }
  return result;
}

uint64_t re::internal::buildBoxHelper(re::internal *a1, _DWORD *a2, unsigned __int16 *a3)
{
  BOOL v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  __int32 v24;
  __int128 v25;
  int v26;
  __int32 v27;
  __int32 v28;
  __int128 v29;
  int v30;
  __int32 v31;
  __int128 v32;
  int v33;
  __int32 v34;
  __int32 v35;
  __int128 v36;
  int v37;
  __int32 v38;
  __int128 v39;
  int v40;
  __int32 v41;
  __int128 v42;
  int v43;
  int v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  float32x2_t v57;
  float v58;
  int8x8_t v59;
  float *v60;
  float v61;
  re::GeomMesh *v62;
  uint64_t result;
  float v64;
  unsigned int v65;
  re::internal *v66;
  int *v67;
  __int128 v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  _BYTE v75[136];
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  float32x4_t v80;
  float32x4_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  float32x4_t v86;
  float32x4_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v70);
  if (a3[2])
    v6 = *a3 == 0;
  else
    v6 = 1;
  if (v6 || !a3[1])
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexPosition", 1, 7);
    if (*((_BYTE *)a3 + 24))
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexUV", 1, 6);
    if (*((_BYTE *)a3 + 25))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexNormal", 1, 7);
      if (*((_BYTE *)a3 + 24))
      {
        if (*((_BYTE *)a3 + 25))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=((uint64_t)a1, &v70);
  }
  else
  {
    v69 = 0u;
    v68 = 0u;
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexPosition", 1, 7);
    v67 = &v70;
    if (*((_BYTE *)a3 + 25))
      *(_QWORD *)&v68 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexNormal", 1, 7);
    if (*((_BYTE *)a3 + 24))
    {
      *((_QWORD *)&v68 + 1) = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexUV", 1, 6);
      if (*((_BYTE *)a3 + 25))
      {
        if (*((_BYTE *)a3 + 24))
        {
          *(_QWORD *)&v69 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexTangent", 1, 7);
          *((_QWORD *)&v69 + 1) = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v75, "vertexBitangent", 1, 7);
        }
      }
    }
    if (*((float *)a3 + 2) > 0.0 && a3[3])
    {
      v7 = ((2 * a3[3] + 2) | 2) - 1;
      v8 = v7 + *a3;
      v9 = v7 + a3[1];
      v10 = v7 + a3[2];
      v11 = (2 * ((v10 - 1) * (v9 - 1) + (v10 - 1 + v9 - 1) * (v8 - 1)));
      if (v76)
      {
        v12 = (2 * (v10 * v9 + (v10 + v9) * v8));
        v13 = v77;
        v14 = 8 * v76;
        do
        {
          v15 = *v13++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 80))(v15, v12);
          v14 -= 8;
        }
        while (v14);
      }
      if (v72 < v11)
        re::DynamicArray<re::BlendNode>::setCapacity(&v71, v11);
      if (v78)
      {
        v16 = v79;
        v17 = 8 * v78;
        do
        {
          v18 = *v16++;
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v18 + 80))(v18, v11);
          v17 -= 8;
        }
        while (v17);
      }
      v19 = *((float *)a3 + 2);
      v20 = *((float *)a3 + 3);
      v64 = (float)(v20 - (float)(v19 + v19)) * 0.5;
      v21 = *((float *)a3 + 4);
      v22 = v21 - (float)(v19 + v19);
      v23 = *((float *)a3 + 5) - (float)(v19 + v19);
      v81.i32[1] = (a3[3] + 1) & 0x1FFFE;
      v80.i64[0] = __PAIR64__(LODWORD(v20), LODWORD(v19));
      v80.f32[2] = v21;
      v24 = a3[1];
      v80.i32[3] = *a3;
      v81.i32[0] = v24;
      v25 = xmmword_2260E5D70;
      *((float *)&v25 + 2) = v23 * 0.5;
      v82 = xmmword_2260E5F10;
      v83 = xmmword_2260E5F20;
      v84 = xmmword_2260E5F40;
      v85 = v25;
      re::internal::addFace((unint64_t *)&v67, &v80);
      v26 = v73;
      *a2 = v73;
      v27 = *((_DWORD *)a3 + 5);
      v80.i32[1] = *((_DWORD *)a3 + 3);
      v80.i32[2] = v27;
      v28 = a3[2];
      v80.i32[3] = *a3;
      v81.i32[0] = v28;
      v29 = xmmword_2260E5D70;
      *((float *)&v29 + 1) = v22 * 0.5;
      v82 = xmmword_2260E5F10;
      v83 = xmmword_226108EE0;
      v84 = xmmword_2260E5F20;
      v85 = v29;
      re::internal::addFace((unint64_t *)&v67, &v80);
      v30 = v73;
      a2[1] = v73 - v26;
      *(uint64_t *)((char *)v80.i64 + 4) = *(_QWORD *)(a3 + 6);
      v31 = a3[1];
      v80.i32[3] = *a3;
      v81.i32[0] = v31;
      v32 = xmmword_2260E5D70;
      *((float *)&v32 + 2) = -(float)(v23 * 0.5);
      v82 = xmmword_2260E5F30;
      v83 = xmmword_2260E5F20;
      v84 = xmmword_226108EE0;
      v85 = v32;
      re::internal::addFace((unint64_t *)&v67, &v80);
      v33 = v73;
      a2[2] = v73 - v30;
      v34 = *((_DWORD *)a3 + 5);
      v80.i32[1] = *((_DWORD *)a3 + 3);
      v80.i32[2] = v34;
      v35 = a3[2];
      v80.i32[3] = *a3;
      v81.i32[0] = v35;
      v36 = xmmword_2260E5D70;
      *((float *)&v36 + 1) = -(float)(v22 * 0.5);
      v82 = xmmword_2260E5F10;
      v83 = xmmword_2260E5F40;
      v84 = xmmword_2260E5F50;
      v85 = v36;
      re::internal::addFace((unint64_t *)&v67, &v80);
      v37 = v73;
      a2[3] = v73 - v33;
      *(int32x2_t *)&v80.i32[1] = vrev64_s32(*(int32x2_t *)(a3 + 8));
      v38 = a3[1];
      v80.i32[3] = a3[2];
      v81.i32[0] = v38;
      v39 = xmmword_2260E5D70;
      *(float *)&v39 = v64;
      v82 = xmmword_226108EE0;
      v83 = xmmword_2260E5F20;
      v84 = xmmword_2260E5F10;
      v85 = v39;
      re::internal::addFace((unint64_t *)&v67, &v80);
      v40 = v73;
      a2[4] = v73 - v37;
      *(int32x2_t *)&v80.i32[1] = vrev64_s32(*(int32x2_t *)(a3 + 8));
      v41 = a3[1];
      v80.i32[3] = a3[2];
      v81.i32[0] = v41;
      v42 = xmmword_2260E5D70;
      *(float *)&v42 = -v64;
      v82 = xmmword_2260E5F40;
      v83 = xmmword_2260E5F20;
      v84 = xmmword_2260E5F30;
      v85 = v42;
      re::internal::addFace((unint64_t *)&v67, &v80);
      a2[5] = v73 - v40;
    }
    else
    {
      v43 = *a3;
      v44 = a3[1];
      v45 = a3[2];
      v46 = (2 * (v45 * v44 + (v45 + v44) * v43));
      if (v76)
      {
        v47 = (2 * (v45 + 1 + v44 + 1 + (v45 + 1 + v44 + 1) * v43 + (v45 + 1) * (v44 + 1)));
        v48 = v77;
        v49 = 8 * v76;
        do
        {
          v50 = *v48++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 80))(v50, v47);
          v49 -= 8;
        }
        while (v49);
      }
      if (v72 < v46)
        re::DynamicArray<re::BlendNode>::setCapacity(&v71, v46);
      v66 = a1;
      if (v78)
      {
        v51 = v79;
        v52 = 8 * v78;
        do
        {
          v53 = *v51++;
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 80))(v53, v46);
          v52 -= 8;
        }
        while (v52);
      }
      v54 = 0;
      v55 = *a3;
      v56 = a3[1];
      v65 = a3[2];
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v57 = vmul_f32(*(float32x2_t *)(a3 + 6), (float32x2_t)0x3F0000003F000000);
      v58 = *((float *)a3 + 5) * 0.5;
      v80 = 0u;
      v81 = 0u;
      v59 = (int8x8_t)vneg_f32(v57);
      v60 = &v80.f32[2];
      do
      {
        *((int8x8_t *)v60 - 1) = vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v54), (int8x8_t)0x200000001)), v59, (int8x8_t)v57);
        if ((v54 & 4) != 0)
          v61 = v58;
        else
          v61 = -v58;
        *v60 = v61;
        v60 += 4;
        ++v54;
      }
      while (v54 != 8);
      re::internal::addGrid(&v67, (float32x4_t *)&v84, (float32x4_t *)&v85, &v87, &v86, v55, v56);
      *a2 = v56 * v55;
      re::internal::addGrid(&v67, &v86, &v87, (float32x4_t *)&v83, (float32x4_t *)&v82, v55, v65);
      a2[1] = v65 * v55;
      re::internal::addGrid(&v67, &v81, &v80, (float32x4_t *)&v82, (float32x4_t *)&v83, v55, v56);
      a2[2] = v56 * v55;
      re::internal::addGrid(&v67, &v80, &v81, (float32x4_t *)&v85, (float32x4_t *)&v84, v55, v65);
      a2[3] = v65 * v55;
      re::internal::addGrid(&v67, (float32x4_t *)&v85, &v81, (float32x4_t *)&v83, &v87, v65, v56);
      a2[4] = v65 * v56;
      re::internal::addGrid(&v67, &v80, (float32x4_t *)&v84, &v86, (float32x4_t *)&v82, v65, v56);
      a2[5] = v65 * v56;
      a1 = v66;
    }
    re::GeomMesh::operator=((uint64_t)a1, &v70);
    if (*((_BYTE *)a3 + 26))
      re::internal::mergeVertexPositions(a1, v62);
  }
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v75);
  result = v71;
  if (v71)
  {
    if (v74)
      return (*(uint64_t (**)(void))(*(_QWORD *)v71 + 40))();
  }
  return result;
}

void re::buildBox(re::GeomMesh *a1, uint64_t a2)
{
  re::GeomAttribute *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::GeomAttribute *v10;
  re::GeomAttribute *v11;
  re::GeomAttribute *v12;
  uint64_t v13[2];
  _QWORD v14[2];
  _QWORD v15[2];
  uint64_t v16;
  int v17;
  re::GeomAttribute *v18;
  _QWORD v19[3];
  int v20;
  re::GeomAttribute *v21;
  _QWORD v22[3];
  int v23;
  re::GeomAttribute *v24;
  _BYTE v25[728];
  uint64_t v26;
  uint64_t v27[93];
  _DWORD v28[6];
  _BYTE v29[12];
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  _DWORD v36[12];
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 26))
  {
    *(_OWORD *)&v25[12] = *(_OWORD *)(a2 + 12);
    *(_OWORD *)v25 = *(_OWORD *)a2;
    v25[26] = 0;
    re::buildBox(a1, v25);
    return;
  }
  re::GeomMesh::GeomMesh((re::GeomMesh *)v25, 0);
  re::internal::buildBoxHelper((re::internal *)v25, v28, (unsigned __int16 *)a2);
  re::DynamicArray<re::GeomMesh>::clear(a1, v4);
  if (!*(_WORD *)a2 || !*(_WORD *)(a2 + 2) || !*(_WORD *)(a2 + 4))
  {
    re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 6uLL, (re::GeomMesh *)v25);
    goto LABEL_24;
  }
  re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 6uLL);
  v5 = 0;
  v6 = 0;
  v24 = 0;
  v21 = 0;
  memset(v22, 0, sizeof(v22));
  v23 = 0;
  v18 = 0;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v17 = 0;
  do
  {
    v7 = v28[v5];
    re::DynamicArray<float>::resize((uint64_t)v15, v7);
    v8 = v16;
    if (!(_DWORD)v7)
      goto LABEL_12;
    v9 = 0;
    v10 = v18;
    do
    {
      if (v8 == v9)
      {
        *(_QWORD *)v29 = 0;
        memset(v27, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v36[0] = 136315906;
        *(_QWORD *)&v36[1] = "operator[]";
        LOWORD(v36[3]) = 1024;
        *(_DWORD *)((char *)&v36[3] + 2) = 789;
        HIWORD(v36[4]) = 2048;
        *(_QWORD *)&v36[5] = v8;
        LOWORD(v36[7]) = 2048;
        *(_QWORD *)((char *)&v36[7] + 2) = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_27:
        v26 = 0;
        v37 = 0u;
        v38 = 0u;
        memset(v36, 0, sizeof(v36));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v29 = 136315906;
        *(_QWORD *)&v29[4] = "operator[]";
        v30 = 1024;
        v31 = 789;
        v32 = 2048;
        v33 = v5;
        v34 = 2048;
        v35 = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *((_DWORD *)v10 + v9) = v6 + v9;
      ++v9;
    }
    while (v7 != v9);
    v6 += v9;
LABEL_12:
    v14[0] = v18;
    v14[1] = v8;
    v13[0] = 0;
    v13[1] = 0;
    re::makeMeshFromFaces((unint64_t)v25, v14, v13, (uint64_t)v22, (uint64_t)v19, (unint64_t)v27);
    v7 = *((_QWORD *)a1 + 2);
    if (v7 <= v5)
      goto LABEL_27;
    re::GeomMesh::operator=((uint64_t *)(*((_QWORD *)a1 + 4) + 736 * v5), v27);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v27, v11);
    ++v5;
  }
  while (v5 != 6);
  if (v15[0])
  {
    v12 = v18;
    if (v18)
      (*(void (**)(void))(*(_QWORD *)v15[0] + 40))();
  }
  if (v19[0])
  {
    v12 = v21;
    if (v21)
      (*(void (**)(void))(*(_QWORD *)v19[0] + 40))();
  }
  if (v22[0])
  {
    v12 = v24;
    if (v24)
      (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  }
LABEL_24:
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v25, v12);
}

float re::internal::Decimator::findCornerVertices(float *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;
  float v13;
  float result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 16) = 0;
  ++*(_DWORD *)(a2 + 24);
  v4 = *(unsigned int *)a1;
  LOBYTE(v15) = 0;
  re::DynamicArray<unsigned char>::resize((_QWORD *)a2, v4, &v15);
  if (!*(_DWORD *)a1)
  {
    v6 = 0;
    v13 = 0.0;
    goto LABEL_19;
  }
  v5 = 0;
  v6 = 0;
  do
  {
    *(_QWORD *)&v17 = 0;
    *(_QWORD *)&v16 = 0;
    v15 = 0uLL;
    DWORD2(v16) = 0;
    re::GeomConnectivityManifold::fetchVertexIncidentFaces((re::GeomConnectivityManifold *)a1, v5, (_anonymous_namespace_ *)&v15);
    v7 = v16;
    if (!(_QWORD)v16)
    {
      v10 = 0;
LABEL_9:
      LODWORD(v7) = v10 == v7;
      goto LABEL_10;
    }
    if ((_QWORD)v16 != 1)
    {
      v8 = 0;
      LODWORD(v7) = 0;
      v9 = 1;
      do
      {
        v7 = (v7
                          + re::GeomConnectivityManifold::isBoundaryFace((re::GeomConnectivityManifold *)a1, *(_DWORD *)(v17 + 4 * v8)));
        v8 = v9;
        v10 = v16;
      }
      while ((unint64_t)v16 > v9++);
      goto LABEL_9;
    }
LABEL_10:
    if ((_QWORD)v15 && (_QWORD)v17)
      (*(void (**)(void))(*(_QWORD *)v15 + 40))();
    if ((_DWORD)v7)
    {
      if (*(_QWORD *)(a2 + 16) <= v5)
      {
        v18 = 0u;
        v19 = 0u;
        v16 = 0u;
        v17 = 0u;
        v15 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_BYTE *)(*(_QWORD *)(a2 + 32) + v5) = 1;
      ++v6;
    }
    ++v5;
    v12 = *(unsigned int *)a1;
  }
  while (v5 < v12);
  v13 = (float)v12;
LABEL_19:
  result = (float)v6 / v13;
  a1[143] = result;
  return result;
}

void re::internal::Decimator::convertMeshToCombinatorialMap(re::internal::Decimator *this, const re::GeomMesh *a2, re::GeomConnectivityManifold *a3)
{
  re::GeomAttribute *v5;
  re::GeomConnectivityManifold *v6;
  re::GeomAttribute *v7;
  _QWORD v8[3];
  int v9;
  uint64_t v10;
  unsigned int v11[184];
  re::internal::Decimator *v12;

  v12 = this;
  if (*((_DWORD *)a2 + 2) == *((_DWORD *)a2 + 10))
  {
    if (re::GeomConnectivityManifold::buildIfManifold(a2, this, a3))
    {
      re::internal::Decimator::convertMeshToCombinatorialMap(re::GeomMesh const&)::$_0::operator()((uint64_t *)&v12, (unsigned int *)a2);
    }
    else
    {
      v10 = 0;
      memset(v8, 0, sizeof(v8));
      v9 = 0;
      re::GeomMesh::GeomMesh((re::GeomMesh *)v11, 0);
      re::makeManifold((unint64_t)a2, (re::GeomMesh *)v11, (uint64_t)v8);
      re::GeomConnectivityManifold::buildIfManifold((re::GeomConnectivityManifold *)v11, this, v6);
      re::internal::Decimator::convertMeshToCombinatorialMap(re::GeomMesh const&)::$_0::operator()((uint64_t *)&v12, v11);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)v11, v7);
      if (v8[0])
      {
        if (v10)
          (*(void (**)(void))(*(_QWORD *)v8[0] + 40))();
      }
    }
  }
  else
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)v11, 0);
    re::internal::Decimator::convertMeshToCombinatorialMap(this, (const re::GeomMesh *)v11);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v11, v5);
  }
}

__n128 re::internal::Decimator::convertMeshToCombinatorialMap(re::GeomMesh const&)::$_0::operator()(uint64_t *a1, unsigned int *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  __n128 result;
  unint64_t i;

  v3 = *a1;
  v4 = a2[4];
  re::DynamicArray<re::Vector3<float>>::resize(*a1 + 304, v4);
  v5 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)a2);
  if ((_DWORD)v4)
  {
    for (i = 0; i != v4; ++i)
    {
      if (i == v6)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(_QWORD *)(v3 + 320) <= i)
        goto LABEL_8;
      result = *(__n128 *)(v5 + 16 * i);
      *(__n128 *)(*(_QWORD *)(v3 + 336) + 16 * i) = result;
    }
  }
  return result;
}

uint64_t re::internal::Decimator::filterValidComponents(re::GeomConnectivityManifold *a1, uint64_t a2, _DWORD *a3, _QWORD *a4, int *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int *v35;
  _DWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v10 = *((unsigned int *)a1 + 6);
  v11 = *(unsigned int *)a1;
  re::DynamicArray<BOOL>::resize(a2, v10);
  LOBYTE(v37) = 0;
  result = (uint64_t)re::DynamicArray<BOOL>::resize(a4, v11, &v37);
  *a3 = 0;
  *a5 = 0;
  if (*((_BYTE *)a1 + 565))
  {
    v35 = a5;
    v36 = a3;
    v34 = v11;
    if (v10)
    {
      v13 = 0;
      v14 = 4;
      do
      {
        result = re::GeomConnectivityManifold::isValidFace(a1, v13);
        if ((_DWORD)result)
        {
          if (*((_QWORD *)a1 + 3) <= v13)
            goto LABEL_39;
          v15 = *((_QWORD *)a1 + 5);
          v16 = *(unsigned int *)(v15 + v14 - 4);
          v17 = *((_QWORD *)a1 + 40);
          if (v17 <= v16)
            goto LABEL_40;
          v18 = *(unsigned int *)(v15 + v14);
          if (v17 <= v18)
            goto LABEL_41;
          v19 = *(unsigned int *)(v15 + v14 + 4);
          if (v17 <= v19)
            goto LABEL_42;
          if (*(_QWORD *)(a2 + 16) <= v13)
            goto LABEL_43;
          v20 = *((_QWORD *)a1 + 42);
          v21 = *(float32x4_t *)(v20 + 16 * v16);
          v22 = vsubq_f32(*(float32x4_t *)(v20 + 16 * v18), v21);
          v23 = vsubq_f32(*(float32x4_t *)(v20 + 16 * v19), v21);
          v24 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vnegq_f32(v22)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL));
          v25 = vmulq_f32(v24, v24);
          v25.f32[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), v25)).f32[0];
          *(_BYTE *)(*(_QWORD *)(a2 + 32) + v13) = v25.f32[0] > 0.0;
          if (v25.f32[0] > 0.0)
          {
            v26 = a4[2];
            if (v26 <= v16)
              goto LABEL_44;
            v27 = a4[4];
            *(_BYTE *)(v27 + v16) = 1;
            if (v26 <= v18)
              goto LABEL_45;
            *(_BYTE *)(v27 + v18) = 1;
            if (v26 <= v19)
              goto LABEL_46;
            *(_BYTE *)(v27 + v19) = 1;
            ++*v36;
          }
        }
        ++v13;
        v14 += 16;
      }
      while (v10 != v13);
    }
    if ((_DWORD)v34)
    {
      v28 = 0;
      v29 = *v35;
      v30 = a4[2];
      v31 = a4[4];
      while (v30 != v28)
      {
        if (*(_BYTE *)(v31 + v28))
          *v35 = ++v29;
        if (v34 == ++v28)
          return result;
      }
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_37:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    if (v10)
    {
      v32 = 0;
      do
      {
        result = re::GeomConnectivityManifold::isValidFace(a1, v32);
        if (*(_QWORD *)(a2 + 16) <= v32)
          goto LABEL_37;
        *(_BYTE *)(*(_QWORD *)(a2 + 32) + v32) = result;
        if ((_DWORD)result)
          ++*a3;
      }
      while (v10 != ++v32);
    }
    if ((_DWORD)v11)
    {
      v33 = 0;
      while (1)
      {
        result = re::GeomConnectivityManifold::isValidVertex(a1, v33);
        if (a4[2] <= v33)
          break;
        *(_BYTE *)(a4[4] + v33) = result;
        if ((_DWORD)result)
          ++*a5;
        if (v11 == ++v33)
          return result;
      }
LABEL_38:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_41:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_42:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_43:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_44:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_45:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_46:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::GeomConnectivityManifold::isValidFace(re::GeomConnectivityManifold *this, int a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = (4 * a2);
  if (*((_QWORD *)this + 13) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *(unsigned int *)(*((_QWORD *)this + 15) + 4 * v2);
  if (*((_QWORD *)this + 8) <= v3)
    goto LABEL_5;
  return *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v3) >> 31;
}

uint64_t re::GeomConnectivityManifold::isValidVertex(re::GeomConnectivityManifold *this, unsigned int a2)
{
  unint64_t v2;

  if (*((_QWORD *)this + 18) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = *(unsigned int *)(*((_QWORD *)this + 20) + 4 * a2);
  if (*((_QWORD *)this + 8) <= v2)
    goto LABEL_5;
  return *(_DWORD *)(*((_QWORD *)this + 10) + 4 * v2) >> 31;
}

uint64_t re::internal::Decimator::convertCombinatorialMapToMesh(re::internal::Decimator *this, re::GeomMesh *a2)
{
  unint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unint64_t p_s;
  unsigned int *v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  re::internal *v18;
  const re::GeomAttribute *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  re *v25;
  re *v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t result;
  _QWORD v35[2];
  char **v36;
  int v37;
  uint64_t v38;
  _QWORD v39[2];
  unsigned int *v40;
  int v41;
  uint64_t v42;
  _QWORD v43[2];
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *__s;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  _BYTE v60[24];
  unsigned int v61;
  _BYTE v62[12];
  __int16 v63;
  int v64;
  __int16 v65;
  unsigned int *v66;
  __int16 v67;
  unint64_t v68;
  _DWORD v69[12];
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v46 = 0;
  v47 = 0;
  p_s = (unint64_t)&__s;
  v43[1] = 0;
  v44 = 0;
  v42 = 0;
  v43[0] = 0;
  v45 = 0;
  v39[1] = 0;
  v40 = 0;
  v39[0] = 0;
  v41 = 0;
  re::internal::Decimator::filterValidComponents(this, (uint64_t)v43, (_DWORD *)&v47 + 1, v39, (int *)&v47);
  v38 = 0;
  v35[1] = 0;
  v36 = 0;
  v35[0] = 0;
  v37 = 0;
  re::DynamicArray<unsigned int>::resize(v35, *(unsigned int *)this, &re::kInvalidMeshIndex);
  v10 = v40;
  if (v40)
  {
    v11 = 0;
    v12 = 0;
    v13 = v42;
    v2 = (unint64_t)v36;
    v14 = v38;
    do
    {
      if (*((_BYTE *)v11 + v13))
      {
        if (v2 <= (unint64_t)v11)
          goto LABEL_51;
        *(_DWORD *)(v14 + 4 * (_QWORD)v11) = v12++;
      }
      v11 = (unsigned int *)((char *)v11 + 1);
    }
    while (v10 != v11);
  }
  v11 = &v50;
  bzero(&__s, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v50);
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v53, "vertexPosition", 1, 7);
  if (v50 > v47 && (_DWORD)v52 && (v52 - 1) > v52)
  {
    while (1)
      ;
  }
  v50 = v47;
  v54 = v47;
  if (v55)
  {
    v15 = v56;
    v2 = 8 * v55;
    do
    {
      v16 = *v15++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 72))(v16, v54);
      v2 -= 8;
    }
    while (v2);
  }
  v17 = HIDWORD(v47);
  if (HIDWORD(v47) < v52)
  {
    v4 = (unsigned int *)v61;
    if (v61)
    {
      LODWORD(v2) = 0;
      v3 = (unsigned int *)v60;
      do
      {
        v18 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v60, v2);
        re::internal::accessFaceVaryingAttributeSubmesh(v18, v19);
        v2 = (v2 + 1);
      }
      while ((_DWORD)v4 != (_DWORD)v2);
    }
  }
  re::DynamicArray<re::GeomCell4>::resize(&v51, v17);
  v57 = v17;
  if (v58)
  {
    v20 = v59;
    v2 = 8 * v58;
    do
    {
      v21 = *v20++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 72))(v21, v57);
      v2 -= 8;
    }
    while (v2);
  }
  v22 = v44;
  if (v44)
  {
    v23 = 0;
    v3 = 0;
    p_s = 0;
    do
    {
      if (*((_BYTE *)v3 + v46))
      {
        v2 = *((_QWORD *)this + 3);
        if (v2 <= (unint64_t)v3)
          goto LABEL_52;
        v24 = (unsigned int *)(*((_QWORD *)this + 5) + v23);
        v5 = (unsigned int *)*v24;
        v2 = (unint64_t)v36;
        if (v36 <= (char **)v5)
          goto LABEL_53;
        v6 = (unsigned int *)v24[1];
        if (v36 <= (char **)v6)
          goto LABEL_54;
        v4 = (unsigned int *)v24[2];
        if (v36 <= (char **)v4)
          goto LABEL_55;
        re::GeomMeshBuilder::setFaceVertices((uint64_t)&__s, p_s, *(_DWORD *)(v38 + 4 * (_QWORD)v5), *(_DWORD *)(v38 + 4 * (_QWORD)v6), *(_DWORD *)(v38 + 4 * (_QWORD)v4));
        p_s = (p_s + 1);
        v22 = v44;
      }
      v3 = (unsigned int *)((char *)v3 + 1);
      v23 += 16;
    }
    while (v22 > (unint64_t)v3);
  }
  v25 = (re *)re::GeomMesh::operator=((uint64_t)a2, &v50);
  v26 = re::GeomMesh::setName(v25, __s);
  v27 = __s;
  if (__s)
  {
    v28 = re::globalAllocators(v26);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v28[2] + 40))(v28[2], v27);
    __s = 0;
  }
  v29 = re::GeomMesh::modifyVertexPositions(a2);
  v31 = (unint64_t)v40;
  if (v40)
  {
    LODWORD(v32) = v30;
    v33 = 0;
    v11 = 0;
    while (1)
    {
      p_s = (unint64_t)v36;
      if (v36 <= (char **)v11)
        break;
      p_s = *(unsigned int *)(v38 + 4 * (_QWORD)v11);
      if ((_DWORD)p_s != -1)
      {
        v2 = *((_QWORD *)this + 40);
        if (v2 <= (unint64_t)v11)
          goto LABEL_56;
        if (p_s >= v30)
          goto LABEL_57;
        *(_OWORD *)(v29 + 16 * p_s) = *(_OWORD *)(*((_QWORD *)this + 42) + v33);
        v31 = (unint64_t)v40;
      }
      v11 = (unsigned int *)((char *)v11 + 1);
      v33 += 16;
      if (v31 <= (unint64_t)v11)
        goto LABEL_40;
    }
    v48 = 0;
    v70 = 0u;
    v71 = 0u;
    memset(v69, 0, sizeof(v69));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v62 = 136315906;
    *(_QWORD *)&v62[4] = "operator[]";
    v63 = 1024;
    v64 = 789;
    v65 = 2048;
    v66 = v11;
    v67 = 2048;
    v68 = p_s;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_51:
    *(_QWORD *)v62 = 0;
    *(_OWORD *)(p_s + 48) = 0u;
    *(_OWORD *)(p_s + 64) = 0u;
    *(_OWORD *)(p_s + 16) = 0u;
    *(_OWORD *)(p_s + 32) = 0u;
    *(_OWORD *)p_s = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v69[0] = 136315906;
    *(_QWORD *)&v69[1] = "operator[]";
    LOWORD(v69[3]) = 1024;
    *(_DWORD *)((char *)&v69[3] + 2) = 789;
    HIWORD(v69[4]) = 2048;
    *(_QWORD *)&v69[5] = v11;
    LOWORD(v69[7]) = 2048;
    *(_QWORD *)((char *)&v69[7] + 2) = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_52:
    v48 = 0;
    v70 = 0u;
    v71 = 0u;
    memset(v69, 0, sizeof(v69));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v62 = 136315906;
    *(_QWORD *)&v62[4] = "operator[]";
    v63 = 1024;
    v64 = 797;
    v65 = 2048;
    v66 = v3;
    v67 = 2048;
    v68 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_53:
    v48 = 0;
    v70 = 0u;
    v71 = 0u;
    memset(v69, 0, sizeof(v69));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v62 = 136315906;
    *(_QWORD *)&v62[4] = "operator[]";
    v63 = 1024;
    v64 = 789;
    v65 = 2048;
    v66 = v5;
    v67 = 2048;
    v68 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_54:
    v48 = 0;
    v70 = 0u;
    v71 = 0u;
    memset(v69, 0, sizeof(v69));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v62 = 136315906;
    *(_QWORD *)&v62[4] = "operator[]";
    v63 = 1024;
    v64 = 789;
    v65 = 2048;
    v66 = v6;
    v67 = 2048;
    v68 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_55:
    v48 = 0;
    v70 = 0u;
    v71 = 0u;
    memset(v69, 0, sizeof(v69));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v62 = 136315906;
    *(_QWORD *)&v62[4] = "operator[]";
    v63 = 1024;
    v64 = 789;
    v65 = 2048;
    v66 = v4;
    v67 = 2048;
    v68 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_56:
    v48 = 0;
    v32 = v62;
    v70 = 0u;
    v71 = 0u;
    memset(v69, 0, sizeof(v69));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v62 = 136315906;
    *(_QWORD *)&v62[4] = "operator[]";
    v63 = 1024;
    v64 = 797;
    v65 = 2048;
    v66 = v11;
    v67 = 2048;
    v68 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_57:
    v48 = 0;
    v70 = 0u;
    v71 = 0u;
    memset(v69, 0, sizeof(v69));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v62 = 136315906;
    *(_QWORD *)&v62[4] = "operator[]";
    v63 = 1024;
    v64 = 609;
    v65 = 2048;
    v66 = (unsigned int *)p_s;
    v67 = 2048;
    v68 = v32;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_40:
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)&__s);
  if (v35[0] && v38)
    (*(void (**)(void))(*(_QWORD *)v35[0] + 40))();
  if (v39[0] && v42)
    (*(void (**)(void))(*(_QWORD *)v39[0] + 40))();
  result = v43[0];
  if (v43[0] && v46)
    return (*(uint64_t (**)(void))(*(_QWORD *)v43[0] + 40))();
  return result;
}

double re::internal::Decimator::computeCentroidOfVertexPairOneRing(re::internal::Decimator *this, unsigned int *a2)
{
  uint64_t v4;
  unsigned int v5;
  float32x4_t v6;
  char v7;
  char v8;
  unsigned int v9;
  float32x4_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  float32x4_t v17;
  float32x4_t v18;
  _QWORD v19[2];
  uint64_t v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  int v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v4 = 0;
  v5 = 0;
  v37 = *MEMORY[0x24BDAC8D0];
  v22 = 0;
  v19[1] = 0;
  v20 = 0;
  v19[0] = 0;
  v21 = 0;
  v6 = 0uLL;
  v7 = 1;
  do
  {
    v17 = v6;
    v8 = v7;
    v9 = a2[v7 & 1];
    re::GeomConnectivityManifold::fetchVertexOneRing(this, a2[v4], (uint64_t)v19);
    v11 = v20;
    if (v20)
    {
      v12 = v22;
      v6 = v17;
      do
      {
        v14 = *v12++;
        v13 = v14;
        if (v14 != v9)
        {
          v15 = *((_QWORD *)this + 40);
          if (v15 <= v13)
          {
            v23 = 0;
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            v32 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v24 = 136315906;
            v25 = "operator[]";
            v26 = 1024;
            v27 = 797;
            v28 = 2048;
            v29 = v13;
            v30 = 2048;
            v31 = v15;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          ++v5;
          v10 = *(float32x4_t *)(*((_QWORD *)this + 42) + 16 * v13);
          v6 = vaddq_f32(v6, v10);
        }
        --v11;
      }
      while (v11);
    }
    else
    {
      v6 = v17;
    }
    v7 = 0;
    v4 = 1;
  }
  while ((v8 & 1) != 0);
  if (v19[0] && v22)
  {
    v18 = v6;
    (*(void (**)(void))(*(_QWORD *)v19[0] + 40))();
    v6 = v18;
  }
  v10.f32[0] = (float)v5;
  v10.i64[0] = vdivq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0)).u64[0];
  return *(double *)v10.i64;
}

void re::internal::Decimator::updateEdgeData(re::internal::Decimator *this, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  re::internal::Decimator *v7;
  unint64_t isBoundaryVertex;
  unint64_t v9;
  uint64_t v10;
  float64x2_t *v11;
  float64x2_t *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  double v41;
  int v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  int v58;
  int v59;
  char v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  double v70;
  float v71;
  float v72;
  float v73;
  float64x2_t v74;
  float v75;
  float32x4_t v76;
  int v77;
  double v78;
  double v79;
  double v80;
  double v81;
  float64x2_t v82;
  float64x2_t v83;
  double v84;
  float64x2_t v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  float64x2_t v98;
  double v99;
  float64x2_t v100;
  float v101;
  float v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64_t v106;
  float64x2_t v107;
  float64x2_t v108;
  double v109;
  float v110;
  float v111;
  float64x2_t v112;
  double v113;
  float32x2_t v114;
  float32x2_t v115;
  double v116;
  float32x2_t v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  float64x2_t v122;
  float64x2_t v127;
  uint64_t *v128;
  float32x4_t *v129;
  float32x4_t v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  float64x2_t v139;
  float64x2_t v140;
  float64x2_t v141;
  float32x4_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  const char *v147;
  __int16 v148;
  int v149;
  __int16 v150;
  unint64_t v151;
  __int16 v152;
  unint64_t v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;

  v7 = this;
  v159 = *MEMORY[0x24BDAC8D0];
  re::GeomConnectivityManifold::edgeVertices(this, a2, &v144);
  isBoundaryVertex = v144;
  v9 = *((_QWORD *)v7 + 45);
  if (v9 <= v144)
  {
    v142.i64[0] = 0;
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    v154 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v146 = 136315906;
    v147 = "operator[]";
    v148 = 1024;
    v149 = 789;
    v150 = 2048;
    v151 = isBoundaryVertex;
    v152 = 2048;
    v153 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_66;
  }
  v2 = v145;
  if (v9 <= v145)
  {
LABEL_66:
    v142.i64[0] = 0;
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    v154 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v146 = 136315906;
    v147 = "operator[]";
    v148 = 1024;
    v149 = 789;
    v150 = 2048;
    v151 = v2;
    v152 = 2048;
    v153 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_67;
  }
  v9 = *((_QWORD *)v7 + 40);
  if (v9 <= v144)
  {
LABEL_67:
    v142.i64[0] = 0;
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    v154 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v146 = 136315906;
    v147 = "operator[]";
    v148 = 1024;
    v149 = 789;
    v150 = 2048;
    v151 = isBoundaryVertex;
    v152 = 2048;
    v153 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_68;
  }
  if (v9 <= v145)
  {
LABEL_68:
    v142.i64[0] = 0;
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    v154 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v146 = 136315906;
    v147 = "operator[]";
    v148 = 1024;
    v149 = 789;
    v150 = 2048;
    v151 = v2;
    v152 = 2048;
    v153 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  v10 = *((_QWORD *)v7 + 47);
  v11 = (float64x2_t *)(v10 + 80 * v144);
  v12 = (float64x2_t *)(v10 + 80 * v145);
  v13 = v11[1].f64[0];
  v14 = v11[1].f64[1];
  v15 = v11[2].f64[0];
  v16 = v11[2].f64[1];
  v17 = v11[3].f64[0];
  v18 = v11[3].f64[1];
  v19 = v11[4].f64[0];
  v20 = v11[4].f64[1];
  v21 = *v11;
  v22 = *v12;
  v24 = v12[1].f64[0];
  v23 = v12[1].f64[1];
  v26 = v12[2].f64[0];
  v25 = v12[2].f64[1];
  v27 = v12[3].f64[0];
  v28 = v12[3].f64[1];
  v29 = v12[4].f64[0];
  v30 = v12[4].f64[1];
  v31 = *((_QWORD *)v7 + 42);
  v32 = (float32x4_t *)(v31 + 16 * v144);
  v33 = (float32x4_t *)(v31 + 16 * v145);
  v34 = *v32;
  v35 = *v33;
  v36.i64[0] = 0x3F0000003F000000;
  v36.i64[1] = 0x3F0000003F000000;
  v37 = vmulq_f32(vaddq_f32(*v32, *v33), v36);
  v142 = v37;
  v2 = a2;
  v3 = *((_QWORD *)v7 + 55);
  if (v3 <= a2)
  {
LABEL_69:
    v143 = 0;
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    v154 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v146 = 136315906;
    v147 = "operator[]";
    v148 = 1024;
    v149 = 789;
    v150 = 2048;
    v151 = v2;
    v152 = 2048;
    v153 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_70;
  }
  v38 = *((_QWORD *)v7 + 57) + 32 * a2;
  v39 = vsubq_f32(v35, v34);
  v40 = vmulq_f32(v39, v39);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]) >= 1.0e-10)goto LABEL_9;
  *(float32x4_t *)v38 = *v32;
  isBoundaryVertex = *((_QWORD *)v7 + 55);
  v41 = 0.0;
  if (isBoundaryVertex <= v2)
  {
    v143 = 0;
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    v154 = 0u;
    v7 = (re::internal::Decimator *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v146 = 136315906;
    v147 = "operator[]";
    v148 = 1024;
    v149 = 789;
    v150 = 2048;
    v151 = v2;
    v152 = 2048;
    v153 = isBoundaryVertex;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_9:
    v131 = v30;
    v132 = v29;
    v133 = v28;
    v134 = v27;
    v139 = v22;
    v140 = v21;
    v138 = v20;
    v137 = v19;
    v136 = v18;
    v135 = v17;
    v130 = v37;
    isBoundaryVertex = re::GeomConnectivityManifold::isBoundaryVertex(v7, isBoundaryVertex);
    v42 = re::GeomConnectivityManifold::isBoundaryVertex(v7, v145);
    v4 = v144;
    v3 = *((_QWORD *)v7 + 50);
    if (v3 > v144)
    {
      v5 = v145;
      if (v3 > v145)
      {
        v51.f64[1] = v139.f64[1];
        v50.f64[1] = v140.f64[1];
        v52 = vaddq_f64(v140, v139);
        v48.f64[0] = v13 + v24;
        v53 = v14 + v23;
        v54 = v15 + v26;
        v49.f64[0] = v16 + v25;
        v55 = v135 + v134;
        v46.f64[0] = v136 + v133;
        v47.f64[0] = v137 + v132;
        v56 = v138 + v131;
        v57 = *((_QWORD *)v7 + 52);
        v58 = *(unsigned __int8 *)(v57 + v144);
        v59 = *(unsigned __int8 *)(v57 + v145);
        if (!v58 || v59)
        {
          if (v59 && !v58)
            goto LABEL_30;
          if (((isBoundaryVertex ^ 1 | v42) & 1) != 0)
          {
            if (((v42 ^ 1 | isBoundaryVertex) & 1) != 0)
            {
              if (v58)
                _ZF = v59 == 0;
              else
                _ZF = 1;
              v61 = _ZF;
              if ((isBoundaryVertex ^ 1 | v42 ^ 1) == 1 && (v61 & 1) != 0)
              {
                isBoundaryVertex = *((_QWORD *)v7 + 55);
                if (isBoundaryVertex <= v2)
                  goto LABEL_73;
                v62 = v130.i64[1];
                v63 = v130.i64[0];
                v64 = *(double *)(*((_QWORD *)v7 + 57) + 32 * v2 + 16);
                if (fabsf(v64) < 0.00001)
                {
                  if (*((_DWORD *)v7 + 137) == 1)
                  {
                    v141 = v52;
                    re::internal::Decimator::computeCentroidOfVertexPairOneRing(v7, &v144);
                    v49.f64[0] = v16 + v25;
                    v48.f64[0] = v13 + v24;
                    v47.f64[0] = v137 + v132;
                    v55 = v135 + v134;
                    v46.f64[0] = v136 + v133;
                    v53 = v14 + v23;
                    v54 = v15 + v26;
                    v56 = v138 + v131;
                    v52 = v141;
                  }
                  goto LABEL_31;
                }
                v77 = *((_DWORD *)v7 + 136);
                if (v77 != 1)
                {
                  if (v77)
                  {
                    v113 = v32->f32[0];
                    *(double *)&v114 = v32->f32[1];
                    *(double *)&v115 = v32->f32[2];
                    v116 = v56
                         + v54 * *(double *)&v114 * *(double *)&v114
                         + v113 * v52.f64[0] * v113
                         + v46.f64[0] * *(double *)&v115 * *(double *)&v115
                         + (v48.f64[0] * v113 * *(double *)&v115
                          + vmuld_lane_f64(v113, v52, 1) * *(double *)&v114
                          + v49.f64[0] * *(double *)&v114 * *(double *)&v115
                          + v53 * v113
                          + v55 * *(double *)&v114
                          + v47.f64[0] * *(double *)&v115)
                         * 2.0;
                    v114.i32[0] = v33->i32[0];
                    v117.i32[0] = v33->i32[2];
                    v114.i32[1] = v130.i32[0];
                    v118 = vcvtq_f64_f32(v114);
                    v115.i32[1] = v130.i32[1];
                    v115.i32[0] = v33->i32[1];
                    v119 = vcvtq_f64_f32(v115);
                    v117.i32[1] = v130.i32[2];
                    v120 = vcvtq_f64_f32(v117);
                    v121 = vmlaq_f64(vmlaq_f64(vmulq_f64(vmulq_n_f64(v119, v54), v119), v118, vmulq_n_f64(v118, v52.f64[0])), v120, vmulq_n_f64(v120, v46.f64[0]));
                    v122 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vmulq_n_f64(v118, v48.f64[0]), v120), v119, vmulq_laneq_f64(v118, v52, 1)), v120, vmulq_n_f64(v119, v49.f64[0])), v118, v53), v119, v55), v120, v47.f64[0]);
                    __asm { FMOV            V1.2D, #2.0 }
                    v127 = vaddq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v56, 0), vmlaq_f64(v121, _Q1, v122));
                    v128 = (uint64_t *)&v142;
                    if (v116 >= v127.f64[1])
                      v129 = &v142;
                    else
                      v129 = v32;
                    if (v127.f64[0] < v127.f64[1])
                      v128 = (uint64_t *)v33;
                    if (v116 < v127.f64[0])
                      v128 = (uint64_t *)v129;
                    v63 = *v128;
                    v62 = v128[1];
                  }
                  else
                  {
                    v78 = vmuld_lane_f64(v49.f64[0], v52, 1);
                    v79 = -v52.f64[1];
                    v80 = v48.f64[0] * v78
                        + v54 * v52.f64[0] * v46.f64[0]
                        + vmuld_lane_f64(v48.f64[0], v52, 1) * v49.f64[0]
                        + -(v52.f64[0] * v49.f64[0]) * v49.f64[0]
                        + vmuld_lane_f64(-v52.f64[1], v52, 1) * v46.f64[0]
                        + -(v48.f64[0] * v54) * v48.f64[0];
                    if (v80 > 0.0)
                    {
                      v81 = 1.0 / v80;
                      v82.f64[0] = (v54 * v46.f64[0] - v49.f64[0] * v49.f64[0]) * (1.0 / v80);
                      v83.f64[0] = (v46.f64[0] * v79 + v48.f64[0] * v49.f64[0]) * (1.0 / v80);
                      v50.f64[0] = (v78 + -v48.f64[0] * v54) * v81;
                      v84 = (v52.f64[0] * v46.f64[0] + -v48.f64[0] * v48.f64[0]) * v81;
                      v45.f64[0] = (v52.f64[1] * v48.f64[0] - v52.f64[0] * v49.f64[0]) * v81;
                      v43.f64[0] = (v54 * v52.f64[0] + v79 * v52.f64[1]) * v81;
                      v85 = vabsq_f64(v52);
                      v86 = fabs(v48.f64[0]);
                      v87 = vaddvq_f64(v85) + v86;
                      v88 = fabs(v49.f64[0]);
                      v89 = v85.f64[1] + fabs(v54) + v88;
                      if (v87 < v89)
                        v87 = v89;
                      v90 = v86 + v88 + fabs(v46.f64[0]);
                      if (v87 < v90)
                        v87 = v90;
                      v91 = fabs(v83.f64[0]);
                      v92 = fabs(v50.f64[0]);
                      v93 = v92 + fabs(v82.f64[0]) + v91;
                      v94 = fabs(v45.f64[0]);
                      v95 = v94 + v91 + fabs(v84);
                      if (v93 < v95)
                        v93 = v95;
                      v96 = fabs(v43.f64[0]) + v92 + v94;
                      if (v93 < v96)
                        v93 = v96;
                      v97 = v87 * v93;
                      if (v97 > 0.0 && 1.0 / v97 >= 0.000001)
                      {
                        v82.f64[1] = v83.f64[0];
                        v83.f64[1] = v84;
                        v98.f64[0] = v14 + v23;
                        v98.f64[1] = v135 + v134;
                        v99 = vmulq_f64(v47, v50).f64[0];
                        v50.f64[1] = v45.f64[0];
                        v100 = vmulq_f64(v98, v82);
                        *(float *)v100.f64 = v99 + vaddvq_f64(v100);
                        *(float *)v100.f64 = -*(float *)v100.f64;
                        v101 = vmulq_f64(v47, v45).f64[0] + vaddvq_f64(vmulq_f64(v98, v83));
                        v102 = vmulq_f64(v47, v43).f64[0] + vaddvq_f64(vmulq_f64(v98, v50));
                        *((float *)v100.f64 + 1) = -v101;
                        *(float *)&v100.f64[1] = -v102;
                        v62 = *(_QWORD *)&v100.f64[1];
                        v63 = *(_QWORD *)&v100.f64[0];
                      }
                    }
                  }
LABEL_31:
                  *(_QWORD *)v38 = v63;
                  *(_QWORD *)(v38 + 8) = v62;
                  isBoundaryVertex = *((_QWORD *)v7 + 55);
                  if (isBoundaryVertex > v2)
                  {
                    v41 = v56
                        + v54 * *((float *)&v63 + 1) * *((float *)&v63 + 1)
                        + *(float *)&v63 * v52.f64[0] * *(float *)&v63
                        + v46.f64[0] * *(float *)&v62 * *(float *)&v62
                        + (v48.f64[0] * *(float *)&v63 * *(float *)&v62
                         + vmuld_lane_f64(*(float *)&v63, v52, 1) * *((float *)&v63 + 1)
                         + v49.f64[0] * *((float *)&v63 + 1) * *(float *)&v62
                         + v53 * *(float *)&v63
                         + v55 * *((float *)&v63 + 1)
                         + v47.f64[0] * *(float *)&v62)
                        * 2.0;
                    goto LABEL_33;
                  }
                  goto LABEL_72;
                }
                v103 = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)v33->f32, *(float32x2_t *)v32->f32));
                LODWORD(v51.f64[0]) = v32->i32[2];
                v45.f64[0] = (float)(v33->f32[2] - *(float *)v51.f64);
                *(_QWORD *)&v104.f64[0] = vdupq_laneq_s64((int64x2_t)v52, 1).u64[0];
                v104.f64[1] = v15 + v26;
                v105.f64[0] = v13 + v24;
                v105.f64[1] = v16 + v25;
                v108.f64[0] = vmulq_f64(v48, v45).f64[0] + vaddvq_f64(vmulq_f64(v52, v103));
                v106 = vmulq_f64(v49, v45).f64[0] + vaddvq_f64(vmulq_f64(v104, v103));
                v107 = vmulq_f64(v46, v45);
                v107.f64[0] = v107.f64[0] + vaddvq_f64(vmulq_f64(v105, v103));
                v108.f64[1] = v106;
                v109 = -(vmulq_f64(v45, v107).f64[0] + vaddvq_f64(vmulq_f64(v103, v108)));
                *(float *)&v106 = v109;
                v110 = fabsf(*(float *)&v106);
                v111 = 0.5;
                if (v110 < 0.00001
                  || (v112.f64[0] = v14 + v23,
                      v112.f64[1] = v135 + v134,
                      v51.f64[0] = *(float *)v51.f64,
                      v75 = (vmulq_f64(v47, v45).f64[0]
                           + vaddvq_f64(vmulq_f64(v112, v103))
                           + vmulq_f64(v51, v107).f64[0]
                           + vaddvq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v32->f32), v108)))
                          / v109,
                      v111 = 0.0,
                      v75 < 0.0)
                  || (v111 = 1.0, v75 > 1.0))
                {
                  v75 = v111;
                }
              }
              else
              {
                v65 = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)v33->f32, *(float32x2_t *)v32->f32));
                LODWORD(v51.f64[0]) = v32->i32[2];
                v44.f64[0] = (float)(v33->f32[2] - *(float *)v51.f64);
                *(_QWORD *)&v66.f64[0] = vdupq_laneq_s64((int64x2_t)v52, 1).u64[0];
                v66.f64[1] = v15 + v26;
                v67.f64[0] = v13 + v24;
                v67.f64[1] = v16 + v25;
                v68.f64[0] = vmulq_f64(v48, v44).f64[0] + vaddvq_f64(vmulq_f64(v52, v65));
                v69 = vmulq_f64(v66, v65);
                v68.f64[1] = vmulq_f64(v49, v44).f64[0] + vaddvq_f64(v69);
                v69.f64[0] = vmulq_f64(v46, v44).f64[0] + vaddvq_f64(vmulq_f64(v67, v65));
                v70 = -(vmulq_f64(v44, v69).f64[0] + vaddvq_f64(vmulq_f64(v65, v68)));
                v71 = v70;
                v72 = fabsf(v71);
                v73 = 0.5;
                if (v72 < 0.00001
                  || (v74.f64[0] = v14 + v23,
                      v74.f64[1] = v135 + v134,
                      v51.f64[0] = *(float *)v51.f64,
                      v75 = (vmulq_f64(v47, v44).f64[0]
                           + vaddvq_f64(vmulq_f64(v74, v65))
                           + vmulq_f64(v51, v69).f64[0]
                           + vaddvq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v32->f32), v68)))
                          / v70,
                      v73 = 0.0,
                      v75 < 0.0)
                  || (v73 = 1.0, v75 > 1.0))
                {
                  v75 = v73;
                }
              }
              v76 = vaddq_f32(vmulq_n_f32(*v32, 1.0 - v75), vmulq_n_f32(*v33, v75));
              v62 = v76.i64[1];
              v63 = v76.i64[0];
              goto LABEL_31;
            }
LABEL_30:
            v63 = v33->i64[0];
            v62 = v33->i64[1];
            goto LABEL_31;
          }
        }
        v63 = v32->i64[0];
        v62 = v32->i64[1];
        goto LABEL_31;
      }
LABEL_71:
      v143 = 0;
      v157 = 0u;
      v158 = 0u;
      v155 = 0u;
      v156 = 0u;
      v154 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v146 = 136315906;
      v147 = "operator[]";
      v148 = 1024;
      v149 = 789;
      v150 = 2048;
      v151 = v5;
      v152 = 2048;
      v153 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_72:
      v143 = 0;
      v157 = 0u;
      v158 = 0u;
      v155 = 0u;
      v156 = 0u;
      v154 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v146 = 136315906;
      v147 = "operator[]";
      v148 = 1024;
      v149 = 789;
      v150 = 2048;
      v151 = v2;
      v152 = 2048;
      v153 = isBoundaryVertex;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_73:
      v143 = 0;
      v157 = 0u;
      v158 = 0u;
      v155 = 0u;
      v156 = 0u;
      v154 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v146 = 136315906;
      v147 = "operator[]";
      v148 = 1024;
      v149 = 789;
      v150 = 2048;
      v151 = v2;
      v152 = 2048;
      v153 = isBoundaryVertex;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_70:
    v143 = 0;
    v157 = 0u;
    v158 = 0u;
    v155 = 0u;
    v156 = 0u;
    v154 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v146 = 136315906;
    v147 = "operator[]";
    v148 = 1024;
    v149 = 789;
    v150 = 2048;
    v151 = v4;
    v152 = 2048;
    v153 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_71;
  }
LABEL_33:
  *(double *)(*((_QWORD *)v7 + 57) + 32 * v2 + 16) = v41;
}

uint64_t re::internal::Decimator::checkForFlip(re::GeomConnectivityManifold *a1, unsigned int a2, int a3, float32x4_t *a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float32x4_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  int v32;
  unsigned int *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  v30[1] = 0;
  v31 = 0;
  v30[0] = 0;
  v32 = 0;
  re::GeomConnectivityManifold::fetchVertexIncidentFaces(a1, a2, (_anonymous_namespace_ *)v30);
  v8 = *((_QWORD *)a1 + 40);
  if (v8 <= a2)
    goto LABEL_31;
  if (v31)
  {
    v9 = *((_QWORD *)a1 + 42);
    v10 = *((_QWORD *)a1 + 3);
    v11 = 0xFFFFFFFFLL;
    v12 = 0xFFFFFFFFLL;
    v13 = *a4;
    v14 = v33;
    while (1)
    {
      v15 = *v14;
      if (v10 <= v15)
        break;
      v16 = 0;
      v35 = *(_OWORD *)(*((_QWORD *)a1 + 5) + 16 * v15);
      while (*((_DWORD *)&v35 + v16) != a2)
      {
        if (++v16 == 3)
          goto LABEL_16;
      }
      if (v16 > 1)
        v17 = -2;
      else
        v17 = 1;
      v11 = *((unsigned int *)&v35 + (v17 + v16));
      if ((_DWORD)v16)
        v18 = (v16 - 1);
      else
        v18 = 2;
      v12 = *((unsigned int *)&v35 + v18);
LABEL_16:
      if (v11 != a3 && v12 != a3)
      {
        if (v8 <= v11)
          goto LABEL_29;
        if (v8 <= v12)
          goto LABEL_30;
        v19 = *(float32x4_t *)(v9 + 16 * v11);
        v20 = *(float32x4_t *)(v9 + 16 * a2);
        v21 = vsubq_f32(v19, v20);
        v22 = *(float32x4_t *)(v9 + 16 * v12);
        v23 = vsubq_f32(v22, v20);
        v24 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vnegq_f32(v21)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL));
        v25 = vsubq_f32(v19, v13);
        v26 = vsubq_f32(v22, v13);
        v27 = vmulq_f32(v24, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), vnegq_f32(v25)), v26, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL)));
        if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), v27)).f32[0] <= 0.0)
        {
          v28 = 0;
          goto LABEL_24;
        }
      }
      if (++v14 == &v33[v31])
        goto LABEL_22;
    }
    v34 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 797;
    v40 = 2048;
    v41 = v15;
    v42 = 2048;
    v43 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    v34 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 789;
    v40 = 2048;
    v41 = v11;
    v42 = 2048;
    v43 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    v34 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 789;
    v40 = 2048;
    v41 = v12;
    v42 = 2048;
    v43 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    *(_QWORD *)&v35 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v44 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v36 = 136315906;
    v37 = "operator[]";
    v38 = 1024;
    v39 = 789;
    v40 = 2048;
    v41 = a2;
    v42 = 2048;
    v43 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_22:
  v28 = 1;
LABEL_24:
  if (v30[0] && v33)
    (*(void (**)(void))(*(_QWORD *)v30[0] + 40))();
  return v28;
}

uint64_t re::GeomConnectivityManifold::isBoundaryVertex(re::GeomConnectivityManifold *this, unsigned int a2)
{
  unint64_t v2;

  if (*((_QWORD *)this + 18) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = *(unsigned int *)(*((_QWORD *)this + 20) + 4 * a2);
  if (*((_QWORD *)this + 8) <= v2)
    goto LABEL_5;
  return (*(_DWORD *)(*((_QWORD *)this + 10) + 4 * v2) >> 30) & 1;
}

uint64_t re::internal::Decimator::decimateOneEdge(re::internal::Decimator *this)
{
  unsigned int *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  re::internal::Decimator *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t isBoundaryEdge;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unsigned int VertexIncidentEdges;
  _BOOL4 v14;
  float32x4_t *v15;
  unint64_t v16;
  uint64_t v17;
  float64x2_t *v18;
  float64x2_t *v19;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v24;
  float64x2_t *v25;
  float64x2_t *v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36[4];
  double v37;
  uint64_t v38;
  unsigned int v39[7];
  __int16 v40;
  _BYTE v41[10];
  unsigned int v42;
  unsigned int v43;
  _BYTE v44[12];
  __int16 v45;
  int v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 60);
  if (!(_DWORD)v5)
    return 0;
  v6 = this;
  v7 = (_QWORD *)((char *)this + 464);
  v8 = *((_QWORD *)this + 62);
  *(_OWORD *)v36 = *(_OWORD *)v8;
  v37 = *(double *)(v8 + 16);
  if ((_DWORD)v5 == 1)
  {
    *((_QWORD *)this + 60) = 0;
    ++*((_DWORD *)this + 122);
    goto LABEL_13;
  }
  isBoundaryEdge = v5 - 1;
  if (v5 <= isBoundaryEdge)
  {
LABEL_63:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = isBoundaryEdge;
    v40 = 2048;
    *(_QWORD *)v41 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_64;
  }
  v10 = (__int128 *)(v8 + 24 * isBoundaryEdge);
  v11 = *v10;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)v10 + 2);
  *(_OWORD *)v8 = v11;
  v12 = *((_QWORD *)this + 60);
  if (!v12)
  {
LABEL_64:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = 0;
    v40 = 2048;
    *(_QWORD *)v41 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_65;
  }
  v5 = **((unsigned int **)this + 62);
  v1 = (unsigned int *)*((_QWORD *)this + 65);
  if ((unint64_t)v1 <= v5)
  {
LABEL_65:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v5;
    v40 = 2048;
    *(_QWORD *)v41 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_66;
  }
  *(_DWORD *)(*((_QWORD *)this + 67) + 4 * v5) = 0;
  if (v12 < isBoundaryEdge)
  {
    if (*((_QWORD *)this + 59) < isBoundaryEdge)
      re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)this + 58, isBoundaryEdge);
    goto LABEL_11;
  }
  if (v12 > isBoundaryEdge)
  {
LABEL_11:
    *((_QWORD *)v6 + 60) = isBoundaryEdge;
    ++*((_DWORD *)v6 + 122);
  }
  re::internal::IndexedPriorityQueue::rebalance(v7, 0);
LABEL_13:
  v5 = v36[0];
  isBoundaryEdge = *((_QWORD *)v6 + 65);
  if (isBoundaryEdge <= v36[0])
  {
LABEL_61:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v5;
    v40 = 2048;
    *(_QWORD *)v41 = isBoundaryEdge;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    v38 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v44 = 136315906;
    *(_QWORD *)&v44[4] = "operator[]";
    v45 = 1024;
    v46 = 789;
    v47 = 2048;
    v48 = v5;
    v49 = 2048;
    v50 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_63;
  }
  *(_DWORD *)(*((_QWORD *)v6 + 67) + 4 * v36[0]) = -1;
  if (!re::GeomConnectivityManifold::isCollapseEdgeSafe(v6, v5))
    return 0;
  if (*((_DWORD *)v6 + 138) == 1)
  {
    re::GeomConnectivityManifold::edgeVertices(v6, v5, v39);
    if ((re::GeomConnectivityManifold::isBoundaryVertex(v6, v39[0]) & 1) != 0
      || (re::GeomConnectivityManifold::isBoundaryVertex(v6, v39[1]) & 1) != 0)
    {
      return 0;
    }
    *(_QWORD *)&v53 = 0;
    *(_QWORD *)&v52 = 0;
    v51 = 0uLL;
    DWORD2(v52) = 0;
    VertexIncidentEdges = re::GeomConnectivityManifold::fetchVertexIncidentEdges(v6, v39[0], (_anonymous_namespace_ *)&v51);
    v14 = 0;
    if (VertexIncidentEdges <= 0x20)
      v14 = re::GeomConnectivityManifold::fetchVertexIncidentEdges(v6, v39[1], (_anonymous_namespace_ *)&v51)+ VertexIncidentEdges < 0x21;
    if ((_QWORD)v51 && (_QWORD)v53)
      (*(void (**)(_QWORD))(*(_QWORD *)v51 + 40))(v51);
    if (!v14)
      return 0;
  }
  isBoundaryEdge = re::GeomConnectivityManifold::isBoundaryEdge(v6, v5);
  re::GeomConnectivityManifold::edgeVertices(v6, v5, &v42);
  v1 = (unsigned int *)*((_QWORD *)v6 + 55);
  if ((unint64_t)v1 <= v5)
  {
LABEL_66:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v5;
    v40 = 2048;
    *(_QWORD *)v41 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_67;
  }
  v15 = (float32x4_t *)(*((_QWORD *)v6 + 57) + 32 * v5);
  if (!*((_BYTE *)v6 + 556))
    goto LABEL_33;
  while (1)
  {
    v35 = 0;
    re::GeomConnectivityManifold::collapseEdgeWithoutSafetyCheck(v6, v5, &v35);
    if (!re::GeomConnectivityManifold::isValidVertex(v6, v35))
      goto LABEL_55;
    v5 = v35;
    v16 = v42;
    if (v35 != v42)
      break;
    v16 = v43;
    v2 = *((_QWORD *)v6 + 45);
    if (v2 <= v43)
      goto LABEL_68;
    if (v2 <= v35)
      goto LABEL_69;
    v17 = *((_QWORD *)v6 + 47);
    v18 = (float64x2_t *)(v17 + 80 * v43);
    v19 = (float64x2_t *)(v17 + 80 * v35);
    v20 = vaddq_f64(v18[1], v19[1]);
    *v19 = vaddq_f64(*v18, *v19);
    v19[1] = v20;
    v21 = vaddq_f64(v18[3], v19[3]);
    v19[2] = vaddq_f64(v18[2], v19[2]);
    v19[3] = v21;
    v19[4] = vaddq_f64(v18[4], v19[4]);
    v2 = *((_QWORD *)v6 + 50);
    if (v2 <= v16)
      goto LABEL_70;
    if (v2 > v5)
      goto LABEL_41;
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    v6 = (re::internal::Decimator *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v5;
    v40 = 2048;
    *(_QWORD *)v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_33:
    if (!re::internal::Decimator::checkForFlip(v6, v42, v43, v15)
      || !re::internal::Decimator::checkForFlip(v6, v43, v42, v15))
    {
      return 0;
    }
  }
  v2 = *((_QWORD *)v6 + 45);
  if (v2 <= v42)
    goto LABEL_71;
  v5 = v43;
  if (v2 <= v43)
  {
LABEL_72:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v5;
    v40 = 2048;
    *(_QWORD *)v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_73;
  }
  v24 = *((_QWORD *)v6 + 47);
  v25 = (float64x2_t *)(v24 + 80 * v42);
  v26 = (float64x2_t *)(v24 + 80 * v43);
  v27 = vaddq_f64(v25[1], v26[1]);
  *v26 = vaddq_f64(*v25, *v26);
  v26[1] = v27;
  v28 = vaddq_f64(v25[3], v26[3]);
  v26[2] = vaddq_f64(v25[2], v26[2]);
  v26[3] = v28;
  v26[4] = vaddq_f64(v25[4], v26[4]);
  v2 = *((_QWORD *)v6 + 50);
  if (v2 <= v16)
  {
LABEL_73:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    v34 = v16;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v34;
    v40 = 2048;
    *(_QWORD *)v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_74:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v5;
    v40 = 2048;
    *(_QWORD *)v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 <= v5)
    goto LABEL_74;
LABEL_41:
  *(_BYTE *)(*((_QWORD *)v6 + 52) + v5) |= *(_BYTE *)(*((_QWORD *)v6 + 52) + v16);
  v5 = v35;
  v2 = *((_QWORD *)v6 + 40);
  if (v2 <= v35)
  {
LABEL_67:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v5;
    v40 = 2048;
    *(_QWORD *)v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    v31 = v16;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v31;
    v40 = 2048;
    *(_QWORD *)v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_69:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v5;
    v40 = 2048;
    *(_QWORD *)v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_70:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    v32 = v16;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v32;
    v40 = 2048;
    *(_QWORD *)v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_71:
    *(_QWORD *)v44 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    v33 = v16;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v39[0] = 136315906;
    *(_QWORD *)&v39[1] = "operator[]";
    LOWORD(v39[3]) = 1024;
    *(unsigned int *)((char *)&v39[3] + 2) = 789;
    HIWORD(v39[4]) = 2048;
    *(_QWORD *)&v39[5] = v33;
    v40 = 2048;
    *(_QWORD *)v41 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_72;
  }
  *(float32x4_t *)(*((_QWORD *)v6 + 42) + 16 * v35) = *v15;
  *(_QWORD *)&v41[2] = 0;
  memset(v39, 0, sizeof(v39));
  re::GeomConnectivityManifold::fetchVertexIncidentEdges(v6, v5, (_anonymous_namespace_ *)v39);
  if (*(_QWORD *)&v39[4])
  {
    v1 = *(unsigned int **)&v41[2];
    v2 = 4 * *(_QWORD *)&v39[4];
    while (1)
    {
      v5 = *v1;
      re::internal::Decimator::updateEdgeData(v6, *v1);
      v3 = *((_QWORD *)v6 + 65);
      if (v3 <= v5)
        break;
      v3 = *(unsigned int *)(*((_QWORD *)v6 + 67) + 4 * v5);
      if ((_DWORD)v3 == -1)
      {
        v3 = *((_QWORD *)v6 + 55);
        if (v3 <= v5)
          goto LABEL_62;
        *(_QWORD *)&v36[2] = *(_QWORD *)(*((_QWORD *)v6 + 57) + 32 * v5 + 16);
        LODWORD(v51) = v5;
        *((_QWORD *)&v51 + 1) = *(_QWORD *)&v36[2];
        *(_QWORD *)&v52 = 0;
        v30 = (unsigned int *)&v51;
      }
      else
      {
        v4 = *((_QWORD *)v6 + 60);
        if (v4 <= v3)
          goto LABEL_59;
        v29 = *((_QWORD *)v6 + 62) + 24 * v3;
        *(_OWORD *)v36 = *(_OWORD *)v29;
        v37 = *(double *)(v29 + 16);
        v3 = *((_QWORD *)v6 + 55);
        if (v3 <= v5)
          goto LABEL_60;
        *(_QWORD *)&v36[2] = *(_QWORD *)(*((_QWORD *)v6 + 57) + 32 * v5 + 16);
        v37 = v37 + 1.0;
        v30 = v36;
      }
      re::internal::IndexedPriorityQueue::pushOrChangeCost(v7, v30);
      ++v1;
      v2 -= 4;
      if (!v2)
        goto LABEL_52;
    }
    v38 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v44 = 136315906;
    *(_QWORD *)&v44[4] = "operator[]";
    v45 = 1024;
    v46 = 797;
    v47 = 2048;
    v48 = v5;
    v49 = 2048;
    v50 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_59:
    v38 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v44 = 136315906;
    *(_QWORD *)&v44[4] = "operator[]";
    v45 = 1024;
    v46 = 797;
    v47 = 2048;
    v48 = v3;
    v49 = 2048;
    v50 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    v38 = 0;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v44 = 136315906;
    *(_QWORD *)&v44[4] = "operator[]";
    v45 = 1024;
    v46 = 789;
    v47 = 2048;
    v48 = v5;
    v49 = 2048;
    v50 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_61;
  }
LABEL_52:
  if (*(_QWORD *)v39 && *(_QWORD *)&v41[2])
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v39 + 40))(*(_QWORD *)v39, *(_QWORD *)&v41[2]);
LABEL_55:
  if ((_DWORD)isBoundaryEdge)
    return 1;
  else
    return 2;
}

uint64_t re::GeomConnectivityManifold::isBoundaryEdge(re::GeomConnectivityManifold *this, unsigned int a2)
{
  unint64_t v2;

  if (*((_QWORD *)this + 28) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = *(unsigned int *)(*((_QWORD *)this + 30) + 4 * a2);
  if (*((_QWORD *)this + 8) <= v2)
    goto LABEL_5;
  return (*(_DWORD *)(*((_QWORD *)this + 10) + 4 * v2) >> 30) & 1;
}

_QWORD *re::internal::IndexedPriorityQueue::pushOrChangeCost(_QWORD *this, unsigned int *a2)
{
  unint64_t v2;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  __int128 v16;

  v2 = *a2;
  if (this[7] <= v2)
  {
LABEL_19:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = this;
  v5 = *(unsigned int *)(this[9] + 4 * v2);
  if ((_DWORD)v5 == -1)
    return re::internal::IndexedPriorityQueue::push(this, a2);
  if (this[2] <= v5)
    goto LABEL_20;
  v6 = this[4];
  v7 = v6 + 24 * v5;
  v8 = *(double *)(v7 + 8);
  v9 = *((double *)a2 + 1);
  if ((v8 - v9) * (v8 - v9) <= 1.0e-12)
  {
    v8 = *(double *)(v6 + 24 * v5 + 16);
    v9 = *((double *)a2 + 2);
  }
  if (v8 <= v9)
  {
    if (v8 < v9)
    {
      v16 = *(_OWORD *)a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v16;
      return re::internal::IndexedPriorityQueue::rebalance(this, v5);
    }
  }
  else
  {
    v10 = *(_OWORD *)a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v10;
    if ((_DWORD)v5)
    {
      while (1)
      {
        v11 = v5 - 1;
        v12 = (v5 - 1) >> 1;
        if (v4[2] <= v12)
          break;
        v13 = v4[4];
        v14 = *(double *)(v13 + 24 * v12 + 8);
        v15 = *((double *)a2 + 1);
        if ((v14 - v15) * (v14 - v15) <= 1.0e-12)
        {
          v14 = *(double *)(v13 + 24 * v12 + 16);
          v15 = *((double *)a2 + 2);
        }
        if (v14 > v15)
        {
          this = re::internal::IndexedPriorityQueue::swap(v4, v5, v11 >> 1);
          LODWORD(v5) = v11 >> 1;
          if (v11 >= 2)
            continue;
        }
        return this;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_19;
    }
  }
  return this;
}

_QWORD *re::internal::Decimator::computeQuadrics(_QWORD *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  _OWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float64x2_t *v29;
  float32x2_t v30;
  float32x2_t v31;
  float64x2_t v32;
  float32x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v40;
  int isBoundaryVertex;
  int v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float v56;
  float64x2_t v57;
  float32x4_t v58;
  float v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x4_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float v70;
  float32x4_t v71;
  float v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x2_t v77;
  float v78;
  double v79;
  float64_t v80;
  double v81;
  float64_t v82;
  double v83;
  double v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float v88;
  float32x4_t v89;
  float32x4_t v90;
  float v91;
  float32x2_t v92;
  float32x2_t v93;
  float32x4_t v94;
  float32x2_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x2_t v98;
  double v99;
  float64x2_t *v100;
  float64x2_t v101;
  float64x2_t v102;
  unint64_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float64x2_t v106;
  float64x2_t v107;
  float64x2_t v108;
  _QWORD v109[2];
  unint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  int v115;
  const char *v116;
  __int16 v117;
  int v118;
  __int16 v119;
  unint64_t v120;
  __int16 v121;
  unint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;

  v4 = (uint64_t)this;
  v128 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)this;
  v6 = this[45];
  if (v6 >= v5)
  {
    if (v6 <= v5)
      goto LABEL_10;
  }
  else
  {
    if (this[44] < v5)
    {
      this = re::DynamicArray<re::internal::Quadric>::setCapacity(this + 43, v5);
      v6 = *(_QWORD *)(v4 + 360);
    }
    v7 = v5 - v6;
    if (v5 > v6)
    {
      v8 = 80 * v6;
      do
      {
        v9 = (_OWORD *)(*(_QWORD *)(v4 + 376) + v8);
        v9[3] = 0uLL;
        v9[4] = 0uLL;
        v9[1] = 0uLL;
        v9[2] = 0uLL;
        *v9 = 0uLL;
        v8 += 80;
        --v7;
      }
      while (v7);
    }
  }
  *(_QWORD *)(v4 + 360) = v5;
  ++*(_DWORD *)(v4 + 368);
  v6 = v5;
LABEL_10:
  v112 = 0;
  v109[1] = 0;
  v110 = 0;
  v109[0] = 0;
  v111 = 0;
  if ((_DWORD)v5)
  {
    v10 = 0;
    v103 = v5;
    do
    {
      if (v6 <= v10)
        goto LABEL_79;
      v11 = (_OWORD *)(*(_QWORD *)(v4 + 376) + 80 * v10);
      v11[3] = 0u;
      v11[4] = 0u;
      v11[1] = 0u;
      v11[2] = 0u;
      *v11 = 0u;
      re::GeomConnectivityManifold::fetchVertexIncidentFaces((re::GeomConnectivityManifold *)v4, v10, (_anonymous_namespace_ *)v109);
      v12 = v110;
      if (v110)
      {
        v13 = 0;
        v14 = 0;
        v107 = 0u;
        v108 = 0u;
        v104 = 0u;
        v105 = 0u;
        v106 = 0u;
        while (1)
        {
          v6 = *(unsigned int *)(v112 + 4 * v13);
          v15 = *(_QWORD *)(v4 + 24);
          if (v15 <= v6)
            break;
          v16 = (unsigned int *)(*(_QWORD *)(v4 + 40) + 16 * v6);
          v15 = *v16;
          v3 = *(_QWORD *)(v4 + 320);
          if (v3 <= v15)
            goto LABEL_69;
          v1 = v16[1];
          if (v3 <= v1)
            goto LABEL_70;
          v2 = v16[2];
          if (v3 <= v2)
            goto LABEL_71;
          v17 = *(_QWORD *)(v4 + 336);
          v18 = *(float32x4_t *)(v17 + 16 * v15);
          v19 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v1), v18);
          v20 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v2), v18);
          v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(v19)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL));
          v22 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL);
          if (!*(_BYTE *)(v4 + 564))
          {
            v23 = vmulq_f32(v21, v21);
            v24 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), v23)).f32[0];
            if (v24 > 0.0)
            {
              v25 = v24;
              v26 = vrsqrte_f32((float32x2_t)LODWORD(v24));
              v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)LODWORD(v25), vmul_f32(v26, v26)));
              v22 = vmulq_n_f32(v22, vmul_f32(v27, vrsqrts_f32((float32x2_t)LODWORD(v25), vmul_f32(v27, v27))).f32[0]);
            }
          }
          v15 = *(_QWORD *)(v4 + 360);
          if (v15 <= v10)
            goto LABEL_72;
          v28 = vmulq_f32(v18, v22);
          v28.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0];
          v29 = (float64x2_t *)(*(_QWORD *)(v4 + 376) + 80 * v10);
          v30 = (float32x2_t)vdup_laneq_s32((int32x4_t)v22, 2);
          v31.i32[0] = v30.i32[0];
          v31.f32[1] = -v28.f32[0];
          v32 = vaddq_f64(v29[1], vcvtq_f64_f32(vmul_n_f32(v31, v22.f32[0])));
          *v29 = vaddq_f64(*v29, vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)v22.f32, v22.f32[0])));
          v29[1] = v32;
          v33 = (float32x2_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL).u64[0];
          v34 = vaddq_f64(v29[2], vcvtq_f64_f32(vmul_lane_f32(v33, *(float32x2_t *)v22.f32, 1)));
          HIDWORD(v32.f64[0]) = v30.i32[1];
          *(float *)v32.f64 = -v28.f32[0];
          v35 = vaddq_f64(v29[3], vcvtq_f64_f32(vmul_f32(v33, *(float32x2_t *)&v32.f64[0])));
          v29[2] = v34;
          v29[3] = v35;
          v30.i32[1] = v28.i32[0];
          HIDWORD(v34.f64[0]) = v28.i32[0];
          *(float *)v34.f64 = -v28.f32[0];
          v29[4] = vaddq_f64(v29[4], vcvtq_f64_f32(vmul_f32(v30, *(float32x2_t *)&v34.f64[0])));
          if (v12 <= v13)
            goto LABEL_73;
          if (re::GeomConnectivityManifold::isBoundaryFace((re::GeomConnectivityManifold *)v4, v6)
            && re::GeomConnectivityManifold::isBoundaryVertex((re::GeomConnectivityManifold *)v4, v10))
          {
            v15 = v110;
            if (v110 <= v13)
              goto LABEL_74;
            v15 = *(unsigned int *)(v112 + 4 * v13);
            v6 = *(_QWORD *)(v4 + 24);
            if (v6 <= v15)
              goto LABEL_75;
            v36 = 0;
            v114 = *(_OWORD *)(*(_QWORD *)(v4 + 40) + 16 * v15);
            LODWORD(v6) = -1;
            LODWORD(v13) = -1;
            do
            {
              v37 = *(unsigned int *)((char *)&v114 + v36);
              if ((_DWORD)v6 == -1)
                v38 = *(_DWORD *)((char *)&v114 + v36);
              else
                v38 = v6;
              if ((_DWORD)v6 == -1 || v10 == v37)
                v13 = v13;
              else
                v13 = v37;
              if (v10 == v37)
                v6 = v6;
              else
                v6 = v38;
              v36 += 4;
            }
            while (v36 != 12);
            v12 = *(_QWORD *)(v4 + 320);
            if (v12 <= v10)
              goto LABEL_76;
            if (v12 <= v6)
              goto LABEL_77;
            if (v12 <= v13)
              goto LABEL_78;
            v40 = *(_QWORD *)(v4 + 336);
            isBoundaryVertex = re::GeomConnectivityManifold::isBoundaryVertex((re::GeomConnectivityManifold *)v4, v6);
            v42 = re::GeomConnectivityManifold::isBoundaryVertex((re::GeomConnectivityManifold *)v4, v13);
            if ((isBoundaryVertex & 1) != 0
              || (v43 = 0uLL, v44 = 0uLL, v45 = 0uLL, v46 = 0uLL, v47 = 0uLL, (v42 & 1) != 0))
            {
              v48 = *(float32x4_t *)(v40 + 16 * v10);
              v49 = vsubq_f32(*(float32x4_t *)(v40 + 16 * v6), v48);
              v50 = vsubq_f32(*(float32x4_t *)(v40 + 16 * v13), v48);
              v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL);
              v52 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL);
              v53 = vnegq_f32(v49);
              v54 = vmlaq_f32(vmulq_f32(v52, v53), v50, v51);
              v55 = vmulq_f32(v54, v54);
              v56 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), v55)).f32[0];
              v57 = 0uLL;
              v58 = 0uLL;
              if (v56 > 0.0)
              {
                v59 = v56;
                v60 = vrsqrte_f32((float32x2_t)LODWORD(v56));
                v61 = vmul_f32(v60, vrsqrts_f32((float32x2_t)LODWORD(v59), vmul_f32(v60, v60)));
                v58 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL), vmul_f32(v61, vrsqrts_f32((float32x2_t)LODWORD(v59), vmul_f32(v61, v61))).f32[0]);
              }
              v62 = vaddq_f32(v48, v58);
              v63 = 0uLL;
              v64 = 0uLL;
              v65 = 0uLL;
              v66 = 0uLL;
              if (isBoundaryVertex)
              {
                v67 = vsubq_f32(v62, v48);
                v68 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v67, (int32x4_t)v67), (int8x16_t)v67, 0xCuLL), v53), v67, v51);
                v69 = vmulq_f32(v68, v68);
                v70 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), v69)).f32[0];
                v71 = 0uLL;
                if (v70 > 0.0)
                {
                  v72 = v70;
                  v73 = vrsqrte_f32((float32x2_t)LODWORD(v70));
                  v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)LODWORD(v72), vmul_f32(v73, v73)));
                  v71 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), vmul_f32(v74, vrsqrts_f32((float32x2_t)LODWORD(v72), vmul_f32(v74, v74))).f32[0]);
                }
                v75 = vmulq_f32(v48, v71);
                v76 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1)));
                v57.f64[0] = vmulq_f32(v71, v71).f32[0];
                v77.i32[0] = vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL).u32[0];
                v77.f32[1] = -v76.f32[0];
                v64.f64[0] = vmuls_lane_f32(v71.f32[1], *(float32x2_t *)v71.f32, 1);
                v78 = vmuls_lane_f32(v71.f32[1], v71, 2);
                v79 = vmuls_lane_f32(v76.f32[0], *(float32x2_t *)v71.f32, 1);
                v80 = vmuls_lane_f32(v71.f32[2], v71, 2);
                v81 = vmuls_lane_f32(v76.f32[0], v71, 2);
                v82 = vmulq_f32(v76, v76).f32[0];
                v83 = vmuls_lane_f32(v71.f32[0], *(float32x2_t *)v71.f32, 1) + 0.0;
                v63 = vaddq_f64(vcvtq_f64_f32(vmul_n_f32(v77, v71.f32[0])), (float64x2_t)0);
                v84 = v78 + 0.0;
                v65.f64[0] = 0.0 - v79;
                v66.f64[0] = 0.0 - v81;
                v57.f64[1] = v83;
                v64.f64[1] = v84;
                v65.f64[1] = v80;
                v66.f64[1] = v82;
              }
              if (v42)
              {
                v85 = vsubq_f32(v62, v48);
                v86 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL), vnegq_f32(v50)), v85, v52);
                v87 = vmulq_f32(v86, v86);
                v88 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), v87)).f32[0];
                v89 = 0uLL;
                if (v88 > 0.0)
                {
                  v90 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), (int8x16_t)v86, 0xCuLL);
                  v91 = v88;
                  v92 = vrsqrte_f32((float32x2_t)LODWORD(v88));
                  v93 = vmul_f32(v92, vrsqrts_f32((float32x2_t)LODWORD(v91), vmul_f32(v92, v92)));
                  v89 = vmulq_n_f32(v90, vmul_f32(v93, vrsqrts_f32((float32x2_t)LODWORD(v91), vmul_f32(v93, v93))).f32[0]);
                }
                v94 = vmulq_f32(v48, v89);
                v95 = (float32x2_t)vdup_laneq_s32((int32x4_t)v89, 2);
                v96.i32[0] = v95.i32[0];
                v97 = (float32x2_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL).u64[0];
                v98.i32[1] = v95.i32[1];
                v95.f32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2), vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.f32, 1))).f32[0];
                v94.i32[1] = v95.i32[1];
                v94.f32[0] = -v95.f32[1];
                v96.f32[1] = -v95.f32[1];
                v98.f32[0] = -v95.f32[1];
                v57 = vaddq_f64(v57, vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)v89.f32, v89.f32[0])));
                v63 = vaddq_f64(v63, vcvtq_f64_f32(vmul_n_f32(v96, v89.f32[0])));
                v64 = vaddq_f64(v64, vcvtq_f64_f32(vmul_lane_f32(v97, *(float32x2_t *)v89.f32, 1)));
                v65 = vaddq_f64(v65, vcvtq_f64_f32(vmul_f32(v97, v98)));
                v66 = vaddq_f64(v66, vcvtq_f64_f32(vmul_f32(v95, *(float32x2_t *)v94.f32)));
              }
              v99 = *(float *)(v4 + 560);
              v43 = vmulq_n_f64(v57, v99);
              v44 = vmulq_n_f64(v63, v99);
              v45 = vmulq_n_f64(v64, v99);
              v46 = vmulq_n_f64(v65, v99);
              v47 = vmulq_n_f64(v66, v99);
            }
            v107 = vaddq_f64(v107, v45);
            v108 = vaddq_f64(v108, v43);
            v104 = vaddq_f64(v104, v44);
            v105 = vaddq_f64(v105, v46);
            v106 = vaddq_f64(v106, v47);
          }
          v12 = v110;
          v13 = ++v14;
          if (v110 <= v14)
            goto LABEL_62;
        }
        *(_QWORD *)&v114 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 797;
        v119 = 2048;
        v120 = v6;
        v121 = 2048;
        v122 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_69:
        *(_QWORD *)&v114 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 797;
        v119 = 2048;
        v120 = v15;
        v121 = 2048;
        v122 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_70:
        *(_QWORD *)&v114 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 797;
        v119 = 2048;
        v120 = v1;
        v121 = 2048;
        v122 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_71:
        *(_QWORD *)&v114 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        v10 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 797;
        v119 = 2048;
        v120 = v2;
        v121 = 2048;
        v122 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_72:
        *(_QWORD *)&v114 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 789;
        v119 = 2048;
        v120 = v10;
        v121 = 2048;
        v122 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_73:
        *(_QWORD *)&v114 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 789;
        v119 = 2048;
        v120 = v13;
        v121 = 2048;
        v122 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_74:
        *(_QWORD *)&v114 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 789;
        v119 = 2048;
        v120 = v13;
        v121 = 2048;
        v122 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_75:
        *(_QWORD *)&v114 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        v10 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 797;
        v119 = 2048;
        v120 = v15;
        v121 = 2048;
        v122 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_76:
        v113 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 789;
        v119 = 2048;
        v120 = v10;
        v121 = 2048;
        v122 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_77:
        v113 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 789;
        v119 = 2048;
        v120 = v6;
        v121 = 2048;
        v122 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_78:
        v113 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        v10 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 789;
        v119 = 2048;
        v120 = v13;
        v121 = 2048;
        v122 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_79:
        *(_QWORD *)&v114 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 789;
        v119 = 2048;
        v120 = v10;
        v121 = 2048;
        v122 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_80:
        *(_QWORD *)&v114 = 0;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v115 = 136315906;
        v116 = "operator[]";
        v117 = 1024;
        v118 = 789;
        v119 = 2048;
        v120 = v10;
        v121 = 2048;
        v122 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v107 = 0u;
      v108 = 0u;
      v104 = 0u;
      v105 = 0u;
      v106 = 0u;
LABEL_62:
      v6 = *(_QWORD *)(v4 + 360);
      if (v6 <= v10)
        goto LABEL_80;
      v100 = (float64x2_t *)(*(_QWORD *)(v4 + 376) + 80 * v10);
      v101 = vaddq_f64(v104, v100[1]);
      *v100 = vaddq_f64(v108, *v100);
      v100[1] = v101;
      v102 = vaddq_f64(v105, v100[3]);
      v100[2] = vaddq_f64(v107, v100[2]);
      v100[3] = v102;
      v100[4] = vaddq_f64(v106, v100[4]);
      ++v10;
    }
    while (v10 != v103);
    this = (_QWORD *)v109[0];
    if (v109[0])
    {
      if (v112)
        return (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v109[0] + 40))();
    }
  }
  return this;
}

_QWORD *re::internal::Decimator::initializeQueue(re::internal::Decimator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v5;
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v17;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> v18;
  uint64_t v19;
  int v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 28);
  v3 = v2;
  v18.__x_[0] = v2;
  v4 = 1;
  v5 = v2;
  do
  {
    v5 = v4 + 1812433253 * (v5 ^ (v5 >> 30));
    v18.__x_[v4++] = v5;
  }
  while (v4 != 624);
  v18.__i_ = 0;
  *((_QWORD *)this + 60) = 0;
  ++*((_DWORD *)this + 122);
  if (*((_QWORD *)this + 59) < (unint64_t)v2)
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)this + 58, v2);
  *((_QWORD *)this + 65) = 0;
  ++*((_DWORD *)this + 132);
  result = re::DynamicArray<unsigned int>::resize((_QWORD *)this + 63, v2, &re::kInvalidMeshIndex);
  v7 = *((_QWORD *)this + 55);
  if (v7 >= v2)
  {
    if (v7 <= v2)
      goto LABEL_15;
  }
  else
  {
    if (*((_QWORD *)this + 54) < (unint64_t)v2)
    {
      result = re::DynamicArray<re::internal::Decimator::EdgeData>::setCapacity((_QWORD *)this + 53, v2);
      v7 = *((_QWORD *)this + 55);
    }
    if (v7 < v2)
    {
      v8 = *((_QWORD *)this + 57);
      v9 = (_QWORD *)(v8 + 32 * v7);
      v10 = v8 + 32 * v2 - (_QWORD)v9;
      if (v10 >= 1)
      {
        v11 = ((unint64_t)v10 >> 5) + 1;
        do
        {
          *v9 = 0;
          v9[1] = 0;
          v9[2] = 0;
          v9 += 4;
          --v11;
        }
        while (v11 > 1);
      }
    }
  }
  *((_QWORD *)this + 55) = v2;
  ++*((_DWORD *)this + 112);
LABEL_15:
  if ((_DWORD)v2)
  {
    v12 = 0;
    v13 = 16;
    do
    {
      re::internal::Decimator::updateEdgeData(this, v12);
      v14 = *((_QWORD *)this + 55);
      if (v14 <= v12)
      {
        v19 = 0;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v20 = 136315906;
        v21 = "operator[]";
        v22 = 1024;
        v23 = 789;
        v24 = 2048;
        v25 = v12;
        v26 = 2048;
        v27 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v15 = *(_QWORD *)(*((_QWORD *)this + 57) + v13);
      v16 = (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v18);
      v17 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&v18);
      LODWORD(v28) = v12;
      *((_QWORD *)&v28 + 1) = v15;
      *(double *)&v29 = (v16 + (double)v17 * 4294967300.0) * 5.42101086e-20 + 0.0;
      result = re::internal::IndexedPriorityQueue::push((_QWORD *)this + 58, (unsigned int *)&v28);
      ++v12;
      v13 += 32;
    }
    while (v3 != v12);
  }
  return result;
}

_QWORD *re::internal::IndexedPriorityQueue::push(_QWORD *this, unsigned int *a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  double v20;
  double v21;

  v3 = this;
  v4 = this[1];
  v5 = this[2];
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*this)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        this = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(this, v10);
      }
      else
      {
        this = re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = v3[2];
  }
  v11 = v3[4] + 24 * v5;
  v12 = *(_OWORD *)a2;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  v13 = v3[2] + 1;
  v3[2] = v13;
  ++*((_DWORD *)v3 + 6);
  v14 = *a2;
  if (v3[7] <= v14)
    goto LABEL_23;
  v15 = v13 - 1;
  *(_DWORD *)(v3[9] + 4 * v14) = v13 - 1;
  if ((_DWORD)v13 != 1)
  {
    while (1)
    {
      v16 = v15 - 1;
      v17 = (v15 - 1) >> 1;
      v18 = v3[2];
      if (v18 <= v17)
        break;
      if (v18 <= v15)
        goto LABEL_22;
      v19 = v3[4];
      v20 = *(double *)(v19 + 24 * v17 + 8);
      v21 = *(double *)(v19 + 24 * v15 + 8);
      if ((v20 - v21) * (v20 - v21) <= 1.0e-12)
      {
        v20 = *(double *)(v19 + 24 * v17 + 16);
        v21 = *(double *)(v19 + 24 * v15 + 16);
      }
      if (v20 > v21)
      {
        this = re::internal::IndexedPriorityQueue::swap(v3, v15, v16 >> 1);
        v15 = v16 >> 1;
        if (v16 > 1)
          continue;
      }
      return this;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_23:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return this;
}

uint64_t re::internal::Decimator::clear(uint64_t this)
{
  int v1;

  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 24) = 0;
  ++*(_DWORD *)(this + 32);
  *(_QWORD *)(this + 64) = 0;
  ++*(_DWORD *)(this + 72);
  *(_QWORD *)(this + 104) = 0;
  ++*(_DWORD *)(this + 112);
  *(_QWORD *)(this + 144) = 0;
  ++*(_DWORD *)(this + 152);
  *(_QWORD *)(this + 184) = 0;
  ++*(_DWORD *)(this + 192);
  *(_QWORD *)(this + 224) = 0;
  ++*(_DWORD *)(this + 232);
  *(_QWORD *)(this + 320) = 0;
  ++*(_DWORD *)(this + 328);
  *(_QWORD *)(this + 360) = 0;
  ++*(_DWORD *)(this + 368);
  *(_QWORD *)(this + 400) = 0;
  ++*(_DWORD *)(this + 408);
  *(_QWORD *)(this + 440) = 0;
  ++*(_DWORD *)(this + 448);
  *(_QWORD *)(this + 480) = 0;
  ++*(_DWORD *)(this + 488);
  *(_QWORD *)(this + 520) = 0;
  ++*(_DWORD *)(this + 528);
  v1 = *(_DWORD *)(this + 640);
  *(_QWORD *)(this + 632) = 0;
  *(_DWORD *)(this + 640) = v1 + 2;
  *(_QWORD *)(this + 568) = 0;
  return this;
}

_QWORD *re::internal::Decimator::setMesh(re::internal::Decimator *this, const re::GeomMesh *a2)
{
  re::GeomConnectivityManifold *v4;
  _QWORD *result;

  re::internal::Decimator::clear((uint64_t)this);
  re::internal::Decimator::convertMeshToCombinatorialMap(this, a2, v4);
  re::internal::Decimator::findCornerVertices((float *)this, (uint64_t)this + 384);
  re::internal::Decimator::computeQuadrics(this);
  result = re::internal::Decimator::initializeQueue(this);
  *((_DWORD *)this + 142) = *((_QWORD *)this + 3);
  return result;
}

uint64_t re::internal::Decimator::decimateTo(re::internal::Decimator *this, unsigned int a2)
{
  uint64_t result;

  if (*((_DWORD *)this + 138) == 2 && *((float *)this + 143) > 0.95)
    return *((unsigned int *)this + 142);
  for (result = *((unsigned int *)this + 142);
        result > a2 && *((_DWORD *)this + 120);
        *((_DWORD *)this + 142) = result)
  {
    result = *((_DWORD *)this + 142) - re::internal::Decimator::decimateOneEdge(this);
  }
  return result;
}

_QWORD *re::internal::IndexedPriorityQueue::rebalance(_QWORD *this, unsigned int a2)
{
  _QWORD *v2;
  unsigned int i;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  unsigned int v9;
  uint64_t v10;
  double v11;
  double v12;

  v2 = this;
  for (i = a2; ; a2 = i)
  {
    v4 = (2 * a2) | 1;
    v5 = v2[2];
    if (v4 < v5)
    {
      if (v5 <= v4)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_21:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_22:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_23:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v5 <= a2)
        goto LABEL_21;
      v6 = v2[4];
      v7 = *(double *)(v6 + 24 * v4 + 8);
      v8 = *(double *)(v6 + 24 * a2 + 8);
      if ((v7 - v8) * (v7 - v8) <= 1.0e-12)
      {
        v7 = *(double *)(v6 + 24 * v4 + 16);
        v8 = *(double *)(v6 + 24 * a2 + 16);
      }
      if (v7 >= v8)
        i = a2;
      else
        i = (2 * a2) | 1;
    }
    v9 = 2 * a2 + 2;
    if (v9 < v5)
    {
      if (v5 <= v9)
        goto LABEL_22;
      if (v5 <= i)
        goto LABEL_23;
      v10 = v2[4];
      v11 = *(double *)(v10 + 24 * v9 + 8);
      v12 = *(double *)(v10 + 24 * i + 8);
      if ((v11 - v12) * (v11 - v12) <= 1.0e-12)
      {
        v11 = *(double *)(v10 + 24 * v9 + 16);
        v12 = *(double *)(v10 + 24 * i + 16);
      }
      if (v11 < v12)
        i = 2 * a2 + 2;
    }
    if (i == a2)
      break;
    this = re::internal::IndexedPriorityQueue::swap(v2, a2, i);
  }
  return this;
}

_QWORD *re::internal::IndexedPriorityQueue::swap(_QWORD *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = this[2];
  if (v3 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  if (v3 <= a3)
  {
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  v4 = this[4];
  v5 = (__int128 *)(v4 + 24 * a2);
  v6 = (__int128 *)(v4 + 24 * a3);
  v7 = *((_QWORD *)v5 + 2);
  v8 = *v5;
  v9 = *((_QWORD *)v6 + 2);
  *v5 = *v6;
  *((_QWORD *)v5 + 2) = v9;
  *v6 = v8;
  *((_QWORD *)v6 + 2) = v7;
  v10 = this[2];
  if (v10 <= a2)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v11 = this[4];
  v12 = *(unsigned int *)(v11 + 24 * a2);
  v13 = this[7];
  if (v13 <= v12)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  v14 = this[9];
  *(_DWORD *)(v14 + 4 * v12) = a2;
  if (v10 <= a3)
  {
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *(unsigned int *)(v11 + 24 * a3);
  if (v13 <= v15)
    goto LABEL_13;
  *(_DWORD *)(v14 + 4 * v15) = a3;
  return this;
}

_QWORD *re::DynamicArray<re::internal::Quadric>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;

  v2 = result[1];
  if (v2 != a2)
  {
    v4 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v4)
      {
        result = (_QWORD *)re::DynamicArray<re::internal::Quadric>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
        return result;
      }
      if (a2)
      {
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
        if (!result)
        {
          re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 80 * a2, *(_QWORD *)(*v4 + 8));
          result = (_QWORD *)_os_crash();
          __break(1u);
          return result;
        }
        v6 = result;
        if (!v4[1])
          goto LABEL_14;
      }
      else
      {
        v6 = 0;
        if (!v2)
        {
LABEL_14:
          v4[4] = v6;
          v4[1] = a2;
          return result;
        }
      }
      v7 = v4[4];
      v8 = v4[2];
      if (v8)
      {
        v9 = (_OWORD *)(v7 + 80 * v8);
        v10 = v6;
        v11 = (_OWORD *)v4[4];
        do
        {
          *v10 = *v11;
          v10[1] = v11[1];
          v10[2] = v11[2];
          v10[3] = v11[3];
          v10[4] = v11[4];
          v11 += 5;
          v10 += 5;
        }
        while (v11 != v9);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 40))(*v4, v7);
      goto LABEL_14;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::internal::Decimator::EdgeData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v2 = result[1];
  if (v2 != a2)
  {
    v4 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v4)
      {
        if (!a2)
        {
          v6 = 0;
          if (!v2)
            goto LABEL_8;
          goto LABEL_7;
        }
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 16);
        if (result)
        {
          v6 = result;
          if (!v4[1])
          {
LABEL_8:
            v4[4] = v6;
            v4[1] = a2;
            return result;
          }
LABEL_7:
          memcpy(v6, (const void *)v4[4], 32 * v4[2]);
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
          goto LABEL_8;
        }
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, 32 * a2, *(_QWORD *)(*v4 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::internal::Decimator::EdgeData>::setCapacity(v4, a2);
        ++*((_DWORD *)v4 + 6);
      }
    }
  }
  return result;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

void re::internal::simplifyMeshHelper(unsigned int *a1, re::GeomMesh *a2, uint64_t a3)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  _QWORD v8[69];
  int v9;
  char v10;
  int v11;
  __int16 v12;

  if (*(_DWORD *)(a3 + 4) <= (float)(*(float *)a3 * (float)a1[10]))
    v5 = (float)(*(float *)a3 * (float)a1[10]);
  else
    v5 = *(_DWORD *)(a3 + 4);
  v6 = *(_DWORD *)(a3 + 16);
  v7 = *(_QWORD *)(a3 + 8);
  re::internal::Decimator::Decimator((re::internal::Decimator *)v8);
  re::internal::Decimator::setMesh((re::internal::Decimator *)v8, (const re::GeomMesh *)a1);
  v8[68] = v7;
  v9 = v6;
  v10 = 0;
  v11 = 1065353216;
  v12 = 256;
  re::internal::Decimator::decimateTo((re::internal::Decimator *)v8, v5);
  re::internal::Decimator::convertCombinatorialMapToMesh((re::internal::Decimator *)v8, a2);
  re::internal::Decimator::~Decimator((re::internal::Decimator *)v8);
}

re::internal::Decimator *re::internal::Decimator::Decimator(re::internal::Decimator *this)
{
  re::GeomConnectivityManifold *v2;

  v2 = re::GeomConnectivityManifold::GeomConnectivityManifold(this);
  *((_QWORD *)v2 + 38) = 0;
  *((_QWORD *)v2 + 39) = 0;
  *((_DWORD *)v2 + 82) = 0;
  *((_QWORD *)v2 + 40) = 0;
  *((_QWORD *)this + 67) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_QWORD *)this + 62) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_DWORD *)this + 92) = 0;
  *(_OWORD *)((char *)v2 + 376) = 0u;
  *(_OWORD *)((char *)v2 + 392) = 0u;
  *((_DWORD *)this + 102) = 0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 0;
  *(_OWORD *)((char *)v2 + 456) = 0u;
  *(_OWORD *)((char *)v2 + 472) = 0u;
  *((_DWORD *)this + 122) = 1;
  *((_QWORD *)this + 65) = 0;
  *((_DWORD *)this + 132) = 1;
  re::DynamicArray<unsigned int>::resize((_QWORD *)v2 + 63, 0, &re::kInvalidMeshIndex);
  *(_QWORD *)((char *)this + 549) = 0;
  *((_QWORD *)this + 68) = 0;
  *((_DWORD *)this + 140) = 1065353216;
  *((_WORD *)this + 282) = 256;
  *((_QWORD *)this + 81) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 150) = 0;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 160) = 0;
  return this;
}

void re::internal::Decimator::~Decimator(re::internal::Decimator *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 77);
  if (v2)
  {
    if (*((_QWORD *)this + 81))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 81) = 0;
    *((_QWORD *)this + 78) = 0;
    *((_QWORD *)this + 79) = 0;
    *((_QWORD *)this + 77) = 0;
    ++*((_DWORD *)this + 160);
  }
  v3 = *((_QWORD *)this + 72);
  if (v3)
  {
    if (*((_QWORD *)this + 76))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 76) = 0;
    *((_QWORD *)this + 73) = 0;
    *((_QWORD *)this + 74) = 0;
    *((_QWORD *)this + 72) = 0;
    ++*((_DWORD *)this + 150);
  }
  v4 = (_QWORD *)((char *)this + 464);
  v5 = *((_QWORD *)this + 63);
  if (v5)
  {
    if (*((_QWORD *)this + 67))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 67) = 0;
    *((_QWORD *)this + 64) = 0;
    *((_QWORD *)this + 65) = 0;
    *((_QWORD *)this + 63) = 0;
    ++*((_DWORD *)this + 132);
  }
  if (*v4)
  {
    if (*((_QWORD *)this + 62))
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 40))(*v4);
    *((_QWORD *)this + 62) = 0;
    *((_QWORD *)this + 59) = 0;
    *((_QWORD *)this + 60) = 0;
    *v4 = 0;
    ++*((_DWORD *)this + 122);
  }
  v6 = *((_QWORD *)this + 53);
  if (v6)
  {
    if (*((_QWORD *)this + 57))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 57) = 0;
    *((_QWORD *)this + 54) = 0;
    *((_QWORD *)this + 55) = 0;
    *((_QWORD *)this + 53) = 0;
    ++*((_DWORD *)this + 112);
  }
  v7 = *((_QWORD *)this + 48);
  if (v7)
  {
    if (*((_QWORD *)this + 52))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *((_QWORD *)this + 52) = 0;
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 48) = 0;
    ++*((_DWORD *)this + 102);
  }
  v8 = *((_QWORD *)this + 43);
  if (v8)
  {
    if (*((_QWORD *)this + 47))
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 45) = 0;
    *((_QWORD *)this + 43) = 0;
    ++*((_DWORD *)this + 92);
  }
  v9 = *((_QWORD *)this + 38);
  if (v9)
  {
    if (*((_QWORD *)this + 42))
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 40) = 0;
    *((_QWORD *)this + 38) = 0;
    ++*((_DWORD *)this + 82);
  }
  re::GeomConnectivityManifold::~GeomConnectivityManifold(this);
}

float32x4_t *re::AABB::transform@<X0>(float32x4_t *result@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  float32x4_t v3;
  float32x4_t v4;
  uint32x4_t v5;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  float v14;
  float v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;

  v3 = *result;
  v4 = result[1];
  v5 = (uint32x4_t)vcgtq_f32(*result, v4);
  v5.i32[3] = v5.i32[2];
  if ((vmaxvq_u32(v5) & 0x80000000) != 0)
  {
    *(_QWORD *)&v10 = 0x7F0000007FLL;
    *((_QWORD *)&v10 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a3 = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(a3 + 16) = v10;
  }
  else
  {
    v8 = (v3.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (v3.i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (v3.i32[2] & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (v4.i32[0] & 0x7FFFFFFFu) <= 0x7F7FFFFF;
    if (v8 && (v4.i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF && (v4.i32[2] & 0x7FFFFFFFu) < 0x7F800000)
    {
      v11 = 0;
      v12 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      v13.i64[0] = 0x7F0000007FLL;
      v13.i32[2] = 127;
      do
      {
        if ((v11 & 1) != 0)
          LODWORD(v14) = result[1];
        else
          LODWORD(v14) = *(float32x4_t *)result->f32;
        if ((v11 & 2) != 0)
          LODWORD(v15) = HIDWORD(result[1].i64[0]);
        else
          LODWORD(v15) = HIDWORD(result->i64[0]);
        if ((v11 & 4) != 0)
          LODWORD(v16) = result[1].i64[1];
        else
          LODWORD(v16) = result->i64[1];
        v17 = vaddq_f32(a2[3], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a2, v14), a2[1], v15), a2[2], v16));
        v18 = vdivq_f32(v17, (float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 3));
        v12.i32[3] = 0;
        v18.i32[3] = 0;
        v12 = vminnmq_f32(v12, v18);
        v13.i32[3] = 0;
        v13 = vmaxnmq_f32(v13, v18);
        ++v11;
      }
      while (v11 != 8);
      *(float32x4_t *)a3 = v12;
      *(float32x4_t *)(a3 + 16) = v13;
    }
    else
    {
      *(_QWORD *)&v9 = 0x7F0000007FLL;
      *((_QWORD *)&v9 + 1) = 0x7F0000007FLL;
      *(_OWORD *)a3 = v9;
      *(int32x4_t *)(a3 + 16) = vdupq_n_s32(0x7F800000u);
    }
  }
  return result;
}

uint64_t re::AABB::intersects(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t result;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  uint32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;

  result = 0;
  v4 = *a1;
  v5 = a1[1];
  v6 = *a1;
  v6.i32[3] = v5.i32[0];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v6), (int8x16_t)vcgezq_f32(v6))))) & 1) == 0)
  {
    v7 = (uint32x4_t)vcgtq_f32(v4, v5);
    v7.i32[3] = v7.i32[2];
    if ((vmaxvq_u32(v7) & 0x80000000) == 0)
    {
      if ((v4.i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (v4.i32[1] & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (v4.i32[2] & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (v5.i32[0] & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        return 3;
      }
      else
      {
        result = 3;
        if ((v5.i32[1] & 0x7FFFFFFFu) <= 0x7F7FFFFF && (v5.i32[2] & 0x7FFFFFFFu) < 0x7F800000)
        {
          v8.i64[0] = 0x3F0000003F000000;
          v8.i64[1] = 0x3F0000003F000000;
          v9 = vmulq_f32(vaddq_f32(v4, v5), v8);
          v10 = vsubq_f32(v5, v4);
          v10.i32[3] = 0;
          v11 = vmulq_f32(vmaxnmq_f32(v10, (float32x4_t)0), v8);
          v12 = vmulq_f32(*a2, *a2);
          v12.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).u32[0];
          v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
          v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
          v15 = vmulq_f32(v11, vabsq_f32(vmulq_n_f32(*a2, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0])));
          v16 = vmulq_f32(v9, *a2);
          v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a2, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)))).f32[0]/ sqrtf(v12.f32[0]);
          v18 = fabsf(v17);
          v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]+ 0.0001;
          if (v17 > 0.0)
            v20 = 1;
          else
            v20 = 2;
          if (v18 >= v19)
            return v20;
          else
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t re::projectPointOntoBilinearPatch3F(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x2_t v43;
  int32x4_t v45;
  float32x2_t v47;
  float32x2_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  unsigned int v57;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  char v64;
  char v65;
  float v66;
  float32x2_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  float32x2_t v71;
  float v72;
  float32x2_t v73;
  float32x2_t v74;
  float v75;
  float32x2_t v76;
  int32x2_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float v99;
  float32x4_t v100;
  int32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x2_t v105;
  int8x8_t v106;
  int8x8_t v107;
  unsigned int v109;
  int8x8_t v110;
  int8x8_t v111;
  float32x2_t v112;
  float32x2_t v114;
  float32x2_t v115;
  float v116;
  float32x2_t v117;
  int32x2_t v118;
  float32x2_t v119;
  float32x2_t v120;
  float32x2_t v121;
  float32x2_t v122;
  float v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  float32x2_t v127;
  float32x2_t v128;
  float v129;
  float32x2_t v130;
  float32x2_t v131;
  float v132;
  float32x2_t v133;
  float32x2_t v134;
  int8x8_t v135;
  int8x8_t v136;
  float32x2_t v137;
  int8x8_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x2_t v141;
  float32x2_t v142;
  float32x2_t v143;
  double v144[4];
  _OWORD v145[2];
  double v146[4];

  v146[3] = *(double *)MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v6 = *a5;
  v7 = vsubq_f32(*a3, *a5);
  v8 = *a4;
  v9 = *a2;
  v10 = vsubq_f32(*a4, *a2);
  v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), vnegq_f32(v7)), v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  v12 = vmulq_f32(v11, v11);
  LODWORD(v13) = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), v12)).u32[0];
  if (fabsf(v13) >= 1.0e-10)
  {
    v23 = v13;
    v24 = vrsqrte_f32((float32x2_t)LODWORD(v13));
    v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)LODWORD(v23), vmul_f32(v24, v24)));
    v26 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vmul_f32(v25, vrsqrts_f32((float32x2_t)LODWORD(v23), vmul_f32(v25, v25))).f32[0]);
    v27 = vsubq_f32(v5, v9);
    v28 = vsubq_f32(v6, v9);
    v29 = vsubq_f32(*a1, v9);
    v30 = vmulq_f32(v27, v26);
    v31 = vsubq_f32(v27, vmulq_n_f32(v26, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]));
    v32 = vmulq_f32(v31, v31);
    if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0]) < 1.0e-10)
    {
      v33 = vmulq_f32(v10, v26);
      v31 = vsubq_f32(v10, vmulq_n_f32(v26, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]));
    }
    v34 = (int32x4_t)vmulq_f32(v31, v31);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    v37 = vmulq_n_f32(v31, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    v38 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), vnegq_f32(v26)), v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL));
    v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), v38, 0xCuLL);
    v40 = (int32x4_t)vmulq_f32(v29, v37);
    v41 = (int32x4_t)vmulq_f32(v29, v39);
    v42 = vmulq_f32(v27, v37);
    v43 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2), vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v41, 2), vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1))));
    v41.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).u64[0];
    _Q4 = vmulq_f32(v27, v39);
    _Q4.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)_Q4, 2), vaddq_f32(_Q4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q4.f32, 1))).u64[0];
    v45 = (int32x4_t)vmulq_f32(v10, v37);
    _Q3 = (int32x4_t)vmulq_f32(v10, v39);
    v47 = (float32x2_t)vzip1_s32(*(int32x2_t *)v41.i8, *(int32x2_t *)_Q4.f32);
    _Q6 = vmulq_f32(v28, v37);
    v49 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v45, 2), vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v45.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(_Q3, 2), vadd_f32(*(float32x2_t *)_Q3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q3.i8, 1))));
    _Q3.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)_Q6, 2), vaddq_f32(_Q6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q6.f32, 1))).u64[0];
    v50 = vmulq_f32(v28, v39);
    v50.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).u64[0];
    v51 = (float32x2_t)vzip1_s32(*(int32x2_t *)_Q3.i8, *(int32x2_t *)v50.f32);
    v142 = v47;
    v143 = vsub_f32(0, v43);
    v52 = vsub_f32(v49, v47);
    v140 = vadd_f32(vsub_f32(v52, v51), 0);
    v141 = v51;
    __asm { FMLS            S6, S3, V4.S[0] }
    v139 = v143;
    __asm { FMLS            S6, S1, V7.S[1] }
    v146[0] = vmlas_n_f32((float)-v143.f32[1] * *(float *)_Q3.i32, v50.f32[0], v143.f32[0]);
    v146[1] = _Q6.f32[0];
    v146[2] = vmlas_n_f32((float)-_Q4.f32[0] * v140.f32[0], v140.f32[1], *(float *)v41.i32);
    memset(v145, 0, sizeof(v145));
    v57 = re::solveQuadraticRootsD((re *)v146, v144, (double *)a3->i64);
    __asm { FMOV            V0.2S, #1.0 }
    if (!v57)
      goto LABEL_20;
    v59 = 0;
    v60 = 0;
    v61 = v57;
    do
    {
      v62 = 0;
      v63 = v144[v59];
      v64 = 1;
      do
      {
        v65 = v64;
        v66 = v141.f32[v62] + (float)(v63 * v140.f32[v62]);
        if (v66 != 0.0)
        {
          v67.f32[0] = v63;
          v67.f32[1] = (float)-(float)(v143.f32[v62] + (float)(v63 * v142.f32[v62])) / v66;
          *((float32x2_t *)v145 + v60++) = vminnm_f32(vmaxnm_f32(v67, 0), _D0);
        }
        v64 = 0;
        v62 = 1;
      }
      while ((v65 & 1) != 0);
      ++v59;
    }
    while (v59 != v61);
    if (v60)
    {
      if (v60 != 1)
      {
        v68 = 0;
        v69 = 8 * v60;
        v70 = INFINITY;
        do
        {
          v71 = vsub_f32(vadd_f32(vadd_f32(vmul_n_f32(v51, (float)(1.0 - *(float *)((char *)v145 + v68)) * *(float *)((char *)v145 + v68 + 4)), vmul_n_f32(v49, *(float *)((char *)v145 + v68) * *(float *)((char *)v145 + v68 + 4))), vmul_n_f32(v47, *(float *)((char *)v145 + v68) * (float)(1.0 - *(float *)((char *)v145 + v68 + 4)))), v43);
          v72 = vaddv_f32(vmul_f32(v71, v71));
          if (v72 < v70)
          {
            *(_QWORD *)&v145[0] = *(_QWORD *)((char *)v145 + v68);
            v70 = v72;
          }
          v68 += 8;
        }
        while (v69 != v68);
      }
    }
    else
    {
LABEL_20:
      v73 = vmul_f32(v47, v47);
      if (vaddv_f32(v73) <= 0.0)
      {
        v77 = (int32x2_t)vmul_f32(v139, v139);
        v75 = 0.0;
      }
      else
      {
        v74 = vmul_f32(v43, v47);
        LODWORD(v75) = vdiv_f32(vadd_f32(v74, (float32x2_t)vdup_lane_s32((int32x2_t)v74, 1)), vadd_f32(v73, (float32x2_t)vdup_lane_s32((int32x2_t)v73, 1))).u32[0];
        v76 = vsub_f32(vadd_f32(vmul_n_f32(v47, v75), 0), v43);
        v77 = (int32x2_t)vmul_f32(v76, v76);
      }
      v114 = vmul_f32(v52, v52);
      if (vaddv_f32(v114) <= 0.0)
      {
        v119 = vsub_f32(v47, v43);
        v118 = (int32x2_t)vmul_f32(v119, v119);
        v116 = 0.0;
      }
      else
      {
        v115 = vmul_f32(vsub_f32(v43, v47), v52);
        LODWORD(v116) = vdiv_f32(vadd_f32(v115, (float32x2_t)vdup_lane_s32((int32x2_t)v115, 1)), vadd_f32(v114, (float32x2_t)vdup_lane_s32((int32x2_t)v114, 1))).u32[0];
        v117 = vsub_f32(vadd_f32(v47, vmul_n_f32(v52, v116)), v43);
        v118 = (int32x2_t)vmul_f32(v117, v117);
      }
      v120 = vsub_f32(v49, v51);
      v121 = vmul_f32(v120, v120);
      if (vaddv_f32(v121) <= 0.0)
      {
        v126 = vsub_f32(v51, v43);
        v125 = vmul_f32(v126, v126);
        v123 = 0.0;
      }
      else
      {
        v122 = vmul_f32(v120, vsub_f32(v43, v51));
        LODWORD(v123) = vdiv_f32(vadd_f32(v122, (float32x2_t)vdup_lane_s32((int32x2_t)v122, 1)), vadd_f32(v121, (float32x2_t)vdup_lane_s32((int32x2_t)v121, 1))).u32[0];
        v124 = vsub_f32(vadd_f32(v51, vmul_n_f32(v120, v123)), v43);
        v125 = vmul_f32(v124, v124);
      }
      v127 = vmul_f32(v51, v51);
      if (vaddv_f32(v127) <= 0.0)
      {
        v131 = vmul_f32(v139, v139);
        v129 = 0.0;
      }
      else
      {
        v128 = vmul_f32(v43, v51);
        LODWORD(v129) = vdiv_f32(vadd_f32(v128, (float32x2_t)vdup_lane_s32((int32x2_t)v128, 1)), vadd_f32(v127, (float32x2_t)vdup_lane_s32((int32x2_t)v127, 1))).u32[0];
        v130 = vsub_f32(vadd_f32(vmul_n_f32(v51, v129), 0), v43);
        v131 = vmul_f32(v130, v130);
      }
      v132 = vaddv_f32(v125);
      v133 = vadd_f32(v125, (float32x2_t)vdup_lane_s32((int32x2_t)v125, 1));
      v134 = vadd_f32((float32x2_t)vzip1_s32(v118, v77), (float32x2_t)vzip2_s32(v118, v77));
      v135 = (int8x8_t)__PAIR64__(LODWORD(v116), _D0.u32[0]);
      v136.i32[0] = 0;
      v137 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v134, 1), v134), 0), v135, (int8x8_t)LODWORD(v75));
      if (v134.f32[0] >= v134.f32[1])
        v134.f32[0] = v134.f32[1];
      _D0.f32[0] = v123;
      v138 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v134, v133), 0), (int8x8_t)_D0, (int8x8_t)v137);
      if (v132 >= v134.f32[0])
        v137.f32[0] = v134.f32[0];
      else
        v137.f32[0] = v132;
      *(float *)&v136.i32[1] = v129;
      *(int8x8_t *)&v145[0] = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(v137, vadd_f32(v131, (float32x2_t)vdup_lane_s32((int32x2_t)v131, 1))), 0), v136, v138);
    }
    return *(_QWORD *)&v145[0];
  }
  else
  {
    v14 = vsubq_f32(v5, v9);
    v15 = vmulq_f32(v14, v14);
    v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)));
    v17 = *a1;
    v18 = vsubq_f32(*a1, v9);
    if (v16.f32[0] <= 0.0)
    {
      v78 = vsubq_f32(v9, v17);
      v22 = vmulq_f32(v78, v78);
      v20 = 0.0;
    }
    else
    {
      v19 = vmulq_f32(v14, v18);
      LODWORD(v20) = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))), v16).u32[0];
      v21 = vsubq_f32(vaddq_f32(v9, vmulq_n_f32(v14, v20)), v17);
      v22 = vmulq_f32(v21, v21);
    }
    v79 = vsubq_f32(v8, v5);
    v80 = vmulq_f32(v79, v79);
    v81 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 2), vaddq_f32(v80, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1)));
    if (v81.f32[0] <= 0.0)
    {
      v86 = vsubq_f32(v5, v17);
      v85 = vmulq_f32(v86, v86);
      v83 = 0.0;
    }
    else
    {
      v82 = vmulq_f32(v79, vsubq_f32(v17, v5));
      LODWORD(v83) = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 2), vaddq_f32(v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1))), v81).u32[0];
      v84 = vsubq_f32(vaddq_f32(v5, vmulq_n_f32(v79, v83)), v17);
      v85 = vmulq_f32(v84, v84);
    }
    v87 = vsubq_f32(v8, v6);
    v88 = vmulq_f32(v87, v87);
    v89 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1)));
    if (v89.f32[0] <= 0.0)
    {
      v94 = vsubq_f32(v6, v17);
      v93 = vmulq_f32(v94, v94);
      v91 = 0.0;
    }
    else
    {
      v90 = vmulq_f32(v87, vsubq_f32(v17, v6));
      LODWORD(v91) = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 2), vaddq_f32(v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.f32, 1))), v89).u32[0];
      v92 = vsubq_f32(vaddq_f32(v6, vmulq_n_f32(v87, v91)), v17);
      v93 = vmulq_f32(v92, v92);
    }
    v95 = vsubq_f32(v6, v9);
    v96 = vmulq_f32(v95, v95);
    v97 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1)));
    if (v97.f32[0] <= 0.0)
    {
      v102 = vsubq_f32(v9, v17);
      v101 = (int32x4_t)vmulq_f32(v102, v102);
      v99 = 0.0;
    }
    else
    {
      v98 = vmulq_f32(v95, v18);
      LODWORD(v99) = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))), v97).u32[0];
      v100 = vsubq_f32(vaddq_f32(v9, vmulq_n_f32(v95, v99)), v17);
      v101 = (int32x4_t)vmulq_f32(v100, v100);
    }
    v103 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1)));
    v104 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)));
    v105 = (float32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 2), vaddq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 1))).u64[0];
    if ((vmovn_s32(vcgtq_f32(v104, v103)).u8[0] & 1) != 0)
      v104.f32[0] = v103.f32[0];
    v106 = (int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v104.f32, v105), 0);
    __asm { FMOV            V7.2S, #1.0 }
    v107 = (int8x8_t)__PAIR64__(_D7.u32[1], LODWORD(v91));
    *(float *)&_D7.i32[1] = v83;
    if (_ZF)
      v109 = 0;
    else
      v109 = -1;
    v110.i32[0] = 0;
    v111 = vbsl_s8(v106, v107, vbsl_s8((int8x8_t)vdup_n_s32(v109), _D7, (int8x8_t)LODWORD(v20)));
    v112 = (float32x2_t)vdupq_laneq_s32(v101, 2).u64[0];
    if (v105.f32[0] < v104.f32[0])
      v104.f32[0] = v105.f32[0];
    *(float *)&v110.i32[1] = v99;
    return (uint64_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(*(float32x2_t *)v104.f32, vadd_f32(v112, vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.i8, 1)))), 0), v110, v111);
  }
}

float re::computeDistanceSquaredFromPointToQuad(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, uint64_t *a7)
{
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  unsigned __int8 v21;
  unsigned int v22;
  int8x16_t v23;
  float v24;
  float32x4_t v26;
  int8x16_t v27;

  geom_closest_point_to_triangle_3f();
  v27 = (int8x16_t)v14;
  v15 = vsubq_f32(v14, *a1);
  v16 = vmulq_f32(v15, v15);
  v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)));
  geom_closest_point_to_triangle_3f();
  v18 = vsubq_f32(v17, *a1);
  v19 = vmulq_f32(v18, v18);
  v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)));
  v21 = vmovn_s32(vcgtq_f32(v20, v26)).u8[0];
  if ((v21 & 1) != 0)
    v22 = -1;
  else
    v22 = 0;
  v23 = vbslq_s8((int8x16_t)vdupq_n_s32(v22), v27, (int8x16_t)v17);
  if ((v21 & 1) != 0)
    v24 = v26.f32[0];
  else
    v24 = v20.f32[0];
  *a6 = (float32x4_t)v23;
  *a7 = re::projectPointOntoBilinearPatch3F(a6, a2, a3, a4, a5);
  return v24;
}

uint64_t (***re::buildParametricPlane(re *this, re::GeomMesh *a2, float a3, float a4, int a5))()
{
  int v6;
  uint64_t v10;
  uint64_t (***result)();
  int v12;
  __int16 v13;
  int v14;
  int v15;
  uint64_t (**v16)();
  float v17;
  float v18;
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;

  v6 = (int)a2;
  v21 = *MEMORY[0x24BDAC8D0];
  v10 = re::globalAllocators(this)[2];
  v16 = &off_24ED72D70;
  v17 = a3;
  v18 = a4;
  v19 = v10;
  v20 = &v16;
  v12 = 16843008;
  v13 = 0;
  v14 = v6;
  v15 = a5;
  re::buildParametricSurface(this, (re::GeomAttribute *)&v16, (unsigned __int8 *)&v12);
  result = v20;
  if (v20)
  {
    result = (uint64_t (***)())((uint64_t (*)(uint64_t (***)()))**v20)(v20);
    if (v20 != &v16)
      return (uint64_t (***)())(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
  }
  return result;
}

uint64_t re::buildParametricSurface(_QWORD *a1, re::GeomAttribute *a2, unsigned __int8 *a3)
{
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  char v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  re::internal *v17;
  const re::GeomAttribute *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  int v29;
  unsigned int i;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  re *v37;
  re *v38;
  const char *v39;
  uint64_t *v40;
  re::GeomMesh *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE *v44;
  int v45;
  re::GeomMesh *v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  unsigned int *v69;
  int v70;
  unsigned int *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  float v79;
  float v80;
  float v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t result;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  float v95;
  float v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  float v101;
  uint64_t v102;
  uint64_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int32x2_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  unint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  int v124;
  _BOOL4 v125;
  int v127;
  float v128;
  float32x4_t v129;
  const char *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  char *__s[2];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t *v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  int v146;
  _BYTE v147[28];
  __int16 v148;
  _BYTE v149[10];
  _BYTE v150[18];
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  uint64_t v155;

  v155 = *MEMORY[0x24BDAC8D0];
  re::GeomMesh::clearComponents((re::GeomMesh *)a1, a2);
  a1[91] = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)(a1 + 8), "vertexPosition", 1, 7);
  v5 = *((_DWORD *)a3 + 2);
  v6 = *((_DWORD *)a3 + 3);
  if (a3[4])
    v7 = *((_DWORD *)a3 + 2);
  else
    v7 = v5 + 1;
  if (a3[5])
    v8 = *((_DWORD *)a3 + 3);
  else
    v8 = v6 + 1;
  v9 = v8 * v7;
  v10 = *a3;
  re::GeomMeshBuilder::GeomMeshBuilder((re *)__s, (uint64_t)a1);
  if (LODWORD(__s[1]) > v9 && (_DWORD)v136 && (v136 - 1) > (unint64_t)v136)
  {
    while (1)
      ;
  }
  v11 = ((v6 * v5) << v10);
  LODWORD(__s[1]) = v9;
  v139 = v9;
  if (v140)
  {
    v12 = v141;
    v13 = 8 * v140;
    do
    {
      v14 = *v12++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 72))(v14, v139);
      v13 -= 8;
    }
    while (v13);
  }
  v118 = (unsigned int *)a1;
  if (v11 < v136)
  {
    v15 = v146;
    if (v146)
    {
      v16 = 0;
      do
      {
        v17 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v145, v16);
        re::internal::accessFaceVaryingAttributeSubmesh(v17, v18);
        ++v16;
      }
      while (v15 != v16);
    }
  }
  re::DynamicArray<re::GeomCell4>::resize(&v135, v11);
  v142 = v11;
  if (v143)
  {
    v19 = v144;
    v20 = 8 * v143;
    do
    {
      v21 = *v19++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 72))(v21, v142);
      v20 -= 8;
    }
    while (v20);
  }
  v22 = *((_DWORD *)a3 + 3);
  if (v22)
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = *((_DWORD *)a3 + 2);
    v127 = v7;
    do
    {
      v27 = v24 * v7;
      if (a3[5])
        v28 = v24 == v22 - 1;
      else
        v28 = 0;
      if (v28)
        v29 = 0;
      else
        v29 = v27 + v7;
      if (v26)
      {
        for (i = 0; i < v26; ++i)
        {
          v31 = v26 - 1;
          if (a3[4])
            v32 = i == v31;
          else
            v32 = 0;
          if (v32)
            v33 = 0;
          else
            v33 = i + 1;
          v34 = v23 + i;
          v35 = v33 + v27;
          v36 = v33 + v29;
          if (*a3)
          {
            re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v25++, v34, v35, v29 + i);
            re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v25, v35, v36, v29 + i);
          }
          else
          {
            re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v25, v34, v35, v36, v29 + i);
          }
          ++v25;
          v26 = *((_DWORD *)a3 + 2);
        }
        v22 = *((_DWORD *)a3 + 3);
        v7 = v127;
      }
      ++v24;
      v23 += v7;
    }
    while (v24 < v22);
  }
  v37 = (re *)re::GeomMesh::operator=((uint64_t)v118, &__s[1]);
  v38 = re::GeomMesh::setName(v37, __s[0]);
  v39 = __s[0];
  if (__s[0])
  {
    v40 = re::globalAllocators(v38);
    (*(void (**)(uint64_t, const char *))(*(_QWORD *)v40[2] + 40))(v40[2], v39);
    __s[0] = 0;
  }
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
  v123 = a3[2];
  if (a3[2])
  {
    v39 = "vertexNormal";
    v120 = v41;
  }
  else
  {
    v120 = 0;
  }
  v124 = a3[3];
  if (a3[3])
  {
    v43 = v42;
    v121 = v41;
    v122 = v43;
  }
  else
  {
    v121 = 0;
    v122 = 0;
  }
  v44 = v147;
  if (!a3[1] || a3[4])
  {
    if (!a3[1])
    {
      v125 = 0;
      goto LABEL_99;
    }
    v125 = 0;
    v45 = a3[5];
    if (a3[4])
      goto LABEL_58;
  }
  else
  {
    v45 = a3[5];
    v125 = a3[5] == 0;
  }
  if (!v45)
  {
    re::addVertexUVs((re *)v118, v41);
    v113 = re::modifyVertexUVs((re *)v118, v46);
    v48 = v47;
    goto LABEL_100;
  }
LABEL_58:
  v49 = v118[10];
  *(_QWORD *)&v149[2] = 0;
  memset(v147, 0, sizeof(v147));
  v132 = 0;
  v130 = 0;
  v129 = 0uLL;
  v131 = 0;
  re::DynamicArray<float>::resize((uint64_t)v147, v49);
  re::DynamicArray<re::GeomCell4>::resize(&v129, v49);
  if (v49)
  {
    v50 = 0;
    v51 = *(_QWORD *)&v147[16];
    v52 = *(_QWORD *)&v149[2];
    while (v51 != v50)
    {
      *(_DWORD *)(v52 + 4 * v50) = v50;
      if (v49 == ++v50)
        goto LABEL_62;
    }
LABEL_143:
    v133 = 0;
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    *(_OWORD *)__s = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v150 = 136315906;
    *(_QWORD *)(v44 + 52) = "operator[]";
    *(_WORD *)&v150[12] = 1024;
    *(_DWORD *)(v44 + 62) = 789;
    v151 = 2048;
    *(_QWORD *)(v44 + 68) = v51;
    v153 = 2048;
    *(_QWORD *)(v44 + 78) = v51;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_62:
  v53 = *((_DWORD *)a3 + 3);
  if (v53)
  {
    v54 = 0;
    v55 = 0;
    v56 = *a3;
    v57 = *((_DWORD *)a3 + 2);
    v58 = 1;
    v59 = v57;
    do
    {
      v60 = v55 + 1;
      if (v59)
      {
        v61 = 0;
        v62 = v59 + 1;
        v63 = v55 * (v59 + 1);
        v64 = v60 * v62;
        v39 = v130;
        v65 = v132;
        v66 = v58 * v62;
        do
        {
          v67 = v63 + v61;
          v68 = v66 + v61;
          v51 = v54;
          if (v56)
          {
            if ((unint64_t)v39 <= v54)
              goto LABEL_140;
            v54 = (v54 + 1);
            v69 = (unsigned int *)(v65 + 16 * v51);
            *v69 = v67;
            v69[1] = v67 + 1;
            v69[2] = v68;
            v69[3] = -1;
            if ((unint64_t)v39 <= v54)
              goto LABEL_141;
            v70 = v68 + 1;
            v71 = (unsigned int *)(v65 + 16 * v54);
            *v71 = v67 + 1;
            v72 = v66 + v61;
            v68 = -1;
          }
          else
          {
            if ((unint64_t)v39 <= v54)
              goto LABEL_142;
            v70 = v61 + v63 + 1;
            v72 = v61 + v64 + 1;
            v71 = (unsigned int *)(v65 + 16 * v54);
            *v71 = v67;
          }
          v71[1] = v70;
          v71[2] = v72;
          v71[3] = v68;
          v54 = (v54 + 1);
          ++v61;
          v57 = *((_DWORD *)a3 + 2);
        }
        while (v61 < v57);
        v53 = *((_DWORD *)a3 + 3);
        v59 = *((_DWORD *)a3 + 2);
      }
      ++v58;
      v55 = v60;
    }
    while (v60 < v53);
  }
  else
  {
    v57 = *((_DWORD *)a3 + 2);
  }
  v73 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v118, "vertexUV", 6, v57 + 1 + (v57 + 1) * v53, (uint64_t *)&v129, (uint64_t *)v147);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73))
  {
    v74 = re::internal::GeomTypedAttribute<double>::operator[](v73, 0);
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73);
  }
  else
  {
    v54 = 0;
    v74 = 0;
  }
  v75 = 0;
  v76 = 0;
  v77 = *((_DWORD *)a3 + 2);
  v78 = *((_DWORD *)a3 + 3);
  v79 = 1.0 / (float)v77;
  v80 = 1.0 / (float)v78;
  while (2)
  {
    v51 = 0;
    v81 = v80 * (float)v75;
    if (v75 == v78)
      v81 = 1.0;
    v82 = v76;
    v83 = v54 - v76;
    if (v54 < v76)
      v83 = 0;
    v84 = v74 + 8 * v76;
    do
    {
      if (v83 == (_DWORD)v51)
      {
        v133 = 0;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v150 = 136315906;
        *(_QWORD *)&v150[4] = "operator[]";
        *(_WORD *)&v150[12] = 1024;
        *(_DWORD *)&v150[14] = 609;
        v151 = 2048;
        v152 = v82 + v51;
        v153 = 2048;
        v154 = v54;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_135:
        v133 = 0;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_QWORD *)&v147[4] = "operator[]";
        *(_WORD *)&v147[12] = 1024;
        *(_DWORD *)&v147[14] = 609;
        *(_DWORD *)v147 = 136315906;
        *(_WORD *)&v147[18] = 2048;
        *(_QWORD *)&v147[20] = v108 + v74;
        v148 = 2048;
        *(_QWORD *)v149 = v114;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_136:
        v133 = 0;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v147 = 136315906;
        *(_QWORD *)&v147[4] = "operator[]";
        *(_WORD *)&v147[12] = 1024;
        *(_DWORD *)&v147[14] = 609;
        *(_WORD *)&v147[18] = 2048;
        *(_QWORD *)&v147[20] = v74 + v108;
        v148 = 2048;
        *(_QWORD *)v149 = v122;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_137:
        v133 = 0;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v147 = 136315906;
        *(_QWORD *)&v147[4] = "operator[]";
        *(_WORD *)&v147[12] = 1024;
        *(_DWORD *)&v147[14] = 609;
        *(_WORD *)&v147[18] = 2048;
        *(_QWORD *)&v147[20] = v74 + v108;
        v148 = 2048;
        *(_QWORD *)v149 = v121;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_138:
        v133 = 0;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v147 = 136315906;
        *(_QWORD *)&v147[4] = "operator[]";
        *(_WORD *)&v147[12] = 1024;
        *(_DWORD *)&v147[14] = 609;
        *(_WORD *)&v147[18] = 2048;
        *(_QWORD *)&v147[20] = v74 + v108;
        v148 = 2048;
        *(_QWORD *)v149 = v120;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_139:
        v129.i64[0] = 0;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_QWORD *)&v147[4] = "operator[]";
        *(_WORD *)&v147[12] = 1024;
        *(_DWORD *)&v147[14] = 609;
        *(_DWORD *)v147 = 136315906;
        *(_WORD *)&v147[18] = 2048;
        *(_QWORD *)&v147[20] = v108 + v74;
        v148 = 2048;
        *(_QWORD *)v149 = v117;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_140:
        v133 = 0;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v150 = 136315906;
        *(_QWORD *)(v44 + 52) = "operator[]";
        *(_WORD *)&v150[12] = 1024;
        *(_DWORD *)(v44 + 62) = 789;
        v151 = 2048;
        *(_QWORD *)(v44 + 68) = v51;
        v153 = 2048;
        *(_QWORD *)(v44 + 78) = v39;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_141:
        v133 = 0;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v150 = 136315906;
        *(_QWORD *)(v44 + 52) = "operator[]";
        *(_WORD *)&v150[12] = 1024;
        *(_DWORD *)(v44 + 62) = 789;
        v151 = 2048;
        *(_QWORD *)(v44 + 68) = v54;
        v153 = 2048;
        *(_QWORD *)(v44 + 78) = v39;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_142:
        v133 = 0;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        *(_OWORD *)__s = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v150 = 136315906;
        *(_QWORD *)(v44 + 52) = "operator[]";
        *(_WORD *)&v150[12] = 1024;
        *(_DWORD *)(v44 + 62) = 789;
        v151 = 2048;
        *(_QWORD *)(v44 + 68) = v51;
        v153 = 2048;
        *(_QWORD *)(v44 + 78) = v39;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_143;
      }
      *(float *)&v85 = v79 * (float)(int)v51;
      if ((_DWORD)v51 == v77)
        *(float *)&v85 = 1.0;
      *((float *)&v85 + 1) = v81;
      *(_QWORD *)(v84 + 8 * v51) = v85;
      v77 = *((_DWORD *)a3 + 2);
      ++v51;
    }
    while ((int)v51 - 1 < v77);
    v76 = v82 + v51;
    v78 = *((_DWORD *)a3 + 3);
    if (v75++ < v78)
      continue;
    break;
  }
  if (v129.i64[0] && v132)
    (*(void (**)(void))(*(_QWORD *)v129.i64[0] + 40))();
  if (*(_QWORD *)v147 && *(_QWORD *)&v149[2])
    (*(void (**)(_QWORD))(**(_QWORD **)v147 + 40))(*(_QWORD *)v147);
LABEL_99:
  v113 = 0;
  v48 = 0xFFFFFFFFLL;
LABEL_100:
  v117 = v48;
  result = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v118);
  v112 = result;
  v114 = v88;
  v90 = *((_DWORD *)a3 + 2);
  v89 = *((_DWORD *)a3 + 3);
  if (a3[4])
    v91 = *((_DWORD *)a3 + 2);
  else
    v91 = v90 + 1;
  if (a3[5])
    v92 = *((_DWORD *)a3 + 3);
  else
    v92 = v89 + 1;
  v115 = v92;
  if (v92)
  {
    v93 = 0;
    v94 = 0;
    v95 = 1.0 / (float)v90;
    v96 = 1.0 / (float)v89;
    do
    {
      v97 = v96 * (float)v93;
      if (v93 == *((_DWORD *)a3 + 3))
        v97 = 1.0;
      v128 = v97;
      if (v91)
      {
        v116 = v93;
        v74 = 0;
        v98 = v94;
        if (v114 >= v94)
          v51 = v114 - v94;
        else
          v51 = 0;
        v99 = v111 + 16 * v94;
        v100 = (_OWORD *)(v109 + 16 * v94);
        v44 = (_BYTE *)(v110 + 16 * v94);
        v119 = v113 + 8 * v94;
        v108 = v94;
        v39 = (const char *)(v112 + 16 * v94);
        do
        {
          v54 = v98 + v74;
          v101 = v95 * (float)(int)v74;
          if ((_DWORD)v74 == *((_DWORD *)a3 + 2))
            v101 = 1.0;
          if (v125)
          {
            if (v117 <= v54)
              goto LABEL_139;
            *(_QWORD *)(v119 + 8 * v74) = __PAIR64__(LODWORD(v128), LODWORD(v101));
          }
          v129 = 0u;
          *(_OWORD *)v150 = 0u;
          *(float *)__s = v101;
          *(float *)v147 = v128;
          result = (*(uint64_t (**)(_QWORD *, char **, _BYTE *, float32x4_t *, _BYTE *))(**((_QWORD **)a2 + 4)
                                                                                                 + 16))(*((_QWORD **)a2 + 4), __s, v147, &v129, v150);
          if ((_DWORD)v51 == (_DWORD)v74)
            goto LABEL_135;
          v103 = (uint64_t *)&v39[16 * v74];
          *v103 = result;
          v103[1] = v102;
          if (v124)
          {
            if (v54 >= v122)
              goto LABEL_136;
            *(float32x4_t *)v44 = v129;
            if (v54 >= v121)
              goto LABEL_137;
            *v100 = *(_OWORD *)v150;
          }
          if (v123)
          {
            v104 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v150, *(int32x4_t *)v150), *(int8x16_t *)v150, 0xCuLL), vnegq_f32(v129)), *(float32x4_t *)v150, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v129, (int32x4_t)v129), (int8x16_t)v129, 0xCuLL));
            v105 = vmulq_f32(v104, v104);
            v106 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL);
            v107 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 2), v105)).u64[0];
            if (*(float *)v107.i32 > 1.0e-10)
            {
              *(float *)v107.i32 = sqrtf(*(float *)v107.i32);
              v106 = vdivq_f32(v106, (float32x4_t)vdupq_lane_s32(v107, 0));
            }
            if (v54 >= v120)
              goto LABEL_138;
            *(float32x4_t *)(v99 + 16 * v74) = v106;
          }
          ++v74;
          ++v100;
          v44 += 16;
        }
        while (v91 != (_DWORD)v74);
        v94 = v98 + v74;
        v93 = v116;
      }
      ++v93;
    }
    while (v93 != v115);
  }
  return result;
}

uint64_t re::buildCube(re *this, re::GeomMesh *a2, float a3, unsigned int a4)
{
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  re::internal *v16;
  const re::GeomAttribute *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  re *v31;
  re *v32;
  char *v33;
  uint64_t *v34;
  re::GeomMesh *v35;
  uint64_t v36;
  re::GeomMesh *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t result;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  float v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int v58;
  uint64_t v59;
  float32x4_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  re *v68;
  int v69;
  int v71;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  char *__s[2];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int v88;
  int v89;
  const char *v90;
  __int16 v91;
  int v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  if (a2 <= 1)
    v5 = 1;
  else
    v5 = (int)a2;
  if (a4)
    v6 = a4;
  else
    v6 = v5;
  v75 = v5;
  v7 = v5 + 1;
  v8 = v6 + 1;
  v9 = (v6 + 1) * (v5 + 1);
  re::GeomMeshBuilder::GeomMeshBuilder((re *)__s, (uint64_t)this);
  v71 = v9;
  if (LODWORD(__s[1]) > 6 * v9 && (_DWORD)v78 && (v78 - 1) > (unint64_t)v78)
  {
    while (1)
      ;
  }
  v68 = this;
  LODWORD(__s[1]) = 6 * v9;
  v81 = 6 * v9;
  if (v82)
  {
    v10 = v83;
    v11 = 8 * v82;
    do
    {
      v12 = *v10++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 72))(v12, v81);
      v11 -= 8;
    }
    while (v11);
  }
  v13 = 12 * v75 * v6;
  if (v13 < v78)
  {
    v14 = v88;
    if (v88)
    {
      v15 = 0;
      do
      {
        v16 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)&v87, v15);
        re::internal::accessFaceVaryingAttributeSubmesh(v16, v17);
        ++v15;
      }
      while (v14 != v15);
    }
  }
  v69 = v7;
  re::DynamicArray<re::GeomCell4>::resize(&v77, v13);
  v84 = 12 * v75 * v6;
  if (v85)
  {
    v18 = v86;
    v19 = 8 * v85;
    do
    {
      v20 = *v18++;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v20 + 72))(v20, v84);
      v19 -= 8;
    }
    while (v19);
  }
  v21 = 0;
  v22 = 0;
  v23 = 0;
  if (v6 <= 1)
    v24 = 1;
  else
    v24 = v6;
  do
  {
    v72 = v23;
    v73 = v21;
    v25 = 0;
    do
    {
      ++v25;
      v26 = v24;
      v27 = v21;
      do
      {
        v28 = v27 + 1;
        v29 = v6 + v27 + 1;
        v30 = v6 + v27 + 2;
        re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v22, v27, v27 + 1, v29);
        re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v22 + 1, v28, v30, v29);
        v22 += 2;
        v27 = v28;
        --v26;
      }
      while (v26);
      v21 += v8;
    }
    while (v25 != v75);
    v23 = v72 + 1;
    v21 = v73 + v71;
  }
  while (v72 != 5);
  v31 = (re *)re::GeomMesh::operator=((uint64_t)v68, &__s[1]);
  v32 = re::GeomMesh::setName(v31, __s[0]);
  v33 = __s[0];
  if (__s[0])
  {
    v34 = re::globalAllocators(v32);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v34[2] + 40))(v34[2], v33);
    __s[0] = 0;
  }
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
  re::addVertexUVs(v68, v35);
  v36 = re::GeomMesh::modifyVertexPositions(v68);
  v38 = v37;
  v39 = re::modifyVertexUVs(v68, v37);
  v41 = v40;
  v74 = v43;
  v46 = v45;
  v48 = v41;
  v50 = v49;
  v51 = 0;
  v52 = 0;
  v53 = 2.0 / (float)v6;
  v54 = 1.0 / (float)v6;
  do
  {
    switch(v51)
    {
      case 0:
        v55 = (float32x4_t)xmmword_2261027B0;
        v56 = (float32x4_t)xmmword_2261027C0;
        v57 = (float32x4_t)xmmword_2260E5F10;
        if (!v69)
          goto LABEL_67;
        goto LABEL_46;
      case 1:
        v55 = (float32x4_t)xmmword_2261027B0;
        v56 = (float32x4_t)xmmword_2260E5F40;
        v57 = (float32x4_t)xmmword_2261027D0;
        if (!v69)
          goto LABEL_67;
        goto LABEL_46;
      case 2:
        v55 = (float32x4_t)xmmword_2260E5F40;
        v56 = (float32x4_t)xmmword_2260E5F10;
        v57 = (float32x4_t)xmmword_2260E5F20;
        if (!v69)
          goto LABEL_67;
        goto LABEL_46;
      case 3:
        v55 = (float32x4_t)xmmword_2261027C0;
        v56 = (float32x4_t)xmmword_2260E5F10;
        v57 = (float32x4_t)xmmword_2261027B0;
        if (!v69)
          goto LABEL_67;
        goto LABEL_46;
      case 4:
        v55 = (float32x4_t)xmmword_2261027B0;
        v56 = (float32x4_t)xmmword_2260E5F10;
        v57 = (float32x4_t)xmmword_2260E5F40;
        if (!v69)
          goto LABEL_67;
        goto LABEL_46;
      case 5:
        v55 = (float32x4_t)xmmword_2261027B0;
        v56 = (float32x4_t)xmmword_2261027D0;
        v57 = (float32x4_t)xmmword_2261027C0;
        if (v69)
          goto LABEL_46;
        goto LABEL_67;
      default:
        v55 = 0uLL;
        v56 = 0uLL;
        v57 = 0uLL;
        if (!v69)
          goto LABEL_67;
LABEL_46:
        v58 = 0;
        break;
    }
    do
    {
      if (v8)
      {
        v59 = 0;
        v60 = vaddq_f32(v57, vmulq_n_f32(v56, (float)((float)v58 * (float)(2.0 / (float)v75)) + -1.0));
        v61 = v38 - v52;
        if (v38 < v52)
          v61 = 0;
        v62 = v48 - v52;
        if (v48 < v52)
          v62 = 0;
        v63 = v74 - v52;
        if (v74 < v52)
          v63 = 0;
        v64 = v46 - v52;
        if (v46 < v52)
          v64 = 0;
        v65 = v50 - v52;
        if (v50 < v52)
          v65 = 0;
        do
        {
          if (v61 == (_DWORD)v59)
          {
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v90 = "operator[]";
            v91 = 1024;
            v92 = 609;
            v89 = 136315906;
            v93 = 2048;
            v94 = v52 + v59;
            v95 = 2048;
            v96 = v38;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_70:
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            *(_OWORD *)__s = 0u;
            v50 = v48;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v89 = 136315906;
            v90 = "operator[]";
            v91 = 1024;
            v92 = 609;
            v93 = 2048;
            v94 = v59 + v52;
            v95 = 2048;
            v96 = v50;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_71:
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v89 = 136315906;
            v90 = "operator[]";
            v91 = 1024;
            v92 = 609;
            v93 = 2048;
            v94 = v59 + v52;
            v95 = 2048;
            v96 = v74;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_72:
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v89 = 136315906;
            v90 = "operator[]";
            v91 = 1024;
            v92 = 609;
            v93 = 2048;
            v94 = v59 + v52;
            v95 = 2048;
            v96 = v46;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_73:
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            *(_OWORD *)__s = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v89 = 136315906;
            v90 = "operator[]";
            v91 = 1024;
            v92 = 609;
            v93 = 2048;
            v94 = v59 + v52;
            v95 = 2048;
            v96 = v50;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(float32x4_t *)(v36 + 16 * v52 + 16 * v59) = vmulq_n_f32(vaddq_f32(v60, vmulq_n_f32(v55, (float)((float)(int)v59 * v53) + -1.0)), a3);
          if (v62 == (_DWORD)v59)
            goto LABEL_70;
          *(float *)&v66 = (float)(1.0 / (float)v75) * (float)v58;
          *((float *)&v66 + 1) = v54 * (float)(int)v59;
          *(_QWORD *)(v39 + 8 * v52 + 8 * v59) = v66;
          if (v63 == (_DWORD)v59)
            goto LABEL_71;
          *(float32x4_t *)(v42 + 16 * v52 + 16 * v59) = v57;
          if (v64 == (_DWORD)v59)
            goto LABEL_72;
          *(float32x4_t *)(v44 + 16 * v52 + 16 * v59) = v56;
          if (v65 == (_DWORD)v59)
            goto LABEL_73;
          *(float32x4_t *)(result + 16 * v52 + 16 * v59++) = v55;
        }
        while (v8 != (_DWORD)v59);
        v52 += v59;
      }
    }
    while (v58++ != v75);
LABEL_67:
    ++v51;
  }
  while (v51 != 6);
  return result;
}

void re::internal::Callable<re::buildParametricPlane(re::GeomMesh &,float,float,unsigned int,unsigned int)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

float re::internal::Callable<re::buildParametricPlane(re::GeomMesh &,float,float,unsigned int,unsigned int)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::operator()(uint64_t a1, float *a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  float result;

  result = (float)(*a2 + -0.5) * *(float *)(a1 + 8);
  *a4 = xmmword_2260E5F40;
  *a5 = xmmword_2260E5F10;
  return result;
}

_QWORD *re::internal::Callable<re::buildParametricPlane(re::GeomMesh &,float,float,unsigned int,unsigned int)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED72D70;
  a2[1] = *(_QWORD *)(a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::buildParametricPlane(re::GeomMesh &,float,float,unsigned int,unsigned int)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED72D70;
  a2[1] = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::buildParametricPlane(re::GeomMesh &,float,float,unsigned int,unsigned int)::$_0,re::Vector3<float> ()(float,float,re::Vector3<float>&,re::Vector3<float>&)>::size()
{
  return 16;
}

void re::makeManifold(unint64_t a1, re::GeomMesh *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::GeomMesh *v11;
  uint64_t v12;
  uint64_t v13;
  re::GeomAttribute *v14;
  re::GeomMesh *v15;
  BOOL v16;
  re::GeomAttribute *v17;
  uint64_t v18;
  unsigned int v19;
  re::GeomAttribute *v20;
  uint64_t v21;
  _DWORD *v22;
  re::GeomAttribute *v23;
  re::GeomAttribute *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  re::GeomAttribute *v29;
  uint64_t v31[2];
  re::GeomMesh *v32;
  int v33;
  re::GeomAttribute *v34;
  uint64_t v35[93];
  __int128 v36;
  uint64_t v37;
  int v38;
  _DWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[12];
  __int16 v46;
  int v47;
  __int16 v48;
  unint64_t v49;
  __int16 v50;
  unint64_t v51;
  _OWORD v52[5];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  re::GeomMesh::GeomMesh((re::GeomMesh *)v35, 0);
  v34 = 0;
  v31[1] = 0;
  v32 = 0;
  v31[0] = 0;
  v7 = *(unsigned int *)(a1 + 16);
  v33 = 1;
  re::DynamicArray<unsigned int>::resize(v31, v7, re::kInvalidMeshIndex);
  v8 = *(_QWORD *)(a1 + 40);
  if (!(_DWORD)v8)
    goto LABEL_11;
  v9 = 0;
  v10 = *(_QWORD *)(a1 + 56);
  v11 = v32;
  do
  {
    if (v9 == v8)
      goto LABEL_46;
    v12 = 0;
    v36 = *(_OWORD *)(v10 + 16 * v9);
    if (HIDWORD(v36) == -1)
      v13 = 3;
    else
      v13 = 4;
    v14 = v34;
    do
    {
      v3 = *((unsigned int *)&v36 + v12);
      if ((unint64_t)v11 <= v3)
      {
        *(_QWORD *)v45 = 0;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v40 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v52[0]) = 136315906;
        *(_QWORD *)((char *)v52 + 4) = "operator[]";
        WORD6(v52[0]) = 1024;
        *(_DWORD *)((char *)v52 + 14) = 789;
        WORD1(v52[1]) = 2048;
        *(_QWORD *)((char *)&v52[1] + 4) = v3;
        WORD6(v52[1]) = 2048;
        *(_QWORD *)((char *)&v52[1] + 14) = v11;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_46:
        *(_QWORD *)&v36 = 0;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v40 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v52[0]) = 136315906;
        *(_QWORD *)((char *)v52 + 4) = "operator[]";
        WORD6(v52[0]) = 1024;
        *(_DWORD *)((char *)v52 + 14) = 797;
        WORD1(v52[1]) = 2048;
        *(_QWORD *)((char *)&v52[1] + 4) = v8;
        WORD6(v52[1]) = 2048;
        *(_QWORD *)((char *)&v52[1] + 14) = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_47;
      }
      *((_DWORD *)v14 + v3) = v3;
      ++v12;
    }
    while (v13 != v12);
    ++v9;
  }
  while (v9 != v8);
  if (!(_DWORD)v7)
    goto LABEL_34;
LABEL_11:
  v15 = 0;
  v16 = 1;
  v8 = (unint64_t)v32;
  v17 = v34;
  while (1)
  {
    if (v32 == v15)
      goto LABEL_48;
    if (*((_DWORD *)v34 + (_QWORD)v15) == -1)
      break;
    v15 = (re::GeomMesh *)((char *)v15 + 1);
    v16 = (unint64_t)v15 < v7;
    if ((re::GeomMesh *)v7 == v15)
      goto LABEL_34;
  }
  v18 = 0;
  v19 = 0;
  do
  {
    if (v8 == v18)
      goto LABEL_49;
    if (*((_DWORD *)v17 + v18) != -1)
    {
      v3 = v19;
      if (v8 <= v19)
        goto LABEL_50;
      *((_DWORD *)v17 + v19++) = v18;
    }
    ++v18;
  }
  while (v7 != v18);
  re::DynamicArray<float>::resize((uint64_t)v31, v19);
  re::internal::buildMeshFromNewVertices(a1, v31, (uint64_t)v35);
  if (v16)
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)&v40, 0);
    v39 = 0;
    v37 = 0;
    v36 = 0uLL;
    v38 = 0;
    {
      re::GeomMesh::operator=(v35, (uint64_t *)&v40);
      v21 = v37;
      if (v37)
      {
        v22 = v39;
        a1 = (unint64_t)v32;
        v23 = v34;
        do
        {
          v7 = *v22;
          if (a1 <= v7)
            goto LABEL_51;
          *v22++ = *((_DWORD *)v23 + v7);
        }
        while (--v21);
      }
      re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)v31, (uint64_t)&v36);
    }
    if ((_QWORD)v36)
    {
      v20 = (re::GeomAttribute *)v39;
      if (v39)
        (*(void (**)(void))(*(_QWORD *)v36 + 40))();
    }
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v40, v20);
LABEL_35:
    v25 = *(_QWORD *)(a3 + 16);
    if (v25)
    {
      v26 = 0;
      v27 = *(_QWORD *)(a3 + 32);
      v28 = 1;
      a2 = v32;
      v29 = v34;
      while (1)
      {
        a1 = *(unsigned int *)(v27 + 4 * v26);
        if ((unint64_t)a2 <= a1)
          break;
        *(_DWORD *)(v27 + 4 * v26) = *((_DWORD *)v29 + a1);
        v26 = v28;
        if (v25 <= v28++)
          goto LABEL_41;
      }
LABEL_47:
      *(_QWORD *)&v36 = 0;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v52[0]) = 136315906;
      *(_QWORD *)((char *)v52 + 4) = "operator[]";
      WORD6(v52[0]) = 1024;
      *(_DWORD *)((char *)v52 + 14) = 789;
      WORD1(v52[1]) = 2048;
      *(_QWORD *)((char *)&v52[1] + 4) = a1;
      WORD6(v52[1]) = 2048;
      *(_QWORD *)((char *)&v52[1] + 14) = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_48:
      *(_QWORD *)&v36 = 0;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v52[0]) = 136315906;
      *(_QWORD *)((char *)v52 + 4) = "operator[]";
      WORD6(v52[0]) = 1024;
      *(_DWORD *)((char *)v52 + 14) = 789;
      WORD1(v52[1]) = 2048;
      *(_QWORD *)((char *)&v52[1] + 4) = v8;
      WORD6(v52[1]) = 2048;
      *(_QWORD *)((char *)&v52[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_49:
      *(_QWORD *)&v36 = 0;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v52[0]) = 136315906;
      *(_QWORD *)((char *)v52 + 4) = "operator[]";
      WORD6(v52[0]) = 1024;
      *(_DWORD *)((char *)v52 + 14) = 789;
      WORD1(v52[1]) = 2048;
      *(_QWORD *)((char *)&v52[1] + 4) = v8;
      WORD6(v52[1]) = 2048;
      *(_QWORD *)((char *)&v52[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_50:
      *(_QWORD *)&v36 = 0;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v52[0]) = 136315906;
      *(_QWORD *)((char *)v52 + 4) = "operator[]";
      WORD6(v52[0]) = 1024;
      *(_DWORD *)((char *)v52 + 14) = 789;
      WORD1(v52[1]) = 2048;
      *(_QWORD *)((char *)&v52[1] + 4) = v3;
      WORD6(v52[1]) = 2048;
      *(_QWORD *)((char *)&v52[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_51:
      v35[92] = 0;
      memset(v52, 0, sizeof(v52));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v45 = 136315906;
      *(_QWORD *)&v45[4] = "operator[]";
      v46 = 1024;
      v47 = 789;
      v48 = 2048;
      v49 = v7;
      v50 = 2048;
      v51 = a1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
  else
  {
LABEL_34:
      goto LABEL_35;
  }
LABEL_41:
  if (v31[0])
  {
    v24 = v34;
    if (v34)
      (*(void (**)(void))(*(_QWORD *)v31[0] + 40))();
  }
  re::GeomMesh::~GeomMesh((re::GeomMesh *)v35, v24);
}

uint64_t re::`anonymous namespace'::makeManifoldByVertexSplitting(unint64_t a1, re::GeomMesh *a2, uint64_t a3)
{
  unint64_t v3;
  __int128 *v7;
  int v8;
  __int128 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  re::GeomMesh *v27;
  unsigned int v28;
  _QWORD v29[2];
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  int v43;
  __int128 v44;
  __int128 v45;
  int v46;
  __int128 v47;
  __int128 v48;
  int v49;
  __int128 v50;
  __int128 v51;
  int v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int128 v56;
  __int128 v57;
  int v58;
  __int128 v59;
  __int128 v60;
  int v61;
  __int128 v62;
  __int128 v63;
  int v64;
  __int128 v65;
  __int128 v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  unsigned int *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  uint64_t v81;
  _BYTE v82[12];
  __int16 v83;
  int v84;
  __int16 v85;
  unint64_t v86;
  __int16 v87;
  unint64_t v88;
  _DWORD v89[12];
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  LODWORD(v33) = 0;
  v36 = 0;
  v34[1] = 0;
  v34[2] = 0;
  v35 = 0;
  re::DynamicArray<re::BlendNode>::setCapacity(v34, 1uLL);
  ++v35;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 0;
  v68 = 0;
  v41 = 0u;
  v42 = 0u;
  v44 = 0u;
  v45 = 0u;
  v43 = 0;
  v46 = 0;
  v47 = 0u;
  v48 = 0u;
  v50 = 0u;
  v51 = 0u;
  v49 = 0;
  v52 = 0;
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0;
  v61 = 0;
  v59 = 0u;
  v60 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0;
  v67 = 0;
  v65 = 0u;
  v66 = 0u;
  re::internal::GeomConnectivityNonManifold::build(a1 + 16, (uint64_t)&v33);
  v32 = 0;
  v29[1] = 0;
  v30 = 0;
  v29[0] = 0;
  v31 = 0;
  re::DynamicArray<unsigned int>::resize(v29, (4 * *(_DWORD *)(a1 + 40)), re::kInvalidMeshIndex);
  v7 = *(__int128 **)(a1 + 40);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 56);
    v11 = v30;
    do
    {
      if (v9 == v7)
        goto LABEL_95;
      v12 = 0;
      v71 = *(_OWORD *)(v10 + 16 * (_QWORD)v9);
      v13 = v32;
      if (HIDWORD(v71) == -1)
        v14 = 3;
      else
        v14 = 4;
      do
      {
        v3 = (v8 + v12);
        if (v11 <= v3)
          goto LABEL_45;
        *(_DWORD *)(v13 + 4 * v3) = *((_DWORD *)&v71 + v12++);
      }
      while (v14 != v12);
      v9 = (__int128 *)((char *)v9 + 1);
      v8 += 4;
    }
    while (v9 != (__int128 *)v7);
  }
  v27 = a2;
  re::DynamicArray<re::RigComponentConstraint>::operator=(a3, (uint64_t)&v75);
  if ((_QWORD)v75 && (_QWORD)v77)
    (*(void (**)(void))(*(_QWORD *)v75 + 40))();
  v28 = 0;
  v15 = DWORD2(v42);
  if (DWORD2(v42))
  {
    v16 = 0;
    v7 = &v76;
    do
    {
      v11 = v16;
      v3 = v39;
      if (v39 <= v16)
        goto LABEL_96;
      if ((*(_BYTE *)(v41 + v16) & 2) != 0)
      {
        *(_QWORD *)&v75 = &v33;
        DWORD2(v75) = v16;
        *(_QWORD *)&v77 = 0;
        v76 = 0uLL;
        DWORD2(v77) = 0;
        v81 = 0;
        v78 = 0u;
        v79 = 0u;
        v80 = 0;
        re::internal::GeomConnectivityNonManifold::fetchVertexIncidentFaces(&v33, v16, (uint64_t)&v76);
        LOBYTE(v89[0]) = 0;
        re::DynamicArray<unsigned char>::resize((_QWORD *)&v78 + 1, v77, v89);
        v74 = 0;
        v72 = 0;
        v71 = 0uLL;
        v73 = 0;
        {
          do
          {
            if (!v72)
              goto LABEL_29;
            v17 = v74;
            v18 = &v74[v72];
            v11 = *(_QWORD *)(a1 + 40);
            v19 = *(_QWORD *)(a1 + 56);
            do
            {
              v3 = *v17;
              if (v11 <= v3)
              {
                *(_QWORD *)&v70 = 0;
                v90 = 0u;
                v91 = 0u;
                memset(v89, 0, sizeof(v89));
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v82 = 136315906;
                *(_QWORD *)&v82[4] = "operator[]";
                v83 = 1024;
                v84 = 797;
                v85 = 2048;
                v86 = v3;
                v87 = 2048;
                v88 = v11;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_95:
                *(_QWORD *)&v71 = 0;
                v78 = 0u;
                v79 = 0u;
                v76 = 0u;
                v77 = 0u;
                v75 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v89[0] = 136315906;
                *(_QWORD *)&v89[1] = "operator[]";
                LOWORD(v89[3]) = 1024;
                *(_DWORD *)((char *)&v89[3] + 2) = 797;
                HIWORD(v89[4]) = 2048;
                *(_QWORD *)&v89[5] = v7;
                LOWORD(v89[7]) = 2048;
                *(_QWORD *)((char *)&v89[7] + 2) = v7;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_96:
                *(_QWORD *)&v71 = 0;
                v78 = 0u;
                v79 = 0u;
                v76 = 0u;
                v77 = 0u;
                v75 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v89[0] = 136315906;
                *(_QWORD *)&v89[1] = "operator[]";
                LOWORD(v89[3]) = 1024;
                *(_DWORD *)((char *)&v89[3] + 2) = 797;
                HIWORD(v89[4]) = 2048;
                *(_QWORD *)&v89[5] = v11;
                LOWORD(v89[7]) = 2048;
                *(_QWORD *)((char *)&v89[7] + 2) = v3;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              v20 = 0;
              v70 = *(_OWORD *)(v19 + 16 * v3);
              v21 = 4 * v3;
              v22 = *(_DWORD *)(a3 + 16);
              v3 = v30;
              v23 = v32;
              if (HIDWORD(v70) == -1)
                v24 = 3;
              else
                v24 = 4;
              do
              {
                if (*((_DWORD *)&v70 + v20) == v28)
                {
                  v25 = (v21 + v20);
                  if (v3 <= v25)
                  {
                    v69 = 0;
                    v90 = 0u;
                    v91 = 0u;
                    memset(v89, 0, sizeof(v89));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v82 = 136315906;
                    *(_QWORD *)&v82[4] = "operator[]";
                    v83 = 1024;
                    v84 = 789;
                    v85 = 2048;
                    v86 = v25;
                    v87 = 2048;
                    v88 = v3;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_45:
                    *(_QWORD *)v82 = 0;
                    v78 = 0u;
                    v79 = 0u;
                    v76 = 0u;
                    v77 = 0u;
                    v75 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v89[0] = 136315906;
                    *(_QWORD *)&v89[1] = "operator[]";
                    LOWORD(v89[3]) = 1024;
                    *(_DWORD *)((char *)&v89[3] + 2) = 789;
                    HIWORD(v89[4]) = 2048;
                    *(_QWORD *)&v89[5] = v3;
                    LOWORD(v89[7]) = 2048;
                    *(_QWORD *)((char *)&v89[7] + 2) = v11;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_46:
                    re::internal::buildMeshFromNewFaceVertices(a1, (uint64_t)v29, (unint64_t)v27);
                    goto LABEL_47;
                  }
                  *(_DWORD *)(v23 + 4 * v25) = v22;
                }
                ++v20;
              }
              while (v24 != v20);
              ++v17;
            }
            while (v17 != v18);
LABEL_29:
            re::DynamicArray<int>::add((_QWORD *)a3, &v28);
          }
        }
        if ((_QWORD)v71 && v74)
          (*(void (**)(void))(*(_QWORD *)v71 + 40))();
        if (*((_QWORD *)&v78 + 1))
        {
          if (v81)
            (*(void (**)(void))(**((_QWORD **)&v78 + 1) + 40))();
          v81 = 0;
          v79 = 0uLL;
          *((_QWORD *)&v78 + 1) = 0;
          ++v80;
        }
        if ((_QWORD)v76 && (_QWORD)v78)
          (*(void (**)(void))(*(_QWORD *)v76 + 40))();
        v16 = v28;
        v15 = DWORD2(v42);
      }
      v28 = ++v16;
    }
    while (v16 < v15);
  }
  if (*(_QWORD *)(a3 + 16) != *(_DWORD *)(a1 + 16))
    goto LABEL_46;
  re::GeomMesh::copy((re::GeomMesh *)a1, a2);
LABEL_47:
  if (v29[0] && v32)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v29[0] + 40))(v29[0], v32);
  if (*((_QWORD *)&v65 + 1))
  {
    if (v68)
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)&v65 + 1) + 40))(*((_QWORD *)&v65 + 1), v68);
    v68 = 0;
    v66 = 0uLL;
    *((_QWORD *)&v65 + 1) = 0;
    ++v67;
  }
  if (*((_QWORD *)&v62 + 1))
  {
    if ((_QWORD)v65)
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v62 + 1) + 40))(*((_QWORD *)&v62 + 1), v65);
    *(_QWORD *)&v65 = 0;
    v63 = 0uLL;
    *((_QWORD *)&v62 + 1) = 0;
    ++v64;
  }
  if (*((_QWORD *)&v59 + 1))
  {
    if ((_QWORD)v62)
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v59 + 1) + 40))(*((_QWORD *)&v59 + 1), v62);
    *(_QWORD *)&v62 = 0;
    v60 = 0uLL;
    *((_QWORD *)&v59 + 1) = 0;
    ++v61;
  }
  if (*((_QWORD *)&v56 + 1))
  {
    if ((_QWORD)v59)
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v56 + 1) + 40))(*((_QWORD *)&v56 + 1), v59);
    *(_QWORD *)&v59 = 0;
    v57 = 0uLL;
    *((_QWORD *)&v56 + 1) = 0;
    ++v58;
  }
  if (*((_QWORD *)&v53 + 1))
  {
    if ((_QWORD)v56)
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v53 + 1) + 40))(*((_QWORD *)&v53 + 1), v56);
    *(_QWORD *)&v56 = 0;
    v54 = 0uLL;
    *((_QWORD *)&v53 + 1) = 0;
    ++v55;
  }
  if (*((_QWORD *)&v50 + 1))
  {
    if ((_QWORD)v53)
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v50 + 1) + 40))(*((_QWORD *)&v50 + 1), v53);
    *(_QWORD *)&v53 = 0;
    v51 = 0uLL;
    *((_QWORD *)&v50 + 1) = 0;
    ++v52;
  }
  if (*((_QWORD *)&v47 + 1))
  {
    if ((_QWORD)v50)
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v47 + 1) + 40))(*((_QWORD *)&v47 + 1), v50);
    *(_QWORD *)&v50 = 0;
    v48 = 0uLL;
    *((_QWORD *)&v47 + 1) = 0;
    ++v49;
  }
  if (*((_QWORD *)&v44 + 1))
  {
    if ((_QWORD)v47)
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v44 + 1) + 40))(*((_QWORD *)&v44 + 1), v47);
    *(_QWORD *)&v47 = 0;
    v45 = 0uLL;
    *((_QWORD *)&v44 + 1) = 0;
    ++v46;
  }
  if (*((_QWORD *)&v41 + 1))
  {
    if ((_QWORD)v44)
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)&v41 + 1) + 40))(*((_QWORD *)&v41 + 1), v44);
    *(_QWORD *)&v44 = 0;
    v42 = 0uLL;
    *((_QWORD *)&v41 + 1) = 0;
    ++v43;
  }
  if (v37)
  {
    if ((_QWORD)v41)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 40))(v37, v41);
    *(_QWORD *)&v41 = 0;
    v38 = 0;
    v39 = 0;
    v37 = 0;
    ++v40;
  }
  result = v34[0];
  if (v34[0])
  {
    if (v36)
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v34[0] + 40))(v34[0], v36);
  }
  return result;
}

uint64_t re::`anonymous namespace'::makeMeshWithNoDuplicatedFaceVertices(unint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  int v19;
  _QWORD v20[2];
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a3, (uint64_t)&v34);
  if ((_QWORD)v34 && (_QWORD)v36)
    (*(void (**)(void))(*(_QWORD *)v34 + 40))();
  v23 = 0;
  v20[1] = 0;
  v21 = 0;
  v20[0] = 0;
  v22 = 0;
  re::DynamicArray<unsigned int>::resize(v20, (4 * *(_DWORD *)(a1 + 40)), re::kInvalidMeshIndex);
  v6 = *(_QWORD *)(a1 + 40);
  if (!(_DWORD)v6)
    goto LABEL_21;
  v18 = a2;
  v7 = 0;
  v8 = 0;
  do
  {
    if (v6 <= v7)
      goto LABEL_27;
    v6 = 0;
    v25 = *(_OWORD *)(*(_QWORD *)(a1 + 56) + 16 * v7);
    v9 = 4 * v7;
    if (HIDWORD(v25) == -1)
      v10 = 3;
    else
      v10 = 4;
    do
    {
      v11 = *((_DWORD *)&v25 + v6);
      v19 = v11;
      v12 = (v9 + v6);
      v13 = v21;
      if (v21 <= v12)
      {
        v24 = 0;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v34 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v26 = 136315906;
        v27 = "operator[]";
        v28 = 1024;
        v29 = 789;
        v30 = 2048;
        v31 = (v9 + v6);
        v32 = 2048;
        v33 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_27:
        *(_QWORD *)&v25 = 0;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v34 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v26 = 136315906;
        v27 = "operator[]";
        v28 = 1024;
        v29 = 797;
        v30 = 2048;
        v31 = v7;
        v32 = 2048;
        v33 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v14 = v23;
      *(_DWORD *)(v23 + 4 * v12) = v11;
      if (v6)
      {
        v15 = 0;
        while (*((_DWORD *)&v25 + v15) != v19)
        {
          if (v6 == ++v15)
            goto LABEL_17;
        }
        *(_DWORD *)(v14 + 4 * v12) = a3[2];
        re::DynamicArray<int>::add(a3, &v19);
        v8 = 1;
      }
LABEL_17:
      ++v6;
    }
    while (v6 != v10);
    ++v7;
    v6 = *(_QWORD *)(a1 + 40);
  }
  while (v7 < v6);
  if ((v8 & 1) == 0)
  {
LABEL_21:
    v16 = 0;
    goto LABEL_22;
  }
  re::internal::buildMeshFromNewFaceVertices(a1, (uint64_t)v20, v18);
  v16 = 1;
LABEL_22:
  if (v20[0] && v23)
    (*(void (**)(void))(*(_QWORD *)v20[0] + 40))();
  return v16;
}

void re::`anonymous namespace'::makeIdentityMap(re::_anonymous_namespace_ *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = a2;
  re::DynamicArray<float>::resize((uint64_t)this, a2);
  if (a2)
  {
    v5 = 0;
    v6 = *((_QWORD *)this + 2);
    v7 = *((_QWORD *)this + 4);
    do
    {
      if (v6 == v5)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_DWORD *)(v7 + 4 * v5) = v5;
      ++v5;
    }
    while (v4 != v5);
  }
}

uint64_t re::`anonymous namespace'::VertexFaceNeighborhood::findNextManifoldNeighborhood(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  *(_QWORD *)(a2 + 16) = 0;
  ++*(_DWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a1 + 72);
  if (!v2)
    return 0;
  v3 = 0;
  v4 = 1;
  while (*(_BYTE *)(*(_QWORD *)(a1 + 88) + v3))
  {
    v3 = v4;
    if (v2 <= v4++)
      return 0;
  }
  if (*(_QWORD *)(a1 + 32) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
}

uint64_t re::internal::GeomConnectivityNonManifold::fetchVertexIncidentFaces(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    v5 = a2 - 1;
    v6 = a1[18];
    if (v6 <= v5)
      goto LABEL_17;
    v7 = *(_DWORD *)(a1[20] + 4 * v5);
  }
  else
  {
    v7 = 0;
    v6 = a1[18];
  }
  if (v6 <= a2)
  {
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = *(_DWORD *)(a1[20] + 4 * a2);
  re::DynamicArray<float>::resize(a3, v8 - v7);
  result = v8 - v7;
  if (v8 > v7)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 32);
    if (a1[28] <= (unint64_t)v7)
      v13 = v7;
    else
      v13 = a1[28];
    while (v13 - v7 != v10)
    {
      if (v11 <= v10)
        goto LABEL_15;
      *(_DWORD *)(v12 + 4 * v10) = *(_DWORD *)(a1[30] + 4 * v7 + 4 * v10);
      if ((_DWORD)result == (_DWORD)++v10)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

uint64_t re::`anonymous namespace'::VertexFaceNeighborhood::findReachableFaces(re::internal::GeomConnectivityNonManifold **a1, int a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;
  unint64_t v9;
  unsigned int *v10;
  re::internal::GeomConnectivityNonManifold *v11;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  re::internal::GeomConnectivityNonManifold *v16;
  unsigned int *v17;
  int v18;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25[4];
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unsigned int *v33;
  unsigned int v34[4];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  v3 = (unint64_t)a1[4];
  if (!v3)
    return 0;
  v6 = 0;
  v7 = 1;
  while (*((_DWORD *)a1[6] + v6) != a2)
  {
    v6 = v7;
    if (v3 <= v7++)
      return 0;
  }
  if (!v7)
    return 0;
  v9 = v7 - 1;
  v10 = (unsigned int *)a1[9];
  if ((unint64_t)v10 <= v9)
    goto LABEL_29;
  v11 = a1[11];
  if (*((_BYTE *)v11 + v9))
    return 0;
  *((_BYTE *)v11 + v9) = 1;
  re::DynamicArray<int>::add(a3, &v23);
  v10 = (unsigned int *)a1[4];
  if ((unint64_t)v10 <= v9)
  {
LABEL_30:
    *(_QWORD *)v25 = 0;
    v38 = 0u;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)v34 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 789;
    v30 = 2048;
    v31 = v9;
    v32 = 2048;
    v33 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = v25;
  v13 = re::internal::GeomConnectivityNonManifold::faceIncidentEdges(*a1, *((_DWORD *)a1[6] + v9), v25);
  v14 = v13;
  if (v13)
  {
    v15 = 0;
    while (1)
    {
      v9 = v25[v15];
      v16 = *a1;
      v17 = (unsigned int *)*((_QWORD *)*a1 + 8);
      if ((unint64_t)v17 <= v9)
        break;
      if ((*(_BYTE *)(*((_QWORD *)v16 + 10) + v9) & 8) == 0)
      {
        re::internal::GeomConnectivityNonManifold::edgeVertices((uint64_t)v16, v25[v15], v34);
        v18 = *((_DWORD *)a1 + 2);
        if (v34[0] == v18 || v34[1] == v18)
        {
          *(_QWORD *)&v36 = 0;
          *(_QWORD *)&v35 = 0;
          memset(v34, 0, sizeof(v34));
          DWORD2(v35) = 0;
          re::internal::GeomConnectivityNonManifold::edgeIncidentFaces(*a1, v9, (uint64_t)v34);
          if ((_QWORD)v35)
          {
            v20 = (unsigned int *)v36;
            v21 = 4 * v35;
            do
            {
              v22 = *v20++;
              v21 -= 4;
            }
            while (v21);
          }
          if (*(_QWORD *)v34)
          {
            if ((_QWORD)v36)
              (*(void (**)(void))(**(_QWORD **)v34 + 40))();
          }
        }
      }
      if (++v15 == v14)
        return 1;
    }
    v24 = 0;
    v38 = 0u;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)v34 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 797;
    v30 = 2048;
    v31 = v9;
    v32 = 2048;
    v33 = v17;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    *(_QWORD *)v25 = 0;
    v38 = 0u;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)v34 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v26 = 136315906;
    v27 = "operator[]";
    v28 = 1024;
    v29 = 789;
    v30 = 2048;
    v31 = v9;
    v32 = 2048;
    v33 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
  return 1;
}

uint64_t re::internal::GeomConnectivityNonManifold::faceIncidentEdges(re::internal::GeomConnectivityNonManifold *this, int a2, unsigned int *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;

  v3 = (4 * a2);
  v4 = *((_QWORD *)this + 53);
  if (v4 <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_10;
  }
  v5 = *((_QWORD *)this + 55);
  *a3 = *(_DWORD *)(v5 + 4 * v3);
  v6 = v3 | 1;
  if (v4 <= v6)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  a3[1] = *(_DWORD *)(v5 + 4 * v6);
  v7 = v3 | 2;
  if (v4 <= v7)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  a3[2] = *(_DWORD *)(v5 + 4 * v7);
  v8 = v3 | 3;
  if (v4 <= v8)
    goto LABEL_12;
  v9 = *(_DWORD *)(v5 + 4 * v8);
  a3[3] = v9;
  if (v9 == -1)
    return 3;
  else
    return 4;
}

uint64_t re::internal::GeomConnectivityNonManifold::edgeIncidentFaces(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    v5 = a2 - 1;
    v6 = a1[38];
    if (v6 <= v5)
      goto LABEL_17;
    v7 = *(_DWORD *)(a1[40] + 4 * v5);
  }
  else
  {
    v7 = 0;
    v6 = a1[38];
  }
  if (v6 <= a2)
  {
LABEL_16:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_17:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = *(_DWORD *)(a1[40] + 4 * a2);
  re::DynamicArray<float>::resize(a3, v8 - v7);
  result = v8 - v7;
  if (v8 > v7)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 32);
    if (a1[43] <= (unint64_t)v7)
      v13 = v7;
    else
      v13 = a1[43];
    while (v13 - v7 != v10)
    {
      if (v11 <= v10)
        goto LABEL_15;
      *(_DWORD *)(v12 + 4 * v10) = *(_DWORD *)(a1[45] + 4 * v7 + 4 * v10);
      if ((_DWORD)result == (_DWORD)++v10)
        return result;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_15:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  return result;
}

uint64_t re::internal::GeomConnectivityNonManifold::edgeVertices(uint64_t this, int a2, unsigned int *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = (2 * a2);
  v4 = *(_QWORD *)(this + 264);
  if (v4 <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(this + 280);
  *a3 = *(_DWORD *)(v5 + 4 * v3);
  v6 = v3 | 1;
  if (v4 <= v6)
    goto LABEL_5;
  a3[1] = *(_DWORD *)(v5 + 4 * v6);
  return this;
}

BOOL re::internal::writeGeomMeshToStream(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  re::internal::GeomAttributeManager *v30;
  int v31;
  uint64_t v32;
  unsigned int i;
  const re::GeomAttribute *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  _BYTE v84[16];
  int v85;
  const char *v86;
  __int16 v87;
  int v88;
  __int16 v89;
  unint64_t v90;
  __int16 v91;
  unint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v4 = 0;
  v98 = *MEMORY[0x24BDAC8D0];
  LODWORD(v93) = 538446081;
  while (v4 <= 3)
  {
    v5 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v4, 4 - v4);
    v4 += v5;
    if (!v5)
      return 0;
  }
  v6 = 0;
  LODWORD(v93) = 1;
  while (v6 <= 3)
  {
    v7 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v6, 4 - v6);
    v6 += v7;
    if (!v7)
      return 0;
  }
  v8 = 0;
  LODWORD(v93) = 1213416781;
  while (v8 <= 3)
  {
    v9 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v8, 4 - v8);
    v8 += v9;
    if (!v9)
      return 0;
  }
  v10 = 0;
  LODWORD(v93) = *(_DWORD *)(a1 + 16);
  while (v10 <= 3)
  {
    v11 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v10, 4 - v10);
    v10 += v11;
    if (!v11)
      return 0;
  }
  v12 = 0;
  LODWORD(v93) = 1280066883;
  while (v12 <= 3)
  {
    v13 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v12, 4 - v12);
    v12 += v13;
    if (!v13)
      return 0;
  }
  v14 = 0;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = v15;
  LODWORD(v93) = v15;
  while (v14 <= 3)
  {
    v17 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v14, 4 - v14);
    v14 += v17;
    if (!v17)
      return 0;
  }
  if ((_DWORD)v15)
  {
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)(a1 + 40);
      if (v22 <= v21)
      {
        v97 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v85 = 136315906;
        v86 = "operator[]";
        v87 = 1024;
        v88 = 797;
        v89 = 2048;
        v90 = v21;
        v91 = 2048;
        v92 = v22;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v23 = 0;
      v24 = *(_QWORD *)(a1 + 56) + v20;
      do
      {
        *(_DWORD *)&v84[v23] = *(_DWORD *)(v24 + v23);
        v23 += 4;
      }
      while (v23 != 16);
      v25 = 0;
      while (v25 <= 0xF)
      {
        v26 = (*(uint64_t (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)a2 + 16))(a2, &v84[v25], 16 - v25);
        v25 += v26;
        if (!v26)
          return 0;
      }
      ++v21;
      v20 += 16;
    }
    while (v21 != v16);
  }
  v27 = 0;
  LODWORD(v93) = 1279607621;
  while (v27 <= 3)
  {
    v28 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v27, 4 - v27);
    v27 += v28;
    if (!v28)
      return 0;
  }
    return 0;
  v29 = 0;
  v30 = (re::internal::GeomAttributeManager *)(a1 + 64);
  v31 = *(_DWORD *)(a1 + 640);
  LODWORD(v93) = v31;
  while (v29 <= 3)
  {
    v32 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v29, 4 - v29);
    v29 += v32;
    if (!v32)
      return 0;
  }
  if (v31)
  {
    for (i = 0; i != v83; ++i)
    {
      v35 = re::internal::GeomAttributeManager::attributeByIndex(v30, i);
      v36 = 0;
      LODWORD(v93) = 1381258305;
      while (v36 <= 3)
      {
        v37 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v36, 4 - v36);
        v36 += v37;
        if (!v37)
          return 0;
      }
      v38 = 0;
      v39 = *(unsigned __int8 *)(v35 + 17);
      if (v39 < 0xB)
        v40 = v39 + 1;
      else
        v40 = 0;
      LOBYTE(v93) = v40;
      while (!v38)
      {
        v38 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v93, 1);
        if (!v38)
          return 0;
      }
      v41 = 0;
      v42 = *(unsigned __int8 *)(v35 + 16);
      if (v42 < 5)
        v43 = v42 + 1;
      else
        v43 = 0;
      LOBYTE(v93) = v43;
      while (!v41)
      {
        v41 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v93, 1);
        if (!v41)
          return 0;
      }
      v83 = v31;
      v44 = 0;
      LODWORD(v93) = 1280066883;
      while (v44 <= 3)
      {
        v45 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v44, 4 - v44);
        v44 += v45;
        if (!v45)
          return 0;
      }
      if (*(_BYTE *)(v35 + 16) == 3)
      {
        v46 = 0;
        v82 = re::internal::accessFaceVaryingAttributeSubmesh((re::internal *)v35, v34);
        v48 = *(_QWORD *)(v82 + 24);
        v80 = v48;
        LODWORD(v93) = v48;
        while (v46 <= 3)
        {
          v49 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v46, 4 - v46);
          v46 += v49;
          if (!v49)
            return 0;
        }
        if ((_DWORD)v48)
        {
          v52 = 0;
          v81 = 0;
          do
          {
            v53 = *(_QWORD *)(v82 + 24);
            if (v53 <= v81)
            {
              v97 = 0u;
              v95 = 0u;
              v96 = 0u;
              v93 = 0u;
              v94 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v85 = 136315906;
              v86 = "operator[]";
              v87 = 1024;
              v88 = 797;
              v89 = 2048;
              v90 = v81;
              v91 = 2048;
              v92 = v53;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_159:
              re::internal::assertLog((re::internal *)4, v47, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
              _os_crash();
              __break(1u);
LABEL_160:
              re::internal::assertLog((re::internal *)4, v70, "assertion failure: '%s' (%s:line %i) Attempt to write out malformed GeomAttribute", "!\"Unreachable code\"", "writeGeomAttrbuteToStream", 372);
              _os_crash();
              __break(1u);
              JUMPOUT(0x2258CC8D4);
            }
            v54 = 0;
            v55 = *(_QWORD *)(v82 + 40) + v52;
            do
            {
              *(_DWORD *)&v84[v54] = *(_DWORD *)(v55 + v54);
              v54 += 4;
            }
            while (v54 != 16);
            v56 = 0;
            while (v56 <= 0xF)
            {
              v57 = (*(uint64_t (**)(uint64_t, _BYTE *, unint64_t))(*(_QWORD *)a2 + 16))(a2, &v84[v56], 16 - v56);
              v56 += v57;
              if (!v57)
                return 0;
            }
            v52 += 16;
            ++v81;
          }
          while (v81 != v80);
          v58 = 0;
          v59 = (_QWORD *)(v82 + 64);
          while (2)
          {
            LODWORD(v93) = v58;
            v60 = *(unsigned __int8 *)(v82 + 60);
            if (v60 == 2)
            {
              v62 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find(v59, (unsigned int *)&v93);
              if (v62 != -1)
              {
                v61 = *(_DWORD *)(*(_QWORD *)(v82 + 72) + 8 * v62 + 4);
                goto LABEL_100;
              }
            }
            else
            {
              if (v60 != 1)
              {
                if (*(_BYTE *)(v82 + 60))
                  goto LABEL_159;
                if (v58 >= *(unsigned int *)v59)
                  v61 = -1;
                else
                  v61 = v58;
LABEL_100:
                v63 = 0;
                LODWORD(v93) = v61;
                while (v63 <= 3)
                {
                  v64 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v63, 4 - v63);
                  v63 += v64;
                  if (!v64)
                    return 0;
                }
                if (++v58 == v80)
                  goto LABEL_105;
                continue;
              }
              if (*(_QWORD *)(v82 + 80) > v58)
              {
                v61 = *(_DWORD *)(*(_QWORD *)(v82 + 96) + 4 * v58);
                goto LABEL_100;
              }
            }
            break;
          }
          v61 = -1;
          goto LABEL_100;
        }
      }
      else
      {
        v50 = 0;
        LODWORD(v93) = 0;
        while (v50 < 4)
        {
          v51 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v50, 4 - v50);
          v50 += v51;
          if (!v51)
            return 0;
        }
      }
LABEL_105:
      v65 = 0;
      LODWORD(v93) = 1279607621;
      while (v65 <= 3)
      {
        v66 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v65, 4 - v65);
        v65 += v66;
        if (!v66)
          return 0;
      }
        return 0;
      v67 = 0;
      LODWORD(v93) = 1279350337;
      while (v67 <= 3)
      {
        v68 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v67, 4 - v67);
        v67 += v68;
        if (!v68)
          return 0;
      }
      v69 = 0;
      LODWORD(v93) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
      while (v69 <= 3)
      {
        v71 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v69, 4 - v69);
        v69 += v71;
        if (!v71)
          return 0;
      }
      switch(*(_BYTE *)(v35 + 17))
      {
        case 0:
            return 0;
          goto LABEL_140;
        case 1:
            return 0;
          goto LABEL_140;
        case 2:
            return 0;
          goto LABEL_140;
        case 3:
            return 0;
          goto LABEL_140;
        case 4:
            return 0;
          goto LABEL_140;
        case 5:
            return 0;
          goto LABEL_140;
        case 6:
            return 0;
          goto LABEL_140;
        case 7:
            return 0;
          goto LABEL_140;
        case 8:
            return 0;
          goto LABEL_140;
        case 9:
            return 0;
          goto LABEL_140;
        case 0xA:
            return 0;
LABEL_140:
          v72 = 0;
          LODWORD(v93) = 1096171845;
          break;
        default:
          goto LABEL_160;
      }
      while (v72 <= 3)
      {
        v73 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v72, 4 - v72);
        v72 += v73;
        if (!v73)
          return 0;
      }
      v74 = 0;
      LODWORD(v93) = 1414807877;
      while (v74 <= 3)
      {
        v75 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v74, 4 - v74);
        v74 += v75;
        if (!v75)
          return 0;
      }
      v31 = v83;
    }
  }
  v76 = 0;
  LODWORD(v93) = 0;
  while (v76 <= 3)
  {
    v77 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v76, 4 - v76);
    v76 += v77;
    if (!v77)
      return 0;
  }
  v78 = 0;
  LODWORD(v93) = 1397050693;
  do
  {
    v18 = v78 > 3;
    if (v78 > 3)
      break;
    v79 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v93 + v78, 4 - v78);
    v78 += v79;
  }
  while (v79);
  return v18;
}

BOOL re::internal::`anonymous namespace'::writeCStringHelper(char *__s, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;

  v4 = 0;
  v15 = 1162690894;
  while (v4 <= 3)
  {
    v5 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v15 + v4, 4 - v4);
    v4 += v5;
    if (!v5)
      return 0;
  }
  if (__s)
    v6 = strlen(__s) + 1;
  else
    v6 = 0;
  v7 = 0;
  v16 = v6;
  while (v7 <= 3)
  {
    v8 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v16 + v7, 4 - v7);
    v7 += v8;
    if (!v8)
      return 0;
  }
  if (v6)
  {
    v9 = 0;
    while (v6 > v9)
    {
      v10 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, &__s[v9], v6 - v9);
      v9 += v10;
      if (!v10)
        return 0;
    }
  }
  v13 = 0;
  v17 = 1296125509;
  do
  {
    v11 = v13 > 3;
    if (v13 > 3)
      break;
    v14 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v17 + v13, 4 - v13);
    v13 += v14;
  }
  while (v14);
  return v11;
}

uint64_t re::internal::readGeomMeshFromStream(re::internal *this, re::GeomMesh *a2, re::StreamReader *a3)
{
  uint64_t v5;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v22;
  unsigned int v24;
  unsigned int v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v40;
  re::GeomAttribute *v41;
  re *v43;
  unsigned __int8 v45;
  int v46;
  unsigned int v47;
  _QWORD v48[3];
  int v49;
  char *__s;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _BYTE v59[112];
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  unsigned __int8 v67;
  unsigned __int8 v68;
  uint64_t v69;
  _BYTE v70[28];
  __int16 v71;
  _QWORD v72[2];
  __int128 v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  _BYTE v77[28];
  __int16 v78;
  _QWORD v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v55);
  v54 = 0;
  v5 = 0;
  if ((*(uint64_t (**)(re::GeomMesh *, int *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v54, 4) == 4
    && v54 == 538446081)
  {
    v53 = 0;
    v5 = 0;
    if ((*(uint64_t (**)(re::GeomMesh *, int *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v53, 4) == 4
      && v53 == 1)
    {
      LODWORD(v80) = 0;
      v5 = 0;
      if ((*(uint64_t (**)(re::GeomMesh *, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v80, 4) == 4
        && (_DWORD)v80 == 1213416781)
      {
        v52 = 0;
        v5 = 0;
        if ((*(uint64_t (**)(re::GeomMesh *, unsigned int *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v52, 4) == 4)
        {
          v55 = v52;
          v60 = v52;
          if (v61)
          {
            v9 = v62;
            v10 = 8 * v61;
            do
            {
              v11 = *v9++;
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 72))(v11, v60);
              v10 -= 8;
            }
            while (v10);
          }
          LODWORD(v80) = 0;
          v5 = 0;
          if ((*(uint64_t (**)(re::GeomMesh *, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v80, 4) == 4
            && (_DWORD)v80 == 1280066883)
          {
            v51 = 0;
            v5 = 0;
            if ((*(uint64_t (**)(re::GeomMesh *, unsigned int *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v51, 4) == 4)
            {
              v13 = v51;
              re::DynamicArray<re::GeomCell4>::resize(&v56, v51);
              v63 = v13;
              if (v64)
              {
                v14 = v65;
                v15 = 8 * v64;
                do
                {
                  v16 = *v14++;
                  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 72))(v16, v63);
                  v15 -= 8;
                }
                while (v15);
              }
              if (v51)
              {
                for (i = 0; i < v51; *(_OWORD *)(v58 + 16 * i++) = v73)
                {
                  v18 = 0;
                  while (v18 <= 0xF)
                  {
                    v19 = (*(uint64_t (**)(re::GeomMesh *, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)&v73 + v18, 16 - v18);
                    v18 += v19;
                    if (!v19)
                    {
                      v5 = 0;
                      goto LABEL_141;
                    }
                  }
                  v20 = v57;
                  if (v57 <= i)
                  {
                    *(_QWORD *)v70 = 0;
                    v83 = 0u;
                    v84 = 0u;
                    v81 = 0u;
                    v82 = 0u;
                    v80 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v77 = 136315906;
                    *(_QWORD *)&v77[4] = "operator[]";
                    *(_WORD *)&v77[12] = 1024;
                    *(_DWORD *)&v77[14] = 789;
                    *(_WORD *)&v77[18] = 2048;
                    *(_QWORD *)&v77[20] = i;
                    v78 = 2048;
                    v79[0] = v20;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                  }
                }
              }
              LODWORD(v80) = 0;
              v5 = 0;
              if ((*(uint64_t (**)(re::GeomMesh *, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v80, 4) != 4|| (_DWORD)v80 != 1279607621)
              {
                goto LABEL_141;
              }
              __s = 0;
              memset(v48, 0, sizeof(v48));
              v49 = 0;
              v5 = 0;
              {
                v47 = 0;
                v5 = 0;
                if ((*(uint64_t (**)(re::GeomMesh *, unsigned int *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v47, 4) == 4)
                {
                  if (v47)
                  {
                    v22 = 0;
                    while (1)
                    {
                      LODWORD(v80) = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v80, 4) != 4|| (_DWORD)v80 != 1381258305)
                      {
                        goto LABEL_145;
                      }
                      v68 = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, unsigned __int8 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v68, 1) != 1)goto LABEL_145;
                      v24 = v68 - 1;
                      if (v24 > 0xA)
                        goto LABEL_145;
                      v67 = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, unsigned __int8 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v67, 1) != 1)goto LABEL_145;
                      v25 = v67 - 1;
                      if (v25 > 4)
                        goto LABEL_145;
                      LODWORD(v80) = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v80, 4) != 4|| (_DWORD)v80 != 1280066883)
                      {
                        goto LABEL_145;
                      }
                      v45 = v24;
                      v46 = v22;
                      v66 = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, unsigned int *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v66, 4) != 4)goto LABEL_145;
                      *(_QWORD *)((char *)v79 + 2) = 0;
                      memset(v77, 0, sizeof(v77));
                      v76 = 0;
                      v74 = 0;
                      v73 = 0uLL;
                      v75 = 0;
                      if (v66)
                      {
                        re::DynamicArray<float>::resize((uint64_t)v77, v66);
                        re::DynamicArray<re::GeomCell4>::resize(&v73, v66);
                        if (v66)
                        {
                          v27 = 0;
                          while (2)
                          {
                            v28 = v74;
                            if (v74 <= v27)
                            {
                              v69 = 0;
                              v83 = 0u;
                              v84 = 0u;
                              v81 = 0u;
                              v82 = 0u;
                              v80 = 0u;
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v70 = 136315906;
                              *(_QWORD *)&v70[4] = "operator[]";
                              *(_WORD *)&v70[12] = 1024;
                              *(_DWORD *)&v70[14] = 789;
                              *(_WORD *)&v70[18] = 2048;
                              *(_QWORD *)&v70[20] = v27;
                              v71 = 2048;
                              v72[0] = v28;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
                              JUMPOUT(0x2258CD4E0);
                            }
                            v29 = 0;
                            v30 = v76 + 16 * v27;
                            while (v29 <= 0xF)
                            {
                              v31 = (*(uint64_t (**)(re::GeomMesh *, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v30 + v29, 16 - v29);
                              v29 += v31;
                              if (!v31)
                              {
LABEL_75:
                                v37 = 0;
                                goto LABEL_128;
                              }
                            }
                            ++v27;
                            v32 = v66;
                            if (v27 < v66)
                              continue;
                            break;
                          }
                        }
                        else
                        {
                          v32 = 0;
                        }
                        v33 = 0;
                        v34 = *(_QWORD *)((char *)v79 + 2);
                        v35 = 4 * v32;
                        while (v35 > v33)
                        {
                          v36 = (*(uint64_t (**)(re::GeomMesh *, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v34 + v33, v35 - v33);
                          v33 += v36;
                          if (!v36)
                            goto LABEL_75;
                        }
                      }
                      LODWORD(v80) = 0;
                      v37 = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v80, 4) == 4&& (_DWORD)v80 == 1279607621)
                      {
                        break;
                      }
LABEL_128:
                      if ((_QWORD)v73 && v76)
                        (*(void (**)(_QWORD))(*(_QWORD *)v73 + 40))(v73);
                      if (*(_QWORD *)v77 && *(_QWORD *)((char *)v79 + 2))
                        (*(void (**)(_QWORD))(**(_QWORD **)v77 + 40))(*(_QWORD *)v77);
                      if (!v37)
                        goto LABEL_145;
                      v22 = v46 + 1;
                      if (v46 + 1 >= v47)
                        goto LABEL_136;
                    }
                    *(_QWORD *)((char *)v72 + 2) = 0;
                    memset(v70, 0, sizeof(v70));
                    v37 = 0;
                    {
                      LODWORD(v80) = 0;
                      v37 = 0;
                      if ((*(uint64_t (**)(re::GeomMesh *, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v80, 4) == 4&& (_DWORD)v80 == 1279350337)
                      {
                        LODWORD(v69) = 0;
                        v37 = 0;
                        if ((*(uint64_t (**)(re::GeomMesh *, uint64_t *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v69, 4) == 4)
                        {
                          if ((v25 & 0x1F) == 3)
                          {
                            re::internal::GeomBaseTopology::GeomBaseTopology((uint64_t)&v80, v69, (uint64_t)&v73);
                            v40 = re::internal::GeomBaseMesh::addFaceVaryingAttribute((_anonymous_namespace_ *)&v55, *(const char **)((char *)v72 + 2), v45, (uint64_t)&v80, (uint64_t)v77);
                            if (*((_QWORD *)&v80 + 1) && *((_QWORD *)&v82 + 1))
                              (*(void (**)(_QWORD))(**((_QWORD **)&v80 + 1) + 40))(*((_QWORD *)&v80 + 1));
                          }
                          else
                          {
                            v41 = re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v59, *(char **)((char *)v72 + 2), v25, v45);
                            v40 = (uint64_t)v41;
                            if (v25 == 4)
                            {
                              (*(void (**)(re::GeomAttribute *, _QWORD))(*(_QWORD *)v41 + 24))(v41, v69);
LABEL_95:
                              switch(*(_BYTE *)(v40 + 17))
                              {
                                case 0:
                                  break;
                                case 1:
                                  break;
                                case 2:
                                    goto LABEL_124;
                                  break;
                                case 3:
                                    goto LABEL_124;
                                  break;
                                case 4:
                                    goto LABEL_124;
                                  break;
                                case 5:
                                  break;
                                case 6:
                                  break;
                                case 7:
                                  break;
                                case 8:
                                  break;
                                case 9:
                                  break;
                                case 0xA:
                                  break;
                                default:
                                  goto LABEL_124;
                              }
                              LODWORD(v80) = 0;
                              v37 = 0;
                              if ((*(uint64_t (**)(re::GeomMesh *, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v80, 4) == 4&& (_DWORD)v80 == 1096171845)
                              {
                                LODWORD(v80) = 0;
                                v37 = (*(uint64_t (**)(re::GeomMesh *, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v80, 4) == 4&& (_DWORD)v80 == 1414807877;
                              }
                              goto LABEL_125;
                            }
                          }
                          if (v40)
                            goto LABEL_95;
LABEL_124:
                          v37 = 0;
                        }
                      }
                    }
LABEL_125:
                    if (*(_QWORD *)v70 && *(_QWORD *)((char *)v72 + 2))
                      (*(void (**)(_QWORD))(**(_QWORD **)v70 + 40))(*(_QWORD *)v70);
                    goto LABEL_128;
                  }
LABEL_136:
                  *(_DWORD *)v77 = 0;
                  v5 = 0;
                  if ((*(uint64_t (**)(re::GeomMesh *, _BYTE *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v77, 4) == 4)
                  {
                    LODWORD(v80) = 0;
                    v5 = 0;
                    if ((*(uint64_t (**)(re::GeomMesh *, __int128 *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v80, 4) == 4&& (_DWORD)v80 == 1397050693)
                    {
                      if (re::internal::GeomBaseMesh::areAllFacesValid((re::internal::GeomBaseMesh *)&v55))
                      {
                        v43 = (re *)re::GeomMesh::operator=((uint64_t)this, &v55);
                        re::GeomMesh::setName(v43, __s);
                        v5 = 1;
                      }
                      else
                      {
LABEL_145:
                        v5 = 0;
                      }
                    }
                  }
                }
              }
              if (v48[0] && __s)
                (*(void (**)(void))(*(_QWORD *)v48[0] + 40))();
            }
          }
        }
      }
    }
  }
LABEL_141:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v59);
  if (v56 && v58)
    (*(void (**)(void))(*(_QWORD *)v56 + 40))();
  return v5;
}

uint64_t re::internal::`anonymous namespace'::readCStringHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  _OWORD v25[5];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  LODWORD(v25[0]) = 0;
  v4 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v25, 4);
  result = 0;
  if (v4 == 4 && LODWORD(v25[0]) == 1162690894)
  {
    v15 = 0;
    v7 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a2 + 16))(a2, &v15, 4);
    result = 0;
    if (v7 == 4)
    {
      v8 = v15;
      if (!v15)
        goto LABEL_15;
      re::DynamicArray<BOOL>::resize(a1, v15);
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 32);
      while (v8 > v9)
      {
        result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v10 + v9, v8 - v9);
        v9 += result;
        if (!result)
          return result;
      }
      v11 = v15 - 1;
      v12 = *(_QWORD *)(a1 + 16);
      if (v12 <= v11)
      {
        v16 = 0;
        memset(v25, 0, sizeof(v25));
        v14 = v12;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v17 = 136315906;
        v18 = "operator[]";
        v19 = 1024;
        v20 = 789;
        v21 = 2048;
        v22 = v11;
        v23 = 2048;
        v24 = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + v11))
      {
        return 0;
      }
      else
      {
LABEL_15:
        LODWORD(v25[0]) = 0;
        return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v25, 4) == 4
            && LODWORD(v25[0]) == 1296125509;
      }
    }
  }
  return result;
}

uint64_t re::internal::GeomBaseMesh::areAllFacesValid(re::internal::GeomBaseMesh *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t i;
  unsigned int v7;
  int v9;
  unsigned int v10;
  re::internal::GeomAttributeContainer *v11;
  re::internal *v12;
  const re::GeomAttribute *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t j;
  unsigned int v32;
  uint64_t result;
  re::internal::GeomAttributeContainer *v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = v3 + 16 * v2;
    v5 = *(_DWORD *)this;
    do
    {
      for (i = 0; i != 12; i += 4)
      {
        if (*(_DWORD *)(v3 + i) < v5)
        {
          v7 = *(_DWORD *)(v3 + 12);
          if (v7 < v5 || v7 == -1)
            continue;
        }
        return 0;
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  v9 = *((_DWORD *)this + 102);
  if (!v9)
    return 1;
  v10 = 0;
  v11 = (re::internal::GeomBaseMesh *)((char *)this + 384);
  while (1)
  {
    v12 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex(v11, v10);
    v14 = re::internal::accessFaceVaryingAttributeSubmesh(v12, v13);
    v16 = *(_QWORD *)(v14 + 24);
    v17 = v16 <= v2;
    if (v16 > v2)
      return v17;
    v18 = v14;
    if ((_DWORD)v16)
      break;
    if (v16)
    {
      v28 = *(_QWORD *)(v14 + 40);
      v29 = v28 + 16 * v16;
LABEL_36:
      v30 = *(_DWORD *)v18;
      do
      {
        for (j = 0; j != 12; j += 4)
        {
          if (*(_DWORD *)(v28 + j) >= v30)
            return 0;
          v32 = *(_DWORD *)(v28 + 12);
          if (v32 >= v30 && v32 != -1)
            return 0;
        }
        v28 += 16;
      }
      while (v28 != v29);
    }
    if (++v10 == v9)
      return v17;
  }
  v35 = v11;
  v36 = v10;
  v19 = 0;
  v20 = (unsigned int *)(v14 + 64);
  v21 = *(_QWORD *)(v14 + 24);
  v22 = 12;
  while (1)
  {
    LODWORD(v37) = v19;
    v23 = *(unsigned __int8 *)(v18 + 60);
    if (v23 == 2)
    {
      v25 = re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::find((_QWORD *)(v18 + 64), (unsigned int *)&v37);
      if (v25 == -1)
        goto LABEL_27;
      v24 = *(_DWORD *)(*(_QWORD *)(v18 + 72) + 8 * v25 + 4);
      goto LABEL_28;
    }
    if (v23 != 1)
      break;
    if (*(_QWORD *)(v18 + 80) <= v19)
    {
LABEL_27:
      v24 = -1;
      goto LABEL_28;
    }
    v24 = *(_DWORD *)(*(_QWORD *)(v18 + 96) + 4 * v19);
LABEL_28:
    if (v24 > v2)
      return 0;
    if (*((_QWORD *)this + 3) <= (unint64_t)v24)
    {
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_52:
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v26 = *(_QWORD *)(v18 + 24);
    if (v26 <= v19)
      goto LABEL_52;
    v27 = *(_DWORD *)(*((_QWORD *)this + 5) + 16 * v24 + 12) != -1;
    v28 = *(_QWORD *)(v18 + 40);
    if (((v27 ^ (*(_DWORD *)(v28 + v22) == -1)) & 1) == 0)
      return 0;
    ++v19;
    v22 += 16;
    if (v21 == v19)
    {
      v29 = v28 + 16 * v26;
      v10 = v36;
      v11 = v35;
      goto LABEL_36;
    }
  }
  if (!*(_BYTE *)(v18 + 60))
  {
    if (v19 >= *v20)
      v24 = -1;
    else
      v24 = v19;
    goto LABEL_28;
  }
  re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Invalid mapping type -- indicative of a use after free or memory corruption", "!\"Unreachable code\"", "value", 680);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::internal::`anonymous namespace'::writeAttributeValues<signed char>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  uint64_t v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v5 = re::internal::GeomTypedAttribute<signed char>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v6 = 0;
  do
  {
    v7 = v4 <= v6;
    if (v4 <= v6)
      break;
    v8 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + v6, v4 - v6);
    v6 += v8;
  }
  while (v8);
  return v7;
}

uint64_t re::internal::`anonymous namespace'::writeAttributeValues<short>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v5 = re::internal::GeomTypedAttribute<short>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v6 = 0;
  v7 = 2 * v4;
  do
  {
    v8 = v7 <= v6;
    if (v7 <= v6)
      break;
    v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

uint64_t re::internal::`anonymous namespace'::writeAttributeValues<int>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v5 = re::internal::GeomTypedAttribute<int>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v6 = 0;
  v7 = 4 * v4;
  do
  {
    v8 = v7 <= v6;
    if (v7 <= v6)
      break;
    v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

uint64_t re::internal::`anonymous namespace'::writeAttributeValues<double>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v5 = re::internal::GeomTypedAttribute<double>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v6 = 0;
  v7 = 8 * v4;
  do
  {
    v8 = v7 <= v6;
    if (v7 <= v6)
      break;
    v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

uint64_t re::internal::`anonymous namespace'::writeAttributeValues<re::Vector2<float>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  _OWORD v16[5];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v5 = re::internal::GeomTypedAttribute<double>::operator[](a1, 0);
    v6 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (v4)
      goto LABEL_3;
LABEL_17:
    v14 = 1;
    return v14 & 1;
  }
  v6 = 0;
  v5 = 0;
  if (!v4)
    goto LABEL_17;
LABEL_3:
  v7 = 0;
  v8 = 0;
  do
  {
    if (v7 == v6)
    {
      memset(v16, 0, sizeof(v16));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v9 = 0;
    v10 = (_DWORD *)(v5 + 8 * v7);
    LODWORD(v16[0]) = *v10;
    while (v9 <= 3)
    {
      v11 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)v16 + v9, 4 - v9);
      v9 += v11;
      if (!v11)
      {
LABEL_15:
        v14 = v8;
        return v14 & 1;
      }
    }
    v12 = 0;
    LODWORD(v16[0]) = v10[1];
    while (v12 <= 3)
    {
      v13 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)v16 + v12, 4 - v12);
      v12 += v13;
      if (!v13)
        goto LABEL_15;
    }
    ++v7;
    v14 = 1;
    v8 = v7 >= v4;
  }
  while (v7 != v4);
  return v14 & 1;
}

uint64_t re::internal::`anonymous namespace'::writeAttributeValues<re::Vector3<float>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
    v6 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (v4)
      goto LABEL_3;
LABEL_21:
    v16 = 1;
    return v16 & 1;
  }
  v6 = 0;
  v5 = 0;
  if (!v4)
    goto LABEL_21;
LABEL_3:
  v7 = 0;
  v8 = 0;
  do
  {
    if (v7 == v6)
    {
      memset(v18, 0, sizeof(v18));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v9 = 0;
    v10 = (_DWORD *)(v5 + 16 * v7);
    LODWORD(v18[0]) = *v10;
    while (v9 <= 3)
    {
      v11 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)v18 + v9, 4 - v9);
      v9 += v11;
      if (!v11)
      {
LABEL_19:
        v16 = v8;
        return v16 & 1;
      }
    }
    v12 = 0;
    LODWORD(v18[0]) = v10[1];
    while (v12 <= 3)
    {
      v13 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)v18 + v12, 4 - v12);
      v12 += v13;
      if (!v13)
        goto LABEL_19;
    }
    v14 = 0;
    LODWORD(v18[0]) = v10[2];
    while (v14 <= 3)
    {
      v15 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)v18 + v14, 4 - v14);
      v14 += v15;
      if (!v15)
        goto LABEL_19;
    }
    ++v7;
    v16 = 1;
    v8 = v7 >= v4;
  }
  while (v7 != v4);
  return v16 & 1;
}

uint64_t re::internal::`anonymous namespace'::writeAttributeValues<re::Vector4<float>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD v20[5];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
    v6 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (v4)
      goto LABEL_3;
LABEL_25:
    v18 = 1;
    return v18 & 1;
  }
  v6 = 0;
  v5 = 0;
  if (!v4)
    goto LABEL_25;
LABEL_3:
  v7 = 0;
  v8 = 0;
  do
  {
    if (v7 == v6)
    {
      memset(v20, 0, sizeof(v20));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v9 = 0;
    v10 = (_DWORD *)(v5 + 16 * v7);
    LODWORD(v20[0]) = *v10;
    while (v9 <= 3)
    {
      v11 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)v20 + v9, 4 - v9);
      v9 += v11;
      if (!v11)
      {
LABEL_23:
        v18 = v8;
        return v18 & 1;
      }
    }
    v12 = 0;
    LODWORD(v20[0]) = v10[1];
    while (v12 <= 3)
    {
      v13 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)v20 + v12, 4 - v12);
      v12 += v13;
      if (!v13)
        goto LABEL_23;
    }
    v14 = 0;
    LODWORD(v20[0]) = v10[2];
    while (v14 <= 3)
    {
      v15 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)v20 + v14, 4 - v14);
      v14 += v15;
      if (!v15)
        goto LABEL_23;
    }
    v16 = 0;
    LODWORD(v20[0]) = v10[3];
    while (v16 <= 3)
    {
      v17 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 16))(a2, (char *)v20 + v16, 4 - v16);
      v16 += v17;
      if (!v17)
        goto LABEL_23;
    }
    ++v7;
    v18 = 1;
    v8 = v7 >= v4;
  }
  while (v7 != v4);
  return v18 & 1;
}

uint64_t re::internal::GeomBaseTopology::GeomBaseTopology(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  v5 = *(_QWORD *)(a3 + 8);
  *v4 = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v6;
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = v7;
  ++*(_DWORD *)(a3 + 24);
  ++*(_DWORD *)(a1 + 32);
  if (!*(_QWORD *)(a1 + 16))
    re::DynamicArray<re::BlendNode>::setCapacity(v4, 1uLL);
  return a1;
}

uint64_t re::internal::`anonymous namespace'::readAttributeValues<signed char>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  uint64_t v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v5 = re::internal::GeomTypedAttribute<signed char>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v6 = 0;
  do
  {
    v7 = v4 <= v6;
    if (v4 <= v6)
      break;
    v8 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + v6, v4 - v6);
    v6 += v8;
  }
  while (v8);
  return v7;
}

uint64_t re::internal::`anonymous namespace'::readAttributeValues<short>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v5 = re::internal::GeomTypedAttribute<short>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v6 = 0;
  v7 = 2 * v4;
  do
  {
    v8 = v7 <= v6;
    if (v7 <= v6)
      break;
    v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

uint64_t re::internal::`anonymous namespace'::readAttributeValues<int>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v5 = re::internal::GeomTypedAttribute<float>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v6 = 0;
  v7 = 4 * v4;
  do
  {
    v8 = v7 <= v6;
    if (v7 <= v6)
      break;
    v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

uint64_t re::internal::`anonymous namespace'::readAttributeValues<double>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v5 = re::internal::GeomTypedAttribute<double>::operator[](a1, 0);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    return 1;
  v6 = 0;
  v7 = 8 * v4;
  do
  {
    v8 = v7 <= v6;
    if (v7 <= v6)
      break;
    v9 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + v6, v7 - v6);
    v6 += v9;
  }
  while (v9);
  return v8;
}

BOOL re::internal::`anonymous namespace'::readAttributeValues<re::Vector2<float>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v5 = re::internal::GeomTypedAttribute<double>::operator[](a1, 0);
    v6 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (v4)
      goto LABEL_3;
    return 1;
  }
  v6 = 0;
  v5 = 0;
  if (!v4)
    return 1;
LABEL_3:
  v7 = 0;
  v8 = 0;
  do
  {
    if (v6 == v7)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5, 4) != 4)
      break;
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + 4, 4) != 4)
      break;
    v8 = ++v7 >= (unint64_t)v4;
    v5 += 8;
  }
  while (v4 != v7);
  return v8;
}

BOOL re::internal::`anonymous namespace'::readAttributeValues<re::Vector3<float>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
    v6 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (v4)
      goto LABEL_3;
    return 1;
  }
  v6 = 0;
  v5 = 0;
  if (!v4)
    return 1;
LABEL_3:
  v7 = 0;
  v8 = 0;
  do
  {
    if (v6 == v7)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5, 4) != 4)
      break;
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + 4, 4) != 4)
      break;
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + 8, 4) != 4)
      break;
    v8 = ++v7 >= (unint64_t)v4;
    v5 += 16;
  }
  while (v4 != v7);
  return v8;
}

BOOL re::internal::`anonymous namespace'::readAttributeValues<re::Vector4<float>>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v5 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](a1, 0);
    v6 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    if (v4)
      goto LABEL_3;
    return 1;
  }
  v6 = 0;
  v5 = 0;
  if (!v4)
    return 1;
LABEL_3:
  v7 = 0;
  v8 = 0;
  do
  {
    if (v6 == v7)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5, 4) != 4)
      break;
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + 4, 4) != 4)
      break;
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + 8, 4) != 4)
      break;
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5 + 12, 4) != 4)
      break;
    v8 = ++v7 >= (unint64_t)v4;
    v5 += 16;
  }
  while (v4 != v7);
  return v8;
}

uint64_t *re::internal::build3dGlyph(uint64_t a1, CTFontRef font, CGGlyph glyph, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const CGPath *PathForGlyph;
  const CGPath *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  BOOL v40;
  unint64_t v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  uint64_t isPointInsidePolygon;
  uint64_t v47;
  char *v48;
  unint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v65;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  _QWORD *v83;
  _QWORD *v84;
  char *v85;
  __int128 v86;
  int64x2_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  char *v91;
  void *v92;
  char *v93;
  int64_t v94;
  unint64_t v95;
  int64_t v96;
  unint64_t v97;
  char *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  __int128 v112;
  int64x2_t v113;
  uint64_t v114;
  uint64_t Constraints;
  NSObject *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  _DWORD *v122;
  _DWORD *v123;
  uint64_t v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  void *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  _DWORD *v138;
  _DWORD *v139;
  char *v140;
  uint64_t v141;
  int v142;
  float v143;
  int v144;
  int v145;
  unint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  int v150;
  unsigned int v151;
  re::internal *v152;
  const re::GeomAttribute *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  re *v169;
  char *v170;
  uint64_t *v171;
  uint64_t v172;
  unsigned int v173;
  __int128 v174;
  uint64_t v175;
  _BYTE *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  _DWORD *v181;
  int v182;
  uint64_t v183;
  int32x2_t v184;
  _QWORD *v185;
  unsigned int v186;
  int32x2_t *v187;
  __int32 v188;
  int32x2_t v189;
  int v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int *v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  float32x2_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float v210;
  unsigned int v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  float32x2_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  float32x2_t v220;
  float v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  float32x2_t v226;
  float32x2_t v227;
  float v228;
  float v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int v236;
  uint64_t v237;
  int32x4_t v238;
  int32x4_t v239;
  BOOL v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int *v249;
  _DWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  float32x4_t v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  int32x4_t v259;
  float32x2_t v260;
  float32x2_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  BOOL v271;
  uint64_t v272;
  int v273;
  unsigned int v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unsigned int *v281;
  _DWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _OWORD *v287;
  float32x4_t v288;
  unsigned int v289;
  uint64_t v290;
  int32x4_t v291;
  float32x2_t v292;
  float32x2_t v293;
  re::GeomAttribute *v294;
  re *v295;
  re *v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *result;
  int v306;
  unint64_t v307;
  int v308;
  int v309;
  int v310;
  int64x2_t v311;
  int64x2_t v312;
  int32x4_t v313;
  unint64_t v314;
  unint64_t v316;
  float v317;
  unint64_t v319;
  int v320;
  int v321;
  unint64_t v322;
  int v323;
  int v324;
  _anonymous_namespace_ *v325;
  int32x4_t v326;
  _anonymous_namespace_ *v327;
  _anonymous_namespace_ *v328;
  void *v329[2];
  uint64_t v330;
  uint64_t *v331;
  unint64_t v332;
  unint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t info[2];
  unint64_t v337;
  int v338;
  unint64_t v339;
  void *__p[2];
  _QWORD v341[2];
  int v342[4];
  _QWORD v343[2];
  float32x2_t v344;
  uint64_t v345;
  _BYTE v346[120];
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  char *v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  int v356;
  __int128 v357;
  uint64_t v358[14];
  int v359;
  _BYTE v360[40];
  uint64_t v361;
  unint64_t v362;
  int v363;
  __int128 v364;
  __int128 v365;
  int v366;
  __int128 v367;
  __int128 v368;
  int v369;
  __int128 v370;
  __int128 v371;
  int v372;
  uint64_t v373;
  _BYTE v374[28];
  __int16 v375;
  _BYTE v376[10];
  uint64_t v377;
  char *__s[6];
  __int128 v379;
  int64x2_t v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t *v386;
  unsigned int v387;
  uint64_t v388;
  uint64_t *v389;
  _BYTE v390[24];
  int v391;
  uint8_t buf[48];
  __int128 v393;
  __int128 v394;
  _BYTE v395[28];
  __int16 v396;
  _BYTE v397[10];
  _BYTE v398[28];
  __int16 v399;
  _BYTE v400[10];
  _BYTE v401[28];
  __int16 v402;
  uint64_t v403;
  uint64_t v404;

  v404 = *MEMORY[0x24BDAC8D0];
  v339 = 0;
  v337 = 0;
  info[0] = 0;
  info[1] = 0;
  v338 = 0;
  if (font && (PathForGlyph = CTFontCreatePathForGlyph(font, glyph, 0)) != 0)
  {
    v12 = PathForGlyph;
    CGPathRelease(v12);
    v13 = v339;
    v14 = v339 + 176 * v337;
    if (v337)
    {
      v15 = 126 - 2 * __clz(v337);
      goto LABEL_7;
    }
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v15 = 0;
LABEL_7:
  if (!v337)
    goto LABEL_45;
  v18 = *(_QWORD *)(v339 + 144);
  *(_QWORD *)v346 = *(_QWORD *)(v339 + 160);
  *(_QWORD *)&v346[8] = v18;
  re::computeSignedAreaOf2DPolygon(v346, v16, v17);
  if (*(float *)&v17 < 0.0)
  {
    v327 = (_anonymous_namespace_ *)v337;
    if (v337)
    {
      v5 = 0;
      v8 = (unint64_t)&v346[80];
      v9 = (unint64_t)&v347;
      v19 = (unint64_t)&v346[88];
      v4 = (unint64_t)&v347 + 8;
      do
      {
        v20 = v337;
        if (v337 <= v5)
          goto LABEL_656;
        v20 = v339;
        v21 = v339 + 176 * v5;
        memset(&v346[48], 0, 28);
        v350 = 0;
        memset(&v346[80], 0, 36);
        v347 = 0u;
        v348 = 0u;
        LODWORD(v349) = 0;
        v346[0] = *(_BYTE *)v21;
        v22 = *(_OWORD *)(v21 + 32);
        *(_OWORD *)&v346[16] = *(_OWORD *)(v21 + 16);
        *(_OWORD *)&v346[32] = v22;
        *(_QWORD *)&v376[2] = 0;
        memset(v374, 0, sizeof(v374));
        v23 = *(_QWORD *)(v21 + 144);
        v6 = v21 + 144;
        re::DynamicArray<unsigned long>::resize((uint64_t)v374, v23);
        if (*(_QWORD *)v6)
        {
          v24 = 0;
          v7 = *(_QWORD *)v6 - 1;
          do
          {
            v10 = *(_QWORD *)&v374[16];
            if (*(_QWORD *)&v374[16] <= v7)
              goto LABEL_608;
            *(_QWORD *)(*(_QWORD *)&v376[2] + 8 * v7--) = *(_QWORD *)(*(_QWORD *)(v20 + 176 * v5 + 160) + 8 * v24++);
          }
          while (v24 < *(_QWORD *)v6);
        }
        re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v347 + 8, (uint64_t)v374);
        if (*(_QWORD *)v374 && *(_QWORD *)&v376[2])
          (*(void (**)(void))(**(_QWORD **)v374 + 40))();
        *(_QWORD *)&v376[2] = 0;
        memset(v374, 0, sizeof(v374));
        v25 = v20 + 176 * v5;
        v26 = *(_QWORD *)(v25 + 64);
        v7 = v25 + 64;
        re::DynamicArray<BOOL>::resize((uint64_t)v374, v26);
        if (*(_QWORD *)v7)
        {
          v27 = 0;
          v6 = *(_QWORD *)v7 - 1;
          do
          {
            v10 = *(_QWORD *)&v374[16];
            if (*(_QWORD *)&v374[16] <= v6)
              goto LABEL_609;
            *(_BYTE *)(*(_QWORD *)&v376[2] + v6--) = *(_BYTE *)(*(_QWORD *)(v20 + 176 * v5 + 80) + v27++);
          }
          while (v27 < *(_QWORD *)v7);
        }
        re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v346[48], (uint64_t)v374);
        if (*(_QWORD *)v374 && *(_QWORD *)&v376[2])
          (*(void (**)(void))(**(_QWORD **)v374 + 40))();
        v28 = *(_QWORD *)(v20 + 176 * v5 + 104);
        v6 = v28;
        if ((_DWORD)v28)
        {
          re::DynamicArray<unsigned long>::resize((uint64_t)&v346[88], v28);
          v20 = 0;
          v29 = 0;
          v30 = v347;
          v31 = *(_QWORD *)&v346[80];
          do
          {
            v7 = *(_QWORD *)&v346[104];
            if (*(_QWORD *)&v346[104] <= v20)
              goto LABEL_610;
            *(_QWORD *)(v30 + 8 * v20) = v29;
            v7 = *(_QWORD *)&v346[64];
            if (*(_QWORD *)&v346[64] <= v20)
            {
LABEL_611:
              *(_QWORD *)v360 = 0;
              v380 = 0u;
              v379 = 0u;
              memset(__s, 0, sizeof(__s));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v374 = 136315906;
              *(_QWORD *)&v374[4] = "operator[]";
              *(_WORD *)&v374[12] = 1024;
              *(_DWORD *)&v374[14] = 789;
              *(_WORD *)&v374[18] = 2048;
              *(_QWORD *)&v374[20] = v20;
              v375 = 2048;
              *(_QWORD *)v376 = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_612:
              *(_QWORD *)v395 = 0;
              v380 = 0u;
              v379 = 0u;
              memset(__s, 0, sizeof(__s));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v398 = 136315906;
              *(_QWORD *)&v398[4] = "operator[]";
              *(_WORD *)&v398[12] = 1024;
              *(_DWORD *)&v398[14] = 789;
              *(_WORD *)&v398[18] = 2048;
              *(_QWORD *)&v398[20] = 0;
              v399 = 2048;
              *(_QWORD *)v400 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_613:
              *(_QWORD *)v401 = 0;
              v380 = 0u;
              v379 = 0u;
              memset(__s, 0, sizeof(__s));
              v213 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v395 = 136315906;
              *(_QWORD *)&v395[4] = "operator[]";
              *(_WORD *)&v395[12] = 1024;
              *(_DWORD *)&v395[14] = 797;
              *(_WORD *)&v395[18] = 2048;
              *(_QWORD *)&v395[20] = v6;
              v396 = 2048;
              *(_QWORD *)v397 = v9;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_614:
              *(_QWORD *)v401 = 0;
              v380 = 0u;
              v379 = 0u;
              memset(__s, 0, sizeof(__s));
              v4 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v395 = 136315906;
              *(_QWORD *)&v395[4] = "operator[]";
              *(_WORD *)&v395[12] = 1024;
              *(_DWORD *)&v395[14] = 609;
              *(_WORD *)&v395[18] = 2048;
              *(_QWORD *)&v395[20] = v213;
              v396 = 2048;
              *(_QWORD *)v397 = v19;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_615;
            }
            v29 += *(unsigned __int8 *)(v31 + v20++);
          }
          while (v6 != v20);
        }
        v20 = v337;
        if (v337 <= v5)
          goto LABEL_658;
        v32 = (_OWORD *)(v339 + 176 * v5);
        v33 = *(_OWORD *)v346;
        v34 = *(_OWORD *)&v346[32];
        v32[1] = *(_OWORD *)&v346[16];
        v32[2] = v34;
        *v32 = v33;
        re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(v32 + 3), (uint64_t)&v346[48]);
        re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v32 + 88, (uint64_t)&v346[88]);
        re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v32 + 8), (uint64_t)&v347 + 8);
        if (*((_QWORD *)&v347 + 1))
        {
          v16 = (uint64_t)v350;
          if (v350)
            (*(void (**)(void))(**((_QWORD **)&v347 + 1) + 40))();
          v350 = 0;
          v348 = 0uLL;
          *((_QWORD *)&v347 + 1) = 0;
          LODWORD(v349) = v349 + 1;
        }
        if (*(_QWORD *)&v346[88])
        {
          v16 = v347;
          if ((_QWORD)v347)
            (*(void (**)(void))(**(_QWORD **)&v346[88] + 40))();
          *(_QWORD *)&v347 = 0;
          memset(&v346[88], 0, 24);
          ++*(_DWORD *)&v346[112];
        }
        if (*(_QWORD *)&v346[48])
        {
          v16 = *(_QWORD *)&v346[80];
          if (*(_QWORD *)&v346[80])
            (*(void (**)(void))(**(_QWORD **)&v346[48] + 40))();
        }
        ++v5;
      }
      while ((_anonymous_namespace_ *)v5 != v327);
      goto LABEL_44;
    }
LABEL_45:
    v35 = 0;
    goto LABEL_46;
  }
LABEL_44:
  v35 = v337;
LABEL_46:
  *(_QWORD *)&v376[2] = 0;
  memset(v374, 0, sizeof(v374));
  *(_QWORD *)&v360[32] = 0;
  memset(v360, 0, 28);
  if (v35)
  {
    v19 = 0;
    v20 = 1;
    v5 = 176;
    do
    {
      v4 = v337;
      if (v337 <= v19)
        goto LABEL_619;
      v36 = v339 + 176 * v19;
      v37 = *(_QWORD *)(v36 + 160);
      v38 = *(_QWORD *)(v36 + 144);
      *(_QWORD *)v346 = v37;
      *(_QWORD *)&v346[8] = v38;
      re::computeSignedAreaOf2DPolygon(v346, v16, v17);
      if (*(float *)&v17 != 0.0)
      {
        v4 = v337;
        if (*(float *)&v17 <= 0.0)
        {
          if (v337 <= v19)
            goto LABEL_645;
          v39 = v360;
        }
        else
        {
          if (v337 <= v19)
            goto LABEL_644;
          v39 = v374;
        }
      }
      v19 = v20;
      v40 = v35 > v20;
      v20 = (v20 + 1);
    }
    while (v40);
    v41 = *(_QWORD *)&v360[16];
    v35 = *(_QWORD *)&v374[16];
  }
  else
  {
    v41 = 0;
  }
  *(_QWORD *)&buf[32] = 0;
  memset(buf, 0, 28);
  v335 = 0;
  v333 = 0;
  v331 = 0;
  v332 = 0;
  v334 = 0;
  v346[0] = 0;
  re::DynamicArray<BOOL>::resize(buf, v41, v346);
  if (v35)
  v325 = *(_anonymous_namespace_ **)&v374[16];
  if (*(_QWORD *)&v374[16])
  {
    v20 = 0;
    v6 = (unint64_t)&v351 + 8;
    v326 = vdupq_n_s32(0x7F800000u);
    v7 = 176;
    do
    {
      v346[0] = 1;
      *(_QWORD *)&v42 = 0x7F0000007FLL;
      *((_QWORD *)&v42 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)&v346[16] = v326;
      *(_OWORD *)&v346[32] = v42;
      memset(&v346[48], 0, 28);
      LOBYTE(v42) = 0;
      BYTE4(v42) = 0;
      BYTE8(v42) = 0;
      BYTE12(v42) = 0;
      *(_OWORD *)&v346[80] = v42;
      *(_OWORD *)&v346[96] = v42;
      *(_DWORD *)&v346[112] = 0;
      v347 = v42;
      v348 = v42;
      LODWORD(v349) = 0;
      v350 = 0;
      *((_QWORD *)&v353 + 1) = 0;
      v352 = 0uLL;
      *((_QWORD *)&v351 + 1) = 0;
      LODWORD(v353) = 0;
      v19 = *(_QWORD *)&v374[16];
      if (*(_QWORD *)&v374[16] <= v20)
        goto LABEL_634;
      v328 = (_anonymous_namespace_ *)v20;
      v43 = (_OWORD *)(*(_QWORD *)&v376[2] + 176 * v20);
      v45 = v43[1];
      v44 = v43[2];
      *(_OWORD *)v346 = *v43;
      *(_OWORD *)&v346[16] = v45;
      *(_OWORD *)&v346[32] = v44;
      re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v346[48], (uint64_t)(v43 + 3));
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v346[88], (uint64_t)v43 + 88);
      isPointInsidePolygon = re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v347 + 8, (uint64_t)(v43 + 8));
      v19 = *(_QWORD *)&v360[16];
      if (!*(_QWORD *)&v360[16])
        goto LABEL_79;
      v10 = 0;
      do
      {
        v20 = *(_QWORD *)&buf[16];
        if (*(_QWORD *)&buf[16] <= v10)
          goto LABEL_606;
        if (*(_BYTE *)(*(_QWORD *)&buf[32] + v10))
          goto LABEL_78;
        v20 = *(_QWORD *)&v360[32];
        if (!*(_QWORD *)(*(_QWORD *)&v360[32] + 176 * v10 + 144))
          goto LABEL_612;
        v5 = *(_QWORD *)(*(_QWORD *)&v360[32] + 176 * v10 + 160);
        __s[0] = v350;
        __s[1] = *((char **)&v348 + 1);
        if (!(_DWORD)isPointInsidePolygon)
          goto LABEL_78;
        v9 = *((_QWORD *)&v352 + 1);
        if (!*((_QWORD *)&v352 + 1))
          goto LABEL_76;
        v4 = 0;
        v8 = 0;
        do
        {
          v47 = *((_QWORD *)&v352 + 1);
          if (*((_QWORD *)&v352 + 1) <= v8)
          {
            *(_QWORD *)v395 = 0;
            v380 = 0u;
            v379 = 0u;
            memset(__s, 0, sizeof(__s));
            v19 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v398 = 136315906;
            *(_QWORD *)&v398[4] = "operator[]";
            *(_WORD *)&v398[12] = 1024;
            *(_DWORD *)&v398[14] = 789;
            *(_WORD *)&v398[18] = 2048;
            *(_QWORD *)&v398[20] = v8;
            v399 = 2048;
            *(_QWORD *)v400 = v47;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_605:
            *(_QWORD *)v398 = 0;
            v380 = 0u;
            v379 = 0u;
            memset(__s, 0, sizeof(__s));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "operator[]";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 797;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v6;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v9;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_606:
            *(_QWORD *)v395 = 0;
            v380 = 0u;
            v379 = 0u;
            memset(__s, 0, sizeof(__s));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v398 = 136315906;
            *(_QWORD *)&v398[4] = "operator[]";
            *(_WORD *)&v398[12] = 1024;
            *(_DWORD *)&v398[14] = 789;
            *(_WORD *)&v398[18] = 2048;
            *(_QWORD *)&v398[20] = v10;
            v399 = 2048;
            *(_QWORD *)v400 = v20;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_607:
            v345 = 0;
            v394 = 0u;
            v393 = 0u;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v398 = 136315906;
            *(_QWORD *)&v398[4] = "operator[]";
            *(_WORD *)&v398[12] = 1024;
            *(_DWORD *)&v398[14] = 797;
            *(_WORD *)&v398[18] = 2048;
            *(_QWORD *)&v398[20] = v4;
            v399 = 2048;
            *(_QWORD *)v400 = v5;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_608:
            *(_QWORD *)buf = 0;
            v380 = 0u;
            v379 = 0u;
            memset(__s, 0, sizeof(__s));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v360 = 136315906;
            *(_QWORD *)&v360[4] = "operator[]";
            *(_WORD *)&v360[12] = 1024;
            *(_DWORD *)&v360[14] = 789;
            *(_WORD *)&v360[18] = 2048;
            *(_QWORD *)&v360[20] = v7;
            *(_WORD *)&v360[28] = 2048;
            *(_QWORD *)&v360[30] = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_609:
            *(_QWORD *)buf = 0;
            v380 = 0u;
            v379 = 0u;
            memset(__s, 0, sizeof(__s));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v360 = 136315906;
            *(_QWORD *)&v360[4] = "operator[]";
            *(_WORD *)&v360[12] = 1024;
            *(_DWORD *)&v360[14] = 789;
            *(_WORD *)&v360[18] = 2048;
            *(_QWORD *)&v360[20] = v6;
            *(_WORD *)&v360[28] = 2048;
            *(_QWORD *)&v360[30] = v10;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_610:
            *(_QWORD *)v360 = 0;
            v380 = 0u;
            v379 = 0u;
            memset(__s, 0, sizeof(__s));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v374 = 136315906;
            *(_QWORD *)&v374[4] = "operator[]";
            *(_WORD *)&v374[12] = 1024;
            *(_DWORD *)&v374[14] = 789;
            *(_WORD *)&v374[18] = 2048;
            *(_QWORD *)&v374[20] = v20;
            v375 = 2048;
            *(_QWORD *)v376 = v7;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_611;
          }
          v48 = *(char **)(*((_QWORD *)&v353 + 1) + v4 + 144);
          __s[0] = *(char **)(*((_QWORD *)&v353 + 1) + v4 + 160);
          __s[1] = v48;
          if (++v8 >= v9)
            break;
          v4 += 176;
        }
        while ((isPointInsidePolygon & 1) == 0);
        if ((isPointInsidePolygon & 1) == 0)
        {
LABEL_76:
          v20 = *(_QWORD *)&buf[16];
          if (*(_QWORD *)&buf[16] <= v10)
            goto LABEL_623;
          *(_BYTE *)(*(_QWORD *)&buf[32] + v10) = 1;
        }
LABEL_78:
        ++v10;
      }
      while (v10 != v19);
LABEL_79:
      v5 = v333 + 1;
      _CF = v333 < v332 || v332 >= v5;
      if (!_CF)
      {
        if (v331)
        {
          v62 = 8;
          if (v332)
            v62 = 2 * v332;
          if (v62 <= v5)
            v63 = v333 + 1;
          else
            v63 = v62;
        }
        else
        {
          ++v334;
        }
      }
      v50 = v333;
      v51 = v335 + 224 * v333;
      v52 = *(_OWORD *)v346;
      v53 = *(_OWORD *)&v346[32];
      *(_OWORD *)(v51 + 16) = *(_OWORD *)&v346[16];
      *(_OWORD *)(v51 + 32) = v53;
      *(_OWORD *)v51 = v52;
      *(_QWORD *)(v51 + 80) = 0;
      *(_QWORD *)(v51 + 56) = 0;
      *(_QWORD *)(v51 + 64) = 0;
      *(_QWORD *)(v51 + 48) = 0;
      *(_DWORD *)(v51 + 72) = 0;
      *(_QWORD *)(v51 + 48) = *(_QWORD *)&v346[48];
      *(_QWORD *)&v346[48] = 0;
      *(_QWORD *)(v51 + 56) = *(_QWORD *)&v346[56];
      *(_QWORD *)&v346[56] = 0;
      v54 = *(_QWORD *)(v51 + 64);
      *(_QWORD *)(v51 + 64) = *(_QWORD *)&v346[64];
      *(_QWORD *)&v346[64] = v54;
      v55 = *(_QWORD *)(v51 + 80);
      *(_QWORD *)(v51 + 80) = *(_QWORD *)&v346[80];
      *(_QWORD *)&v346[80] = v55;
      ++*(_DWORD *)&v346[72];
      ++*(_DWORD *)(v51 + 72);
      *(_QWORD *)(v51 + 120) = 0;
      *(_QWORD *)(v51 + 96) = 0;
      *(_QWORD *)(v51 + 104) = 0;
      *(_QWORD *)(v51 + 88) = 0;
      *(_DWORD *)(v51 + 112) = 0;
      *(_QWORD *)(v51 + 88) = *(_QWORD *)&v346[88];
      *(_QWORD *)&v346[88] = 0;
      *(_QWORD *)(v51 + 96) = *(_QWORD *)&v346[96];
      *(_QWORD *)&v346[96] = 0;
      v56 = *(_QWORD *)(v51 + 104);
      *(_QWORD *)(v51 + 104) = *(_QWORD *)&v346[104];
      *(_QWORD *)&v346[104] = v56;
      v57 = *(_QWORD *)(v51 + 120);
      *(_QWORD *)(v51 + 120) = v347;
      *(_QWORD *)&v347 = v57;
      ++*(_DWORD *)&v346[112];
      ++*(_DWORD *)(v51 + 112);
      *(_QWORD *)(v51 + 160) = 0;
      *(_QWORD *)(v51 + 136) = 0;
      *(_QWORD *)(v51 + 144) = 0;
      *(_QWORD *)(v51 + 128) = 0;
      *(_DWORD *)(v51 + 152) = 0;
      *(_QWORD *)(v51 + 128) = *((_QWORD *)&v347 + 1);
      *((_QWORD *)&v347 + 1) = 0;
      *(_QWORD *)(v51 + 136) = v348;
      *(_QWORD *)&v348 = 0;
      v58 = *(_QWORD *)(v51 + 144);
      *(_QWORD *)(v51 + 144) = *((_QWORD *)&v348 + 1);
      *((_QWORD *)&v348 + 1) = v58;
      v59 = *(char **)(v51 + 160);
      *(_QWORD *)(v51 + 160) = v350;
      v350 = v59;
      LODWORD(v349) = v349 + 1;
      ++*(_DWORD *)(v51 + 152);
      *(_QWORD *)(v51 + 208) = 0;
      *(_QWORD *)(v51 + 184) = 0;
      *(_QWORD *)(v51 + 192) = 0;
      *(_QWORD *)(v51 + 176) = 0;
      *(_DWORD *)(v51 + 200) = 0;
      *(_QWORD *)(v51 + 176) = *((_QWORD *)&v351 + 1);
      *((_QWORD *)&v351 + 1) = 0;
      *(_QWORD *)(v51 + 184) = v352;
      *(_QWORD *)&v352 = 0;
      v60 = *(_QWORD *)(v51 + 192);
      *(_QWORD *)(v51 + 192) = *((_QWORD *)&v352 + 1);
      *((_QWORD *)&v352 + 1) = v60;
      v61 = *(_QWORD *)(v51 + 208);
      *(_QWORD *)(v51 + 208) = *((_QWORD *)&v353 + 1);
      *((_QWORD *)&v353 + 1) = v61;
      LODWORD(v353) = v353 + 1;
      ++*(_DWORD *)(v51 + 200);
      v333 = v50 + 1;
      ++v334;
      if (*((_QWORD *)&v347 + 1))
      {
        if (v350)
          (*(void (**)(void))(**((_QWORD **)&v347 + 1) + 40))();
        v350 = 0;
        v348 = 0uLL;
        *((_QWORD *)&v347 + 1) = 0;
        LODWORD(v349) = v349 + 1;
      }
      if (*(_QWORD *)&v346[88])
      {
        if ((_QWORD)v347)
          (*(void (**)(void))(**(_QWORD **)&v346[88] + 40))();
        *(_QWORD *)&v347 = 0;
        memset(&v346[88], 0, 24);
        ++*(_DWORD *)&v346[112];
      }
      if (*(_QWORD *)&v346[48] && *(_QWORD *)&v346[80])
        (*(void (**)(void))(**(_QWORD **)&v346[48] + 40))();
      v20 = (unint64_t)v328 + 1;
    }
    while ((_anonymous_namespace_ *)((char *)v328 + 1) != v325);
  }
  if (*(_QWORD *)buf && *(_QWORD *)&buf[32])
    (*(void (**)(void))(**(_QWORD **)buf + 40))();
  if (*(_BYTE *)(a4 + 8))
    _ZF = *(_BYTE *)(a4 + 9) == 0;
  else
    _ZF = 1;
  v65 = !_ZF;
  v310 = v65;
  v20 = (unint64_t)&v374[8];
  bzero(v374, 0x2D0uLL);
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v374[8]);
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)&v377, "vertexPosition", 1, 7);
  if (!v333)
    goto LABEL_581;
  v4 = 0;
  v10 = 0xAAAAAAAAAAAAAAALL;
  v7 = (unint64_t)v341;
  v313 = vdupq_n_s32(0x7F800000u);
  v312 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v311 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v6 = 24;
  __asm { FMOV            V8.2S, #3.0 }
  v307 = v333;
  do
  {
    v19 = v333;
    if (v333 <= v4)
      goto LABEL_680;
    v69 = v335;
    v70 = *(_DWORD *)a4;
    v314 = v4;
    v71 = v335 + 224 * v4;
    *(int32x4_t *)v360 = v313;
    *(_QWORD *)&v72 = 0x7F0000007FLL;
    *((_QWORD *)&v72 + 1) = 0x7F0000007FLL;
    *(_OWORD *)&v360[16] = v72;
    v361 = 0;
    v362 = 0;
    *(_QWORD *)&v360[32] = 0;
    v363 = 0;
    v373 = 0;
    LOBYTE(v72) = 0;
    BYTE4(v72) = 0;
    BYTE8(v72) = 0;
    BYTE12(v72) = 0;
    v364 = v72;
    v365 = v72;
    v366 = 0;
    v367 = v72;
    v368 = v72;
    v369 = 0;
    v370 = v72;
    v371 = v72;
    _CF = v70 >= 2;
    v73 = v70 - 2;
    if (_CF)
      v4 = v73;
    else
      v4 = 0;
    v372 = 0;
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v360[32], (uint64_t)&v346[32]);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v364 + 8, (uint64_t)&v346[72]);
    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v370 + 8, (uint64_t)&v346[112]);
    *(_OWORD *)&v360[16] = *(_OWORD *)&v346[16];
    *(_OWORD *)v360 = *(_OWORD *)v346;
    v74 = *(_QWORD *)(v71 + 192);
    v19 = v71 + 192;
    v75 = v74 + 1;
    if ((unint64_t)v368 < v74 + 1)
      re::DynamicArray<int>::setCapacity((_QWORD *)&v367 + 1, v75);
    LODWORD(__s[0]) = v362;
    re::DynamicArray<int>::add((_QWORD *)&v367 + 1, __s);
    if (*(_QWORD *)&v346[112])
    {
      if (*((_QWORD *)&v348 + 1))
        (*(void (**)(void))(**(_QWORD **)&v346[112] + 40))();
      *((_QWORD *)&v348 + 1) = 0;
      v347 = 0uLL;
      *(_QWORD *)&v346[112] = 0;
      LODWORD(v348) = v348 + 1;
    }
    if (*(_QWORD *)&v346[72])
    {
      if (*(_QWORD *)&v346[104])
        (*(void (**)(void))(**(_QWORD **)&v346[72] + 40))();
      *(_QWORD *)&v346[104] = 0;
      memset(&v346[72], 0, 24);
      ++*(_DWORD *)&v346[96];
    }
    if (*(_QWORD *)&v346[32] && *(_QWORD *)&v346[64])
      (*(void (**)(void))(**(_QWORD **)&v346[32] + 40))();
    v76 = *(_QWORD *)v19;
    if (*(_QWORD *)v19)
    {
      v5 = 0;
      v20 = v69 + 224 * v314 + 208;
      while (1)
      {
        v6 = *(_QWORD *)v19;
        if (*(_QWORD *)v19 <= v5)
          goto LABEL_635;
        LODWORD(__s[0]) = *(_DWORD *)(v370 + 4 * *((_QWORD *)&v368 + 1) - 4) + *(_DWORD *)&v346[48];
        re::DynamicArray<int>::add((_QWORD *)&v367 + 1, __s);
        v7 = *(unsigned int *)(v373 + 4 * *((_QWORD *)&v371 + 1) - 4);
        v8 = DWORD2(v347);
        if ((unint64_t)v371 < *((_QWORD *)&v371 + 1) + v8)
          re::DynamicArray<int>::setCapacity((_QWORD *)&v370 + 1, *((_QWORD *)&v371 + 1) + v8);
        if (v8)
          break;
LABEL_142:
        v7 = (unint64_t)v341;
        v6 = 24;
        if (*(_QWORD *)&v346[112])
        {
          if (*((_QWORD *)&v348 + 1))
            (*(void (**)(void))(**(_QWORD **)&v346[112] + 40))();
          *((_QWORD *)&v348 + 1) = 0;
          v347 = 0uLL;
          *(_QWORD *)&v346[112] = 0;
          LODWORD(v348) = v348 + 1;
        }
        if (*(_QWORD *)&v346[72])
        {
          if (*(_QWORD *)&v346[104])
            (*(void (**)(void))(**(_QWORD **)&v346[72] + 40))();
          *(_QWORD *)&v346[104] = 0;
          memset(&v346[72], 0, 24);
          ++*(_DWORD *)&v346[96];
        }
        if (*(_QWORD *)&v346[32] && *(_QWORD *)&v346[64])
          (*(void (**)(void))(**(_QWORD **)&v346[32] + 40))();
        if (++v5 == v76)
          goto LABEL_154;
      }
      v6 = 0;
      while (1)
      {
        v9 = *((_QWORD *)&v347 + 1);
        if (*((_QWORD *)&v347 + 1) <= v6)
          goto LABEL_605;
        LODWORD(__s[0]) = *(_DWORD *)(*((_QWORD *)&v348 + 1) + 4 * v6) + v7;
        re::DynamicArray<int>::add((_QWORD *)&v370 + 1, __s);
        if (v8 == ++v6)
          goto LABEL_142;
      }
    }
LABEL_154:
    v77 = v362;
    v19 = *((_QWORD *)&v368 + 1);
    memset(v395, 0, 24);
    v330 = 0;
    v329[0] = 0;
    v329[1] = 0;
    memset(v401, 0, 24);
    memset(v342, 0, sizeof(v342));
    v343[0] = 0;
    memset(__s, 0, 25);
    *(int64x2_t *)&__s[4] = v312;
    v379 = xmmword_2261326C0;
    v380 = v311;
    v381 = 0u;
    v382 = 0u;
    v383 = 0u;
    v346[0] = 0;
    memset(&v346[8], 0, 112);
    v347 = 0u;
    v348 = 0u;
    v349 = 0;
    v351 = 0u;
    v352 = 0u;
    v353 = 0u;
    v354 = 0u;
    v355 = 0u;
    LODWORD(v350) = 1065353216;
    v356 = 1065353216;
    v357 = 0u;
    memset(v358, 0, sizeof(v358));
    v359 = 1065353216;
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::LoadData(v346, (uint64_t)&v382 + 8);
    std::vector<geo::math::Matrix<double,3,1>>::resize((uint64_t)v401, v77);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v343[0] - *(_QWORD *)v342) >> 3) < v19)
    {
      if (v19 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_689;
      v78 = (*(_QWORD *)&v342[2] - *(_QWORD *)v342) / 24;
      *(_QWORD *)&buf[32] = v343;
      v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v343, v19);
      v80 = &v79[24 * v78];
      *(_QWORD *)buf = v79;
      *(_QWORD *)&buf[8] = v80;
      v82 = &v79[24 * v81];
      *(_QWORD *)&buf[16] = v80;
      *(_QWORD *)&buf[24] = v82;
      v83 = *(_QWORD **)&v342[2];
      v84 = *(_QWORD **)v342;
      if (*(_QWORD *)&v342[2] == *(_QWORD *)v342)
      {
        v87 = vdupq_n_s64(*(unint64_t *)&v342[2]);
        v85 = &v79[24 * v78];
      }
      else
      {
        v85 = &v79[24 * v78];
        do
        {
          *((_QWORD *)v85 - 3) = 0;
          *((_QWORD *)v85 - 2) = 0;
          v85 -= 24;
          *((_QWORD *)v85 + 2) = 0;
          v86 = *(_OWORD *)(v83 - 3);
          v83 -= 3;
          *(_OWORD *)v85 = v86;
          *((_QWORD *)v85 + 2) = v83[2];
          *v83 = 0;
          v83[1] = 0;
          v83[2] = 0;
        }
        while (v83 != v84);
        v87 = *(int64x2_t *)v342;
        v82 = *(char **)&buf[24];
        v80 = *(char **)&buf[16];
      }
      *(_QWORD *)v342 = v85;
      *(_QWORD *)&v342[2] = v80;
      *(int64x2_t *)&buf[8] = v87;
      v88 = v343[0];
      v343[0] = v82;
      *(_QWORD *)&buf[24] = v88;
      *(_QWORD *)buf = v87.i64[0];
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)buf);
    }
    if (v19)
    {
      v20 = 0;
      v89 = 0;
      while (1)
      {
        v4 = *((_QWORD *)&v368 + 1);
        if (v89)
        {
          v5 = v89 - 1;
          if (*((_QWORD *)&v368 + 1) <= v5)
            goto LABEL_651;
          v5 = *(unsigned int *)(v370 + 4 * v5);
        }
        else
        {
          v5 = 0;
        }
        if (*((_QWORD *)&v368 + 1) <= v20)
          goto LABEL_641;
        v20 = *(unsigned int *)(v370 + 4 * v20);
        __p[1] = 0;
        __p[0] = 0;
        v341[0] = 0;
        std::vector<unsigned long>::reserve(__p, (v20 - v5));
        if (v20 > v5)
          break;
LABEL_189:
        v101 = *(_QWORD *)&v342[2];
        if (*(_QWORD *)&v342[2] >= v343[0])
        {
          v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v342[2] - *(_QWORD *)v342) >> 3);
          v103 = v102 + 1;
          if (v102 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_689;
          if (0x5555555555555556 * ((uint64_t)(v343[0] - *(_QWORD *)v342) >> 3) > v103)
            v103 = 0x5555555555555556 * ((uint64_t)(v343[0] - *(_QWORD *)v342) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v343[0] - *(_QWORD *)v342) >> 3) >= 0x555555555555555)
            v104 = 0xAAAAAAAAAAAAAAALL;
          else
            v104 = v103;
          *(_QWORD *)&buf[32] = v343;
          v105 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v343, v104);
          v106 = &v105[24 * v102];
          *(_QWORD *)buf = v105;
          *(_QWORD *)&buf[8] = v106;
          *(_QWORD *)&buf[24] = &v105[24 * v107];
          *((_QWORD *)v106 + 1) = 0;
          *((_QWORD *)v106 + 2) = 0;
          *(_QWORD *)v106 = 0;
          *(_OWORD *)v106 = *(_OWORD *)__p;
          *((_QWORD *)v106 + 2) = v341[0];
          __p[1] = 0;
          __p[0] = 0;
          v341[0] = 0;
          v108 = v106 + 24;
          *(_QWORD *)&buf[16] = v106 + 24;
          v109 = *(_QWORD **)&v342[2];
          v110 = *(_QWORD **)v342;
          v111 = *(_QWORD *)&buf[8];
          if (*(_QWORD *)&v342[2] == *(_QWORD *)v342)
          {
            v113 = vdupq_n_s64(*(unint64_t *)&v342[2]);
          }
          else
          {
            do
            {
              *(_QWORD *)(v111 - 24) = 0;
              *(_QWORD *)(v111 - 16) = 0;
              v111 -= 24;
              *(_QWORD *)(v111 + 16) = 0;
              v112 = *(_OWORD *)(v109 - 3);
              v109 -= 3;
              *(_OWORD *)v111 = v112;
              *(_QWORD *)(v111 + 16) = v109[2];
              *v109 = 0;
              v109[1] = 0;
              v109[2] = 0;
            }
            while (v109 != v110);
            v113 = *(int64x2_t *)v342;
            v108 = *(_QWORD **)&buf[16];
          }
          *(_QWORD *)v342 = v111;
          *(_QWORD *)&v342[2] = v108;
          *(int64x2_t *)&buf[8] = v113;
          v114 = v343[0];
          v343[0] = *(_QWORD *)&buf[24];
          *(_QWORD *)&buf[24] = v114;
          *(_QWORD *)buf = v113.i64[0];
          std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)buf);
          *(_QWORD *)&v342[2] = v108;
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          **(_QWORD **)&v342[2] = 0;
          *(_QWORD *)(v101 + 8) = 0;
          *(_QWORD *)(v101 + 16) = 0;
          *(_OWORD *)v101 = *(_OWORD *)__p;
          *(_QWORD *)(v101 + 16) = v341[0];
          *(_QWORD *)&v342[2] = v101 + 24;
        }
        v20 = ++v89;
        if (v19 <= v89)
          goto LABEL_204;
      }
      v4 = v5;
      while (1)
      {
        v5 = v362;
        if (v362 <= v4)
          goto LABEL_607;
        v90 = *(_QWORD *)v401 + 24 * v4;
        *(float64x2_t *)v90 = vcvtq_f64_f32(*(float32x2_t *)(v364 + 8 * v4));
        *(_QWORD *)(v90 + 16) = 0;
        v91 = (char *)__p[1];
        if (__p[1] >= (void *)v341[0])
        {
          v93 = (char *)__p[0];
          v94 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 61)
            goto LABEL_689;
          v96 = v341[0] - (unint64_t)__p[0];
          if ((uint64_t)(v341[0] - (unint64_t)__p[0]) >> 2 > v95)
            v95 = v96 >> 2;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
            v97 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (v97)
          {
            v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v341, v97);
            v91 = (char *)__p[1];
            v93 = (char *)__p[0];
          }
          else
          {
            v98 = 0;
          }
          v99 = (unint64_t *)&v98[8 * v94];
          *v99 = v4;
          v92 = v99 + 1;
          while (v91 != v93)
          {
            v100 = *((_QWORD *)v91 - 1);
            v91 -= 8;
            *--v99 = v100;
          }
          __p[0] = v99;
          __p[1] = v92;
          v341[0] = &v98[8 * v97];
          if (v93)
            operator delete(v93);
        }
        else
        {
          *(_QWORD *)__p[1] = v4;
          v92 = v91 + 8;
        }
        __p[1] = v92;
        if (++v4 == v20)
          goto LABEL_189;
      }
    }
LABEL_204:
    v346[0] = 0;
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::LoadData(v346, (uint64_t)v401);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearConstraints((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v346);
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(&v358[1], *(uint64_t *)v342, *(uint64_t *)&v342[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v342[2] - *(_QWORD *)v342) >> 3));
    Constraints = geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v346);
    if ((Constraints & 1) == 0
      || (Constraints = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GenerateConstraints((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v346),
          !(_DWORD)Constraints)
      || (Constraints = geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeConstrainedDelaunay((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v346, 0), (Constraints & 1) == 0))
    {
      v116 = *re::geometryLogObjects((re *)Constraints);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v116, OS_LOG_TYPE_DEFAULT, "Failed to perfectly triangulate glyph outline.", buf, 2u);
      }
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetMesh((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v346, v395, (uint64_t)v329);
    v117 = v329[1];
    v118 = v329[0];
    v341[0] = 0;
    __p[0] = 0;
    __p[1] = 0;
    v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v329[1] - (char *)v329[0]) >> 2);
    if (v329[1] != v329[0])
    {
      if (v19 > 0x1555555555555555)
        goto LABEL_689;
      v120 = std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>((uint64_t)v341, v19);
      v121 = __p[1];
      v122 = __p[0];
      v123 = v120;
      if (__p[1] != __p[0])
      {
        do
        {
          v124 = *(_QWORD *)(v121 - 3);
          v121 -= 3;
          v125 = v121[2];
          *(_QWORD *)(v123 - 3) = v124;
          v123 -= 3;
          v123[2] = v125;
        }
        while (v121 != v122);
        v121 = __p[0];
      }
      __p[0] = v123;
      __p[1] = v120;
      v341[0] = &v120[3 * v119];
      if (v121)
        operator delete(v121);
    }
    if (v117 != v118)
    {
      v126 = *((_QWORD *)&v368 + 1);
      if (*((_QWORD *)&v368 + 1))
      {
        v4 = 0;
        if (v19 <= 1)
          v19 = 1;
        v5 = *((_QWORD *)&v368 + 1) - 1;
        do
        {
          v20 = (unint64_t)v329[0] + 12 * v4;
          v7 = *(unsigned int *)v20;
          v6 = v362;
          if (v362 <= v7)
            goto LABEL_647;
          v8 = *(unsigned int *)(v20 + 4);
          if (v362 <= v8)
            goto LABEL_648;
          v9 = *(unsigned int *)(v20 + 8);
          if (v362 <= v9)
            goto LABEL_649;
          v344 = vdiv_f32(vadd_f32(vadd_f32(*(float32x2_t *)(v364 + 8 * v7), *(float32x2_t *)(v364 + 8 * v8)), *(float32x2_t *)(v364 + 8 * v9)), _D8);
          if (!*((_QWORD *)&v368 + 1))
            goto LABEL_650;
          v127 = *(unsigned int *)v370;
          *(_QWORD *)buf = v364;
          *(_QWORD *)&buf[8] = v127;
          {
            if (v126 >= 2)
            {
              v6 = 0;
              while (1)
              {
                v7 = *((_QWORD *)&v368 + 1);
                if (*((_QWORD *)&v368 + 1) <= v6)
                  goto LABEL_620;
                if (*((_QWORD *)&v368 + 1) <= v6 + 1)
                  break;
                v8 = v362;
                v7 = *(unsigned int *)(v370 + 4 * v6);
                if (v362 <= v7)
                  goto LABEL_622;
                v128 = (*(_DWORD *)(v370 + 4 * v6 + 4) - v7);
                *(_QWORD *)buf = v364 + 8 * v7;
                *(_QWORD *)&buf[8] = v128;
                  goto LABEL_250;
                if (v5 == ++v6)
                  goto LABEL_233;
              }
LABEL_621:
              v345 = 0;
              v394 = 0u;
              v393 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v398 = 136315906;
              *(_QWORD *)&v398[4] = "operator[]";
              *(_WORD *)&v398[12] = 1024;
              *(_DWORD *)&v398[14] = 797;
              *(_WORD *)&v398[18] = 2048;
              *(_QWORD *)&v398[20] = v6 + 1;
              v399 = 2048;
              *(_QWORD *)v400 = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_622:
              v345 = 0;
              v394 = 0u;
              v393 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v398 = 136315906;
              *(_QWORD *)&v398[4] = "operator[]";
              *(_WORD *)&v398[12] = 1024;
              *(_DWORD *)&v398[14] = 797;
              *(_WORD *)&v398[18] = 2048;
              *(_QWORD *)&v398[20] = v7;
              v399 = 2048;
              *(_QWORD *)v400 = v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_623:
              *(_QWORD *)v395 = 0;
              v380 = 0u;
              v379 = 0u;
              memset(__s, 0, sizeof(__s));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v398 = 136315906;
              *(_QWORD *)&v398[4] = "operator[]";
              *(_WORD *)&v398[12] = 1024;
              *(_DWORD *)&v398[14] = 789;
              *(_WORD *)&v398[18] = 2048;
              *(_QWORD *)&v398[20] = v10;
              v399 = 2048;
              *(_QWORD *)v400 = v20;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_624:
              *(_QWORD *)v401 = 0;
              v380 = 0u;
              v379 = 0u;
              memset(__s, 0, sizeof(__s));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v395 = 136315906;
              *(_QWORD *)&v395[4] = "operator[]";
              *(_WORD *)&v395[12] = 1024;
              *(_DWORD *)&v395[14] = 797;
              *(_WORD *)&v395[18] = 2048;
              *(_QWORD *)&v395[20] = v6;
              v396 = 2048;
              *(_QWORD *)v397 = v8;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_625:
              *(_QWORD *)v401 = 0;
              v380 = 0u;
              v379 = 0u;
              memset(__s, 0, sizeof(__s));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v395 = 136315906;
              *(_QWORD *)&v395[4] = "operator[]";
              *(_WORD *)&v395[12] = 1024;
              *(_DWORD *)&v395[14] = 609;
              *(_WORD *)&v395[18] = 2048;
              *(_QWORD *)&v395[20] = v7;
              v396 = 2048;
              *(_QWORD *)v397 = v19;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_626;
            }
LABEL_233:
            v129 = __p[1];
            if (__p[1] >= (void *)v341[0])
            {
              v132 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 2);
              v133 = v132 + 1;
              if (v132 + 1 > 0x1555555555555555)
                goto LABEL_689;
              if (0x5555555555555556 * ((uint64_t)(v341[0] - (unint64_t)__p[0]) >> 2) > v133)
                v133 = 0x5555555555555556 * ((uint64_t)(v341[0] - (unint64_t)__p[0]) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v341[0] - (unint64_t)__p[0]) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v134 = 0x1555555555555555;
              else
                v134 = v133;
              if (v134)
                v135 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>((uint64_t)v341, v134);
              else
                v135 = 0;
              v136 = &v135[12 * v132];
              v137 = *(_QWORD *)v20;
              *((_DWORD *)v136 + 2) = *(_DWORD *)(v20 + 8);
              *(_QWORD *)v136 = v137;
              v138 = __p[1];
              v139 = __p[0];
              v140 = v136;
              if (__p[1] != __p[0])
              {
                do
                {
                  v141 = *(_QWORD *)(v138 - 3);
                  v138 -= 3;
                  v142 = v138[2];
                  *(_QWORD *)(v140 - 12) = v141;
                  v140 -= 12;
                  *((_DWORD *)v140 + 2) = v142;
                }
                while (v138 != v139);
                v138 = __p[0];
              }
              v131 = v136 + 12;
              __p[0] = v140;
              __p[1] = v136 + 12;
              v341[0] = &v135[12 * v134];
              if (v138)
                operator delete(v138);
            }
            else
            {
              v130 = *(_QWORD *)v20;
              *((_DWORD *)__p[1] + 2) = *(_DWORD *)(v20 + 8);
              *v129 = v130;
              v131 = (char *)v129 + 12;
            }
            __p[1] = v131;
          }
LABEL_250:
          ++v4;
        }
        while (v4 != v19);
      }
    }
    if (v329[0])
    {
      v329[1] = v329[0];
      operator delete(v329[0]);
    }
    *(_OWORD *)v329 = *(_OWORD *)__p;
    v330 = v341[0];
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::~ConstrainedDelaunayTriangulationMesherDetails((geo::math::ConstrainedDelaunayTriangulationMesherDetails *)v346);
    if (*((_QWORD *)&v382 + 1))
    {
      *(_QWORD *)&v383 = *((_QWORD *)&v382 + 1);
      operator delete(*((void **)&v382 + 1));
    }
    if ((_QWORD)v381)
    {
      *((_QWORD *)&v381 + 1) = v381;
      operator delete((void *)v381);
    }
    if (__s[0])
    {
      __s[1] = __s[0];
      operator delete(__s[0]);
    }
    *(_QWORD *)v346 = v342;
    std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)v346);
    if (*(_QWORD *)v401)
    {
      *(_QWORD *)&v401[8] = *(_QWORD *)v401;
      operator delete(*(void **)v401);
    }
    if (*(_QWORD *)v395)
    {
      *(_QWORD *)&v395[8] = *(_QWORD *)v395;
      operator delete(*(void **)v395);
    }
    v143 = *(float *)(a4 + 4);
    v144 = *(unsigned __int8 *)(a4 + 10);
    v145 = *(unsigned __int8 *)(a4 + 11);
    bzero(__s, 0x2D0uLL);
    re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&__s[1]);
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)((char *)&v379 + 8), "vertexPosition", 1, 7);
    v9 = DWORD2(v368);
    v146 = 0xAAAAAAAAAAAAAAABLL * (((char *)v329[1] - (char *)v329[0]) >> 2);
    if (v145)
      v147 = -1431655765 * (((char *)v329[1] - (char *)v329[0]) >> 2);
    else
      v147 = 0;
    v19 = v147 - 1431655765 * (((char *)v329[1] - (char *)v329[0]) >> 2);
    v148 = 2 * v362;
    if (!v144)
      v148 = 0;
    v149 = (v19 + v148);
    v321 = v144;
    v308 = v145 | v144;
    v319 = v362;
    if (v145 | v144)
      v20 = v362;
    else
      v20 = 0;
    v8 = (unint64_t)v390;
    if (v149 < LODWORD(__s[4]))
    {
      v150 = v391;
      if (v391)
      {
        v151 = 0;
        do
        {
          v152 = (re::internal *)re::internal::GeomAttributeContainer::attributeByIndex((re::internal::GeomAttributeContainer *)v390, v151);
          re::internal::accessFaceVaryingAttributeSubmesh(v152, v153);
          ++v151;
        }
        while (v150 != v151);
      }
    }
    re::DynamicArray<re::GeomCell4>::resize(&__s[2], v149);
    v387 = v149;
    if (v388)
    {
      v154 = v389;
      v155 = 8 * v388;
      do
      {
        v156 = *v154++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v156 + 72))(v156, v387);
        v155 -= 8;
      }
      while (v155);
    }
    v5 = v319;
    v7 = (unint64_t)v341;
    if (LODWORD(__s[1]) > (v20 + v319)
      && LODWORD(__s[4])
      && (char *)(LODWORD(__s[4]) - 1) > __s[4])
    {
      while (1)
        ;
    }
    LODWORD(__s[1]) = v20 + v319;
    v384 = v20 + v319;
    if (v385)
    {
      v157 = v386;
      v20 = 8 * v385;
      do
      {
        v158 = *v157++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v158 + 72))(v158, v384);
        v20 -= 8;
      }
      while (v20);
    }
    if ((_DWORD)v146)
    {
      v20 = 0;
      v159 = 0;
      do
      {
        re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v159++, *(_DWORD *)((char *)v329[0] + v20), *(_DWORD *)((char *)v329[0] + v20 + 4), *(_DWORD *)((char *)v329[0] + v20 + 8));
        v20 += 12;
      }
      while (v146 != v159);
      v5 = v319;
      if (v145)
      {
        v20 = 0;
        v160 = 12 * v146;
        do
        {
          re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v146, *(_DWORD *)((char *)v329[0] + v20 + 8) + v319, *(_DWORD *)((char *)v329[0] + v20 + 4) + v319, *(_DWORD *)((char *)v329[0] + v20) + v319);
          LODWORD(v146) = v146 + 1;
          v20 += 12;
        }
        while (v160 != v20);
      }
    }
    v6 = 24;
    if (v321 && v9)
    {
      v8 = 0;
      v316 = v9;
      do
      {
        v4 = *((_QWORD *)&v368 + 1);
        if (v8)
        {
          v20 = v8 - 1;
          if (*((_QWORD *)&v368 + 1) <= v8 - 1)
            goto LABEL_655;
          v161 = *(_DWORD *)(v370 + 4 * v20);
        }
        else
        {
          v161 = 0;
        }
        if (*((_QWORD *)&v368 + 1) <= v8)
          goto LABEL_646;
        v162 = *(_DWORD *)(v370 + 4 * v8);
        if (v161 < v162)
        {
          v322 = v8;
          v163 = 0;
          v164 = v161 + v5;
          v165 = -v162;
          LODWORD(v20) = v5;
          do
          {
            v166 = v161 + v20;
            if (v161 + v165 == -1)
              v167 = v164;
            else
              v167 = v166 + 1;
            if (v161 + v165 == -1)
              v168 = v161;
            else
              v168 = v161 + v163 + 1;
            re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v19, v161 + v163, v166, v167);
            re::GeomMeshBuilder::setFaceVertices((uint64_t)__s, v19 + 1, v161 + v163, v167, v168);
            v19 = (v19 + 2);
            ++v163;
            ++v165;
            v20 = (v20 + 1);
          }
          while (v161 + v165);
          v10 = 0xAAAAAAAAAAAAAAALL;
          v7 = (unint64_t)v341;
          v6 = 24;
          v5 = v319;
          v9 = v316;
          v8 = v322;
        }
      }
      while (++v8 != v9);
    }
    re::GeomMesh::GeomMesh((re::GeomMesh *)v346, 0);
    re::GeomMesh::operator=((uint64_t)v346, &__s[1]);
    v169 = re::GeomMesh::setName((re *)v346, __s[0]);
    v170 = __s[0];
    if (__s[0])
    {
      v171 = re::globalAllocators(v169);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v171[2] + 40))(v171[2], v170);
      __s[0] = 0;
    }
    v172 = re::GeomMesh::modifyVertexPositions((re::GeomMesh *)v346);
    if (!(_DWORD)v5)
      goto LABEL_323;
    v20 = 0;
    v4 = v5;
    v19 = v173;
    do
    {
      v5 = v362;
      if (v362 <= v20)
        goto LABEL_642;
      if (v173 == v20)
      {
LABEL_643:
        *(_QWORD *)v395 = 0;
        v394 = 0u;
        v393 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v398 = 136315906;
        *(_QWORD *)&v398[4] = "operator[]";
        *(_WORD *)&v398[12] = 1024;
        *(_DWORD *)&v398[14] = 609;
        *(_WORD *)&v398[18] = 2048;
        *(_QWORD *)&v398[20] = v19;
        v399 = 2048;
        *(_QWORD *)v400 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_644:
        *(_QWORD *)buf = 0;
        memset(v346, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(__s[0]) = 136315906;
        *(char **)((char *)__s + 4) = "operator[]";
        WORD2(__s[1]) = 1024;
        *(_DWORD *)((char *)&__s[1] + 6) = 789;
        WORD1(__s[2]) = 2048;
        *(char **)((char *)&__s[2] + 4) = (char *)v19;
        WORD2(__s[3]) = 2048;
        *(char **)((char *)&__s[3] + 6) = (char *)v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_645:
        *(_QWORD *)buf = 0;
        memset(v346, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(__s[0]) = 136315906;
        *(char **)((char *)__s + 4) = "operator[]";
        WORD2(__s[1]) = 1024;
        *(_DWORD *)((char *)&__s[1] + 6) = 789;
        WORD1(__s[2]) = 2048;
        *(char **)((char *)&__s[2] + 4) = (char *)v19;
        WORD2(__s[3]) = 2048;
        *(char **)((char *)&__s[3] + 6) = (char *)v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_646:
        *(_QWORD *)v398 = 0;
        memset(v346, 0, 80);
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "operator[]";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 797;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v8;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_647:
        v345 = 0;
        v394 = 0u;
        v393 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v398 = 136315906;
        *(_QWORD *)&v398[4] = "operator[]";
        *(_WORD *)&v398[12] = 1024;
        *(_DWORD *)&v398[14] = 797;
        *(_WORD *)&v398[18] = 2048;
        *(_QWORD *)&v398[20] = v7;
        v399 = 2048;
        *(_QWORD *)v400 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_648:
        v345 = 0;
        v394 = 0u;
        v393 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v398 = 136315906;
        *(_QWORD *)&v398[4] = "operator[]";
        *(_WORD *)&v398[12] = 1024;
        *(_DWORD *)&v398[14] = 797;
        *(_WORD *)&v398[18] = 2048;
        *(_QWORD *)&v398[20] = v8;
        v399 = 2048;
        *(_QWORD *)v400 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_649:
        v345 = 0;
        v394 = 0u;
        v393 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v398 = 136315906;
        *(_QWORD *)&v398[4] = "operator[]";
        *(_WORD *)&v398[12] = 1024;
        *(_DWORD *)&v398[14] = 797;
        *(_WORD *)&v398[18] = 2048;
        *(_QWORD *)&v398[20] = v9;
        v399 = 2048;
        *(_QWORD *)v400 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_650:
        v345 = 0;
        v394 = 0u;
        v393 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v398 = 136315906;
        *(_QWORD *)&v398[4] = "operator[]";
        *(_WORD *)&v398[12] = 1024;
        *(_DWORD *)&v398[14] = 797;
        *(_WORD *)&v398[18] = 2048;
        *(_QWORD *)&v398[20] = 0;
        v399 = 2048;
        *(_QWORD *)v400 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_651:
        __p[0] = 0;
        v394 = 0u;
        v393 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v398 = 136315906;
        *(_QWORD *)&v398[4] = "operator[]";
        *(_WORD *)&v398[12] = 1024;
        *(_DWORD *)&v398[14] = 797;
        *(_WORD *)&v398[18] = 2048;
        *(_QWORD *)&v398[20] = v5;
        v399 = 2048;
        *(_QWORD *)v400 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_652:
        *(_QWORD *)v401 = 0;
        v380 = 0u;
        v379 = 0u;
        memset(__s, 0, sizeof(__s));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v395 = 136315906;
        *(_QWORD *)&v395[4] = "operator[]";
        *(_WORD *)&v395[12] = 1024;
        *(_DWORD *)&v395[14] = 789;
        *(_WORD *)&v395[18] = 2048;
        *(_QWORD *)&v395[20] = v4;
        v396 = 2048;
        *(_QWORD *)v397 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_653;
      }
      *(_QWORD *)&v174 = *(_QWORD *)(v364 + 8 * v20);
      *((float *)&v174 + 2) = v143 * 0.5;
      *(_OWORD *)(v172 + 16 * v20++) = v174;
    }
    while (v4 != v20);
    if (v308)
    {
      v20 = 0;
      LODWORD(v175) = v173 - v319;
      if (v173 >= v319)
        v175 = v175;
      else
        v175 = 0;
      while (1)
      {
        v5 = v362;
        if (v362 <= v20)
          break;
        if (v175 == v20)
          goto LABEL_654;
        *(_QWORD *)&v174 = *(_QWORD *)(v364 + 8 * v20);
        *((float *)&v174 + 2) = -(float)(v143 * 0.5);
        *(_OWORD *)(v172 + 16 * v4 + 16 * v20++) = v174;
        if (v4 == v20)
          goto LABEL_323;
      }
LABEL_653:
      *(_QWORD *)v395 = 0;
      v394 = 0u;
      v393 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v398 = 136315906;
      *(_QWORD *)&v398[4] = "operator[]";
      *(_WORD *)&v398[12] = 1024;
      *(_DWORD *)&v398[14] = 797;
      *(_WORD *)&v398[18] = 2048;
      *(_QWORD *)&v398[20] = v20;
      v399 = 2048;
      *(_QWORD *)v400 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_654:
      *(_QWORD *)v395 = 0;
      v394 = 0u;
      v393 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_QWORD *)&v398[4] = "operator[]";
      *(_WORD *)&v398[12] = 1024;
      *(_DWORD *)&v398[14] = 609;
      *(_DWORD *)v398 = 136315906;
      *(_WORD *)&v398[18] = 2048;
      *(_QWORD *)&v398[20] = (v4 + v20);
      v399 = 2048;
      *(_QWORD *)v400 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_655:
      *(_QWORD *)v398 = 0;
      memset(v346, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 797;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v20;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_656:
      *(_QWORD *)v360 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v374 = 136315906;
      *(_QWORD *)&v374[4] = "operator[]";
      *(_WORD *)&v374[12] = 1024;
      *(_DWORD *)&v374[14] = 789;
      *(_WORD *)&v374[18] = 2048;
      *(_QWORD *)&v374[20] = v5;
      v375 = 2048;
      *(_QWORD *)v376 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_657:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 789;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v4;
      v396 = 2048;
      *(_QWORD *)v397 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_658:
      *(_QWORD *)v360 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v374 = 136315906;
      *(_QWORD *)&v374[4] = "operator[]";
      *(_WORD *)&v374[12] = 1024;
      *(_DWORD *)&v374[14] = 789;
      *(_WORD *)&v374[18] = 2048;
      *(_QWORD *)&v374[20] = v5;
      v375 = 2048;
      *(_QWORD *)v376 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_659:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 789;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v4;
      v396 = 2048;
      *(_QWORD *)v397 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_660:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 789;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v20;
      v396 = 2048;
      *(_QWORD *)v397 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_661:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 797;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v20;
      v396 = 2048;
      *(_QWORD *)v397 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_662:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 789;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v4;
      v396 = 2048;
      *(_QWORD *)v397 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_663:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 797;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v4;
      v396 = 2048;
      *(_QWORD *)v397 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_664:
      *(_QWORD *)v342 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "operator[]";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 789;
      *(_WORD *)&v401[18] = 2048;
      *(_QWORD *)&v401[20] = v4;
      v402 = 2048;
      v403 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_665:
      *(_QWORD *)v342 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "operator[]";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 789;
      *(_WORD *)&v401[18] = 2048;
      *(_QWORD *)&v401[20] = v7;
      v402 = 2048;
      v403 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_666:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 789;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v9;
      v396 = 2048;
      *(_QWORD *)v397 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_667:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 797;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v20;
      v396 = 2048;
      *(_QWORD *)v397 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_668:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 797;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v9;
      v396 = 2048;
      *(_QWORD *)v397 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_669:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 797;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v6;
      v396 = 2048;
      *(_QWORD *)v397 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_670;
    }
LABEL_323:
    re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)__s);
    v176 = (_BYTE *)a4;
    if (!*(_BYTE *)(a4 + 8))
      goto LABEL_421;
    v317 = *(float *)(a4 + 4);
    v323 = *(unsigned __int8 *)(a4 + 10);
    v9 = *(unsigned __int8 *)(a4 + 11);
    v8 = v362;
    v320 = DWORD2(v368);
    v177 = 0xAAAAAAAAAAAAAAABLL * (((char *)v329[1] - (char *)v329[0]) >> 2);
    v19 = *(unsigned int *)&v346[40];
    *(_QWORD *)&buf[32] = 0;
    memset(buf, 0, 28);
    *(_QWORD *)&v400[2] = 0;
    memset(v398, 0, sizeof(v398));
    re::DynamicArray<re::GeomCell4>::resize(buf, *(unsigned int *)&v346[40]);
    re::DynamicArray<float>::resize((uint64_t)v398, v19);
    if ((_DWORD)v177)
    {
      v178 = 0;
      v4 = *(_QWORD *)&buf[16];
      v179 = v177;
      v180 = (char *)v329[0] + 8;
      v181 = (_DWORD *)(*(_QWORD *)&buf[32] + 12);
      do
      {
        if (v4 == v178)
          goto LABEL_652;
        v182 = *v180;
        *(_QWORD *)(v181 - 3) = *((_QWORD *)v180 - 1);
        *(v181 - 1) = v182;
        *v181 = -1;
        ++v178;
        v180 += 3;
        v181 += 4;
      }
      while (v177 != v178);
      if ((_DWORD)v9)
      {
        v183 = *(_QWORD *)&buf[32];
        v184 = vdup_n_s32(v8);
        v185 = (char *)v329[0] + 4;
        v186 = v177;
        do
        {
          v20 = v186;
          if (v4 <= v186)
            goto LABEL_660;
          v187 = (int32x2_t *)(v183 + 16 * v186);
          v188 = *((_DWORD *)v185 - 1) + v8;
          v189 = *(int32x2_t *)v185;
          v185 = (_QWORD *)((char *)v185 + 12);
          *v187 = vrev64_s32(vadd_s32(v189, v184));
          v187[1].i32[0] = v188;
          v187[1].i32[1] = -1;
          v186 = v20 + 1;
        }
        while (--v179);
      }
    }
    v7 = (v320 + v8);
    v5 = v9;
    if ((_DWORD)v9)
      v190 = v8;
    else
      v190 = 0;
    v309 = v8;
    v306 = v190;
    v8 = (v190 + v8);
    if (v323 && v320)
    {
      v191 = 0;
      if ((_DWORD)v9)
        v192 = v177;
      else
        v192 = 0;
      v193 = v192 + v177;
      v4 = *((_QWORD *)&v368 + 1);
      v194 = v370;
      v20 = *(_QWORD *)&buf[16];
      v195 = v8;
      while (1)
      {
        v196 = v195;
        if (v191)
        {
          v6 = v191 - 1;
          if (v4 <= v191 - 1)
            goto LABEL_669;
          v196 = *(_DWORD *)(v194 + 4 * v6) + v195;
        }
        if (v191 == v4)
          goto LABEL_663;
        v197 = *(_DWORD *)(v194 + 4 * v191) + v195;
        if (v196 < v197)
          break;
LABEL_350:
        ++v195;
        ++v191;
        v6 = 24;
        if (v191 == v320)
          goto LABEL_351;
      }
      v198 = *(_QWORD *)&buf[32];
      while (1)
      {
        v6 = v193;
        if (v20 <= v193)
          break;
        v199 = (unsigned int *)(v198 + 16 * v193);
        v200 = v7 + v196 + 1;
        *v199 = v196;
        v199[1] = v7 + v196;
        v199[2] = v200;
        v199[3] = -1;
        v9 = (v6 + 1);
        if (v20 <= v9)
          goto LABEL_616;
        v201 = (unsigned int *)(v198 + 16 * v9);
        *v201 = v196;
        v201[1] = v200;
        v201[2] = v196 + 1;
        v201[3] = -1;
        v193 = v6 + 2;
        if (++v196 >= v197)
          goto LABEL_350;
      }
LABEL_615:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 789;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v6;
      v396 = 2048;
      *(_QWORD *)v397 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_616:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 789;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v9;
      v396 = 2048;
      *(_QWORD *)v397 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_617;
    }
LABEL_351:
    v202 = 2 * v7;
    if (!v323)
      v202 = 0;
    if (v19)
    {
      v203 = 0;
      v4 = *(_QWORD *)&v398[16];
      v204 = *(_QWORD *)&v400[2];
      while (v4 != v203)
      {
        *(_DWORD *)(v204 + 4 * v203) = v203;
        if (v19 == ++v203)
          goto LABEL_357;
      }
      goto LABEL_657;
    }
LABEL_357:
    v205 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v346, "vertexUV", 6, v202 + (int)v8, (uint64_t *)buf, (uint64_t *)v398);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v205 + 16))(v205))
    {
      v4 = re::internal::GeomTypedAttribute<double>::operator[](v205, 0);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v205 + 16))(v205);
    }
    else
    {
      v19 = 0;
      v4 = 0;
    }
    if (!v320)
      goto LABEL_414;
    v206 = v8;
    v20 = 0;
    v207 = *(float32x2_t *)v360;
    v208 = vsubq_f32(*(float32x4_t *)&v360[16], *(float32x4_t *)v360);
    v208.i32[3] = 0;
    v209 = vmaxnmq_f32(v208, (float32x4_t)0);
    v210 = 1.0 / fmaxf(fmaxf(v209.f32[0], v209.f32[2]), v209.f32[1]);
    while (2)
    {
      v6 = *((_QWORD *)&v368 + 1);
      if (v20)
      {
        v9 = v20 - 1;
        if (*((_QWORD *)&v368 + 1) <= v20 - 1)
          goto LABEL_668;
        v211 = *(_DWORD *)(v370 + 4 * v9);
      }
      else
      {
        v211 = 0;
      }
      if (*((_QWORD *)&v368 + 1) <= v20)
        goto LABEL_661;
      v212 = *(unsigned int *)(v370 + 4 * v20);
      if (v211 < v212)
      {
        v6 = v211;
        if (v211 <= v19)
          v213 = v19;
        else
          v213 = v211;
        do
        {
          v9 = v362;
          if (v362 <= v6)
            goto LABEL_613;
          if (v213 == v6)
            goto LABEL_614;
          *(float32x2_t *)(v4 + 8 * v6) = vmul_n_f32(vsub_f32(*(float32x2_t *)(v364 + 8 * v6), v207), v210);
        }
        while (v212 != ++v6);
      }
      if (++v20 != v320)
        continue;
      break;
    }
    if ((_DWORD)v5)
    {
      v20 = 0;
      while (1)
      {
        v5 = *((_QWORD *)&v368 + 1);
        if (v20)
        {
          v6 = v20 - 1;
          if (*((_QWORD *)&v368 + 1) <= v20 - 1)
            goto LABEL_679;
          v214 = *(_DWORD *)(v370 + 4 * v6);
        }
        else
        {
          v214 = 0;
        }
        if (*((_QWORD *)&v368 + 1) <= v20)
          goto LABEL_674;
        v215 = *(unsigned int *)(v370 + 4 * v20);
        if (v214 < v215)
          break;
LABEL_387:
        if (++v20 == v320)
          goto LABEL_388;
      }
      v5 = v214;
      v6 = v309 + v214;
      while (1)
      {
        v9 = v362;
        if (v362 <= v5)
          break;
        if (v19 <= v6)
          goto LABEL_627;
        v216 = vmul_n_f32(vsub_f32(*(float32x2_t *)(v364 + 8 * v5), v207), v210);
        v216.f32[0] = 1.0 - v216.f32[0];
        *(float32x2_t *)(v4 + 8 * v6) = v216;
        ++v5;
        ++v6;
        if (v215 == v5)
          goto LABEL_387;
      }
LABEL_626:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 797;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v5;
      v396 = 2048;
      *(_QWORD *)v397 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_627:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 609;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v6;
      v396 = 2048;
      *(_QWORD *)v397 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_628:
      *(_QWORD *)v342 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      v280 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "operator[]";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 789;
      *(_WORD *)&v401[18] = 2048;
      *(_QWORD *)&v401[20] = v7;
      v402 = 2048;
      v403 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_629:
      *(_QWORD *)v342 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "operator[]";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 789;
      *(_WORD *)&v401[18] = 2048;
      *(_QWORD *)&v401[20] = v280;
      v402 = 2048;
      v403 = v20;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_630:
      *(_QWORD *)v342 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      v280 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "operator[]";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 789;
      *(_WORD *)&v401[18] = 2048;
      *(_QWORD *)&v401[20] = v7;
      v402 = 2048;
      v403 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_631:
      *(_QWORD *)v342 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      v19 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "operator[]";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 789;
      *(_WORD *)&v401[18] = 2048;
      *(_QWORD *)&v401[20] = v280;
      v402 = 2048;
      v403 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_632:
      *(_QWORD *)v342 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "operator[]";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 797;
      *(_WORD *)&v401[18] = 2048;
      *(_QWORD *)&v401[20] = v5;
      v402 = 2048;
      v403 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_633:
      *(_QWORD *)v342 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "operator[]";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 609;
      *(_WORD *)&v401[18] = 2048;
      *(_QWORD *)&v401[20] = v7;
      v402 = 2048;
      v403 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_634:
      *(_QWORD *)v395 = 0;
      v380 = (int64x2_t)v42;
      v379 = v42;
      *(_OWORD *)&__s[4] = v42;
      *(_OWORD *)&__s[2] = v42;
      *(_OWORD *)__s = v42;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v398 = 136315906;
      *(_QWORD *)&v398[4] = "operator[]";
      *(_WORD *)&v398[12] = 1024;
      *(_DWORD *)&v398[14] = 789;
      *(_WORD *)&v398[18] = 2048;
      *(_QWORD *)&v398[20] = v20;
      v399 = 2048;
      *(_QWORD *)v400 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_635:
      *(_QWORD *)v398 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 797;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v5;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_636:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 797;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v20 + v8;
      v396 = 2048;
      *(_QWORD *)v397 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_637:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 609;
      *(_DWORD *)v395 = 136315906;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = (v8 + v10 + v20);
      v396 = 2048;
      *(_QWORD *)v397 = v5;
      _os_log_send_and_compose_impl();
      v218 = _os_crash_msg();
      __break(1u);
LABEL_638:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      v19 = v218;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 609;
      *(_DWORD *)v395 = 136315906;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = (v8 + v19) + v20;
      v396 = 2048;
      *(_QWORD *)v397 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_639:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 609;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v20;
      v396 = 2048;
      *(_QWORD *)v397 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_640:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 609;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v6;
      v396 = 2048;
      *(_QWORD *)v397 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_641:
      __p[0] = 0;
      v394 = 0u;
      v393 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v398 = 136315906;
      *(_QWORD *)&v398[4] = "operator[]";
      *(_WORD *)&v398[12] = 1024;
      *(_DWORD *)&v398[14] = 797;
      *(_WORD *)&v398[18] = 2048;
      *(_QWORD *)&v398[20] = v20;
      v399 = 2048;
      *(_QWORD *)v400 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_642:
      *(_QWORD *)v395 = 0;
      v394 = 0u;
      v393 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v398 = 136315906;
      *(_QWORD *)&v398[4] = "operator[]";
      *(_WORD *)&v398[12] = 1024;
      *(_DWORD *)&v398[14] = 797;
      *(_WORD *)&v398[18] = 2048;
      *(_QWORD *)&v398[20] = v20;
      v399 = 2048;
      *(_QWORD *)v400 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_643;
    }
LABEL_388:
    v6 = 24;
    if (v323)
    {
      v217 = 0;
      v5 = v19;
      v218 = (v306 + 2 * v309 + v320);
      while (1)
      {
        v20 = *((_QWORD *)&v368 + 1);
        if (v217)
        {
          v6 = v217 - 1;
          if (*((_QWORD *)&v368 + 1) <= v217 - 1)
            goto LABEL_688;
          v8 = *(unsigned int *)(v370 + 4 * v6);
        }
        else
        {
          v8 = 0;
        }
        if (*((_QWORD *)&v368 + 1) <= v217)
          goto LABEL_681;
        v6 = v8;
        v20 = v362;
        if (v362 <= v8)
          goto LABEL_682;
        v219 = *(unsigned int *)(v370 + 4 * v217);
        v220 = *(float32x2_t *)(v364 + 8 * v8);
        v221 = 0.0;
        if (v8 < v219)
        {
          v20 = 0;
          LODWORD(v10) = v206;
          v222 = (v8 + v206);
          v223 = 8 * v8;
          v224 = v8 + v218;
          v221 = 0.0;
          do
          {
            v9 = v362;
            if (v362 <= v8 + v20)
              goto LABEL_636;
            if (v222 + v20 >= v19)
              goto LABEL_637;
            v225 = v364 + v223;
            v226 = vsub_f32(*(float32x2_t *)(v364 + v223 + 8 * v20), v220);
            v221 = v221 + sqrtf(vaddv_f32(vmul_f32(v226, v226)));
            v226.i32[0] = 0;
            v226.f32[1] = v221;
            *(float32x2_t *)(v4 + 8 * v222 + 8 * v20) = v226;
            if (v19 <= v224 + v20)
              goto LABEL_638;
            *(_QWORD *)(v4 + 8 * v224 + 8 * v20) = __PAIR64__(LODWORD(v221), LODWORD(v317));
            v220 = *(float32x2_t *)(v225 + 8 * v20++);
          }
          while (v8 - v219 + v20);
          v20 = v362;
          v206 = v10;
          v10 = 0xAAAAAAAAAAAAAAALL;
        }
        if (v20 <= v8)
          goto LABEL_683;
        v20 = (v219 + v206);
        if (v19 <= v20)
          goto LABEL_684;
        v227 = vsub_f32(*(float32x2_t *)(v364 + 8 * v8), v220);
        v228 = v221 + sqrtf(vaddv_f32(vmul_f32(v227, v227)));
        v227.i32[0] = 0;
        v227.f32[1] = v228;
        *(float32x2_t *)(v4 + 8 * v20) = v227;
        v20 = (v20 + v7);
        if (v19 <= v20)
          goto LABEL_685;
        *(_QWORD *)(v4 + 8 * v20) = __PAIR64__(LODWORD(v228), LODWORD(v317));
        if (v8 <= v219)
          break;
LABEL_413:
        ++v217;
        ++v206;
        v218 = (v218 + 1);
        v6 = 24;
        if (v217 == v320)
          goto LABEL_414;
      }
      if (v228 <= v317)
        v228 = v317;
      v20 = (v8 + v206);
      v6 = (v8 + v218);
      v229 = 1.0 / v228;
      while (v20 < v19)
      {
        *(float32x2_t *)(v4 + 8 * v20) = vmul_n_f32(*(float32x2_t *)(v4 + 8 * v20), v229);
        if (v19 <= v6)
          goto LABEL_640;
        *(float32x2_t *)(v4 + 8 * v6) = vmul_n_f32(*(float32x2_t *)(v4 + 8 * v6), v229);
        v8 = (v8 + 1);
        ++v20;
        ++v6;
        if (v8 > v219)
          goto LABEL_413;
      }
      goto LABEL_639;
    }
LABEL_414:
    if (*(_QWORD *)v398 && *(_QWORD *)&v400[2])
      (*(void (**)(void))(**(_QWORD **)v398 + 40))();
    v7 = (unint64_t)v341;
    if (*(_QWORD *)buf && *(_QWORD *)&buf[32])
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
    v176 = (_BYTE *)a4;
LABEL_421:
    if (!v176[9])
      goto LABEL_490;
    v20 = v176[10];
    v230 = v176[11];
    v5 = DWORD2(v371);
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v329[1] - (char *)v329[0]) >> 2);
    v19 = *(unsigned int *)&v346[40];
    if (v176[11])
      v231 = 2;
    else
      v231 = 1;
    v324 = v231;
    if ((_DWORD)v20)
      v6 = DWORD2(v365);
    else
      v6 = 0;
    *(_QWORD *)&buf[32] = 0;
    memset(buf, 0, 28);
    *(_QWORD *)&v400[2] = 0;
    memset(v398, 0, sizeof(v398));
    re::DynamicArray<re::GeomCell4>::resize(buf, *(unsigned int *)&v346[40]);
    re::DynamicArray<float>::resize((uint64_t)v398, v19);
    v7 = (v6 + 1);
    if ((_DWORD)v8)
    {
      v232 = 0;
      v4 = *(_QWORD *)&buf[16];
      v233 = *(_QWORD *)&buf[32];
      v234.i64[1] = -1;
      v234.i64[0] = v6 | 0xFFFFFFFF00000000;
      v235 = vzip1q_s32(v234, v234);
      v235.i32[2] = v6;
      do
      {
        if (v4 == v232)
          goto LABEL_659;
        *(int32x4_t *)(v233 + 16 * v232++) = v235;
      }
      while (v8 != v232);
      if (v230)
      {
        v236 = 0;
        v237 = *(_QWORD *)&buf[32];
        v238.i64[1] = -1;
        v238.i64[0] = v7 | 0xFFFFFFFF00000000;
        v239 = vzip1q_s32(v238, v238);
        do
        {
          v9 = (v8 + v236);
          if (v4 <= v9)
            goto LABEL_666;
          v239.i32[2] = v6 + 1;
          *(int32x4_t *)(v237 + 16 * v9) = v239;
        }
        while ((_DWORD)v8 != ++v236);
      }
    }
    if ((_DWORD)v20)
      v240 = v5 == 0;
    else
      v240 = 1;
    v241 = !v240;
    if (!v240)
    {
      v242 = 0;
      if (v230)
        v243 = v8;
      else
        v243 = 0;
      v244 = v243 + v8;
      v20 = *((_QWORD *)&v371 + 1);
      v245 = v373;
      v4 = *(_QWORD *)&buf[16];
      while (1)
      {
        if (v242)
        {
          v8 = v242 - 1;
          if (v20 <= v242 - 1)
            goto LABEL_675;
          v246 = *(_DWORD *)(v245 + 4 * v8);
        }
        else
        {
          v246 = 0;
        }
        if (v242 == v20)
          goto LABEL_667;
        v247 = *(_DWORD *)(v245 + 4 * v242) - 1;
        if (v246 < v247)
          break;
LABEL_457:
        if (++v242 == v5)
          goto LABEL_458;
      }
      v248 = *(_QWORD *)&buf[32];
      while (1)
      {
        v8 = v244;
        if (v4 <= v244)
          break;
        v249 = (unsigned int *)(v248 + 16 * v244);
        *v249 = v246;
        v249[1] = v246++;
        v249[2] = v246;
        v249[3] = -1;
        v9 = (v8 + 1);
        if (v4 <= v9)
          goto LABEL_618;
        v250 = (_DWORD *)(v248 + 16 * v9);
        *v250 = v246 - 1;
        v250[1] = v246;
        v250[2] = v246;
        v250[3] = -1;
        v244 = v8 + 2;
        if (v246 == v247)
          goto LABEL_457;
      }
LABEL_617:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 789;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v8;
      v396 = 2048;
      *(_QWORD *)v397 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_618:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 789;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v9;
      v396 = 2048;
      *(_QWORD *)v397 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_619:
      *(_QWORD *)buf = 0;
      memset(v346, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(__s[0]) = 136315906;
      *(char **)((char *)__s + 4) = "operator[]";
      WORD2(__s[1]) = 1024;
      *(_DWORD *)((char *)&__s[1] + 6) = 789;
      WORD1(__s[2]) = 2048;
      *(char **)((char *)&__s[2] + 4) = (char *)v19;
      WORD2(__s[3]) = 2048;
      *(char **)((char *)&__s[3] + 6) = (char *)v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_620:
      v345 = 0;
      v394 = 0u;
      v393 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v398 = 136315906;
      *(_QWORD *)&v398[4] = "operator[]";
      *(_WORD *)&v398[12] = 1024;
      *(_DWORD *)&v398[14] = 797;
      *(_WORD *)&v398[18] = 2048;
      *(_QWORD *)&v398[20] = v6;
      v399 = 2048;
      *(_QWORD *)v400 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_621;
    }
LABEL_458:
    if (v19)
    {
      v251 = 0;
      v4 = *(_QWORD *)&v398[16];
      v252 = *(_QWORD *)&v400[2];
      while (v4 != v251)
      {
        *(_DWORD *)(v252 + 4 * v251) = v251;
        if (v19 == ++v251)
          goto LABEL_462;
      }
      goto LABEL_662;
    }
LABEL_462:
    v20 = v241;
    v253 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v346, "vertexNormal", 7, (int)v6 + v324, (uint64_t *)buf, (uint64_t *)v398);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v253 + 16))(v253))
    {
      LODWORD(v19) = 0;
LABEL_696:
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 609;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = v6;
      v396 = 2048;
      *(_QWORD *)v397 = v19;
      _os_log_send_and_compose_impl();
      result = (uint64_t *)_os_crash_msg();
      __break(1u);
      return result;
    }
    v4 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v253, 0);
    v254 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v253 + 16))(v253);
    v19 = v254;
    if (v254 <= v6)
      goto LABEL_696;
    *(_OWORD *)(v4 + 16 * v6) = xmmword_2260E5F40;
    if (!v230)
      goto LABEL_467;
    if (v254 <= v7)
    {
      *(_QWORD *)v401 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v395 = 136315906;
      *(_QWORD *)&v395[4] = "operator[]";
      *(_WORD *)&v395[12] = 1024;
      *(_DWORD *)&v395[14] = 609;
      *(_WORD *)&v395[18] = 2048;
      *(_QWORD *)&v395[20] = (v6 + 1);
      v396 = 2048;
      *(_QWORD *)v397 = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_691;
    }
    *(_OWORD *)(v4 + 16 * v7) = xmmword_226108EE0;
LABEL_467:
    if ((_DWORD)v20)
    {
      v20 = 0;
      while (1)
      {
        v6 = *((_QWORD *)&v371 + 1);
        if (v20)
        {
          v7 = v20 - 1;
          if (*((_QWORD *)&v371 + 1) <= v20 - 1)
            goto LABEL_676;
          v256 = *(_DWORD *)(v373 + 4 * v7);
        }
        else
        {
          v256 = 0;
        }
        if (*((_QWORD *)&v371 + 1) <= v20)
          goto LABEL_671;
        v257 = *(unsigned int *)(v373 + 4 * v20);
        if (v256 < v257)
          break;
LABEL_482:
        if (++v20 == v5)
          goto LABEL_483;
      }
      v6 = v256;
      if (v256 <= v254)
        v7 = v254;
      else
        v7 = v256;
      v258 = 8 * v256;
      while (1)
      {
        v8 = *((_QWORD *)&v365 + 1);
        if (*((_QWORD *)&v365 + 1) <= v6)
          goto LABEL_624;
        if (v7 == v6)
          goto LABEL_625;
        v255.i32[0] = *(_DWORD *)(v367 + v258 + 4);
        v255.f32[1] = -*(float *)(v367 + v258);
        v259 = (int32x4_t)vmulq_f32(v255, v255);
        v259.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v259, 2), vadd_f32(*(float32x2_t *)v259.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v259.i8, 1))).u32[0];
        v260 = vrsqrte_f32((float32x2_t)v259.u32[0]);
        v261 = vmul_f32(v260, vrsqrts_f32((float32x2_t)v259.u32[0], vmul_f32(v260, v260)));
        *(float32x4_t *)(v4 + 16 * v6++) = vmulq_n_f32(v255, vmul_f32(v261, vrsqrts_f32((float32x2_t)v259.u32[0], vmul_f32(v261, v261))).f32[0]);
        v258 += 8;
        if (v257 == v6)
          goto LABEL_482;
      }
    }
LABEL_483:
    if (*(_QWORD *)v398 && *(_QWORD *)&v400[2])
      (*(void (**)(void))(**(_QWORD **)v398 + 40))();
    v7 = (unint64_t)v341;
    v6 = 24;
    if (*(_QWORD *)buf && *(_QWORD *)&buf[32])
      (*(void (**)(void))(**(_QWORD **)buf + 40))();
    v176 = (_BYTE *)a4;
LABEL_490:
    if (v310)
    {
      v262 = v176[10];
      v20 = v176[11];
      v9 = *((_QWORD *)&v365 + 1);
      v6 = DWORD2(v371);
      v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v329[1] - (char *)v329[0]) >> 2);
      v19 = *(unsigned int *)&v346[40];
      *(_QWORD *)&buf[32] = 0;
      memset(buf, 0, 28);
      *(_QWORD *)&v400[2] = 0;
      memset(v398, 0, sizeof(v398));
      *(_QWORD *)&v397[2] = 0;
      memset(v395, 0, sizeof(v395));
      re::DynamicArray<re::GeomCell4>::resize(buf, *(unsigned int *)&v346[40]);
      re::DynamicArray<re::GeomCell4>::resize(v398, v19);
      re::DynamicArray<float>::resize((uint64_t)v395, v19);
      if ((_DWORD)v5)
      {
        v263 = 0;
        v4 = *(_QWORD *)&buf[16];
        v264 = *(_QWORD *)&buf[32];
        v7 = *(_QWORD *)&v398[16];
        v265 = *(_QWORD *)&v400[2];
        v266.i64[1] = -1;
        v266.i64[0] = v9 | 0xFFFFFFFF00000000;
        v267 = vzip1q_s32(v266, v266);
        v267.i32[2] = v9;
        do
        {
          if (v4 == v263)
            goto LABEL_664;
          *(_OWORD *)(v264 + 16 * v263) = xmmword_2261326D0;
          if (v7 == v263)
            goto LABEL_665;
          *(int32x4_t *)(v265 + 16 * v263++) = v267;
        }
        while (v5 != v263);
        if ((_DWORD)v20)
        {
          v268 = 0;
          v269 = *(_QWORD *)&buf[32];
          v8 = *(_QWORD *)&v398[16];
          v270 = *(_QWORD *)&v400[2];
          while (1)
          {
            v7 = (v5 + v268);
            if (v4 <= v7)
              break;
            *(_OWORD *)(v269 + 16 * v7) = xmmword_2261326E0;
            if (v8 <= v7)
              goto LABEL_673;
            *(int32x4_t *)(v270 + 16 * v7) = v267;
            if ((_DWORD)v5 == ++v268)
              goto LABEL_501;
          }
LABEL_672:
          *(_QWORD *)v342 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v401 = 136315906;
          *(_QWORD *)&v401[4] = "operator[]";
          *(_WORD *)&v401[12] = 1024;
          *(_DWORD *)&v401[14] = 789;
          *(_WORD *)&v401[18] = 2048;
          *(_QWORD *)&v401[20] = v7;
          v402 = 2048;
          v403 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_673:
          *(_QWORD *)v342 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v401 = 136315906;
          *(_QWORD *)&v401[4] = "operator[]";
          *(_WORD *)&v401[12] = 1024;
          *(_DWORD *)&v401[14] = 789;
          *(_WORD *)&v401[18] = 2048;
          *(_QWORD *)&v401[20] = v7;
          v402 = 2048;
          v403 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_674:
          *(_QWORD *)v401 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v395 = 136315906;
          *(_QWORD *)&v395[4] = "operator[]";
          *(_WORD *)&v395[12] = 1024;
          *(_DWORD *)&v395[14] = 797;
          *(_WORD *)&v395[18] = 2048;
          *(_QWORD *)&v395[20] = v20;
          v396 = 2048;
          *(_QWORD *)v397 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_675:
          *(_QWORD *)v401 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v395 = 136315906;
          *(_QWORD *)&v395[4] = "operator[]";
          *(_WORD *)&v395[12] = 1024;
          *(_DWORD *)&v395[14] = 797;
          *(_WORD *)&v395[18] = 2048;
          *(_QWORD *)&v395[20] = v8;
          v396 = 2048;
          *(_QWORD *)v397 = v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_676:
          *(_QWORD *)v401 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v395 = 136315906;
          *(_QWORD *)&v395[4] = "operator[]";
          *(_WORD *)&v395[12] = 1024;
          *(_DWORD *)&v395[14] = 797;
          *(_WORD *)&v395[18] = 2048;
          *(_QWORD *)&v395[20] = v7;
          v396 = 2048;
          *(_QWORD *)v397 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_677:
          *(_QWORD *)v342 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v401 = 136315906;
          *(_QWORD *)&v401[4] = "operator[]";
          *(_WORD *)&v401[12] = 1024;
          *(_DWORD *)&v401[14] = 797;
          *(_WORD *)&v401[18] = 2048;
          *(_QWORD *)&v401[20] = v4;
          v402 = 2048;
          v403 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_678:
          *(_QWORD *)v342 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v401 = 136315906;
          *(_QWORD *)&v401[4] = "operator[]";
          *(_WORD *)&v401[12] = 1024;
          *(_DWORD *)&v401[14] = 797;
          *(_WORD *)&v401[18] = 2048;
          *(_QWORD *)&v401[20] = v20;
          v402 = 2048;
          v403 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_679:
          *(_QWORD *)v401 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v395 = 136315906;
          *(_QWORD *)&v395[4] = "operator[]";
          *(_WORD *)&v395[12] = 1024;
          *(_DWORD *)&v395[14] = 797;
          *(_WORD *)&v395[18] = 2048;
          *(_QWORD *)&v395[20] = v6;
          v396 = 2048;
          *(_QWORD *)v397 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_680:
          *(_QWORD *)buf = 0;
          memset(v346, 0, 80);
          v217 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(__s[0]) = 136315906;
          *(char **)((char *)__s + 4) = "operator[]";
          WORD2(__s[1]) = 1024;
          *(_DWORD *)((char *)&__s[1] + 6) = 789;
          WORD1(__s[2]) = 2048;
          *(char **)((char *)&__s[2] + 4) = (char *)v4;
          WORD2(__s[3]) = 2048;
          *(char **)((char *)&__s[3] + 6) = (char *)v19;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_681:
          *(_QWORD *)v401 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v395 = 136315906;
          *(_QWORD *)&v395[4] = "operator[]";
          *(_WORD *)&v395[12] = 1024;
          *(_DWORD *)&v395[14] = 797;
          *(_WORD *)&v395[18] = 2048;
          *(_QWORD *)&v395[20] = v217;
          v396 = 2048;
          *(_QWORD *)v397 = v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_682:
          *(_QWORD *)v401 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v395 = 136315906;
          *(_QWORD *)&v395[4] = "operator[]";
          *(_WORD *)&v395[12] = 1024;
          *(_DWORD *)&v395[14] = 797;
          *(_WORD *)&v395[18] = 2048;
          *(_QWORD *)&v395[20] = v6;
          v396 = 2048;
          *(_QWORD *)v397 = v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_683:
          *(_QWORD *)v401 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v395 = 136315906;
          *(_QWORD *)&v395[4] = "operator[]";
          *(_WORD *)&v395[12] = 1024;
          *(_DWORD *)&v395[14] = 797;
          *(_WORD *)&v395[18] = 2048;
          *(_QWORD *)&v395[20] = v6;
          v396 = 2048;
          *(_QWORD *)v397 = v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_684:
          *(_QWORD *)v401 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v395 = 136315906;
          *(_QWORD *)&v395[4] = "operator[]";
          *(_WORD *)&v395[12] = 1024;
          *(_DWORD *)&v395[14] = 609;
          *(_WORD *)&v395[18] = 2048;
          *(_QWORD *)&v395[20] = v20;
          v396 = 2048;
          *(_QWORD *)v397 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_685:
          *(_QWORD *)v401 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v395 = 136315906;
          *(_QWORD *)&v395[4] = "operator[]";
          *(_WORD *)&v395[12] = 1024;
          *(_DWORD *)&v395[14] = 609;
          *(_WORD *)&v395[18] = 2048;
          *(_QWORD *)&v395[20] = v20;
          v396 = 2048;
          *(_QWORD *)v397 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_686:
          *(_QWORD *)v342 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v401 = 136315906;
          *(_QWORD *)&v401[4] = "operator[]";
          *(_WORD *)&v401[12] = 1024;
          *(_DWORD *)&v401[14] = 797;
          *(_WORD *)&v401[18] = 2048;
          *(_QWORD *)&v401[20] = v5;
          v402 = 2048;
          v403 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_687:
          *(_QWORD *)v342 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v401 = 136315906;
          *(_QWORD *)&v401[4] = "operator[]";
          *(_WORD *)&v401[12] = 1024;
          *(_DWORD *)&v401[14] = 797;
          *(_WORD *)&v401[18] = 2048;
          *(_QWORD *)&v401[20] = v7;
          v402 = 2048;
          v403 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_688:
          *(_QWORD *)v401 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v395 = 136315906;
          *(_QWORD *)&v395[4] = "operator[]";
          *(_WORD *)&v395[12] = 1024;
          *(_DWORD *)&v395[14] = 797;
          *(_WORD *)&v395[18] = 2048;
          *(_QWORD *)&v395[20] = v6;
          v396 = 2048;
          *(_QWORD *)v397 = v20;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_689:
          abort();
        }
      }
LABEL_501:
      if (v262)
        v271 = v6 == 0;
      else
        v271 = 1;
      v8 = !v271;
      if (!v271)
      {
        v272 = 0;
        if ((_DWORD)v20)
          v273 = v5;
        else
          v273 = 0;
        v274 = v273 + v5;
        v4 = *((_QWORD *)&v371 + 1);
        v275 = v373;
        v20 = *(_QWORD *)&buf[16];
        while (1)
        {
          if (v272)
          {
            v5 = v272 - 1;
            if (v4 <= v272 - 1)
              goto LABEL_686;
            v276 = *(_DWORD *)(v275 + 4 * v5);
          }
          else
          {
            v276 = 0;
          }
          if (v272 == v4)
            goto LABEL_677;
          v277 = *(_DWORD *)(v275 + 4 * v272) - 1;
          if (v276 < v277)
            break;
LABEL_524:
          if (++v272 == v6)
            goto LABEL_525;
        }
        v278 = *(_QWORD *)&buf[32];
        v5 = *(_QWORD *)&v398[16];
        v279 = *(_QWORD *)&v400[2];
        while (1)
        {
          v7 = v274;
          if (v20 <= v274)
            goto LABEL_628;
          *(_OWORD *)(v278 + 16 * v274) = xmmword_2261326F0;
          v280 = v274 + 1;
          if (v20 <= v280)
            goto LABEL_629;
          *(_OWORD *)(v278 + 16 * v280) = xmmword_2261326F0;
          if (v5 <= v274)
            goto LABEL_630;
          v281 = (unsigned int *)(v279 + 16 * v274);
          *v281 = v276;
          v281[1] = v276++;
          v281[2] = v276;
          v281[3] = -1;
          if (v5 <= v280)
            goto LABEL_631;
          v282 = (_DWORD *)(v279 + 16 * v280);
          *v282 = v276 - 1;
          v282[1] = v276;
          v282[2] = v276;
          v282[3] = -1;
          v274 = v7 + 2;
          if (v276 == v277)
            goto LABEL_524;
        }
      }
LABEL_525:
      if (v19)
      {
        v283 = 0;
        v4 = *(_QWORD *)&v395[16];
        v284 = *(_QWORD *)&v397[2];
        while (v4 != v283)
        {
          *(_DWORD *)(v284 + 4 * v283) = v283;
          if (v19 == ++v283)
            goto LABEL_529;
        }
LABEL_670:
        *(_QWORD *)v342 = 0;
        v380 = 0u;
        v379 = 0u;
        memset(__s, 0, sizeof(__s));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v401 = 136315906;
        *(_QWORD *)&v401[4] = "operator[]";
        *(_WORD *)&v401[12] = 1024;
        *(_DWORD *)&v401[14] = 789;
        *(_WORD *)&v401[18] = 2048;
        *(_QWORD *)&v401[20] = v4;
        v402 = 2048;
        v403 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_671:
        *(_QWORD *)v401 = 0;
        v380 = 0u;
        v379 = 0u;
        memset(__s, 0, sizeof(__s));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v395 = 136315906;
        *(_QWORD *)&v395[4] = "operator[]";
        *(_WORD *)&v395[12] = 1024;
        *(_DWORD *)&v395[14] = 797;
        *(_WORD *)&v395[18] = 2048;
        *(_QWORD *)&v395[20] = v20;
        v396 = 2048;
        *(_QWORD *)v397 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_672;
      }
LABEL_529:
      v285 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v346, "vertexTangent", 7, 3, (uint64_t *)buf, (uint64_t *)v395);
      v286 = re::GeomMesh::addFaceVaryingAttribute((uint64_t)v346, "vertexBitangent", 7, (int)v9 + 3, (uint64_t *)v398, (uint64_t *)v395);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v285 + 16))(v285))
      {
        v287 = (_OWORD *)re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v285, 0);
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v285 + 16))(v285);
      }
      else
      {
        v5 = 0;
        v287 = 0;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v286 + 16))(v286))
      {
        v4 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v286, 0);
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v286 + 16))(v286);
      }
      else
      {
        v19 = 0;
        v4 = 0;
      }
      if ((_DWORD)v5)
      {
        *v287 = xmmword_2260E5F10;
        if ((_DWORD)v5 != 1)
        {
          v287[1] = xmmword_2260E5F30;
          if (v5 > 2)
          {
            v20 = v9;
            v287[2] = xmmword_226108EE0;
            if (v19 > v9)
            {
              v288.i32[3] = 0;
              *(_OWORD *)(v4 + 16 * v9) = xmmword_2260E5F20;
              v7 = (unint64_t)v341;
              if ((_DWORD)v8)
              {
                v20 = 0;
                while (1)
                {
                  v5 = *((_QWORD *)&v371 + 1);
                  if (v20)
                  {
                    v7 = v20 - 1;
                    if (*((_QWORD *)&v371 + 1) <= v20 - 1)
                      goto LABEL_687;
                    v289 = *(_DWORD *)(v373 + 4 * v7);
                  }
                  else
                  {
                    v289 = 0;
                  }
                  if (*((_QWORD *)&v371 + 1) <= v20)
                    goto LABEL_678;
                  v290 = *(unsigned int *)(v373 + 4 * v20);
                  if (v289 < v290)
                    break;
LABEL_553:
                  ++v20;
                  v7 = (unint64_t)v341;
                  if (v20 == v6)
                    goto LABEL_554;
                }
                v5 = v289;
                if (v289 <= v19)
                  v7 = v19;
                else
                  v7 = v289;
                while (1)
                {
                  v8 = *((_QWORD *)&v365 + 1);
                  if (*((_QWORD *)&v365 + 1) <= v5)
                    goto LABEL_632;
                  if (v7 == v5)
                    goto LABEL_633;
                  v288.i64[0] = *(_QWORD *)(v367 + 8 * v5);
                  v288.i32[2] = 0;
                  v291 = (int32x4_t)vmulq_f32(v288, v288);
                  v291.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v291, 2), vadd_f32(*(float32x2_t *)v291.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v291.i8, 1))).u32[0];
                  v292 = vrsqrte_f32((float32x2_t)v291.u32[0]);
                  v293 = vmul_f32(v292, vrsqrts_f32((float32x2_t)v291.u32[0], vmul_f32(v292, v292)));
                  v288 = vmulq_n_f32(v288, vmul_f32(v293, vrsqrts_f32((float32x2_t)v291.u32[0], vmul_f32(v293, v293))).f32[0]);
                  *(float32x4_t *)(v4 + 16 * v5++) = v288;
                  if (v290 == v5)
                    goto LABEL_553;
                }
              }
LABEL_554:
              if (*(_QWORD *)v395 && *(_QWORD *)&v397[2])
                (*(void (**)(void))(**(_QWORD **)v395 + 40))();
              v6 = 24;
              if (*(_QWORD *)v398 && *(_QWORD *)&v400[2])
                (*(void (**)(void))(**(_QWORD **)v398 + 40))();
              if (*(_QWORD *)buf && *(_QWORD *)&buf[32])
                (*(void (**)(void))(**(_QWORD **)buf + 40))();
              goto LABEL_563;
            }
LABEL_694:
            *(_QWORD *)v342 = 0;
            v380 = 0u;
            v379 = 0u;
            memset(__s, 0, sizeof(__s));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v401 = 136315906;
            *(_QWORD *)&v401[4] = "operator[]";
            *(_WORD *)&v401[12] = 1024;
            *(_DWORD *)&v401[14] = 609;
            *(_WORD *)&v401[18] = 2048;
            *(_QWORD *)&v401[20] = v20;
            v402 = 2048;
            v403 = v19;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_693:
          *(_QWORD *)v342 = 0;
          v380 = 0u;
          v379 = 0u;
          memset(__s, 0, sizeof(__s));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v401 = 136315906;
          *(_QWORD *)&v401[4] = "operator[]";
          *(_WORD *)&v401[12] = 1024;
          *(_DWORD *)&v401[14] = 609;
          *(_WORD *)&v401[18] = 2048;
          *(_QWORD *)&v401[20] = 2;
          v402 = 2048;
          v403 = 2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_694;
        }
LABEL_692:
        *(_QWORD *)v342 = 0;
        v380 = 0u;
        v379 = 0u;
        memset(__s, 0, sizeof(__s));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v401 = 136315906;
        *(_QWORD *)&v401[4] = "operator[]";
        *(_WORD *)&v401[12] = 1024;
        *(_DWORD *)&v401[14] = 609;
        *(_WORD *)&v401[18] = 2048;
        *(_QWORD *)&v401[20] = 1;
        v402 = 2048;
        v403 = 1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_693;
      }
LABEL_691:
      *(_QWORD *)v342 = 0;
      v380 = 0u;
      v379 = 0u;
      memset(__s, 0, sizeof(__s));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v401 = 136315906;
      *(_QWORD *)&v401[4] = "operator[]";
      *(_WORD *)&v401[12] = 1024;
      *(_DWORD *)&v401[14] = 609;
      *(_WORD *)&v401[18] = 2048;
      *(_QWORD *)&v401[20] = 0;
      v402 = 2048;
      v403 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_692;
    }
LABEL_563:
    re::GeomMeshBuilder::appendMesh((re::GeomMeshBuilder *)v374, (const re::GeomMesh *)v346);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v346, v294);
    if (v329[0])
    {
      v329[1] = v329[0];
      operator delete(v329[0]);
    }
    v20 = (unint64_t)&v374[8];
    if (*((_QWORD *)&v370 + 1))
    {
      if (v373)
        (*(void (**)(void))(**((_QWORD **)&v370 + 1) + 40))();
      v373 = 0;
      v371 = 0uLL;
      *((_QWORD *)&v370 + 1) = 0;
      ++v372;
    }
    if (*((_QWORD *)&v367 + 1))
    {
      if ((_QWORD)v370)
        (*(void (**)(void))(**((_QWORD **)&v367 + 1) + 40))();
      *(_QWORD *)&v370 = 0;
      v368 = 0uLL;
      *((_QWORD *)&v367 + 1) = 0;
      ++v369;
    }
    if (*((_QWORD *)&v364 + 1))
    {
      if ((_QWORD)v367)
        (*(void (**)(void))(**((_QWORD **)&v364 + 1) + 40))();
      *(_QWORD *)&v367 = 0;
      v365 = 0uLL;
      *((_QWORD *)&v364 + 1) = 0;
      ++v366;
    }
    if (*(_QWORD *)&v360[32] && (_QWORD)v364)
      (*(void (**)(void))(**(_QWORD **)&v360[32] + 40))();
    v4 = v314 + 1;
  }
  while (v314 + 1 != v307);
LABEL_581:
  v295 = (re *)re::GeomMesh::operator=(a1, &v374[8]);
  v296 = re::GeomMesh::setName(v295, *(const char **)v374);
  v297 = *(_QWORD *)v374;
  if (*(_QWORD *)v374)
  {
    v298 = re::globalAllocators(v296);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v298[2] + 40))(v298[2], v297);
    *(_QWORD *)v374 = 0;
  }
  re::GeomMeshBuilder::~GeomMeshBuilder((re::GeomMeshBuilder *)v374);
  v299 = v331;
  if (v331 && v335)
  {
    if (v333)
    {
      v300 = 224 * v333;
      v301 = (uint64_t *)(v335 + 176);
      do
      {
        v302 = *(v301 - 6);
        if (v302)
        {
          if (*(v301 - 2))
            (*(void (**)(uint64_t))(*(_QWORD *)v302 + 40))(v302);
          *(v301 - 2) = 0;
          *(v301 - 5) = 0;
          *(v301 - 4) = 0;
          *(v301 - 6) = 0;
          ++*((_DWORD *)v301 - 6);
        }
        v303 = *(v301 - 11);
        if (v303)
        {
          if (*(v301 - 7))
            (*(void (**)(uint64_t))(*(_QWORD *)v303 + 40))(v303);
          *(v301 - 7) = 0;
          *(v301 - 10) = 0;
          *(v301 - 9) = 0;
          *(v301 - 11) = 0;
          ++*((_DWORD *)v301 - 16);
        }
        v304 = *(v301 - 16);
        if (v304)
        {
          if (*(v301 - 12))
            (*(void (**)(uint64_t))(*(_QWORD *)v304 + 40))(v304);
          *(v301 - 12) = 0;
          *(v301 - 15) = 0;
          *(v301 - 14) = 0;
          *(v301 - 16) = 0;
          ++*((_DWORD *)v301 - 26);
        }
        v301 += 28;
        v300 -= 224;
      }
      while (v300);
      v299 = v331;
    }
    (*(void (**)(uint64_t *))(*v299 + 40))(v299);
  }
}

uint64_t *re::DynamicArray<re::`anonymous namespace'::PiecewiseBezierCurve>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  if (v2)
  {
    v3 = a1[4];
    if (v3)
    {
      v4 = a1[2];
      if (v4)
      {
        v5 = 176 * v4;
        v6 = v3 + 80;
        do
        {
          v7 = *(_QWORD *)(v6 + 48);
          if (v7)
          {
            if (*(_QWORD *)(v6 + 80))
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *(_QWORD *)(v6 + 80) = 0;
            *(_QWORD *)(v6 + 56) = 0;
            *(_QWORD *)(v6 + 64) = 0;
            *(_QWORD *)(v6 + 48) = 0;
            ++*(_DWORD *)(v6 + 72);
          }
          v8 = *(_QWORD *)(v6 + 8);
          if (v8)
          {
            if (*(_QWORD *)(v6 + 40))
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
            *(_QWORD *)(v6 + 40) = 0;
            *(_QWORD *)(v6 + 16) = 0;
            *(_QWORD *)(v6 + 24) = 0;
            *(_QWORD *)(v6 + 8) = 0;
            ++*(_DWORD *)(v6 + 32);
          }
          v9 = *(_QWORD *)(v6 - 32);
          if (v9)
          {
            if (*(_QWORD *)v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
            *(_QWORD *)v6 = 0;
            *(_QWORD *)(v6 - 24) = 0;
            *(_QWORD *)(v6 - 16) = 0;
            *(_QWORD *)(v6 - 32) = 0;
            ++*(_DWORD *)(v6 - 8);
          }
          v6 += 176;
          v5 -= 176;
        }
        while (v5);
        v2 = *a1;
        v3 = a1[4];
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v3);
    }
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

_QWORD *re::`anonymous namespace'::extractControlPointsCallback(_QWORD *this, uint64_t a2, const CGPathElement *a3)
{
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  __n128 v9;
  float32x4_t *v10;
  unsigned int v11;
  float32x2_t v12;
  char v13[16];
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (this && a2)
  {
    v4 = (uint64_t)this;
    switch(*(_DWORD *)a2)
    {
      case 0:
        v13[0] = 1;
        v5.i64[0] = 0x7F0000007FLL;
        v5.i64[1] = 0x7F0000007FLL;
        v14 = (float32x4_t)vdupq_n_s32(0x7F800000u);
        v15 = v5;
        v17 = 0;
        v18 = 0;
        v16 = 0;
        v19 = 0;
        v26 = 0;
        v20 = 0u;
        v21 = 0u;
        v23 = 0u;
        v24 = 0u;
        v22 = 0;
        v25 = 0;
        v12 = vcvt_f32_f64(*(float64x2_t *)*(_QWORD *)(a2 + 8));
        re::DynamicArray<unsigned long>::add((_QWORD *)&v23 + 1, &v12);
        v6 = *(float32x4_t *)*(_QWORD *)(a2 + 8);
        *(float32x2_t *)v6.f32 = vcvt_f32_f64((float64x2_t)v6);
        v7 = v14;
        v8 = v15;
        v7.i32[3] = 0;
        v8.i32[3] = 0;
        v14 = vminnmq_f32(v7, v6);
        v15 = vmaxnmq_f32(v8, v6);
        if (*((_QWORD *)&v23 + 1))
        {
          if (v26)
            (*(void (**)(__n128))(**((_QWORD **)&v23 + 1) + 40))(v9);
          v26 = 0;
          v24 = 0uLL;
          *((_QWORD *)&v23 + 1) = 0;
          ++v25;
        }
        if (*((_QWORD *)&v20 + 1))
        {
          if ((_QWORD)v23)
            (*(void (**)(__n128))(**((_QWORD **)&v20 + 1) + 40))(v9);
          *(_QWORD *)&v23 = 0;
          v21 = 0uLL;
          *((_QWORD *)&v20 + 1) = 0;
          ++v22;
        }
        this = (_QWORD *)v16;
        if (v16)
        {
          if ((_QWORD)v20)
            return (_QWORD *)(*(uint64_t (**)(__n128))(*(_QWORD *)v16 + 40))(v9);
        }
        return this;
      case 1:
        v10 = (float32x4_t *)(this[4] + 176 * this[2] - 176);
        v11 = 1;
        goto LABEL_19;
      case 2:
        v10 = (float32x4_t *)(this[4] + 176 * this[2] - 176);
        v11 = 2;
        goto LABEL_19;
      case 3:
        v10 = (float32x4_t *)(this[4] + 176 * this[2] - 176);
        v11 = 3;
LABEL_19:
        break;
      case 4:
        return this;
      default:
        re::internal::assertLog((re::internal *)4, a2, a3, "assertion failure: '%s' (%s:line %i) Unknown element type!", "!\"Unreachable code\"", "extractControlPointsCallback", 155);
        _os_crash();
        __break(1u);
        JUMPOUT(0x2258D6370);
    }
  }
  return this;
}

__n128 re::DynamicArray<re::`anonymous namespace'::PiecewiseBezierCurve>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __n128 result;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)a1)
    {
      v20 = 2 * v4;
      v21 = v4 == 0;
      v22 = 8;
      if (!v21)
        v22 = v20;
      if (v22 <= v6)
        v23 = v6;
      else
        v23 = v22;
    }
    else
    {
      ++*(_DWORD *)(a1 + 24);
    }
  }
  v8 = *(_QWORD *)(a1 + 32) + 176 * *(_QWORD *)(a1 + 16);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)v8 = result;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_DWORD *)(v8 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 56) = v11;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v12 = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v12;
  v13 = *(_QWORD *)(v8 + 80);
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v13;
  ++*(_DWORD *)(a2 + 72);
  ++*(_DWORD *)(v8 + 72);
  *(_QWORD *)(v8 + 120) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_DWORD *)(v8 + 112) = 0;
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v8 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v8 + 96) = v14;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  v15 = *(_QWORD *)(v8 + 104);
  *(_QWORD *)(v8 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v15;
  v16 = *(_QWORD *)(v8 + 120);
  *(_QWORD *)(v8 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v16;
  ++*(_DWORD *)(a2 + 112);
  ++*(_DWORD *)(v8 + 112);
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 128) = 0;
  *(_DWORD *)(v8 + 152) = 0;
  v17 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(v8 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(v8 + 136) = v17;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v18 = *(_QWORD *)(v8 + 144);
  *(_QWORD *)(v8 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v18;
  v19 = *(_QWORD *)(v8 + 160);
  *(_QWORD *)(v8 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v19;
  ++*(_DWORD *)(a2 + 152);
  ++*(_DWORD *)(v8 + 152);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_QWORD *re::`anonymous namespace'::addCGElementToBoundaryHelper(unsigned int a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x2_t v13;
  char v14;

  v14 = a1;
  if (a2->u8[0] < a1)
    a2->i8[0] = a1;
  v5 = 0;
  v6 = a1;
  if (a1 <= 1uLL)
    v7 = 1;
  else
    v7 = a1;
  v8 = 16 * v7;
  do
  {
    v13 = vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)(a3 + 8) + v5));
    re::DynamicArray<unsigned long>::add((float32x4_t *)a2[8].i64, &v13);
    v9 = *(float32x4_t *)(*(_QWORD *)(a3 + 8) + v5);
    *(float32x2_t *)v9.f32 = vcvt_f32_f64((float64x2_t)v9);
    v10 = a2[1];
    v11 = a2[2];
    v10.i32[3] = 0;
    v11.i32[3] = 0;
    a2[1] = vminnmq_f32(v10, v9);
    a2[2] = vmaxnmq_f32(v11, v9);
    v5 += 16;
  }
  while (v8 != v5);
  v13 = (float32x2_t)(a2[9].i64[0] + ~v6);
  re::DynamicArray<unsigned long>::add(&a2[5].i64[1], &v13);
  return re::DynamicArray<unsigned char>::add((float32x4_t *)a2[3].i64, &v14);
}

_QWORD *re::DynamicArray<re::`anonymous namespace'::PiecewiseBezierCurve>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xB0uLL))
        {
          v2 = 176 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 176 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_28;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 176, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_28:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 176 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v14 = *(_OWORD *)(v8 + v10);
          v15 = *(_OWORD *)(v8 + v10 + 32);
          *((_OWORD *)v12 + 1) = *(_OWORD *)(v8 + v10 + 16);
          *((_OWORD *)v12 + 2) = v15;
          *(_OWORD *)v12 = v14;
          v12[10] = 0;
          v12[7] = 0;
          v12[8] = 0;
          v12[6] = 0;
          *((_DWORD *)v12 + 18) = 0;
          v16 = (_QWORD *)(v8 + v10 + 48);
          v17 = *(_QWORD *)(v8 + v10 + 56);
          v12[6] = *v16;
          *v16 = 0;
          v12[7] = v17;
          *(_QWORD *)(v13 + 56) = 0;
          v18 = v7[v10 / 8 + 8];
          v12[8] = *(_QWORD *)(v8 + v10 + 64);
          *(_QWORD *)(v13 + 64) = v18;
          v19 = v7[v10 / 8 + 10];
          v12[10] = *(_QWORD *)(v8 + v10 + 80);
          *(_QWORD *)(v13 + 80) = v19;
          *(_DWORD *)(v13 + 72) = *(_DWORD *)(v8 + v10 + 72) + 1;
          LODWORD(v19) = LODWORD(v7[v10 / 8 + 9]) + 1;
          v12[15] = 0;
          v12[12] = 0;
          v12[13] = 0;
          v12[11] = 0;
          *((_DWORD *)v12 + 28) = 0;
          v21 = (_QWORD *)(v8 + v10 + 88);
          v20 = *v21;
          *((_DWORD *)v12 + 18) = v19;
          v22 = *(_QWORD *)(v8 + v10 + 96);
          v12[11] = v20;
          *v21 = 0;
          v12[12] = v22;
          *(_QWORD *)(v13 + 96) = 0;
          v23 = v7[v10 / 8 + 13];
          v12[13] = *(_QWORD *)(v8 + v10 + 104);
          *(_QWORD *)(v13 + 104) = v23;
          v24 = v7[v10 / 8 + 15];
          v12[15] = *(_QWORD *)(v8 + v10 + 120);
          *(_QWORD *)(v13 + 120) = v24;
          *(_DWORD *)(v13 + 112) = *(_DWORD *)(v8 + v10 + 112) + 1;
          *((_DWORD *)v12 + 28) = LODWORD(v7[v10 / 8 + 14]) + 1;
          v12[20] = 0;
          v12[17] = 0;
          v12[18] = 0;
          v12[16] = 0;
          *((_DWORD *)v12 + 38) = 0;
          v25 = (_QWORD *)(v8 + v10 + 128);
          v26 = *(_QWORD *)(v8 + v10 + 136);
          v12[16] = *v25;
          *v25 = 0;
          v12[17] = v26;
          *(_QWORD *)(v13 + 136) = 0;
          v27 = v7[v10 / 8 + 18];
          v12[18] = *(_QWORD *)(v8 + v10 + 144);
          *(_QWORD *)(v13 + 144) = v27;
          v28 = v7[v10 / 8 + 20];
          v12[20] = *(_QWORD *)(v8 + v10 + 160);
          *(_QWORD *)(v13 + 160) = v28;
          *(_DWORD *)(v13 + 152) = *(_DWORD *)(v8 + v10 + 152) + 1;
          *((_DWORD *)v12 + 38) = LODWORD(v7[v10 / 8 + 19]) + 1;
          if (*v25)
          {
            if (v28)
              (*(void (**)(_QWORD))(*(_QWORD *)*v25 + 40))(*v25);
            *(_QWORD *)(v13 + 160) = 0;
            *(_QWORD *)(v8 + v10 + 136) = 0;
            *(_QWORD *)(v8 + v10 + 144) = 0;
            *v25 = 0;
            ++*(_DWORD *)(v13 + 152);
          }
          if (*v21)
          {
            if (*(_QWORD *)(v13 + 120))
              (*(void (**)(_QWORD))(*(_QWORD *)*v21 + 40))(*v21);
            *(_QWORD *)(v13 + 120) = 0;
            *(_QWORD *)(v8 + v10 + 96) = 0;
            *(_QWORD *)(v8 + v10 + 104) = 0;
            *v21 = 0;
            ++*(_DWORD *)(v13 + 112);
          }
          if (*v16)
          {
            if (*(_QWORD *)(v13 + 80))
              (*(void (**)(_QWORD))(*(_QWORD *)*v16 + 40))(*v16);
            *(_QWORD *)(v13 + 80) = 0;
            *(_QWORD *)(v8 + v10 + 56) = 0;
            *(_QWORD *)(v8 + v10 + 64) = 0;
            *v16 = 0;
            ++*(_DWORD *)(v13 + 72);
          }
          v10 += 176;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,re::`anonymous namespace'::loadControlHullFromCoreText(__CTFont const*,unsigned short)::$_0 &,re::`anonymous namespace'::PiecewiseBezierCurve *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  __int128 v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  __int128 *v29;
  unint64_t v30;
  __int128 *v31;
  float32x4_t v32;
  float32x4_t v33;
  unint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __int128 *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  __int128 *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  float32x4_t v50;
  BOOL v51;
  __int128 v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t v68;
  __int128 *v69;
  unint64_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  __int128 *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  __int128 *v90;
  __int128 *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  unint64_t v116;
  __int128 v117;
  float32x4_t v118;
  __int128 v119;
  uint64_t v120;
  float32x4_t *v121;
  float32x4_t v122;
  uint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  uint64_t v128;
  __int128 v129;
  float32x4_t v130;
  float32x4_t v131;
  int64_t v132;
  int64_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  uint64_t v144;
  __int128 v145;
  float32x4_t v146;
  float32x4_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  __int128 v161;
  float32x4_t v162;
  int64_t v163;
  __int128 *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _OWORD *v171;
  uint64_t v172;
  float32x4_t *v173;
  uint64_t v174;
  uint64_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  __int128 v182;
  float32x4_t v183;
  uint64_t v184;
  unint64_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  __int128 v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t *v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  __int128 v199;
  float32x4_t v200;
  uint64_t v202;
  float32x4_t *v203;
  float32x4_t v204;
  uint64_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  __int128 v210;
  float32x4_t v211;
  __int128 v212;
  float32x4_t *v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  __int128 v221;
  float32x4_t v222;
  __int128 *v223;
  __int128 *v224;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  int64_t v229;
  __int128 *v230;
  float32x4_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  _QWORD v235[3];
  int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  __int128 v248;
  __int128 v249;
  float32x4_t v250;
  uint64_t v251;
  __int128 v252;
  int v253;
  __int128 v254;
  __int128 v255;
  int v256;
  __int128 v257;
  __int128 v258;
  int v259;
  uint64_t v260;
  uint64_t v261;

  v6 = result;
  v261 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v224 = (__int128 *)(a2 - 176);
  v7 = (__int128 *)v6;
  while (2)
  {
    v6 = (uint64_t)v7;
    v8 = a2 - (_QWORD)v7;
    v9 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a2 - (_QWORD)v7) >> 4);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v86 = vsubq_f32(*(float32x4_t *)(a2 - 144), *(float32x4_t *)(a2 - 160));
        v86.i32[3] = 0;
        v87 = vmaxnmq_f32(v86, (float32x4_t)0);
        v88 = vsubq_f32(*(float32x4_t *)(v6 + 32), *(float32x4_t *)(v6 + 16));
        v88.i32[3] = 0;
        v89 = vmaxnmq_f32(v88, (float32x4_t)0);
        if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v87, *(float32x2_t *)v87.f32, 1), vmulq_lane_f32(v89, *(float32x2_t *)v89.f32, 1))).u8[0] & 1) != 0)
        {
          v90 = (__int128 *)v6;
          v91 = (__int128 *)(a2 - 176);
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
        v92 = vsubq_f32(*(float32x4_t *)(a2 - 144), *(float32x4_t *)(a2 - 160));
        v92.i32[3] = 0;
        v93 = vmaxnmq_f32(v92, (float32x4_t)0);
        v94 = vsubq_f32(*(float32x4_t *)(v6 + 560), *(float32x4_t *)(v6 + 544));
        v94.i32[3] = 0;
        v95 = vmaxnmq_f32(v94, (float32x4_t)0);
        if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v93, *(float32x2_t *)v93.f32, 1), vmulq_lane_f32(v95, *(float32x2_t *)v95.f32, 1))).u8[0] & 1) != 0)
        {
          v96 = vsubq_f32(*(float32x4_t *)(v6 + 560), *(float32x4_t *)(v6 + 544));
          v96.i32[3] = 0;
          v97 = vmaxnmq_f32(v96, (float32x4_t)0);
          v98 = vsubq_f32(*(float32x4_t *)(v6 + 384), *(float32x4_t *)(v6 + 368));
          v98.i32[3] = 0;
          v99 = vmaxnmq_f32(v98, (float32x4_t)0);
          if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v97, *(float32x2_t *)v97.f32, 1), vmulq_lane_f32(v99, *(float32x2_t *)v99.f32, 1))).u8[0] & 1) != 0)
          {
            v100 = vsubq_f32(*(float32x4_t *)(v6 + 384), *(float32x4_t *)(v6 + 368));
            v100.i32[3] = 0;
            v101 = vmaxnmq_f32(v100, (float32x4_t)0);
            v102 = vsubq_f32(*(float32x4_t *)(v6 + 208), *(float32x4_t *)(v6 + 192));
            v102.i32[3] = 0;
            v103 = vmaxnmq_f32(v102, (float32x4_t)0);
            if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v101, *(float32x2_t *)v101.f32, 1), vmulq_lane_f32(v103, *(float32x2_t *)v103.f32, 1))).u8[0] & 1) != 0)
            {
              v104 = vsubq_f32(*(float32x4_t *)(v6 + 208), *(float32x4_t *)(v6 + 192));
              v104.i32[3] = 0;
              v105 = vmaxnmq_f32(v104, (float32x4_t)0);
              v106 = vsubq_f32(*(float32x4_t *)(v6 + 32), *(float32x4_t *)(v6 + 16));
              v106.i32[3] = 0;
              v107 = vmaxnmq_f32(v106, (float32x4_t)0);
              if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v105, *(float32x2_t *)v105.f32, 1), vmulq_lane_f32(v107, *(float32x2_t *)v107.f32, 1))).u8[0] & 1) != 0)
              {
                v90 = (__int128 *)v6;
                v91 = (__int128 *)(v6 + 176);
              }
            }
          }
        }
        return result;
      default:
        if (v8 > 4223)
        {
          if (!a3)
          {
            if (v6 != a2)
            {
              v223 = (__int128 *)a2;
              v131 = 0uLL;
              v229 = (v9 - 2) >> 1;
              v132 = v229;
              do
              {
                v133 = v132;
                if (v229 >= v132)
                {
                  v134 = (2 * v132) | 1;
                  v135 = v6 + 176 * v134;
                  if (2 * v133 + 2 < (uint64_t)v9)
                  {
                    v136 = vsubq_f32(*(float32x4_t *)(v6 + 176 * v134 + 32), *(float32x4_t *)(v6 + 176 * v134 + 16));
                    v136.i32[3] = 0;
                    v137 = vmaxnmq_f32(v136, v131);
                    v138 = vsubq_f32(*(float32x4_t *)(v135 + 208), *(float32x4_t *)(v135 + 192));
                    v138.i32[3] = 0;
                    v139 = vmaxnmq_f32(v138, v131);
                    if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v137, *(float32x2_t *)v137.f32, 1), vmulq_lane_f32(v139, *(float32x2_t *)v139.f32, 1))).u8[0] & 1) != 0)
                    {
                      v135 += 176;
                      v134 = 2 * v133 + 2;
                    }
                  }
                  v140 = vsubq_f32(*(float32x4_t *)(v135 + 32), *(float32x4_t *)(v135 + 16));
                  v140.i32[3] = 0;
                  v141 = vmaxnmq_f32(v140, v131);
                  v142 = vsubq_f32(*(float32x4_t *)(v6 + 176 * v133 + 32), *(float32x4_t *)(v6 + 176 * v133 + 16));
                  v142.i32[3] = 0;
                  v143 = vmaxnmq_f32(v142, v131);
                  if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v141, *(float32x2_t *)v141.f32, 1), vmulq_lane_f32(v143, *(float32x2_t *)v143.f32, 1))).u8[0] & 1) == 0)
                  {
                    v144 = v6 + 176 * v133;
                    v145 = *(_OWORD *)v144;
                    v146 = *(float32x4_t *)(v144 + 32);
                    v249 = *(_OWORD *)(v144 + 16);
                    v250 = v146;
                    v248 = v145;
                    v251 = *(_QWORD *)(v144 + 48);
                    *(_QWORD *)(v144 + 48) = 0;
                    *(_QWORD *)&v252 = *(_QWORD *)(v144 + 56);
                    *(_QWORD *)(v144 + 56) = 0;
                    *((_QWORD *)&v252 + 1) = *(_QWORD *)(v144 + 64);
                    *(_QWORD *)(v144 + 64) = 0;
                    *(_QWORD *)&v254 = *(_QWORD *)(v144 + 80);
                    *(_QWORD *)(v144 + 80) = 0;
                    ++*(_DWORD *)(v144 + 72);
                    v253 = 1;
                    *((_QWORD *)&v254 + 1) = *(_QWORD *)(v144 + 88);
                    *(_QWORD *)(v144 + 88) = 0;
                    *(_QWORD *)&v255 = *(_QWORD *)(v144 + 96);
                    *(_QWORD *)(v144 + 96) = 0;
                    *((_QWORD *)&v255 + 1) = *(_QWORD *)(v144 + 104);
                    *(_QWORD *)(v144 + 104) = 0;
                    *(_QWORD *)&v257 = *(_QWORD *)(v144 + 120);
                    *(_QWORD *)(v144 + 120) = 0;
                    ++*(_DWORD *)(v144 + 112);
                    v256 = 1;
                    *((_QWORD *)&v257 + 1) = *(_QWORD *)(v144 + 128);
                    *(_QWORD *)(v144 + 128) = 0;
                    *(_QWORD *)&v258 = *(_QWORD *)(v144 + 136);
                    *(_QWORD *)(v144 + 136) = 0;
                    *((_QWORD *)&v258 + 1) = *(_QWORD *)(v144 + 144);
                    *(_QWORD *)(v144 + 144) = 0;
                    v260 = *(_QWORD *)(v144 + 160);
                    *(_QWORD *)(v144 + 160) = 0;
                    ++*(_DWORD *)(v144 + 152);
                    v259 = 1;
                    v147 = vsubq_f32(v250, (float32x4_t)v249);
                    v147.i32[3] = 0;
                    v226 = v147;
                    do
                    {
                      v148 = v135;
                      v149 = *(_OWORD *)v135;
                      v150 = *(_OWORD *)(v135 + 32);
                      *(_OWORD *)(v144 + 16) = *(_OWORD *)(v135 + 16);
                      *(_OWORD *)(v144 + 32) = v150;
                      *(_OWORD *)v144 = v149;
                      v151 = v135 + 48;
                      re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v144 + 48, v135 + 48);
                      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v144 + 88, v148 + 88);
                      re::DynamicArray<re::RigComponentConstraint>::operator=(v144 + 128, v148 + 128);
                      if (v229 < v134)
                        break;
                      v152 = (2 * v134) | 1;
                      v135 = v6 + 176 * v152;
                      if (2 * v134 + 2 >= (uint64_t)v9)
                      {
                        v154 = 0uLL;
                      }
                      else
                      {
                        v153 = vsubq_f32(*(float32x4_t *)(v6 + 176 * v152 + 32), *(float32x4_t *)(v6 + 176 * v152 + 16));
                        v153.i32[3] = 0;
                        v154 = 0uLL;
                        v155 = vmaxnmq_f32(v153, (float32x4_t)0);
                        v156 = vsubq_f32(*(float32x4_t *)(v135 + 208), *(float32x4_t *)(v135 + 192));
                        v156.i32[3] = 0;
                        v157 = vmaxnmq_f32(v156, (float32x4_t)0);
                        if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v155, *(float32x2_t *)v155.f32, 1), vmulq_lane_f32(v157, *(float32x2_t *)v157.f32, 1))).u8[0] & 1) != 0)
                        {
                          v135 += 176;
                          v152 = 2 * v134 + 2;
                        }
                      }
                      v158 = vsubq_f32(*(float32x4_t *)(v135 + 32), *(float32x4_t *)(v135 + 16));
                      v158.i32[3] = 0;
                      v159 = vmaxnmq_f32(v158, v154);
                      v160 = vmaxnmq_f32(v226, v154);
                      v144 = v148;
                      v134 = v152;
                    }
                    while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v159, *(float32x2_t *)v159.f32, 1), vmulq_lane_f32(v160, *(float32x2_t *)v160.f32, 1))).u8[0] & 1) == 0);
                    v161 = v248;
                    v162 = v250;
                    *(_OWORD *)(v148 + 16) = v249;
                    *(float32x4_t *)(v148 + 32) = v162;
                    *(_OWORD *)v148 = v161;
                    re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v151, (uint64_t)&v251);
                    re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v148 + 88, (uint64_t)&v254 + 8);
                    re::DynamicArray<re::RigComponentConstraint>::operator=(v148 + 128, (uint64_t)&v257 + 8);
                    if (*((_QWORD *)&v257 + 1))
                    {
                      if (v260)
                        (*(void (**)(void))(**((_QWORD **)&v257 + 1) + 40))();
                      v260 = 0;
                      v258 = 0uLL;
                      *((_QWORD *)&v257 + 1) = 0;
                      ++v259;
                    }
                    v131 = 0uLL;
                    if (*((_QWORD *)&v254 + 1))
                    {
                      if ((_QWORD)v257)
                      {
                        (*(void (**)(void))(**((_QWORD **)&v254 + 1) + 40))();
                        v131 = 0uLL;
                      }
                      *(_QWORD *)&v257 = 0;
                      v255 = 0uLL;
                      *((_QWORD *)&v254 + 1) = 0;
                      ++v256;
                    }
                    if (v251 && (_QWORD)v254)
                    {
                      (*(void (**)(void))(*(_QWORD *)v251 + 40))();
                      v131 = 0uLL;
                    }
                  }
                }
                v132 = v133 - 1;
              }
              while (v133);
              v163 = v8 / 0xB0uLL;
              v164 = v223;
              do
              {
                v165 = 0;
                v230 = v164;
                v233 = *(_OWORD *)(v6 + 16);
                v234 = *(_OWORD *)(v6 + 32);
                v232 = *(_OWORD *)v6;
                v166 = *(_QWORD *)(v6 + 56);
                v235[0] = *(_QWORD *)(v6 + 48);
                *(_QWORD *)(v6 + 48) = 0;
                v235[1] = v166;
                *(_QWORD *)(v6 + 56) = 0;
                v235[2] = *(_QWORD *)(v6 + 64);
                *(_QWORD *)(v6 + 64) = 0;
                v167 = *(_QWORD *)(v6 + 88);
                v237 = *(_QWORD *)(v6 + 80);
                *(_QWORD *)(v6 + 80) = 0;
                ++*(_DWORD *)(v6 + 72);
                v236 = 1;
                v238 = v167;
                *(_QWORD *)(v6 + 88) = 0;
                v168 = *(_QWORD *)(v6 + 104);
                v239 = *(_QWORD *)(v6 + 96);
                *(_QWORD *)(v6 + 96) = 0;
                v240 = v168;
                *(_QWORD *)(v6 + 104) = 0;
                v169 = *(_QWORD *)(v6 + 128);
                v242 = *(_QWORD *)(v6 + 120);
                *(_QWORD *)(v6 + 120) = 0;
                ++*(_DWORD *)(v6 + 112);
                v241 = 1;
                v243 = v169;
                *(_QWORD *)(v6 + 128) = 0;
                v170 = *(_QWORD *)(v6 + 144);
                v244 = *(_QWORD *)(v6 + 136);
                *(_QWORD *)(v6 + 136) = 0;
                v245 = v170;
                *(_QWORD *)(v6 + 144) = 0;
                v247 = *(_QWORD *)(v6 + 160);
                *(_QWORD *)(v6 + 160) = 0;
                ++*(_DWORD *)(v6 + 152);
                v171 = (_OWORD *)v6;
                v246 = 1;
                do
                {
                  v172 = v165 + 1;
                  v173 = (float32x4_t *)&v171[11 * v165 + 11];
                  v174 = (2 * v165) | 1;
                  v175 = 2 * v165 + 2;
                  if (v175 < v163)
                  {
                    v176 = vsubq_f32((float32x4_t)v171[11 * v172 + 2], (float32x4_t)v171[11 * v172 + 1]);
                    v176.i32[3] = 0;
                    v177 = vmaxnmq_f32(v176, (float32x4_t)0);
                    v178 = vsubq_f32(v173[13], v173[12]);
                    v178.i32[3] = 0;
                    v179 = vmaxnmq_f32(v178, (float32x4_t)0);
                    if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v177, *(float32x2_t *)v177.f32, 1), vmulq_lane_f32(v179, *(float32x2_t *)v179.f32, 1))).u8[0] & 1) != 0)
                    {
                      v173 += 11;
                      v174 = v175;
                    }
                  }
                  v180 = *v173;
                  v181 = v173[2];
                  v171[1] = v173[1];
                  v171[2] = v181;
                  *v171 = v180;
                  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(v171 + 3), (uint64_t)&v173[3]);
                  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v171 + 88, (uint64_t)&v173[5].i64[1]);
                  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v171 + 8), (uint64_t)&v173[8]);
                  v171 = v173;
                  v165 = v174;
                }
                while (v174 <= (uint64_t)((unint64_t)(v163 - 2) >> 1));
                v164 = v230 - 11;
                if (v173 == (float32x4_t *)(v230 - 11))
                {
                  v173[1] = (float32x4_t)v233;
                  v173[2] = (float32x4_t)v234;
                  *v173 = (float32x4_t)v232;
                  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v173[3], (uint64_t)v235);
                  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v173[5].i64[1], (uint64_t)&v238);
                  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v173[8], (uint64_t)&v243);
                }
                else
                {
                  v182 = *v164;
                  v183 = (float32x4_t)*(v230 - 9);
                  v173[1] = (float32x4_t)*(v230 - 10);
                  v173[2] = v183;
                  *v173 = (float32x4_t)v182;
                  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v173[3], (uint64_t)(v230 - 8));
                  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v173[5].i64[1], (uint64_t)v230 - 88);
                  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v173[8], (uint64_t)(v230 - 3));
                  *v164 = v232;
                  *(v230 - 10) = v233;
                  *(v230 - 9) = v234;
                  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(v230 - 8), (uint64_t)v235);
                  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v230 - 88, (uint64_t)&v238);
                  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v230 - 3), (uint64_t)&v243);
                  v184 = (uint64_t)&v173[11] - v6;
                  if (v184 >= 177)
                  {
                    v185 = (v184 / 0xB0uLL - 2) >> 1;
                    v186 = vsubq_f32(*(float32x4_t *)(v6 + 176 * v185 + 32), *(float32x4_t *)(v6 + 176 * v185 + 16));
                    v186.i32[3] = 0;
                    v187 = vmaxnmq_f32(v186, (float32x4_t)0);
                    v188 = vsubq_f32(v173[2], v173[1]);
                    v188.i32[3] = 0;
                    v189 = vmaxnmq_f32(v188, (float32x4_t)0);
                    if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v187, *(float32x2_t *)v187.f32, 1), vmulq_lane_f32(v189, *(float32x2_t *)v189.f32, 1))).u8[0] & 1) != 0)
                    {
                      v190 = (__int128)*v173;
                      v191 = v173[2];
                      v249 = (__int128)v173[1];
                      v250 = v191;
                      v248 = v190;
                      v251 = v173[3].i64[0];
                      v173[3].i64[0] = 0;
                      *(_QWORD *)&v252 = v173[3].i64[1];
                      v173[3].i64[1] = 0;
                      *((_QWORD *)&v252 + 1) = v173[4].i64[0];
                      v173[4].i64[0] = 0;
                      *(_QWORD *)&v254 = v173[5].i64[0];
                      v173[5].i64[0] = 0;
                      ++v173[4].i32[2];
                      v253 = 1;
                      *((_QWORD *)&v254 + 1) = v173[5].i64[1];
                      v173[5].i64[1] = 0;
                      *(_QWORD *)&v255 = v173[6].i64[0];
                      v173[6].i64[0] = 0;
                      *((_QWORD *)&v255 + 1) = v173[6].i64[1];
                      v173[6].i64[1] = 0;
                      *(_QWORD *)&v257 = v173[7].i64[1];
                      v173[7].i64[1] = 0;
                      ++v173[7].i32[0];
                      v256 = 1;
                      *((_QWORD *)&v257 + 1) = v173[8].i64[0];
                      v173[8].i64[0] = 0;
                      *(_QWORD *)&v258 = v173[8].i64[1];
                      v173[8].i64[1] = 0;
                      *((_QWORD *)&v258 + 1) = v173[9].i64[0];
                      v173[9].i64[0] = 0;
                      v260 = v173[10].i64[0];
                      v173[10].i64[0] = 0;
                      ++v173[9].i32[2];
                      v259 = 1;
                      v192 = vsubq_f32(v250, (float32x4_t)v249);
                      v192.i32[3] = 0;
                      v231 = v192;
                      do
                      {
                        v193 = v173;
                        v173 = (float32x4_t *)(v6 + 176 * v185);
                        v194 = *v173;
                        v195 = v173[2];
                        v193[1] = v173[1];
                        v193[2] = v195;
                        *v193 = v194;
                        re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v193[3], (uint64_t)&v173[3]);
                        re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v193[5].i64[1], (uint64_t)&v173[5].i64[1]);
                        re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v193[8], (uint64_t)&v173[8]);
                        if (!v185)
                          break;
                        v185 = (v185 - 1) >> 1;
                        v196 = vsubq_f32(*(float32x4_t *)(v6 + 176 * v185 + 32), *(float32x4_t *)(v6 + 176 * v185 + 16));
                        v196.i32[3] = 0;
                        v197 = vmaxnmq_f32(v196, (float32x4_t)0);
                        v198 = vmaxnmq_f32(v231, (float32x4_t)0);
                      }
                      while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v197, *(float32x2_t *)v197.f32, 1), vmulq_lane_f32(v198, *(float32x2_t *)v198.f32, 1))).u8[0] & 1) != 0);
                      v199 = v248;
                      v200 = v250;
                      v173[1] = (float32x4_t)v249;
                      v173[2] = v200;
                      *v173 = (float32x4_t)v199;
                      re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v173[3], (uint64_t)&v251);
                      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v173[5].i64[1], (uint64_t)&v254 + 8);
                      re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v173[8], (uint64_t)&v257 + 8);
                      if (*((_QWORD *)&v257 + 1))
                      {
                        if (v260)
                          (*(void (**)(void))(**((_QWORD **)&v257 + 1) + 40))();
                        v260 = 0;
                        v258 = 0uLL;
                        *((_QWORD *)&v257 + 1) = 0;
                        ++v259;
                      }
                      if (*((_QWORD *)&v254 + 1))
                      {
                        if ((_QWORD)v257)
                          (*(void (**)(void))(**((_QWORD **)&v254 + 1) + 40))();
                        *(_QWORD *)&v257 = 0;
                        v255 = 0uLL;
                        *((_QWORD *)&v254 + 1) = 0;
                        ++v256;
                      }
                      if (v251 && (_QWORD)v254)
                        (*(void (**)(void))(*(_QWORD *)v251 + 40))();
                    }
                  }
                }
                if (v243)
                {
                  if (v247)
                    (*(void (**)(void))(*(_QWORD *)v243 + 40))();
                  v247 = 0;
                  v244 = 0;
                  v245 = 0;
                  v243 = 0;
                  ++v246;
                }
                if (v238)
                {
                  if (v242)
                    (*(void (**)(void))(*(_QWORD *)v238 + 40))();
                  v242 = 0;
                  v239 = 0;
                  v240 = 0;
                  v238 = 0;
                  ++v241;
                }
                result = v235[0];
                if (v235[0] && v237)
                  result = (*(uint64_t (**)(void))(*(_QWORD *)v235[0] + 40))();
              }
              while (v163-- > 2);
            }
            return result;
          }
          v10 = v9 >> 1;
          if ((unint64_t)v8 < 0x5801)
          {
          }
          else
          {
            v11 = 176 * v10;
            v12 = 176 * v10 + v6 - 176;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v13 = vsubq_f32(*(float32x4_t *)(v6 - 144), *(float32x4_t *)(v6 - 160));
            v13.i32[3] = 0;
            v14 = vmaxnmq_f32(v13, (float32x4_t)0);
            v15 = vsubq_f32(*(float32x4_t *)(v6 + 32), *(float32x4_t *)(v6 + 16));
            v15.i32[3] = 0;
            v16 = vmaxnmq_f32(v15, (float32x4_t)0);
            if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v14, *(float32x2_t *)v14.f32, 1), vmulq_lane_f32(v16, *(float32x2_t *)v16.f32, 1))).u8[0] & 1) == 0)
            {
              v52 = *(_OWORD *)v6;
              v53 = *(float32x4_t *)(v6 + 16);
              v54 = *(float32x4_t *)(v6 + 32);
              v251 = *(_QWORD *)(v6 + 48);
              *(_QWORD *)(v6 + 48) = 0;
              v55 = *(_QWORD *)(v6 + 64);
              *(_QWORD *)&v252 = *(_QWORD *)(v6 + 56);
              *(_QWORD *)(v6 + 56) = 0;
              *((_QWORD *)&v252 + 1) = v55;
              *(_QWORD *)(v6 + 64) = 0;
              *(_QWORD *)&v254 = *(_QWORD *)(v6 + 80);
              *(_QWORD *)(v6 + 80) = 0;
              ++*(_DWORD *)(v6 + 72);
              *((_QWORD *)&v254 + 1) = *(_QWORD *)(v6 + 88);
              *(_QWORD *)(v6 + 88) = 0;
              v56 = *(_QWORD *)(v6 + 104);
              *(_QWORD *)&v255 = *(_QWORD *)(v6 + 96);
              *(_QWORD *)(v6 + 96) = 0;
              *((_QWORD *)&v255 + 1) = v56;
              *(_QWORD *)(v6 + 104) = 0;
              *(_QWORD *)&v257 = *(_QWORD *)(v6 + 120);
              *(_QWORD *)(v6 + 120) = 0;
              ++*(_DWORD *)(v6 + 112);
              *((_QWORD *)&v257 + 1) = *(_QWORD *)(v6 + 128);
              *(_QWORD *)(v6 + 128) = 0;
              v57 = *(_QWORD *)(v6 + 144);
              *(_QWORD *)&v258 = *(_QWORD *)(v6 + 136);
              v249 = (__int128)v53;
              v250 = v54;
              v248 = v52;
              v253 = 1;
              v256 = 1;
              *(_QWORD *)(v6 + 136) = 0;
              *((_QWORD *)&v258 + 1) = v57;
              *(_QWORD *)(v6 + 144) = 0;
              v260 = *(_QWORD *)(v6 + 160);
              *(_QWORD *)(v6 + 160) = 0;
              ++*(_DWORD *)(v6 + 152);
              v259 = 1;
              v58 = vsubq_f32(v250, (float32x4_t)v249);
              v58.i32[3] = 0;
              v59 = vmaxnmq_f32(v58, (float32x4_t)0);
              v60 = vsubq_f32(*(float32x4_t *)(a2 - 144), *(float32x4_t *)(a2 - 160));
              v60.i32[3] = 0;
              v61 = vmaxnmq_f32(v60, (float32x4_t)0);
              v62 = vmulq_lane_f32(v59, *(float32x2_t *)v59.f32, 1);
              if ((vmovn_s32(vcgtq_f32(v62, vmulq_lane_f32(v61, *(float32x2_t *)v61.f32, 1))).u8[0] & 1) != 0)
              {
                v63 = (float32x4_t *)v6;
                do
                {
                  v7 = (__int128 *)&v63[11];
                  v64 = vsubq_f32(v63[13], v63[12]);
                  v64.i32[3] = 0;
                  v65 = vmaxnmq_f32(v64, (float32x4_t)0);
                  v63 += 11;
                }
                while ((vmovn_s32(vcgtq_f32(v62, vmulq_lane_f32(v65, *(float32x2_t *)v65.f32, 1))).u8[0] & 1) == 0);
              }
              else
              {
                v66 = (float32x4_t *)(v6 + 176);
                do
                {
                  v7 = (__int128 *)v66;
                  if ((unint64_t)v66 >= a2)
                    break;
                  v67 = vsubq_f32(v66[2], v66[1]);
                  v67.i32[3] = 0;
                  v68 = vmaxnmq_f32(v67, (float32x4_t)0);
                  v66 += 11;
                }
                while ((vmovn_s32(vcgtq_f32(v62, vmulq_lane_f32(v68, *(float32x2_t *)v68.f32, 1))).u8[0] & 1) == 0);
              }
              v69 = (__int128 *)a2;
              if ((unint64_t)v7 < a2)
              {
                v70 = a2;
                do
                {
                  v69 = (__int128 *)(v70 - 176);
                  v71 = vsubq_f32(*(float32x4_t *)(v70 - 144), *(float32x4_t *)(v70 - 160));
                  v71.i32[3] = 0;
                  v72 = vmaxnmq_f32(v71, (float32x4_t)0);
                  v70 -= 176;
                }
                while ((vmovn_s32(vcgtq_f32(v62, vmulq_lane_f32(v72, *(float32x2_t *)v72.f32, 1))).u8[0] & 1) != 0);
              }
              if (v7 < v69)
              {
                v228 = v62;
                do
                {
                  do
                  {
                    v74 = (float32x4_t)v7[12];
                    v73 = (float32x4_t)v7[13];
                    v7 += 11;
                    v75 = vsubq_f32(v73, v74);
                    v75.i32[3] = 0;
                    v76 = vmaxnmq_f32(v75, (float32x4_t)0);
                  }
                  while ((vmovn_s32(vcgtq_f32(v228, vmulq_lane_f32(v76, *(float32x2_t *)v76.f32, 1))).u8[0] & 1) == 0);
                  do
                  {
                    v78 = (float32x4_t)*(v69 - 10);
                    v77 = (float32x4_t)*(v69 - 9);
                    v69 -= 11;
                    v79 = vsubq_f32(v77, v78);
                    v79.i32[3] = 0;
                    v80 = vmaxnmq_f32(v79, (float32x4_t)0);
                  }
                  while ((vmovn_s32(vcgtq_f32(v228, vmulq_lane_f32(v80, *(float32x2_t *)v80.f32, 1))).u8[0] & 1) != 0);
                }
                while (v7 < v69);
              }
              v81 = v7 - 11;
              if (v7 - 11 != (__int128 *)v6)
              {
                v82 = *v81;
                v83 = *(v7 - 9);
                *(_OWORD *)(v6 + 16) = *(v7 - 10);
                *(_OWORD *)(v6 + 32) = v83;
                *(_OWORD *)v6 = v82;
                re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v6 + 48, (uint64_t)(v7 - 8));
                re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v6 + 88, (uint64_t)v7 - 88);
                re::DynamicArray<re::RigComponentConstraint>::operator=(v6 + 128, (uint64_t)(v7 - 3));
              }
              v84 = v248;
              v85 = v250;
              *(v7 - 10) = v249;
              *(v7 - 9) = (__int128)v85;
              *v81 = v84;
              re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(v7 - 8), (uint64_t)&v251);
              re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v7 - 88, (uint64_t)&v254 + 8);
              re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v7 - 3), (uint64_t)&v257 + 8);
              if (*((_QWORD *)&v257 + 1))
              {
                if (v260)
                  (*(void (**)(void))(**((_QWORD **)&v257 + 1) + 40))();
                v260 = 0;
                v258 = 0uLL;
                *((_QWORD *)&v257 + 1) = 0;
                ++v259;
              }
              if (*((_QWORD *)&v254 + 1))
              {
                if ((_QWORD)v257)
                  (*(void (**)(void))(**((_QWORD **)&v254 + 1) + 40))();
                *(_QWORD *)&v257 = 0;
                v255 = 0uLL;
                *((_QWORD *)&v254 + 1) = 0;
                ++v256;
              }
              result = v251;
              if (v251 && (_QWORD)v254)
                result = (*(uint64_t (**)(void))(*(_QWORD *)v251 + 40))();
              goto LABEL_44;
            }
          }
          v17 = 0;
          v18 = *(_OWORD *)v6;
          v19 = *(float32x4_t *)(v6 + 16);
          v20 = *(float32x4_t *)(v6 + 32);
          v251 = *(_QWORD *)(v6 + 48);
          *(_QWORD *)(v6 + 48) = 0;
          v21 = *(_QWORD *)(v6 + 64);
          *(_QWORD *)&v252 = *(_QWORD *)(v6 + 56);
          *(_QWORD *)(v6 + 56) = 0;
          *((_QWORD *)&v252 + 1) = v21;
          *(_QWORD *)(v6 + 64) = 0;
          *(_QWORD *)&v254 = *(_QWORD *)(v6 + 80);
          *(_QWORD *)(v6 + 80) = 0;
          ++*(_DWORD *)(v6 + 72);
          *((_QWORD *)&v254 + 1) = *(_QWORD *)(v6 + 88);
          *(_QWORD *)(v6 + 88) = 0;
          v22 = *(_QWORD *)(v6 + 104);
          *(_QWORD *)&v255 = *(_QWORD *)(v6 + 96);
          *(_QWORD *)(v6 + 96) = 0;
          *((_QWORD *)&v255 + 1) = v22;
          *(_QWORD *)(v6 + 104) = 0;
          *(_QWORD *)&v257 = *(_QWORD *)(v6 + 120);
          *(_QWORD *)(v6 + 120) = 0;
          ++*(_DWORD *)(v6 + 112);
          *((_QWORD *)&v257 + 1) = *(_QWORD *)(v6 + 128);
          *(_QWORD *)(v6 + 128) = 0;
          v23 = *(_QWORD *)(v6 + 144);
          *(_QWORD *)&v258 = *(_QWORD *)(v6 + 136);
          *(_QWORD *)(v6 + 136) = 0;
          *((_QWORD *)&v258 + 1) = v23;
          *(_QWORD *)(v6 + 144) = 0;
          v260 = *(_QWORD *)(v6 + 160);
          ++*(_DWORD *)(v6 + 152);
          v249 = (__int128)v19;
          v250 = v20;
          v248 = v18;
          v253 = 1;
          v256 = 1;
          *(_QWORD *)(v6 + 160) = 0;
          v24 = vsubq_f32(v250, (float32x4_t)v249);
          v24.i32[3] = 0;
          v25 = vmaxnmq_f32(v24, (float32x4_t)0);
          v26 = vmulq_lane_f32(v25, *(float32x2_t *)v25.f32, 1);
          v259 = 1;
          do
          {
            v27 = vsubq_f32(*(float32x4_t *)(v6 + v17 + 208), *(float32x4_t *)(v6 + v17 + 192));
            v27.i32[3] = 0;
            v28 = vmaxnmq_f32(v27, (float32x4_t)0);
            v17 += 176;
          }
          while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v28, *(float32x2_t *)v28.f32, 1), v26)).u8[0] & 1) != 0);
          v29 = (__int128 *)(v6 + v17);
          v30 = a2;
          if (v17 == 176)
          {
            v34 = a2;
            while ((unint64_t)v29 < v34)
            {
              v31 = (__int128 *)(v34 - 176);
              v35 = vsubq_f32(*(float32x4_t *)(v34 - 144), *(float32x4_t *)(v34 - 160));
              v35.i32[3] = 0;
              v36 = vmaxnmq_f32(v35, (float32x4_t)0);
              v34 -= 176;
              if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v36, *(float32x2_t *)v36.f32, 1), v26)).u8[0] & 1) != 0)
                goto LABEL_21;
            }
            v31 = (__int128 *)v34;
          }
          else
          {
            do
            {
              v31 = (__int128 *)(v30 - 176);
              v32 = vsubq_f32(*(float32x4_t *)(v30 - 144), *(float32x4_t *)(v30 - 160));
              v32.i32[3] = 0;
              v33 = vmaxnmq_f32(v32, (float32x4_t)0);
              v30 -= 176;
            }
            while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v33, *(float32x2_t *)v33.f32, 1), v26)).u8[0] & 1) == 0);
          }
LABEL_21:
          v7 = v29;
          if (v29 < v31)
          {
            v37 = v31;
            v227 = v26;
            do
            {
              do
              {
                v39 = (float32x4_t)v7[12];
                v38 = (float32x4_t)v7[13];
                v7 += 11;
                v40 = vsubq_f32(v38, v39);
                v40.i32[3] = 0;
                v41 = vmaxnmq_f32(v40, (float32x4_t)0);
              }
              while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v41, *(float32x2_t *)v41.f32, 1), v227)).u8[0] & 1) != 0);
              do
              {
                v43 = (float32x4_t)*(v37 - 10);
                v42 = (float32x4_t)*(v37 - 9);
                v37 -= 11;
                v44 = vsubq_f32(v42, v43);
                v44.i32[3] = 0;
                v45 = vmaxnmq_f32(v44, (float32x4_t)0);
              }
              while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v45, *(float32x2_t *)v45.f32, 1), v227)).u8[0] & 1) == 0);
            }
            while (v7 < v37);
          }
          v46 = v7 - 11;
          if (v7 - 11 != (__int128 *)v6)
          {
            v47 = *v46;
            v48 = *(v7 - 9);
            *(_OWORD *)(v6 + 16) = *(v7 - 10);
            *(_OWORD *)(v6 + 32) = v48;
            *(_OWORD *)v6 = v47;
            re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v6 + 48, (uint64_t)(v7 - 8));
            re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v6 + 88, (uint64_t)v7 - 88);
            re::DynamicArray<re::RigComponentConstraint>::operator=(v6 + 128, (uint64_t)(v7 - 3));
          }
          v49 = v248;
          v50 = v250;
          *(v7 - 10) = v249;
          *(v7 - 9) = (__int128)v50;
          *v46 = v49;
          re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(v7 - 8), (uint64_t)&v251);
          re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)v7 - 88, (uint64_t)&v254 + 8);
          re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(v7 - 3), (uint64_t)&v257 + 8);
          if (*((_QWORD *)&v257 + 1))
          {
            if (v260)
              (*(void (**)(void))(**((_QWORD **)&v257 + 1) + 40))();
            v260 = 0;
            v258 = 0uLL;
            *((_QWORD *)&v257 + 1) = 0;
            ++v259;
          }
          if (*((_QWORD *)&v254 + 1))
          {
            if ((_QWORD)v257)
              (*(void (**)(void))(**((_QWORD **)&v254 + 1) + 40))();
            *(_QWORD *)&v257 = 0;
            v255 = 0uLL;
            *((_QWORD *)&v254 + 1) = 0;
            ++v256;
          }
          if (v251 && (_QWORD)v254)
            (*(void (**)(void))(*(_QWORD *)v251 + 40))();
          if (v29 < v31)
            goto LABEL_43;
          if (!(_DWORD)result)
          {
            if (v51)
              continue;
LABEL_43:
LABEL_44:
            a4 = 0;
            continue;
          }
          a2 = (unint64_t)(v7 - 11);
          if (v51)
            return result;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if (v6 != a2)
          {
            v108 = v6 + 176;
            if (v6 + 176 != a2)
            {
              v109 = 0;
              v110 = v6;
              do
              {
                v111 = v108;
                v112 = vsubq_f32(*(float32x4_t *)(v110 + 208), *(float32x4_t *)(v110 + 192));
                v112.i32[3] = 0;
                v113 = vmaxnmq_f32(v112, (float32x4_t)0);
                v114 = vsubq_f32(*(float32x4_t *)(v110 + 32), *(float32x4_t *)(v110 + 16));
                v114.i32[3] = 0;
                v115 = vmaxnmq_f32(v114, (float32x4_t)0);
                if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v113, *(float32x2_t *)v113.f32, 1), vmulq_lane_f32(v115, *(float32x2_t *)v115.f32, 1))).u8[0] & 1) != 0)
                {
                  v116 = a2;
                  v117 = *(_OWORD *)v108;
                  v118 = *(float32x4_t *)(v108 + 32);
                  v249 = *(_OWORD *)(v108 + 16);
                  v250 = v118;
                  v248 = v117;
                  v251 = *(_QWORD *)(v110 + 224);
                  *(_QWORD *)(v110 + 224) = 0;
                  v252 = *(_OWORD *)(v110 + 232);
                  *(_OWORD *)(v110 + 232) = 0u;
                  ++*(_DWORD *)(v110 + 248);
                  v253 = 1;
                  v119 = *(_OWORD *)(v110 + 272);
                  v254 = *(_OWORD *)(v110 + 256);
                  v255 = v119;
                  *(_OWORD *)(v110 + 256) = 0u;
                  *(_OWORD *)(v110 + 272) = 0u;
                  ++*(_DWORD *)(v110 + 288);
                  v256 = 1;
                  v257 = *(_OWORD *)(v110 + 296);
                  *(_OWORD *)(v110 + 296) = 0u;
                  v258 = *(_OWORD *)(v110 + 312);
                  *(_OWORD *)(v110 + 312) = 0u;
                  v260 = *(_QWORD *)(v110 + 336);
                  *(_QWORD *)(v110 + 336) = 0;
                  ++*(_DWORD *)(v110 + 328);
                  v120 = v109;
                  v259 = 1;
                  while (1)
                  {
                    v121 = (float32x4_t *)(v6 + v120);
                    v122 = *(float32x4_t *)(v6 + v120 + 16);
                    v121[11] = *(float32x4_t *)(v6 + v120);
                    v121[12] = v122;
                    v121[13] = *(float32x4_t *)(v6 + v120 + 32);
                    v123 = v6 + v120 + 48;
                    re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v6 + v120 + 224, v123);
                    re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v121[16].i64[1], (uint64_t)&v121[5].i64[1]);
                    re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v121[19], (uint64_t)&v121[8]);
                    if (!v120)
                      break;
                    v124 = vsubq_f32(v250, (float32x4_t)v249);
                    v124.i32[3] = 0;
                    v125 = vmaxnmq_f32(v124, (float32x4_t)0);
                    v126 = vsubq_f32(v121[-9], v121[-10]);
                    v126.i32[3] = 0;
                    v127 = vmaxnmq_f32(v126, (float32x4_t)0);
                    v120 -= 176;
                    if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v125, *(float32x2_t *)v125.f32, 1), vmulq_lane_f32(v127, *(float32x2_t *)v127.f32, 1))).u8[0] & 1) == 0)
                    {
                      v128 = v6 + v120 + 176;
                      goto LABEL_97;
                    }
                  }
                  v128 = v6;
LABEL_97:
                  v129 = v248;
                  v130 = v250;
                  *(_OWORD *)(v128 + 16) = v249;
                  *(float32x4_t *)(v128 + 32) = v130;
                  *(_OWORD *)v128 = v129;
                  re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v123, (uint64_t)&v251);
                  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v121[5].i64[1], (uint64_t)&v254 + 8);
                  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v121[8], (uint64_t)&v257 + 8);
                  a2 = v116;
                  if (*((_QWORD *)&v257 + 1))
                  {
                    if (v260)
                      (*(void (**)(void))(**((_QWORD **)&v257 + 1) + 40))();
                    v260 = 0;
                    v258 = 0uLL;
                    *((_QWORD *)&v257 + 1) = 0;
                    ++v259;
                  }
                  if (*((_QWORD *)&v254 + 1))
                  {
                    if ((_QWORD)v257)
                      (*(void (**)(void))(**((_QWORD **)&v254 + 1) + 40))();
                    *(_QWORD *)&v257 = 0;
                    v255 = 0uLL;
                    *((_QWORD *)&v254 + 1) = 0;
                    ++v256;
                  }
                  result = v251;
                  if (v251 && (_QWORD)v254)
                    result = (*(uint64_t (**)(void))(*(_QWORD *)v251 + 40))();
                }
                v108 = v111 + 176;
                v109 += 176;
                v110 = v111;
              }
              while (v111 + 176 != a2);
            }
          }
        }
        else if (v6 != a2)
        {
          v202 = v6 + 176;
          if (v6 + 176 != a2)
          {
            v203 = (float32x4_t *)(v6 - 160);
            v204 = 0uLL;
            do
            {
              v205 = v202;
              v206 = vsubq_f32(*(float32x4_t *)(v6 + 208), *(float32x4_t *)(v6 + 192));
              v206.i32[3] = 0;
              v207 = vmaxnmq_f32(v206, v204);
              v208 = vsubq_f32(*(float32x4_t *)(v6 + 32), *(float32x4_t *)(v6 + 16));
              v208.i32[3] = 0;
              v209 = vmaxnmq_f32(v208, v204);
              if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v207, *(float32x2_t *)v207.f32, 1), vmulq_lane_f32(v209, *(float32x2_t *)v209.f32, 1))).u8[0] & 1) != 0)
              {
                v210 = *(_OWORD *)v202;
                v211 = *(float32x4_t *)(v202 + 32);
                v249 = *(_OWORD *)(v202 + 16);
                v250 = v211;
                v248 = v210;
                v251 = *(_QWORD *)(v6 + 224);
                *(_QWORD *)(v6 + 224) = 0;
                v252 = *(_OWORD *)(v6 + 232);
                *(float32x4_t *)(v6 + 232) = v204;
                ++*(_DWORD *)(v6 + 248);
                v253 = 1;
                v212 = *(_OWORD *)(v6 + 272);
                v254 = *(_OWORD *)(v6 + 256);
                v255 = v212;
                *(float32x4_t *)(v6 + 256) = v204;
                *(float32x4_t *)(v6 + 272) = v204;
                ++*(_DWORD *)(v6 + 288);
                v256 = 1;
                v257 = *(_OWORD *)(v6 + 296);
                *(float32x4_t *)(v6 + 296) = v204;
                v258 = *(_OWORD *)(v6 + 312);
                *(float32x4_t *)(v6 + 312) = v204;
                v260 = *(_QWORD *)(v6 + 336);
                *(_QWORD *)(v6 + 336) = 0;
                ++*(_DWORD *)(v6 + 328);
                v213 = v203;
                v259 = 1;
                do
                {
                  v214 = v213[11];
                  v213[21] = v213[10];
                  v213[22] = v214;
                  v213[23] = v213[12];
                  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v213[24], (uint64_t)&v213[13]);
                  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v213[26].i64[1], (uint64_t)&v213[15].i64[1]);
                  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v213[29], (uint64_t)&v213[18]);
                  v215 = vsubq_f32(v250, (float32x4_t)v249);
                  v215.i32[3] = 0;
                  v216 = vmaxnmq_f32(v215, (float32x4_t)0);
                  v218 = *v213;
                  v217 = v213[1];
                  v213 -= 11;
                  v219 = vsubq_f32(v217, v218);
                  v219.i32[3] = 0;
                  v220 = vmaxnmq_f32(v219, (float32x4_t)0);
                }
                while ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v216, *(float32x2_t *)v216.f32, 1), vmulq_lane_f32(v220, *(float32x2_t *)v220.f32, 1))).u8[0] & 1) != 0);
                v221 = v248;
                v222 = v250;
                v213[22] = (float32x4_t)v249;
                v213[23] = v222;
                v213[21] = (float32x4_t)v221;
                re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)&v213[24], (uint64_t)&v251);
                re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)&v213[26].i64[1], (uint64_t)&v254 + 8);
                re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)&v213[29], (uint64_t)&v257 + 8);
                if (*((_QWORD *)&v257 + 1))
                {
                  if (v260)
                    (*(void (**)(void))(**((_QWORD **)&v257 + 1) + 40))();
                  v260 = 0;
                  v258 = 0uLL;
                  *((_QWORD *)&v257 + 1) = 0;
                  ++v259;
                }
                v204 = 0uLL;
                if (*((_QWORD *)&v254 + 1))
                {
                  if ((_QWORD)v257)
                  {
                    (*(void (**)(void))(**((_QWORD **)&v254 + 1) + 40))();
                    v204 = 0uLL;
                  }
                  *(_QWORD *)&v257 = 0;
                  v255 = 0uLL;
                  *((_QWORD *)&v254 + 1) = 0;
                  ++v256;
                }
                result = v251;
                if (v251 && (_QWORD)v254)
                {
                  result = (*(uint64_t (**)(void))(*(_QWORD *)v251 + 40))();
                  v204 = 0uLL;
                }
              }
              v202 = v205 + 176;
              v203 += 11;
              v6 = v205;
            }
            while (v205 + 176 != a2);
          }
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::`anonymous namespace'::loadControlHullFromCoreText(__CTFont const*,unsigned short)::$_0 &,re::`anonymous namespace'::PiecewiseBezierCurve *>(uint64_t result, uint64_t a2, uint64_t a3)
{
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unsigned __int8 v11;
  float32x4_t v12;
  float32x4_t v13;
  unsigned __int8 v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  __int128 *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;

  v5 = (float32x4_t *)result;
  v6 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 16));
  v6.i32[3] = 0;
  v7 = vmaxnmq_f32(v6, (float32x4_t)0);
  v8 = vsubq_f32(*(float32x4_t *)(result + 32), *(float32x4_t *)(result + 16));
  v8.i32[3] = 0;
  v9 = vmaxnmq_f32(v8, (float32x4_t)0);
  v10 = vmulq_lane_f32(v7, *(float32x2_t *)v7.f32, 1);
  v11 = vmovn_s32(vcgtq_f32(v10, vmulq_lane_f32(v9, *(float32x2_t *)v9.f32, 1))).u8[0];
  v12 = vsubq_f32(*(float32x4_t *)(a3 + 32), *(float32x4_t *)(a3 + 16));
  v12.i32[3] = 0;
  v13 = vmaxnmq_f32(v12, (float32x4_t)0);
  v14 = vmovn_s32(vcgtq_f32(vmulq_lane_f32(v13, *(float32x2_t *)v13.f32, 1), v10)).u8[0];
  if ((v11 & 1) != 0)
  {
    if ((v14 & 1) == 0)
    {
      v15 = vsubq_f32(*(float32x4_t *)(a3 + 32), *(float32x4_t *)(a3 + 16));
      v15.i32[3] = 0;
      v16 = vmaxnmq_f32(v15, (float32x4_t)0);
      v17 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 16));
      v17.i32[3] = 0;
      v18 = vmaxnmq_f32(v17, (float32x4_t)0);
      if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v16, *(float32x2_t *)v16.f32, 1), vmulq_lane_f32(v18, *(float32x2_t *)v18.f32, 1))).u8[0] & 1) == 0)return result;
      result = a2;
    }
    v19 = (__int128 *)a3;
  }
  if ((v14 & 1) != 0)
  {
    v20 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 16));
    v20.i32[3] = 0;
    v21 = vmaxnmq_f32(v20, (float32x4_t)0);
    v22 = vsubq_f32(v5[2], v5[1]);
    v22.i32[3] = 0;
    v23 = vmaxnmq_f32(v22, (float32x4_t)0);
    if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v21, *(float32x2_t *)v21.f32, 1), vmulq_lane_f32(v23, *(float32x2_t *)v23.f32, 1))).u8[0] & 1) != 0)
    {
      result = (uint64_t)v5;
      v19 = (__int128 *)a2;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::`anonymous namespace'::loadControlHullFromCoreText(__CTFont const*,unsigned short)::$_0 &,re::`anonymous namespace'::PiecewiseBezierCurve *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  _OWORD *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  __int128 v52;
  __int128 v53;
  int v54;
  __int128 v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;

  v2 = a2;
  v59 = *MEMORY[0x24BDAC8D0];
  v4 = 1;
  switch(0x2E8BA2E8BA2E8BA3 * ((a2 - a1) >> 4))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      v5 = vsubq_f32(*(float32x4_t *)(a2 - 144), *(float32x4_t *)(a2 - 160));
      v5.i32[3] = 0;
      v6 = vmaxnmq_f32(v5, (float32x4_t)0);
      v7 = vsubq_f32(*(float32x4_t *)(a1 + 32), *(float32x4_t *)(a1 + 16));
      v7.i32[3] = 0;
      v8 = vmaxnmq_f32(v7, (float32x4_t)0);
      if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v6, *(float32x2_t *)v6.f32, 1), vmulq_lane_f32(v8, *(float32x2_t *)v8.f32, 1))).u8[0] & 1) != 0)
      return v4;
    case 3:
      return v4;
    case 4:
      return v4;
    case 5:
      v28 = vsubq_f32(*(float32x4_t *)(v2 - 144), *(float32x4_t *)(v2 - 160));
      v28.i32[3] = 0;
      v29 = vmaxnmq_f32(v28, (float32x4_t)0);
      v30 = vsubq_f32(*(float32x4_t *)(a1 + 560), *(float32x4_t *)(a1 + 544));
      v30.i32[3] = 0;
      v31 = vmaxnmq_f32(v30, (float32x4_t)0);
      if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v29, *(float32x2_t *)v29.f32, 1), vmulq_lane_f32(v31, *(float32x2_t *)v31.f32, 1))).u8[0] & 1) != 0)
      {
        v32 = vsubq_f32(*(float32x4_t *)(a1 + 560), *(float32x4_t *)(a1 + 544));
        v32.i32[3] = 0;
        v33 = vmaxnmq_f32(v32, (float32x4_t)0);
        v34 = vsubq_f32(*(float32x4_t *)(a1 + 384), *(float32x4_t *)(a1 + 368));
        v34.i32[3] = 0;
        v35 = vmaxnmq_f32(v34, (float32x4_t)0);
        if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v33, *(float32x2_t *)v33.f32, 1), vmulq_lane_f32(v35, *(float32x2_t *)v35.f32, 1))).u8[0] & 1) != 0)
        {
          v36 = vsubq_f32(*(float32x4_t *)(a1 + 384), *(float32x4_t *)(a1 + 368));
          v36.i32[3] = 0;
          v37 = vmaxnmq_f32(v36, (float32x4_t)0);
          v38 = vsubq_f32(*(float32x4_t *)(a1 + 208), *(float32x4_t *)(a1 + 192));
          v38.i32[3] = 0;
          v39 = vmaxnmq_f32(v38, (float32x4_t)0);
          if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v37, *(float32x2_t *)v37.f32, 1), vmulq_lane_f32(v39, *(float32x2_t *)v39.f32, 1))).u8[0] & 1) != 0)
          {
            v40 = vsubq_f32(*(float32x4_t *)(a1 + 208), *(float32x4_t *)(a1 + 192));
            v40.i32[3] = 0;
            v41 = vmaxnmq_f32(v40, (float32x4_t)0);
            v42 = vsubq_f32(*(float32x4_t *)(a1 + 32), *(float32x4_t *)(a1 + 16));
            v42.i32[3] = 0;
            v43 = vmaxnmq_f32(v42, (float32x4_t)0);
          }
        }
      }
      return 1;
    default:
      v9 = (float32x4_t *)(a1 + 352);
      v10 = a1 + 528;
      v4 = 1;
      if (a1 + 528 == v2)
        return v4;
      v11 = 0;
      v12 = 0;
      v45 = v2;
      v13 = 0uLL;
      break;
  }
  while (1)
  {
    v14 = vsubq_f32(*(float32x4_t *)(v10 + 32), *(float32x4_t *)(v10 + 16));
    v14.i32[3] = 0;
    v15 = vmaxnmq_f32(v14, v13);
    v16 = vsubq_f32(v9[2], v9[1]);
    v16.i32[3] = 0;
    v17 = vmaxnmq_f32(v16, v13);
    if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v15, *(float32x2_t *)v15.f32, 1), vmulq_lane_f32(v17, *(float32x2_t *)v17.f32, 1))).u8[0] & 1) != 0)
    {
      v46 = *(float32x4_t *)v10;
      v47 = *(float32x4_t *)(v10 + 16);
      v48 = *(float32x4_t *)(v10 + 32);
      v49 = *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 48) = 0;
      v50 = *(_OWORD *)(v10 + 56);
      *(float32x4_t *)(v10 + 56) = v13;
      ++*(_DWORD *)(v10 + 72);
      v51 = 1;
      v18 = *(_OWORD *)(v10 + 96);
      v52 = *(_OWORD *)(v10 + 80);
      v53 = v18;
      *(float32x4_t *)(v10 + 80) = v13;
      *(float32x4_t *)(v10 + 96) = v13;
      ++*(_DWORD *)(v10 + 112);
      v54 = 1;
      v55 = *(_OWORD *)(v10 + 120);
      *(float32x4_t *)(v10 + 120) = v13;
      v56 = *(_OWORD *)(v10 + 136);
      *(float32x4_t *)(v10 + 136) = v13;
      v58 = *(_QWORD *)(v10 + 160);
      *(_QWORD *)(v10 + 160) = 0;
      ++*(_DWORD *)(v10 + 152);
      v19 = v11;
      v57 = 1;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 368);
        *(_OWORD *)(v20 + 528) = *(_OWORD *)(a1 + v19 + 352);
        *(_OWORD *)(v20 + 544) = v21;
        *(_OWORD *)(v20 + 560) = *(_OWORD *)(a1 + v19 + 384);
        v22 = a1 + v19 + 400;
        re::DynamicArray<re::internal::DeferredUnregister *>::operator=(a1 + v19 + 576, v22);
        re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v20 + 616, v20 + 440);
        re::DynamicArray<re::RigComponentConstraint>::operator=(v20 + 656, v20 + 480);
        if (v19 == -352)
          break;
        v23 = vsubq_f32(v48, v47);
        v23.i32[3] = 0;
        v24 = vmaxnmq_f32(v23, (float32x4_t)0);
        v25 = vsubq_f32(*(float32x4_t *)(v20 + 208), *(float32x4_t *)(v20 + 192));
        v25.i32[3] = 0;
        v26 = vmaxnmq_f32(v25, (float32x4_t)0);
        v19 -= 176;
        if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v24, *(float32x2_t *)v24.f32, 1), vmulq_lane_f32(v26, *(float32x2_t *)v26.f32, 1))).u8[0] & 1) == 0)
        {
          v27 = (_OWORD *)(a1 + v19 + 528);
          goto LABEL_12;
        }
      }
      v27 = (_OWORD *)a1;
LABEL_12:
      *v27 = v46;
      v27[1] = v47;
      v27[2] = v48;
      re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v22, (uint64_t)&v49);
      re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v20 + 440, (uint64_t)&v52 + 8);
      re::DynamicArray<re::RigComponentConstraint>::operator=(v20 + 480, (uint64_t)&v55 + 8);
      v2 = v45;
      if (*((_QWORD *)&v55 + 1))
      {
        if (v58)
          (*(void (**)(void))(**((_QWORD **)&v55 + 1) + 40))();
        v58 = 0;
        v56 = 0uLL;
        *((_QWORD *)&v55 + 1) = 0;
        ++v57;
      }
      v13 = 0uLL;
      if (*((_QWORD *)&v52 + 1))
      {
        if ((_QWORD)v55)
        {
          (*(void (**)(void))(**((_QWORD **)&v52 + 1) + 40))();
          v13 = 0uLL;
        }
        *(_QWORD *)&v55 = 0;
        v53 = 0uLL;
        *((_QWORD *)&v52 + 1) = 0;
        ++v54;
      }
      if (v49 && (_QWORD)v52)
      {
        (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        v13 = 0uLL;
      }
      if (++v12 == 8)
        return v10 + 176 == v45;
    }
    v9 = (float32x4_t *)v10;
    v11 += 176;
    v10 += 176;
    if (v10 == v2)
      return 1;
  }
}

uint64_t std::iter_swap[abi:nn180100]<re::`anonymous namespace'::PiecewiseBezierCurve *,re::`anonymous namespace'::PiecewiseBezierCurve *>(__int128 *a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v13 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = 0;
  v14 = *(__int128 *)((char *)a1 + 56);
  *(__int128 *)((char *)a1 + 56) = 0u;
  ++*((_DWORD *)a1 + 18);
  v15 = 1;
  v3 = (uint64_t)a1 + 88;
  v4 = a1[6];
  v16 = a1[5];
  v17 = v4;
  a1[5] = 0u;
  a1[6] = 0u;
  ++*((_DWORD *)a1 + 28);
  v18 = 1;
  v5 = (uint64_t)(a1 + 8);
  v19 = *(__int128 *)((char *)a1 + 120);
  *(__int128 *)((char *)a1 + 120) = 0u;
  v20 = *(__int128 *)((char *)a1 + 136);
  *(__int128 *)((char *)a1 + 136) = 0u;
  v22 = *((_QWORD *)a1 + 20);
  *((_QWORD *)a1 + 20) = 0;
  ++*((_DWORD *)a1 + 38);
  v21 = 1;
  v6 = *a2;
  v7 = a2[2];
  a1[1] = a2[1];
  a1[2] = v7;
  v8 = (uint64_t)(a2 + 3);
  *a1 = v6;
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v3, (uint64_t)a2 + 88);
  re::DynamicArray<re::RigComponentConstraint>::operator=(v5, (uint64_t)(a2 + 8));
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v12;
  re::DynamicArray<re::internal::DeferredUnregister *>::operator=(v8, (uint64_t)&v13);
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=((uint64_t)a2 + 88, (uint64_t)&v16 + 8);
  re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)(a2 + 8), (uint64_t)&v19 + 8);
  if (*((_QWORD *)&v19 + 1))
  {
    if (v22)
      (*(void (**)(void))(**((_QWORD **)&v19 + 1) + 40))();
    v22 = 0;
    v20 = 0uLL;
    *((_QWORD *)&v19 + 1) = 0;
    ++v21;
  }
  if (*((_QWORD *)&v16 + 1))
  {
    if ((_QWORD)v19)
      (*(void (**)(void))(**((_QWORD **)&v16 + 1) + 40))();
    *(_QWORD *)&v19 = 0;
    v17 = 0uLL;
    *((_QWORD *)&v16 + 1) = 0;
    ++v18;
  }
  result = v13;
  if (v13)
  {
    if ((_QWORD)v16)
      return (*(uint64_t (**)(void))(*(_QWORD *)v13 + 40))();
  }
  return result;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::`anonymous namespace'::loadControlHullFromCoreText(__CTFont const*,unsigned short)::$_0 &,re::`anonymous namespace'::PiecewiseBezierCurve *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;

  v9 = vsubq_f32(*(float32x4_t *)(a4 + 32), *(float32x4_t *)(a4 + 16));
  v9.i32[3] = 0;
  v10 = vmaxnmq_f32(v9, (float32x4_t)0);
  v11 = vsubq_f32(*(float32x4_t *)(a3 + 32), *(float32x4_t *)(a3 + 16));
  v11.i32[3] = 0;
  v12 = vmaxnmq_f32(v11, (float32x4_t)0);
  if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v10, *(float32x2_t *)v10.f32, 1), vmulq_lane_f32(v12, *(float32x2_t *)v12.f32, 1))).u8[0] & 1) != 0)
  {
    v13 = vsubq_f32(*(float32x4_t *)(a3 + 32), *(float32x4_t *)(a3 + 16));
    v13.i32[3] = 0;
    v14 = vmaxnmq_f32(v13, (float32x4_t)0);
    v15 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 16));
    v15.i32[3] = 0;
    v16 = vmaxnmq_f32(v15, (float32x4_t)0);
    if ((vmovn_s32(vcgtq_f32(vmulq_lane_f32(v14, *(float32x2_t *)v14.f32, 1), vmulq_lane_f32(v16, *(float32x2_t *)v16.f32, 1))).u8[0] & 1) != 0)
    {
      v17 = vsubq_f32(*(float32x4_t *)(a2 + 32), *(float32x4_t *)(a2 + 16));
      v17.i32[3] = 0;
      v18 = vmaxnmq_f32(v17, (float32x4_t)0);
      v19 = vsubq_f32(*(float32x4_t *)(a1 + 32), *(float32x4_t *)(a1 + 16));
      v19.i32[3] = 0;
      v20 = vmaxnmq_f32(v19, (float32x4_t)0);
    }
  }
  return result;
}

uint64_t re::`anonymous namespace'::isPointInsidePolygon(simd_float2 *a1, simd_float2 **a2)
{
  unint64_t v2;
  simd_float2 *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  float32x2_t *v12;
  simd_float2 *v13;
  float *v14;
  float v15;
  float v16;
  simd_float2 *v17;
  float32x2_t v18;
  uint32x2_t v19;
  uint64_t result;
  simd_float2 *v21;
  float v22;

  v3 = a2[1];
  v4 = ((_DWORD)v3 - 1);
  if (v3)
    v5 = (_DWORD)v3 == 1;
  else
    v5 = 1;
  if (!v5)
  {
    v8 = 0;
    v9 = 0;
    v10 = 12;
    while (1)
    {
      v11 = (unint64_t)a2[1];
      if (v11 <= v8)
        break;
      v2 = v8 + 1;
      if (v11 <= v8 + 1)
        goto LABEL_28;
      v12 = (float32x2_t *)*a2;
      v13 = &(*a2)[v8];
      v14 = (float *)((char *)*a2 + v10);
      v15 = a1->f32[1];
      v16 = *v14;
      if (*(v14 - 2) <= v15)
      {
        if (v16 > v15 && _simd_orient_pf2((simd_float2)v12[v8], v13[1], *a1) > 0.0)
          ++v9;
      }
      else if (v16 <= v15)
      {
        v9 = (__PAIR64__(v9, 0.0) - COERCE_UNSIGNED_INT(_simd_orient_pf2(v13[1], (simd_float2)v12[v8], *a1))) >> 32;
      }
      v10 += 8;
      v8 = v2;
      if (v4 == v2)
      {
        v17 = a2[1];
        if (v17)
        {
          v18 = (float32x2_t)**a2;
          v19 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32((float32x2_t)(*a2)[(_QWORD)v17 - 1], v18));
          if ((vpmax_u32(v19, v19).u32[0] & 0x80000000) == 0)
            return v9 != 0;
          if ((unint64_t)v17 > v4)
          {
            v21 = &(*a2)[v4];
            v22 = a1->f32[1];
            if (v21->f32[1] <= v22)
            {
              if (v18.f32[1] > v22 && _simd_orient_pf2(*v21, **a2, *a1) > 0.0)
                ++v9;
            }
            else if (v18.f32[1] <= v22)
            {
              v9 = (__PAIR64__(v9, 0.0) - COERCE_UNSIGNED_INT(_simd_orient_pf2(**a2, *v21, *a1))) >> 32;
            }
            return v9 != 0;
          }
LABEL_30:
          re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v4, v17);
          result = _os_crash();
          __break(1u);
          return result;
        }
LABEL_29:
        re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "last", 233);
        _os_crash();
        __break(1u);
        goto LABEL_30;
      }
    }
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v8, v11);
    _os_crash();
    __break(1u);
LABEL_28:
    re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v2, v11);
    _os_crash();
    __break(1u);
    goto LABEL_29;
  }
  v9 = 0;
  return v9 != 0;
}

_QWORD *re::DynamicArray<re::`anonymous namespace'::Boundary>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE0uLL))
        {
          v2 = 224 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 224 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_28;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 224, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_28:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 224 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v14 = *(_OWORD *)(v8 + v10);
          v15 = *(_OWORD *)(v8 + v10 + 32);
          *((_OWORD *)v12 + 1) = *(_OWORD *)(v8 + v10 + 16);
          *((_OWORD *)v12 + 2) = v15;
          *(_OWORD *)v12 = v14;
          v12[10] = 0;
          v12[7] = 0;
          v12[8] = 0;
          v12[6] = 0;
          *((_DWORD *)v12 + 18) = 0;
          v16 = (_QWORD *)(v8 + v10 + 48);
          v17 = *(_QWORD *)(v8 + v10 + 56);
          v12[6] = *v16;
          *v16 = 0;
          v12[7] = v17;
          *(_QWORD *)(v13 + 56) = 0;
          v18 = v7[v10 / 8 + 8];
          v12[8] = *(_QWORD *)(v8 + v10 + 64);
          *(_QWORD *)(v13 + 64) = v18;
          v19 = v7[v10 / 8 + 10];
          v12[10] = *(_QWORD *)(v8 + v10 + 80);
          *(_QWORD *)(v13 + 80) = v19;
          *(_DWORD *)(v13 + 72) = *(_DWORD *)(v8 + v10 + 72) + 1;
          *((_DWORD *)v12 + 18) = LODWORD(v7[v10 / 8 + 9]) + 1;
          v12[15] = 0;
          v12[12] = 0;
          v12[13] = 0;
          v12[11] = 0;
          *((_DWORD *)v12 + 28) = 0;
          v20 = (_QWORD *)(v8 + v10 + 88);
          v21 = *(_QWORD *)(v8 + v10 + 96);
          v12[11] = *v20;
          *v20 = 0;
          v12[12] = v21;
          *(_QWORD *)(v13 + 96) = 0;
          v22 = v7[v10 / 8 + 13];
          v12[13] = *(_QWORD *)(v8 + v10 + 104);
          *(_QWORD *)(v13 + 104) = v22;
          v23 = v7[v10 / 8 + 15];
          v12[15] = *(_QWORD *)(v8 + v10 + 120);
          *(_QWORD *)(v13 + 120) = v23;
          *(_DWORD *)(v13 + 112) = *(_DWORD *)(v8 + v10 + 112) + 1;
          *((_DWORD *)v12 + 28) = LODWORD(v7[v10 / 8 + 14]) + 1;
          v12[20] = 0;
          v12[17] = 0;
          v12[18] = 0;
          v12[16] = 0;
          *((_DWORD *)v12 + 38) = 0;
          v24 = (_QWORD *)(v8 + v10 + 128);
          v25 = *(_QWORD *)(v8 + v10 + 136);
          v12[16] = *v24;
          *v24 = 0;
          v12[17] = v25;
          *(_QWORD *)(v13 + 136) = 0;
          v26 = v7[v10 / 8 + 18];
          v12[18] = *(_QWORD *)(v8 + v10 + 144);
          *(_QWORD *)(v13 + 144) = v26;
          v27 = v7[v10 / 8 + 20];
          v12[20] = *(_QWORD *)(v8 + v10 + 160);
          *(_QWORD *)(v13 + 160) = v27;
          *(_DWORD *)(v13 + 152) = *(_DWORD *)(v8 + v10 + 152) + 1;
          *((_DWORD *)v12 + 38) = LODWORD(v7[v10 / 8 + 19]) + 1;
          v12[26] = 0;
          v12[23] = 0;
          v12[24] = 0;
          v12[22] = 0;
          *((_DWORD *)v12 + 50) = 0;
          v28 = (uint64_t *)(v8 + v10 + 176);
          v29 = *(_QWORD *)(v8 + v10 + 184);
          v12[22] = *v28;
          *v28 = 0;
          v12[23] = v29;
          *(_QWORD *)(v13 + 184) = 0;
          v30 = v7[v10 / 8 + 24];
          v12[24] = *(_QWORD *)(v8 + v10 + 192);
          *(_QWORD *)(v13 + 192) = v30;
          v31 = v7[v10 / 8 + 26];
          v12[26] = *(_QWORD *)(v8 + v10 + 208);
          *(_QWORD *)(v13 + 208) = v31;
          *(_DWORD *)(v13 + 200) = *(_DWORD *)(v8 + v10 + 200) + 1;
          *((_DWORD *)v12 + 50) = LODWORD(v7[v10 / 8 + 25]) + 1;
          if (*v24)
          {
            if (*(_QWORD *)(v13 + 160))
              (*(void (**)(_QWORD))(*(_QWORD *)*v24 + 40))(*v24);
            *(_QWORD *)(v13 + 160) = 0;
            *(_QWORD *)(v8 + v10 + 136) = 0;
            *(_QWORD *)(v8 + v10 + 144) = 0;
            *v24 = 0;
            ++*(_DWORD *)(v13 + 152);
          }
          if (*v20)
          {
            if (*(_QWORD *)(v13 + 120))
              (*(void (**)(_QWORD))(*(_QWORD *)*v20 + 40))(*v20);
            *(_QWORD *)(v13 + 120) = 0;
            *(_QWORD *)(v8 + v10 + 96) = 0;
            *(_QWORD *)(v8 + v10 + 104) = 0;
            *v20 = 0;
            ++*(_DWORD *)(v13 + 112);
          }
          if (*v16)
          {
            if (*(_QWORD *)(v13 + 80))
              (*(void (**)(_QWORD))(*(_QWORD *)*v16 + 40))(*v16);
            *(_QWORD *)(v13 + 80) = 0;
            *(_QWORD *)(v8 + v10 + 56) = 0;
            *(_QWORD *)(v8 + v10 + 64) = 0;
            *v16 = 0;
            ++*(_DWORD *)(v13 + 72);
          }
          v10 += 224;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_28;
    }
  }
  return result;
}

_QWORD *re::`anonymous namespace'::makeCurveTessellationWithUniformSampling(_QWORD *result, unsigned __int8 *a2, unsigned int a3)
{
  float32x2_t *v3;
  __int128 v4;
  _QWORD *v5;
  int v6;
  unsigned int v7;
  unsigned int v9;
  uint64_t v10;
  float32x4_t *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  float32x2_t *v17;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int v26;
  float32x2_t *v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  uint64_t v33;
  unint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unint64_t v38;
  int v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  int v50;
  float v51;
  float v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float *v73;
  unint64_t v74;
  unint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float *v79;
  float v80;
  float v81;
  unint64_t v82;
  float32x2_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  _anonymous_namespace_ *v89;
  float v90;
  float v91;
  _BYTE v92[12];
  __int16 v93;
  int v94;
  __int16 v95;
  unint64_t v96;
  __int16 v97;
  float32x2_t *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v4 = 0x7F0000007FLL;
  *((_QWORD *)&v4 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)result = vdupq_n_s32(0x7F800000u);
  *((_OWORD *)result + 1) = v4;
  result[4] = 0;
  v5 = result + 4;
  result[5] = 0;
  result[6] = 0;
  *((_DWORD *)result + 14) = 0;
  result[18] = 0;
  *((_OWORD *)result + 4) = 0u;
  *((_OWORD *)result + 5) = 0u;
  *((_DWORD *)result + 24) = 0;
  *(_OWORD *)(result + 13) = 0u;
  *(_OWORD *)(result + 15) = 0u;
  *((_DWORD *)result + 34) = 0;
  v6 = *a2;
  v7 = v6 - 1;
  if (!*a2)
    v7 = 0;
  if (v7 <= a3 || v6 == 0)
    v9 = a3;
  else
    v9 = v7;
  v10 = *((_QWORD *)a2 + 13);
  if ((_DWORD)v10)
  {
    v12 = (float32x4_t *)result;
    v13 = (v9 + 1) * v10;
    v14 = (v13 + 1);
    if (v13 == -1)
    {
      v15 = 0;
    }
    else
    {
      re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(result + 4, (v13 + 1));
      v15 = v12[5].u64[0];
    }
    if (v15 < v14)
      re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(&v12[4].i64[1], v14);
    if (!*((_QWORD *)a2 + 8))
      goto LABEL_111;
    if (!*((_QWORD *)a2 + 18))
    {
LABEL_112:
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v99 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      v93 = 1024;
      v94 = 797;
      v95 = 2048;
      v96 = 0;
      v97 = 2048;
      v98 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_113;
    }
    v16 = **((unsigned __int8 **)a2 + 10);
    v17 = (float32x2_t *)*((_QWORD *)a2 + 20);
    __asm { FMOV            V8.2S, #3.0 }
    if (v16 == 3)
    {
      v24 = vadd_f32(*v17, vmul_f32(vadd_f32(vmul_f32(v17[1], 0), vmul_f32(v17[2], 0)), _D8));
      v22 = vmul_f32(v17[3], 0);
    }
    else
    {
      if (v16 == 2)
      {
        v22 = vadd_f32(*v17, vmul_f32(v17[1], 0));
        v23 = v17[2];
      }
      else
      {
        if (v16 != 1)
        {
          v25 = 0;
LABEL_26:
          *(float32x2_t *)&v99 = v25;
          re::DynamicArray<unsigned long>::add(v5, &v99);
          if (*((_QWORD *)a2 + 8))
          {
            if (*((_QWORD *)a2 + 18))
            {
              v26 = **((unsigned __int8 **)a2 + 10);
              v27 = (float32x2_t *)*((_QWORD *)a2 + 20);
              switch(v26)
              {
                case 3:
                  v29 = v27[2];
                  v30 = vadd_f32(vmul_f32(vsub_f32(v27[1], *v27), _D8), vmul_f32(vsub_f32(v29, v27[1]), 0));
                  v31 = vmul_f32(vsub_f32(v27[3], v29), 0);
                  break;
                case 2:
                  v30 = vsub_f32(vadd_f32(v27[1], v27[1]), vadd_f32(*v27, *v27));
                  v31 = vmul_f32(v27[2], 0);
                  break;
                case 1:
                  v28 = vsub_f32(v27[1], *v27);
LABEL_35:
                  v32 = v28;
LABEL_37:
                  v33 = v10;
                  *(float32x2_t *)&v99 = v32;
                  re::DynamicArray<unsigned long>::add(&v12[4].i64[1], &v99);
                  v34 = 0;
                  v35 = *v12;
                  v36 = v12[1];
                  v35.i32[3] = 0;
                  v37.i64[0] = *(_QWORD *)(v12[4].i64[0] + 8 * v12[3].i64[0] - 8);
                  v36.i32[3] = 0;
                  *v12 = vminnmq_f32(v35, v37);
                  v12[1] = vmaxnmq_f32(v36, v37);
                  v89 = (_anonymous_namespace_ *)&v12[7];
                  while (1)
                  {
                    v38 = *((_QWORD *)a2 + 8);
                    if (v38 <= v34)
                    {
                      v102 = 0u;
                      v103 = 0u;
                      v100 = 0u;
                      v101 = 0u;
                      v99 = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v92 = 136315906;
                      *(_QWORD *)&v92[4] = "operator[]";
                      v93 = 1024;
                      v94 = 797;
                      v95 = 2048;
                      v96 = v34;
                      v97 = 2048;
                      v98 = (float32x2_t *)v38;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_109:
                      v102 = 0u;
                      v103 = 0u;
                      v100 = 0u;
                      v101 = 0u;
                      v99 = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v92 = 136315906;
                      *(_QWORD *)&v92[4] = "operator[]";
                      v93 = 1024;
                      v94 = 797;
                      v95 = 2048;
                      v96 = v34;
                      v97 = 2048;
                      v98 = (float32x2_t *)v38;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_110:
                      v102 = 0u;
                      v103 = 0u;
                      v100 = 0u;
                      v101 = 0u;
                      v99 = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v92 = 136315906;
                      *(_QWORD *)&v92[4] = "operator[]";
                      v93 = 1024;
                      v94 = 797;
                      v95 = 2048;
                      v96 = v38;
                      v97 = 2048;
                      v98 = v3;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
LABEL_111:
                      v102 = 0u;
                      v103 = 0u;
                      v100 = 0u;
                      v101 = 0u;
                      v99 = 0u;
                      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                      *(_DWORD *)v92 = 136315906;
                      *(_QWORD *)&v92[4] = "operator[]";
                      v93 = 1024;
                      v94 = 797;
                      v95 = 2048;
                      v96 = 0;
                      v97 = 2048;
                      v98 = 0;
                      _os_log_send_and_compose_impl();
                      _os_crash_msg();
                      __break(1u);
                      goto LABEL_112;
                    }
                    v38 = *((_QWORD *)a2 + 13);
                    if (v38 <= v34)
                      goto LABEL_109;
                    v38 = *(_QWORD *)(*((_QWORD *)a2 + 15) + 8 * v34);
                    v3 = (float32x2_t *)*((_QWORD *)a2 + 18);
                    if ((unint64_t)v3 <= v38)
                      goto LABEL_110;
                    v39 = *(unsigned __int8 *)(*((_QWORD *)a2 + 10) + v34);
                    v3 = (float32x2_t *)(*((_QWORD *)a2 + 20) + 8 * v38);
                    if (v39 == 3)
                      break;
                    if (v39 == 2)
                    {
                      v42 = vsub_f32(vadd_f32(v3[1], v3[1]), vadd_f32(*v3, *v3));
                      v43 = vmul_f32(v3[2], 0);
                      goto LABEL_47;
                    }
                    if (v39 == 1)
                    {
                      v40 = vsub_f32(v3[1], *v3);
LABEL_48:
                      v44 = v40;
                      goto LABEL_50;
                    }
                    v44 = 0;
LABEL_50:
                    *(float32x2_t *)&v99 = v44;
                    v45 = v12[6].i64[1] + 8 * v12[5].i64[1];
                    v47 = *(float *)(v45 - 8);
                    v46 = v45 - 8;
                    v48 = v47;
                    if (v47 != v44.f32[0]
                      && vabds_f32(v48, v44.f32[0]) >= (float)((float)((float)(fabsf(v44.f32[0]) + fabsf(v48)) + 1.0)
                                                             * 0.00001)
                      || (v49 = *(float *)(v46 + 4), v49 != v44.f32[1])
                      && vabds_f32(v49, v44.f32[1]) >= (float)((float)((float)(fabsf(v44.f32[1]) + fabsf(v49)) + 1.0)
                                                             * 0.00001))
                    {
                      *(_DWORD *)v92 = v12[5].i64[1];
                      re::DynamicArray<int>::add(v89, v92);
                      re::DynamicArray<unsigned long>::add(&v12[4].i64[1], &v99);
                    }
                    if (v9)
                    {
                      v50 = 0;
                      while (1)
                      {
                        v51 = (float)(1.0 / (float)(v9 + 1)) * (float)++v50;
                        v52 = 1.0 - v51;
                        v90 = 1.0 - v51;
                        v91 = v51;
                        if (v39 == 3)
                        {
                          v54 = vadd_f32(vmul_n_f32(*v3, v52 * (float)(v52 * v52)), vmul_f32(vadd_f32(vmul_n_f32(v3[1], v51 * (float)(v52 * v52)), vmul_n_f32(v3[2], v52 * (float)(v51 * v51))), _D8));
                          v53 = vmul_n_f32(v3[3], v51 * (float)(v51 * v51));
                          goto LABEL_63;
                        }
                        if (v39 == 2)
                          break;
                        if (v39 == 1)
                        {
                          v53 = vmul_n_f32(*v3, v52);
                          v54 = vmul_n_f32(v3[1], v51);
LABEL_63:
                          v55 = vadd_f32(v54, v53);
                          goto LABEL_65;
                        }
                        v55 = 0;
LABEL_65:
                        *(float32x2_t *)v92 = v55;
                        re::DynamicArray<unsigned long>::add(v5, v92);
                        if (v39 == 3)
                        {
                          v60 = v3[2];
                          v57 = vadd_f32(vmul_n_f32(vsub_f32(v3[1], *v3), (float)(v90 * v90) * 3.0), vmul_n_f32(vsub_f32(v60, v3[1]), v91 * (float)(v90 * 6.0)));
                          v58 = (float)(v91 * v91) * 3.0;
                          v59 = vsub_f32(v3[3], v60);
                          goto LABEL_71;
                        }
                        if (v39 == 2)
                        {
                          v57 = vadd_f32(vmul_n_f32(*v3, v90 * -2.0), vmul_n_f32(v3[1], (float)(v91 * -4.0) + 2.0));
                          v58 = v91 + v91;
                          v59 = v3[2];
LABEL_71:
                          v56 = vadd_f32(v57, vmul_n_f32(v59, v58));
                          goto LABEL_72;
                        }
                        if (v39 != 1)
                        {
                          v61 = 0;
                          goto LABEL_74;
                        }
                        v56 = vsub_f32(v3[1], *v3);
LABEL_72:
                        v61 = v56;
LABEL_74:
                        *(float32x2_t *)v92 = v61;
                        re::DynamicArray<unsigned long>::add(&v12[4].i64[1], v92);
                        v62.i64[0] = *(_QWORD *)(v12[4].i64[0] + 8 * v12[3].i64[0] - 8);
                        v63 = *v12;
                        v64 = v12[1];
                        v63.i32[3] = 0;
                        v64.i32[3] = 0;
                        *v12 = vminnmq_f32(v63, v62);
                        v12[1] = vmaxnmq_f32(v64, v62);
                        if (v9 == v50)
                          goto LABEL_75;
                      }
                      v53 = vadd_f32(vmul_n_f32(*v3, v52 * v52), vmul_n_f32(v3[1], v51 * (float)(v52 + v52)));
                      v54 = vmul_n_f32(v3[2], v51 * v51);
                      goto LABEL_63;
                    }
LABEL_75:
                    switch(v39)
                    {
                      case 3:
                        v66 = v3[3];
                        v65 = vadd_f32(vmul_f32(*v3, 0), vmul_f32(vadd_f32(vmul_f32(v3[1], 0), vmul_f32(v3[2], 0)), _D8));
                        goto LABEL_81;
                      case 2:
                        v66 = vadd_f32(vmul_f32(*v3, 0), vmul_f32(v3[1], 0));
                        v65 = v3[2];
                        goto LABEL_81;
                      case 1:
                        v65 = v3[1];
                        v66 = vmul_f32(*v3, 0);
LABEL_81:
                        v67 = vadd_f32(v65, v66);
                        goto LABEL_83;
                    }
                    v67 = 0;
LABEL_83:
                    *(float32x2_t *)v92 = v67;
                    re::DynamicArray<unsigned long>::add(v5, v92);
                    if (v39 == 3)
                    {
                      v69 = v3[2];
                      v70 = vadd_f32(vmul_f32(vsub_f32(v3[1], *v3), 0), vmul_f32(vsub_f32(v69, v3[1]), 0));
                      v71 = vmul_f32(vsub_f32(v3[3], v69), _D8);
LABEL_89:
                      v68 = vadd_f32(v70, v71);
                      goto LABEL_90;
                    }
                    if (v39 == 2)
                    {
                      v70 = vsub_f32(vmul_f32(*v3, (float32x2_t)0x8000000080000000), vadd_f32(v3[1], v3[1]));
                      v71 = vadd_f32(v3[2], v3[2]);
                      goto LABEL_89;
                    }
                    if (v39 != 1)
                    {
                      v72 = 0;
                      goto LABEL_92;
                    }
                    v68 = vsub_f32(v3[1], *v3);
LABEL_90:
                    v72 = v68;
LABEL_92:
                    *(float32x2_t *)v92 = v72;
                    re::DynamicArray<unsigned long>::add(&v12[4].i64[1], v92);
                    v73 = (float *)v12[4].i64[0];
                    v74 = v12[3].u64[0];
                    v75 = v74 - 1;
                    v76.i64[0] = *(_QWORD *)&v73[2 * v74 - 2];
                    v77 = *v12;
                    v78 = v12[1];
                    v77.i32[3] = 0;
                    v78.i32[3] = 0;
                    *v12 = vminnmq_f32(v77, v76);
                    v12[1] = vmaxnmq_f32(v78, v76);
                    if (++v34 == v33)
                    {
                      if (v74 > 1
                        && ((v79 = &v73[2 * v75], *v79 == *v73)
                         || vabds_f32(*v79, *v73) < (float)((float)((float)(fabsf(*v79) + fabsf(*v73)) + 1.0) * 0.00001))
                        && ((v80 = v79[1], v81 = v73[1], v80 == v81)
                         || vabds_f32(v80, v81) < (float)((float)((float)(fabsf(v80) + fabsf(v81)) + 1.0) * 0.00001)))
                      {
                        v12[3].i64[0] = v75;
                        ++v12[3].i32[2];
                      }
                      else
                      {
                        v82 = *((_QWORD *)a2 + 18);
                        if (v82 >= 2)
                        {
                          v83 = vsub_f32(**((float32x2_t **)a2 + 20), *(float32x2_t *)(*((_QWORD *)a2 + 20) + 8 * v82 - 8));
                          *(float32x2_t *)&v99 = v83;
                          v84 = v12[6].i64[1] + 8 * v12[5].i64[1];
                          v86 = *(float *)(v84 - 8);
                          v85 = v84 - 8;
                          v87 = v86;
                          if (v86 != v83.f32[0]
                            && vabds_f32(v87, v83.f32[0]) >= (float)((float)((float)(fabsf(v83.f32[0]) + fabsf(v87))
                                                                           + 1.0)
                                                                   * 0.00001)
                            || (v88 = *(float *)(v85 + 4), v88 != v83.f32[1])
                            && vabds_f32(v88, v83.f32[1]) >= (float)((float)((float)(fabsf(v83.f32[1]) + fabsf(v88))
                                                                           + 1.0)
                                                                   * 0.00001))
                          {
                            *(_DWORD *)v92 = v12[5].i64[1];
                            re::DynamicArray<int>::add(v89, v92);
                            re::DynamicArray<unsigned long>::add(&v12[4].i64[1], &v99);
                          }
                          re::DynamicArray<unsigned long>::add(&v12[4].i64[1], &v99);
                        }
                      }
                      LODWORD(v99) = v12[5].i64[1];
                      return re::DynamicArray<int>::add(v89, &v99);
                    }
                  }
                  v41 = v3[2];
                  v42 = vadd_f32(vmul_f32(vsub_f32(v3[1], *v3), _D8), vmul_f32(vsub_f32(v41, v3[1]), 0));
                  v43 = vmul_f32(vsub_f32(v3[3], v41), 0);
LABEL_47:
                  v40 = vadd_f32(v42, v43);
                  goto LABEL_48;
                default:
                  v32 = 0;
                  goto LABEL_37;
              }
              v28 = vadd_f32(v30, v31);
              goto LABEL_35;
            }
LABEL_114:
            v102 = 0u;
            v103 = 0u;
            v100 = 0u;
            v101 = 0u;
            v99 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v92 = 136315906;
            *(_QWORD *)&v92[4] = "operator[]";
            v93 = 1024;
            v94 = 797;
            v95 = 2048;
            v96 = 0;
            v97 = 2048;
            v98 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
LABEL_113:
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v99 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v92 = 136315906;
          *(_QWORD *)&v92[4] = "operator[]";
          v93 = 1024;
          v94 = 797;
          v95 = 2048;
          v96 = 0;
          v97 = 2048;
          v98 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_114;
        }
        v22 = *v17;
        v23 = v17[1];
      }
      v24 = vmul_f32(v23, 0);
    }
    v25 = vadd_f32(v24, v22);
    goto LABEL_26;
  }
  return result;
}

_QWORD *re::`anonymous namespace'::appendToArray<re::Vector2<float>>(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;

  v3 = this;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4 + this[2];
  if (this[1] < v5)
  {
    this = re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(this, v5);
    v4 = *(_QWORD *)(a2 + 16);
  }
  if (v4)
  {
    v6 = 0;
    for (i = 0; i != v4; ++i)
    {
      if (*(_QWORD *)(a2 + 16) <= i)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      this = re::DynamicArray<unsigned long>::add(v3, (_QWORD *)(*(_QWORD *)(a2 + 32) + v6));
      v6 += 8;
    }
  }
  return this;
}

void std::vector<geo::math::Matrix<double,3,1>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<geo::math::Matrix<double,3,1>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::LoadData(_QWORD *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = (char *)(a1 + 1);
  if (v3 != (char *)a2)
    std::vector<geo::math::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<geo::math::Matrix<double,3,1>*,geo::math::Matrix<double,3,1>*>(v3, *(char **)a2, *(_QWORD *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::vector<std::vector<unsigned long>>::resize(a1 + 35, 1uLL);
  std::vector<unsigned long>::resize(a1[35], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 3));
  v4 = a1[35];
  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD **)(v4 + 8);
  if (v5 != v6)
  {
    v7 = 0;
    do
      *v5++ = v7++;
    while (v5 != v6);
  }
}

_QWORD *geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearConstraints(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)this + 32);
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)this + 35);
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)this + 38);
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)this + 41);
  return std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::clear((_QWORD *)this + 44);
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::vector<int>::size_type v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unint64_t i;
  uint64_t v44;
  double *v45;
  unsigned int v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  std::vector<int>::pointer begin;
  _DWORD *v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t j;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  std::vector<int> v69;
  std::vector<int>::value_type __x[4];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v2) >> 3);
  if (v5 > 1)
  {
    v68 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v2) >> 3);
    if (*(_BYTE *)this)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Start computing Delaunay triangulation ... \n", 44);
      v2 = *((_QWORD *)this + 1);
      v4 = *((_QWORD *)this + 2);
      v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v2) >> 3);
    }
    v66 = v2;
    v67 = v4;
    v6 = (uint64_t *)((char *)this + 32);
    std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 32), v5);
    v7 = *((_QWORD *)this + 4);
    v8 = (unsigned int *)*((_QWORD *)this + 5);
    if ((unsigned int *)v7 != v8)
    {
      v9 = 0;
      v10 = (unsigned int *)*((_QWORD *)this + 4);
      do
        *v10++ = v9++;
      while (v10 != v8);
    }
    v11 = 126 - 2 * __clz(((uint64_t)v8 - v7) >> 2);
    *(_QWORD *)__x = this;
    if (v8 == (unsigned int *)v7)
      v12 = 0;
    else
      v12 = v11;
    std::__introsort<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>(v7, v8, (uint64_t *)__x, v12, 1);
    v14 = *((_QWORD *)this + 1);
    v15 = (__int128 *)*((_QWORD *)this + 2);
    v16 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v14) >> 3));
    *(_QWORD *)__x = geo::math::less<double,3,1>;
    if (v15 == (__int128 *)v14)
      v17 = 0;
    else
      v17 = v16;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*,false>(v14, v15, (uint64_t (**)(__int128 *, __int128 *))__x, v17, 1, v13);
    if (v5 >= 2)
    {
      v18 = 0;
      v19 = 1;
      do
      {
        v20 = *v3 + 24 * v19;
        v21 = (double *)(*v3 + 24 * v18);
        if (*(double *)v20 == *v21 && *(double *)(v20 + 8) == v21[1])
        {
          v22 = *(unsigned int *)(*((_QWORD *)this + 4) + 4 * v19);
          *(_OWORD *)__x = *(_OWORD *)v20;
          v71 = *(_QWORD *)(v20 + 16);
          v23 = *((_QWORD *)this + 14);
          v24 = *((_QWORD *)this + 15);
          if (v23 >= v24)
          {
            v26 = *((_QWORD *)this + 13);
            v27 = (uint64_t)(v23 - v26) >> 5;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 59)
              abort();
            v29 = v24 - v26;
            if (v29 >> 4 > v28)
              v28 = v29 >> 4;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
              v30 = 0x7FFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
              v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<re::ecs2::PolygonFrustumClipper::Vertex>>((uint64_t)this + 120, v30);
            else
              v31 = 0;
            v32 = &v31[32 * v27];
            *(_QWORD *)v32 = v22;
            *(_OWORD *)(v32 + 8) = *(_OWORD *)__x;
            *((_QWORD *)v32 + 3) = v71;
            v34 = (char *)*((_QWORD *)this + 13);
            v33 = (char *)*((_QWORD *)this + 14);
            v35 = v32;
            if (v33 != v34)
            {
              do
              {
                v36 = *((_OWORD *)v33 - 1);
                *((_OWORD *)v35 - 2) = *((_OWORD *)v33 - 2);
                *((_OWORD *)v35 - 1) = v36;
                v35 -= 32;
                v33 -= 32;
              }
              while (v33 != v34);
              v33 = (char *)*((_QWORD *)this + 13);
            }
            v25 = v32 + 32;
            *((_QWORD *)this + 13) = v35;
            *((_QWORD *)this + 14) = v32 + 32;
            *((_QWORD *)this + 15) = &v31[32 * v30];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_QWORD *)v23 = v22;
            *(_OWORD *)(v23 + 8) = *(_OWORD *)__x;
            *(_QWORD *)(v23 + 24) = v71;
            v25 = (char *)(v23 + 32);
          }
          *((_QWORD *)this + 14) = v25;
        }
        ++v19;
      }
      while (v18++ != v5 - 2);
    }
    v38 = (uint64_t *)((char *)this + 56);
    std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 56), v5, geo::math::kInvalidIndex);
    if (v67 != v66)
    {
      v39 = 0;
      v40 = *v6;
      v41 = *v38;
      do
      {
        *(_DWORD *)(v41 + 4 * *(unsigned int *)(v40 + 4 * v39)) = v39;
        ++v39;
      }
      while (v5 > v39);
    }
    memset(&v69, 0, sizeof(v69));
    __x[0] = 0;
    std::vector<unsigned int>::resize(&v69, v5, __x);
    v42 = 0;
    if (v5 >= 2)
    {
      v42 = 0;
      for (i = 1; i < v5; i = (i + 1))
      {
        v44 = *v3 + 24 * i;
        v45 = (double *)(*v3 + 24 * v42);
        if (*(double *)v44 != *v45 || *(double *)(v44 + 8) != v45[1])
        {
          v46 = v42 + 1;
          v42 = i;
          if ((_DWORD)i != v46)
          {
            v47 = *v3 + 24 * v46;
            v48 = *(_OWORD *)v44;
            *(_QWORD *)(v47 + 16) = *(_QWORD *)(v44 + 16);
            *(_OWORD *)v47 = v48;
            *(_DWORD *)(*v6 + 4 * v46) = *(_DWORD *)(*v6 + 4 * i);
            v42 = v46;
          }
        }
        v69.__begin_[i] = v42;
      }
    }
    v49 = v42 + 1;
    if (v5 != v49)
    {
      std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 80), v5);
      v50 = *((_QWORD *)this + 7);
      if (v67 != v66)
      {
        begin = v69.__begin_;
        v52 = (_DWORD *)*((_QWORD *)this + 10);
        if (v5 <= 1)
          v53 = 1;
        else
          v53 = v5;
        v54 = (int *)*((_QWORD *)this + 7);
        do
        {
          v55 = *v54++;
          *v52++ = begin[v55];
          --v53;
        }
        while (v53);
      }
      *((_QWORD *)this + 8) = v50;
      std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 56), v5, geo::math::kInvalidIndex);
      std::vector<geo::math::Matrix<double,3,1>>::resize((uint64_t)v3, v49);
      std::vector<unsigned int>::resize((std::vector<int> *)((char *)this + 32), v49);
      if (!(_DWORD)v49)
      {
        geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveDuplicatesFromLoops(this);
        v5 = 0;
LABEL_64:
        std::vector<std::vector<unsigned long>>::resize((_QWORD *)this + 21, v5);
        geo::math::ConstrainedDelaunayTriangulationMesherDetails::DivideAndConquer(this, 0, v5 - 1, (uint64_t)__x);
        if (*(_BYTE *)this)
          std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Finish computing Delaunay triangulation ... \n", 45);
        v5 = v68;
        if (v69.__begin_)
        {
          v69.__end_ = v69.__begin_;
          operator delete(v69.__begin_);
        }
        return v5 > 1;
      }
      v56 = 0;
      v57 = *v6;
      v58 = *v38;
      do
      {
        *(_DWORD *)(v58 + 4 * *(unsigned int *)(v57 + 4 * v56)) = v56;
        ++v56;
      }
      while (v49 != v56);
      v5 = v49;
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveDuplicatesFromLoops(this);
    if (v5)
    {
      v59 = 0;
      for (j = 0; j != v5; ++j)
      {
        v61 = *v3 + v59;
        v62 = *(_QWORD *)(v61 + 16);
        *(_OWORD *)__x = *(_OWORD *)v61;
        v71 = v62;
        v72 = j;
        std::__hash_table<std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,std::__unordered_map_hasher<geo::math::Matrix<double,3,1>,std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,geo::math::VectorHasher<geo::math::Matrix<double,3,1>>,std::equal_to<geo::math::Matrix<double,3,1>>,true>,std::__unordered_map_equal<geo::math::Matrix<double,3,1>,std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,std::equal_to<geo::math::Matrix<double,3,1>>,geo::math::VectorHasher<geo::math::Matrix<double,3,1>>,true>,std::allocator<std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>>>::__emplace_unique_key_args<geo::math::Matrix<double,3,1>,std::pair<geo::math::Matrix<double,3,1>,unsigned long>>((uint64_t)this + 128, __x, (uint64_t)__x);
        v59 += 24;
      }
    }
    goto LABEL_64;
  }
  if (*(_BYTE *)this)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"Only has ", 9);
    v63 = (_QWORD *)std::ostream::operator<<();
    v64 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v63, (uint64_t)" input points, not enough to be triangulated!", 45);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v64, (uint64_t)" Quitting!\n", 11);
  }
  return v5 > 1;
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::GenerateConstraints(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  _BOOL8 result;

  result = geo::math::ConstrainedDelaunayTriangulationMesherDetails::ReshuffleIndicesAndUpdateConstraints((uint64_t)this, (uint64_t *)this + 32, (_QWORD *)this + 38);
  if ((_DWORD)result)
    return geo::math::ConstrainedDelaunayTriangulationMesherDetails::ReshuffleIndicesAndUpdateConstraints((uint64_t)this, (uint64_t *)this + 35, (_QWORD *)this + 41);
  return result;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeConstrainedDelaunay(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  BOOL v23;
  const char *v24;

  if (*(_BYTE *)this)
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Start computing constrained Delaunay triangulation ... \n", 56);
  v4 = *((_QWORD *)this + 39) - *((_QWORD *)this + 38);
  if (v4)
  {
    v5 = 0;
    v6 = v4 / 24;
    if (v6 <= 1)
      v7 = 1;
    else
      v7 = v6;
    v8 = 1;
    do
    {
      v9 = *(_QWORD *)(*((_QWORD *)this + 38) + 24 * v5 + 8) - *(_QWORD *)(*((_QWORD *)this + 38) + 24 * v5);
      if (v9)
      {
        v10 = 0;
        v11 = v9 >> 3;
        if (v11 <= 1)
          v12 = 1;
        else
          v12 = v11;
        do
        {
          v13 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 38) + 24 * v5) + 8 * v10);
          v8 &= geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeConstraint(this, *v13, v13[1]);
          ++v10;
        }
        while (v12 != v10);
      }
      ++v5;
    }
    while (v5 != v7);
  }
  else
  {
    v8 = 1;
  }
  v14 = *((_QWORD *)this + 42) - *((_QWORD *)this + 41);
  if (v14)
  {
    v15 = 0;
    v16 = v14 / 24;
    if (v16 <= 1)
      v17 = 1;
    else
      v17 = v16;
    do
    {
      v18 = *(_QWORD *)(*((_QWORD *)this + 41) + 24 * v15 + 8) - *(_QWORD *)(*((_QWORD *)this + 41) + 24 * v15);
      if (v18)
      {
        v19 = 0;
        v20 = v18 >> 3;
        if (v20 <= 1)
          v21 = 1;
        else
          v21 = v20;
        do
        {
          v22 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 41) + 24 * v15) + 8 * v19);
          v8 &= geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeConstraint(this, *v22, v22[1]);
          ++v19;
        }
        while (v21 != v19);
      }
      ++v15;
    }
    while (v15 != v17);
  }
  if ((a2 & 1) != 0)
  {
    v23 = geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearSpaceByConstraints(this, (_QWORD *)this + 38);
    LOBYTE(v8) = v23 & geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearSpaceByConstraints(this, (_QWORD *)this + 41) & v8;
  }
  if (*(_BYTE *)this)
  {
    if ((v8 & 1) != 0)
      v24 = "Finish computing constrained Delaunay triangulation ... \n";
    else
      v24 = "Failed computing constrained Delaunay triangulation ... \n";
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)v24, 57);
  }
  return v8 & 1;
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetMesh(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  BOOL v38;
  unsigned int *v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v43;
  BOOL v44;
  unsigned int v46;
  BOOL v47;
  unsigned int v51;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  char *v67;
  uint64_t v68;
  int v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;

  v4 = *((_QWORD *)a1 + 21);
  v5 = *((_QWORD *)a1 + 22) - v4;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v76 = (uint64_t)a1 + 208;
    v77 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    do
    {
      if (*(_QWORD *)(v4 + 24 * v6 + 8) - *(_QWORD *)(v4 + 24 * v6) >= 8uLL)
      {
        v8 = *(_QWORD *)(v4 + 24 * v6);
        v9 = *(_QWORD *)(v4 + 24 * v6 + 8);
        if (v9 != v8)
        {
          v10 = 0;
          v11 = v6 << 32;
          do
          {
            v12 = *(unsigned int *)(v8 + 4 * v10);
            v13 = (v9 - v8) >> 2;
            if (v9 == v8)
            {
LABEL_10:
              v15 = -1;
            }
            else
            {
              v14 = 0;
              v15 = 0;
              while (*(_DWORD *)(v8 + 4 * v14) != (_DWORD)v12)
              {
                v14 = ++v15;
                if (v13 <= v15)
                  goto LABEL_10;
              }
            }
            v16 = *(unsigned int *)(v8 + 4 * ((v15 + 1) % v13));
            v17 = *((_QWORD *)a1 + 1);
            v18 = (double *)(v17 + 24 * v6);
            if ((*(double *)(v17 + 24 * v12) - *v18)
               * (*(double *)(v17 + 24 * v16 + 8) - v18[1])
               - (*(double *)(v17 + 24 * v12 + 8) - v18[1])
               * (*(double *)(v17 + 24 * v16) - *v18) > 0.0)
            {
              v19 = (uint64_t *)(v4 + 24 * v16);
              v20 = *v19;
              v21 = v19[1] - *v19;
              if (v21)
              {
                v22 = 0;
                v23 = v12;
                v24 = v21 >> 2;
                v25 = 1;
                while (*(_DWORD *)(v20 + 4 * v22) != (_DWORD)v12)
                {
                  v22 = v25;
                  if (v24 <= v25++)
                    goto LABEL_100;
                }
                if (v25)
                {
                  if (v7 >= v12 || v7 >= v16)
                  {
                    if (v12 >= v7 || v12 >= v16)
                    {
                      LODWORD(v79) = v16;
                      v27 = v7;
                    }
                    else
                    {
                      LODWORD(v79) = v12;
                      v27 = v16;
                      v23 = v7;
                    }
                  }
                  else
                  {
                    LODWORD(v79) = v7;
                    v27 = v12;
                    v23 = v16;
                  }
                  HIDWORD(v79) = v27;
                  v80 = v23;
                  v28 = v11 | v12;
                  if (v7 < v12)
                    v28 = v6 | (v12 << 32);
                  v78 = v28;
                  if (!std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((_QWORD *)a1 + 44, &v78))goto LABEL_81;
                  v29 = (v12 << 32) | v16;
                  if (v12 < v16)
                    v29 = v12 | ((unint64_t)v16 << 32);
                  v78 = v29;
                  if (!std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((_QWORD *)a1 + 44, &v78))goto LABEL_81;
                  v30 = (v16 << 32) | v6;
                  if (v7 >= v16)
                    v30 = v11 | v16;
                  v78 = v30;
                  if (!std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((_QWORD *)a1 + 44, &v78))goto LABEL_81;
                  v32 = *((_QWORD *)a1 + 41);
                  v31 = *((_QWORD *)a1 + 42);
                  v33 = v31 - v32;
                  if (v31 == v32)
                    goto LABEL_81;
                  v34 = 0;
                  v35 = v33 / 24;
                  v36 = v35 <= 1 ? 1 : v35;
                  v37 = (_QWORD *)(v32 + 8);
                  v38 = 1;
                  while (1)
                  {
                    v39 = (unsigned int *)*(v37 - 1);
                    if (*v37 - (_QWORD)v39 == 24)
                    {
                      v40 = *v39;
                      v41 = *v39 == (_DWORD)v16 || v40 == v7;
                      if (v41 || v40 == (_DWORD)v12)
                      {
                        v43 = v39[2];
                        v44 = v43 == (_DWORD)v16 || v43 == v7;
                        if (v44 || v43 == (_DWORD)v12)
                        {
                          v46 = v39[4];
                          v47 = v46 == (_DWORD)v16 || v46 == v7;
                          if (v47 || v46 == (_DWORD)v12)
                          {
                            if (v40 >= v43 || v40 >= v46)
                            {
                              if (v43 >= v40 || v43 >= v46)
                              {
                                LODWORD(v78) = v46;
                                v51 = v40;
                                v46 = v43;
                              }
                              else
                              {
                                LODWORD(v78) = v43;
                                v51 = v46;
                                v46 = v40;
                              }
                            }
                            else
                            {
                              LODWORD(v78) = v40;
                              v51 = v43;
                            }
                            HIDWORD(v78) = v51;
                            if (v79 != v78 || v80 != (unint64_t)v46)
                              break;
                          }
                        }
                      }
                    }
                    v38 = ++v34 < v35;
                    v37 += 3;
                    if (v36 == v34)
                      goto LABEL_81;
                  }
                  if (!v38)
                  {
LABEL_81:
                    if (!std::__hash_table<geo::math::Matrix<unsigned int,3,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,3,1>>,std::equal_to<geo::math::Matrix<unsigned int,3,1>>,std::allocator<geo::math::Matrix<unsigned int,3,1>>>::find<geo::math::Matrix<unsigned int,3,1>>((_QWORD *)a1 + 27, &v79))
                    {
                      std::__hash_table<geo::math::Matrix<unsigned int,3,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,3,1>>,std::equal_to<geo::math::Matrix<unsigned int,3,1>>,std::allocator<geo::math::Matrix<unsigned int,3,1>>>::__emplace_unique_key_args<geo::math::Matrix<unsigned int,3,1>,geo::math::Matrix<unsigned int,3,1> const&>((uint64_t)a1 + 216, &v79, (uint64_t)&v79);
                      v54 = *((_QWORD *)a1 + 25);
                      v53 = *((_QWORD *)a1 + 26);
                      if (v54 >= v53)
                      {
                        v57 = *((_QWORD *)a1 + 24);
                        v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - v57) >> 2);
                        v59 = v58 + 1;
                        if (v58 + 1 > 0x1555555555555555)
                          abort();
                        v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v57) >> 2);
                        if (2 * v60 > v59)
                          v59 = 2 * v60;
                        if (v60 >= 0xAAAAAAAAAAAAAAALL)
                          v61 = 0x1555555555555555;
                        else
                          v61 = v59;
                        if (v61)
                          v62 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>(v76, v61);
                        else
                          v62 = 0;
                        v63 = &v62[12 * v58];
                        v64 = v79;
                        *((_DWORD *)v63 + 2) = v80;
                        *(_QWORD *)v63 = v64;
                        v66 = (_DWORD *)*((_QWORD *)a1 + 24);
                        v65 = (_DWORD *)*((_QWORD *)a1 + 25);
                        v67 = v63;
                        if (v65 != v66)
                        {
                          do
                          {
                            v68 = *(_QWORD *)(v65 - 3);
                            v65 -= 3;
                            v69 = v65[2];
                            *(_QWORD *)(v67 - 12) = v68;
                            v67 -= 12;
                            *((_DWORD *)v67 + 2) = v69;
                          }
                          while (v65 != v66);
                          v65 = (_DWORD *)*((_QWORD *)a1 + 24);
                        }
                        v56 = v63 + 12;
                        *((_QWORD *)a1 + 24) = v67;
                        *((_QWORD *)a1 + 25) = v63 + 12;
                        *((_QWORD *)a1 + 26) = &v62[12 * v61];
                        if (v65)
                          operator delete(v65);
                      }
                      else
                      {
                        v55 = v79;
                        *(_DWORD *)(v54 + 8) = v80;
                        *(_QWORD *)v54 = v55;
                        v56 = (char *)(v54 + 12);
                      }
                      *((_QWORD *)a1 + 25) = v56;
                    }
                  }
                  v4 = *((_QWORD *)a1 + 21);
                }
              }
            }
LABEL_100:
            ++v10;
            v8 = *(_QWORD *)(v4 + 24 * v6);
            v9 = *(_QWORD *)(v4 + 24 * v6 + 8);
          }
          while (v10 < (v9 - v8) >> 2);
        }
      }
      v6 = ++v7;
    }
    while (v77 > v7);
  }
  if (*(_BYTE *)a1)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"The generated mesh contains ", 28);
    v70 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v70, (uint64_t)" vertices, ", 11);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetEdgeCount(a1);
    v71 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v71, (uint64_t)" edges, and ", 12);
    v72 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v72, (uint64_t)" triangles.\n", 12);
  }
  return geo::math::ConstrainedDelaunayTriangulationMesherDetails::RebaseMesh(a1, a2, a3);
}

void std::vector<geo::math::Matrix<double,3,1>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) >= a2)
  {
    a1[1] = &v6[24 * (24 * a2 / 0x18)];
  }
  else
  {
    v7 = *a1;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v11);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[24 * v8];
    v14 = &v12[24 * v11];
    v15 = &v13[24 * (24 * a2 / 0x18)];
    if (v6 != v7)
    {
      do
      {
        v16 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v13 - 24) = v16;
        v13 -= 24;
        v6 -= 24;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 24) = 0;
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 24;
    *(_QWORD *)(v4 + 16) = 0;
    v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 16) = v2[2];
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::vector<unsigned long>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<unsigned long>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<unsigned long>>::resize(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<unsigned long>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

char *std::vector<geo::math::Matrix<double,3,1>>::__assign_with_size[abi:nn180100]<geo::math::Matrix<double,3,1>*,geo::math::Matrix<double,3,1>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<geo::math::Matrix<double,3,1>>::__vallocate[abi:nn180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4)
    goto LABEL_16;
  v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<geo::math::Matrix<double,3,1>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::vector<unsigned long>>::__append(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v15);
  }
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      abort();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char v23;
  char v24;

  v6 = a2;
  v8 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a4)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v8) >> 3) >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>((int)&v24, a2, a3, v8);
      v18 = v17;
      v19 = a1[1];
      if (v19 != v17)
      {
        v20 = a1[1];
        do
        {
          v22 = *(void **)(v20 - 24);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v19 - 16) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v18);
      }
      a1[1] = v18;
    }
    else
    {
      v13 = a2 + 8 * ((a1[1] - (uint64_t)v8) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>((int)&v23, a2, v13, v8);
      v14 = a1[1];
      if (v13 != a3)
      {
        v15 = (_QWORD *)a1[1];
        do
        {
          v16 = std::vector<unsigned long>::vector(v15, v13);
          v13 += 24;
          v15 = v16 + 3;
          v14 += 24;
        }
        while (v13 != a3);
      }
      a1[1] = v14;
    }
  }
  else
  {
    std::vector<std::vector<unsigned long>>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<geo::math::Matrix<double,3,1>>::__vallocate[abi:nn180100](a1, v10);
    v11 = (_QWORD *)a1[1];
    while (v6 != a3)
    {
      v12 = std::vector<unsigned long>::vector(v11, v6);
      v6 += 24;
      v11 = v12 + 3;
    }
    a1[1] = (uint64_t)v11;
  }
}

void std::vector<std::vector<unsigned long>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<unsigned long>::__vallocate[abi:nn180100](a1, v5 >> 3);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<unsigned long>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<unsigned long> *,std::vector<unsigned long> *,std::vector<unsigned long> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<unsigned long>::__assign_with_size[abi:nn180100]<unsigned long *,unsigned long *>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<unsigned long>::__assign_with_size[abi:nn180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      abort();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:nn180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

uint64_t geo::math::less<double,3,1>(double *a1, double *a2)
{
  unint64_t v3;
  unint64_t v4;
  double v5;
  double v6;

  if (*a1 < *a2)
    return 1;
  if (*a1 > *a2)
    return 0;
  v3 = 0;
  while (1)
  {
    v4 = v3;
    if (v3 == 2)
      break;
    v5 = a1[v3 + 1];
    v6 = a2[v3 + 1];
    if (v5 < v6)
    {
      LOBYTE(v3) = 1;
      return (v4 < 2) & v3;
    }
    ++v3;
    if (v5 > v6)
    {
      LOBYTE(v3) = 0;
      return (v4 < 2) & v3;
    }
  }
  return (v4 < 2) & v3;
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3;

  v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveDuplicatesFromLoops(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t **v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t **v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58[2];
  int v59[2];
  void **v60;

  v2 = (uint64_t *)((char *)this + 280);
  std::vector<std::vector<unsigned long>>::vector(v58, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 36) - *((_QWORD *)this + 35)) >> 3));
  v3 = *((_QWORD *)this + 35);
  v4 = *((_QWORD *)this + 36);
  v57 = v2;
  if (v4 != v3)
  {
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 24 * v5);
      v7 = *v6;
      if (v6[1] != *v6)
      {
        v8 = 0;
        do
        {
          v9 = *(_QWORD *)(v7 + 8 * v8);
          v10 = *((_QWORD *)this + 7);
          if (v9 >= (*((_QWORD *)this + 8) - v10) >> 2)
            v11 = 0xFFFFFFFFLL;
          else
            v11 = *(unsigned int *)(v10 + 4 * v9);
          if (v11 < (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2)
          {
            v12 = *(_QWORD *)v58 + 24 * v5;
            v14 = (unint64_t **)(v12 + 8);
            v13 = *(unint64_t **)(v12 + 8);
            v16 = (_QWORD *)(v12 + 16);
            v15 = *(_QWORD *)(v12 + 16);
            if ((unint64_t)v13 >= v15)
            {
              v18 = *(unint64_t **)v12;
              v19 = ((uint64_t)v13 - *(_QWORD *)v12) >> 3;
              v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 61)
LABEL_69:
                abort();
              v21 = v15 - (_QWORD)v18;
              if (v21 >> 2 > v20)
                v20 = v21 >> 2;
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
                v22 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v22 = v20;
              if (v22)
              {
                v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v16, v22);
                v13 = *v14;
                v18 = *(unint64_t **)v12;
                v9 = *(_QWORD *)(v7 + 8 * v8);
              }
              else
              {
                v23 = 0;
              }
              v24 = (unint64_t *)&v23[8 * v19];
              *v24 = v9;
              v17 = v24 + 1;
              if (v13 == v18)
              {
                v2 = v57;
              }
              else
              {
                v2 = v57;
                do
                {
                  v25 = *--v13;
                  *--v24 = v25;
                }
                while (v13 != v18);
              }
              *(_QWORD *)v12 = v24;
              *v14 = v17;
              *v16 = &v23[8 * v22];
              if (v18)
                operator delete(v18);
            }
            else
            {
              *v13 = v9;
              v17 = v13 + 1;
            }
            *v14 = v17;
            v3 = *v2;
          }
          ++v8;
          v26 = (uint64_t *)(v3 + 24 * v5);
          v7 = *v26;
        }
        while (v8 < (v26[1] - *v26) >> 3);
        v4 = *((_QWORD *)this + 36);
      }
      ++v5;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3));
  }
  v27 = *(_QWORD *)v58;
  if (v2 != (uint64_t *)v58)
  {
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>(v2, *(uint64_t *)v58, *(uint64_t *)v59, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v59 - *(_QWORD *)v58) >> 3));
    v27 = *(_QWORD *)v58;
  }
  v28 = *(_QWORD *)v59;
  if (*(_QWORD *)v59 != v27)
  {
    v29 = *(_QWORD *)v59;
    do
    {
      v31 = *(void **)(v29 - 24);
      v29 -= 24;
      v30 = v31;
      if (v31)
      {
        *(_QWORD *)(v28 - 16) = v30;
        operator delete(v30);
      }
      v28 = v29;
    }
    while (v29 != v27);
  }
  *(_QWORD *)v59 = v27;
  v32 = (int *)((char *)this + 256);
  std::vector<std::vector<unsigned long>>::resize(v58, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 33) - *((_QWORD *)this + 32)) >> 3));
  v33 = *((_QWORD *)this + 32);
  v34 = *((_QWORD *)this + 33);
  if (v34 != v33)
  {
    v35 = 0;
    do
    {
      v36 = (uint64_t *)(v33 + 24 * v35);
      v37 = *v36;
      if (v36[1] != *v36)
      {
        v38 = 0;
        do
        {
          v39 = *(_QWORD *)(v37 + 8 * v38);
          v40 = *((_QWORD *)this + 7);
          if (v39 >= (*((_QWORD *)this + 8) - v40) >> 2)
            v41 = 0xFFFFFFFFLL;
          else
            v41 = *(unsigned int *)(v40 + 4 * v39);
          if (v41 < (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2)
          {
            v42 = *(_QWORD *)v58 + 24 * v35;
            v44 = (unint64_t **)(v42 + 8);
            v43 = *(unint64_t **)(v42 + 8);
            v46 = (_QWORD *)(v42 + 16);
            v45 = *(_QWORD *)(v42 + 16);
            if ((unint64_t)v43 >= v45)
            {
              v48 = *(unint64_t **)v42;
              v49 = ((uint64_t)v43 - *(_QWORD *)v42) >> 3;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 61)
                goto LABEL_69;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 2 > v50)
                v50 = v51 >> 2;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                v52 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)v46, v52);
                v43 = *v44;
                v48 = *(unint64_t **)v42;
                v39 = *(_QWORD *)(v37 + 8 * v38);
              }
              else
              {
                v53 = 0;
              }
              v54 = (unint64_t *)&v53[8 * v49];
              *v54 = v39;
              v47 = v54 + 1;
              while (v43 != v48)
              {
                v55 = *--v43;
                *--v54 = v55;
              }
              *(_QWORD *)v42 = v54;
              *v44 = v47;
              *v46 = &v53[8 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *v43 = v39;
              v47 = v43 + 1;
            }
            *v44 = v47;
            v33 = *(_QWORD *)v32;
          }
          ++v38;
          v56 = (uint64_t *)(v33 + 24 * v35);
          v37 = *v56;
        }
        while (v38 < (v56[1] - *v56) >> 3);
        v34 = *((_QWORD *)this + 33);
      }
      ++v35;
    }
    while (v35 < 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
  }
  if (v32 != v58)
    std::vector<std::vector<unsigned long>>::__assign_with_size[abi:nn180100]<std::vector<unsigned long>*,std::vector<unsigned long>*>((uint64_t *)this + 32, *(uint64_t *)v58, *(uint64_t *)v59, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v59 - *(_QWORD *)v58) >> 3));
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveLoopsDuplicates((uint64_t)this, (uint64_t *)this + 32);
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveLoopsDuplicates((uint64_t)this, v57);
  v60 = (void **)v58;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v60);
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::DivideAndConquer(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, unsigned int a2, int a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  std::vector<unsigned int>::value_type v8;
  uint64_t v9;
  _BYTE v10[24];

  v6 = a3 - a2;
  v7 = a3 - a2 + 1;
  if (v7 < 4)
  {
    if (v6 == 1)
    {
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::InitSegment(a1, a2, a4);
    }
    else if (v6 == 2)
    {
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::InitTriangle(a1, a2, a4);
    }
  }
  else
  {
    v8 = (v7 & 1) + a2 + (v7 >> 1);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::DivideAndConquer(a1);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::DivideAndConquer(a1);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::Merge(a1, (uint64_t)v10, v8 - 1, (uint64_t)&v9, v8, a4);
  }
}

_QWORD *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  const std::locale::facet *v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x227693028](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = a2 + a3;
    if ((*(_DWORD *)(v6 + 8) & 0xB0) == 0x20)
      v9 = v8;
    else
      v9 = a2;
    v10 = *(_DWORD *)(v6 + 144);
    if (v10 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v11 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v10;
    }
    if (!std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(v7, a2, v9, v8, v6, (char)v10))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x227693034](v13);
  return a1;
}

uint64_t std::__pad_and_output[abi:nn180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:nn180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      abort();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>(uint64_t result, unsigned int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  double *v18;
  double *v19;
  unsigned int *v20;
  char v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  double *v26;
  double *v27;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = *(a2 - 1);
        v24 = *v9;
        v25 = *(_QWORD *)(*a3 + 8);
        v26 = (double *)(v25 + 24 * v23);
        v27 = (double *)(v25 + 24 * *v9);
        if (*v26 < *v27 || *v26 == *v27 && v26[1] < v27[1])
        {
          *v9 = v23;
          *(a2 - 1) = v24;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v9, v9 + 1, a2 - 1, (uint64_t)a3);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v9, v9 + 1, v9 + 2, a2 - 1, (uint64_t)a3);
      case 5uLL:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (uint64_t)a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v9, a2, (uint64_t)a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v9, a2, (uint64_t)a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(&v9[v13 >> 1], v9, a2 - 1, (uint64_t)a3);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v9, &v9[v13 >> 1], a2 - 1, (uint64_t)a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v9 + 1, v15 - 1, a2 - 2, (uint64_t)a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v9 + 2, &v9[v14 + 1], a2 - 3, (uint64_t)a3);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v15 - 1, v15, &v9[v14 + 1], (uint64_t)a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(_QWORD *)(*a3 + 8);
          v18 = (double *)(v17 + 24 * *(v9 - 1));
          v19 = (double *)(v17 + 24 * *v9);
          if (*v18 >= *v19 && (*v18 != *v19 || v18[1] >= v19[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &>(v9, a2, (uint64_t)a3);
            v9 = (unsigned int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v20 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &>(v9, a2, (uint64_t)a3);
          if ((v21 & 1) == 0)
            goto LABEL_17;
          v22 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v9, v20, (uint64_t)a3);
          v9 = v20 + 1;
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v20 + 1, a2, (uint64_t)a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>(v8, v20, a3, -v11, a5 & 1);
            v9 = v20 + 1;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

unsigned int *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  double *v9;
  double v10;
  double *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  double *v15;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      v6 = result;
      do
      {
        v7 = v6;
        v6 = v3;
        v8 = v7[1];
        v9 = (double *)(v5 + 24 * v8);
        v10 = *v9;
        v11 = (double *)(v5 + 24 * *v7);
        if (*v9 < *v11 || *v9 == *v11 && v9[1] < v11[1])
        {
          v7[1] = *v7;
          v12 = result;
          if (v7 != result)
          {
            v13 = v4;
            while (1)
            {
              v14 = *(unsigned int *)((char *)result + v13 - 4);
              v15 = (double *)(v5 + 24 * v14);
              if (v10 >= *v15)
              {
                if (v10 != *v15)
                {
                  v12 = (unsigned int *)((char *)result + v13);
                  goto LABEL_16;
                }
                if (v9[1] >= v15[1])
                  break;
              }
              --v7;
              *(unsigned int *)((char *)result + v13) = v14;
              v13 -= 4;
              if (!v13)
              {
                v12 = result;
                goto LABEL_16;
              }
            }
            v12 = v7;
          }
LABEL_16:
          *v12 = v8;
        }
        v3 = v6 + 1;
        v4 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *result, unsigned int *a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  double *v8;
  double v9;
  double *v10;
  unsigned int *v11;
  unsigned int v12;
  double *v13;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      do
      {
        v5 = result;
        result = v3;
        v7 = *v5;
        v6 = v5[1];
        v8 = (double *)(v4 + 24 * v6);
        v9 = *v8;
        v10 = (double *)(v4 + 24 * *v5);
        if (*v8 < *v10 || *v8 == *v10 && v8[1] < v10[1])
        {
          do
          {
            do
            {
              v11 = v5;
              v12 = *--v5;
              v5[2] = v7;
              v7 = v12;
              v13 = (double *)(v4 + 24 * v12);
            }
            while (v9 < *v13);
          }
          while (v9 == *v13 && v8[1] < v13[1]);
          *v11 = v6;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  double *v7;
  double v8;
  double *v9;
  double v10;
  double *v11;
  double *v13;
  unsigned int v14;
  double *v15;
  double *v16;
  double *v17;

  v4 = *a2;
  v5 = *a1;
  v6 = *(_QWORD *)(*(_QWORD *)a4 + 8);
  v7 = (double *)(v6 + 24 * *a2);
  v8 = *v7;
  v9 = (double *)(v6 + 24 * *a1);
  v10 = *v9;
  if (*v7 < *v9 || *v7 == *v9 && v7[1] < v9[1])
  {
    v11 = (double *)(v6 + 24 * *a3);
    if (*v11 < v8 || *v11 == v8 && v11[1] < v7[1])
    {
      *a1 = *a3;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    v17 = (double *)(v6 + 24 * *a3);
    if (*v17 >= v10 && (*v17 != v10 || v17[1] >= v9[1]))
      return 1;
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  v13 = (double *)(v6 + 24 * *a3);
  if (*v13 < v8 || *v13 == v8 && v13[1] < v7[1])
  {
    *a2 = *a3;
    *a3 = v4;
    v14 = *a1;
    v15 = (double *)(v6 + 24 * *a2);
    v16 = (double *)(v6 + 24 * *a1);
    if (*v15 >= *v16 && (*v15 != *v16 || v15[1] >= v16[1]))
      return 1;
    *a1 = *a2;
    *a2 = v14;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  double *v8;
  double v9;
  unsigned int *j;
  uint64_t v11;
  double i;
  unsigned int v13;
  double *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  double v19;
  unsigned int v20;
  double *v21;

  v3 = *a1;
  v4 = *(a2 - 1);
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v6 = (double *)(v5 + 24 * *a1);
  v7 = *v6;
  v8 = (double *)(v5 + 24 * v4);
  v9 = *v8;
  if (*v6 < *v8 || *v6 == *v8 && v6[1] < v8[1])
  {
    j = a1 + 1;
    v11 = a1[1];
    for (i = *(double *)(v5 + 24 * v11); v7 >= i; i = *(double *)(v5 + 24 * v13))
    {
      if (v7 == i && v6[1] < *(double *)(v5 + 24 * v11 + 8))
        break;
      v13 = j[1];
      ++j;
      v11 = v13;
    }
  }
  else
  {
    for (j = a1 + 1; j < a2; ++j)
    {
      v14 = (double *)(v5 + 24 * *j);
      if (v7 < *v14 || v7 == *v14 && v6[1] < v14[1])
        break;
    }
  }
  if (j < a2)
  {
    --a2;
    while (v7 < v9 || v7 == v9 && v6[1] < *(double *)(v5 + 24 * v4 + 8))
    {
      v15 = *--a2;
      v4 = v15;
      v9 = *(double *)(v5 + 24 * v15);
    }
  }
  if (j < a2)
  {
    LODWORD(v16) = *j;
    v17 = *a2;
    do
    {
      *j = v17;
      *a2 = v16;
      do
      {
        v18 = j[1];
        ++j;
        v16 = v18;
        v19 = *(double *)(v5 + 24 * v18);
      }
      while (v7 >= v19 && (v7 != v19 || v6[1] >= *(double *)(v5 + 24 * v16 + 8)));
      do
      {
        do
        {
          v20 = *--a2;
          v17 = v20;
          v21 = (double *)(v5 + 24 * v20);
        }
        while (v7 < *v21);
      }
      while (v7 == *v21 && v6[1] < v21[1]);
    }
    while (j < a2);
  }
  if (j - 1 != a1)
    *a1 = *(j - 1);
  *(j - 1) = v3;
  return j;
}

unsigned int *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  double *v6;
  double v7;
  unsigned int v8;
  double *v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  double i;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  double j;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  double *v24;
  unsigned int v25;
  double v26;

  v3 = 0;
  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  v6 = (double *)(v5 + 24 * *a1);
  v7 = *v6;
  while (1)
  {
    v8 = a1[v3 + 1];
    v9 = (double *)(v5 + 24 * v8);
    if (*v9 >= v7 && (*v9 != v7 || v9[1] >= v6[1]))
      break;
    ++v3;
  }
  v10 = &a1[v3];
  v11 = (unint64_t)&a1[v3 + 1];
  if (v3 * 4)
  {
    v13 = *--a2;
    v12 = v13;
    for (i = *(double *)(v5 + 24 * v13); i >= v7; i = *(double *)(v5 + 24 * v15))
    {
      if (i == v7 && *(double *)(v5 + 24 * v12 + 8) < v6[1])
        break;
      v15 = *--a2;
      v12 = v15;
    }
  }
  else if (v11 < (unint64_t)a2)
  {
    v17 = *--a2;
    v16 = v17;
    for (j = *(double *)(v5 + 24 * v17); j >= v7; j = *(double *)(v5 + 24 * v19))
    {
      if (j == v7)
      {
        if (v11 >= (unint64_t)a2 || *(double *)(v5 + 24 * v16 + 8) < v6[1])
          break;
      }
      else if (v11 >= (unint64_t)a2)
      {
        break;
      }
      v19 = *--a2;
      v16 = v19;
    }
  }
  if (v11 < (unint64_t)a2)
  {
    LODWORD(v20) = *a2;
    v21 = v8;
    v22 = (unsigned int *)v11;
    v23 = a2;
    do
    {
      *v22++ = v20;
      *v23 = v21;
      while (1)
      {
        v21 = *v22;
        v24 = (double *)(v5 + 24 * *v22);
        if (*v24 >= v7 && (*v24 != v7 || v24[1] >= v6[1]))
          break;
        ++v22;
      }
      do
      {
        v25 = *--v23;
        v20 = v25;
        v26 = *(double *)(v5 + 24 * v25);
      }
      while (v26 >= v7 && (v26 != v7 || *(double *)(v5 + 24 * v20 + 8) >= v6[1]));
    }
    while (v22 < v23);
    v10 = v22 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v4;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  double *v11;
  double *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  double *v19;
  double v20;
  double *v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  double *v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      v11 = (double *)(v10 + 24 * v8);
      v12 = (double *)(v10 + 24 * *a1);
      if (*v11 < *v12 || *v11 == *v12 && v11[1] < v12[1])
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v13 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      v14 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      v17 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      break;
  }
  while (1)
  {
    v18 = *v14;
    v19 = (double *)(v17 + 24 * *v14);
    v20 = *v19;
    v21 = (double *)(v17 + 24 * *v13);
    if (*v19 < *v21 || *v19 == *v21 && v19[1] < v21[1])
    {
      *v14 = *v13;
      v22 = a1;
      if (v13 != a1)
      {
        v23 = v15;
        while (1)
        {
          v24 = *(unsigned int *)((char *)a1 + v23 + 4);
          v25 = (double *)(v17 + 24 * v24);
          if (v20 >= *v25)
          {
            if (v20 != *v25)
            {
              v22 = (unsigned int *)((char *)a1 + v23 + 8);
              goto LABEL_20;
            }
            if (v19[1] >= v25[1])
              break;
          }
          --v13;
          *(unsigned int *)((char *)a1 + v23 + 8) = v24;
          v23 -= 4;
          if (v23 == -8)
          {
            v22 = a1;
            goto LABEL_20;
          }
        }
        v22 = v13;
      }
LABEL_20:
      *v22 = v18;
      if (++v16 == 8)
        return v14 + 1 == a2;
    }
    v13 = v14;
    v15 += 4;
    if (++v14 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  double *v13;
  double *v14;
  unsigned int v15;
  double *v16;
  double *v17;
  unsigned int v18;
  double *v19;
  double *v20;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a2, a3, a5);
  v11 = *a3;
  v12 = *(_QWORD *)(*(_QWORD *)a5 + 8);
  v13 = (double *)(v12 + 24 * *a4);
  v14 = (double *)(v12 + 24 * *a3);
  if (*v13 < *v14 || *v13 == *v14 && v13[1] < v14[1])
  {
    *a3 = *a4;
    *a4 = v11;
    v15 = *a2;
    v16 = (double *)(v12 + 24 * *a3);
    v17 = (double *)(v12 + 24 * *a2);
    if (*v16 < *v17 || *v16 == *v17 && v16[1] < v17[1])
    {
      *a2 = *a3;
      *a3 = v15;
      v18 = *a1;
      v19 = (double *)(v12 + 24 * *a2);
      v20 = (double *)(v12 + 24 * *a1);
      if (*v19 < *v20 || *v19 == *v20 && v19[1] < v20[1])
      {
        *a1 = *a2;
        *a2 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6)
{
  uint64_t result;
  unsigned int v13;
  uint64_t v14;
  double *v15;
  double *v16;
  unsigned int v17;
  double *v18;
  double *v19;
  unsigned int v20;
  double *v21;
  double *v22;
  unsigned int v23;
  double *v24;
  double *v25;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = *(_QWORD *)(*(_QWORD *)a6 + 8);
  v15 = (double *)(v14 + 24 * *a5);
  v16 = (double *)(v14 + 24 * *a4);
  if (*v15 < *v16 || *v15 == *v16 && v15[1] < v16[1])
  {
    *a4 = *a5;
    *a5 = v13;
    v17 = *a3;
    v18 = (double *)(v14 + 24 * *a4);
    v19 = (double *)(v14 + 24 * *a3);
    if (*v18 < *v19 || *v18 == *v19 && v18[1] < v19[1])
    {
      *a3 = *a4;
      *a4 = v17;
      v20 = *a2;
      v21 = (double *)(v14 + 24 * *a3);
      v22 = (double *)(v14 + 24 * *a2);
      if (*v21 < *v22 || *v21 == *v22 && v21[1] < v22[1])
      {
        *a2 = *a3;
        *a3 = v20;
        v23 = *a1;
        v24 = (double *)(v14 + 24 * *a2);
        v25 = (double *)(v14 + 24 * *a1);
        if (*v24 < *v25 || *v24 == *v25 && v24[1] < v25[1])
        {
          *a1 = *a2;
          *a2 = v23;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *(_QWORD *)(*a4 + 8);
        v17 = (double *)(v16 + 24 * *v14);
        v18 = (double *)(v16 + 24 * *a1);
        if (*v17 < *v18 || *v17 == *v18 && v17[1] < v18[1])
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v19 = (unint64_t)v8 >> 2;
      v20 = a2 - 1;
      do
      {
        v21 = *a1;
        v22 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a4, v19);
        if (v20 == v22)
        {
          *v22 = v21;
        }
        else
        {
          *v22 = *v20;
          *v20 = v21;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, (uint64_t)(v22 + 1), (uint64_t)a4, v22 + 1 - a1);
        }
        --v20;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(uint64_t result, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  unsigned int v14;
  double *v15;
  double *v16;
  double v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double *v22;
  double *v23;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (unsigned int *)(result + 4 * v7);
      v9 = v6 + 2;
      v10 = *a2;
      if (v9 >= a3)
      {
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(_QWORD *)(v10 + 8);
        v12 = (double *)(v11 + 24 * *v8);
        v13 = (double *)(v11 + 24 * v8[1]);
        if (*v12 < *v13 || *v12 == *v13 && v12[1] < v13[1])
        {
          ++v8;
          v7 = v9;
        }
      }
      v14 = *a4;
      v15 = (double *)(v11 + 24 * *v8);
      v16 = (double *)(v11 + 24 * *a4);
      v17 = *v16;
      if (*v15 >= *v16 && (*v15 != *v16 || v15[1] >= v16[1]))
      {
        *a4 = *v8;
        if (v5 >= v7)
        {
          while (1)
          {
            v19 = 2 * v7;
            v7 = (2 * v7) | 1;
            v18 = (unsigned int *)(result + 4 * v7);
            v20 = v19 + 2;
            if (v20 < a3)
            {
              v21 = (double *)(v11 + 24 * *v18);
              v22 = (double *)(v11 + 24 * v18[1]);
              if (*v21 < *v22 || *v21 == *v22 && v21[1] < v22[1])
              {
                ++v18;
                v7 = v20;
              }
            }
            v23 = (double *)(v11 + 24 * *v18);
            if (*v23 < v17 || *v23 == v17 && v23[1] < v16[1])
              break;
            *v8 = *v18;
            v8 = v18;
            if (v5 < v7)
              goto LABEL_23;
          }
        }
        v18 = v8;
LABEL_23:
        *v18 = v14;
      }
    }
  }
  return result;
}

unsigned int *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double *v12;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    result += v3 + 1;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(_QWORD *)(v6 + 8);
      v11 = (double *)(v10 + 24 * *result);
      v12 = (double *)(v10 + 24 * result[1]);
      if (*v11 < *v12 || *v11 == *v12 && v11[1] < v12[1])
      {
        ++result;
        v3 = v9;
      }
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::ConstrainedDelaunayTriangulationMesherDetails::ComputeDelaunay(void)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  double *v9;
  double *v10;
  double v11;
  unsigned int *v12;
  unint64_t v13;
  double *v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unsigned int *)(result + 4 * (v4 >> 1));
    v7 = *(_DWORD *)(a2 - 4);
    v8 = *(_QWORD *)(*(_QWORD *)a3 + 8);
    v9 = (double *)(v8 + 24 * *v6);
    v10 = (double *)(v8 + 24 * v7);
    v11 = *v10;
    if (*v9 < *v10 || *v9 == *v10 && v9[1] < v10[1])
    {
      *(_DWORD *)(a2 - 4) = *v6;
      if (v4 >= 2)
      {
        while (1)
        {
          v13 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v12 = (unsigned int *)(result + 4 * v5);
          v14 = (double *)(v8 + 24 * *v12);
          if (*v14 >= v11 && (*v14 != v11 || v14[1] >= v10[1]))
            break;
          *v6 = *v12;
          v6 = (unsigned int *)(result + 4 * v5);
          if (v13 <= 1)
            goto LABEL_11;
        }
      }
      v12 = v6;
LABEL_11:
      *v12 = v7;
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

uint64_t std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (result != a2)
  {
    v17 = v3;
    v18 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15 = *(_OWORD *)v10;
          v16 = *(_QWORD *)(v10 + 16);
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_OWORD *)(v13 + 24) = *(_OWORD *)(v6 + v12);
            *(_QWORD *)(v13 + 40) = *(_QWORD *)(v6 + v12 + 16);
            if (!v12)
              break;
            v12 -= 24;
            result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 24;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *(_OWORD *)v14 = v15;
          *(_QWORD *)(v14 + 16) = v16;
        }
        v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result != a2)
  {
    v14 = v3;
    v15 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = result - 24;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *(_OWORD *)v6;
          v13 = *(_QWORD *)(v6 + 16);
          v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 48) = *(_OWORD *)(v11 + 24);
            *(_QWORD *)(v11 + 64) = *(_QWORD *)(v11 + 40);
            result = (*a3)((uint64_t)&v12, v11);
            v11 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 48) = v12;
          *(_QWORD *)(v11 + 64) = v13;
        }
        v7 = v6 + 24;
        v9 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v13 = *((_QWORD *)a2 + 2);
    v14 = *a2;
    v15 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_QWORD *)a3 + 2) = v13;
    if (!(*a4)(a2, a1))
      return 1;
    v16 = *((_QWORD *)a1 + 2);
    v17 = *a1;
    v18 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v18;
    *a2 = v17;
    *((_QWORD *)a2 + 2) = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = *((_QWORD *)a1 + 2);
    v20 = *a1;
    v21 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v21;
    *a2 = v20;
    *((_QWORD *)a2 + 2) = v19;
    if (!(*a4)(a3, a2))
      return 1;
    v22 = *((_QWORD *)a2 + 2);
    v23 = *a2;
    v24 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v24;
    *a3 = v23;
    *((_QWORD *)a3 + 2) = v22;
    return 2;
  }
  v10 = *((_QWORD *)a1 + 2);
  v11 = *a1;
  v12 = *((_QWORD *)a3 + 2);
  *a1 = *a3;
  *((_QWORD *)a1 + 2) = v12;
  *a3 = v11;
  *((_QWORD *)a3 + 2) = v10;
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::Matrix<double,3,1> *,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a2;
  v20 = *MEMORY[0x24BDAC8D0];
  v16 = *a1;
  v17 = *((_QWORD *)a1 + 2);
  if (((*a3)(&v16, (__int128 *)((char *)a2 - 24)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 = (__int128 *)((char *)v6 + 24);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)((char *)a1 + 24);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v16, v7);
      v7 = (__int128 *)((char *)v6 + 24);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 = (__int128 *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    v19 = *((_QWORD *)v6 + 2);
    v18 = v9;
    v10 = *v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *v6 = v10;
    v11 = v18;
    *((_QWORD *)v4 + 2) = v19;
    *v4 = v11;
    do
      v6 = (__int128 *)((char *)v6 + 24);
    while (!(*a3)(&v16, v6));
    do
      v4 = (__int128 *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  v12 = (__int128 *)((char *)v6 - 24);
  if ((__int128 *)((char *)v6 - 24) != a1)
  {
    v13 = *v12;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v6 - 1);
    *a1 = v13;
  }
  v14 = v16;
  *((_QWORD *)v6 - 1) = v17;
  *v12 = v14;
  return v6;
}

uint64_t std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,geo::math::Matrix<double,3,1> *,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&)>(__int128 *a1, unint64_t a2, uint64_t (**a3)(char *, __int128 *))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v6 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  do
    v6 += 24;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  v7 = (unint64_t)a1 + v6;
  v8 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 24;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!(*a3)((char *)a2, &v17));
  }
  if (v7 < a2)
  {
    v9 = (__int128 *)((char *)a1 + v6);
    v10 = a2;
    do
    {
      v19 = *v9;
      v11 = v19;
      v20 = *((_QWORD *)v9 + 2);
      v12 = v20;
      v13 = *(_QWORD *)(v10 + 16);
      *v9 = *(_OWORD *)v10;
      *((_QWORD *)v9 + 2) = v13;
      *(_QWORD *)(v10 + 16) = v12;
      *(_OWORD *)v10 = v11;
      do
        v9 = (__int128 *)((char *)v9 + 24);
      while (((*a3)((char *)v9, &v17) & 1) != 0);
      do
        v10 -= 24;
      while (!(*a3)((char *)v10, &v17));
    }
    while ((unint64_t)v9 < v10);
    v8 = (uint64_t)v9 - 24;
  }
  if ((__int128 *)v8 != a1)
  {
    v14 = *(_OWORD *)v8;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 + 16);
    *a1 = v14;
  }
  v15 = v17;
  *(_QWORD *)(v8 + 16) = v18;
  *(_OWORD *)v8 = v15;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v19 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v19, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(v18 + 16) = v20;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_OWORD *)a2;
      v16 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(_QWORD *)(a3 + 16) = v14;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v17 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v12 = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(_QWORD *)(a5 + 16) = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v17 = *(_QWORD *)(a3 + 16);
      v18 = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(_QWORD *)(a4 + 16) = v17;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v20 = *(_QWORD *)(a2 + 16);
        v21 = *(__n128 *)a2;
        v22 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(_QWORD *)(a3 + 16) = v20;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v23 = a1[1].n128_u64[0];
          result = *a1;
          v24 = *(_QWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*,geo::math::Matrix<double,3,1>*>(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __int8 *), __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __n128 v26;
  __n128 *v29;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = (char *)a2 - (char *)a1;
    v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        a5 = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)a1, a4, v10, v13);
        v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a4)(v15, a1, a5))
        {
          v16 = v15[1].n128_u64[0];
          v17 = *v15;
          v18 = a1[1].n128_u64[0];
          *v15 = *a1;
          v15[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          a5 = std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)a1, a4, v10, a1);
        }
        v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 25)
    {
      return v14;
    }
    else
    {
      v29 = v14;
      v19 = v9 / 0x18uLL;
      do
      {
        v30 = v7;
        v20 = 0;
        v31 = *a1;
        v32 = a1[1].n128_u64[0];
        v21 = (uint64_t)a1;
        do
        {
          v22 = v21 + 24 * v20 + 24;
          v23 = (2 * v20) | 1;
          v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(v21 + 24 * v20 + 24, (__int8 *)(v21 + 24 * v20 + 48)))
          {
            v22 += 24;
            v23 = v24;
          }
          v25 = *(_OWORD *)v22;
          *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
          *(_OWORD *)v21 = v25;
          v21 = v22;
          v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 = (__n128 *)((char *)v30 - 24);
        if ((__int8 *)v22 == &v30[-2].n128_i8[8])
        {
          *(_QWORD *)(v22 + 16) = v32;
          *(__n128 *)v22 = v31;
        }
        else
        {
          v26 = *v7;
          *(_QWORD *)(v22 + 16) = v30[-1].n128_u64[1];
          *(__n128 *)v22 = v26;
          *v7 = v31;
          v30[-1].n128_u64[1] = v32;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>((uint64_t)a1, v22 + 24, (uint64_t (**)(__int128 *, __int128 *))a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - (uint64_t)a1) >> 3));
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t a1, unsigned int (**a2)(uint64_t, __int8 *), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__n128 *)(a1 + 24 * v12);
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 24 * v12, &v13[1].n128_i8[8]))
      {
        v13 = (__n128 *)((char *)v13 + 24);
        v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        do
        {
          v16 = v13;
          v17 = *v13;
          v7[1].n128_u64[0] = v13[1].n128_u64[0];
          *v7 = v17;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = (__n128 *)(a1 + 24 * v18);
          v19 = 2 * v12 + 2;
          if (v19 < a3)
          {
            if ((*a2)(a1 + 24 * v18, &v13[1].n128_i8[8]))
            {
              v13 = (__n128 *)((char *)v13 + 24);
              v18 = v19;
            }
          }
          v7 = v16;
          v12 = v18;
        }
        while (!(*a2)((uint64_t)v13, (__int8 *)&v20));
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,BOOL (*&)(geo::math::Matrix<double,3,1> const&,geo::math::Matrix<double,3,1> const&),geo::math::Matrix<double,3,1>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v17 = v4;
    v18 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 24 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 24);
    if ((*a3)(v10, (__int128 *)(a2 - 24)))
    {
      v15 = *v11;
      v16 = *((_QWORD *)v11 + 2);
      do
      {
        v13 = v10;
        v14 = *v10;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v10 + 2);
        *v11 = v14;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 24 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, &v15) & 1) != 0);
      result = *(double *)&v15;
      *v13 = v15;
      *((_QWORD *)v13 + 2) = v16;
    }
  }
  return result;
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v7;
  int *value;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  std::vector<int>::size_type v16;
  int *v17;
  int *v18;
  int *v19;
  std::vector<int>::size_type v20;
  int *v21;
  int *v22;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer i;
  int v25;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      v16 = 4 * __n;
      v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = (char *)v9 - (char *)this->__begin_;
    v11 = __n + (v10 >> 2);
    if (v11 >> 62)
      abort();
    v12 = v10 >> 2;
    v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v18 = (int *)&v15[4 * v12];
    v19 = &v18[__n];
    v20 = 4 * __n;
    v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    v22 = (int *)&v15[4 * v14];
    begin = this->__begin_;
    for (i = this->__end_; i != begin; --i)
    {
      v25 = *(i - 1);
      *--v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
      operator delete(begin);
  }
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveLoopsDuplicates(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  std::vector<std::vector<unsigned long>>::vector(&v14, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v3 = *a2;
  if (a2[1] != *a2)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      geo::math::polygon_detail::GetNonRedundantIndices((_QWORD *)(v3 + v4), (char **)&v12);
      v6 = (_QWORD *)(v14 + v4);
      v7 = *(void **)(v14 + v4);
      if (v7)
      {
        v6[1] = v7;
        operator delete(v7);
        *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
      }
      *(_OWORD *)v6 = v12;
      v6[2] = v13;
      ++v5;
      v3 = *a2;
      v4 += 24;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev(a2);
  v9 = v14;
  v8 = v15;
  if (v15 != v14)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      if (*(_QWORD *)(v9 + v10 + 8) - *(_QWORD *)(v9 + v10) >= 0x11uLL)
      {
        std::vector<std::vector<unsigned long>>::push_back[abi:nn180100](a2, v9 + v10);
        v9 = v14;
        v8 = v15;
      }
      ++v11;
      v10 += 24;
    }
    while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3));
  }
  *(_QWORD *)&v12 = &v14;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v12);
}

_QWORD *std::vector<std::vector<unsigned long>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<geo::math::Matrix<double,3,1>>::__vallocate[abi:nn180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void geo::math::polygon_detail::GetNonRedundantIndices(_QWORD *a1@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void *__p;
  void *v40;
  uint64_t v41;
  uint64_t v42;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __p = 0;
  v40 = 0;
  v41 = 0;
  v3 = a1[1] - *a1;
  if ((unint64_t)v3 >= 9)
  {
    v5 = v3 >> 3;
    v42 = 0;
    std::vector<unsigned long>::resize((uint64_t)&__p, v3 >> 3, &v42);
    v6 = __p;
    *(_QWORD *)__p = 0;
    v7 = (_QWORD *)*a1;
    v8 = v5 - 1;
    if (v5 != 1)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        if (v7[v9] != v7[v9 + 1])
          ++v10;
        v6[++v9] = v10;
      }
      while (v8 != v9);
      if (v8 >= 2 && v7[v8] == *v7)
      {
        v11 = (char *)(v6 - 1);
        do
        {
          *(_QWORD *)&v11[8 * v5] = 0;
          if ((unint64_t)(v5 - 2) < 2)
            break;
          v12 = v7[v5-- - 2];
        }
        while (v12 == *v7);
      }
    }
    v14 = a2 + 2;
    v13 = (unint64_t)a2[2];
    v15 = a2[1];
    if ((unint64_t)v15 >= v13)
    {
      v17 = *a2;
      v18 = (v15 - *a2) >> 3;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
LABEL_53:
        abort();
      v20 = v13 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v21);
        v17 = *a2;
        v15 = a2[1];
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *(_QWORD *)v23 = *v7;
      v16 = v23 + 8;
      while (v15 != v17)
      {
        v25 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v23 - 1) = v25;
        v23 -= 8;
      }
      *a2 = v23;
      a2[1] = v16;
      a2[2] = v24;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *(_QWORD *)v15 = *v7;
      v16 = v15 + 8;
    }
    a2[1] = v16;
    v27 = (_QWORD *)*a1;
    v26 = a1[1];
    if ((unint64_t)(v26 - *a1) >= 9)
    {
      v28 = 1;
      do
      {
        v29 = *((_QWORD *)__p + v28);
        if (v29 != *((_QWORD *)__p + v28 - 1) && v29 != *(_QWORD *)__p)
        {
          if ((unint64_t)v16 >= *v14)
          {
            v31 = *a2;
            v32 = (v16 - *a2) >> 3;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61)
              goto LABEL_53;
            v34 = *v14 - (_QWORD)v31;
            if (v34 >> 2 > v33)
              v33 = v34 >> 2;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v35 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v35);
              v31 = *a2;
              v16 = a2[1];
            }
            else
            {
              v36 = 0;
            }
            v37 = &v36[8 * v32];
            *(_QWORD *)v37 = v27[v28];
            v30 = v37 + 8;
            while (v16 != v31)
            {
              v38 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v37 - 1) = v38;
              v37 -= 8;
            }
            *a2 = v37;
            a2[1] = v30;
            a2[2] = &v36[8 * v35];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_QWORD *)v16 = v27[v28];
            v30 = v16 + 8;
          }
          a2[1] = v30;
          v16 = v30;
          v27 = (_QWORD *)*a1;
          v26 = a1[1];
        }
        ++v28;
      }
      while (v28 < (v26 - (uint64_t)v27) >> 3);
    }
  }
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
}

uint64_t std::vector<std::vector<unsigned long>>::push_back[abi:nn180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[24 * v10];
    v18 = &v14[24 * v13];
    std::vector<unsigned long>::vector(v16, a2);
    v17 = v16 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = (uint64_t)std::vector<unsigned long>::vector(*(_QWORD **)(v4 - 8), a2);
    v9 = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      abort();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,std::__unordered_map_hasher<geo::math::Matrix<double,3,1>,std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,geo::math::VectorHasher<geo::math::Matrix<double,3,1>>,std::equal_to<geo::math::Matrix<double,3,1>>,true>,std::__unordered_map_equal<geo::math::Matrix<double,3,1>,std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>,std::equal_to<geo::math::Matrix<double,3,1>>,geo::math::VectorHasher<geo::math::Matrix<double,3,1>>,true>,std::allocator<std::__hash_value_type<geo::math::Matrix<double,3,1>,unsigned int>>>::__emplace_unique_key_args<geo::math::Matrix<double,3,1>,std::pair<geo::math::Matrix<double,3,1>,unsigned long>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = 0;
  v7 = 0;
  do
  {
    v8 = *(double *)&a2[v6];
    if (v8 == 0.0)
      v8 = 0.0;
    v7 ^= *(_QWORD *)&v8;
    ++v6;
  }
  while (v6 != 3);
  v9 = v7 + 2654435769;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v7 + 2654435769;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1] && v13[4] == a2[2])
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x30uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  v17 = *(_QWORD *)(a3 + 24);
  v13[4] = *(_QWORD *)(a3 + 16);
  *((_DWORD *)v13 + 10) = v17;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v13 = *v25;
LABEL_49:
    *v25 = v13;
    goto LABEL_50;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v26 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10)
        v26 %= v10;
    }
    else
    {
      v26 &= v10 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_49;
  }
LABEL_50:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::Merge(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, uint64_t a2, unsigned int a3, uint64_t a4, std::vector<unsigned int>::value_type a5, uint64_t a6)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int LeftCandidate;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  geo::math::ConstrainedDelaunayTriangulationMesherDetails *v20;
  std::vector<unsigned int>::value_type v21;
  int v22;
  std::vector<unsigned int>::value_type v23;
  std::vector<unsigned int>::value_type v24;
  std::vector<unsigned int>::value_type v25;
  uint64_t v27;

  v10 = *(_DWORD *)(a4 + 20);
  *(_DWORD *)(a6 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a6 + 20) = v10;
  v27 = 0;
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetLowestCommonTangent(a1, a2, a3, (unsigned int *)a4, a5, (std::vector<unsigned int>::value_type *)&v27 + 1, (std::vector<unsigned int>::value_type *)&v27);
  *(_QWORD *)a6 = *(_QWORD *)a2;
  *(_QWORD *)(a6 + 8) = *(_QWORD *)(a4 + 8);
  v12 = v27;
  v11 = HIDWORD(v27);
  if (HIDWORD(v27) == *(_DWORD *)(a2 + 16))
    *(_QWORD *)a6 = HIDWORD(v27) | ((unint64_t)v27 << 32);
  if ((_DWORD)v12 == *(_DWORD *)(a4 + 20))
    *(_QWORD *)(a6 + 8) = v11 | (v12 << 32);
  LeftCandidate = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindLeftCandidate(a1, a2, a4, v11, v12);
  result = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindRightCandidate(a1, a2, a4, HIDWORD(v27), v27);
  v15 = result;
  v17 = v27;
  v16 = HIDWORD(v27);
  v18 = (_DWORD)result != (_DWORD)v27;
  v19 = LeftCandidate != HIDWORD(v27);
  if (__PAIR64__(LeftCandidate, result) != v27)
  {
    do
    {
      v20 = a1;
      if (v19)
      {
        if (!v18)
        {
          v24 = LeftCandidate;
          v25 = v17;
LABEL_14:
          geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(v20, v24, v25, v16, v16);
          HIDWORD(v27) = LeftCandidate;
          goto LABEL_15;
        }
        if (geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(a1, v16, v17, LeftCandidate, v15) != 2)
        {
          v25 = v27;
          v16 = HIDWORD(v27);
          v20 = a1;
          v24 = LeftCandidate;
          goto LABEL_14;
        }
        v22 = v27;
        v21 = HIDWORD(v27);
        v20 = a1;
        v23 = v15;
        v17 = v27;
      }
      else
      {
        v21 = v16;
        v23 = v15;
        v22 = v17;
      }
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(v20, v21, v23, v22, v17);
      LODWORD(v27) = v15;
LABEL_15:
      LeftCandidate = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindLeftCandidate(a1, a2, a4, HIDWORD(v27), v27);
      result = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindRightCandidate(a1, a2, a4, HIDWORD(v27), v27);
      v15 = result;
      v17 = v27;
      v16 = HIDWORD(v27);
      v18 = (_DWORD)result != (_DWORD)v27;
      v19 = LeftCandidate != HIDWORD(v27);
    }
    while (LeftCandidate != HIDWORD(v27) || (_DWORD)result != (_DWORD)v27);
  }
  return result;
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::InitTriangle(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double v10;
  int v11;
  unint64_t v12;

  v6 = a2 + 1;
  v7 = a2 + 2;
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, a2, a2 + 1);
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v6, a2);
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v6, v7);
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v7, v6);
  *(_DWORD *)(a3 + 16) = a2;
  *(_DWORD *)(a3 + 20) = v7;
  v8 = *((_QWORD *)a1 + 1);
  v9 = (double *)(v8 + 24 * a2);
  v10 = (*(double *)(v8 + 24 * v6) - *v9) * (*(double *)(v8 + 24 * v7 + 8) - v9[1])
      - (*(double *)(v8 + 24 * v6 + 8) - v9[1]) * (*(double *)(v8 + 24 * v7) - *v9);
  v11 = v10 <= 0.0;
  if (v10 < 0.0)
    v11 = 2;
  if (v11 == 2)
  {
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, a2, v7);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v7, a2);
    v12 = a2 | (unint64_t)(v7 << 32);
    *(_QWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v12;
  }
  else
  {
    if (!v11)
    {
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, a2, v7);
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v7, a2);
    }
    *(_QWORD *)a3 = a2 | (unint64_t)(v6 << 32);
    *(_QWORD *)(a3 + 8) = v6 | (v7 << 32);
  }
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::InitSegment(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;

  v6 = a2 + 1;
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, a2, a2 + 1);
  geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(a1, v6, a2);
  *(_DWORD *)(a3 + 16) = a2;
  *(_DWORD *)(a3 + 20) = v6;
  v7 = a2 | (unint64_t)(v6 << 32);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v7;
}

std::__wrap_iter<unsigned int *>::iterator_type geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetLowestCommonTangent(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, uint64_t a2, unsigned int a3, unsigned int *a4, std::vector<unsigned int>::value_type a5, std::vector<unsigned int>::value_type *a6, std::vector<unsigned int>::value_type *a7)
{
  std::vector<unsigned int>::value_type v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  double *v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int PreviousEdge;

  v9 = a5;
  if (*(_DWORD *)(a2 + 8) == a3)
    v11 = *(_DWORD *)(a2 + 12);
  else
    v11 = *(_DWORD *)(a2 + 8);
  if (*a4 == a5)
    v12 = a4[1];
  else
    v12 = *a4;
LABEL_7:
  v13 = *((_QWORD *)this + 1);
  v14 = (double *)(v13 + 24 * a3);
  v15 = *v14;
  v16 = v14[1];
  v17 = (double *)(v13 + 24 * v11);
  v18 = *v17 - v15;
  v19 = -(v17[1] - v16);
  while (1)
  {
    v20 = (double *)(v13 + 24 * v9);
    v21 = v20[1];
    if ((*v20 - v15) * v19 + v18 * (v21 - v16) > 0.0)
    {
      PreviousEdge = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(this, v11, a3);
      a3 = v11;
      v11 = PreviousEdge;
      goto LABEL_7;
    }
    if ((*(double *)(v13 + 24 * v12) - *v20) * (v16 - v21) - (*(double *)(v13 + 24 * v12 + 8) - v21) * (v15 - *v20) >= 0.0)
      break;
    v22 = *(_QWORD *)(*((_QWORD *)this + 21) + 24 * v12);
    v23 = (*(_QWORD *)(*((_QWORD *)this + 21) + 24 * v12 + 8) - v22) >> 2;
    if (*(_QWORD *)(*((_QWORD *)this + 21) + 24 * v12 + 8) == v22)
    {
LABEL_14:
      v25 = -1;
    }
    else
    {
      v24 = 0;
      v25 = 0;
      while (*(_DWORD *)(v22 + 4 * v24) != v9)
      {
        v24 = ++v25;
        if (v23 <= v25)
          goto LABEL_14;
      }
    }
    v9 = v12;
    v12 = *(_DWORD *)(v22 + 4 * ((v25 + 1) % v23));
  }
  *a6 = a3;
  *a7 = v9;
  return geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(this, *a6, v9, v11, v12);
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindLeftCandidate(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6;
  unsigned int *v9;
  unsigned int *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  double *v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;

  v6 = a4;
  v9 = *(unsigned int **)(*((_QWORD *)this + 21) + 24 * a4);
  v10 = *(unsigned int **)(*((_QWORD *)this + 21) + 24 * a4 + 8);
  v11 = v10 - v9;
  if (v10 == v9)
  {
    v16 = *v10;
LABEL_11:
    v15 = -1;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    while (v9[v12] != a5)
    {
      v12 = ++v13;
      if (v11 <= v13)
      {
        v13 = -1;
        break;
      }
    }
    v14 = 0;
    v15 = 0;
    v16 = v9[(v13 + 1) % v11];
    while (v9[v14] != (_DWORD)v16)
    {
      v14 = ++v15;
      if (v11 <= v15)
        goto LABEL_11;
    }
  }
  v17 = *(_DWORD *)(a2 + 16);
  if (v16 >= v17)
  {
    v18 = a4;
    v19 = &v9[(v15 + 1) % v11];
    do
    {
      v21 = *(_DWORD *)(a2 + 20);
      if (v16 > v21)
        break;
      v22 = v16;
      v16 = *v19;
      v23 = *((_QWORD *)this + 1);
      v24 = (double *)(v23 + 24 * v18);
      v25 = *v24;
      v26 = v24[1];
      v27 = (double *)(v23 + 24 * a5);
      v28 = (double *)(v23 + 24 * v22);
      v29 = *v27 - v25;
      v30 = v27[1] - v26;
      v31 = *v28 - v25;
      v32 = v28[1] - v26;
      v33 = v29 * v32 - v30 * v31;
      v34 = v33 <= 0.0;
      if (v33 < 0.0)
        v34 = 2;
      if (v34 == 1)
      {
        if (v30 * v32 + v29 * v31 <= 0.0)
          return v6;
      }
      else if (v34 == 2)
      {
        return v6;
      }
      if (v16 < v17
        || v16 > v21
        || geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(this, v6, a5, v22, v16) != 2)
      {
        return v22;
      }
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(this, v6, v22);
      v35 = *(_QWORD *)(*((_QWORD *)this + 21) + 24 * v18);
      v36 = (*(_QWORD *)(*((_QWORD *)this + 21) + 24 * v18 + 8) - v35) >> 2;
      if (*(_QWORD *)(*((_QWORD *)this + 21) + 24 * v18 + 8) == v35)
      {
LABEL_28:
        v38 = -1;
      }
      else
      {
        v37 = 0;
        v38 = 0;
        while (*(_DWORD *)(v35 + 4 * v37) != (_DWORD)v16)
        {
          v37 = ++v38;
          if (v36 <= v38)
            goto LABEL_28;
        }
      }
      v19 = (unsigned int *)(v35 + 4 * ((v38 + 1) % v36));
      v17 = *(_DWORD *)(a2 + 16);
    }
    while (v16 >= v17);
  }
  return v6;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindRightCandidate(geo::math::ConstrainedDelaunayTriangulationMesherDetails *a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t PreviousEdge;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double *v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;

  v5 = a5;
  PreviousEdge = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(a1, a5, a4);
  v10 = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(a1, v5, PreviousEdge);
  v11 = *(_DWORD *)(a3 + 16);
  if (PreviousEdge >= v11)
  {
    do
    {
      v12 = *(_DWORD *)(a3 + 20);
      if (PreviousEdge > v12)
        break;
      v13 = v10;
      v14 = *((_QWORD *)a1 + 1);
      v15 = (double *)(v14 + 24 * v5);
      v16 = *v15;
      v17 = v15[1];
      v18 = (double *)(v14 + 24 * a4);
      v19 = (double *)(v14 + 24 * PreviousEdge);
      v20 = *v18 - v16;
      v21 = v18[1] - v17;
      v22 = *v19 - v16;
      v23 = v19[1] - v17;
      v24 = v20 * v23 - v21 * v22;
      v25 = v24 <= 0.0;
      if (v24 < 0.0)
        v25 = 2;
      if (v25 == 1)
      {
        if (v21 * v23 + v20 * v22 <= 0.0)
          return v5;
      }
      else if (!v25)
      {
        return v5;
      }
      if (v10 < v11
        || v10 > v12
        || geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(a1, a4, v5, PreviousEdge, v10) != 2)
      {
        return PreviousEdge;
      }
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(a1, v5, PreviousEdge);
      v10 = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(a1, v5, v13);
      v11 = *(_DWORD *)(a3 + 16);
      PreviousEdge = v13;
    }
    while (v13 >= v11);
  }
  return v5;
}

std::__wrap_iter<unsigned int *>::iterator_type geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, std::vector<unsigned int>::value_type a2, std::vector<unsigned int>::value_type a3, int a4, int a5)
{
  std::vector<unsigned int> *v7;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  std::vector<unsigned int>::const_iterator v14;
  std::vector<unsigned int> *v15;
  std::vector<unsigned int>::pointer v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  std::vector<unsigned int>::const_iterator v22;
  std::vector<unsigned int>::value_type __x;
  std::vector<unsigned int>::value_type v25;

  __x = a3;
  v25 = a2;
  v7 = (std::vector<unsigned int> *)(*((_QWORD *)this + 21) + 24 * a2);
  begin = v7->__begin_;
  end = v7->__end_;
  v10 = (char *)end - (char *)v7->__begin_;
  if (end == v7->__begin_)
  {
LABEL_5:
    v12 = -1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 >> 2;
    while (begin[v11] != a4)
    {
      v11 = ++v12;
      if (v13 <= v12)
        goto LABEL_5;
    }
  }
  v14.__i_ = &begin[v12 + 1];
  std::vector<unsigned int>::insert(v7, v14, &__x);
  v15 = (std::vector<unsigned int> *)(*((_QWORD *)this + 21) + 24 * __x);
  v16 = v15->__begin_;
  v17 = v15->__end_;
  v18 = (char *)v17 - (char *)v15->__begin_;
  if (v17 == v15->__begin_)
  {
LABEL_10:
    v20 = -1;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v18 >> 2;
    while (v16[v19] != a5)
    {
      v19 = ++v20;
      if (v21 <= v20)
        goto LABEL_10;
    }
  }
  v22.__i_ = &v16[v20];
  return std::vector<unsigned int>::insert(v15, v22, &v25).__i_;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  double *v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v5 = *((_QWORD *)this + 1);
  v6 = (double *)(v5 + 24 * a2);
  v7 = *v6;
  v8 = v6[1];
  v9 = (double *)(v5 + 24 * a3);
  v10 = *v9;
  v11 = v9[1];
  v12 = (double *)(v5 + 24 * a4);
  v13 = (double *)(v5 + 24 * a5);
  v14 = v13[1];
  v15 = v7 - *v13;
  v16 = v10 - *v13;
  v17 = v11 - v14;
  v18 = *v12 - *v13;
  v19 = v12[1] - v14;
  v20 = v15 * (v17 * (v18 * v18 + 0.0 + v19 * v19) - v19 * (v16 * v16 + 0.0 + v17 * v17))
      - (v8 - v14) * (v16 * (v18 * v18 + 0.0 + v19 * v19) - (v16 * v16 + 0.0 + v17 * v17) * v18)
      + (v15 * v15 + 0.0 + (v8 - v14) * (v8 - v14)) * (v16 * v19 - v17 * v18);
  if (v20 <= 0.0)
    return v20 >= 0.0;
  else
    return 2;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v3 = *(_QWORD *)(*((_QWORD *)this + 21) + 24 * a2);
  v4 = (*(_QWORD *)(*((_QWORD *)this + 21) + 24 * a2 + 8) - v3) >> 2;
  if (*(_QWORD *)(*((_QWORD *)this + 21) + 24 * a2 + 8) == v3)
  {
LABEL_5:
    v6 = -1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    while (*(_DWORD *)(v3 + 4 * v5) != a3)
    {
      v5 = ++v6;
      if (v4 <= v6)
        goto LABEL_5;
    }
  }
  return *(unsigned int *)(v3 + 4 * ((v4 + v6 - 1) % v4));
}

_QWORD *geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(_QWORD *this, unsigned int a2, unsigned int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = this;
  v6 = this[21];
  v7 = v6 + 24 * a2;
  v10 = *(_QWORD *)(v7 + 8);
  v9 = (_QWORD *)(v7 + 8);
  v8 = v10;
  v11 = *(_QWORD *)(v6 + 24 * a2);
  v12 = v10 - v11;
  if (v10 == v11)
  {
LABEL_5:
    v14 = -1;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = v12 >> 2;
    while (*(_DWORD *)(v11 + 4 * v13) != a3)
    {
      v13 = ++v14;
      if (v15 <= v14)
        goto LABEL_5;
    }
  }
  v16 = v11 + 4 * v14;
  v17 = v8 - (v16 + 4);
  if (v8 != v16 + 4)
  {
    this = memmove((void *)(v11 + 4 * v14), (const void *)(v16 + 4), v8 - (v16 + 4));
    v6 = v5[21];
  }
  *v9 = v16 + v17;
  v18 = v6 + 24 * a3;
  v21 = *(_QWORD *)(v18 + 8);
  v20 = (_QWORD *)(v18 + 8);
  v19 = v21;
  v22 = *(_QWORD *)(v6 + 24 * a3);
  v23 = v21 - v22;
  if (v21 == v22)
  {
LABEL_12:
    v25 = -1;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v26 = v23 >> 2;
    while (*(_DWORD *)(v22 + 4 * v24) != a2)
    {
      v24 = ++v25;
      if (v26 <= v25)
        goto LABEL_12;
    }
  }
  v27 = v22 + 4 * v25;
  v28 = v19 - (v27 + 4);
  if (v19 != v27 + 4)
    this = memmove((void *)(v22 + 4 * v25), (const void *)(v27 + 4), v19 - (v27 + 4));
  *v20 = v27 + v28;
  return this;
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::const_reference __x)
{
  std::vector<unsigned int>::const_reference v3;
  unsigned int *i;
  const unsigned int *end;
  unsigned int *value;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  std::__wrap_iter<const unsigned int *>::iterator_type v9;
  const unsigned int *v10;
  std::vector<unsigned int>::pointer v11;
  unsigned int v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  std::__split_buffer<unsigned int> __v;

  v3 = __x;
  i = (unsigned int *)__position.__i_;
  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begin = this->__begin_;
    v14 = end - this->__begin_ + 1;
    if (v14 >> 62)
      abort();
    v15 = (char *)__position.__i_ - (char *)begin;
    v16 = __position.__i_ - begin;
    v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)&this->__end_cap_;
    if (v18)
      v19 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v18);
    else
      v19 = 0;
    v20 = &v19[v16];
    __v.__first_ = v19;
    __v.__begin_ = v20;
    __v.__end_cap_.__value_ = &v19[v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (begin == i)
          v22 = 1;
        else
          v22 = v15 >> 1;
        v23 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v22);
        v20 = (unsigned int *)((char *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v23;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v23[v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= v21 >> 1;
        __v.__begin_ = v20;
      }
    }
    *v20 = *v3;
    __v.__end_ = v20 + 1;
    i = std::vector<unsigned int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<unsigned int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v9 = __position.__i_ + 1;
    v10 = end - 1;
    v11 = this->__end_;
    while (v10 < end)
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9)
      memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    if (i <= v3)
      v3 += this->__end_ > v3;
    *i = *v3;
  }
  return (std::vector<unsigned int>::iterator)i;
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  unsigned int *begin;
  std::vector<unsigned int>::pointer v6;
  unsigned int *v7;
  std::vector<unsigned int>::pointer v8;
  unsigned int v9;
  unsigned int *end;
  std::__split_buffer<unsigned int>::pointer v11;
  int64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, std::vector<unsigned int>::value_type a3)
{
  uint64_t v5;
  std::vector<unsigned int> *v6;
  unsigned int **p_end;
  unsigned int *end;
  std::vector<unsigned int>::const_iterator v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  int v20;
  std::vector<unsigned int> *v21;
  uint64_t v22;
  unint64_t v23;
  char **v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int *begin;
  std::vector<unsigned int>::value_type *v32;
  uint64_t v33;
  char *v34;
  unsigned int *v35;
  std::vector<unsigned int>::value_type v36;
  uint64_t v37;
  std::__wrap_iter<const unsigned int *>::iterator_type v38;
  uint64_t v39;
  const unsigned int *v40;
  unsigned int v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  char **v45;
  unint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unsigned int *v61;
  uint64_t v62;
  std::vector<unsigned int>::value_type v63;
  std::vector<unsigned int>::value_type *v64;
  char *v65;
  std::vector<unsigned int>::value_type v66;
  std::vector<unsigned int>::value_type __x;

  __x = a3;
  v5 = *((_QWORD *)this + 21);
  v6 = (std::vector<unsigned int> *)(v5 + 24 * a2);
  p_end = &v6->__end_;
  end = v6->__end_;
  v9.__i_ = v6->__begin_;
  v10 = (char *)end - (char *)v6->__begin_;
  v11 = v10 >> 2;
  if (end == v6->__begin_)
  {
    v22 = v5 + 24 * a2;
    v25 = *(_QWORD *)(v22 + 16);
    v24 = (char **)(v22 + 16);
    v23 = v25;
    if ((unint64_t)end < v25)
    {
LABEL_30:
      *end = a3;
      v35 = end + 1;
LABEL_51:
      *p_end = v35;
      return;
    }
    v26 = v23 - (unint64_t)v9.__i_;
    if (v26 >> 1 <= v11 + 1)
      v27 = v11 + 1;
    else
      v27 = v26 >> 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
      v28 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v28 = v27;
    v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v24, v28);
    v30 = *p_end;
    begin = v6->__begin_;
    v32 = (std::vector<unsigned int>::value_type *)&v29[4 * v11];
    v34 = &v29[4 * v33];
    *v32 = a3;
    v35 = v32 + 1;
    while (v30 != begin)
    {
      v36 = *--v30;
      *--v32 = v36;
    }
LABEL_49:
    v6->__begin_ = v32;
    *p_end = v35;
    *v24 = v34;
    if (begin)
      operator delete(begin);
    goto LABEL_51;
  }
  v12 = *((_QWORD *)this + 1);
  v13 = (double *)(v12 + 24 * a2);
  v14 = *v13;
  v15 = v13[1];
  v16 = (double *)(v12 + 24 * a3);
  v17 = *v16 - *v13;
  v18 = v16[1] - v15;
  v19 = (*(double *)(v12 + 24 * *v9.__i_) - *v13) * v18 - (*(double *)(v12 + 24 * *v9.__i_ + 8) - v15) * v17;
  v20 = v19 <= 0.0;
  if (v19 < 0.0)
    v20 = 2;
  if (v10 == 4)
  {
    if (v20)
    {
      v21 = v6;
LABEL_39:
      std::vector<unsigned int>::insert(v21, v9, &__x);
      return;
    }
    v48 = v5 + 24 * a2;
    v50 = *(_QWORD *)(v48 + 16);
    v24 = (char **)(v48 + 16);
    v49 = v50;
    if ((unint64_t)end < v50)
      goto LABEL_30;
    v57 = v49 - (unint64_t)v9.__i_;
    if (v57 >> 1 <= v11 + 1)
      v58 = v11 + 1;
    else
      v58 = v57 >> 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
      v59 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v24, v59);
    v61 = *p_end;
    begin = v6->__begin_;
    v32 = (std::vector<unsigned int>::value_type *)&v60[4 * v11];
    v34 = &v60[4 * v62];
    *v32 = a3;
    v35 = v32 + 1;
    while (v61 != begin)
    {
      v63 = *--v61;
      *--v32 = v63;
    }
    goto LABEL_49;
  }
  if ((unint64_t)v10 >= 5)
  {
    if (v11 <= 2)
      v37 = 2;
    else
      v37 = v10 >> 2;
    v38 = v9.__i_ + 1;
    v39 = v37 - 1;
    v40 = v9.__i_ + 1;
    while (1)
    {
      v41 = *v38++;
      v42 = (*(double *)(v12 + 24 * v41) - v14) * v18 - (*(double *)(v12 + 24 * v41 + 8) - v15) * v17;
      if (!v20 && v42 < 0.0)
        break;
      v20 = v42 <= 0.0;
      if (v42 < 0.0)
        v20 = 2;
      ++v40;
      if (!--v39)
        goto LABEL_27;
    }
    v21 = v6;
    v9.__i_ = v40;
    goto LABEL_39;
  }
LABEL_27:
  v43 = v5 + 24 * a2;
  v46 = *(_QWORD *)(v43 + 16);
  v45 = (char **)(v43 + 16);
  v44 = v46;
  if ((unint64_t)end >= v46)
  {
    v51 = v11 + 1;
    if ((v11 + 1) >> 62)
      abort();
    v52 = v44 - (unint64_t)v9.__i_;
    if (v52 >> 1 > v51)
      v51 = v52 >> 1;
    v53 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL;
    v54 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v53)
      v54 = v51;
    if (v54)
    {
      v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v45, v54);
      v54 = v56;
      end = *p_end;
      v9.__i_ = v6->__begin_;
    }
    else
    {
      v55 = 0;
    }
    v64 = (std::vector<unsigned int>::value_type *)&v55[4 * v11];
    v65 = &v55[4 * v54];
    *v64 = a3;
    v47 = v64 + 1;
    while (end != v9.__i_)
    {
      v66 = *--end;
      *--v64 = v66;
    }
    v6->__begin_ = v64;
    *p_end = v47;
    *v45 = v65;
    if (v9.__i_)
      operator delete((void *)v9.__i_);
  }
  else
  {
    *end = a3;
    v47 = end + 1;
  }
  *p_end = v47;
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::ReshuffleIndicesAndUpdateConstraints(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::vector<int>::size_type v15;
  std::vector<int> *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v34;
  _QWORD v35[3];
  void **v36;

  memset(v35, 0, sizeof(v35));
  v7 = *a2;
  v6 = a2[1];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 3);
  std::vector<std::vector<unsigned long>>::resize(v35, v8);
  if (v6 == v7)
  {
    std::vector<std::vector<unsigned long>>::resize(a3, v8);
    v9 = 1;
  }
  else
  {
    v34 = a3;
    v9 = 0;
    v10 = 0;
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = v8;
    while (1)
    {
      v12 = (uint64_t *)(*a2 + 24 * v10);
      v13 = *v12;
      v14 = v12[1];
      v15 = (v14 - *v12) >> 3;
      v16 = (std::vector<int> *)(v35[0] + 24 * v10);
      std::vector<unsigned int>::resize(v16, v15);
      if (v14 != v13)
        break;
LABEL_12:
      v9 = ++v10 >= v8;
      if (v10 == v11)
      {
        std::vector<std::vector<unsigned long>>::resize(v34, v8);
        v24 = 0;
        v25 = a1 + 352;
        v9 = 1;
        do
        {
          v26 = (uint64_t)(*(_QWORD *)(v35[0] + 24 * v24 + 8) - *(_QWORD *)(v35[0] + 24 * v24)) >> 2;
          v27 = (_QWORD *)(*v34 + 24 * v24);
          std::vector<geo::math::Matrix<unsigned int,2,1>>::resize((uint64_t)v27, v26);
          v28 = v26 - 1;
          if (v28)
          {
            v29 = 0;
            do
            {
              v30 = v29 + 1;
              v31 = *(_QWORD *)(*(_QWORD *)(v35[0] + 24 * v24) + 4 * v29);
              *(_QWORD *)(*v27 + 8 * v29) = v31;
              geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddConstraintToSet(v31, v25);
              v29 = v30;
            }
            while (v28 != v30);
          }
          v32 = *(unsigned int *)(*(_QWORD *)(v35[0] + 24 * v24) + 4 * v28) | ((unint64_t)**(unsigned int **)(v35[0] + 24 * v24) << 32);
          *(_QWORD *)(*v27 + 8 * v28) = v32;
          geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddConstraintToSet(v32, v25);
          ++v24;
        }
        while (v24 != v11);
        goto LABEL_20;
      }
    }
    v17 = 0;
    v18 = *(_QWORD *)(*a2 + 24 * v10);
    v19 = *(_QWORD *)(a1 + 56);
    v20 = (*(_QWORD *)(a1 + 64) - v19) >> 2;
    if (v15 <= 1)
      v21 = 1;
    else
      v21 = v15;
    while (1)
    {
      v22 = *(_QWORD *)(v18 + 8 * v17);
      if (v20 <= v22)
        break;
      v23 = *(_DWORD *)(v19 + 4 * v22);
      if (v23 == -1)
        break;
      v16->__begin_[v17++] = v23;
      if (v21 == v17)
        goto LABEL_12;
    }
  }
LABEL_20:
  v36 = (void **)v35;
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v36);
  return v9;
}

void std::vector<geo::math::Matrix<unsigned int,2,1>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<geo::math::Matrix<unsigned int,2,1>>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<geo::math::Matrix<unsigned int,2,1>>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (a2 <= (v5 - v6) >> 3)
  {
    a1[1] = &v6[8 * a2];
  }
  else
  {
    v7 = *a1;
    v8 = v6 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      abort();
    v10 = v8 >> 3;
    v11 = v5 - v7;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long long>>(v4, v12);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    v16 = &v14[8 * a2];
    if (v6 != v7)
    {
      do
      {
        v17 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v17;
        v14 -= 8;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v7)
      operator delete(v7);
  }
}

_QWORD *geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddConstraintToSet(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v4 = a1;
  if (a1 < HIDWORD(a1))
    return std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::__emplace_unique_key_args<geo::math::Matrix<unsigned int,2,1>,geo::math::Matrix<unsigned int,2,1> const&>(a2, &v4, &v4);
  v3 = __PAIR64__(a1, HIDWORD(a1));
  return std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::__emplace_unique_key_args<geo::math::Matrix<unsigned int,2,1>,geo::math::Matrix<unsigned int,2,1> const&>(a2, &v3, &v3);
}

_QWORD *std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::__emplace_unique_key_args<geo::math::Matrix<unsigned int,2,1>,geo::math::Matrix<unsigned int,2,1> const&>(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = (a2[1] ^ *a2) + 2654435769;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = (a2[1] ^ *a2) + 2654435769;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 + 0x1FFFFFFFFLL);
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *(_QWORD *)a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    _ZNSt3__16vectorINS0_IDv3_fNS_9allocatorIS1_EEEENS2_IS4_EEE7__clearB8nn180100Ev((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeConstraint(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t result;

  v6 = *(_QWORD *)(*((_QWORD *)this + 21) + 24 * a2);
  v7 = *(_QWORD *)(*((_QWORD *)this + 21) + 24 * a2 + 8) - v6;
  if (!v7)
    goto LABEL_7;
  v8 = 0;
  v9 = v7 >> 2;
  v10 = 1;
  while (*(_DWORD *)(v6 + 4 * v8) != (_DWORD)a3)
  {
    v8 = v10;
    if (v9 <= v10++)
      goto LABEL_7;
  }
  if (!v10)
  {
LABEL_7:
    result = geo::math::ConstrainedDelaunayTriangulationMesherDetails::ApplyConstraint(this, a2, a3);
    if (!(_DWORD)result)
      return result;
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::AdjustByConstraint(this, a2, a3);
  }
  return 1;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::ApplyConstraint(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, std::vector<unsigned int>::value_type a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;

  v6 = *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
  if (!v6)
  {
LABEL_13:
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(this, a2, a3);
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeDirectional(this, a3, a2);
    return 1;
  }
  v7 = 0;
  v8 = 0;
  v15 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  v9 = *((_QWORD *)this + 21);
  while (1)
  {
    v10 = *(_QWORD *)(v9 + 24 * v7);
    if (*(_QWORD *)(v9 + 24 * v7 + 8) != v10)
      break;
LABEL_12:
    v7 = ++v8;
    if (v15 <= v8)
      goto LABEL_13;
  }
  v11 = 0;
  while (1)
  {
    v12 = *(unsigned int *)(v10 + 4 * v11);
    if (!geo::math::ConstrainedDelaunayTriangulationMesherDetails::IsIntersect(this, v8, *(_DWORD *)(v10 + 4 * v11), a2, a3))
    {
      ++v11;
      goto LABEL_11;
    }
    v13 = (v7 << 32) | v12;
    if (v8 < v12)
      v13 = v7 | (v12 << 32);
    v16 = v13;
    if (std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((_QWORD *)this + 44, &v16))
    {
      return 0;
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(this, v8, v12);
LABEL_11:
    v9 = *((_QWORD *)this + 21);
    v10 = *(_QWORD *)(v9 + 24 * v7);
    if (v11 >= (*(_QWORD *)(v9 + 24 * v7 + 8) - v10) >> 2)
      goto LABEL_12;
  }
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::AdjustByConstraint(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ConstrainedLeftCandidate;
  uint64_t ConstrainedRightCandidate;
  BOOL v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v3 = a3;
  v4 = a2;
  ConstrainedLeftCandidate = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedLeftCandidate(this, a2, a3);
  ConstrainedRightCandidate = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedRightCandidate(this, v4, v3);
  v8 = (_DWORD)ConstrainedLeftCandidate == (_DWORD)v4;
  v9 = (_DWORD)ConstrainedRightCandidate == (_DWORD)v3;
  if ((_DWORD)ConstrainedRightCandidate != (_DWORD)v3 || (_DWORD)ConstrainedLeftCandidate != (_DWORD)v4)
  {
    v11 = ConstrainedRightCandidate;
    if ((_DWORD)ConstrainedLeftCandidate != (_DWORD)ConstrainedRightCandidate)
    {
      v12 = v4;
      v13 = v3;
      do
      {
        if (v8
          || !v9
          && geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(this, v12, v13, ConstrainedLeftCandidate, v11) == 2)
        {
          geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(this, v12, v11, v13, v13);
          v13 = v11;
        }
        else
        {
          geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgeNextToStartPreToEnd(this, ConstrainedLeftCandidate, v13, v12, v12);
          v12 = ConstrainedLeftCandidate;
        }
        ConstrainedLeftCandidate = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedLeftCandidate(this, v12, v13);
        v14 = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedRightCandidate(this, v12, v13);
        v8 = (_DWORD)ConstrainedLeftCandidate == (_DWORD)v12;
        v9 = (_DWORD)v14 == (_DWORD)v13;
        if ((_DWORD)v14 == (_DWORD)v13 && (_DWORD)ConstrainedLeftCandidate == (_DWORD)v12)
          break;
        v11 = v14;
      }
      while ((_DWORD)ConstrainedLeftCandidate != (_DWORD)v14);
    }
  }
  while (1)
  {
    v17 = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedLeftCandidate(this, v3, v4);
    result = geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedRightCandidate(this, v3, v4);
    if ((_DWORD)v17 == (_DWORD)v3 && (_DWORD)result == (_DWORD)v4)
      break;
    v16 = result;
    if ((_DWORD)result == (_DWORD)v17)
      break;
    if ((_DWORD)result == (_DWORD)v4
      || (_DWORD)v17 != (_DWORD)v3
      && geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(this, v4, result, v3, v17) == 2)
    {
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgePreToStartNextToEnd(this, v4, v17, v3, v3);
      v3 = v17;
    }
    else
    {
      geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgePreToStartNextToEnd(this, v16, v3, v4, v4);
      v4 = v16;
    }
  }
  return result;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::IsIntersect(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t result;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  double v13;
  double *v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;

  result = 0;
  if (a3 != a5 && a3 != a4 && a2 != a4 && a2 != a5)
  {
    v7 = *((_QWORD *)this + 1);
    v8 = (double *)(v7 + 24 * a4);
    v9 = *v8;
    v10 = v8[1];
    v11 = (double *)(v7 + 24 * a5);
    v12 = *v11;
    v13 = v11[1];
    v14 = (double *)(v7 + 24 * a2);
    v15 = v14[1];
    v16 = (double *)(v7 + 24 * a3);
    v17 = *v16;
    v18 = v16[1];
    v19 = *v16 - *v14;
    v20 = v19 * (v10 - v15) - (v18 - v15) * (v9 - *v14);
    v21 = v19 * (v13 - v15) - (v18 - v15) * (v12 - *v14);
    v22 = (v21 > 0.0) ^ (v20 <= 0.0);
    if (v21 < 0.0)
      v22 = 0;
    v23 = v12 - v9;
    v24 = v13 - v10;
    v25 = v23 * (v15 - v10) - v24 * (*v14 - v9);
    v26 = v23 * (v18 - v10) - v24 * (v17 - v9);
    if (v20 < 0.0)
      v22 = v21 < 0.0;
    v27 = (v25 <= 0.0) ^ (v26 > 0.0);
    if (v26 < 0.0)
      v27 = 0;
    if (v25 < 0.0)
      v27 = v26 < 0.0;
    return (v27 | v22) ^ 1u;
  }
  return result;
}

_QWORD *std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>(_QWORD *a1, _DWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (a2[1] ^ *a2) + 2654435769;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = (a2[1] ^ *a2) + 2654435769;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = v3 & (*(_QWORD *)&v2 + 0x1FFFFFFFFLL);
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *(_QWORD *)a2)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedLeftCandidate(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v28;

  v4 = a2;
  v6 = a2;
  v7 = *(unsigned int **)(*((_QWORD *)this + 21) + 24 * a2);
  v8 = *(unsigned int **)(*((_QWORD *)this + 21) + 24 * a2 + 8);
  v9 = v8 - v7;
  if (v8 == v7)
  {
    v14 = *v8;
LABEL_11:
    v13 = -1;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    while (v7[v10] != a3)
    {
      v10 = ++v11;
      if (v9 <= v11)
      {
        v11 = -1;
        break;
      }
    }
    v12 = 0;
    v13 = 0;
    v14 = v7[(v11 + 1) % v9];
    while (v7[v12] != (_DWORD)v14)
    {
      v12 = ++v13;
      if (v9 <= v13)
        goto LABEL_11;
    }
  }
  v15 = &v7[(v13 + 1) % v9];
  while (1)
  {
    v17 = *((_QWORD *)this + 1);
    v18 = (double *)(v17 + 24 * v6);
    if ((*(double *)(v17 + 24 * a3) - *v18) * (*(double *)(v17 + 24 * v14 + 8) - v18[1])
       - (*(double *)(v17 + 24 * a3 + 8) - v18[1]) * (*(double *)(v17 + 24 * v14) - *v18) <= 0.0)
      return v4;
    v19 = *v15;
    v20 = v6 | ((unint64_t)v14 << 32);
    if (v14 <= v4)
      v20 = (v6 << 32) | v14;
    v28 = v20;
    if (std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((_QWORD *)this + 44, &v28))
    {
      return v14;
    }
    v21 = *((_QWORD *)this + 1);
    v22 = (double *)(v21 + 24 * v6);
    if ((*(double *)(v21 + 24 * a3) - *v22) * (*(double *)(v21 + 24 * v19 + 8) - v22[1])
       - (*(double *)(v21 + 24 * a3 + 8) - v22[1]) * (*(double *)(v21 + 24 * v19) - *v22) <= 0.0
      || geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(this, v4, a3, v14, v19) != 2)
    {
      return v14;
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(this, v4, v14);
    v23 = *(_QWORD *)(*((_QWORD *)this + 21) + 24 * v6);
    v24 = (*(_QWORD *)(*((_QWORD *)this + 21) + 24 * v6 + 8) - v23) >> 2;
    if (*(_QWORD *)(*((_QWORD *)this + 21) + 24 * v6 + 8) == v23)
    {
LABEL_23:
      v26 = -1;
    }
    else
    {
      v25 = 0;
      v26 = 0;
      while (*(_DWORD *)(v23 + 4 * v25) != (_DWORD)v19)
      {
        v25 = ++v26;
        if (v24 <= v26)
          goto LABEL_23;
      }
    }
    v15 = (unsigned int *)(v23 + 4 * ((v26 + 1) % v24));
    v14 = v19;
  }
}

uint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::FindConstrainedRightCandidate(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t PreviousEdge;
  uint64_t i;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  uint64_t v11;
  double *v12;
  unint64_t v14;

  v3 = a3;
  PreviousEdge = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(this, a3, a2);
  for (i = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(this, v3, PreviousEdge);
        ;
        i = geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetPreviousEdge(this, v3, i))
  {
    v8 = *((_QWORD *)this + 1);
    v9 = (double *)(v8 + 24 * v3);
    if ((*(double *)(v8 + 24 * a2) - *v9) * (*(double *)(v8 + 24 * PreviousEdge + 8) - v9[1])
       - (*(double *)(v8 + 24 * a2 + 8) - v9[1]) * (*(double *)(v8 + 24 * PreviousEdge) - *v9) >= 0.0)
      break;
    v10 = v3 | ((unint64_t)PreviousEdge << 32);
    if (PreviousEdge <= v3)
      v10 = (v3 << 32) | PreviousEdge;
    v14 = v10;
    if (std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>((_QWORD *)this + 44, &v14))
    {
      return PreviousEdge;
    }
    v11 = *((_QWORD *)this + 1);
    v12 = (double *)(v11 + 24 * v3);
    if ((*(double *)(v11 + 24 * a2) - *v12) * (*(double *)(v11 + 24 * i + 8) - v12[1])
       - (*(double *)(v11 + 24 * a2 + 8) - v12[1]) * (*(double *)(v11 + 24 * i) - *v12) >= 0.0
      || geo::math::ConstrainedDelaunayTriangulationMesherDetails::InCircle(this, a2, v3, PreviousEdge, i) != 2)
    {
      return PreviousEdge;
    }
    geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(this, v3, PreviousEdge);
    PreviousEdge = i;
  }
  return v3;
}

std::__wrap_iter<unsigned int *>::iterator_type geo::math::ConstrainedDelaunayTriangulationMesherDetails::AddEdgePreToStartNextToEnd(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, std::vector<unsigned int>::value_type a2, std::vector<unsigned int>::value_type a3, int a4, int a5)
{
  std::vector<unsigned int> *v7;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  std::vector<unsigned int>::const_iterator v14;
  std::vector<unsigned int> *v15;
  std::vector<unsigned int>::pointer v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  std::vector<unsigned int>::const_iterator v22;
  std::vector<unsigned int>::value_type __x;
  std::vector<unsigned int>::value_type v25;

  __x = a3;
  v25 = a2;
  v7 = (std::vector<unsigned int> *)(*((_QWORD *)this + 21) + 24 * a2);
  begin = v7->__begin_;
  end = v7->__end_;
  v10 = (char *)end - (char *)v7->__begin_;
  if (end == v7->__begin_)
  {
LABEL_5:
    v12 = -1;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = v10 >> 2;
    while (begin[v11] != a4)
    {
      v11 = ++v12;
      if (v13 <= v12)
        goto LABEL_5;
    }
  }
  v14.__i_ = &begin[v12];
  std::vector<unsigned int>::insert(v7, v14, &__x);
  v15 = (std::vector<unsigned int> *)(*((_QWORD *)this + 21) + 24 * __x);
  v16 = v15->__begin_;
  v17 = v15->__end_;
  v18 = (char *)v17 - (char *)v15->__begin_;
  if (v17 == v15->__begin_)
  {
LABEL_10:
    v20 = -1;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = v18 >> 2;
    while (v16[v19] != a5)
    {
      v19 = ++v20;
      if (v21 <= v20)
        goto LABEL_10;
    }
  }
  v22.__i_ = &v16[v20 + 1];
  return std::vector<unsigned int>::insert(v15, v22, &v25).__i_;
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::ClearSpaceByConstraints(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;
  char *v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  std::locale::__imp *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  unint64_t v48;
  _QWORD *v49;
  const char *v50;
  uint64_t v51;
  _QWORD *v52;
  const std::locale::facet *v53;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *__p;
  char *v63;
  char *v64;
  std::locale v65;

  v3 = *a2;
  v2 = a2[1];
  __p = 0;
  v64 = 0;
  v4 = v2 - v3;
  if (!v4)
    return 1;
  v5 = a2;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = v4 / 24;
  if ((unint64_t)(v4 / 24) <= 1)
    v12 = 1;
  else
    v12 = v4 / 24;
  while (1)
  {
    v13 = *(_QWORD *)(*v5 + 24 * v10 + 8) - *(_QWORD *)(*v5 + 24 * v10);
    if (v13)
      break;
LABEL_58:
    v9 = ++v10 >= v11;
    if (v10 == v12)
    {
      v9 = 1;
      goto LABEL_66;
    }
  }
  v14 = 0;
  v15 = v13 >> 3;
  if ((unint64_t)(v13 >> 3) <= 1)
    v16 = 1;
  else
    v16 = v13 >> 3;
  while (2)
  {
    v17 = *(_QWORD *)(*v5 + 24 * v10);
    v18 = *(_QWORD *)(v17 + 8 * v14);
    if (v14)
      v19 = v14;
    else
      v19 = v15;
    v20 = (uint64_t *)(*((_QWORD *)this + 21) + 24 * v18);
    v21 = *v20;
    v22 = v20[1] - *v20;
    if (v22)
    {
      v23 = 0;
      v24 = 0;
      v25 = *(_DWORD *)(v17 + 8 * v19 - 8);
      v26 = v22 >> 2;
      while (*(_DWORD *)(v21 + 4 * v23) != HIDWORD(v18))
      {
        v23 = ++v24;
        if (v26 <= v24)
          goto LABEL_60;
      }
      if (v24 != -1)
      {
        v27 = 0;
        v28 = 1;
        while (*(_DWORD *)(v21 + 4 * v27) != v25)
        {
          v27 = v28;
          if (v26 <= v28++)
            goto LABEL_63;
        }
        if (!v28)
        {
LABEL_63:
          if (!*(_BYTE *)this)
            goto LABEL_66;
          v49 = (_QWORD *)MEMORY[0x24BEDB310];
          v50 = "ClearSpaceByConstraints failed: cannot locate previous edge!";
          v51 = 60;
          goto LABEL_65;
        }
        v58 = v15;
        v59 = v16;
        v60 = v14;
        v61 = v12;
        v30 = (unint64_t)v22 >> 2;
        if (v24 >= v28 - 1)
          LODWORD(v30) = 0;
        v31 = v30 + v24;
        v63 = v8;
        if (v28 < v31)
        {
          v55 = v11;
          v56 = v10;
          v57 = v5;
          v32 = v28;
          v33 = (_QWORD *)((char *)this + 352);
          do
          {
            v34 = v32 % v26;
            v35 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 21) + 24 * v18) + 4 * (v32 % v26));
            if (v35 <= v18)
              v36 = (std::locale::__imp *)(((unint64_t)v18 << 32) | v35);
            else
              v36 = (std::locale::__imp *)(v18 | (unint64_t)(v35 << 32));
            v65.__locale_ = v36;
            if (!std::__hash_table<geo::math::Matrix<unsigned int,2,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,2,1>>,std::equal_to<geo::math::Matrix<unsigned int,2,1>>,std::allocator<geo::math::Matrix<unsigned int,2,1>>>::find<geo::math::Matrix<unsigned int,2,1>>(v33, &v65))
            {
              v37 = *(_QWORD *)(*((_QWORD *)this + 21) + 24 * v18);
              v38 = v63;
              if (v63 >= v64)
              {
                v40 = __p;
                v41 = (v63 - __p) >> 2;
                v42 = v41 + 1;
                if ((unint64_t)(v41 + 1) >> 62)
                  abort();
                v43 = v64 - __p;
                if ((v64 - __p) >> 1 > v42)
                  v42 = v43 >> 1;
                if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                  v44 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v44 = v42;
                if (v44)
                {
                  v45 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v64, v44);
                  v40 = __p;
                  v38 = v63;
                }
                else
                {
                  v45 = 0;
                }
                v46 = &v45[4 * v41];
                *(_DWORD *)v46 = *(_DWORD *)(v37 + 4 * v34);
                v39 = v46 + 4;
                if (v38 == v40)
                {
                  v33 = (_QWORD *)((char *)this + 352);
                }
                else
                {
                  v33 = (_QWORD *)((char *)this + 352);
                  do
                  {
                    v47 = *((_DWORD *)v38 - 1);
                    v38 -= 4;
                    *((_DWORD *)v46 - 1) = v47;
                    v46 -= 4;
                  }
                  while (v38 != v40);
                }
                __p = v46;
                v64 = &v45[4 * v44];
                if (v40)
                  operator delete(v40);
              }
              else
              {
                *(_DWORD *)v63 = *(_DWORD *)(v37 + 4 * v34);
                v39 = v63 + 4;
              }
              v63 = v39;
            }
            ++v32;
          }
          while (v32 != v31);
          v7 = __p;
          v8 = v63;
          v10 = v56;
          v5 = v57;
          v11 = v55;
        }
        if (v8 == v7)
        {
          v15 = v58;
        }
        else
        {
          v48 = 0;
          v15 = v58;
          do
          {
            geo::math::ConstrainedDelaunayTriangulationMesherDetails::RemoveEdge(this, v18, *(_DWORD *)&v7[4 * v48++]);
            v7 = __p;
          }
          while (v48 < (v63 - __p) >> 2);
        }
        v16 = v59;
        v14 = v60 + 1;
        v8 = v7;
        v12 = v61;
        if (v60 + 1 != v59)
          continue;
        goto LABEL_58;
      }
    }
    break;
  }
LABEL_60:
  if (*(_BYTE *)this)
  {
    v49 = (_QWORD *)MEMORY[0x24BEDB310];
    v50 = "ClearSpaceByConstraints failed: cannot locate current edge!";
    v51 = 59;
LABEL_65:
    v52 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
    std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(_QWORD *)(*v52 - 24)));
    v53 = std::locale::use_facet(&v65, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
    std::locale::~locale(&v65);
    std::ostream::put();
    std::ostream::flush();
    v7 = __p;
  }
LABEL_66:
  if (v7)
    operator delete(v7);
  return v9;
}

unint64_t geo::math::ConstrainedDelaunayTriangulationMesherDetails::GetEdgeCount(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v2 = *((_QWORD *)this + 21);
  v1 = *((_QWORD *)this + 22);
  v3 = v1 - v2;
  if (v1 == v2)
    return 0;
  v4 = 0;
  v5 = v3 / 24;
  if (v5 <= 1)
    v5 = 1;
  v6 = (_QWORD *)(v2 + 8);
  do
  {
    v4 += (uint64_t)(*v6 - *(v6 - 1)) >> 2;
    v6 += 3;
    --v5;
  }
  while (v5);
  return v4 >> 1;
}

BOOL geo::math::ConstrainedDelaunayTriangulationMesherDetails::RebaseMesh(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  int64x2_t v58;
  unint64_t v59;
  int64x2_t *v60;

  a2[1] = *a2;
  v4 = a1[1];
  v3 = a1[2];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
  v6 = a1[5] - a1[4];
  if (v5 == v6 >> 2)
  {
    v56 = a1[5] - a1[4];
    v10 = v5 + ((uint64_t)(a1[14] - a1[13]) >> 5);
    v58 = vdupq_n_s64(0xC7EFFFFFE0000000);
    v59 = 0xC7EFFFFFE0000000;
    std::vector<geo::math::Matrix<double,3,1>>::resize((uint64_t)a2, v10, (__int128 *)v58.i8);
    if (v3 != v4)
    {
      v11 = 0;
      v12 = 0;
      if (v5 <= 1)
        v13 = 1;
      else
        v13 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 3);
      do
      {
        v14 = (__int128 *)(a1[1] + v11);
        v15 = *a2 + 24 * *(unsigned int *)(a1[4] + 4 * v12);
        v16 = *v14;
        *(_QWORD *)(v15 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v15 = v16;
        ++v12;
        v11 += 24;
      }
      while (v13 != v12);
    }
    v17 = a1[13];
    if (a1[14] != v17)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = v17 + v18;
        v21 = *a2 + 24 * *(_QWORD *)v20;
        v22 = *(_OWORD *)(v20 + 8);
        *(_QWORD *)(v21 + 16) = *(_QWORD *)(v20 + 24);
        *(_OWORD *)v21 = v22;
        ++v19;
        v17 = a1[13];
        v18 += 32;
      }
      while (v19 < (a1[14] - v17) >> 5);
    }
    v58 = 0uLL;
    v59 = 0;
    v24 = a1[32];
    v23 = a1[33];
    if (v23 != v24)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        if (*(_QWORD *)(v24 + v25 + 8) - *(_QWORD *)(v24 + v25) == 24)
        {
          std::vector<std::vector<unsigned long>>::push_back[abi:nn180100](&v58, v24 + v25);
          v24 = a1[32];
          v23 = a1[33];
        }
        ++v26;
        v25 += 24;
      }
      while (v26 < 0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 3));
    }
    v57 = v5;
    v27 = *(char **)a3;
    *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
    v28 = a1[24];
    v55 = (char *)(a1 + 24);
    v29 = a1[25];
    if (v29 != v28)
    {
      v30 = 0;
      v31 = (_QWORD *)(a3 + 16);
      do
      {
        v32 = (unsigned int *)(v28 + 12 * v30);
        v33 = a1[4];
        v34 = *(unsigned int *)(v33 + 4 * *v32);
        v35 = *(unsigned int *)(v33 + 4 * v32[1]);
        v36 = *(unsigned int *)(v33 + 4 * v32[2]);
        if (v58.i64[1] == v58.i64[0])
        {
LABEL_36:
          if ((unint64_t)v27 >= *v31)
          {
            v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-*(_QWORD *)a3] >> 2);
            v45 = v44 + 1;
            if (v44 + 1 > 0x1555555555555555)
              abort();
            if (0x5555555555555556 * ((uint64_t)(*v31 - *(_QWORD *)a3) >> 2) > v45)
              v45 = 0x5555555555555556 * ((uint64_t)(*v31 - *(_QWORD *)a3) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v31 - *(_QWORD *)a3) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v46 = 0x1555555555555555;
            else
              v46 = v45;
            if (v46)
              v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>(a3 + 16, v46);
            else
              v47 = 0;
            v48 = &v47[12 * v44];
            *(_DWORD *)v48 = v34;
            *((_DWORD *)v48 + 1) = v35;
            *((_DWORD *)v48 + 2) = v36;
            v50 = *(char **)a3;
            v49 = *(char **)(a3 + 8);
            v51 = v48;
            if (v49 != *(char **)a3)
            {
              do
              {
                v52 = *(_QWORD *)(v49 - 12);
                v49 -= 12;
                v53 = *((_DWORD *)v49 + 2);
                *(_QWORD *)(v51 - 12) = v52;
                v51 -= 12;
                *((_DWORD *)v51 + 2) = v53;
              }
              while (v49 != v50);
              v49 = *(char **)a3;
            }
            v27 = v48 + 12;
            *(_QWORD *)a3 = v51;
            *(_QWORD *)(a3 + 8) = v48 + 12;
            *(_QWORD *)(a3 + 16) = &v47[12 * v46];
            if (v49)
              operator delete(v49);
          }
          else
          {
            *(_DWORD *)v27 = v34;
            *((_DWORD *)v27 + 1) = v35;
            *((_DWORD *)v27 + 2) = v36;
            v27 += 12;
          }
          *(_QWORD *)(a3 + 8) = v27;
          v28 = a1[24];
          v29 = a1[25];
        }
        else
        {
          v37 = 0;
          v38 = (v58.i64[1] - v58.i64[0]) / 24;
          if (v38 <= 1)
            v38 = 1;
          while (1)
          {
            v39 = v58.i64[0] + 24 * v37;
            v41 = *(_QWORD **)v39;
            v40 = *(_QWORD **)(v39 + 8);
            if (v41 != v40)
            {
              v42 = v41;
              while (*v42 != v34)
              {
                if (++v42 == v40)
                {
                  v42 = v40;
                  break;
                }
              }
              if (v42 != v40)
              {
                v43 = v41;
                while (*v43 != v35)
                {
                  if (++v43 == v40)
                  {
                    v43 = v40;
                    break;
                  }
                }
                if (v43 != v40)
                {
                  while (*v41 != v36)
                  {
                    if (++v41 == v40)
                    {
                      v41 = v40;
                      break;
                    }
                  }
                  if (v41 != v40)
                    break;
                }
              }
            }
            if (++v37 == v38)
              goto LABEL_36;
          }
        }
        ++v30;
      }
      while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v29 - v28) >> 2));
    }
    if (v55 != (char *)a3)
      std::vector<geo::math::Matrix<unsigned int,3,1>>::__assign_with_size[abi:nn180100]<geo::math::Matrix<unsigned int,3,1>*,geo::math::Matrix<unsigned int,3,1>*>(v55, *(char **)a3, (uint64_t)v27, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-*(_QWORD *)a3] >> 2));
    v60 = &v58;
    std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v60);
    v6 = v56;
    v5 = v57;
  }
  return v5 == v6 >> 2;
}

uint64_t *std::__hash_table<geo::math::Matrix<unsigned int,3,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,3,1>>,std::equal_to<geo::math::Matrix<unsigned int,3,1>>,std::allocator<geo::math::Matrix<unsigned int,3,1>>>::find<geo::math::Matrix<unsigned int,3,1>>(_QWORD *a1, _DWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = ((a2[1] ^ *a2) ^ a2[2]) + 2654435769;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = ((a2[1] ^ *a2) ^ a2[2]) + 2654435769;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = v3 & (*(_QWORD *)&v2 + 0x1FFFFFFFFLL);
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (result[2] == *(_QWORD *)a2 && *((_DWORD *)result + 6) == (unint64_t)a2[2])
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<geo::math::Matrix<unsigned int,3,1>,geo::math::VectorHasher<geo::math::Matrix<unsigned int,3,1>>,std::equal_to<geo::math::Matrix<unsigned int,3,1>>,std::allocator<geo::math::Matrix<unsigned int,3,1>>>::__emplace_unique_key_args<geo::math::Matrix<unsigned int,3,1>,geo::math::Matrix<unsigned int,3,1> const&>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = ((a2[1] ^ *a2) ^ a2[2]) + 2654435769;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = ((a2[1] ^ *a2) ^ a2[2]) + 2654435769;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 + 0x1FFFFFFFFLL);
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2 && *((_DWORD *)v10 + 6) == (unint64_t)a2[2])
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *(_QWORD *)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a3 + 8);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::PeerIDValidator::Entry>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v10 = *v20;
LABEL_42:
    *v20 = v10;
    goto LABEL_43;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(12 * a2);
}

void std::vector<geo::math::Matrix<double,3,1>>::resize(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<geo::math::Matrix<double,3,1>>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<geo::math::Matrix<double,3,1>>::__append(void **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        v17 = *a3;
        v9[2] = *((_QWORD *)a3 + 2);
        *(_OWORD *)v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v6, v13);
    else
      v14 = 0;
    v18 = &v14[24 * v10];
    v19 = &v18[24 * a2];
    v20 = 24 * a2;
    v21 = v18;
    do
    {
      v22 = *a3;
      *((_QWORD *)v21 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    v23 = &v14[24 * v13];
    v25 = (char *)*a1;
    v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        v26 = *(_OWORD *)(v24 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
      operator delete(v24);
  }
}

char *std::vector<geo::math::Matrix<unsigned int,3,1>>::__assign_with_size[abi:nn180100]<geo::math::Matrix<unsigned int,3,1>*,geo::math::Matrix<unsigned int,3,1>*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    result = std::vector<geo::math::Matrix<unsigned int,3,1>>::__vallocate[abi:nn180100](v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

char *std::vector<geo::math::Matrix<unsigned int,3,1>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geo::math::Matrix<unsigned int,3,1>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void geo::math::ConstrainedDelaunayTriangulationMesherDetails::~ConstrainedDelaunayTriangulationMesherDetails(geo::math::ConstrainedDelaunayTriangulationMesherDetails *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 352);
  v8 = (void **)((char *)this + 328);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v8);
  v8 = (void **)((char *)this + 304);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v8);
  v8 = (void **)((char *)this + 280);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v8);
  v8 = (void **)((char *)this + 256);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v8);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 216);
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v8 = (void **)((char *)this + 168);
  std::vector<std::vector<unsigned int>>::__destroy_vector::operator()[abi:nn180100](&v8);
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 128);
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
}

uint64_t re::buildPyramid(uint64_t a1, unsigned __int16 *a2)
{
  float v2;
  float v3;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  unsigned int v19;
  unsigned int v20;
  float32_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  unsigned int v34;
  uint64_t v35;
  float32x4_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  BOOL v45;
  float v46;
  __n128 v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int32x4_t v71;
  float32x2_t v72;
  float32x2_t v73;
  float32x4_t v74;
  int32x4_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x4_t v78;
  uint64_t v79;
  float32x4_t *v80;
  float32x4_t *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  re::internal *v91;
  re::GeomMesh *v92;
  uint64_t result;
  uint64_t v94;
  int v95;
  unsigned int v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  uint64_t v105;
  _QWORD v106[4];
  uint64_t v107;
  _BYTE v108[112];
  unsigned int v109;
  uint64_t v110;
  uint64_t *v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  int v116;
  const char *v117;
  __int16 v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v105);
  LODWORD(v6) = *a2;
  if (*a2)
  {
    v94 = a1;
    v7 = ((_DWORD)v6 + 1) * ((_DWORD)v6 + 2);
    v8 = v7 >> 1;
    v9 = (_DWORD)v6 * (_DWORD)v6;
    v10 = ((_DWORD)v6 + 1) * ((_DWORD)v6 + 1);
    v11 = v108;
    LODWORD(v105) = v10 + 4 * (v7 >> 1);
    v95 = (_DWORD)v6 + 1;
    v96 = v105;
    v109 = v105;
    if (v110)
    {
      v12 = v111;
      v13 = 8 * v110;
      do
      {
        v14 = *v12++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 72))(v14, v109);
        v13 -= 8;
      }
      while (v13);
    }
    re::DynamicArray<re::GeomCell4>::resize(v106, (5 * v9));
    v112 = 5 * v9;
    if (v113)
    {
      v15 = v114;
      v16 = 8 * v113;
      do
      {
        v17 = *v15++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 72))(v17, v112);
        v16 -= 8;
      }
      while (v16);
    }
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v108, "vertexPosition", 1, 7);
    if (*((_BYTE *)a2 + 16))
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v108, "vertexUV", 1, 6);
    if (*((_BYTE *)a2 + 17))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v108, "vertexNormal", 1, 7);
      if (*((_BYTE *)a2 + 16))
      {
        if (*((_BYTE *)a2 + 17))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v108, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v108, "vertexBitangent", 1, 7);
        }
      }
    }
    v19 = 4 * v8;
    v20 = 4 * v9;
    v21 = *((float *)a2 + 3) * 0.5;
    v22 = vmul_f32(*(float32x2_t *)(a2 + 2), (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v18.f32 = vneg_f32(v22);
    v23 = v18;
    v23.f32[2] = v21;
    v98 = v23;
    v104 = v23;
    v24 = v18;
    v24.i32[0] = v22.i32[0];
    v25 = v24;
    v25.f32[2] = v21;
    v24.f32[2] = -v21;
    v18.f32[2] = -v21;
    v97 = v24;
    v102 = v24;
    v103 = v25;
    v101 = v18;
    LODWORD(v26) = 0;
    HIDWORD(v26) = v22.i32[1];
    v99 = v18;
    v100 = (float32x4_t)v26;
    v27 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v108, "vertexPosition");
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27))
    {
      v28 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v27, 0);
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
    }
    else
    {
      v29 = 0;
      v28 = 0;
    }
    v30 = 0;
    v31 = vsubq_f32(v97, v99);
    v32 = vsubq_f32(v98, v99);
    v33 = (float)v6;
    v34 = v19;
LABEL_25:
    v35 = 0;
    v36 = vaddq_f32(v99, vmulq_n_f32(v32, (float)v30 / v33));
    v37 = v34;
    v38 = v29 - v34;
    if (v29 < v34)
      v38 = 0;
    v39 = v28 + 16 * v34;
    while (v38 != (_DWORD)v35)
    {
      *(float32x4_t *)(v39 + 16 * v35) = vaddq_f32(v36, vmulq_n_f32(v31, (float)v35 / v33));
      if ((_DWORD)v6 + 1 == (_DWORD)++v35)
      {
        v34 = v37 + v35;
        v40 = v30++ == (_DWORD)v6;
        if (!v40)
          goto LABEL_25;
        v98 = v31;
        v99 = v32;
        v41 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v108, "vertexUV");
        if (!v41)
        {
LABEL_51:
          v56 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v108, "vertexNormal");
          v52 = v96;
          if (v56)
          {
            v57 = v56;
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 16))(v56))
              goto LABEL_55;
            v28 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v57, 0);
            v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
LABEL_56:
            if (v52 > v19)
            {
              v59 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99), (int8x16_t)v99, 0xCuLL), vnegq_f32(v98)), v99, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98), (int8x16_t)v98, 0xCuLL));
              v60 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), (int8x16_t)v59, 0xCuLL);
              v61 = (int32x4_t)vmulq_f32(v59, v59);
              v61.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), *(float32x2_t *)v61.i8)).u32[0];
              v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
              v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
              v64 = vmulq_n_f32(v60, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]);
              if (v58 <= v19)
                v65 = v19;
              else
                v65 = v58;
              v66 = (float32x4_t *)(v28 + 16 * v19);
              v67 = v65 - v19;
              v68 = v10;
              do
              {
                if (!v67)
                  goto LABEL_94;
                *v66++ = v64;
                --v67;
                --v68;
              }
              while (v68);
            }
          }
          v65 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v108, "vertexTangent");
          v69 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)v108, "vertexBitangent");
          if (v65)
          {
            v70 = v69;
            if (v69)
            {
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65))
              {
                v28 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v65, 0);
                LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65);
              }
              else
              {
                LODWORD(v11) = 0;
                v28 = 0;
              }
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70))
              {
                v65 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v70, 0);
                v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70);
              }
              else
              {
                v58 = 0;
                v65 = 0;
              }
              if (v52 > v19)
              {
                v71 = (int32x4_t)vmulq_f32(v98, v98);
                v71.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v71, 2), vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v71.i8, 1))).u32[0];
                v72 = vrsqrte_f32((float32x2_t)v71.u32[0]);
                v73 = vmul_f32(v72, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(v72, v72)));
                v74 = vmulq_n_f32(v98, vmul_f32(v73, vrsqrts_f32((float32x2_t)v71.u32[0], vmul_f32(v73, v73))).f32[0]);
                v75 = (int32x4_t)vmulq_f32(v99, v99);
                v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
                v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
                v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
                v78 = vmulq_n_f32(v99, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
                if (v11 <= v19)
                  v79 = v19;
                else
                  v79 = v11;
                v80 = (float32x4_t *)(v65 + 16 * v19);
                v81 = (float32x4_t *)(v28 + 16 * v19);
                if (v58 <= v19)
                  v28 = v19;
                else
                  v28 = v58;
                v82 = v28 - v19;
                v83 = v79 - v19;
                do
                {
                  if (!v83)
                    goto LABEL_95;
                  *v81 = v74;
                  if (!v82)
                  {
LABEL_96:
                    v115 = 0;
                    v127 = 0u;
                    v128 = 0u;
                    v125 = 0u;
                    v126 = 0u;
                    v124 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v116 = 136315906;
                    v117 = "operator[]";
                    v118 = 1024;
                    v119 = 609;
                    v120 = 2048;
                    v121 = v28;
                    v122 = 2048;
                    v123 = v58;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                  }
                  *v80++ = v78;
                  ++v81;
                  --v82;
                  --v83;
                  --v10;
                }
                while (v10);
              }
            }
          }
          v84 = 0;
          v85 = v19 + v95;
          v11 = (_BYTE *)v106[2];
          while (1)
          {
            v86 = v107;
            v87 = (int)v6;
            do
            {
              v58 = v20;
              if ((unint64_t)v11 <= v20)
              {
                v115 = 0;
                v127 = 0u;
                v128 = 0u;
                v125 = 0u;
                v126 = 0u;
                v124 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v116 = 136315906;
                v117 = "operator[]";
                v118 = 1024;
                v119 = 789;
                v120 = 2048;
                v121 = v20;
                v122 = 2048;
                v123 = (unint64_t)v11;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_94:
                v115 = 0;
                v127 = 0u;
                v128 = 0u;
                v125 = 0u;
                v126 = 0u;
                v124 = 0u;
                v79 = MEMORY[0x24BDACB70];
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v116 = 136315906;
                v117 = "operator[]";
                v118 = 1024;
                v119 = 609;
                v120 = 2048;
                v121 = v65;
                v122 = 2048;
                v123 = v58;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_95:
                v115 = 0;
                v127 = 0u;
                v128 = 0u;
                v125 = 0u;
                v126 = 0u;
                v124 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v116 = 136315906;
                v117 = "operator[]";
                v118 = 1024;
                v119 = 609;
                v120 = 2048;
                v121 = v79;
                v122 = 2048;
                v123 = v11;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_96;
              }
              v88 = v85 + 1;
              v89 = v19 + 1;
              v90 = (unsigned int *)(v86 + 16 * v20);
              *v90 = v19;
              v90[1] = v19 + 1;
              v90[2] = v85 + 1;
              v90[3] = v85;
              ++v20;
              ++v85;
              ++v19;
              --v87;
            }
            while (v87);
            v19 = v89 + 1;
            v85 = v88 + 1;
            if (++v84 == (_DWORD)v6)
            {
              v91 = (re::internal *)re::GeomMesh::operator=(v94, &v105);
              if (*((_BYTE *)a2 + 18))
                re::internal::mergeVertexPositions(v91, v92);
              goto LABEL_89;
            }
          }
        }
        v42 = v41;
        v43 = vmulq_f32(v98, v98);
        v47 = (__n128)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1)));
        v47.n128_f32[0] = sqrtf(v47.n128_f32[0]);
        v44 = vmulq_f32(v99, v99);
        v44.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0]);
        v45 = v47.n128_f32[0] <= v44.f32[0];
        v46 = v47.n128_f32[0] / v44.f32[0];
        v47.n128_f32[0] = v44.f32[0] / v47.n128_f32[0];
        if (v45)
          v2 = v46;
        else
          v2 = 1.0;
        if (v45)
          v3 = 1.0;
        else
          v3 = v47.n128_f32[0];
        if ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v41 + 16))(v41, v47))
        {
          v28 = re::internal::GeomTypedAttribute<double>::operator[](v42, 0);
          v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
LABEL_43:
          v49 = 0;
          v50 = v19;
          while (1)
          {
            v51 = 0;
            v52 = v50;
            v53 = v48 - v50;
            if (v48 < v50)
              v53 = 0;
            v54 = v28 + 8 * v50;
            do
            {
              if (v53 == (_DWORD)v51)
              {
                v115 = 0;
                v127 = 0u;
                v128 = 0u;
                v125 = 0u;
                v126 = 0u;
                v124 = 0u;
                a2 = (unsigned __int16 *)MEMORY[0x24BDACB70];
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v116 = 136315906;
                v117 = "operator[]";
                v118 = 1024;
                v119 = 609;
                v120 = 2048;
                v121 = v52 + v51;
                v122 = 2048;
                v123 = v48;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_55:
                v58 = 0;
                v28 = 0;
                goto LABEL_56;
              }
              *(float *)&v55 = v2 * (float)((float)v51 / v33);
              *((float *)&v55 + 1) = v3 * (float)((float)v49 / v33);
              *(_QWORD *)(v54 + 8 * v51++) = v55;
            }
            while ((_DWORD)v6 + 1 != (_DWORD)v51);
            v50 = v52 + v51;
            v40 = v49++ == (_DWORD)v6;
            if (v40)
              goto LABEL_51;
          }
        }
LABEL_42:
        v48 = 0;
        v28 = 0;
        goto LABEL_43;
      }
    }
    v115 = 0;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v124 = 0u;
    a2 = (unsigned __int16 *)MEMORY[0x24BDACB70];
    v6 = &v116;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 609;
    v120 = 2048;
    v121 = v37 + v35;
    v122 = 2048;
    v123 = v29;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_42;
  }
  re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v108, "vertexPosition", 1, 7);
  if (*((_BYTE *)a2 + 16))
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v108, "vertexUV", 1, 6);
  if (*((_BYTE *)a2 + 17))
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v108, "vertexNormal", 1, 7);
    if (*((_BYTE *)a2 + 16))
    {
      if (*((_BYTE *)a2 + 17))
      {
        re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v108, "vertexTangent", 1, 7);
        re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v108, "vertexBitangent", 1, 7);
      }
    }
  }
  re::GeomMesh::operator=(a1, &v105);
LABEL_89:
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v108);
  result = v106[0];
  if (v106[0])
  {
    if (v107)
      return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v106[0] + 40))(v106[0], v107);
  }
  return result;
}

unsigned int *re::`anonymous namespace'::populatePyramidSideHelper(unsigned int a1, unsigned int a2, unsigned int a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, int a7, _QWORD *a8)
{
  float32x4_t *v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  unsigned int v22;
  float v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x2_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v40;
  float32x2_t v41;
  unsigned int v42;
  int8x8_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x2_t v46;
  unsigned int v47;
  unsigned int v48;
  int8x8_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  unsigned int v55;
  float v56;
  float32x2_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *result;
  uint64_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  unsigned int v66;
  int32x4_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  int32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float32x2_t v87;
  float32x2_t v88;
  float32x4_t v89;
  uint64_t v90;
  float32x4_t *v91;
  float32x4_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned __int32 v97;
  unint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned __int32 v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  unsigned int *v106;
  unint64_t v107;
  unsigned int *v108;
  int8x8_t v109;
  int8x8_t v110;
  float32x4_t v113;
  int8x8_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  re::internal::GeomAttributeManager *v119;

  v10 = a4;
  v115 = *a4;
  v118 = *a5;
  v113 = *a6;
  v119 = (re::internal::GeomAttributeManager *)(a8 + 6);
  v14 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(a8 + 6), "vertexPosition");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14))
  {
    v15 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v14, 0);
    v16 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v17 = a2;
  if (a1)
  {
    v18 = 0;
    v19 = vsubq_f32(*a6, *a5);
    v20 = vsubq_f32(*a6, *v10);
    v21 = vsubq_f32(*a5, *v10);
    v22 = a1 - 1;
    v17 = a2;
LABEL_6:
    v23 = (float)v18 / (float)a1;
    if (v17 >= v16)
      goto LABEL_82;
    v24 = vaddq_f32(*v10, vmulq_n_f32(v20, v23));
    *(float32x4_t *)(v15 + 16 * v17) = v24;
    if (a1 - v18 < 2)
      goto LABEL_12;
    v25 = 0;
    while (1 - v16 + v17 + v25)
    {
      v26 = v25 + 1;
      *(float32x4_t *)(v15 + 16 + 16 * v17 + 16 * v25) = vaddq_f32(v24, vmulq_n_f32(v21, (float)(1.0 - v23)* (float)((float)(v25 + 1) / (float)(a1 - v18))));
      v25 = v26;
      if (v22 == (_DWORD)v26)
      {
        v17 += v26;
LABEL_12:
        if (v17 + 1 >= v16)
          goto LABEL_83;
        *(float32x4_t *)(v15 + 16 * (v17 + 1)) = vaddq_f32(vmulq_n_f32(v19, v23), *a5);
        v17 += 2;
        ++v18;
        --v22;
        if (v18 == a1)
          goto LABEL_14;
        goto LABEL_6;
      }
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_53;
  }
LABEL_14:
  if (v17 >= v16)
  {
LABEL_90:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_91:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v27 = vsubq_f32(v118, v115);
  v116 = vsubq_f32(v113, v115);
  v118 = v27;
  *(float32x4_t *)(v15 + 16 * v17) = *a6;
  v28 = re::internal::GeomAttributeManager::attributeByName(v119, "vertexUV");
  if (v28)
  {
    v29 = v28;
    v30 = vmulq_f32(v118, v118);
    v31 = (float32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).u64[0];
    v31.f32[0] = sqrtf(v31.f32[0]);
    v32 = vmulq_f32(v116, vdivq_f32(v118, (float32x4_t)vdupq_lane_s32((int32x2_t)v31, 0)));
    v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1);
    LODWORD(_S2) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, v33)).u32[0];
    __asm { FMLS            S1, S2, V2.S[0] }
    v40 = sqrtf(_S1);
    if (v31.f32[0] <= v40)
      v33.f32[0] = v40;
    else
      v33.f32[0] = v31.f32[0];
    v31.f32[1] = v40;
    v41 = vdiv_f32(v31, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.f32, 0));
    v109 = (int8x8_t)v41;
    v41.f32[0] = _S2 / v33.f32[0];
    v114 = (int8x8_t)v41;
    v41.i32[1] = 0;
    v110 = (int8x8_t)v41;
    if (a7)
      v42 = -1;
    else
      v42 = 0;
    v43 = (int8x8_t)vdup_n_s32(v42);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28))
    {
      v44 = re::internal::GeomTypedAttribute<double>::operator[](v29, 0);
      v45 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
    }
    else
    {
      v45 = 0;
      v44 = 0;
    }
    v46 = (float32x2_t)vbsl_s8(v43, v110, v114);
    v47 = a2;
    if (a1)
    {
      v48 = 0;
      v49.i32[1] = v109.i32[1];
      v49.i32[0] = 0;
      v50 = (float32x2_t)vbsl_s8(v43, v49, (int8x8_t)v109.u32[0]);
      v51 = (float32x2_t)vand_s8(v109, v43);
      v52 = vsub_f32(v50, v51);
      v53 = vsub_f32(v46, v51);
      v54 = vsub_f32(v46, v50);
      v55 = a1 - 1;
      v47 = a2;
      while (1)
      {
        v56 = (float)v48 / (float)a1;
        if (v47 >= v45)
          break;
        v57 = vadd_f32(v51, vmul_n_f32(v53, v56));
        *(float32x2_t *)(v44 + 8 * v47) = v57;
        if (a1 - v48 >= 2)
        {
          v58 = 0;
          do
          {
            if (!(1 - v45 + v47 + v58))
              goto LABEL_81;
            v59 = v58 + 1;
            *(float32x2_t *)(v44 + 8 + 8 * v47 + 8 * v58) = vadd_f32(v57, vmul_n_f32(v52, (float)(1.0 - v56)* (float)((float)(v58 + 1)/ (float)(a1 - v48))));
            v58 = v59;
          }
          while (v55 != (_DWORD)v59);
          v47 += v59;
        }
        if (v47 + 1 >= v45)
          goto LABEL_86;
        *(float32x2_t *)(v44 + 8 * (v47 + 1)) = vadd_f32(v50, vmul_n_f32(v54, v56));
        v47 += 2;
        ++v48;
        --v55;
        if (v48 == a1)
          goto LABEL_35;
      }
LABEL_85:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_86:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_87;
    }
LABEL_35:
    if (v47 >= v45)
      goto LABEL_91;
    *(float32x2_t *)(v44 + 8 * v47) = v46;
  }
  v113.i32[0] = a1 + 1;
  result = (unsigned int *)re::internal::GeomAttributeManager::attributeByName(v119, "vertexNormal");
  if (result)
  {
    v61 = (uint64_t)result;
    LODWORD(v15) = (v113.i32[0] * (a1 + 2)) >> 1;
    v62 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v116, (int32x4_t)v116), (int8x16_t)v116, 0xCuLL), vnegq_f32(v118)), v116, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), (int8x16_t)v118, 0xCuLL));
    v63 = (int32x4_t)vmulq_f32(v62, v62);
    v63.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), *(float32x2_t *)v63.i8)).u32[0];
    v64 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), (int8x16_t)v62, 0xCuLL);
    *(float32x2_t *)v62.f32 = vrsqrte_f32((float32x2_t)v63.u32[0]);
    *(float32x2_t *)v62.f32 = vmul_f32(*(float32x2_t *)v62.f32, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32)));
    v117 = vmulq_n_f32(v64, vmul_f32(*(float32x2_t *)v62.f32, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v62.f32))).f32[0]);
    LODWORD(v10) = v15 + a2;
    if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)result + 16))(result))
    {
      v65 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v61, 0);
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 16))(v61);
    }
    else
    {
      v66 = 0;
      v65 = 0;
    }
    v67 = (int32x4_t)vmulq_f32(v117, v117);
    v67.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v67, 2), vadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1))).u32[0];
    v68 = vrsqrte_f32((float32x2_t)v67.u32[0]);
    v69 = vmul_f32(v68, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v68, v68)));
    v70 = vmulq_n_f32(v117, vmul_f32(v69, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v69, v69))).f32[0]);
    if (v10 > a2)
    {
      if (v66 <= a2)
        v71 = a2;
      else
        v71 = v66;
      v72 = (float32x4_t *)(v65 + 16 * a2);
      v73 = v71 - a2;
      v74 = (v113.i32[0] * (a1 + 2)) >> 1;
      while (v73)
      {
        *v72++ = v70;
        --v73;
        if (!--v74)
          goto LABEL_48;
      }
LABEL_87:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_88:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_89:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_90;
    }
LABEL_48:
    v115 = v70;
    v75 = re::internal::GeomAttributeManager::attributeByName(v119, "vertexTangent");
    result = (unsigned int *)re::internal::GeomAttributeManager::attributeByName(v119, "vertexBitangent");
    if (v75)
    {
      v16 = (uint64_t)result;
      if (result)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75))
        {
          v76 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v75, 0);
          v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75);
          goto LABEL_54;
        }
LABEL_53:
        v77 = 0;
        v76 = 0;
LABEL_54:
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        if ((_DWORD)result)
        {
          v78 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v16, 0);
          result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
          v79 = result;
        }
        else
        {
          v79 = 0;
          v78 = 0;
        }
        if (v10 > a2)
        {
          v80 = (int32x4_t)vmulq_f32(v118, v118);
          v80.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v80, 2), vadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1))).u32[0];
          v81 = vrsqrte_f32((float32x2_t)v80.u32[0]);
          v82 = vmul_f32(v81, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v81, v81)));
          v83 = vmulq_n_f32(v118, vmul_f32(v82, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v82, v82))).f32[0]);
          v84 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), vnegq_f32(v115)), v83, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v115, (int32x4_t)v115), (int8x16_t)v115, 0xCuLL));
          v85 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v84, (int32x4_t)v84), (int8x16_t)v84, 0xCuLL);
          v86 = (int32x4_t)vmulq_f32(v84, v84);
          v86.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v86.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v86, 2), *(float32x2_t *)v86.i8)).u32[0];
          v87 = vrsqrte_f32((float32x2_t)v86.u32[0]);
          v88 = vmul_f32(v87, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(v87, v87)));
          v89 = vmulq_n_f32(v85, vmul_f32(v88, vrsqrts_f32((float32x2_t)v86.u32[0], vmul_f32(v88, v88))).f32[0]);
          if (v77 <= a2)
            v90 = a2;
          else
            v90 = v77;
          v91 = (float32x4_t *)(v78 + 16 * a2);
          v92 = (float32x4_t *)(v76 + 16 * a2);
          if (v79 <= a2)
            v93 = a2;
          else
            v93 = v79;
          v94 = v93 - a2;
          v95 = v90 - a2;
          while (v95)
          {
            *v92 = v83;
            if (!v94)
              goto LABEL_89;
            *v91++ = v89;
            ++v92;
            --v94;
            --v95;
            LODWORD(v15) = v15 - 1;
            if (!(_DWORD)v15)
              goto LABEL_68;
          }
          goto LABEL_88;
        }
      }
    }
  }
LABEL_68:
  if (a1)
  {
    v96 = 0;
    v97 = v113.i32[0] + a2;
    v98 = a8[3];
    v99 = a8[5];
    v100 = a1;
    while (~v96 == -a1)
    {
      v101 = a2;
      v102 = v97;
LABEL_76:
      if (v98 <= a3)
        goto LABEL_84;
      --v100;
      v108 = (unsigned int *)(v99 + 16 * a3);
      *v108 = v101;
      v108[1] = v101 + 1;
      v108[2] = v102;
      v108[3] = -1;
      ++a3;
      v97 = v102 + 1;
      a2 = v101 + 2;
      if (++v96 == a1)
        return result;
    }
    v103 = a8[5];
    v104 = 1;
    while (1)
    {
      v105 = a3;
      if (v98 <= a3)
        break;
      v101 = a2 + 1;
      v106 = (unsigned int *)(v103 + 16 * a3);
      *v106 = a2;
      v106[1] = a2 + 1;
      v106[2] = v97;
      v106[3] = -1;
      v107 = a3 + 1;
      if (v98 <= v107)
        goto LABEL_80;
      v102 = v97 + 1;
      result = (unsigned int *)(v103 + 16 * v107);
      *result = v101;
      result[1] = v97 + 1;
      result[2] = v97;
      result[3] = -1;
      a3 = v105 + 2;
      ++v104;
      ++v97;
      ++a2;
      if (v100 == v104)
        goto LABEL_76;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_80:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_81:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_82:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_83:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_84:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_85;
  }
  return result;
}

void re::buildPyramid(re::GeomMesh *a1, __int128 *a2)
{
  re::GeomAttribute *v4;
  re::GeomAttribute *v5;
  __int128 v6;
  int v7;

  if (*((_BYTE *)a2 + 18))
  {
    v7 = *((_DWORD *)a2 + 4);
    v6 = *a2;
    BYTE2(v7) = 0;
    re::buildPyramid(a1, &v6);
  }
  else
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)&v6, 0);
    re::buildPyramid((uint64_t)&v6, (unsigned __int16 *)a2);
    if (*(_WORD *)a2)
    {
    }
    else
    {
      re::DynamicArray<re::GeomMesh>::clear(a1, v4);
      re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 5uLL, (re::GeomMesh *)&v6);
    }
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v6, v5);
  }
}

uint64_t re::`anonymous namespace'::splitMeshIntoEqualSizedSubmeshes(unint64_t a1, re::GeomAttribute *a2, re::GeomMesh *a3)
{
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::GeomAttribute *v13;
  uint64_t result;
  uint64_t v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  unint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD v21[3];
  int v22;
  uint64_t v23;
  _QWORD v24[3];
  int v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[46];
  _BYTE v29[12];
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  _OWORD v36[5];
  uint64_t v37;

  v4 = a2;
  v37 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v23 = 0;
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  v20 = 0;
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  v17[1] = 0;
  v18 = 0;
  v17[0] = 0;
  v19 = 0;
  re::DynamicArray<re::GeomMesh>::clear(a3, a2);
  re::DynamicArray<re::GeomMesh>::resize((uint64_t)a3, v4);
  v6 = *(_DWORD *)(a1 + 40);
  v7 = v6 / v4;
  re::DynamicArray<float>::resize((uint64_t)v17, v6 / v4);
  v8 = 0;
  if (v7 <= 1)
    v9 = 1;
  else
    v9 = v7;
  do
  {
    v10 = v18;
    if (v4 <= v6)
    {
      v11 = 0;
      v12 = v20;
      while (v10 != v11)
      {
        *(_DWORD *)(v12 + 4 * v11) = v7 * v8 + v11;
        if (v9 == ++v11)
          goto LABEL_9;
      }
      *(_QWORD *)v29 = 0;
      memset(v28, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v36[0]) = 136315906;
      *(_QWORD *)((char *)v36 + 4) = "operator[]";
      WORD6(v36[0]) = 1024;
      *(_DWORD *)((char *)v36 + 14) = 789;
      WORD1(v36[1]) = 2048;
      *(_QWORD *)((char *)&v36[1] + 4) = v10;
      WORD6(v36[1]) = 2048;
      *(_QWORD *)((char *)&v36[1] + 14) = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_22:
      v27 = 0;
      memset(v36, 0, sizeof(v36));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v29 = 136315906;
      *(_QWORD *)&v29[4] = "operator[]";
      v30 = 1024;
      v31 = 789;
      v32 = 2048;
      v33 = v8;
      v34 = 2048;
      v35 = v10;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_9:
    v16[0] = v20;
    v16[1] = v10;
    v15[0] = 0;
    v15[1] = 0;
    re::makeMeshFromFaces(a1, v16, v15, (uint64_t)v24, (uint64_t)v21, (unint64_t)v28);
    v10 = *((_QWORD *)a3 + 2);
    if (v10 <= v8)
      goto LABEL_22;
    re::GeomMesh::operator=((uint64_t *)(*((_QWORD *)a3 + 4) + 736 * v8), (uint64_t *)v28);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)v28, v13);
    ++v8;
  }
  while (v8 != v4);
  if (v17[0] && v20)
    (*(void (**)(void))(*(_QWORD *)v17[0] + 40))();
  if (v21[0] && v23)
    (*(void (**)(void))(*(_QWORD *)v21[0] + 40))();
  result = v24[0];
  if (v24[0])
  {
    if (v26)
      return (*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 40))();
  }
  return result;
}

uint64_t re::buildTetrahedron(re::internal *a1, unsigned __int16 *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  double v15;
  float64x2_t v16;
  __int32 v17;
  float32x4_t v18;
  int32x4_t v19;
  float32_t v20;
  re::GeomMesh *v21;
  uint64_t result;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  _QWORD v28[5];
  _BYTE v29[112];
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;

  re::internal::GeomBaseMesh::GeomBaseMesh((re::internal::GeomBaseMesh *)&v27);
  v4 = *a2;
  if (*a2)
  {
    v5 = v4 + 2 + (v4 + 2) * v4;
    v6 = v4 * v4;
    LODWORD(v27) = 4 * (v5 >> 1);
    v30 = v27;
    if (v31)
    {
      v7 = v32;
      v8 = 8 * v31;
      do
      {
        v9 = *v7++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 72))(v9, v30);
        v8 -= 8;
      }
      while (v8);
    }
    re::DynamicArray<re::GeomCell4>::resize(v28, (4 * v6));
    v33 = 4 * v6;
    if (v34)
    {
      v10 = v35;
      v11 = 8 * v34;
      do
      {
        v12 = *v10++;
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 72))(v12, v33);
        v11 -= 8;
      }
      while (v11);
    }
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexPosition", 1, 7);
    if (*((_BYTE *)a2 + 8))
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexUV", 1, 6);
    if (*((_BYTE *)a2 + 9))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexNormal", 1, 7);
      if (*((_BYTE *)a2 + 8))
      {
        if (*((_BYTE *)a2 + 9))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexBitangent", 1, 7);
        }
      }
    }
    v13.i32[0] = *((_DWORD *)a2 + 1);
    *(float *)v14.i32 = *(float *)v13.i32 * -0.5;
    v15 = *(float *)v13.i32;
    v16 = vmulq_n_f64((float64x2_t)xmmword_226132740, *(float *)v13.i32);
    *(float32x2_t *)&v16.f64[0] = vcvt_f32_f64(v16);
    *(float *)v13.i32 = *(float *)v13.i32 * 0.5;
    v25 = vextq_s8(vextq_s8(v13, v13, 4uLL), (int8x16_t)v16, 0xCuLL);
    v26 = vextq_s8(vextq_s8(v14, v14, 4uLL), (int8x16_t)v16, 0xCuLL);
    *(float *)&v17 = v15 * -0.433013;
    v18.i32[0] = 0;
    v19 = vzip1q_s32((int32x4_t)0, (int32x4_t)v16);
    v19.i32[2] = v17;
    v24 = (float32x4_t)v19;
    v20 = v15 * 0.408248;
    *(float *)&v15 = v15 * 0.144338;
    v18.f32[1] = v20;
    v18.i64[1] = LODWORD(v15);
    v23 = v18;
    re::GeomMesh::operator=((uint64_t)a1, &v27);
    if (*((_BYTE *)a2 + 10))
      re::internal::mergeVertexPositions(a1, v21);
  }
  else
  {
    re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexPosition", 1, 7);
    if (*((_BYTE *)a2 + 8))
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexUV", 1, 6);
    if (*((_BYTE *)a2 + 9))
    {
      re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexNormal", 1, 7);
      if (*((_BYTE *)a2 + 8))
      {
        if (*((_BYTE *)a2 + 9))
        {
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexTangent", 1, 7);
          re::internal::GeomAttributeManager::addAttribute((re::internal::GeomAttributeManager *)v29, "vertexBitangent", 1, 7);
        }
      }
    }
    re::GeomMesh::operator=((uint64_t)a1, &v27);
  }
  re::internal::GeomAttributeManager::~GeomAttributeManager((re::internal::GeomAttributeManager *)v29);
  result = v28[0];
  if (v28[0])
  {
    if (v28[4])
      return (*(uint64_t (**)(void))(*(_QWORD *)v28[0] + 40))();
  }
  return result;
}

void re::buildTetrahedron(re::GeomMesh *a1, uint64_t *a2)
{
  re::GeomAttribute *v4;
  uint64_t v5;
  int v6;

  if (*((_BYTE *)a2 + 10))
  {
    v6 = *((_DWORD *)a2 + 2);
    v5 = *a2;
    BYTE2(v6) = 0;
    re::buildTetrahedron(a1, &v5);
  }
  else
  {
    re::GeomMesh::GeomMesh((re::GeomMesh *)&v5, 0);
    re::buildTetrahedron((re::internal *)&v5, (unsigned __int16 *)a2);
    if (*(_WORD *)a2)
    else
      re::DynamicArray<re::GeomMesh>::resize((uint64_t)a1, 4uLL, (re::GeomMesh *)&v5);
    re::GeomMesh::~GeomMesh((re::GeomMesh *)&v5, v4);
  }
}

uint64_t *re::geometryLogObjects(re *this)
{
  unsigned __int8 v1;

  {
    re::geometryLogObjects(void)::logObjects = (uint64_t)os_log_create("com.apple.re", "Geometry");
  }
  return &re::geometryLogObjects(void)::logObjects;
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeContainer::GeomAttributeContainer(re::internal::GeomAttributeContainer *this)
{
  _QWORD *v2;
  _anonymous_namespace_ *v3;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 4;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)((char *)this + 8);
  v3 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(v2, 1uLL);
  ++*((_DWORD *)this + 8);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

uint64_t re::internal::GeomAttributeContainer::GeomAttributeContainer(uint64_t a1, char a2)
{
  _QWORD *v3;
  _anonymous_namespace_ *v4;

  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 4) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  v4 = (_anonymous_namespace_ *)re::DynamicArray<float *>::setCapacity(v3, 1uLL);
  ++*(_DWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return a1;
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeContainer::copy(re::internal::GeomAttributeContainer *this, re::internal::GeomAttributeContainer *a2)
{
  re::internal::GeomAttributeContainer *v3;
  const re::GeomAttribute *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t Attribute;
  unsigned int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  _OWORD v21[5];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (this != a2)
  {
    v3 = this;
    this = (re::internal::GeomAttributeContainer *)re::internal::GeomAttributeContainer::clearAttributes(a2, a2);
    *(_DWORD *)a2 = *(_DWORD *)v3;
    *((_BYTE *)a2 + 4) = *((_BYTE *)v3 + 4);
    v5 = *((_QWORD *)v3 + 3);
    v11 = 0;
    if (v5)
    {
      v6 = 0;
      v7 = (_QWORD *)((char *)a2 + 8);
      v8 = (uint64_t *)((char *)a2 + 48);
      do
      {
        Attribute = 0;
        v9 = *((_QWORD *)v3 + 3);
        if (v9 <= v6)
        {
          v12 = 0;
          memset(v21, 0, sizeof(v21));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v13 = 136315906;
          v14 = "operator[]";
          v15 = 1024;
          v16 = 797;
          v17 = 2048;
          v18 = v6;
          v19 = 2048;
          v20 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        Attribute = re::GeomAttribute::createAttribute(*(re::GeomAttribute **)(*((_QWORD *)v3 + 5) + 8 * v6), v4);
        re::DynamicArray<re::TransitionCondition *>::add(v7, &Attribute);
        *(_QWORD *)&v21[0] = *(_QWORD *)(Attribute + 8);
        this = (re::internal::GeomAttributeContainer *)re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(v8, (char **)v21, (int *)&v11);
        v6 = ++v11;
      }
      while (v5 > v11);
    }
  }
  return this;
}

_QWORD *re::internal::GeomAttributeContainer::clearAttributes(_QWORD *this, re::GeomAttribute *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;

  v2 = this;
  v3 = this[3];
  if (v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      this = *(_QWORD **)(v2[5] + 8 * v4);
      if (this)
      {
        this = (_QWORD *)re::GeomAttribute::freeAttribute((re::GeomAttribute *)this, a2);
        v3 = v2[3];
      }
      v4 = v5;
    }
    while (v3 > v5++);
  }
  v2[11] = 0;
  v2[12] = 0;
  v7 = v2[8];
  v2[9] = 0;
  v2[10] = v7;
  if (v7 >= 0x10)
  {
    v8 = 0;
    *(_QWORD *)&v9 = -1;
    *((_QWORD *)&v9 + 1) = -1;
    do
      *(_OWORD *)(v2[6] + 16 * v8++) = v9;
    while (v8 < v2[8] >> 4);
  }
  v2[3] = 0;
  ++*((_DWORD *)v2 + 8);
  return this;
}

void re::internal::GeomAttributeContainer::~GeomAttributeContainer(re::internal::GeomAttributeContainer *this, re::GeomAttribute *a2)
{
  double v3;
  uint64_t v4;

  re::internal::GeomAttributeContainer::clearAttributes(this, a2);
  v3 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 48);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 5))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v4 + 40))(v4, v3);
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 1) = 0;
    ++*((_DWORD *)this + 8);
  }
}

uint64_t re::internal::GeomAttributeContainer::attributeByIndex(re::internal::GeomAttributeContainer *this, unsigned int a2)
{
  if (*((_QWORD *)this + 3) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 5) + 8 * a2);
}

{
  if (*((_QWORD *)this + 3) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 5) + 8 * a2);
}

uint64_t re::internal::GeomAttributeContainer::attributeByName(re::internal::GeomAttributeContainer *this, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v7[2];
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v7[0] = a2;
  v3 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 6, v7);
  if (v3 == -1)
    return 0;
  v4 = *(unsigned int *)(*((_QWORD *)this + 7) + 16 * v3 + 8);
  v5 = *((_QWORD *)this + 3);
  if (v5 <= v4)
  {
    v7[1] = 0;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v16 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v8 = 136315906;
    v9 = "operator[]";
    v10 = 1024;
    v11 = 789;
    v12 = 2048;
    v13 = v4;
    v14 = 2048;
    v15 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v4);
}

uint64_t re::internal::GeomAttributeContainer::reorder(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  int v8;
  uint64_t v9;

  v9 = 0;
  memset(v7, 0, sizeof(v7));
  v8 = 0;
  v2 = *(_QWORD *)(result + 24);
  if (v2)
  {
    v4 = *(uint64_t **)(result + 40);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      re::DynamicArray<float>::operator=((uint64_t)v7, a2);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 48))(v6, v7);
      v5 -= 8;
    }
    while (v5);
    result = v7[0];
    if (v7[0])
    {
      if (v9)
        return (*(uint64_t (**)(void))(*(_QWORD *)v7[0] + 40))();
    }
  }
  return result;
}

uint64_t re::internal::GeomAttributeContainer::addAttribute(uint64_t *a1, char *a2, int a3)
{
  uint64_t result;
  char *v7;
  int v8;
  uint64_t Attribute;

  result = re::internal::GeomAttributeContainer::attributeByName((re::internal::GeomAttributeContainer *)a1, a2);
  if (result)
  {
    if (*(unsigned __int8 *)(result + 17) != a3)
      return 0;
  }
  else
  {
    Attribute = re::GeomAttribute::createAttribute((re *)a2, *((unsigned __int8 *)a1 + 4), a3, *(unsigned int *)a1);
    v8 = a1[3];
    re::DynamicArray<re::TransitionCondition *>::add(a1 + 1, &Attribute);
    v7 = *(char **)(Attribute + 8);
    re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(a1 + 6, &v7, &v8);
    return Attribute;
  }
  return result;
}

re::GeomAttribute *re::internal::GeomAttributeContainer::addAttribute(re::internal::GeomAttributeContainer *this, re::GeomAttribute *a2)
{
  char *v3;
  uint64_t *v4;
  int v6;
  re::GeomAttribute *v7;
  char *v8;

  v3 = (char *)*((_QWORD *)a2 + 1);
  v7 = a2;
  v8 = v3;
  v4 = (uint64_t *)((char *)this + 48);
  if (re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 6, &v8) != -1)return 0;
  v6 = *((_QWORD *)this + 3);
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)this + 1, &v7);
  v8 = (char *)*((_QWORD *)v7 + 1);
  re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addNew(v4, &v8, &v6);
  return v7;
}

BOOL re::internal::GeomAttributeContainer::deleteAttribute(re::internal::GeomAttributeContainer *this, char *a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  re::GeomAttribute *v8;
  unint64_t v9;
  int *v10;
  unsigned int v11;
  unint64_t v12;
  char *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v14 = a2;
  v4 = (uint64_t *)((char *)this + 48);
  v5 = re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::find((uint64_t *)this + 6, &v14);
  v6 = v5;
  if (v5 != -1)
  {
    v7 = *((_QWORD *)this + 7) + 16 * v5;
    re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::remove(v4, &v14);
    v11 = *(_DWORD *)(v7 + 8);
    v10 = (int *)(v7 + 8);
    v9 = v11;
    v12 = *((_QWORD *)this + 3);
    if (v12 <= v11)
    {
      v15 = 0;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v16 = 136315906;
      v17 = "operator[]";
      v18 = 1024;
      v19 = 789;
      v20 = 2048;
      v21 = v9;
      v22 = 2048;
      v23 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      re::GeomAttribute::freeAttribute(*(re::GeomAttribute **)(*((_QWORD *)this + 5) + 8 * v9), v8);
      v2 = *((_QWORD *)this + 3);
      v12 = *v10;
      v9 = v2 - 1;
      if (v2 - 1 <= v12)
      {
LABEL_7:
        re::DynamicArray<double>::resize((uint64_t)this + 8, v2 - 1);
        return v6 != -1;
      }
      if (v2)
      {
        if (v2 > v12)
        {
          *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v12) = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v9);
          *(_QWORD *)&v24 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v12) + 8);
          re::HashBrown<char const*,unsigned int,re::internal::HashName,re::internal::HashName,void,false>::addOrReplace(v4, (char **)&v24, v10);
          goto LABEL_7;
        }
LABEL_11:
        v15 = 0;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v16 = 136315906;
        v17 = "operator[]";
        v18 = 1024;
        v19 = 789;
        v20 = 2048;
        v21 = v12;
        v22 = 2048;
        v23 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    v15 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v16 = 136315906;
    v17 = "operator[]";
    v18 = 1024;
    v19 = 789;
    v20 = 2048;
    v21 = v9;
    v22 = 2048;
    v23 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  return v6 != -1;
}

re::internal::GeomAttributeContainer *re::internal::GeomAttributeContainer::operator=(re::internal::GeomAttributeContainer *this, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;

  if (this != (re::internal::GeomAttributeContainer *)a2)
  {
    re::internal::GeomAttributeContainer::clearAttributes(this, (re::GeomAttribute *)a2);
    *((_BYTE *)this + 4) = *(_BYTE *)(a2 + 4);
    *(_DWORD *)this = *(_DWORD *)a2;
    re::DynamicArray<re::GeomAttribute *>::operator=((uint64_t)this + 8, a2 + 8);
    re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)this + 6, (uint64_t *)(a2 + 48));
    *(_BYTE *)(a2 + 4) = 4;
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 24) = 0;
    ++*(_DWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    v4 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = v4;
    if (v4 >= 0x10)
    {
      v5 = 0;
      *(_QWORD *)&v6 = -1;
      *((_QWORD *)&v6 + 1) = -1;
      do
        *(_OWORD *)(*(_QWORD *)(a2 + 48) + 16 * v5++) = v6;
      while (v5 < *(_QWORD *)(a2 + 64) >> 4);
    }
  }
  return this;
}

uint64_t re::intersectAABBs(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  float32x4_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t i;
  float32x4_t *v20;
  float32x4_t *v21;
  unint64_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  int v46;
  uint32x4_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  unint64_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x2_t v69;
  float32x4_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  _BYTE v78[5120];
  unint64_t v79;

  v69 = COERCE_INT32X2_T(MEMORY[0x24BDAC7A8](a1));
  v6 = v5;
  v7 = -5120;
  do
  {
    v8 = &v78[v7];
    *((_OWORD *)v8 + 321) = 0uLL;
    *((_OWORD *)v8 + 320) = 0uLL;
    v7 += 40;
  }
  while (v7);
  v79 = 0;
  *(_QWORD *)&v75 = v1;
  *((_QWORD *)&v75 + 1) = v2;
  *(_QWORD *)&v76 = v3;
  *((_QWORD *)&v76 + 1) = v4;
  v77 = 0;
  result = re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v78, (uint64_t)&v75);
  v11 = v79;
  if (v79)
  {
    v12 = (float32x4_t)vdupq_lane_s32(v69, 0);
    v68 = vdupq_n_s32(0x7F800000u);
    v70 = v12;
    while (v11 < 0x81)
    {
      --v11;
      v13 = &v78[40 * v11];
      v14 = *(_QWORD *)v13;
      v15 = *((_QWORD *)v13 + 1);
      v16 = *((_QWORD *)v13 + 2);
      v17 = *((_QWORD *)v13 + 3);
      v18 = *((_DWORD *)v13 + 8);
      v79 = v11;
      if (v17 * v15 > 0x63)
      {
        v26.i64[0] = 0x7F0000007FLL;
        v26.i64[1] = 0x7F0000007FLL;
        v27.i64[0] = 0x7F0000007FLL;
        v27.i64[1] = 0x7F0000007FLL;
        v28 = (float32x4_t)v68;
        if (*((_QWORD *)&v73 + 1))
        {
          v29 = (float32x4_t *)v73;
          v28 = (float32x4_t)vdupq_n_s32(0x7F800000u);
          do
          {
            v28.i32[3] = 0;
            v30 = *v29;
            v31 = v29[1];
            v29 += 3;
            v30.i32[3] = 0;
            v27.i32[3] = 0;
            v28 = vminnmq_f32(v28, v30);
            v31.i32[3] = 0;
            v27 = vmaxnmq_f32(v27, v31);
          }
          while (v29 != (float32x4_t *)(v73 + 48 * *((_QWORD *)&v73 + 1)));
        }
        v32 = (float32x4_t)v68;
        if (*((_QWORD *)&v74 + 1))
        {
          v33 = (float32x4_t *)v74;
          v26.i64[0] = 0x7F0000007FLL;
          v26.i32[2] = 127;
          v32 = (float32x4_t)v68;
          do
          {
            v32.i32[3] = 0;
            v34 = *v33;
            v35 = v33[1];
            v33 += 3;
            v34.i32[3] = 0;
            v26.i32[3] = 0;
            v32 = vminnmq_f32(v32, v34);
            v35.i32[3] = 0;
            v26 = vmaxnmq_f32(v26, v35);
          }
          while (v33 != (float32x4_t *)(v74 + 48 * *((_QWORD *)&v74 + 1)));
        }
        v36.i64[0] = 0x7F0000007FLL;
        v36.i64[1] = 0x7F0000007FLL;
        v37.i64[0] = 0x7F0000007FLL;
        v37.i64[1] = 0x7F0000007FLL;
        v38 = (float32x4_t)v68;
        v12 = v70;
        if (*((_QWORD *)&v71 + 1))
        {
          v39 = (float32x4_t *)v71;
          v38 = (float32x4_t)v68;
          do
          {
            v38.i32[3] = 0;
            v40 = *v39;
            v41 = v39[1];
            v39 += 3;
            v40.i32[3] = 0;
            v37.i32[3] = 0;
            v38 = vminnmq_f32(v38, v40);
            v41.i32[3] = 0;
            v37 = vmaxnmq_f32(v37, v41);
          }
          while (v39 != (float32x4_t *)(v71 + 48 * *((_QWORD *)&v71 + 1)));
        }
        v42 = (float32x4_t)v68;
        if (*((_QWORD *)&v72 + 1))
        {
          v43 = (float32x4_t *)v72;
          v36.i64[0] = 0x7F0000007FLL;
          v36.i32[2] = 127;
          v42 = (float32x4_t)v68;
          do
          {
            v42.i32[3] = 0;
            v44 = *v43;
            v45 = v43[1];
            v43 += 3;
            v44.i32[3] = 0;
            v36.i32[3] = 0;
            v42 = vminnmq_f32(v42, v44);
            v45.i32[3] = 0;
            v36 = vmaxnmq_f32(v36, v45);
          }
          while (v43 != (float32x4_t *)(v72 + 48 * *((_QWORD *)&v72 + 1)));
        }
        v46 = (v18 + 1) % 3;
        v47 = (uint32x4_t)vcgtq_f32(v28, v37);
        v47.i32[3] = v47.i32[2];
        v65 = v32;
        v67 = v26;
        v63 = v42;
        v64 = v36;
        if ((vmaxvq_u32(v47) & 0x80000000) == 0)
        {
          v48 = (uint32x4_t)vcgtq_f32(v38, v27);
          v48.i32[3] = v48.i32[2];
          if ((vmaxvq_u32(v48) & 0x80000000) == 0)
          {
            v75 = v73;
            v76 = v71;
            v77 = v46;
            v57 = v28;
            v58 = v27;
            v59 = v37;
            v61 = v38;
            result = re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v78, (uint64_t)&v75);
            v38 = v61;
            v42 = v63;
            v37 = v59;
            v36 = v64;
            v32 = v65;
            v28 = v57;
            v27 = v58;
            v26 = v67;
            v12 = v70;
          }
        }
        v49 = (uint32x4_t)vcgtq_f32(v28, v36);
        v49.i32[3] = v49.i32[2];
        if ((vmaxvq_u32(v49) & 0x80000000) == 0)
        {
          v50 = (uint32x4_t)vcgtq_f32(v42, v27);
          v50.i32[3] = v50.i32[2];
          if ((vmaxvq_u32(v50) & 0x80000000) == 0)
          {
            v75 = v73;
            v76 = v72;
            v77 = v46;
            v60 = v37;
            v62 = v38;
            result = re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v78, (uint64_t)&v75);
            v38 = v62;
            v42 = v63;
            v37 = v60;
            v36 = v64;
            v32 = v65;
            v26 = v67;
            v12 = v70;
          }
        }
        v51 = (uint32x4_t)vcgtq_f32(v32, v37);
        v51.i32[3] = v51.i32[2];
        if ((vmaxvq_u32(v51) & 0x80000000) == 0)
        {
          v52 = (uint32x4_t)vcgtq_f32(v38, v26);
          v52.i32[3] = v52.i32[2];
          if ((vmaxvq_u32(v52) & 0x80000000) == 0)
          {
            v75 = v74;
            v76 = v71;
            v77 = v46;
            result = re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v78, (uint64_t)&v75);
            v42 = v63;
            v36 = v64;
            v32 = v65;
            v26 = v67;
            v12 = v70;
          }
        }
        v53 = (uint32x4_t)vcgtq_f32(v32, v36);
        v53.i32[3] = v53.i32[2];
        if ((vmaxvq_u32(v53) & 0x80000000) == 0)
        {
          v54 = (uint32x4_t)vcgtq_f32(v42, v26);
          v54.i32[3] = v54.i32[2];
          if ((vmaxvq_u32(v54) & 0x80000000) == 0)
          {
            v75 = v74;
            v76 = v72;
            v77 = v46;
            result = re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push((uint64_t)v78, (uint64_t)&v75);
            v12 = v70;
          }
        }
        v11 = v79;
        if (!v79)
          return result;
      }
      else
      {
        if (v15)
        {
          v66 = v11;
          for (i = 0; i != v15; ++i)
          {
            if (v17)
            {
              v20 = (float32x4_t *)(v14 + 48 * i);
              v21 = (float32x4_t *)v16;
              v22 = v17;
              do
              {
                if (v20[2].i32[0] != v21[2].i32[0])
                {
                  v23 = (uint32x4_t)vcgtq_f32(*v20, vaddq_f32(v12, v21[1]));
                  v23.i32[3] = v23.i32[2];
                  if ((vmaxvq_u32(v23) & 0x80000000) == 0)
                  {
                    v24 = (uint32x4_t)vcgtq_f32(vsubq_f32(*v21, v12), v20[1]);
                    v24.i32[3] = v24.i32[2];
                    if ((vmaxvq_u32(v24) & 0x80000000) == 0)
                    {
                      v25 = *(_QWORD *)(v6 + 24);
                      if (!v25)
                        goto LABEL_48;
                      result = (*(uint64_t (**)(uint64_t, uint64_t, float32x4_t *))(*(_QWORD *)v25 + 48))(v25, v14 + 48 * i, v21);
                      v12 = v70;
                    }
                  }
                }
                v21 += 3;
                --v22;
              }
              while (v22);
            }
          }
          v11 = v66;
        }
        if (!v11)
          return result;
      }
    }
    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "m_size <= N", "top", 78);
    _os_crash();
    __break(1u);
LABEL_48:
    v55 = std::__throw_bad_function_call[abi:nn180100]();
    return re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push(v55, v56);
  }
  return result;
}

uint64_t re::InlineStack<re::intersectAABBs(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,std::function<void ()(re::Pair<re::AABB,unsigned int,true> const&,re::Pair<re::AABB,unsigned int,true> const&)>,float)::StackEntry,128ul>::push(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)(result + 5120);
  if (v2 >= 0x80)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) InlineStack is full.", "m_size < N", "push", 60);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v3 = result + 40 * v2;
    v4 = *(_OWORD *)a2;
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(v3 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)v3 = v4;
    *(_OWORD *)(v3 + 16) = v5;
    ++*(_QWORD *)(result + 5120);
  }
  return result;
}

uint64_t `anonymous namespace'::splitClusters(uint64_t *a1, uint64_t a2, unint64_t a3, int a4)
{
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  unint64_t v15;
  float32x4_t *v16;
  unint64_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  uint32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint32x4_t v40;
  int v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  uint32x4_t v46;
  int v47;
  float32x4_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t *v58;
  _OWORD *f32;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint32x4_t v65;
  int v66;
  float32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  uint32x4_t v71;
  int v72;
  float32x4_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  uint32x4_t v80;
  int v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  uint32x4_t v86;
  int v87;
  float32x4_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  uint32x4_t v101;
  int v102;
  float32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  float v106;
  uint32x4_t v107;
  int v108;
  float32x4_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t *v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  uint32x4_t v123;
  int v124;
  float32x4_t v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  uint32x4_t v129;
  int v130;
  float32x4_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  float32x4_t *v135;
  float32x4_t v136;
  float32x4_t v137;
  uint32x4_t v138;
  int v139;
  float32x4_t v140;
  uint64_t v141;
  uint64_t v142;
  float v143;
  uint32x4_t v144;
  int v145;
  float32x4_t v146;
  uint64_t v147;
  uint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  uint32x4_t v151;
  int v152;
  float32x4_t v153;
  uint64_t v154;
  uint64_t v155;
  float v156;
  uint32x4_t v157;
  int v158;
  float32x4_t v159;
  uint64_t v160;
  uint64_t v161;
  float32x4_t *v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  uint32x4_t v166;
  int v167;
  float32x4_t v168;
  uint64_t v169;
  uint64_t v170;
  float v171;
  uint32x4_t v172;
  int v173;
  float32x4_t v174;
  uint64_t v175;
  BOOL v176;
  uint64_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  uint32x4_t v187;
  int v188;
  float32x4_t v189;
  uint64_t v190;
  uint64_t v191;
  float v192;
  uint32x4_t v193;
  int v194;
  float32x4_t v195;
  uint64_t v196;
  uint64_t v197;
  float32x4_t v198;
  float32x4_t v199;
  uint32x4_t v200;
  int v201;
  float32x4_t v202;
  uint64_t v203;
  uint64_t v204;
  float v205;
  uint32x4_t v206;
  int v207;
  float32x4_t v208;
  uint64_t v209;
  uint64_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t *v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  uint32x4_t v222;
  int v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  uint64_t v227;
  uint64_t v228;
  float v229;
  uint32x4_t v230;
  int v231;
  float32x4_t v232;
  uint64_t v233;
  uint64_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t *v242;
  uint64_t v243;
  float32x4_t *v244;
  float32x4_t *v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  uint32x4_t v250;
  int v251;
  float32x4_t v252;
  uint64_t v253;
  uint64_t v254;
  float v255;
  uint32x4_t v256;
  int v257;
  float32x4_t v258;
  uint64_t v259;
  BOOL v260;
  uint64_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  uint64_t v274;

  v274 = *MEMORY[0x24BDAC8D0];
  v7 = (float32x4_t *)(a2 + 48 * (a3 >> 1));
  v268 = a4;
  if (a3 >> 1 != a3)
  {
    v13 = (float32x4_t *)(a2 + 48 * a3);
    v14 = (float32x4_t *)a2;
    do
    {
      v15 = 0xAAAAAAAAAAAAAAABLL * (v13 - v14);
      if (v15 < 2)
        break;
      if (v15 == 3)
      {
        break;
      }
      if (v15 == 2)
      {
        v218 = v13[-3];
        v219 = v13[-2];
        v217 = v13 - 3;
        v220 = *v14;
        v221 = v14[1];
        v222 = (uint32x4_t)vcgtq_f32(v218, v219);
        v222.i32[3] = v222.i32[2];
        v223 = vmaxvq_u32(v222);
        v224 = vaddq_f32(v218, v219);
        v225.i64[0] = 0x3F0000003F000000;
        v225.i64[1] = 0x3F0000003F000000;
        v226 = vmulq_f32(v224, v225);
        v227 = v226.i64[1];
        if (v223 >= 0)
          v228 = v226.i64[0];
        else
          v228 = 0;
        if (v223 < 0)
          v227 = 0;
        v271.i64[0] = v228;
        v271.i64[1] = v227;
        v229 = v271.f32[a4];
        v230 = (uint32x4_t)vcgtq_f32(v220, v221);
        v230.i32[3] = v230.i32[2];
        v231 = vmaxvq_u32(v230);
        v232 = vmulq_f32(vaddq_f32(v220, v221), v225);
        v233 = v232.i64[1];
        if (v231 >= 0)
          v234 = v232.i64[0];
        else
          v234 = 0;
        if (v231 < 0)
          v233 = 0;
        v269 = v234;
        v270 = v233;
        if (v229 < *((float *)&v269 + a4))
        {
          v235 = *v14;
          v236 = v14[2];
          v272 = v14[1];
          v273 = v236;
          v271 = v235;
          v237 = *v217;
          v238 = v217[1];
          v14[2].i32[0] = v217[2].i32[0];
          *v14 = v237;
          v14[1] = v238;
          v239 = v271;
          v240 = v272;
          v217[2].i32[0] = v273.i32[0];
          *v217 = v239;
          v217[1] = v240;
        }
        break;
      }
      if ((char *)v13 - (char *)v14 <= 383)
      {
        if (&v13[-3] != v14)
        {
          v241.i64[0] = 0x3F0000003F000000;
          v241.i64[1] = 0x3F0000003F000000;
          do
          {
            v242 = v14 + 3;
            if (v14 != v13 && v242 != v13)
            {
              v243 = 3;
              v244 = v14;
              do
              {
                v245 = &v14[v243];
                v246 = v14[v243];
                v247 = v14[v243 + 1];
                v248 = *v244;
                v249 = v244[1];
                v250 = (uint32x4_t)vcgtq_f32(v246, v247);
                v250.i32[3] = v250.i32[2];
                v251 = vmaxvq_u32(v250);
                v252 = vmulq_f32(vaddq_f32(v246, v247), v241);
                v253 = v252.i64[1];
                if (v251 >= 0)
                  v254 = v252.i64[0];
                else
                  v254 = 0;
                if (v251 < 0)
                  v253 = 0;
                v271.i64[0] = v254;
                v271.i64[1] = v253;
                v255 = v271.f32[a4];
                v256 = (uint32x4_t)vcgtq_f32(v248, v249);
                v256.i32[3] = v256.i32[2];
                v257 = vmaxvq_u32(v256);
                v258 = vmulq_f32(vaddq_f32(v248, v249), v241);
                v259 = v258.i64[1];
                v260 = v257 >= 0;
                if (v257 >= 0)
                  v261 = v258.i64[0];
                else
                  v261 = 0;
                if (!v260)
                  v259 = 0;
                v269 = v261;
                v270 = v259;
                if (v255 < *((float *)&v269 + a4))
                  v244 = &v14[v243];
                v243 += 3;
              }
              while (&v245[3] != v13);
              if (v244 != v14)
              {
                v262 = *v14;
                v263 = v14[2];
                v272 = v14[1];
                v273 = v263;
                v271 = v262;
                v264 = *v244;
                v265 = v244[1];
                v14[2].i32[0] = v244[2].i32[0];
                *v14 = v264;
                v14[1] = v265;
                v266 = v271;
                v267 = v272;
                v244[2].i32[0] = v273.i32[0];
                *v244 = v266;
                v244[1] = v267;
              }
            }
            v14 += 3;
          }
          while (v242 != &v13[-3]);
        }
        break;
      }
      v16 = &v14[3 * (v15 >> 1)];
      v17 = (unint64_t)&v13[-3];
      v19.i64[0] = 0x3F0000003F000000;
      v19.i64[1] = 0x3F0000003F000000;
      v20 = v14[1];
      v21 = (uint32x4_t)vcgtq_f32(*v14, v20);
      v21.i32[3] = v21.i32[2];
      v22 = *v16;
      v23 = v16[1];
      v24 = vmaxvq_u32(v21);
      v25 = vmulq_f32(vaddq_f32(*v14, v20), v19);
      v26 = v25.i64[1];
      if (v24 >= 0)
        v27 = v25.i64[0];
      else
        v27 = 0;
      if (v24 < 0)
        v26 = 0;
      v271.i64[0] = v27;
      v271.i64[1] = v26;
      v28 = (uint32x4_t)vcgtq_f32(v22, v23);
      v28.i32[3] = v28.i32[2];
      if ((vmaxvq_u32(v28) & 0x80000000) != 0)
      {
        v31 = 0;
        v30 = 0;
      }
      else
      {
        v29 = vmulq_f32(vaddq_f32(v22, v23), v19);
        v30 = v29.i64[1];
        v31 = v29.i64[0];
      }
      a4 = v268;
      v32 = v271.f32[v268];
      v33 = v268;
      v269 = v31;
      v270 = v30;
      if (v32 >= *((float *)&v269 + v268))
      {
        v35 = (unint64_t)&v13[-3];
        while (1)
        {
          v34 = v35 - 48;
          if ((float32x4_t *)(v35 - 48) == v14)
            break;
          v36 = *(float32x4_t *)(v35 - 48);
          v37 = *(float32x4_t *)(v35 - 32);
          v38 = *v16;
          v39 = v16[1];
          v40 = (uint32x4_t)vcgtq_f32(v36, v37);
          v40.i32[3] = v40.i32[2];
          v41 = vmaxvq_u32(v40);
          v42 = vmulq_f32(vaddq_f32(v36, v37), v19);
          v43 = v42.i64[1];
          if (v41 >= 0)
            v44 = v42.i64[0];
          else
            v44 = 0;
          if (v41 < 0)
            v43 = 0;
          v271.i64[0] = v44;
          v271.i64[1] = v43;
          v45 = v271.f32[v268];
          v46 = (uint32x4_t)vcgtq_f32(v38, v39);
          v46.i32[3] = v46.i32[2];
          v47 = vmaxvq_u32(v46);
          v48 = vmulq_f32(vaddq_f32(v38, v39), v19);
          v49 = v48.i64[1];
          v50 = v47 >= 0;
          if (v47 >= 0)
            v51 = v48.i64[0];
          else
            v51 = 0;
          if (!v50)
            v49 = 0;
          v269 = v51;
          v270 = v49;
          v35 = v34;
          if (v45 < *((float *)&v269 + v268))
          {
            v52 = *v14;
            v53 = v14[2];
            v272 = v14[1];
            v273 = v53;
            v271 = v52;
            v54 = *(float32x4_t *)v34;
            v55 = *(float32x4_t *)(v34 + 16);
            v14[2].i32[0] = *(_DWORD *)(v34 + 32);
            *v14 = v54;
            v14[1] = v55;
            v56 = v271;
            v57 = v272;
            *(_DWORD *)(v34 + 32) = v273.i32[0];
            *(float32x4_t *)v34 = v56;
            *(float32x4_t *)(v34 + 16) = v57;
            ++v18;
            goto LABEL_32;
          }
        }
        v135 = v14 + 3;
        v136 = v13[-3];
        v137 = v13[-2];
        v138 = (uint32x4_t)vcgtq_f32(*v14, v20);
        v138.i32[3] = v138.i32[2];
        v139 = vmaxvq_u32(v138);
        v140 = vmulq_f32(vaddq_f32(v20, *v14), v19);
        v141 = v140.i64[1];
        if (v139 >= 0)
          v142 = v140.i64[0];
        else
          v142 = 0;
        if (v139 < 0)
          v141 = 0;
        v271.i64[0] = v142;
        v271.i64[1] = v141;
        v143 = v271.f32[v268];
        v144 = (uint32x4_t)vcgtq_f32(v136, v137);
        v144.i32[3] = v144.i32[2];
        v145 = vmaxvq_u32(v144);
        v146 = vmulq_f32(vaddq_f32(v136, v137), v19);
        v147 = v146.i64[1];
        if (v145 >= 0)
          v148 = v146.i64[0];
        else
          v148 = 0;
        if (v145 < 0)
          v147 = 0;
        v269 = v148;
        v270 = v147;
        if (v143 >= *((float *)&v269 + v268))
        {
          while (v135 != (float32x4_t *)v17)
          {
            v149 = *v135;
            v150 = v135[1];
            v151 = (uint32x4_t)vcgtq_f32(*v14, v20);
            v151.i32[3] = v151.i32[2];
            v152 = vmaxvq_u32(v151);
            v153 = vmulq_f32(vaddq_f32(v20, *v14), v19);
            v154 = v153.i64[1];
            if (v152 >= 0)
              v155 = v153.i64[0];
            else
              v155 = 0;
            if (v152 < 0)
              v154 = 0;
            v271.i64[0] = v155;
            v271.i64[1] = v154;
            v156 = v271.f32[v268];
            v157 = (uint32x4_t)vcgtq_f32(v149, v150);
            v157.i32[3] = v157.i32[2];
            v158 = vmaxvq_u32(v157);
            v159 = vmulq_f32(vaddq_f32(v149, v150), v19);
            v160 = v159.i64[1];
            if (v158 >= 0)
              v161 = v159.i64[0];
            else
              v161 = 0;
            if (v158 < 0)
              v160 = 0;
            v269 = v161;
            v270 = v160;
            if (v156 < *((float *)&v269 + v268))
            {
              v178 = *v135;
              v179 = v135[2];
              v272 = v135[1];
              v273 = v179;
              v271 = v178;
              v180 = *(float32x4_t *)v17;
              v181 = v13[-2];
              v135[2].i32[0] = v13[-1].i32[0];
              *v135 = v180;
              v135[1] = v181;
              v135 += 3;
              v182 = v271;
              v183 = v272;
              v13[-1].i32[0] = v273.i32[0];
              *(float32x4_t *)v17 = v182;
              v13[-2] = v183;
              goto LABEL_134;
            }
            v135 += 3;
          }
          break;
        }
LABEL_134:
        if (v135 == (float32x4_t *)v17)
          break;
        while (1)
        {
          v184 = v14[1];
          v119 = v135 - 3;
          do
          {
            v185 = v119[3];
            v186 = v119[4];
            v119 += 3;
            v187 = (uint32x4_t)vcgtq_f32(*v14, v184);
            v187.i32[3] = v187.i32[2];
            v188 = vmaxvq_u32(v187);
            v189 = vmulq_f32(vaddq_f32(v184, *v14), v19);
            v190 = v189.i64[1];
            if (v188 >= 0)
              v191 = v189.i64[0];
            else
              v191 = 0;
            if (v188 < 0)
              v190 = 0;
            v271.i64[0] = v191;
            v271.i64[1] = v190;
            v192 = v271.f32[v33];
            v193 = (uint32x4_t)vcgtq_f32(v185, v186);
            v193.i32[3] = v193.i32[2];
            v194 = vmaxvq_u32(v193);
            v195 = vmulq_f32(vaddq_f32(v185, v186), v19);
            v196 = v195.i64[1];
            if (v194 >= 0)
              v197 = v195.i64[0];
            else
              v197 = 0;
            if (v194 < 0)
              v196 = 0;
            v269 = v197;
            v270 = v196;
          }
          while (v192 >= *((float *)&v269 + v33));
          v135 = v119 + 3;
          do
          {
            v198 = *(float32x4_t *)(v17 - 48);
            v199 = *(float32x4_t *)(v17 - 32);
            v17 -= 48;
            v200 = (uint32x4_t)vcgtq_f32(*v14, v184);
            v200.i32[3] = v200.i32[2];
            v201 = vmaxvq_u32(v200);
            v202 = vmulq_f32(vaddq_f32(v184, *v14), v19);
            v203 = v202.i64[1];
            if (v201 >= 0)
              v204 = v202.i64[0];
            else
              v204 = 0;
            if (v201 < 0)
              v203 = 0;
            v271.i64[0] = v204;
            v271.i64[1] = v203;
            v205 = v271.f32[v33];
            v206 = (uint32x4_t)vcgtq_f32(v198, v199);
            v206.i32[3] = v206.i32[2];
            v207 = vmaxvq_u32(v206);
            v208 = vmulq_f32(vaddq_f32(v198, v199), v19);
            v209 = v208.i64[1];
            if (v207 >= 0)
              v210 = v208.i64[0];
            else
              v210 = 0;
            if (v207 < 0)
              v209 = 0;
            v269 = v210;
            v270 = v209;
          }
          while (v205 < *((float *)&v269 + v33));
          if ((unint64_t)v119 >= v17)
            break;
          v211 = *v119;
          v212 = v119[2];
          v272 = v119[1];
          v273 = v212;
          v271 = v211;
          v213 = *(float32x4_t *)v17;
          v214 = *(float32x4_t *)(v17 + 16);
          v119[2].i32[0] = *(_DWORD *)(v17 + 32);
          *v119 = v213;
          v119[1] = v214;
          v215 = v271;
          v216 = v272;
          *(_DWORD *)(v17 + 32) = v273.i32[0];
          *(float32x4_t *)v17 = v215;
          *(float32x4_t *)(v17 + 16) = v216;
        }
        if (v119 > v7)
          break;
      }
      else
      {
        v34 = (unint64_t)&v13[-3];
LABEL_32:
        v58 = v14 + 3;
        if ((unint64_t)&v14[3] >= v34)
        {
          v61 = v14 + 3;
        }
        else
        {
          f32 = (_OWORD *)v14[3].f32;
          while (1)
          {
            v60 = v16[1];
            v61 = (float32x4_t *)(f32 - 3);
            do
            {
              v62 = v61[3];
              v63 = v61[4];
              v61 += 3;
              v64 = *v16;
              v65 = (uint32x4_t)vcgtq_f32(v62, v63);
              v65.i32[3] = v65.i32[2];
              v66 = vmaxvq_u32(v65);
              v67 = vmulq_f32(vaddq_f32(v62, v63), v19);
              v68 = v67.i64[1];
              if (v66 >= 0)
                v69 = v67.i64[0];
              else
                v69 = 0;
              if (v66 < 0)
                v68 = 0;
              v271.i64[0] = v69;
              v271.i64[1] = v68;
              v70 = v271.f32[v33];
              v71 = (uint32x4_t)vcgtq_f32(v64, v60);
              v71.i32[3] = v71.i32[2];
              v72 = vmaxvq_u32(v71);
              v73 = vmulq_f32(vaddq_f32(v60, v64), v19);
              v74 = v73.i64[1];
              v75 = v72 >= 0;
              if (v72 >= 0)
                v76 = v73.i64[0];
              else
                v76 = 0;
              if (!v75)
                v74 = 0;
              v269 = v76;
              v270 = v74;
            }
            while (v70 < *((float *)&v269 + v33));
            f32 = (_OWORD *)v61[3].f32;
            do
            {
              v77 = *(float32x4_t *)(v34 - 48);
              v78 = *(float32x4_t *)(v34 - 32);
              v34 -= 48;
              v79 = *v16;
              v80 = (uint32x4_t)vcgtq_f32(v77, v78);
              v80.i32[3] = v80.i32[2];
              v81 = vmaxvq_u32(v80);
              v82 = vmulq_f32(vaddq_f32(v77, v78), v19);
              v83 = v82.i64[1];
              if (v81 >= 0)
                v84 = v82.i64[0];
              else
                v84 = 0;
              if (v81 < 0)
                v83 = 0;
              v271.i64[0] = v84;
              v271.i64[1] = v83;
              v85 = v271.f32[v33];
              v86 = (uint32x4_t)vcgtq_f32(v79, v60);
              v86.i32[3] = v86.i32[2];
              v87 = vmaxvq_u32(v86);
              v88 = vmulq_f32(vaddq_f32(v60, v79), v19);
              v89 = v88.i64[1];
              v90 = v87 >= 0;
              if (v87 >= 0)
                v91 = v88.i64[0];
              else
                v91 = 0;
              if (!v90)
                v89 = 0;
              v269 = v91;
              v270 = v89;
            }
            while (v85 >= *((float *)&v269 + v33));
            if ((unint64_t)v61 >= v34)
              break;
            v92 = *v61;
            v93 = v61[2];
            v272 = v61[1];
            v273 = v93;
            v271 = v92;
            v94 = *(float32x4_t *)v34;
            v95 = *(float32x4_t *)(v34 + 16);
            v61[2].i32[0] = *(_DWORD *)(v34 + 32);
            *v61 = v94;
            v61[1] = v95;
            v96 = v271;
            v97 = v272;
            *(_DWORD *)(v34 + 32) = v273.i32[0];
            *(float32x4_t *)v34 = v96;
            *(float32x4_t *)(v34 + 16) = v97;
            ++v18;
            if (v61 == v16)
              v16 = (float32x4_t *)v34;
          }
        }
        if (v61 != v16)
        {
          v98 = v16[1];
          v99 = *v61;
          v100 = v61[1];
          v101 = (uint32x4_t)vcgtq_f32(*v16, v98);
          v101.i32[3] = v101.i32[2];
          v102 = vmaxvq_u32(v101);
          v103 = vmulq_f32(vaddq_f32(*v16, v98), v19);
          v104 = v103.i64[1];
          if (v102 >= 0)
            v105 = v103.i64[0];
          else
            v105 = 0;
          if (v102 < 0)
            v104 = 0;
          v271.i64[0] = v105;
          v271.i64[1] = v104;
          v106 = v271.f32[v33];
          v107 = (uint32x4_t)vcgtq_f32(v99, v100);
          v107.i32[3] = v107.i32[2];
          v108 = vmaxvq_u32(v107);
          v109 = vmulq_f32(vaddq_f32(v99, v100), v19);
          v110 = v109.i64[1];
          v111 = v108 >= 0;
          if (v108 >= 0)
            v112 = v109.i64[0];
          else
            v112 = 0;
          if (!v111)
            v110 = 0;
          v269 = v112;
          v270 = v110;
          if (v106 < *((float *)&v269 + v33))
          {
            v113 = *v61;
            v114 = v61[2];
            v272 = v61[1];
            v273 = v114;
            v271 = v113;
            v115 = *v16;
            v116 = v16[1];
            v61[2].i32[0] = v16[2].i32[0];
            *v61 = v115;
            v61[1] = v116;
            v117 = v271;
            v118 = v272;
            v16[2].i32[0] = v273.i32[0];
            *v16 = v117;
            v16[1] = v118;
            ++v18;
          }
        }
        if (v61 == v7)
          break;
        if (!v18)
        {
          if (v61 <= v7)
          {
            v162 = v61 + 3;
            while (v162 != v13)
            {
              v163 = v162[1];
              v164 = v162[-3];
              v165 = v162[-2];
              v166 = (uint32x4_t)vcgtq_f32(*v162, v163);
              v166.i32[3] = v166.i32[2];
              v167 = vmaxvq_u32(v166);
              v168 = vmulq_f32(vaddq_f32(*v162, v163), v19);
              v169 = v168.i64[1];
              if (v167 >= 0)
                v170 = v168.i64[0];
              else
                v170 = 0;
              if (v167 < 0)
                v169 = 0;
              v271.i64[0] = v170;
              v271.i64[1] = v169;
              v171 = v271.f32[v33];
              v172 = (uint32x4_t)vcgtq_f32(v164, v165);
              v172.i32[3] = v172.i32[2];
              v173 = vmaxvq_u32(v172);
              v174 = vmulq_f32(vaddq_f32(v164, v165), v19);
              v175 = v174.i64[1];
              v176 = v173 >= 0;
              if (v173 >= 0)
                v177 = v174.i64[0];
              else
                v177 = 0;
              if (!v176)
                v175 = 0;
              v269 = v177;
              v270 = v175;
              v162 += 3;
              if (v171 < *((float *)&v269 + v33))
                goto LABEL_78;
            }
          }
          else
          {
            while (v58 != v61)
            {
              v120 = v58[1];
              v121 = v58[-3];
              v122 = v58[-2];
              v123 = (uint32x4_t)vcgtq_f32(*v58, v120);
              v123.i32[3] = v123.i32[2];
              v124 = vmaxvq_u32(v123);
              v125 = vmulq_f32(vaddq_f32(*v58, v120), v19);
              v126 = v125.i64[1];
              if (v124 >= 0)
                v127 = v125.i64[0];
              else
                v127 = 0;
              if (v124 < 0)
                v126 = 0;
              v271.i64[0] = v127;
              v271.i64[1] = v126;
              v128 = v271.f32[v33];
              v129 = (uint32x4_t)vcgtq_f32(v121, v122);
              v129.i32[3] = v129.i32[2];
              v130 = vmaxvq_u32(v129);
              v131 = vmulq_f32(vaddq_f32(v121, v122), v19);
              v132 = v131.i64[1];
              v133 = v130 >= 0;
              if (v130 >= 0)
                v134 = v131.i64[0];
              else
                v134 = 0;
              if (!v133)
                v132 = 0;
              v269 = v134;
              v270 = v132;
              v58 += 3;
              if (v128 < *((float *)&v269 + v33))
                goto LABEL_78;
            }
          }
          break;
        }
LABEL_78:
        if (v61 <= v7)
        {
          v119 = v61 + 3;
        }
        else
        {
          v13 = v61;
          v119 = v14;
        }
      }
      v14 = v119;
    }
    while (v13 != v7);
  }
  v8 = re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>::range(a2, a3, 0, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - a2) >> 4));
  v10 = v9;
  result = re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>::range(a2, a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - a2) >> 4), a3);
  *a1 = v8;
  a1[1] = v10;
  a1[2] = result;
  a1[3] = v12;
  return result;
}

uint64_t re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>::range(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2 <= a3)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. fromInclusive = %zu, size = %zu", "fromInclusive < size()", "range", 648, a3, a2);
    _os_crash();
    __break(1u);
  }
  else if (a2 >= a4)
  {
    return a1 + 48 * a3;
  }
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. toExclusive = %zu, size = %zu", "toExclusive <= size()", "range", 649, a3, a2);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,`anonymous namespace'::splitClusters(re::MutableSlice<re::Pair<re::AABB,unsigned int,true>>,int)::$_0 &,re::Pair<re::AABB,unsigned int,true>*>(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, int *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  uint32x4_t v7;
  int v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint32x4_t v17;
  int v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  uint32x4_t v23;
  int v24;
  float32x4_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  float v29;
  BOOL v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  __int32 v34;
  float32x4_t v35;
  BOOL v36;
  uint64_t v37;
  float v38;
  BOOL v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  __int32 v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  uint32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  __int32 v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  uint32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  float v69;
  uint32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  uint32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  __int32 v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  __int32 v90;
  float32x4_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float32x4_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x24BDAC8D0];
  v4 = a2[1];
  v5 = *a1;
  v6 = a1[1];
  v7 = (uint32x4_t)vcgtq_f32(*a2, v4);
  v7.i32[3] = v7.i32[2];
  v8 = vmaxvq_u32(v7);
  v9 = vaddq_f32(*a2, v4);
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  v11 = vmulq_f32(v9, v10);
  v12 = v11.i64[1];
  v13 = v11.i64[0];
  if (v8 >= 0)
  {
    v14 = v11.i64[1];
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v94 = v13;
  v95 = v14;
  v15 = *a4;
  v16 = *((float *)&v94 + v15);
  v17 = (uint32x4_t)vcgtq_f32(v5, v6);
  v17.i32[3] = v17.i32[2];
  v18 = vmaxvq_u32(v17);
  v19 = vmulq_f32(vaddq_f32(v5, v6), v10);
  v20 = v19.i64[1];
  if (v18 >= 0)
    v21 = v19.i64[0];
  else
    v21 = 0;
  if (v18 < 0)
    v20 = 0;
  v92 = v21;
  v93 = v20;
  v22 = a3[1];
  v23 = (uint32x4_t)vcgtq_f32(*a3, v22);
  v23.i32[3] = v23.i32[2];
  v24 = vmaxvq_u32(v23);
  v25 = vmulq_f32(vaddq_f32(*a3, v22), v10);
  v26 = v25.i64[1];
  if (v16 >= *((float *)&v92 + v15))
  {
    v36 = v24 >= 0;
    if (v24 >= 0)
      v37 = v25.i64[0];
    else
      v37 = 0;
    if (!v36)
      v26 = 0;
    v94 = v37;
    v95 = v26;
    v38 = *((float *)&v94 + v15);
    v39 = v8 >= 0;
    if (v8 >= 0)
      v40 = v11.i64[0];
    else
      v40 = 0;
    if (!v39)
      v12 = 0;
    v92 = v40;
    v93 = v12;
    if (v38 >= *((float *)&v92 + v15))
      return 0;
    v41 = a2[1];
    v96 = a2[2];
    v42 = *a2;
    v43 = a3[2].i32[0];
    v44 = a3[1];
    *a2 = *a3;
    a2[1] = v44;
    a2[2].i32[0] = v43;
    *a3 = v42;
    a3[1] = v41;
    a3[2].i32[0] = v96.i32[0];
    v45 = a2[1];
    v46 = *a1;
    v47 = a1[1];
    v48 = (uint32x4_t)vcgtq_f32(*a2, v45);
    v48.i32[3] = v48.i32[2];
    if ((vmaxvq_u32(v48) & 0x80000000) != 0)
    {
      v53 = 0;
      v52 = 0;
    }
    else
    {
      v49 = vaddq_f32(*a2, v45);
      v50.i64[0] = 0x3F0000003F000000;
      v50.i64[1] = 0x3F0000003F000000;
      v51 = vmulq_f32(v49, v50);
      v52 = v51.i64[1];
      v53 = v51.i64[0];
    }
    v94 = v53;
    v95 = v52;
    v68 = *a4;
    v69 = *((float *)&v94 + v68);
    v70 = (uint32x4_t)vcgtq_f32(v46, v47);
    v70.i32[3] = v70.i32[2];
    if ((vmaxvq_u32(v70) & 0x80000000) != 0)
    {
      v75 = 0;
      v74 = 0;
    }
    else
    {
      v71 = vaddq_f32(v46, v47);
      v72.i64[0] = 0x3F0000003F000000;
      v72.i64[1] = 0x3F0000003F000000;
      v73 = vmulq_f32(v71, v72);
      v74 = v73.i64[1];
      v75 = v73.i64[0];
    }
    v92 = v75;
    v93 = v74;
    if (v69 >= *((float *)&v92 + v68))
      return 1;
    v84 = a1[1];
    v96 = a1[2];
    v85 = *a1;
    v86 = a2[2].i32[0];
    v87 = a2[1];
    *a1 = *a2;
    a1[1] = v87;
    a1[2].i32[0] = v86;
    *a2 = v85;
    a2[1] = v84;
    a2[2].i32[0] = v96.i32[0];
    return 2;
  }
  v27 = v24 >= 0;
  if (v24 >= 0)
    v28 = v25.i64[0];
  else
    v28 = 0;
  if (!v27)
    v26 = 0;
  v94 = v28;
  v95 = v26;
  v29 = *((float *)&v94 + v15);
  v30 = v8 >= 0;
  if (v8 >= 0)
    v31 = v11.i64[0];
  else
    v31 = 0;
  if (!v30)
    v12 = 0;
  v92 = v31;
  v93 = v12;
  if (v29 >= *((float *)&v92 + v15))
  {
    v54 = a1[1];
    v96 = a1[2];
    v55 = *a1;
    v56 = a2[2].i32[0];
    v57 = a2[1];
    *a1 = *a2;
    a1[1] = v57;
    a1[2].i32[0] = v56;
    *a2 = v55;
    a2[1] = v54;
    a2[2].i32[0] = v96.i32[0];
    v58 = a3[1];
    v59 = *a2;
    v60 = a2[1];
    v61 = (uint32x4_t)vcgtq_f32(*a3, v58);
    v61.i32[3] = v61.i32[2];
    if ((vmaxvq_u32(v61) & 0x80000000) != 0)
    {
      v66 = 0;
      v65 = 0;
    }
    else
    {
      v62 = vaddq_f32(*a3, v58);
      v63.i64[0] = 0x3F0000003F000000;
      v63.i64[1] = 0x3F0000003F000000;
      v64 = vmulq_f32(v62, v63);
      v65 = v64.i64[1];
      v66 = v64.i64[0];
    }
    v94 = v66;
    v95 = v65;
    v76 = *a4;
    v77 = *((float *)&v94 + v76);
    v78 = (uint32x4_t)vcgtq_f32(v59, v60);
    v78.i32[3] = v78.i32[2];
    if ((vmaxvq_u32(v78) & 0x80000000) != 0)
    {
      v83 = 0;
      v82 = 0;
    }
    else
    {
      v79 = vaddq_f32(v59, v60);
      v80.i64[0] = 0x3F0000003F000000;
      v80.i64[1] = 0x3F0000003F000000;
      v81 = vmulq_f32(v79, v80);
      v82 = v81.i64[1];
      v83 = v81.i64[0];
    }
    v92 = v83;
    v93 = v82;
    if (v77 >= *((float *)&v92 + v76))
      return 1;
    v88 = a2[1];
    v96 = a2[2];
    v89 = *a2;
    v90 = a3[2].i32[0];
    v91 = a3[1];
    *a2 = *a3;
    a2[1] = v91;
    a2[2].i32[0] = v90;
    *a3 = v89;
    a3[1] = v88;
    a3[2].i32[0] = v96.i32[0];
    return 2;
  }
  v32 = a1[1];
  v96 = a1[2];
  v33 = *a1;
  v34 = a3[2].i32[0];
  v35 = a3[1];
  *a1 = *a3;
  a1[1] = v35;
  a1[2].i32[0] = v34;
  *a3 = v33;
  a3[1] = v32;
  a3[2].i32[0] = v96.i32[0];
  return 1;
}

